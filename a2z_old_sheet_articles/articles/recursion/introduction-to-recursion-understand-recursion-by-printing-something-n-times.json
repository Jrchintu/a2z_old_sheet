{
    "dislikes": 16,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:11:57 GMT+0530 (India Standard Time)",
    "slug": "introduction-to-recursion-understand-recursion-by-printing-something-n-times",
    "aid": "2206",
    "title": "Introduction to Recursion - Understand Recursion by printing something N times",
    "tuf_plus": "",
    "topics": [
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "recursion",
            "topic-title": "Recursion"
        }
    ],
    "content": "<!-- wp:paragraph -->\n<p><strong>Pre-requisite: </strong>The learner must know how to write a basic function in any language and how to make a function call from the main function.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>What is Recursion?</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It is a phenomenon when a function calls itself indefinitely until a specified condition is fulfilled.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Let\u2019s understand recursion with the help of an illustration :&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":7520,\"width\":683,\"height\":310,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/02/image-3.png\" alt=\"\" class=\"wp-image-7520\" width=\"683\" height=\"310\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>As we can see in the above image, a function is calling the same function inside its body. Since there is no condition to stop the recursive calls, the calls will run indefinitely until the stack runs out of memory ( stack overflow ).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>What is Stack Overflow in Recursion?</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Whenever recursion calls are executed, they\u2019re simultaneously stored in a <strong>recursion stack</strong> where they wait for the completion of the recursive function. A recursive function can only be completed if a base condition is fulfilled and the control returns to the parent function.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>But, when there is no base condition given for a particular recursive function, it gets called indefinitely which results in a Stack Overflow i.e, exceeding the memory limit of the recursion stack and hence the program terminates giving a Segmentation Fault error.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The illustration above also represents the case of a Stack Overflow as there is no terminating condition for recursion to stop, hence it will also result in a memory limit exceeded error.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":7521,\"width\":240,\"height\":372,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/02/image-4.png\" alt=\"\" class=\"wp-image-7521\" width=\"240\" height=\"372\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>Base Condition</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It is the condition that is written in a recursive function in order for it to get completed and not to run infinitely. After encountering the base condition, the function terminates and returns back to its parent function simultaneously.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To get a better understanding of how the base condition is an integral part of recursive functions, let us see an example below :&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Let\u2019s say we have to print integers starting from 0 till 2 only, this will be how the pseudocode for it will look like&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">int count = 0;\nvoid func(){\n\n   if(count == 3 ) return;\n   print(count);\n   count++;\n   func();\n\n}\n\nmain()\n{\n\n  print();\n\n}\n</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>According to this pseudocode, the function will increment and print the value of count and then return when the base condition becomes true i.e, it will only print 0,1,2 and 3 and then execution gets completed.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Recursive code for printing numbers from 0 to 3 </strong>:&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    \n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nint cnt = 0;\n\nvoid print(){\n   \n   // Base Condition.\n   if(cnt == 3)  return;\n   cout&lt;&lt;cnt&lt;&lt;endl;\n\n   // Count Incremented\n   cnt++;\n   print();\n\n}\n\nint main(){\n    print();\n  return 0;\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output</strong><strong>&nbsp;</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>0<br>1<br>2</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">class Recursion {\n    static int cnt = 0;\n    static void print(){\n        \n         // Base Condition.\n         if(cnt == 3 ) return;\n         System.out.println(cnt);\n\n         // Count incremented.\n         cnt = cnt+1;\n         print();\n\n    }\n    public static void main(String[] args) {\n        print();\n    }\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output</strong><strong>&nbsp;</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>0<br>1<br>2</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Recursive Tree</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>A recursive tree is basically a representative form of recursion which depicts how functions are called and returned as a series of events happening consecutively. It is a pictorial description of the process of recursion as illustrated below :&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":7522,\"width\":407,\"height\":289,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/02/image-5.png\" alt=\"\" class=\"wp-image-7522\" width=\"407\" height=\"289\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>When a recursive call gets completed, the control returns back to its parent function which is then further executed until the last function waiting in the recursive stack returns.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>As a summary of the lecture, the basics of recursion such as the following were clear to us :&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>What is Recursion</li><li>Base Condition</li><li>Stack Overflow / Stack Space</li><li>Recursion Tree</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;<strong><a href=\"https://www.linkedin.com/in/priyanshi-goel-7b6a42210/\" target=\"_blank\" rel=\"noreferrer noopener\">Priyanshi Goel</a></strong>&nbsp;for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\" target=\"_blank\" rel=\"noreferrer noopener\">please check out this article</a>.&nbsp;<em>If you want to suggest any improvement/correction in this article please mail us at&nbsp;write4tuf@gmail.com</em></p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:embed {\"url\":\"https://www.youtube.com/watch?v=yVdKa8dnKiE\\u0026list=PLgUwDviBIf0rGlzIn_7rsaR2FQ5e6ZOL9\",\"type\":\"video\",\"providerNameSlug\":\"youtube\",\"responsive\":true,\"className\":\"wp-embed-aspect-16-9 wp-has-aspect-ratio\"} -->\n<figure class=\"wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio\"><div class=\"wp-block-embed__wrapper\">\nhttps://www.youtube.com/watch?v=yVdKa8dnKiE&amp;list=PLgUwDviBIf0rGlzIn_7rsaR2FQ5e6ZOL9\n</div></figure>\n<!-- /wp:embed -->",
    "category_tag": "recursion",
    "likes": 842,
    "preview": "Pre-requisite: The learner must know how to write a basic function in any language and how to make a function call from the main function. What is Recursion? It is a phenomenon when a function call..."
}