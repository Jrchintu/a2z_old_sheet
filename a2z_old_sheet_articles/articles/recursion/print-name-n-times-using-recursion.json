{
    "dislikes": 7,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:11:57 GMT+0530 (India Standard Time)",
    "slug": "print-name-n-times-using-recursion",
    "aid": "2205",
    "tuf_plus": "",
    "title": "Print Name N times using Recursion",
    "topics": [
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "recursion",
            "topic-title": "Recursion"
        }
    ],
    "category_tag": "recursion",
    "likes": 338,
    "preview": "Prerequisite: The learner must know how to write a simple function in any language with parameters. Now, after understanding the basics of recursion, the recursion tree, and the base case of recurs...",
    "content": "<!-- wp:paragraph -->\n<p><strong>Prerequisite: </strong>The learner must know how to write a simple function in any language with parameters.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now, after understanding the basics of recursion, the recursion tree, and the base case of recursion we can solve some basic problems of recursion which would strengthen our concepts and make us understand how recursion functions at its core.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Problem: Print your Name N times using recursion</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Since in this problem, there is no count that can be incremented each time we call a function, how can we keep a track of how many times we have printed the name?</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For this problem, we\u2019re going to be using a function along with parameters in which we can keep track of the number of times we\u2019ve printed something. To understand this problem better, let us see the pseudocode below for this :&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">void func( i, n )\n{\n   if(i&gt;n) return;\n print(\u201cRaj\u201d);\n   f( i+1,N );\n}\nmain()\n{\n  int n;\n  input(n);\n  f(1,n);\n}\n</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>We can clearly see in this pseudocode that we first call the function when the value of i is 1 and then print the name and increment i by 1 inside the parameter of the function and make a call again. But, we know that this will go on forever as i will be increasing continuously after every function call. So, to avoid this we put a base condition that if i exceeds n, then simply terminate the current recursive call and return to the previous call.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In this way, the text that we want to print would be printed n times and as soon as we exceed the count of printing by n, the function terminates.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Recursion Tree for the following problem can be represented as follows :&nbsp;</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":7516,\"width\":584,\"height\":275,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/02/image-2.png\" alt=\"\" class=\"wp-image-7516\" width=\"584\" height=\"275\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>Code</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    \n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvoid func(int i, int n){\n   \n   // Base Condition.\n   if(i&gt;n) return;\n   cout&lt;&lt;\"Raj\"&lt;&lt;endl;\n\n   // Function call to print till i increments.\n   func(i+1,n);\n\n}\n\nint main(){\n  \n  // Here, let\u2019s take the value of n to be 4.\n  int n = 4;\n  func(1,n);\n  return 0;\n\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output&nbsp;</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Raj<br>Raj<br>Raj<br>Raj</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity:</strong> O(N) { Since the function is being called n times, and for each function, we have only one printable line that takes O(1) time, so the cumulative time complexity would be O(N) }</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity:</strong> O(N) { In the worst case, the recursion stack space would be full with all the function calls waiting to get completed and that would make it an O(N) recursion stack space }.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">class Recursion {\n    \n    static void func(int i, int n){\n        \n            // Base Condition.\n            if(i&gt;n) return;\n            System.out.println(\"Raj\");\n\n            // Function call to print till i increments.\n            func(i+1,n);\n\n    }\n    public static void main(String[] args) {\n\n       // Here, let\u2019s take the value of n to be 4.\n       int n = 4;\n       func(1,n);\n    }\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output&nbsp;</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Raj<br>Raj<br>Raj<br>Raj</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity:</strong> O(N) { Since the function is being called n times, and for each function, we have only one printable line that takes O(1) time, so the cumulative time complexity would be O(N) }</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity:</strong> O(N) { In the worst case, the recursion stack space would be full with all the function calls waiting to get completed and that would make it an O(N) recursion stack space }.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em><em>Special thanks to&nbsp;<strong><a href=\"https://www.linkedin.com/in/priyanshi-goel-7b6a42210/\" target=\"_blank\" rel=\"noreferrer noopener\">Priyanshi Goel</a></strong>&nbsp;for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\" target=\"_blank\" rel=\"noreferrer noopener\">please check out this article</a>.&nbsp;<em>If you want to suggest any improvement/correction in this article please mail us at&nbsp;write4tuf@gmail.com</em></em></p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:embed {\"url\":\"https://www.youtube.com/watch?v=un6PLygfXrA\\u0026list=PLgUwDviBIf0rGlzIn_7rsaR2FQ5e6ZOL9\\u0026index=2\",\"type\":\"video\",\"providerNameSlug\":\"youtube\",\"responsive\":true,\"className\":\"wp-embed-aspect-16-9 wp-has-aspect-ratio\"} -->\n<figure class=\"wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio\"><div class=\"wp-block-embed__wrapper\">\nhttps://www.youtube.com/watch?v=un6PLygfXrA&amp;list=PLgUwDviBIf0rGlzIn_7rsaR2FQ5e6ZOL9&amp;index=2\n</div></figure>\n<!-- /wp:embed -->"
}