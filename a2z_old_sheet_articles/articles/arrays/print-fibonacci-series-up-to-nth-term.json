{
    "dislikes": 10,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:09:33 GMT+0530 (India Standard Time)",
    "slug": "print-fibonacci-series-up-to-nth-term",
    "aid": "1524",
    "title": "Print Fibonacci Series up to Nth term",
    "tuf_plus": "",
    "topics": [
        {
            "topic-id": "maths",
            "topic-title": "Maths"
        }
    ],
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement:</strong> Given an integer N. Print the Fibonacci series up to the Nth term.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Examples:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\"><strong>Example 1:</strong>\n<strong>Input:</strong> N = 5\n<strong>Output:</strong> 0 1 1 2 3 5\n<strong>Explanation:</strong> 0 1 1 2 3 5 is the fibonacci series up to 5th term.(0 based indexing)\n\n<strong>Example 2:</strong>\n<strong>Input:</strong> 6\n\n<strong>Output:</strong> 0 1 1 2 3 5 8\n<strong>Explanation:</strong> 0 1 1 2 3 5 8 is the fibonacci series upto 6th term.(o based indexing)</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Solution</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"textColor\":\"accent\"} -->\n<p class=\"has-accent-color has-text-color\"><strong><em>Disclaimer</em></strong>: <em>Don't jump directly to the solution, try it out yourself first.</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Solution 1: Naive approach</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Intuition:</strong> As we know fib(i) = fib(i-1) + fib(i-2).Simply iterate and go on calculating the ith term in the series.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Approach</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>Take an array say fib of size n+1.The 0th term and 1st term are 0 and 1 respectively.So fib(0)=0 and fib(1)=1.</li><li>Now iterate from 2 to n and calculate fib(n).fib(n)=fib(n-1) + fib(n-2).</li><li>Then print fib(0) + fib(1) + \u2026\u2026\u2026\u2026fib(n).</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    \n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint main() {\n  int n = 5;\n  if (n == 0) {\n    cout &lt;&lt; 0;\n  } else if (n == 1) {\n    cout &lt;&lt; 0 &lt;&lt; \" \" &lt;&lt; 1 &lt;&lt; \"\\n\";\n  } else {\n    int fib[n + 1];\n    fib[0] = 0;\n    fib[1] = 1;\n    for (int i = 2; i &lt;= n; i++) {\n      fib[i] = fib[i - 1] + fib[i - 2];\n    }\n    cout&lt;&lt;\"The Fibonacci Series up to \"&lt;&lt;n&lt;&lt;\"th term:\"&lt;&lt;endl;\n    for (int i = 0; i &lt;= n; i++) {\n      cout &lt;&lt; fib[i] &lt;&lt; \" \";\n    }\n  }\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The Fibonacci Series up to 5th term:<br>0 1 1 2 3 5</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O(n)+O(n), for calculating and printing the Fibonacci series.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(n), for storing Fibonacci series.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">public class TUF {\n  public static void main(String args[]) {\n    int n = 5;\n    if (n == 0) {\n      System.out.println(0);\n    } else {\n      int fib[] = new int[n + 1];\n      fib[0] = 0;\n      fib[1] = 1;\n      for (int i = 2; i &lt;= n; i++) {\n        fib[i] = fib[i - 1] + fib[i - 2];\n      }\n      System.out.println(\"The Fibonacci Series up to \"+n+\"th term:\");\n      for (int i = 0; i &lt;= n; i++) {\n        System.out.print(fib[i] + \" \");\n      }\n    }\n  }\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The Fibonacci Series up to 5th term:<br>0 1 1 2 3 5</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O(n)+O(n), for calculating and printing the Fibonacci series.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(n), for storing Fibonacci series.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Solution 2: Space optimized</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Intuition</strong>: For calculating the ith term we only need the last and second last term i.e (i-1)th and (i-2)th term, so we don't need to maintain the whole array.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Approach:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>Take two variables last and secondLast for storing (i-1)th and (i-2)th term.</li><li>Now iterate from 2 to n and calculate the ith term. ith term is last + secondLast term.</li><li>Then update secondLast term to the last term and the last term to ith term as we iterate.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    \n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nint main() {\n\tint n = 5;\n\tif (n == 0) {\n\t    cout&lt;&lt;\"The Fibonacci Series up to \"&lt;&lt;n&lt;&lt;\"th term:\"&lt;&lt;endl;\n\t\tcout &lt;&lt; 0;\n\t}\n\telse {\n\t\tint secondLast = 0;//for (i-2)th term\n\t\tint last = 1;//for (i-1)th term\n\t\tcout&lt;&lt;\"The Fibonacci Series up to \"&lt;&lt;n&lt;&lt;\"th term:\"&lt;&lt;endl;\n\t\tcout &lt;&lt; secondLast &lt;&lt; \" \" &lt;&lt; last &lt;&lt; \" \";\n\t\tint cur; //for ith term\n\t\tfor (int i = 2; i &lt;= n; i++) {\n\t\t\tcur = last + secondLast;\n\t\t\tsecondLast = last;\n\t\t\tlast = cur;\n\t\t\tcout &lt;&lt; cur &lt;&lt; \" \";\n\t\t}\n\t}\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>The Fibonacci Series up to 5th term:<br>0 1 1 2 3 5</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O(N).As we are iterating over just one for a loop.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity:</strong> O(1).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">public class TUF {\n  public static void main(String args[]) {\n    int n = 5;\n    if (n == 0) {\n    System.out.println(\"The Fibonacci Series up to \"+n+\"th term:\");\n    System.out.print(0);\n    } else {\n      int secondLast = 0;\n      int last = 1;\n      System.out.println(\"The Fibonacci Series up to \"+n+\"th term:\");\n      System.out.print(secondLast + \" \" + last + \" \");\n      int cur;\n      for (int i = 2; i &lt;= n; i++) {\n        cur = last + secondLast;\n        secondLast = last;\n        last = cur;\n        System.out.print(cur + \" \");\n      }\n    }\n  }\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The Fibonacci Series up to 5th term:<br>0 1 1 2 3 5</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O(N).As we are iterating over just one for a loop.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity:</strong> O(1).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Solution 3</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Intuition:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In this approach, instead of printing the Fibonacci series till N, we\u2019re going to print the Nth Fibonacci number using functional recursion with multiple function calls.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>One may wonder how multiple-function calls work. Let\u2019s understand through an illustration below:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":7889,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/03/Screenshot-2023-03-13-231929.png\" alt=\"\" class=\"wp-image-7889\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Similar kinds of multiple-function calls would be used in implementing the Fibonacci series where any Nth Fibonacci number can be written as a sum of (N-1)th and (N-2)th Fibonacci numbers. So, the function result would look like this:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Fibonacci(N) = Fibonacci(N-1) + Fibonacci(N-2)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Results from both the function calls would be summed and returned to the main function call.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Approach:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>Similar to all the recursion problems we\u2019ve seen before, we need a base case in this problem too in order for recursion to not go infinitely. Here, we notice that the Fibonacci series start from N = 1, where we initialize its value as 1.&nbsp;</li><li>Assume Fibonacci(0) = 0. So, Fibonacci(2) = 1+0 = 1 as the Nth Fibonacci number is the sum of the previous two Fibonacci numbers.</li><li>Similarly, we call Fibonacci(N-1) and Fibonacci(N-2) and return their sum. Both the function calls Fibonacci(N-1) and Fibonacci(N-2) would be computed individually one by one until the base condition is reached for both and then they return back to the main function.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Let us see the recursion tree for the following problem to get an even better understanding:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":7891,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/03/Screenshot-2023-03-13-232201.png\" alt=\"\" class=\"wp-image-7891\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    \n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint fibonacci(int N){\n   \n   // Base Condition.\n   if(N &lt;= 1)\n   {\n       return N;\n   }\n\n   // Problem broken down into 2 functional calls\n   // and their results combined and returned.\n   int last = fibonacci(N-1);\n   int slast = fibonacci(N-2);\n   \n   return last + slast;\n\n}\n\nint main(){\n  \n  // Here, let\u2019s take the value of N to be 4.\n  int N = 4;\n  cout&lt;&lt;fibonacci(N)&lt;&lt;endl;\n  return 0;\n\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(2^N) </strong>{ This problem involves two function calls for each iteration which further expands to 4 function calls and so on which makes worst-case time complexity to be exponential in nature }.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(N) </strong>{ At maximum there could be N function calls waiting in the recursion stack since we need to calculate the Nth Fibonacci number for which we also need to calculate (N-1) Fibonacci numbers before it }.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">class Recursion {\n    \n    static int fibonacci(int N){\n        \n            // Base Condition.\n            if(N &lt;= 1){\n                \n                return N;\n            }\n            \n            // Problem broken down into 2 functional calls\n            // and their results combined and returned.\n            int last = fibonacci(N-1);\n            int slast = fibonacci(N-2);\n            \n            return last + slast;\n            \n\n    }\n    public static void main(String[] args) {\n\n       // Here, let\u2019s take the value of N to be 4.\n       int N = 4;\n       System.out.println(fibonacci(N));\n    }\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(2^N) </strong>{ This problem involves two function calls for each iteration which further expands to 4 function calls and so on which makes worst-case time complexity to be exponential in nature }.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(N) </strong>{ At maximum there could be N function calls waiting in the recursion stack since we need to calculate the Nth Fibonacci number for which we also need to calculate (N-1) Fibonacci numbers before it }.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;<a href=\"https://www.linkedin.com/in/pranav-padawe-9486241ba/\" target=\"_blank\" rel=\"noreferrer noopener\">Pranav Padawe</a>&nbsp;and <strong><a href=\"https://www.linkedin.com/in/priyanshi-goel-7b6a42210/\" title=\"\">Priyanshi Goel</a></strong></em> <em>for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->",
    "category_tag": "arrays",
    "likes": 183,
    "preview": "Problem Statement: Given an integer N. Print the Fibonacci series up to the Nth term. Examples: Example 1: Input: N = 5 Output: 0 1 1 2 3 5 Explanation: 0 1 1 2 3 5 is the fibonacci series up to 5t..."
}