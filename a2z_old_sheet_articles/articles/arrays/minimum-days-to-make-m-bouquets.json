{
    "dislikes": 3,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:12:05 GMT+0530 (India Standard Time)",
    "slug": "minimum-days-to-make-m-bouquets",
    "aid": "2245",
    "title": "Minimum days to make M bouquets",
    "tuf_plus": "",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "binary-search",
            "topic-title": "Binary Search"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        }
    ],
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement:</strong> You are given 'N\u2019 roses and you are also given an array 'arr'\u00a0 where 'arr[i]'\u00a0 denotes that the 'ith' rose will bloom on the 'arr[i]th' day.<br>You can only pick already bloomed roses that are adjacent to make a bouquet. You are also told that you require exactly 'k' adjacent bloomed roses to make a single bouquet.<br>Find the minimum number of days required to make at least \u2018m' bouquets each containing 'k' roses. Return -1 if it is not possible.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n<details class=\"article_example_details\">\n<summary class=\"article_example_summary\">\n<span><strong>\nExamples\n</strong>\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"atricle_example_content\">\n<pre class=\"wp-block-preformatted\"><!-- Insert New Examples Here -->\n<pre class=\"wp-block-preformatted\"><strong>Example 1:</strong>\n<strong>Input Format:</strong> N = 8, arr[] = {7, 7, 7, 7, 13, 11, 12, 7}, m = 2, k = 3\n<strong>Result:</strong> 12\n<strong>Explanation:</strong> On the 12th the first 4 flowers and the last 3 flowers would have already bloomed. So, we can easily make 2 bouquets, one with the first 3 and another with the last 3 flowers.\n\n<strong>Example 2:</strong>\n<strong>Input Format:</strong> N = 5, arr[] = {1, 10, 3, 10, 2}, m = 3, k = 2\n<strong>Result:</strong> -1\n<strong>Explanation:</strong> If we want to make 3 bouquets of 2 flowers each, we need at least 6 flowers. But we are given only 5 flowers, so, we cannot make the bouquets.\n<p>\n</p><p>Let's grasp the question better with the help of an example. Consider an array: {7, 7, 7, 7, 13, 11, 12, 7}. We aim to create bouquets with k, which is 3 adjacent flowers, and we need to make m, which is 2 such bouquets. Now, if we try to make bouquets on the 11th day, the first 4 flowers and the 6th and the last flowers would have bloomed. So, we will be having 6 flowers in total on the 11th day. However, we require two groups of 3 adjacent flowers each. Although we can form one group with the first 3 adjacent flowers, we cannot create a second group. Therefore, 11 is not the answer in this case.</p>\n<p>If we choose the 12th day, we can make 2 such groups, one with the first 3 adjacent flowers and the other with the last 3 adjacent flowers. Hence, we need a minimum of 12 days to make 2 bouquets.</p>\n<p><strong>Observation:&nbsp;</strong></p>\n<ul><li><strong>Impossible case: </strong>To create m bouquets with k adjacent flowers each, we require a minimum of m*k flowers in total. If the number of flowers in the array, represented by array-size, is less than m*k, it becomes impossible to form m bouquets even after all the flowers have bloomed. <strong><em>In such cases, where array-size &lt; m*k, we should return -1</em></strong>.</li><li>&nbsp;<strong>Maximum possible answer: </strong>The maximum potential answer corresponds to the time needed for all the flowers to bloom. In other words, it is the highest value within the given array i.e. <strong>max(arr[])</strong>.</li><li><strong>Minimum possible answer: </strong>The minimum potential answer corresponds to the time needed for atleast one flower to bloom. In other words, it is the smallest value within the given array i.e. <strong>min(arr[])</strong>.</li></ul>\n<p><strong>Note: </strong>From the above observations, <strong><em>we can conclude that our answer lies between the range [min(arr[]), max(arr[])].</em></strong></p>\n<p><strong>How to calculate the number of bouquets we can make on dth day:</strong></p>\n<p>We will count the number of adjacent bloomed flowers(<em>say </em><strong><em>cnt</em></strong>) and whenever we get a flower that is not bloomed, we will add the number of bouquets we can make with \u2018cnt\u2019 adjacent flowers i.e. floor(cnt/k) to the answer. We will follow the process throughout the array.&nbsp;</p>\n<p>Now, we will write a function <strong>possible(), </strong>that will return true if, on a certain day, we can make at least m bouquets otherwise it will return false. The steps will be the following:</p>\n<p><strong>possible(arr[], day, m, k) algorithm:</strong></p>\n<ol><li>We will declare two variables i.e. \u2018cnt\u2019 and \u2018noOfB\u2019.<br>cnt -&gt; the number of adjacent flowers,<br>noOfB -&gt; the number of bouquets.</li><li>We will run a loop to traverse the array.</li><li>Inside the loop, we will do the following:<ol><li><strong>If arr[i] &lt;= day: </strong>This means the ith flower has bloomed. So, we will increase the number of adjacent flowers i.e. \u2018cnt\u2019 by 1.</li><li><strong>Otherwise, </strong>the flower has not bloomed. Here, we will calculate the number of bouquets we can make with \u2018cnt\u2019 adjacent flowers i.e. floor(cnt/k), and add it to the noOfB. Now, as this ith flower breaks the sequence of the adjacent bloomed flowers, we will set the \u2018cnt\u2019 0.</li></ol></li><li>Lastly, outside the loop, we will calculate the floor(cnt/k) and add it to the noOfB.</li><li><strong>If noOfB &gt;= m: </strong>This means, we can make at least m bouquets. So, we will return true.</li><li><strong>Otherwise, </strong>We will return false.</li></ol>\n<p><strong>Note: </strong><em>We actually pass a particular day as a parameter to the possible() function. The function returns true if it is possible to make atleast m bouquets on that particular day, otherwise, it returns false.</em></p>\n\n<p></p>\n</pre>\n</pre>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Practice Section-->\n<div class=\"practice\">\n<span><strong>Practice: </strong></span>\n<div class=\"problem-buttons\">\n\n<!-- Add Problem Link inside href -->\n<a href=\"https://bit.ly/3W84GWq\" target=\"_blank\" rel=\"noopener\">\n<span>Solve Problem</span>\n<img src=\"https://static.takeuforward.org/wp/uploads/2023/04/Group-11-5.png\" alt=\"code-studio\">\n</a>\n</div>\n</div>\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\nyourself first. </em></p>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<div class=\"horizontal_navbar_dsa_article\">\n<div class=\"grid_container_two\">\n<a href=\"#brute-force-approach\" class=\"two-boxes box-a\">\nBrute Force Approach\n</a>\n<a href=\"#optimal-approach\" class=\"two-boxes box-c\">\nOptimal Approach\n</a>\n<a href=\"#dsa_article_video_explanation\" class=\"three-boxes box-d\">\n<svg width=\"26\" height=\"26\" viewBox=\"0 0 20 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M8 10L13.19 7L8 4V10ZM19.56 2.17C19.69 2.64 19.78 3.27 19.84 4.07C19.91 4.87 19.94 5.56 19.94 6.16L20 7C20 9.19 19.84 10.8 19.56 11.83C19.31 12.73 18.73 13.31 17.83 13.56C17.36 13.69 16.5 13.78 15.18 13.84C13.88 13.91 12.69 13.94 11.59 13.94L10 14C5.81 14 3.2 13.84 2.17 13.56C1.27 13.31 0.69 12.73 0.44 11.83C0.31 11.36 0.22 10.73 0.16 9.93C0.0900001 9.13 0.0599999 8.44 0.0599999 7.84L0 7C0 4.81 0.16 3.2 0.44 2.17C0.69 1.27 1.27 0.69 2.17 0.44C2.64 0.31 3.5 0.22 4.82 0.16C6.12 0.0899998 7.31 0.0599999 8.41 0.0599999L10 0C14.19 0 16.8 0.16 17.83 0.44C18.73 0.69 19.31 1.27 19.56 2.17Z\" fill=\"red\"></path>\n</svg>\n\n</a>\n<div class=\"box-e tooltip\">\n<svg viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M12.842 9.25L11.9577 10.17C11.2502 10.89 10.8081 11.5 10.8081 13H8.84297V12.5C8.84297 11.39 9.28511 10.39 9.99255 9.67L11.2109 8.41C11.5745 8.05 11.7906 7.55 11.7906 7C11.7906 6.46957 11.5836 5.96086 11.2151 5.58579C10.8465 5.21071 10.3467 5 9.82552 5C9.30434 5 8.80451 5.21071 8.43598 5.58579C8.06745 5.96086 7.86041 6.46957 7.86041 7H5.89531C5.89531 5.93913 6.30938 4.92172 7.04644 4.17157C7.7835 3.42143 8.78316 3 9.82552 3C10.8679 3 11.8675 3.42143 12.6046 4.17157C13.3417 4.92172 13.7557 5.93913 13.7557 7C13.7543 7.84324 13.4259 8.65183 12.842 9.25ZM10.8081 17H8.84297V15H10.8081M9.82552 0C8.53521 0 7.25754 0.258658 6.06545 0.761205C4.87337 1.26375 3.79021 2.00035 2.87783 2.92893C1.03519 4.8043 0 7.34784 0 10C0 12.6522 1.03519 15.1957 2.87783 17.0711C3.79021 17.9997 4.87337 18.7362 6.06545 19.2388C7.25754 19.7413 8.53521 20 9.82552 20C12.4314 20 14.9306 18.9464 16.7732 17.0711C18.6158 15.1957 19.651 12.6522 19.651 10C19.651 4.47 15.2296 0 9.82552 0Z\" fill=\"black\"></path>\n</svg>\n<div class=\"bottom\">\n<p>Expand any one approach by clicking the given options in the bar. Clicking one approach on bar,\ncloses all other expands. You can manually expand more than one approach at a time</p>\n<i></i>\n</div>\n\n</div>\n</div>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Approaches Drop-Down -->\n<div class=\"dsa_article_dropdown_approachs \">\n\n<!-- Brute Force Approach Starts from here -->\n<div id=\"brute-force-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nBrute Force Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n<h3><strong>Naive Approach(Brute force)</strong>:&nbsp;</h3>\n<p>The extremely naive approach is to check all possible answers from min(arr[]) to max(arr[]). The minimum number for which possible() returns true, is our answer.</p>\n<h3><strong>Algorithm:</strong></h3>\n<ol><li><strong>If m*k &gt; arr.size: </strong>This means we have insufficient flowers. So, it is impossible to make m bouquets and we will return -1.</li><li>We will run a loop(<strong>say i</strong>) from min(arr[]) to max(arr[]) to check all possible answers.</li><li>Next, we will pass each potential answer, represented by the variable 'i' (which corresponds to a specific day), to the 'possible()' function. If the function returns true, indicating that we can create 'm' bouquets, we will return the value of 'i'.</li><li>Finally, if we are outside the loop, we can conclude that is impossible to make m bouquets. So, we will return -1.</li></ol>\n<p><strong>Dry-run: </strong><em>Please refer to the </em><a href=\"https://youtu.be/TXAuxeYBTdg\"><em>video</em></a><em> for the dry-run.</em></p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n\n<!-- Insert C++ code of Brute Force Here -->\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nbool possible(vector&lt;int&gt; &amp;arr, int day, int m, int k) {\n    int n = arr.size(); //size of the array\n    int cnt = 0;\n    int noOfB = 0;\n    // count the number of bouquets:\n    for (int i = 0; i &lt; n; i++) {\n        if (arr[i] &lt;= day) {\n            cnt++;\n        }\n        else {\n            noOfB += (cnt / k);\n            cnt = 0;\n        }\n    }\n    noOfB += (cnt / k);\n    return noOfB &gt;= m;\n}\nint roseGarden(vector&lt;int&gt; arr, int k, int m) {\n    long long val = m * 1ll * k * 1ll;\n    int n = arr.size(); //size of the array\n    if (val &gt; n) return -1; //impossible case.\n    //find maximum and minimum:\n    int mini = INT_MAX, maxi = INT_MIN;\n    for (int i = 0; i &lt; n; i++) {\n        mini = min(mini, arr[i]);\n        maxi = max(maxi, arr[i]);\n    }\n\n    for (int i = mini; i &lt;= maxi; i++) {\n        if (possible(arr, i, m, k))\n            return i;\n    }\n    return -1;\n}\n\nint main()\n{\n    vector&lt;int&gt; arr = {7, 7, 7, 7, 13, 11, 12, 7};\n    int k = 3;\n    int m = 2;\n    int ans = roseGarden(arr, k, m);\n    if (ans == -1)\n        cout &lt;&lt; \"We cannot make m bouquets.\\n\";\n    else\n        cout &lt;&lt; \"We can make bouquets on day \" &lt;&lt; ans &lt;&lt; \"\\n\";\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\n<!-- Insert Java code of Brute Force Here -->\nimport java.util.*;\n\npublic class tUf {\n    public static boolean possible(int[] arr, int day, int m, int k) {\n        int n = arr.length; // Size of the array\n        int cnt = 0;\n        int noOfB = 0;\n        // Count the number of bouquets:\n        for (int i = 0; i &lt; n; i++) {\n            if (arr[i] &lt;= day) {\n                cnt++;\n            } else {\n                noOfB += (cnt / k);\n                cnt = 0;\n            }\n        }\n        noOfB += (cnt / k);\n        return noOfB &gt;= m;\n    }\n\n    public static int roseGarden(int[] arr, int k, int m) {\n        long val = (long) m * k;\n        int n = arr.length; // Size of the array\n        if (val &gt; n) return -1; // Impossible case.\n        // Find maximum and minimum:\n        int mini = Integer.MAX_VALUE, maxi = Integer.MIN_VALUE;\n        for (int i = 0; i &lt; n; i++) {\n            mini = Math.min(mini, arr[i]);\n            maxi = Math.max(maxi, arr[i]);\n        }\n\n        for (int i = mini; i &lt;= maxi; i++) {\n            if (possible(arr, i, m, k))\n                return i;\n        }\n        return -1;\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {7, 7, 7, 7, 13, 11, 12, 7};\n        int k = 3;\n        int m = 2;\n        int ans = roseGarden(arr, k, m);\n        if (ans == -1)\n            System.out.println(\"We cannot make m bouquets.\");\n        else\n            System.out.println(\"We can make bouquets on day \" + ans);\n    }\n}\n\n\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\n<!-- Insert Python code of Brute Force Here -->\ndef possible(arr, day, m, k):\n    n = len(arr)  # size of the array\n    cnt = 0\n    noOfB = 0\n    # count the number of bouquets\n    for i in range(n):\n        if arr[i] &lt;= day:\n            cnt += 1\n        else:\n            noOfB += cnt // k\n            cnt = 0\n    noOfB += cnt // k\n    return noOfB &gt;= m\n\ndef roseGarden(arr, k, m):\n    val = m * k\n    n = len(arr)  # size of the array\n    if val &gt; n:\n        return -1  # impossible case\n    # find maximum and minimum\n    mini = float('inf')\n    maxi = float('-inf')\n    for i in range(n):\n        mini = min(mini, arr[i])\n        maxi = max(maxi, arr[i])\n\n    for i in range(mini, maxi+1):\n        if possible(arr, i, m, k):\n            return i\n    return -1\n\narr = [7, 7, 7, 7, 13, 11, 12, 7]\nk = 3\nm = 2\nans = roseGarden(arr, k, m)\nif ans == -1:\n    print(\"We cannot make m bouquets.\")\nelse:\n    print(\"We can make bouquets on day\", ans)\n\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\n<!-- Insert javascript code of Brute Force Here -->\nfunction possible(arr, day, m, k) {\n    let n = arr.length; // Size of the array\n    let cnt = 0;\n    let noOfB = 0;\n    // Count the number of bouquets\n    for (let i = 0; i &lt; n; i++) {\n        if (arr[i] &lt;= day) {\n            cnt++;\n        } else {\n            noOfB += Math.floor(cnt / k);\n            cnt = 0;\n        }\n    }\n    noOfB += Math.floor(cnt / k);\n    return noOfB &gt;= m;\n}\n\nfunction roseGarden(arr, k, m) {\n    let val = m * k;\n    let n = arr.length; // Size of the array\n    if (val &gt; n) return -1; // Impossible case\n    // Find maximum and minimum\n    let mini = Infinity, maxi = -Infinity;\n    for (let i = 0; i &lt; n; i++) {\n        mini = Math.min(mini, arr[i]);\n        maxi = Math.max(maxi, arr[i]);\n    }\n\n    for (let i = mini; i &lt;= maxi; i++) {\n        if (possible(arr, i, m, k))\n            return i;\n    }\n    return -1;\n}\n\nlet arr = [7, 7, 7, 7, 13, 11, 12, 7];\nlet k = 3;\nlet m = 2;\nlet ans = roseGarden(arr, k, m);\nif (ans === -1) {\n    console.log(\"We cannot make m bouquets.\");\n} else {\n    console.log(\"We can make bouquets on day \" + ans);\n}\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Brute Force Here -->\n<strong>Output:</strong> We can make bouquets on day 12.\n\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n<!-- Insert Time and Space Complexity of Brute Force Here -->\n</p><p><strong>Time Complexity: </strong>O((max(arr[])-min(arr[])+1) * N), where {max(arr[]) -&gt; maximum element of the array, min(arr[]) -&gt; minimum element of the array, N = size of the array}.<br><strong>Reason: </strong>We are running a loop to check our answers that are in the range of [min(arr[]), max(arr[])]. For every possible answer, we will call the possible() function. Inside the possible() function, we are traversing the entire array, which results in O(N).</p>\n<p><strong>Space Complexity: </strong>O(1) as we are not using any extra space to solve this problem.</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Brute Force Approach Ends here -->\n\n\n<!-- Optimal Approach Starts from here -->\n\n<div id=\"optimal-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nOptimal Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm of Better Approach Here -->\n<h3><strong>Optimal Approach(Using Binary Search)</strong>:&nbsp;</h3>\n<p>We are going to use the Binary Search algorithm to optimize the approach.</p>\n<p><em>The primary objective of the Binary Search algorithm is to efficiently determine the appropriate half to eliminate, thereby reducing the search space by half. It does this by determining a specific condition that ensures that the target is not present in that half.</em></p>\n<p>Now, we are not given any sorted array on which we can apply binary search. But, if we observe closely, we can notice that our answer space i.e. [mini(arr[]), max(arr[])] is sorted. So, we will apply binary search on the answer space.</p>\n<h3><strong>Algorithm:</strong></h3>\n<ol><li><strong>If m*k &gt; arr.size: </strong>This means we have insufficient flowers. So, it is impossible to make m bouquets and we will return -1.</li><li><strong>Next, </strong>we will find the maximum element i.e. max(arr[]), and the minimum element i.e. min(arr[]) in the array.</li><li><strong>Place the 2 pointers i.e. low and high: </strong>Initially, we will place the pointers. The pointer low will point to min(arr[]) and the high will point to max(arr[]).<br></li><li><strong>Calculate the \u2018mid\u2019: </strong>Now, inside the loop, we will calculate the value of \u2018mid\u2019 using the following formula:<br><strong>mid = (low+high) // 2 ( \u2018//\u2019 refers to integer division)</strong><strong><br></strong></li><li><strong>Eliminate the halves based on the value returned by possible(): </strong><strong><br></strong>We will pass the potential answer, represented by the variable 'mid' (which corresponds to a specific day), to the 'possible()' function.<ol><li><strong>If possible() returns true: </strong>On satisfying this condition, we can conclude that the number \u2018mid\u2019 is one of our possible answers. But we want the minimum number. So, we will eliminate the right half and consider the left half(i.e. high = mid-1).</li><li><strong>Otherwise, </strong>the value mid is smaller than the number we want. This means the numbers greater than \u2018mid\u2019 should be considered and the right half of \u2018mid\u2019 consists of such numbers. So, we will eliminate the left half and consider the right half(i.e. low = mid+1).</li></ol></li><li>Finally, outside the loop, we will return the value of low as the pointer will be pointing to the answer.</li></ol>\n<p>The steps from 3-5 will be inside a loop and the loop will continue until low crosses high.</p>\n<p><strong>Note: </strong><em>Please make sure to refer to the </em><a href=\"https://youtu.be/TXAuxeYBTdg\"><em>video</em></a><em> and try out some test cases of your own to understand, how the pointer \u2018low\u2019 will be always pointing to the answer in this case. This is also the reason we have not used any extra variable here to store the answer.</em></p>\n<p><strong>Dry-run: </strong><em>Please refer to the </em><a href=\"https://youtu.be/TXAuxeYBTdg\"><em>video</em></a><em> for the dry-run.</em></p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n\n<!-- Insert C++ code of Optimal Approach Here-->\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nbool possible(vector&lt;int&gt; &amp;arr, int day, int m, int k) {\n    int n = arr.size(); //size of the array\n    int cnt = 0;\n    int noOfB = 0;\n    // count the number of bouquets:\n    for (int i = 0; i &lt; n; i++) {\n        if (arr[i] &lt;= day) {\n            cnt++;\n        }\n        else {\n            noOfB += (cnt / k);\n            cnt = 0;\n        }\n    }\n    noOfB += (cnt / k);\n    return noOfB &gt;= m;\n}\nint roseGarden(vector&lt;int&gt; arr, int k, int m) {\n    long long val = m * 1ll * k * 1ll;\n    int n = arr.size(); //size of the array\n    if (val &gt; n) return -1; //impossible case.\n    //find maximum and minimum:\n    int mini = INT_MAX, maxi = INT_MIN;\n    for (int i = 0; i &lt; n; i++) {\n        mini = min(mini, arr[i]);\n        maxi = max(maxi, arr[i]);\n    }\n\n    //apply binary search:\n    int low = mini, high = maxi;\n    while (low &lt;= high) {\n        int mid = (low + high) / 2;\n        if (possible(arr, mid, m, k)) {\n            high = mid - 1;\n        }\n        else low = mid + 1;\n    }\n    return low;\n}\n\nint main()\n{\n    vector&lt;int&gt; arr = {7, 7, 7, 7, 13, 11, 12, 7};\n    int k = 3;\n    int m = 2;\n    int ans = roseGarden(arr, k, m);\n    if (ans == -1)\n        cout &lt;&lt; \"We cannot make m bouquets.\\n\";\n    else\n        cout &lt;&lt; \"We can make bouquets on day \" &lt;&lt; ans &lt;&lt; \"\\n\";\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\n<!-- Insert Java code of Optimal Approach Here -->\nimport java.util.*;\n\npublic class tUf {\n    public static boolean possible(int[] arr, int day, int m, int k) {\n        int n = arr.length; // Size of the array\n        int cnt = 0;\n        int noOfB = 0;\n        // Count the number of bouquets:\n        for (int i = 0; i &lt; n; i++) {\n            if (arr[i] &lt;= day) {\n                cnt++;\n            } else {\n                noOfB += (cnt / k);\n                cnt = 0;\n            }\n        }\n        noOfB += (cnt / k);\n        return noOfB &gt;= m;\n    }\n\n    public static int roseGarden(int[] arr, int k, int m) {\n        long val = (long) m * k;\n        int n = arr.length; // Size of the array\n        if (val &gt; n) return -1; // Impossible case.\n        // Find maximum and minimum:\n        int mini = Integer.MAX_VALUE, maxi = Integer.MIN_VALUE;\n        for (int i = 0; i &lt; n; i++) {\n            mini = Math.min(mini, arr[i]);\n            maxi = Math.max(maxi, arr[i]);\n        }\n\n        // Apply binary search:\n        int low = mini, high = maxi;\n        while (low &lt;= high) {\n            int mid = (low + high) / 2;\n            if (possible(arr, mid, m, k)) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return low;\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {7, 7, 7, 7, 13, 11, 12, 7};\n        int k = 3;\n        int m = 2;\n        int ans = roseGarden(arr, k, m);\n        if (ans == -1)\n            System.out.println(\"We cannot make m bouquets.\");\n        else\n            System.out.println(\"We can make bouquets on day \" + ans);\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\n<!-- Insert Python code of Optimal Approach Here -->\ndef possible(arr, day, m, k):\n    n = len(arr)  # size of the array\n    cnt = 0\n    noOfB = 0\n    # count the number of bouquets\n    for i in range(n):\n        if arr[i] &lt;= day:\n            cnt += 1\n        else:\n            noOfB += cnt // k\n            cnt = 0\n    noOfB += cnt // k\n    return noOfB &gt;= m\n\ndef roseGarden(arr, k, m):\n    val = m * k\n    n = len(arr)  # size of the array\n    if val &gt; n:\n        return -1  # impossible case\n    # find maximum and minimum\n    mini = float('inf')\n    maxi = float('-inf')\n    for i in range(n):\n        mini = min(mini, arr[i])\n        maxi = max(maxi, arr[i])\n\n    # apply binary search\n    low = mini\n    high = maxi\n    while low &lt;= high:\n        mid = (low + high) // 2\n        if possible(arr, mid, m, k):\n            high = mid - 1\n        else:\n            low = mid + 1\n    return low\n\narr = [7, 7, 7, 7, 13, 11, 12, 7]\nk = 3\nm = 2\nans = roseGarden(arr, k, m)\nif ans == -1:\n    print(\"We cannot make m bouquets.\")\nelse:\n    print(\"We can make bouquets on day\", ans)\n\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\n<!-- Insert javascript code of Brute Force Here -->\nfunction possible(arr, day, m, k) {\n    let n = arr.length; // Size of the array\n    let cnt = 0;\n    let noOfB = 0;\n    // Count the number of bouquets\n    for (let i = 0; i &lt; n; i++) {\n        if (arr[i] &lt;= day) {\n            cnt++;\n        } else {\n            noOfB += Math.floor(cnt / k);\n            cnt = 0;\n        }\n    }\n    noOfB += Math.floor(cnt / k);\n    return noOfB &gt;= m;\n}\n\nfunction roseGarden(arr, k, m) {\n    let val = m * k;\n    let n = arr.length; // Size of the array\n    if (val &gt; n) return -1; // Impossible case\n    // Find maximum and minimum\n    let mini = Infinity, maxi = -Infinity;\n    for (let i = 0; i &lt; n; i++) {\n        mini = Math.min(mini, arr[i]);\n        maxi = Math.max(maxi, arr[i]);\n    }\n\n    // Apply binary search\n    let low = mini, high = maxi;\n    while (low &lt;= high) {\n        let mid = Math.floor((low + high) / 2);\n        if (possible(arr, mid, m, k)) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return low;\n}\n\nlet arr = [7, 7, 7, 7, 13, 11, 12, 7];\nlet k = 3;\nlet m = 2;\nlet ans = roseGarden(arr, k, m);\nif (ans === -1) {\n    console.log(\"We cannot make m bouquets.\");\n} else {\n    console.log(\"We can make bouquets on day \" + ans);\n}\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Optimal Apporach Here -->\n<strong>Output:</strong>We can make bouquets on day 12 \n\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Optimal Approach-->\n</p><p><strong>Time Complexity: </strong>O(log(max(arr[])-min(arr[])+1) * N), where {max(arr[]) -&gt; maximum element of the array, min(arr[]) -&gt; minimum element of the array, N = size of the array}.<br><strong>Reason: </strong>We are applying binary search on our answers that are in the range of [min(arr[]), max(arr[])]. For every possible answer \u2018mid\u2019, we will call the possible() function. Inside the possible() function, we are traversing the entire array, which results in O(N).</p>\n<p><strong>Space Complexity: </strong>O(1) as we are not using any extra space to solve this problem.</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Optimal Approach Starts from here -->\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n<details>\n<summary class=\"main-summary\">\n<span>\nVideo Explanation\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"yt-video-wrapper\">\n\n<!-- Insert iframe embed Link of Youtube Video-->\n<iframe class=\"lazy-loaded\" loading=\"lazy\" title=\"Koko Eating Bananas\" width=\"810\" height=\"456\" data-lazy-type=\"iframe\" data-src=\"https://www.youtube.com/embed/TXAuxeYBTdg\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\" src=\"https://www.youtube.com/embed/TXAuxeYBTdg?feature=oembed\"></iframe><noscript>\n<iframe loading=\"lazy\" title=\"Koko Eating Bananas\" width=\"810\" height=\"456\" src=\"https://www.youtube.com/embed/TXAuxeYBTdg\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe></noscript>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script>\n\nconst codeSections = document.querySelectorAll('.code-section');\n\n// Get last selected language from localStorage or set default value\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\n// Update last selected language for all sections and store in localStorage\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\n// Handle copy button click event\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\n// Set initial state of the tabs\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<script>\nconst codeSections = document.querySelectorAll('.code-section');\n\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script src=\"https://takeuforward.org/UXApproachDropDowns/2ApproachJSScript.js\"></script>\n<!-- /wp:html -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to <strong><a href=\"https://www.linkedin.com/in/kriti39/\" target=\"_blank\" rel=\"noreferrer noopener\">KRITIDIPTA GHOSH</a></strong></em> <em>for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->",
    "category_tag": "arrays",
    "likes": 223,
    "preview": "Problem Statement: You are given 'N\u2019 roses and you are also given an array 'arr' where 'arr[i]' denotes that the 'ith' rose will bloom on the 'arr[i]th' day. You can only pick already bloomed roses..."
}