{
    "dislikes": 0,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:12:06 GMT+0530 (India Standard Time)",
    "slug": "split-array-largest-sum",
    "aid": "2250",
    "tuf_plus": "",
    "title": "Split Array - Largest Sum",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "binary-search",
            "topic-title": "Binary Search"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        }
    ],
    "category_tag": "arrays",
    "likes": 103,
    "preview": "Problem Statement: Given an integer array \u2018A\u2019 of size \u2018N\u2019 and an integer \u2018K'. Split the array \u2018A\u2019 into \u2018K\u2019 non-empty subarrays such that the largest sum of any subarray is minimized. Your task is t...",
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement:</strong> Given an integer array \u2018A\u2019 of size \u2018N\u2019 and an integer \u2018K'. Split the array \u2018A\u2019 into \u2018K\u2019 non-empty subarrays such that the largest sum of any subarray is minimized. Your task is to return the minimized largest sum of the split.<br>A subarray is a contiguous part of the array.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Pre-requisite: </strong><a href=\"https://youtu.be/Z0hwjftStI4\">BS-18. Allocate Books or Book Allocation | Hard Binary Search</a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n<details class=\"article_example_details\">\n<summary class=\"article_example_summary\">\n<span><strong>\nExamples\n</strong>\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"atricle_example_content\">\n<pre class=\"wp-block-preformatted\"><!-- Insert New Examples Here -->\n<pre class=\"wp-block-preformatted\"><strong>Example 1:</strong>\n<strong>Input Format:</strong> N = 5, a[] = {1,2,3,4,5}, k = 3\n<strong>Result:</strong> 6\n<strong>Explanation:</strong> There are many ways to split the array a[] into k consecutive subarrays. The best way to do this is to split the array a[] into [1, 2, 3], [4], and [5], where the largest sum among the three subarrays is only 6.\n\n<strong>Example 2:</strong>\n<strong>Input Format:</strong> N = 3, a[] = {3,5,1}, k = 3\n<strong>Result:</strong> 5\n<strong>Explanation:</strong> There is only one way to split the array a[] into 3 subarrays, i.e., [3], [5], and [1]. The largest sum among these subarrays is 5.</pre>\n\n<p>Upon close observation, we can understand that this problem is similar to the problem: <a href=\"https://youtu.be/Z0hwjftStI4\">BS-18. Allocate Books or Book Allocation | Hard Binary Search</a>. In that case, we had to allocate books to the students. But actually, we were dividing that given array based on the subarray sum. We will do the same in this case.</p>\n<p>Assume the given array is {10, 20, 30, 40} and k = 2. Now, we can split the array in the following ways:</p>\n<ul><li>10 | 20, 30, 40&nbsp; \u2192 Maximum subarray sum&nbsp; = 90</li><li>10, 20 | 30, 40&nbsp; \u2192 Maximum subarray sum = 70</li><li>10, 20, 30 | 40&nbsp; \u2192 Maximum subarray sum = 60</li></ul>\n<p>From the above allocations, we can clearly observe that in the last case, the maximum subarray sum is the minimum possible. So, 60 will be the answer.</p>\n<p><strong>Observations:</strong></p>\n<ul><li><strong>Minimum possible answer: </strong>We will get the minimum answer when we split the array into n subarrays(<em>i.e. Each subarray will have a single element</em>). Now, in this case, the maximum subarray sum will be the maximum element in the array. So, the minimum possible answer is <strong>max(arr[])</strong>.<br></li><li><strong>Maximum possible answer: </strong>We will get the maximum answer when we put all n elements into a single subarray. The maximum subarray sum will be the summation of array elements i.e. sum(arr[]). So, the maximum possible answer is <strong>sum(arr[])</strong>.</li></ul>\n<p>From the observations, it is clear that our answer lies in the <strong>range [max(arr[]), sum(arr[])]</strong>.</p>\n<p><strong>How to calculate the number of subarrays we need to make if the maximum subarray sum can be at most \u2018maxSum\u2019:</strong></p>\n<p>In order to calculate the number of subarrays we will write a function, <strong>countPartitions()</strong>. This function will take the array and \u2018maxSum\u2019 as parameters and return the number of partitions.</p>\n<p><strong>countPartitions(arr[], maxSum):</strong></p>\n<ol><li>We will first declare two variables i.e. \u2018partitions\u2019(<em>stores the no. of partitions</em>), and \u2018subarraySum\u2019(<em>stores the sum of the current subarray</em>). As we are starting with the first subarray, \u2018partitions\u2019 should be initialized with 1.</li><li>We will start traversing the given array.</li><li><strong>If subarraySum + arr[i] &lt;= maxSum: </strong>If upon adding the current element with \u2018subarraySum\u2019 does not exceed \u2018maxSum\u2019, we can insert this i-th element to the current subarray.</li><li><strong>Otherwise, </strong>we will move to the next subarray(<em>i.e. partitions += 1 </em>) and insert the i-th element into that.</li></ol>\n<p>Finally, we will return the value of \u2018<em>partitions\u2019</em>.</p>\n</pre>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Practice Section-->\n<div class=\"practice\">\n<span><strong>Practice: </strong></span>\n<div class=\"problem-buttons\">\n\n<!-- Add Problem Link inside href -->\n<a href=\"https://bit.ly/3OiMPKa\" target=\"_blank\" rel=\"noopener\">\n<span>Solve Problem</span>\n<img src=\"https://static.takeuforward.org/wp/uploads/2023/04/Group-11-5.png\" alt=\"code-studio\">\n</a>\n</div>\n</div>\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\nyourself first. </em></p>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<div class=\"horizontal_navbar_dsa_article\">\n<div class=\"grid_container_two\">\n<a href=\"#brute-force-approach\" class=\"two-boxes box-a\">\nBrute Force Approach\n</a>\n<a href=\"#optimal-approach\" class=\"two-boxes box-c\">\nOptimal Approach\n</a>\n<a href=\"#dsa_article_video_explanation\" class=\"three-boxes box-d\">\n<svg width=\"26\" height=\"26\" viewBox=\"0 0 20 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M8 10L13.19 7L8 4V10ZM19.56 2.17C19.69 2.64 19.78 3.27 19.84 4.07C19.91 4.87 19.94 5.56 19.94 6.16L20 7C20 9.19 19.84 10.8 19.56 11.83C19.31 12.73 18.73 13.31 17.83 13.56C17.36 13.69 16.5 13.78 15.18 13.84C13.88 13.91 12.69 13.94 11.59 13.94L10 14C5.81 14 3.2 13.84 2.17 13.56C1.27 13.31 0.69 12.73 0.44 11.83C0.31 11.36 0.22 10.73 0.16 9.93C0.0900001 9.13 0.0599999 8.44 0.0599999 7.84L0 7C0 4.81 0.16 3.2 0.44 2.17C0.69 1.27 1.27 0.69 2.17 0.44C2.64 0.31 3.5 0.22 4.82 0.16C6.12 0.0899998 7.31 0.0599999 8.41 0.0599999L10 0C14.19 0 16.8 0.16 17.83 0.44C18.73 0.69 19.31 1.27 19.56 2.17Z\" fill=\"red\"></path>\n</svg>\n\n</a>\n<div class=\"box-e tooltip\">\n<svg viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M12.842 9.25L11.9577 10.17C11.2502 10.89 10.8081 11.5 10.8081 13H8.84297V12.5C8.84297 11.39 9.28511 10.39 9.99255 9.67L11.2109 8.41C11.5745 8.05 11.7906 7.55 11.7906 7C11.7906 6.46957 11.5836 5.96086 11.2151 5.58579C10.8465 5.21071 10.3467 5 9.82552 5C9.30434 5 8.80451 5.21071 8.43598 5.58579C8.06745 5.96086 7.86041 6.46957 7.86041 7H5.89531C5.89531 5.93913 6.30938 4.92172 7.04644 4.17157C7.7835 3.42143 8.78316 3 9.82552 3C10.8679 3 11.8675 3.42143 12.6046 4.17157C13.3417 4.92172 13.7557 5.93913 13.7557 7C13.7543 7.84324 13.4259 8.65183 12.842 9.25ZM10.8081 17H8.84297V15H10.8081M9.82552 0C8.53521 0 7.25754 0.258658 6.06545 0.761205C4.87337 1.26375 3.79021 2.00035 2.87783 2.92893C1.03519 4.8043 0 7.34784 0 10C0 12.6522 1.03519 15.1957 2.87783 17.0711C3.79021 17.9997 4.87337 18.7362 6.06545 19.2388C7.25754 19.7413 8.53521 20 9.82552 20C12.4314 20 14.9306 18.9464 16.7732 17.0711C18.6158 15.1957 19.651 12.6522 19.651 10C19.651 4.47 15.2296 0 9.82552 0Z\" fill=\"black\"></path>\n</svg>\n<div class=\"bottom\">\n<p>Expand any one approach by clicking the given options in the bar. Clicking one approach on bar,\ncloses all other expands. You can manually expand more than one approach at a time</p>\n<i></i>\n</div>\n\n</div>\n</div>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Approaches Drop-Down -->\n<div class=\"dsa_article_dropdown_approachs \">\n\n<!-- Brute Force Approach Starts from here -->\n<div id=\"brute-force-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nBrute Force Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n<h3><strong>Naive Approach</strong>:&nbsp;</h3>\n<p>The extremely naive approach is to check all possible answers from max(arr[]) to sum(arr[]). The minimum value for which we can make k subarrays will be our answer.</p>\n<h3><strong>Algorithm:</strong></h3>\n<ol><li>First, we will find the maximum element and the summation of the given array.</li><li>We will use a loop(say <strong>maxSum</strong>) to check all possible answers from max(arr[]) to sum(arr[]).</li><li>Next, inside the loop, we will send \u2018maxSum\u2019, to the function <strong>countPartitions() </strong>function to get the number of partitions.<ol><li>The first value of \u2018maxSum\u2019, for which the number of partitions will be equal to \u2018k\u2019, will be our answer. So, we will return that particular value of \u2018maxSum\u2019.</li></ol></li><li>Finally, if we are out of the loop, we will return max(arr[]) as there cannot exist any answer smaller than that.</li></ol>\n<p><strong>Dry-run: </strong><em>Please refer to the </em><a href=\"https://youtu.be/thUd_WJn6wk\"><em>video</em></a><em> for the dry-run.</em></p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n\n<!-- Insert C++ code of Brute Force Here -->\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint countPartitions(vector&lt;int&gt; &amp;a, int maxSum) {\n    int n = a.size(); //size of array.\n    int partitions = 1;\n    long long subarraySum = 0;\n    for (int i = 0; i &lt; n; i++) {\n        if (subarraySum + a[i] &lt;= maxSum) {\n            //insert element to current subarray\n            subarraySum += a[i];\n        }\n        else {\n            //insert element to next subarray\n            partitions++;\n            subarraySum = a[i];\n        }\n    }\n    return partitions;\n}\n\nint largestSubarraySumMinimized(vector&lt;int&gt; &amp;a, int k) {\n    int low = *max_element(a.begin(), a.end());\n    int high = accumulate(a.begin(), a.end(), 0);\n\n    for (int maxSum = low; maxSum &lt;= high; maxSum++) {\n        if (countPartitions(a, maxSum) == k)\n            return maxSum;\n    }\n    return low;\n}\n\nint main()\n{\n    vector&lt;int&gt; a = {10, 20, 30, 40};\n    int k = 2;\n    int ans = largestSubarraySumMinimized(a, k);\n    cout &lt;&lt; \"The answer is: \" &lt;&lt; ans &lt;&lt; \"\\n\";\n    return 0;\n}\n\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\n<!-- Insert Java code of Brute Force Here -->\nimport java.util.*;\n\npublic class tUf {\n    public static int countPartitions(int[] a, int maxSum) {\n        int n = a.length; //size of array.\n        int partitions = 1;\n        long subarraySum = 0;\n        for (int i = 0; i &lt; n; i++) {\n            if (subarraySum + a[i] &lt;= maxSum) {\n                //insert element to current subarray\n                subarraySum += a[i];\n            } else {\n                //insert element to next subarray\n                partitions++;\n                subarraySum = a[i];\n            }\n        }\n        return partitions;\n    }\n\n    public static int largestSubarraySumMinimized(int[] a, int k) {\n        int low = a[0];\n        int high = 0;\n        //find maximum and summation:\n        for (int i = 0; i &lt; a.length; i++) {\n            low = Math.max(low, a[i]);\n            high += a[i];\n        }\n\n        for (int maxSum = low; maxSum &lt;= high; maxSum++) {\n            if (countPartitions(a, maxSum) == k)\n                return maxSum;\n        }\n        return low;\n    }\n\n    public static void main(String[] args) {\n        int[] a = {10, 20, 30, 40};\n        int k = 2;\n        int ans = largestSubarraySumMinimized(a, k);\n        System.out.println(\"The answer is: \" + ans);\n    }\n}\n\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\n<!-- Insert Python code of Brute Force Here -->\ndef countPartitions(a, maxSum):\n    n = len(a)  # size of array\n    partitions = 1\n    subarraySum = 0\n    for i in range(n):\n        if subarraySum + a[i] &lt;= maxSum:\n            # insert element to current subarray\n            subarraySum += a[i]\n        else:\n            # insert element to next subarray\n            partitions += 1\n            subarraySum = a[i]\n    return partitions\n\ndef largestSubarraySumMinimized(a, k):\n    low = max(a)\n    high = sum(a)\n\n    for maxSum in range(low, high+1):\n        if countPartitions(a, maxSum) == k:\n            return maxSum\n    return low\n\na = [10, 20, 30, 40]\nk = 2\nans = largestSubarraySumMinimized(a, k)\nprint(\"The answer is:\", ans)\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\n<!-- Insert javascript code of Brute Force Here -->\nfunction countPartitions(a, maxSum) {\n    let n = a.length;  // size of array\n    let partitions = 1;\n    let subarraySum = 0;\n    for (let i = 0; i &lt; n; i++) {\n        if (subarraySum + a[i] &lt;= maxSum) {\n            // insert element to current subarray\n            subarraySum += a[i];\n        } else {\n            // insert element to next subarray\n            partitions++;\n            subarraySum = a[i];\n        }\n    }\n    return partitions;\n}\n\nfunction largestSubarraySumMinimized(a, k) {\n    let low = Math.max(...a);\n    let high = a.reduce((acc, curr) =&gt; acc + curr, 0);\n\n    for (let maxSum = low; maxSum &lt;= high; maxSum++) {\n        if (countPartitions(a, maxSum) === k)\n            return maxSum;\n    }\n    return low;\n}\n\nlet a = [10, 20, 30, 40];\nlet k = 2;\nlet ans = largestSubarraySumMinimized(a, k);\nconsole.log(\"The answer is:\", ans);\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Brute Force Here -->\n<strong>Output:</strong> The answer is: 60\n\n\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n<!-- Insert Time and Space Complexity of Brute Force Here -->\n</p><p><strong>Time Complexity: </strong>O(N * (sum(arr[])-max(arr[])+1)), where N = size of the array, sum(arr[]) = sum of all array elements, max(arr[]) = maximum of all array elements.<br><strong>Reason: </strong>We are using a loop from max(arr[]) to sum(arr[]) to check all possible values of time. Inside the loop, we are calling the countPartitions() function for each number. Now, inside the countPartitions() function, we are using a loop that runs for N times.</p>\n<p><strong>Space Complexity:&nbsp; </strong>O(1) as we are not using any extra space to solve this problem.</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Brute Force Approach Ends here -->\n\n\n<!-- Optimal Approach Starts from here -->\n\n<div id=\"optimal-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nOptimal Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm of Better Approach Here -->\n<h3><strong>Optimal Approach(Using Binary Search)</strong>:&nbsp;</h3>\n<p>We are going to use the Binary Search algorithm to optimize the approach.</p>\n<p><em>The primary objective of the Binary Search algorithm is to efficiently determine the appropriate half to eliminate, thereby reducing the search space by half. It does this by determining a specific condition that ensures that the target is not present in that half.</em></p>\n<p>Upon closer observation, we can recognize that our answer space, represented as [max(arr[]), sum(arr[])], is actually sorted. Additionally, we can identify a pattern that allows us to divide this space into two halves: one consisting of potential answers and the other of non-viable options. So, we will apply binary search on the answer space.</p>\n<h3><strong>Algorithm:</strong></h3>\n<ol><li><strong>Place the 2 pointers i.e. low and high: </strong>Initially, we will place the pointers. The pointer low will point to max(arr[]) and the high will point to sum(arr[]).<br></li><li><strong>Calculate the \u2018mid\u2019: </strong>Now, inside the loop, we will calculate the value of \u2018mid\u2019 using the following formula:<br><strong>mid = (low+high) // 2 ( \u2018//\u2019 refers to integer division)</strong><strong><br></strong></li><li><strong>Eliminate the halves based on the number of subarrays returned by countPartitions(): </strong><strong><br></strong>We will pass the potential value of \u2018maxSum\u2019, represented by the variable 'mid', to the <strong>\u2018countPartitions()</strong>' function. This function will return the number of partitions we can make.<ol><li><strong>If partitions &gt; k: </strong>On satisfying this condition, we can conclude that the number \u2018mid\u2019 is smaller than our answer. So, we will eliminate the left half and consider the right half(i.e. low = mid+1).</li><li><strong>Otherwise, </strong>the value mid is one of the possible answers. But we want the minimum value. So, we will eliminate the right half and consider the left half(i.e. high = mid-1).</li></ol></li><li>Finally, outside the loop, we will return the value of low as the pointer will be pointing to the answer.</li></ol>\n<p>The steps from 3-4 will be inside a loop and the loop will continue until low crosses high.</p>\n<p><strong>Note: </strong><em>Please make sure to refer to the </em><a href=\"https://youtu.be/thUd_WJn6wk\"><em>video</em></a><em> and try out some test cases of your own to understand, how the pointer \u2018low\u2019 will be always pointing to the answer in this case. This is also the reason we have not used any extra variable here to store the answer.</em></p>\n<p><strong>Dry-run: </strong><em>Please refer to the </em><a href=\"https://youtu.be/thUd_WJn6wk\"><em>video</em></a><em> for the dry-run.</em></p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n\n<!-- Insert C++ code of Optimal Approach Here-->\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint countPartitions(vector&lt;int&gt; &amp;a, int maxSum) {\n    int n = a.size(); //size of array.\n    int partitions = 1;\n    long long subarraySum = 0;\n    for (int i = 0; i &lt; n; i++) {\n        if (subarraySum + a[i] &lt;= maxSum) {\n            //insert element to current subarray\n            subarraySum += a[i];\n        }\n        else {\n            //insert element to next subarray\n            partitions++;\n            subarraySum = a[i];\n        }\n    }\n    return partitions;\n}\n\nint largestSubarraySumMinimized(vector&lt;int&gt; &amp;a, int k) {\n    int low = *max_element(a.begin(), a.end());\n    int high = accumulate(a.begin(), a.end(), 0);\n    //Apply binary search:\n    while (low &lt;= high) {\n        int mid = (low + high) / 2;\n        int partitions = countPartitions(a, mid);\n        if (partitions &gt; k) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return low;\n}\n\nint main()\n{\n    vector&lt;int&gt; a = {10, 20, 30, 40};\n    int k = 2;\n    int ans = largestSubarraySumMinimized(a, k);\n    cout &lt;&lt; \"The answer is: \" &lt;&lt; ans &lt;&lt; \"\\n\";\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\n<!-- Insert Java code of Optimal Approach Here -->\nimport java.util.*;\n\npublic class tUf {\n    public static int countPartitions(int[] a, int maxSum) {\n        int n = a.length; //size of array.\n        int partitions = 1;\n        long subarraySum = 0;\n        for (int i = 0; i &lt; n; i++) {\n            if (subarraySum + a[i] &lt;= maxSum) {\n                //insert element to current subarray\n                subarraySum += a[i];\n            } else {\n                //insert element to next subarray\n                partitions++;\n                subarraySum = a[i];\n            }\n        }\n        return partitions;\n    }\n\n    public static int largestSubarraySumMinimized(int[] a, int k) {\n        int low = a[0];\n        int high = 0;\n        //find maximum and summation:\n        for (int i = 0; i &lt; a.length; i++) {\n            low = Math.max(low, a[i]);\n            high += a[i];\n        }\n\n        //Apply binary search:\n        while (low &lt;= high) {\n            int mid = (low + high) / 2;\n            int partitions = countPartitions(a, mid);\n            if (partitions &gt; k) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return low;\n    }\n\n    public static void main(String[] args) {\n        int[] a = {10, 20, 30, 40};\n        int k = 2;\n        int ans = largestSubarraySumMinimized(a, k);\n        System.out.println(\"The answer is: \" + ans);\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\n<!-- Insert Python code of Optimal Approach Here -->\ndef countPartitions(a, maxSum):\n    n = len(a)  # size of array\n    partitions = 1\n    subarraySum = 0\n    for i in range(n):\n        if subarraySum + a[i] &lt;= maxSum:\n            # insert element to current subarray\n            subarraySum += a[i]\n        else:\n            # insert element to next subarray\n            partitions += 1\n            subarraySum = a[i]\n    return partitions\n\ndef largestSubarraySumMinimized(a, k):\n    low = max(a)\n    high = sum(a)\n    # Apply binary search\n    while low &lt;= high:\n        mid = (low + high) // 2\n        partitions = countPartitions(a, mid)\n        if partitions &gt; k:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return low\n\na = [10, 20, 30, 40]\nk = 2\nans = largestSubarraySumMinimized(a, k)\nprint(\"The answer is:\", ans)\n\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\n<!-- Insert javascript code of Brute Force Here -->\nfunction countPartitions(a, maxSum) {\n    let n = a.length;  // size of array\n    let partitions = 1;\n    let subarraySum = 0;\n    for (let i = 0; i &lt; n; i++) {\n        if (subarraySum + a[i] &lt;= maxSum) {\n            // insert element to current subarray\n            subarraySum += a[i];\n        } else {\n            // insert element to next subarray\n            partitions++;\n            subarraySum = a[i];\n        }\n    }\n    return partitions;\n}\n\nfunction largestSubarraySumMinimized(a, k) {\n    let low = Math.max(...a);\n    let high = a.reduce((acc, curr) =&gt; acc + curr, 0);\n    // Apply binary search\n    while (low &lt;= high) {\n        let mid = Math.floor((low + high) / 2);\n        let partitions = countPartitions(a, mid);\n        if (partitions &gt; k) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return low;\n}\n\nlet a = [10, 20, 30, 40];\nlet k = 2;\nlet ans = largestSubarraySumMinimized(a, k);\nconsole.log(\"The answer is:\", ans);\n\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Optimal Apporach Here -->\n<strong>Output:</strong>The answer is: 60.\n\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Optimal Approach-->\n</p><p><strong>Time Complexity: </strong>O(N * log(sum(arr[])-max(arr[])+1)), where N = size of the array, sum(arr[]) = sum of all array elements, max(arr[]) = maximum of all array elements.<br><strong>Reason: </strong>We are applying binary search on [max(arr[]), sum(arr[])]. Inside the loop, we are calling the countPartitions() function for the value of \u2018mid\u2019. Now, inside the countPartitions() function, we are using a loop that runs for N times.</p>\n<p><strong>Space Complexity:&nbsp; </strong>O(1) as we are not using any extra space to solve this problem.</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Optimal Approach Starts from here -->\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n<details>\n<summary class=\"main-summary\">\n<span>\nVideo Explanation\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"yt-video-wrapper\">\n\n<!-- Insert iframe embed Link of Youtube Video-->\n<iframe class=\"lazy-loaded\" loading=\"lazy\" title=\"Split Array - Largest Sum\" width=\"810\" height=\"456\" data-lazy-type=\"iframe\" data-src=\"https://www.youtube.com/embed/thUd_WJn6wk\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\" src=\"https://www.youtube.com/embed/thUd_WJn6wk?feature=oembed\"></iframe><noscript>\n<iframe loading=\"lazy\" title=\"Split Array - Largest Sum\" width=\"810\" height=\"456\" src=\"https://www.youtube.com/embed/thUd_WJn6wk\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe></noscript>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script>\n\nconst codeSections = document.querySelectorAll('.code-section');\n\n// Get last selected language from localStorage or set default value\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\n// Update last selected language for all sections and store in localStorage\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\n// Handle copy button click event\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\n// Set initial state of the tabs\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<script>\nconst codeSections = document.querySelectorAll('.code-section');\n\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script src=\"https://takeuforward.org/UXApproachDropDowns/2ApproachJSScript.js\"></script>\n<!-- /wp:html -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to <strong><a href=\"https://www.linkedin.com/in/kriti39/\" target=\"_blank\" rel=\"noreferrer noopener\">KRITIDIPTA GHOSH</a></strong></em> <em>for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->"
}