{
    "dislikes": 8,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:12:03 GMT+0530 (India Standard Time)",
    "slug": "longest-subarray-with-sum-k-postives-and-negatives",
    "aid": "2234",
    "title": "Longest Subarray with sum K | [Postives and Negatives]",
    "tuf_plus": "",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "hashing",
            "topic-title": "Hashing"
        }
    ],
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement:</strong> Given an array and a sum k, we need to print the length of the longest subarray that sums to k.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n<details class=\"article_example_details\">\n<summary class=\"article_example_summary\">\n<span><strong>\nExamples\n</strong>\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"atricle_example_content\">\n<pre class=\"wp-block-preformatted\"><!-- Insert New Examples Here -->\n<pre class=\"wp-block-preformatted\"><strong>Example 1:</strong>\n<strong>Input Format:</strong> N = 3, k = 5, array[] = {2,3,5}\n<strong>Result:</strong> 2\n<strong>Explanation:</strong> The longest subarray with sum 5 is {2, 3}. And its length is 2.\n\n<strong>Example 2:</strong>\n<strong>Input Format</strong>: N = 3, k = 1, array[] = {-1, 1, 1}\n<strong>Result:</strong> 3\n<strong>Explanation:</strong> The longest subarray with sum 1 is {-1, 1, 1}. And its length is 3.</pre>\n</pre>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Practice Section-->\n<div class=\"practice\">\n<span><strong>Practice: </strong></span>\n<div class=\"problem-buttons\">\n\n<!-- Add Problem Link inside href -->\n<a href=\"https://www.codingninjas.com/codestudio/problems/longest-subarray-with-sum-k_5713505?utm_source=youtube&amp;utm_medium=affiliate&amp;utm_campaign=striver_Arrayproblems\" target=\"_blank\" rel=\"noopener\">\n<span>Solve Problem</span>\n<img src=\"https://static.takeuforward.org/wp/uploads/2023/04/Group-11-5.png\" alt=\"code-studio\">\n</a>\n</div>\n</div>\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\nyourself first. </em></p>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<div class=\"horizontal_navbar_dsa_article\">\n<div class=\"grid_container_three\">\n<a href=\"#brute-force-approach\" class=\"three-boxes box-a\">\nBrute Force Approach:\n</a>\n<a href=\"#better-approach\" class=\"three-boxes box-b\">\nBetter Approach:\n</a>\n<a href=\"#optimal-approach\" class=\"three-boxes box-c\">\nOptimal Approach:\n</a>\n<a href=\"#dsa_article_video_explanation\" class=\"three-boxes box-d\">\n<svg width=\"26\" height=\"26\" viewBox=\"0 0 20 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M8 10L13.19 7L8 4V10ZM19.56 2.17C19.69 2.64 19.78 3.27 19.84 4.07C19.91 4.87 19.94 5.56 19.94 6.16L20 7C20 9.19 19.84 10.8 19.56 11.83C19.31 12.73 18.73 13.31 17.83 13.56C17.36 13.69 16.5 13.78 15.18 13.84C13.88 13.91 12.69 13.94 11.59 13.94L10 14C5.81 14 3.2 13.84 2.17 13.56C1.27 13.31 0.69 12.73 0.44 11.83C0.31 11.36 0.22 10.73 0.16 9.93C0.0900001 9.13 0.0599999 8.44 0.0599999 7.84L0 7C0 4.81 0.16 3.2 0.44 2.17C0.69 1.27 1.27 0.69 2.17 0.44C2.64 0.31 3.5 0.22 4.82 0.16C6.12 0.0899998 7.31 0.0599999 8.41 0.0599999L10 0C14.19 0 16.8 0.16 17.83 0.44C18.73 0.69 19.31 1.27 19.56 2.17Z\" fill=\"red\"></path>\n</svg>\n\n</a>\n<div class=\"box-e tooltip\">\n<svg viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M12.842 9.25L11.9577 10.17C11.2502 10.89 10.8081 11.5 10.8081 13H8.84297V12.5C8.84297 11.39 9.28511 10.39 9.99255 9.67L11.2109 8.41C11.5745 8.05 11.7906 7.55 11.7906 7C11.7906 6.46957 11.5836 5.96086 11.2151 5.58579C10.8465 5.21071 10.3467 5 9.82552 5C9.30434 5 8.80451 5.21071 8.43598 5.58579C8.06745 5.96086 7.86041 6.46957 7.86041 7H5.89531C5.89531 5.93913 6.30938 4.92172 7.04644 4.17157C7.7835 3.42143 8.78316 3 9.82552 3C10.8679 3 11.8675 3.42143 12.6046 4.17157C13.3417 4.92172 13.7557 5.93913 13.7557 7C13.7543 7.84324 13.4259 8.65183 12.842 9.25ZM10.8081 17H8.84297V15H10.8081M9.82552 0C8.53521 0 7.25754 0.258658 6.06545 0.761205C4.87337 1.26375 3.79021 2.00035 2.87783 2.92893C1.03519 4.8043 0 7.34784 0 10C0 12.6522 1.03519 15.1957 2.87783 17.0711C3.79021 17.9997 4.87337 18.7362 6.06545 19.2388C7.25754 19.7413 8.53521 20 9.82552 20C12.4314 20 14.9306 18.9464 16.7732 17.0711C18.6158 15.1957 19.651 12.6522 19.651 10C19.651 4.47 15.2296 0 9.82552 0Z\" fill=\"black\"></path>\n</svg>\n<div class=\"bottom\">\n<p>Expand any one approach by clicking the given options in the bar. Clicking one approach on bar,\ncloses all other expands. You can manually expand more than one approach at a time</p>\n<i></i>\n</div>\n\n</div>\n</div>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Approaches Drop-Down -->\n<div class=\"dsa_article_dropdown_approachs \">\n\n<!-- Brute Force Approach Starts from here -->\n<div id=\"brute-force-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nBrute Force Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n<h3><strong>Naive Approach (Brute-force approach)</strong>:&nbsp;</h3>\n<p>Here, in this approach, we are going to generate all possible subarrays to solve this problem.</p>\n<p><strong>How to generate all possible subarrays?<br></strong>We will select all possible starting indices(<em>say i</em>) and all possible ending indices(<em>say j</em>) to generate all possible subarrays. The possible starting indices i.e. i can vary from index 0 to index n-1(<em>i.e. The last index</em>). For every index i, the possible ending index j can vary from i to n-1. So, the nested loops to generate all possible subarrays will be like the following:</p>\n<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/04/subarray.png\" alt=\"\" class=\"wp-image-8291\" width=\"529\" height=\"289\"></figure>\n<h3><strong>Approach:</strong></h3>\n<p>The steps are as follows:</p>\n<ol><li>First, we will run a loop(say i) that will select every possible starting index of the subarray. The possible starting indices can vary from index 0 to index n-1(n = size of the array).</li><li>Inside the loop, we will run another loop(say j) that will signify the ending index of the subarray. For every subarray starting from index i, the possible ending index can vary from index i to n-1(n = size of the array).</li><li>After that for each subarray starting from index i and ending at index j <strong>(i.e. arr[i\u2026.j]), </strong>we will run another loop to calculate the sum of all the elements(of that particular subarray).</li><li>If the sum equals k, we will consider its length i.e. (j-i+1). Among all such subarrays, we will consider the maximum length by comparing all the lengths.</li></ol>\n<h3><strong>Intuition: </strong></h3>\n<p>We will check the sum of every possible subarray and consider the one with the sum k and the maximum length among them. To get every possible subarray sum, we will be using three nested loops. The first loops(say i and j) will iterate over every possible starting index and ending index of a subarray. Basically, in each iteration, the subarray range will be from index i to index j. Using another loop we will get the sum of the elements of the subarray <strong>[i\u2026..j]</strong>. Among all the subarrays with sum k, we will consider the one with the maximum length.</p>\n<p><strong>Note: </strong><em>We are selecting every possible subarray using two nested loops and for each of them, we add all its elements using another loop.</em></p>\n<p><strong>Note: </strong><em>For a better understanding of intuition, please watch the video at the bottom of the page.</em></p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n\n<!-- Insert C++ code of Brute Force Here -->\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint getLongestSubarray(vector&lt;int&gt;&amp; a, int k) {\n    int n = a.size(); // size of the array.\n\n    int len = 0;\n    for (int i = 0; i &lt; n; i++) { // starting index\n        for (int j = i; j &lt; n; j++) { // ending index\n            // add all the elements of\n            // subarray = a[i...j]:\n            int s = 0;\n            for (int K = i; K &lt;= j; K++) {\n                s += a[K];\n            }\n\n            if (s == k)\n                len = max(len, j - i + 1);\n        }\n    }\n    return len;\n}\n\nint main()\n{\n    vector&lt;int&gt; a = { -1, 1, 1};\n    int k = 1;\n    int len = getLongestSubarray(a, k);\n    cout &lt;&lt; \"The length of the longest subarray is: \" &lt;&lt; len &lt;&lt; \"\\n\";\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\n<!-- Insert Java code of Brute Force Here -->\nimport java.util.*;\n\npublic class tUf {\n    public static int getLongestSubarray(int []a, int k) {\n        int n = a.length; // size of the array.\n\n        int len = 0;\n        for (int i = 0; i &lt; n; i++) { // starting index\n            for (int j = i; j &lt; n; j++) { // ending index\n                // add all the elements of\n                // subarray = a[i...j]:\n                int s = 0;\n                for (int K = i; K &lt;= j; K++) {\n                    s += a[K];\n                }\n\n                if (s == k)\n                    len = Math.max(len, j - i + 1);\n            }\n        }\n        return len;\n    }\n\n    public static void main(String[] args) {\n        int[] a = { -1, 1, 1};\n        int k = 1;\n        int len = getLongestSubarray(a, k);\n        System.out.println(\"The length of the longest subarray is: \" + len);\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\n<!-- Insert Python code of Brute Force Here -->\nfrom typing import List\n\ndef getLongestSubarray(a: [int], k: int) -&gt; int:\n    n = len(a) # size of the array.\n\n    length = 0\n    for i in range(n): # starting index\n        for j in range(i, n): # ending index\n            # add all the elements of\n            # subarray = a[i...j]:\n            s = 0\n            for K in range(i, j+1):\n                s += a[K]\n\n            if s == k:\n                length = max(length, j - i + 1)\n    return length\n\nif __name__ == \"__main__\":\n    a = [-1, 1, 1]\n    k = 1\n    length = getLongestSubarray(a, k)\n    print(f\"The length of the longest subarray is: {length}\")\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\n<!-- Insert JavaScript code of Brute Force Here -->\nfunction getLongestSubarray(a, k) {\n    let n = a.length; // size of the array\n\n    let len = 0;\n    for (let i = 0; i &lt; n; i++) { // starting index\n        for (let j = i; j &lt; n; j++) { // ending index\n            // add all the elements of subarray = a[i...j]\n            let s = 0;\n            for (let K = i; K &lt;= j; K++) {\n                s += a[K];\n            }\n\n            if (s === k)\n                len = Math.max(len, j - i + 1);\n        }\n    }\n    return len;\n}\n\nlet a = [-1, 1, 1];\nlet k = 1;\nlet len = getLongestSubarray(a, k);\nconsole.log(\"The length of the longest subarray is:\", len);\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Brute Force Here -->\nOutput: The length of the longest subarray is: 3\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n<!-- Insert Time and Space Complexity of Brute Force Here -->\n</p><p><strong>Time Complexity: </strong>O(N<sup>3</sup>) approx., where N = size of the array.<br><strong>Reason: </strong>We are using three nested loops, each running approximately N times.</p>\n<p><strong>Space Complexity: </strong>O(1) as we are not using any extra space.</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Brute Force Approach Ends here -->\n\n\n<!-- Better Approach Starts from here -->\n\n<div id=\"better-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nBetter Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition For Better Approach Here -->\n<h3><strong>Better Approach (Using two loops)</strong>:&nbsp;</h3>\n<p><strong>Approach:</strong></p>\n<p>The steps are as follows:</p>\n<ol><li>First, we will run a loop(say i) that will select every possible starting index of the subarray. The possible starting indices can vary from index 0 to index n-1(n = array size).</li><li>Inside the loop, we will run another loop(say j) that will signify the ending index as well as the current element of the subarray. For every subarray starting from the index i, the possible ending index can vary from index i to n-1(n = size of the array).</li><li>Inside loop j, we will add the current element to the sum of the previous subarray i.e. <strong>sum = sum + arr[j]</strong>.&nbsp;</li><li>If the sum is equal to k, we will consider its length i.e. (j-i+1). Among all such subarrays with sum k, we will consider the one with the maximum length by comparing all the lengths.</li></ol>\n<p><strong>Intuition: </strong>If we carefully observe, we can notice that to get the sum of the current subarray we just need to add the current element(i.e. <strong>arr[j]</strong>) to the sum of the previous subarray i.e. <strong>arr[i\u2026.j-1]</strong>.</p>\n<p>Assume previous subarray = <strong>arr[i\u2026\u2026j-1]</strong><strong><br></strong>current subarray = <strong>arr[i\u2026..j]</strong><strong><br></strong>Sum of <strong>arr[i\u2026.j]</strong> = <strong>(sum of arr[i\u2026.j-1]) + arr[j]</strong></p>\n<p>This is how we can remove the third loop and while moving the j pointer, we can calculate the sum.</p>\n<p><strong>Note: </strong><em>For a better understanding of intuition, please watch the video at the bottom of the page.</em></p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n\n<!-- Insert C++ Code of Better Approach Here -->\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint getLongestSubarray(vector&lt;int&gt;&amp; a, int k) {\n    int n = a.size(); // size of the array.\n\n    int len = 0;\n    for (int i = 0; i &lt; n; i++) { // starting index\n        int s = 0;\n        for (int j = i; j &lt; n; j++) { // ending index\n            // add the current element to\n            // the subarray a[i...j-1]:\n            s += a[j];\n\n            if (s == k)\n                len = max(len, j - i + 1);\n        }\n    }\n    return len;\n}\n\nint main()\n{\n    vector&lt;int&gt; a = { -1, 1, 1};\n    int k = 1;\n    int len = getLongestSubarray(a, k);\n    cout &lt;&lt; \"The length of the longest subarray is: \" &lt;&lt; len &lt;&lt; \"\\n\";\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\n<!-- Insert Java Code of Better Approach Here -->\nimport java.util.*;\n\npublic class tUf {\n    public static int getLongestSubarray(int []a, int k) {\n        int n = a.length; // size of the array.\n\n        int len = 0;\n        for (int i = 0; i &lt; n; i++) { // starting index\n            int s = 0;\n            for (int j = i; j &lt; n; j++) { // ending index\n                // add the current element to\n                // the subarray a[i...j-1]:\n                s += a[j];\n\n                if (s == k)\n                    len = Math.max(len, j - i + 1);\n            }\n        }\n        return len;\n    }\n\n    public static void main(String[] args) {\n        int[] a = { -1, 1, 1};\n        int k = 1;\n        int len = getLongestSubarray(a, k);\n        System.out.println(\"The length of the longest subarray is: \" + len);\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\n<!-- Insert Python Code of Better Approach Here -->\nfrom typing import List\n\ndef getLongestSubarray(a: [int], k: int) -&gt; int:\n    n = len(a) # size of the array.\n\n    length = 0\n    for i in range(n): # starting index\n        s = 0\n        for j in range(i, n): # ending index\n            # add the current element to\n            # the subarray a[i...j-1]:\n            s += a[j]\n\n            if s == k:\n                length = max(length, j - i + 1)\n    return length\n\nif __name__ == '__main__':\n    a = [-1, 1, 1]\n    k = 1\n    len = getLongestSubarray(a, k)\n    print(\"The length of the longest subarray is:\", len)\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\n<!-- Insert javascript Code of Better Approach Here -->\nfunction getLongestSubarray(a, k) {\n    let n = a.length; // size of the array\n\n    let len = 0;\n    for (let i = 0; i &lt; n; i++) { // starting index\n        let s = 0;\n        for (let j = i; j &lt; n; j++) { // ending index\n            // add the current element to the subarray a[i...j-1]\n            s += a[j];\n\n            if (s === k)\n                len = Math.max(len, j - i + 1);\n        }\n    }\n    return len;\n}\n\nlet a = [-1, 1, 1];\nlet k = 1;\nlet len = getLongestSubarray(a, k);\nconsole.log(\"The length of the longest subarray is:\", len);\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Better Approach Here -->\nOutput: The length of the longest subarray is: 3\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Better Approach Here -->\n</p><p><strong>Time Complexity: </strong>O(N<sup>2</sup>) approx., where N = size of the array.<br><strong>Reason: </strong>We are using two nested loops, each running approximately N times.</p>\n<p><strong>Space Complexity: </strong>O(1) as we are not using any extra space.</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Better Approach Ends from here -->\n\n\n<!-- Optimal Approach Starts from here -->\n\n<div id=\"optimal-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nOptimal Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm of Better Approach Here -->\n<h3><strong>Optimal Approach (Using Hashing)</strong>:&nbsp;</h3>\n<h3><strong>Approach:</strong></h3>\n<p>The steps are as follows:</p>\n<ol><li>First, we will declare a map to store the prefix sums and the indices.</li><li>Then we will run a loop(say i) from index 0 to n-1(n = size of the array).</li><li>For each index i, we will do the following:<ol><li>We will add the current element i.e. a[i] to the prefix sum.</li><li>If the sum is equal to k, we should consider the length of the current subarray i.e. i+1. We will compare this length with the existing length and consider the maximum one.</li><li>We will calculate the prefix sum i.e. x-k, of the remaining subarray.</li><li>If that sum of the remaining part i.e. x-k exists in the map, we will calculate the length i.e. i-preSumMap[x-k], and consider the maximum one comparing it with the existing length we have achieved until now.</li><li>If the sum, we got after step 3.1, does not exist in the map we will add that with the current index into the map. We are checking the map before insertion because we want the index to be as minimum as possible and so we will consider the earliest index where the sum x-k has occurred. [<em>Detailed discussion in the edge case section</em>]</li></ol></li></ol>\n<p>In this approach, we are using the concept of the prefix sum to solve this problem. Here, the prefix sum of a subarray ending at index i, simply means the sum of all the elements of that subarray.</p>\n<p><strong>Observation:</strong> Assume, the prefix sum of a subarray ending at index i is <strong>x</strong>. In that subarray, we will search for another subarray ending at index i, whose sum equals <strong>k</strong>. Here, we need to observe that if there exists another subarray ending at index i with sum k, then the prefix sum of the rest of the subarray will be <strong>x-k</strong>. The below image will clarify the concept:</p>\n<p>Now, <em>for a subarray ending at index i with the prefix sum x, if we remove the part with the prefix sum x-k, we will be left with the part whose sum is equal to k. And that is what we want.</em></p>\n<p>That is why, instead of searching the subarrays with sum k, we will keep track of the prefix sum of the subarrays generated at every index using a map data structure.&nbsp;</p>\n<p>In the map, we will store every prefix sum calculated, with the index(<em>where the subarray with that prefix sum ends</em>) in a &lt;key, value&gt; pair. Now, at index i, we just need to check the map data structure to get the index i.e. preSumMap[x-k] where the subarray with the prefix sum x-k ends. Then we will simply subtract that index i.e.&nbsp;preSumMap[x-k] from the current index i to get the length of the subarray with sum k i.e. len = i -preSumMap[x-k].</p>\n<p>We will apply the above process for all possible indices of the given array. The possible values of the index i can be from 0 to n-1(where n = size of the array).</p>\n<p><strong>Edge Case: Why do we need to check the map if the prefix sum already exists?</strong></p>\n<p>In the algorithm, we have seen that at step 3.4, we are checking the map if the prefix sum already exists, and if it does we are not updating it. Let\u2019s understand the reason by considering the following example:<br>Assume the given array is {2, 0, 0, 3}. If we apply the algorithm to the given array without checking, it will be like the following:</p>\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/04/longestSubarray-with.jpg\" alt=\"\" class=\"wp-image-8294\"></figure>\n<p>In steps 2 and 3 the element at index i is 0. So, in those steps, the prefix sum remains the same but the index is getting updated in the map. Now, when index i reaches the end, it calculates the length i.e. i-preSumMap[rem] = 3-2 = 1. Here it is considering only the subarray [3] which is incorrect as the longest subarray we can get is [0, 0, 3] and hence the length should be 3.</p>\n<p>Now, to avoid this edge case i.e. to maximize the calculated length, we need to observe the formula we are using to calculate the length i.e. len = i - preSumMap[rem].</p>\n<p>Now, if we minimize the term preSumMap[rem] (<em>i.e. the index where the subarray with sum x-k ends</em>), we will get the maximum length. That is why we will consider only the first or the leftmost index where the subarray with sum x-k ends. After that, we will not update that particular index even if we get a similar subarray ending at a later index.</p>\n<p>So, we will check the map before inserting the prefix sum. If it already exists in the map, we will not update it but if it is not present, we will insert it for the first time.</p>\n<p><strong>Note: </strong><em>For a better understanding of intuition, please watch the video at the bottom of the page.</em></p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n\n<!-- Insert C++ code of Optimal Approach Here-->\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint getLongestSubarray(vector&lt;int&gt;&amp; a, int k) {\n    int n = a.size(); // size of the array.\n\n    map&lt;int, int&gt; preSumMap;\n    int sum = 0;\n    int maxLen = 0;\n    for (int i = 0; i &lt; n; i++) {\n        //calculate the prefix sum till index i:\n        sum += a[i];\n\n        // if the sum = k, update the maxLen:\n        if (sum == k) {\n            maxLen = max(maxLen, i + 1);\n        }\n\n        // calculate the sum of remaining part i.e. x-k:\n        int rem = sum - k;\n\n        //Calculate the length and update maxLen:\n        if (preSumMap.find(rem) != preSumMap.end()) {\n            int len = i - preSumMap[rem];\n            maxLen = max(maxLen, len);\n        }\n\n        //Finally, update the map checking the conditions:\n        if (preSumMap.find(sum) == preSumMap.end()) {\n            preSumMap[sum] = i;\n        }\n    }\n\n    return maxLen;\n}\n\nint main()\n{\n    vector&lt;int&gt; a = { -1, 1, 1};\n    int k = 1;\n    int len = getLongestSubarray(a, k);\n    cout &lt;&lt; \"The length of the longest subarray is: \" &lt;&lt; len &lt;&lt; \"\\n\";\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\n<!-- Insert Java code of Optimal Approach Here -->\nimport java.util.*;\n\npublic class tUf {\n    public static int getLongestSubarray(int []a, int k) {\n        int n = a.length; // size of the array.\n\n        Map&lt;Integer, Integer&gt; preSumMap = new HashMap&lt;&gt;();\n        int sum = 0;\n        int maxLen = 0;\n        for (int i = 0; i &lt; n; i++) {\n            //calculate the prefix sum till index i:\n            sum += a[i];\n\n            // if the sum = k, update the maxLen:\n            if (sum == k) {\n                maxLen = Math.max(maxLen, i + 1);\n            }\n\n            // calculate the sum of remaining part i.e. x-k:\n            int rem = sum - k;\n\n            //Calculate the length and update maxLen:\n            if (preSumMap.containsKey(rem)) {\n                int len = i - preSumMap.get(rem);\n                maxLen = Math.max(maxLen, len);\n            }\n\n            //Finally, update the map checking the conditions:\n            if (!preSumMap.containsKey(sum)) {\n                preSumMap.put(sum, i);\n            }\n        }\n\n        return maxLen;\n    }\n\n    public static void main(String[] args) {\n        int[] a = { -1, 1, 1};\n        int k = 1;\n        int len = getLongestSubarray(a, k);\n        System.out.println(\"The length of the longest subarray is: \" + len);\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\n<!-- Insert Python code of Optimal Approach Here -->\nfrom typing import List\n\ndef getLongestSubarray(a: [int], k: int) -&gt; int:\n    n = len(a) # size of the array.\n\n    preSumMap = {}\n    Sum = 0\n    maxLen = 0\n    for i in range(n):\n        # calculate the prefix sum till index i:\n        Sum += a[i]\n\n        # if the sum = k, update the maxLen:\n        if Sum == k:\n            maxLen = max(maxLen, i + 1)\n\n        # calculate the sum of remaining part i.e. x-k:\n        rem = Sum - k\n\n        # Calculate the length and update maxLen:\n        if rem in preSumMap:\n            length = i - preSumMap[rem]\n            maxLen = max(maxLen, length)\n\n        # Finally, update the map checking the conditions:\n        if Sum not in preSumMap:\n            preSumMap[Sum] = i\n\n    return maxLen\n\nif __name__ == \"__main__\":\n    a = [-1, 1, 1]\n    k = 1\n    length = getLongestSubarray(a, k)\n    print(f\"The length of the longest subarray is: {length}\")\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\n<!-- Insert Python code of Optimal Approach Here -->\nfunction getLongestSubarray(a, k) {\n    let n = a.length; // size of the array\n\n    let preSumMap = new Map();\n    let sum = 0;\n    let maxLen = 0;\n    for (let i = 0; i &lt; n; i++) {\n        // calculate the prefix sum till index i\n        sum += a[i];\n\n        // if the sum = k, update the maxLen\n        if (sum === k) {\n            maxLen = Math.max(maxLen, i + 1);\n        }\n\n        // calculate the sum of remaining part i.e. x-k\n        let rem = sum - k;\n\n        // calculate the length and update maxLen\n        if (preSumMap.has(rem)) {\n            let len = i - preSumMap.get(rem);\n            maxLen = Math.max(maxLen, len);\n        }\n\n        // finally, update the map checking the conditions\n        if (!preSumMap.has(sum)) {\n            preSumMap.set(sum, i);\n        }\n    }\n\n    return maxLen;\n}\n\nlet a = [-1, 1, 1];\nlet k = 1;\nlet len = getLongestSubarray(a, k);\nconsole.log(\"The length of the longest subarray is:\", len);\n\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Optimal Apporach Here -->\nOutput: The length of the longest subarray is: 3\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Optimal Approach-->\n</p><p><strong>Time Complexity: </strong>O(N) or O(N*logN) depending on which map data structure we are using, where N = size of the array.<br><strong>Reason: </strong>For example, if we are using an unordered_map data structure in C++ the time complexity will be O(N)(<em>though in the worst case, unordered_map takes O(N) to find an element and the time complexity becomes O(N</em><em><sup>2</sup></em><em>)</em>) but if we are using a map data structure, the time complexity will be O(N*logN). The least complexity will be O(N) as we are using a loop to traverse the array.</p>\n<p><strong>Note: </strong><em>To know more about maps, please refer to this: </em><a href=\"https://takeuforward.org/hashing/hashing-maps-time-complexity-collisions-division-rule-of-hashing-strivers-a2z-dsa-course/\"><em>Hashing | Maps | Time Complexity | Collisions | Division Rule of Hashing | Strivers A2Z DSA Course</em></a><em>.</em></p>\n<p><strong>Space Complexity: </strong>O(N) as we are using a map data structure.</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Optimal Approach Starts from here -->\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n<details>\n<summary class=\"main-summary\">\n<span>\nVideo Explanation\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"yt-video-wrapper\">\n\n<!-- Insert iframe embed Link of Youtube Video-->\n<iframe class=\"lazy-loaded\" loading=\"lazy\" title=\"Longest Subarray with Given Sum(Positives+Negatives)\" width=\"810\" height=\"456\" data-lazy-type=\"iframe\" data-src=\"https://www.youtube.com/embed/frf7qxiN2qU\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\" src=\"https://www.youtube.com/embed/frf7qxiN2qU?feature=oembed\"></iframe><noscript>\n<iframe loading=\"lazy\" title=\"Longest Subarray with Given Sum(Positives+Negatives)\" width=\"810\" height=\"456\" src=\"https://www.youtube.com/embed/frf7qxiN2qU\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe></noscript>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script>\n\nconst codeSections = document.querySelectorAll('.code-section');\n\n// Get last selected language from localStorage or set default value\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\n// Update last selected language for all sections and store in localStorage\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\n// Handle copy button click event\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\n// Set initial state of the tabs\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<script>\nconst codeSections = document.querySelectorAll('.code-section');\n\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script src=\"https://takeuforward.org/UXApproachDropDowns/3ApproachJSScript.js\"></script>\n<!-- /wp:html -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;<strong><a href=\"https://www.linkedin.com/in/kriti39/\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>KRITIDIPTA GHOSH</strong></a></strong>&nbsp;for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a>.&nbsp;<em>If you want to suggest any improvement/correction in this article please mail us at&nbsp;write4tuf@gmail.com</em></p></blockquote>\n<!-- /wp:quote -->",
    "category_tag": "arrays",
    "likes": 283,
    "preview": "Problem Statement: Given an array and a sum k, we need to print the length of the longest subarray that sums to k. Examples Example 1: Input Format: N = 3, k = 5, array[] = {2,3,5} Result: 2 Explan..."
}