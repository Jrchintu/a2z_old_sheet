{
    "dislikes": 10,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:12:01 GMT+0530 (India Standard Time)",
    "slug": "find-the-missing-number-in-an-array",
    "aid": "2227",
    "title": "Find the missing number in an array",
    "tuf_plus": "",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        }
    ],
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement:</strong> Given an <strong>integer N</strong> and an array of size <strong>N-1 </strong>containing N-1 numbers between 1 to N. Find the number(<em>between 1 to N</em>), that is not present in the given array.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n<details class=\"article_example_details\">\n<summary class=\"article_example_summary\">\n<span><strong>\nExamples\n</strong>\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"atricle_example_content\">\n<pre class=\"wp-block-preformatted\"><!-- Insert New Examples Here -->\n<pre class=\"wp-block-preformatted\"><strong>Example 1:</strong>\n<strong>Input Format:</strong> N = 5, array[] = {1,2,4,5}\n<strong>Result:</strong> 3\n<strong>Explanation: </strong>In the given array, number 3 is missing. So, 3 is the answer.\n\n<strong>Example 2:</strong>\n<strong>Input Format:</strong> N = 3, array[] = {1,3}\n<strong>Result:</strong> 2\n<strong>Explanation: </strong>In the given array, number 2 is missing. So, 2 is the answer.</pre>\n</pre>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Practice Section-->\n<div class=\"practice\">\n<span><strong>Practice: </strong></span>\n<div class=\"problem-buttons\">\n\n<!-- Add Problem Link inside href -->\n<a href=\"https://bit.ly/42VPspr\" target=\"_blank\" rel=\"noopener\">\n<span>Solve Problem</span>\n<img src=\"https://static.takeuforward.org/wp/uploads/2023/04/Group-11-5.png\" alt=\"code-studio\">\n</a>\n</div>\n</div>\n\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\nyourself first. </em></p>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<div class=\"horizontal_navbar_dsa_article\">\n<div class=\"grid_container_four\">\n<a href=\"#brute-force-approach\" class=\"four-boxes box-a\">\nBrute Force Approach\n</a>\n<a href=\"#better-approach\" class=\"four-boxes box-a\">\nBetter Approach\n</a>\n<a href=\"#optimal-approach-1\" class=\"four-boxes box-c\">\nOptimal Approach 1\n</a>\n<a href=\"#optimal-approach-2\" class=\"four-boxes box-c-2\">\nOptimal Approach 2\n</a>\n<a href=\"#dsa_article_video_explanation\" class=\"three-boxes box-d\">\n<svg width=\"26\" height=\"26\" viewBox=\"0 0 20 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M8 10L13.19 7L8 4V10ZM19.56 2.17C19.69 2.64 19.78 3.27 19.84 4.07C19.91 4.87 19.94 5.56 19.94 6.16L20 7C20 9.19 19.84 10.8 19.56 11.83C19.31 12.73 18.73 13.31 17.83 13.56C17.36 13.69 16.5 13.78 15.18 13.84C13.88 13.91 12.69 13.94 11.59 13.94L10 14C5.81 14 3.2 13.84 2.17 13.56C1.27 13.31 0.69 12.73 0.44 11.83C0.31 11.36 0.22 10.73 0.16 9.93C0.0900001 9.13 0.0599999 8.44 0.0599999 7.84L0 7C0 4.81 0.16 3.2 0.44 2.17C0.69 1.27 1.27 0.69 2.17 0.44C2.64 0.31 3.5 0.22 4.82 0.16C6.12 0.0899998 7.31 0.0599999 8.41 0.0599999L10 0C14.19 0 16.8 0.16 17.83 0.44C18.73 0.69 19.31 1.27 19.56 2.17Z\" fill=\"red\"></path>\n</svg>\n\n</a>\n<div class=\"box-e tooltip\">\n<svg viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M12.842 9.25L11.9577 10.17C11.2502 10.89 10.8081 11.5 10.8081 13H8.84297V12.5C8.84297 11.39 9.28511 10.39 9.99255 9.67L11.2109 8.41C11.5745 8.05 11.7906 7.55 11.7906 7C11.7906 6.46957 11.5836 5.96086 11.2151 5.58579C10.8465 5.21071 10.3467 5 9.82552 5C9.30434 5 8.80451 5.21071 8.43598 5.58579C8.06745 5.96086 7.86041 6.46957 7.86041 7H5.89531C5.89531 5.93913 6.30938 4.92172 7.04644 4.17157C7.7835 3.42143 8.78316 3 9.82552 3C10.8679 3 11.8675 3.42143 12.6046 4.17157C13.3417 4.92172 13.7557 5.93913 13.7557 7C13.7543 7.84324 13.4259 8.65183 12.842 9.25ZM10.8081 17H8.84297V15H10.8081M9.82552 0C8.53521 0 7.25754 0.258658 6.06545 0.761205C4.87337 1.26375 3.79021 2.00035 2.87783 2.92893C1.03519 4.8043 0 7.34784 0 10C0 12.6522 1.03519 15.1957 2.87783 17.0711C3.79021 17.9997 4.87337 18.7362 6.06545 19.2388C7.25754 19.7413 8.53521 20 9.82552 20C12.4314 20 14.9306 18.9464 16.7732 17.0711C18.6158 15.1957 19.651 12.6522 19.651 10C19.651 4.47 15.2296 0 9.82552 0Z\" fill=\"black\"></path>\n</svg>\n<div class=\"bottom\">\n<p>Expand any one approach by clicking the given options in the bar. Clicking one approach on bar,\ncloses all other expands. You can manually expand more than one approach at a time</p>\n<i></i>\n</div>\n</div>\n</div>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<div class=\"dsa_article_dropdown_approachs \">\n\n<!-- Brute Force Approach Starts from here -->\n<div id=\"brute-force-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nBrute Force Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n<h3><strong>Naive Approach(Brute-force approach)</strong>:</h3>\n<p><strong>Intuition: </strong>For each number between 1 to N, we will try to find it in the given array using <a href=\"https://takeuforward.org/data-structure/linear-search-in-c/\">linear search</a>. And if we don\u2019t find any of them, we will return the number.</p>\n<p><strong>Approach:&nbsp;</strong></p>\n<p>The algorithm steps are as follows:</p>\n<ol><li>We will run a loop(say i) from 1 to N.</li><li>For each integer, i, we will try to find it in the given array using linear search.<ol><li>For that, we will run another loop to iterate over the array and consider a flag variable to indicate if the element exists in the array. Flag = 1 means the element is present and flag = 0 means the element is missing.</li><li>Initially, the flag value will be set to 0. While iterating the array, if we find the element, we will set the flag to 1 and break out from the loop.<br>Now, for any number i, if we cannot find it, the flag will remain 0 even after iterating the whole array and we will return the number.</li></ol></li></ol>\n<p><strong>Dry run:</strong></p>\n<p>Assume given array = {1, 3} and N = 3.</p>\n<p><strong>Note:</strong> <em>For each number, before starting the linear search, we set the flag to 0</em>.</p>\n<pre class=\"wp-block-preformatted\">For i = 1, flag = 0\nWe will try to find 1 in the array using linear search and in the first index, we can find it and the flag will be 1. So, it is not the missing number.\n\nFor i = 2, flag = 0\nWe will try to find 2 in the given array using linear search. But number 2 is not present and the flag will remain 0. So, we will return 2 as it is the missing number.</pre>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n\n<!-- Insert C++ code of Brute Force Here -->\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint missingNumber(vector&lt;int&gt;&amp;a, int N) {\n\n    // Outer loop that runs from 1 to N:\n    for (int i = 1; i &lt;= N; i++) {\n\n        // flag variable to check\n        //if an element exists\n        int flag = 0;\n\n        //Search the element using linear search:\n        for (int j = 0; j &lt; N - 1; j++) {\n            if (a[j] == i) {\n\n                // i is present in the array:\n                flag = 1;\n                break;\n            }\n        }\n\n        // check if the element is missing\n        //i.e flag == 0:\n\n        if (flag == 0) return i;\n    }\n\n    // The following line will never execute.\n    // It is just to avoid warnings.\n    return -1;\n}\n\nint main()\n{\n    int N = 5;\n    vector&lt;int&gt; a = {1, 2, 4, 5};\n    int ans = missingNumber(a, N);\n    cout &lt;&lt; \"The missing number is: \" &lt;&lt; ans &lt;&lt; endl;\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\n<!-- Insert Java code of Brute Force Here -->\nimport java.util.*;\n\npublic class tUf {\n    public static int missingNumber(int []a, int N) {\n\n        // Outer loop that runs from 1 to N:\n        for (int i = 1; i &lt;= N; i++) {\n\n            // flag variable to check\n            //if an element exists\n            int flag = 0;\n\n            //Search the element using linear search:\n            for (int j = 0; j &lt; N - 1; j++) {\n                if (a[j] == i) {\n\n                    // i is present in the array:\n                    flag = 1;\n                    break;\n                }\n            }\n\n            // check if the element is missing\n            //i.e flag == 0:\n\n            if (flag == 0) return i;\n        }\n\n        // The following line will never execute.\n        // It is just to avoid warnings.\n        return -1;\n    }\n\n    public static void main(String args[]) {\n        int N = 5;\n        int a[] = {1, 2, 4, 5};\n\n        int ans = missingNumber(a, N);\n        System.out.println(\"The missing number is: \" + ans);\n    }\n\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\n<!-- Insert Python code of Brute Force Here -->\ndef missing_number(a, N):\n    # Outer loop that runs from 1 to N:\n    for i in range(1, N + 1):\n        # flag variable to check if an element exists\n        flag = 0\n\n        # Search the element using linear search:\n        for j in range(len(a)):\n            if a[j] == i:\n                # i is present in the array:\n                flag = 1\n                break\n\n        # check if the element is missing (i.e., flag == 0):\n        if flag == 0:\n            return i\n\n    # The following line will never execute.\n    # It is just to avoid warnings.\n    return -1\n\ndef main():\n    N = 5\n    a = [1, 2, 4, 5]\n    ans = missing_number(a, N)\n    print(\"The missing number is:\", ans)\n\nif __name__ == '__main__':\n    main()\n\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\n<!-- Insert Javascript code of Brute Force Here -->\nfunction missingNumber(a, N) {\n  // Outer loop that runs from 1 to N:\n  for (let i = 1; i &lt;= N; i++) {\n    // flag variable to check if an element exists\n    let flag = 0;\n\n    // Search the element using linear search:\n    for (let j = 0; j &lt; N - 1; j++) {\n      if (a[j] === i) {\n        // i is present in the array:\n        flag = 1;\n        break;\n      }\n    }\n\n    // check if the element is missing (i.e., flag === 0):\n    if (flag === 0) {\n      return i;\n    }\n  }\n\n  // The following line will never execute.\n  // It is just to avoid warnings.\n  return -1;\n}\n\nfunction main() {\n  const N = 5;\n  const a = [1, 2, 4, 5];\n  const ans = missingNumber(a, N);\n  console.log(\"The missing number is:\", ans);\n}\n\nmain();\n\n</code>\n</pre>\n</div>\n\n<p>\n<!-- Insert Output of Brute Force Here -->\nOutput: The missing number is: 3\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n<!-- Insert Time and Space Complexity of Brute Force Here -->\n<p><strong>Time Complexity: </strong>O(N<sup>2</sup>), where N = size of the array+1.<br><strong>Reason: </strong>In the worst case i.e. if the missing number is N itself, the outer loop will run for N times, and for every single number the inner loop will also run for approximately N times. So, the total time complexity will be O(N<sup>2</sup>).</p>\n<p><strong>Space Complexity: </strong>O(1)&nbsp; as we are not using any extra space.</p>\n</p>\n</details>\n</div>\n</details>\n</div>\n<!-- Brute Force Approach Ends here -->\n\n\n<!-- Better Approach Starts from here -->\n<div id=\"better-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nBetter Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition For Better Approach Here -->\n<h3><strong>Better Approach (using Hashing)</strong>:</h3>\n<h3><strong>Intuition: </strong></h3>\n<p>Using the hashing technique, we will store the frequency of each element of the given array. Now, the number( i.e. between 1 to N) for which the frequency will be 0, will be returned. Refer to the <a href=\"https://takeuforward.org/hashing/hashing-maps-time-complexity-collisions-division-rule-of-hashing-strivers-a2z-dsa-course/\">article link</a> to know more about hashing.</p>\n<h3><strong>Approach:</strong></h3>\n<p>The algorithm steps are as follows:</p>\n<ul><li>The range of the number is 1 to N. So, we need a hash array of size N+1 (<em>as we want to store the frequency of N as well</em>).</li><li>Now, for each element in the given array, we will store the frequency in the hash array.</li><li>After that, for each number between 1 to N, we will check the frequencies. And for any number, if the frequency is 0, we will return it.</li></ul>\n<p><strong>Dry run: </strong></p>\n<p>Assume the given array = {1,3} and N = 3. The <strong>hash array</strong> will look like the following:</p>\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/03/7.jpg\" alt=\"\" class=\"wp-image-8086\"/></figure>\n<p>We can clearly see that for index 2 the frequency is 0 and so 2 is our answer.</p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n\n<!-- Insert C++ Code of Better Approach Here -->\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint missingNumber(vector&lt;int&gt;&amp;a, int N) {\n\n    int hash[N + 1] = {0}; //hash array\n\n    // storing the frequencies:\n    for (int i = 0; i &lt; N - 1; i++)\n        hash[a[i]]++;\n\n    //checking the freqencies for numbers 1 to N:\n    for (int i = 1; i &lt;= N; i++) {\n        if (hash[i] == 0) {\n            return i;\n        }\n    }\n\n    // The following line will never execute.\n    // It is just to avoid warnings.\n    return -1;\n}\n\nint main()\n{\n    int N = 5;\n    vector&lt;int&gt; a = {1, 2, 4, 5};\n    int ans = missingNumber(a, N);\n    cout &lt;&lt; \"The missing number is: \" &lt;&lt; ans &lt;&lt; endl;\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\n<!-- Insert Java Code of Better Approach Here -->\nimport java.util.*;\n\npublic class tUf {\n    public static int missingNumber(int []a, int N) {\n\n        int hash[] = new int[N + 1]; //hash array\n\n        // storing the frequencies:\n        for (int i = 0; i &lt; N - 1; i++)\n            hash[a[i]]++;\n\n        //checking the freqencies for numbers 1 to N:\n        for (int i = 1; i &lt;= N; i++) {\n            if (hash[i] == 0) {\n                return i;\n            }\n        }\n\n        // The following line will never execute.\n        // It is just to avoid warnings.\n        return -1;\n    }\n\n    public static void main(String args[]) {\n        int N = 5;\n        int a[] = {1, 2, 4, 5};\n\n        int ans = missingNumber(a, N);\n        System.out.println(\"The missing number is: \" + ans);\n    }\n\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\n<!-- Insert Python Code of Better Approach Here -->\ndef missingNumber(a, N):\n    hash = [0] * (N + 1)  # hash array\n\n    # storing the frequencies:\n    for i in range(N - 1):\n        hash[a[i]] += 1\n\n    # checking the frequencies for numbers 1 to N:\n    for i in range(1, N + 1):\n        if hash[i] == 0:\n            return i\n\n    # The following line will never execute.\n    # It is just to avoid warnings.\n    return -1\n\ndef main():\n    N = 5\n    a = [1, 2, 4, 5]\n    ans = missingNumber(a, N)\n    print(\"The missing number is:\", ans)\n\nif __name__ == '__main__':\n    main()\n\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\n<!-- Insert Javascript code of Brute Force Here -->\nfunction missingNumber(a, N) {\n  const hash = new Array(N + 1).fill(0); // hash array\n\n  // storing the frequencies:\n  for (let i = 0; i &lt; N - 1; i++) {\n    hash[a[i]]++;\n  }\n\n  // checking the frequencies for numbers 1 to N:\n  for (let i = 1; i &lt;= N; i++) {\n    if (hash[i] === 0) {\n      return i;\n    }\n  }\n\n  // The following line will never execute.\n  // It is just to avoid warnings.\n  return -1;\n}\n\nfunction main() {\n  const N = 5;\n  const a = [1, 2, 4, 5];\n  const ans = missingNumber(a, N);\n  console.log(\"The missing number is:\", ans);\n}\n\nmain();\n\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Better Approach Here -->\nOutput: The missing number is: 3\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Better Approach Here -->\n<p><strong>Time Complexity: </strong>O(N) + O(N) ~ O(2*N),&nbsp; where N = size of the array+1.<br><strong>Reason: </strong>For storing the frequencies in the hash array, the program takes O(N) time complexity and for checking the frequencies in the second step again O(N) is required. So, the total time complexity is O(N) + O(N).</p>\n<p><strong>Space Complexity: </strong>O(N), where N = size of the array+1. Here we are using an extra hash array of size N+1.</p>\n</p>\n</details>\n</div>\n</details>\n</div>\n<!-- Better Approach Ends from here -->\n\n\n<!-- Optimal Approach - 1 Starts from here -->\n<div id=\"optimal-approach-1\">\n<details>\n<summary class=\"main-summary\">\n<span>\nOptimal Approach 1\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm of Better Approach - 1 Here -->\n<h3><strong>Summation Approach:</strong></h3>\n<h3><strong>Intuition: </strong></h3>\n<p>We know that the summation of the first N numbers is (N*(N+1))/2. We can say this S1. Now, in the given array, every number between 1 to N except one number is present. So, if we add the numbers of the array (say S2), the difference between S1 and S2 will be the missing number. Because, while adding all the numbers of the array, we did not add that particular number that is missing.</p>\n<pre class=\"wp-block-preformatted\">Sum of first N numbers(S1) = (N*(N+1))/2\nSum of all array elements(S2) = i = 0n-2a[i]\nThe missing number = S1-S2</pre>\n<h3><strong>Approach:</strong></h3>\n<p>The steps are as follows:</p>\n<ol><li>We will first calculate the summation of first N natural numbers(i.e. 1 to N) using the specified formula.</li><li>Then we will add all the array elements using a loop.</li><li>Finally, we will consider the difference between the summation of the first N natural numbers and the sum of the array elements.</li></ol>\n<p><strong>Dry run:</strong></p>\n<pre class=\"wp-block-preformatted\">Assume the given array is: {1, 2, 4, 5} and N = 5.\nSummation of 1 to 5 = (5*(5+1))/2 = 15\nSummation of array elements = 12\nSo, the difference will be = 15 - 12 = 3. \nAnd the missing number is also 3.</pre>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n\n<!-- Insert C++ code of Optimal Approach - 1 Here-->\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint missingNumber(vector&lt;int&gt;&amp;a, int N) {\n\n    //Summation of first N numbers:\n    int sum = (N * (N + 1)) / 2;\n\n    //Summation of all array elements:\n    int s2 = 0;\n    for (int i = 0; i &lt; N - 1; i++) {\n        s2 += a[i];\n    }\n\n    int missingNum = sum - s2;\n    return missingNum;\n}\n\nint main()\n{\n    int N = 5;\n    vector&lt;int&gt; a = {1, 2, 4, 5};\n    int ans = missingNumber(a, N);\n    cout &lt;&lt; \"The missing number is: \" &lt;&lt; ans &lt;&lt; endl;\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\n<!-- Insert Java code of Optimal Approach - 1 Here -->\nimport java.util.*;\n\npublic class tUf {\n    public static int missingNumber(int []a, int N) {\n\n        //Summation of first N numbers:\n        int sum = (N * (N + 1)) / 2;\n\n        //Summation of all array elements:\n        int s2 = 0;\n        for (int i = 0; i &lt; N - 1; i++) {\n            s2 += a[i];\n        }\n\n        int missingNum = sum - s2;\n        return missingNum;\n    }\n\n    public static void main(String args[]) {\n        int N = 5;\n        int a[] = {1, 2, 4, 5};\n\n        int ans = missingNumber(a, N);\n        System.out.println(\"The missing number is: \" + ans);\n    }\n} \n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\n<!-- Insert Python code of Optimal Approach - 1 Here -->\ndef missingNumber(a, N):\n    # Summation of first N numbers:\n    summation = (N * (N + 1)) // 2\n\n    # Summation of all array elements:\n    s2 = sum(a)\n\n    missingNum = summation - s2\n    return missingNum\n\ndef main():\n    N = 5\n    a = [1, 2, 4, 5]\n    ans = missingNumber(a, N)\n    print(\"The missing number is:\", ans)\n\nif __name__ == '__main__':\n    main()\n\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\n<!-- Insert Javascript code of Brute Force Here -->\nfunction missingNumber(a, N) {\n  // Summation of first N numbers:\n  const summation = (N * (N + 1)) / 2;\n\n  // Summation of all array elements:\n  let s2 = 0;\n  for (let i = 0; i &lt; N - 1; i++) {\n    s2 += a[i];\n  }\n\n  const missingNum = summation - s2;\n  return missingNum;\n}\n\nfunction main() {\n  const N = 5;\n  const a = [1, 2, 4, 5];\n  const ans = missingNumber(a, N);\n  console.log(\"The missing number is:\", ans);\n}\n\nmain();\n\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Optimal Apporach - 1 Here -->\nOutput: The missing number is: 3\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Optimal Approach -1 -->\n<p><strong>Time Complexity: </strong>O(N), where N = size of array+1.<br><strong>Reason: </strong>Here, we need only 1 loop to get the sum of the array elements. The loop runs for approx. N times. So, the time complexity is O(N).</p>\n<p><strong>Space Complexity: </strong>O(1) as we are not using any extra space.</p>\n</p>\n</details>\n</div>\n</details>\n</div>\n<!-- Optimal Approach - 1 ends from here -->\n\n<!-- Optimal Approach - 2 Starts from here -->\n<div id=\"optimal-approach-2\">\n<details>\n<summary class=\"main-summary\">\n<span>\nOptimal Approach 2\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm of Better Approach - 2 Here -->\n<h3><strong>XOR Approach:</strong></h3>\n<h3><strong>Intuition: </strong></h3>\n<p>Two important properties of XOR are the following:</p>\n<p>XOR of two same numbers is always 0 i.e. a ^ a = 0. \u2190Property 1.<br>XOR of a number with 0 will result in the number itself i.e. 0 ^ a = a.&nbsp; \u2190Property 2</p>\n<p>Now, let\u2019s XOR all the numbers between 1 to N.<br>xor1 = 1^2^.......^N</p>\n<p>Let\u2019s XOR all the numbers in the given array.<br>xor2 = 1^2^......^N (contains all the numbers except the missing one).</p>\n<p>Now, if we again perform XOR between xor1 and xor2, we will get:<br>xor1 ^ xor2 = (1^1)^(2^2)^........^(missing Number)^.....^(N^N)<br><br>Here all the numbers except the missing number will form a pair and each pair will result in 0 according to the XOR property. The result will be = 0 ^ (missing number) = missing number (according to property 2).</p>\n<p><strong><em>So, if we perform the XOR of the numbers 1 to N with the XOR of the array elements, we will be left with the missing number.</em></strong></p>\n<h3><strong>Approach:</strong></h3>\n<p>The steps are as follows:</p>\n<ol><li>We will first run a loop(say i) from 0 to N-2(as the length of the array = N-1).</li><li>Inside the loop, xor2 variable will calculate the XOR of array elements<br>i.e. xor2 = xor2 ^ a[i].<br>And the xor1 variable will calculate the XOR of 1 to N-1 i.e. xor1 = xor1 ^ (i+1).</li><li>After the loop ends we will XOR xor1 and N to get the total XOR of 1 to N.</li><li>Finally, the answer will be the XOR of xor1 and xor2.</li></ol>\n<p><strong>Dry run:</strong></p>\n<pre class=\"wp-block-preformatted\">Assume the given array is: {1, 2, 4, 5} and N = 5.\nXOR of (1 to 5) i.e. xor1 = (1^2^3^4^5)\nXOR of array elements i.e. xor2 = (1^2^4^5)\nXOR of xor1 and xor2 = (1^2^3^4^5) ^ (1^2^4^5)\n\t\t\t= (1^1)^(2^2)^(3)^(4^4)^(5^5)\n\t\t\t= 0^0^3^0^0 = 0^3 = 3.\nThe missing number is 3.</pre>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n\n<!-- Insert C++ code of Optimal Approach - 2 Here-->\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint missingNumber(vector&lt;int&gt;&amp;a, int N) {\n\n    int xor1 = 0, xor2 = 0;\n\n    for (int i = 0; i &lt; N - 1; i++) {\n        xor2 = xor2 ^ a[i]; // XOR of array elements\n        xor1 = xor1 ^ (i + 1); //XOR up to [1...N-1]\n    }\n    xor1 = xor1 ^ N; //XOR up to [1...N]\n\n    return (xor1 ^ xor2); // the missing number\n}\n\nint main()\n{\n    int N = 5;\n    vector&lt;int&gt; a = {1, 2, 4, 5};\n    int ans = missingNumber(a, N);\n    cout &lt;&lt; \"The missing number is: \" &lt;&lt; ans &lt;&lt; endl;\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\n<!-- Insert Java code of Optimal Approach - 2 Here -->\nimport java.util.*;\n\npublic class tUf {\n    public static int missingNumber(int []a, int N) {\n\n        int xor1 = 0, xor2 = 0;\n\n        for (int i = 0; i &lt; N - 1; i++) {\n            xor2 = xor2 ^ a[i]; // XOR of array elements\n            xor1 = xor1 ^ (i + 1); //XOR up to [1...N-1]\n        }\n        xor1 = xor1 ^ N; //XOR up to [1...N]\n\n        return (xor1 ^ xor2); // the missing number\n    }\n\n    public static void main(String args[]) {\n        int N = 5;\n        int a[] = {1, 2, 4, 5};\n\n        int ans = missingNumber(a, N);\n        System.out.println(\"The missing number is: \" + ans);\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\n<!-- Insert Python code of Optimal Approach - 2 Here -->\ndef missingNumber(a, N):\n    xor1 = 0\n    xor2 = 0\n\n    for i in range(N - 1):\n        xor2 = xor2 ^ a[i]  # XOR of array elements\n        xor1 = xor1 ^ (i + 1)  # XOR up to [1...N-1]\n    \n    xor1 = xor1 ^ N  # XOR up to [1...N]\n\n    return xor1 ^ xor2  # the missing number\n\n\ndef main():\n    N = 5\n    a = [1, 2, 4, 5]\n    ans = missingNumber(a, N)\n    print(\"The missing number is:\", ans)\n\n\nif __name__ == '__main__':\n    main()\n\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\n<!-- Insert Javascript code of Brute Force Here -->\nfunction missingNumber(a, N) {\n  let xor1 = 0;\n  let xor2 = 0;\n\n  for (let i = 0; i &lt; N - 1; i++) {\n    xor2 = xor2 ^ a[i]; // XOR of array elements\n    xor1 = xor1 ^ (i + 1); // XOR up to [1...N-1]\n  }\n  xor1 = xor1 ^ N; // XOR up to [1...N]\n\n  return xor1 ^ xor2; // the missing number\n}\n\nfunction main() {\n  const N = 5;\n  const a = [1, 2, 4, 5];\n  const ans = missingNumber(a, N);\n  console.log(\"The missing number is:\", ans);\n}\n\nmain();\n\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Optimal Apporach - 2 Here -->\nOutput: The missing number is: 3\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Optimal Approach - 2 -->\n<p><strong>Time Complexity: </strong>O(N), where N = size of array+1.<br><strong>Reason: </strong>Here, we need only 1 loop to calculate the XOR. The loop runs for approx. N times. So, the time complexity is O(N).</p>\n<p><strong>Space Complexity: </strong>O(1) as we are not using any extra space.</p>\n</p>\n</details>\n</div>\n</details>\n</div>\n<!-- Optimal Approach - 2 ends from here -->\n\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n<details>\n<summary class=\"main-summary\">\n<span>\nVideo Explanation\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"yt-video-wrapper\">\n\n<!-- Insert iframe embed Link of Youtube Video-->\n<iframe class=\"lazy-loaded\" loading=\"lazy\" title=\"Find the Missing Number\" width=\"810\" height=\"456\" data-lazy-type=\"iframe\" data-src=\"https://www.youtube.com/embed/bYWLJb3vCWY?start=58\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\" src=\"https://www.youtube.com/embed/bYWLJb3vCWY?feature=oembed\"></iframe><noscript>\n<iframe loading=\"lazy\" title=\"Find the Missing Number\" width=\"810\" height=\"456\" src=\"https://www.youtube.com/embed/bYWLJb3vCWY?start=58\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe></noscript>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script>\n\nconst codeSections = document.querySelectorAll('.code-section');\n\n// Get last selected language from localStorage or set default value\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\n// Update last selected language for all sections and store in localStorage\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\n// Handle copy button click event\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\n// Set initial state of the tabs\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<script>\nconst codeSections = document.querySelectorAll('.code-section');\n\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script src=\"https://takeuforward.org/UXApproachDropDowns/4ApproachJSScript.js\"></script>\n<!-- /wp:html -->\n\n<!-- wp:paragraph -->\n<p><strong>Note: </strong><em>Among the optimal approaches, the XOR approach is slightly better than the summation one because the term (N * (N+1))/2 used in the summation method cannot be stored in an integer if the value of N is big (like 10<sup>5</sup>). In that case, we have to use some bigger data types. But we will face no issues like this while using the XOR approach.</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;<strong><a href=\"https://www.linkedin.com/in/kriti39/\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>KRITIDIPTA GHOSH</strong></a></strong>&nbsp;for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a>.&nbsp;<em>If you want to suggest any improvement/correction in this article please mail us at&nbsp;write4tuf@gmail.com</em></p></blockquote>\n<!-- /wp:quote -->",
    "category_tag": "arrays",
    "likes": 419,
    "preview": "Problem Statement: Given an integer N and an array of size N-1 containing N-1 numbers between 1 to N. Find the number(between 1 to N), that is not present in the given array. Examples Example 1: In..."
}