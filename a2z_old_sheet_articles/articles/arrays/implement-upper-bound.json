{
    "dislikes": 8,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:12:04 GMT+0530 (India Standard Time)",
    "slug": "implement-upper-bound",
    "aid": "2237",
    "tuf_plus": "",
    "title": "Implement Upper Bound",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "binary-search",
            "topic-title": "Binary Search"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        }
    ],
    "category_tag": "arrays",
    "likes": 134,
    "preview": "Problem Statement: Given a sorted array of N integers and an integer x, write a program to find the upper bound of x. Pre-requisite: Binary Search algorithm Examples Example 1: Input Format: N = 4,...",
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement:</strong> Given a sorted array of <strong>N integers </strong>and an integer x, write a program to find the upper bound of x.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Pre-requisite: </strong><a href=\"https://takeuforward.org/data-structure/binary-search-explained/\">Binary Search algorithm</a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n<details class=\"article_example_details\">\n<summary class=\"article_example_summary\">\n<span><strong>\nExamples\n</strong>\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"atricle_example_content\">\n<pre class=\"wp-block-preformatted\"><!-- Insert New Examples Here -->\n<pre class=\"wp-block-preformatted\"><strong>Example 1:</strong>\n<strong>Input Format:</strong> N = 4, arr[] = {1,2,2,3}, x = 2\n<strong>Result:</strong> 3\n<strong>Explanation:</strong> Index 3 is the smallest index such that arr[3] &gt; x.\n\n<strong>Example 2:</strong>\n<strong>Input Format:</strong> N = 6, arr[] = {3,5,8,9,15,19}, x = 9\n<strong>Result:</strong> 4\n<strong>Explanation:</strong> Index 4 is the smallest index such that arr[4] &gt; x.\n</pre>\n</pre>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Practice Section-->\n<div class=\"practice\">\n<span><strong>Practice: </strong></span>\n<div class=\"problem-buttons\">\n\n<!-- Add Problem Link inside href -->\n<a href=\"https://www.codingninjas.com/codestudio/problems/implement-upper-bound_8165383?utm_source=youtube&amp;utm_medium=affiliate&amp;utm_campaign=codestudio_Striver_BinarySeries\" target=\"_blank\" rel=\"noopener\">\n<span>Solve Problem</span>\n<img src=\"https://static.takeuforward.org/wp/uploads/2023/04/Group-11-5.png\" alt=\"code-studio\">\n</a>\n</div>\n</div>\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\nyourself first. </em></p>\n<!-- /wp:html -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3>Solution:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In the preceding article, we comprehensively explored the implementation of the <a href=\"https://takeuforward.org/data-structure/binary-search-explained/\" target=\"_blank\" rel=\"noopener\" title=\"\">Binary Search algorithm</a> and the <a href=\"https://takeuforward.org/arrays/implement-lower-bound-bs-2/\" target=\"_blank\" rel=\"noopener\" title=\"\">lower bound algorithm</a>.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>The primary objective of the Binary Search algorithm is to efficiently determine the appropriate half to eliminate, thereby reducing the search space by half. It does this by determining a specific condition that ensures that the target is not present in that half.</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In this article, we will learn how to implement the upper bound algorithm using a slight modification of the <a href=\"https://takeuforward.org/data-structure/binary-search-explained/\" target=\"_blank\" rel=\"noopener\" title=\"\">Binary Search algorithm</a>.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>What is Upper Bound?</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The upper bound algorithm finds the first or the smallest index in a sorted array where the value at that index is greater than the given key i.e. x.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The upper bound is the smallest index, ind, where arr[ind] &gt; x.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>But <strong><em>if any such index is not found</em></strong>, the upper bound algorithm returns n i.e. size of the given array. <em>The main difference between the lower and upper bound is in the condition. </em><strong><em>For the lower bound the condition was arr[ind] &gt;= x </em></strong><em>and here,</em><strong><em> in the case of the upper bound, it is arr[ind] &gt; x.</em></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<div class=\"horizontal_navbar_dsa_article\">\n<div class=\"grid_container_two\">\n<a href=\"#brute-force-approach\" class=\"two-boxes box-a\">\nBrute Force Approach\n</a>\n<a href=\"#optimal-approach\" class=\"two-boxes box-c\">\nOptimal Approach\n</a>\n<a href=\"#dsa_article_video_explanation\" class=\"three-boxes box-d\">\n<svg width=\"26\" height=\"26\" viewBox=\"0 0 20 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M8 10L13.19 7L8 4V10ZM19.56 2.17C19.69 2.64 19.78 3.27 19.84 4.07C19.91 4.87 19.94 5.56 19.94 6.16L20 7C20 9.19 19.84 10.8 19.56 11.83C19.31 12.73 18.73 13.31 17.83 13.56C17.36 13.69 16.5 13.78 15.18 13.84C13.88 13.91 12.69 13.94 11.59 13.94L10 14C5.81 14 3.2 13.84 2.17 13.56C1.27 13.31 0.69 12.73 0.44 11.83C0.31 11.36 0.22 10.73 0.16 9.93C0.0900001 9.13 0.0599999 8.44 0.0599999 7.84L0 7C0 4.81 0.16 3.2 0.44 2.17C0.69 1.27 1.27 0.69 2.17 0.44C2.64 0.31 3.5 0.22 4.82 0.16C6.12 0.0899998 7.31 0.0599999 8.41 0.0599999L10 0C14.19 0 16.8 0.16 17.83 0.44C18.73 0.69 19.31 1.27 19.56 2.17Z\" fill=\"red\"></path>\n</svg>\n\n</a>\n<div class=\"box-e tooltip\">\n<svg viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M12.842 9.25L11.9577 10.17C11.2502 10.89 10.8081 11.5 10.8081 13H8.84297V12.5C8.84297 11.39 9.28511 10.39 9.99255 9.67L11.2109 8.41C11.5745 8.05 11.7906 7.55 11.7906 7C11.7906 6.46957 11.5836 5.96086 11.2151 5.58579C10.8465 5.21071 10.3467 5 9.82552 5C9.30434 5 8.80451 5.21071 8.43598 5.58579C8.06745 5.96086 7.86041 6.46957 7.86041 7H5.89531C5.89531 5.93913 6.30938 4.92172 7.04644 4.17157C7.7835 3.42143 8.78316 3 9.82552 3C10.8679 3 11.8675 3.42143 12.6046 4.17157C13.3417 4.92172 13.7557 5.93913 13.7557 7C13.7543 7.84324 13.4259 8.65183 12.842 9.25ZM10.8081 17H8.84297V15H10.8081M9.82552 0C8.53521 0 7.25754 0.258658 6.06545 0.761205C4.87337 1.26375 3.79021 2.00035 2.87783 2.92893C1.03519 4.8043 0 7.34784 0 10C0 12.6522 1.03519 15.1957 2.87783 17.0711C3.79021 17.9997 4.87337 18.7362 6.06545 19.2388C7.25754 19.7413 8.53521 20 9.82552 20C12.4314 20 14.9306 18.9464 16.7732 17.0711C18.6158 15.1957 19.651 12.6522 19.651 10C19.651 4.47 15.2296 0 9.82552 0Z\" fill=\"black\"></path>\n</svg>\n<div class=\"bottom\">\n<p>Expand any one approach by clicking the given options in the bar. Clicking one approach on bar,\ncloses all other expands. You can manually expand more than one approach at a time</p>\n<i></i>\n</div>\n\n</div>\n</div>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<div class=\"dsa_article_dropdown_approachs \">\n\n<!-- Brute Force Approach Starts from here -->\n<div id=\"brute-force-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nBrute Force Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n<h3><strong>Naive approach (Using linear search):&nbsp;</strong></h3>\n<p>Let\u2019s understand how we can find the answer using the <a href=\"https://takeuforward.org/data-structure/linear-search-in-c/\">linear search algorithm</a>. With the knowledge that the array is sorted, our approach involves traversing the array starting from the beginning. During this traversal, each element will be compared with the target value, x. The index, i, where the condition arr[i] &gt; x is first satisfied, will be the answer.</p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint upperBound(vector&lt;int&gt; &amp;arr, int x, int n) {\n    for (int i = 0; i &lt; n; i++) {\n        if (arr[i] &gt; x) {\n            // upper bound found:\n            return i;\n        }\n    }\n    return n;\n}\n\nint main()\n{\n    vector&lt;int&gt; arr = {3, 5, 8, 9, 15, 19};\n    int n = 6, x = 9;\n    int ind = upperBound(arr, x, n);\n    cout &lt;&lt; \"The upper bound is the index: \" &lt;&lt; ind &lt;&lt; \"\\n\";\n    return 0;\n}\n</code>\n</pre>\n<p>\nOutput: The upper bound is the index: 4\n</p>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\npublic class tUf {\n\n    public static int upperBound(int[] arr, int x, int n) {\n        for (int i = 0; i &lt; n; i++) {\n            if (arr[i] &gt; x) {\n                // upper bound found:\n                return i;\n            }\n        }\n        return n;\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {3, 5, 8, 9, 15, 19};\n        int n = 6, x = 9;\n        int ind = upperBound(arr, x, n);\n        System.out.println(\"The upper bound is the index: \" + ind);\n    }\n}\n</code>\n</pre>\n<p>\nOutput: The upper bound is the index: 4\n</p>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\ndef upperBound(arr: [int], x: int, n: int) -&gt; int:\n    for i in range(n):\n        if arr[i] &gt; x:\n            # upper bound found\n            return i\n    return n\n\nif __name__ == \"__main__\":\n    arr = [3, 5, 8, 9, 15, 19]\n    n = 6\n    x = 9\n    ind = upperBound(arr, x, n)\n    print(\"The upper bound is the index:\", ind)\n</code>\n</pre>\n<p>\nOutput: The upper bound is the index: 4\n</p>\n</div>\n<div class=\"code-block \" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\nfunction upperBound(arr, x, n) {\n    for (let i = 0; i &lt; n; i++) {\n        if (arr[i] &gt; x) {\n            // upper bound found:\n            return i;\n        }\n    }\n    return n;\n}\n\nlet arr = [3, 5, 8, 9, 15, 19];\nlet n = 6, x = 9;\nlet ind = upperBound(arr, x, n);\nconsole.log(\"The upper bound is the index:\", ind);\n</code>\n</pre>\n<p>\nOutput: The upper bound is the index: 4\n</p>\n</div>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n</p><p><strong>Time Complexity: </strong>O(N), where N = size of the given array.<br><strong>Reason: </strong>In the worst case, we have to travel the whole array. This is basically the time complexity of the linear search algorithm.</p>\n<p><strong>Space Complexity: </strong>O(1) as we are using no extra space.</p>\n\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Brute Force Approach Ends here -->\n\n<!-- Optimal Approach Starts from here -->\n\n<div id=\"optimal-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nOptimal Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n<h3><strong>Optimal Approach (Using Binary Search)</strong>:&nbsp;</h3>\n<p>As the array is sorted, we will apply the Binary Search algorithm to find the index. The steps are as follows:</p>\n<p>We will declare the 2 pointers and an \u2018ans\u2019 variable initialized to n i.e. the size of the array(<em>as If we don\u2019t find any index, we will return n</em>).</p>\n<ol><li><strong>Place the 2 pointers i.e. low and high: </strong>Initially, we will place the pointers like this: low will point to the first index and high will point to the last index.<br></li><li><strong>Calculate the \u2018mid\u2019: </strong>Now, we will calculate the value of mid using the following formula:<br><strong>mid = (low+high) // 2 ( \u2018//\u2019 refers to integer division)</strong><strong><br></strong></li><li><strong>Compare arr[mid] with x: </strong>With comparing arr[mid] to x, we can observe 2 different cases:<ol><li><strong>Case 1 - If arr[mid] &gt; x: </strong>This condition means that the index mid may be an answer. So, we will update the \u2018ans\u2019 variable with mid and search in the left half if there is any smaller index that satisfies the same condition. Here, we are eliminating the right half.</li><li><strong>Case 2 - If arr[mid] &lt;= x: </strong>In this case, mid cannot be our answer and we need to find some bigger element. So, we will eliminate the left half and search in the right half for the answer.</li></ol></li></ol>\n<p>The above process will continue until the pointer low crosses high.</p>\n<p><strong>Dry run:</strong> <em>Please refer </em><a href=\"https://youtu.be/6zhGS79oQ4k\"><em>video</em></a><em> for it.</em></p>\n\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint upperBound(vector&lt;int&gt; &amp;arr, int x, int n) {\n    int low = 0, high = n - 1;\n    int ans = n;\n\n    while (low &lt;= high) {\n        int mid = (low + high) / 2;\n        // maybe an answer\n        if (arr[mid] &gt; x) {\n            ans = mid;\n            //look for smaller index on the left\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1; // look on the right\n        }\n    }\n    return ans;\n}\n\nint main()\n{\n    vector&lt;int&gt; arr = {3, 5, 8, 9, 15, 19};\n    int n = 6, x = 9;\n    int ind = upperBound(arr, x, n);\n    cout &lt;&lt; \"The upper bound is the index: \" &lt;&lt; ind &lt;&lt; \"\\n\";\n    return 0;\n}\n</code>\n</pre>\n<p>\nOutput: The upper bound is the index: 4\n</p>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\npublic class tUf {\n\n    public static int upperBound(int[] arr, int x, int n) {\n        int low = 0, high = n - 1;\n        int ans = n;\n\n        while (low &lt;= high) {\n            int mid = (low + high) / 2;\n            // maybe an answer\n            if (arr[mid] &gt; x) {\n                ans = mid;\n                //look for smaller index on the left\n                high = mid - 1;\n            } else {\n                low = mid + 1; // look on the right\n            }\n        }\n        return ans;\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {3, 5, 8, 9, 15, 19};\n        int n = 6, x = 9;\n        int ind = upperBound(arr, x, n);\n        System.out.println(\"The upper bound is the index: \" + ind);\n    }\n}\n</code>\n</pre>\n<p>\nOutput: The upper bound is the index: 4\n\n</p>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\ndef upperBound(arr: [int], x: int, n: int) -&gt; int:\n    low = 0\n    high = n - 1\n    ans = n\n\n    while low &lt;= high:\n        mid = (low + high) // 2\n        # maybe an answer\n        if arr[mid] &gt; x:\n            ans = mid\n            # look for smaller index on the left\n            high = mid - 1\n        else:\n            low = mid + 1  # look on the right\n\n    return ans\n\nif __name__ == \"__main__\":\n    arr = [3, 5, 8, 9, 15, 19]\n    n = 6\n    x = 9\n    ind = upperBound(arr, x, n)\n    print(\"The upper bound is the index:\", ind)</code>\n</pre>\n<p>\nOutput: The upper bound is the index: 4\n\n\n</p>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\nfunction upperBound(arr, x, n) {\n    let low = 0, high = n - 1;\n    let ans = n;\n\n    while (low &lt;= high) {\n        let mid = Math.floor((low + high) / 2);\n        // maybe an answer\n        if (arr[mid] &gt; x) {\n            ans = mid;\n            //look for smaller index on the left\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1; // look on the right\n        }\n    }\n    return ans;\n}\n\nlet arr = [3, 5, 8, 9, 15, 19];\nlet n = 6, x = 9;\nlet ind = upperBound(arr, x, n);\nconsole.log(\"The upper bound is the index:\", ind);</code>\n</pre>\n<p>\nOutput: The upper bound is the index: 4\n\n\n</p>\n</div>\n\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n</p><p><strong>Time Complexity: </strong>O(logN), where N = size of the given array.<br><strong>Reason: </strong>We are basically using the Binary Search algorithm.</p>\n<p><strong>Space Complexity: </strong>O(1) as we are using no extra space.</p>\n\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Optimal Approach Starts from here -->\n\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n<details>\n<summary class=\"main-summary\">\n<span>\nVideo Explanation\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"yt-video-wrapper\">\n\n<!-- Insert iframe embed Link of Youtube Video-->\n<iframe class=\"lazy-loaded\" loading=\"lazy\" title=\"Upper Bound\" width=\"810\" height=\"456\" data-lazy-type=\"iframe\" data-src=\"https://www.youtube.com/embed/6zhGS79oQ4k\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\" src=\"https://www.youtube.com/embed/6zhGS79oQ4k?feature=oembed\"></iframe><noscript>\n<iframe loading=\"lazy\" title=\"Upper Bound\" width=\"810\" height=\"456\" src=\"https://www.youtube.com/embed/6zhGS79oQ4k\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe></noscript>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script>\n\nconst codeSections = document.querySelectorAll('.code-section');\n\n// Get last selected language from localStorage or set default value\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\n// Update last selected language for all sections and store in localStorage\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\n// Handle copy button click event\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\n// Set initial state of the tabs\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<script>\nconst codeSections = document.querySelectorAll('.code-section');\n\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script src=\"https://takeuforward.org/UXApproachDropDowns/2ApproachJSScript.js\"></script>\n<!-- /wp:html -->\n\n<!-- wp:paragraph -->\n<p><strong>upper_bound() in C++ STL:</strong><em> </em><em>Please refer to </em><a href=\"https://takeuforward.org/data-structure/binary-search-with-cpp-stl/\"><em>this article</em></a><em> and go through the Upper Bound section.</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to <strong><a href=\"https://www.linkedin.com/in/kriti39/\" target=\"_blank\" rel=\"noreferrer noopener\">KRITIDIPTA GHOSH</a></strong></em> <em>for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->"
}