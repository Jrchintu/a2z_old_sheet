{
    "dislikes": 32,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:11:54 GMT+0530 (India Standard Time)",
    "slug": "find-the-highest-lowest-frequency-element",
    "aid": "2190",
    "title": "Find the highest/lowest frequency element",
    "tuf_plus": "",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "hashing",
            "topic-title": "Hashing"
        }
    ],
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement:</strong> Given an array of size N. Find the highest and lowest frequency element.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Pre-requisite: </strong><a href=\"https://www.youtube.com/watch?v=KEs5UyBJ39g&amp;t=1394s\" target=\"_blank\" rel=\"noopener\" title=\"\"><strong>Hashing Theory</strong></a> and&nbsp; <a href=\"https://takeuforward.org/data-structure/count-frequency-of-each-element-in-the-array/\" target=\"_blank\" rel=\"noopener\" title=\"\"><strong>Counting frequencies of array elements</strong></a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Examples:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\"><strong>Example 1:</strong>\n<strong>Input:</strong> array[] = {10,5,10,15,10,5};\n<strong>Output</strong>: 10 15\n<strong>Explanation:</strong> The frequency of 10 is 3, i.e. the highest and the frequency of 15 is 1 i.e. the lowest.\n\n<strong>Example 2:\n</strong>\n<strong>Input:</strong> array[] = {2,2,3,4,4,2};\n<strong>Output</strong>: 2 3\n<strong>Explanation:</strong> The frequency of 2 is 3, i.e. the highest and the frequency of 3 is 1 i.e. the lowest.</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Solution</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"textColor\":\"accent\"} -->\n<p class=\"has-accent-color has-text-color\"><strong><em>Disclaimer</em></strong>: <em>Don't jump directly to the solution, try it out yourself first.</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Solution:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In order to find the highest and lowest frequency element, first we need to find the frequencies of all the elements of the given array. In the previous article, we learned how to <a href=\"https://takeuforward.org/data-structure/count-frequency-of-each-element-in-the-array/\" target=\"_blank\" rel=\"noopener\" title=\"\">count the frequency of each element in the array</a>.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Approach</strong>:&nbsp;</h3>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Brute-Force approach(Using two loops):&nbsp;</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>We will be using the same countFreq() function used in the <a href=\"https://takeuforward.org/data-structure/count-frequency-of-each-element-in-the-array/\" target=\"_blank\" rel=\"noopener\" title=\"\">previous article</a> with slight modifications. We will use two loops, in which, the first loop will be used to iterate the given array. Selecting an element, we will use the second loop to traverse the remaining array to find the frequency(i.e. The number of times the element occurs in the array) of the selected element i.e. arr[i]. Now after the second loop completes traversing we will keep a track of the element with the highest and lowest frequency. We also have to maintain a visited array so that it will keep track of the duplicate elements that we already count.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The steps are as follows:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li>Make a visited array of type boolean.</li><li>Use the first loop to point to an element of the array.</li><li>Initialize the variable count to 1.</li><li>Make that index true in the visited array.</li><li>Run the second loop, if we find the element then mark the visited index true and increase the count.</li><li>If the visited index is already true then skip the other steps.</li><li>After step 5, we will keep a track of the element with the highest frequency and the lowest frequency.</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Code</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    \n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvoid countFreq(int arr[], int n)\n{\n    vector&lt;bool&gt; visited(n, false);\n    int maxFreq = 0, minFreq = n;\n    int maxEle = 0, minEle = 0;\n\n    for (int i = 0; i &lt; n; i++) {\n\n        // Skip this element if already processed\n        if (visited[i] == true)\n            continue;\n\n        // Count frequency\n        int count = 1;\n        for (int j = i + 1; j &lt; n; j++) {\n            if (arr[i] == arr[j]) {\n                visited[j] = true;\n                count++;\n            }\n        }\n        if (count &gt; maxFreq) {\n            maxEle = arr[i];\n            maxFreq = count;\n        }\n        if (count &lt; minFreq) {\n            minEle = arr[i];\n            minFreq = count;\n        }\n    }\n    cout &lt;&lt; \"The highest frequency element is: \" &lt;&lt; maxEle &lt;&lt; \"\\n\";\n    cout &lt;&lt; \"The lowest frequency element is: \" &lt;&lt; minEle &lt;&lt; \"\\n\";\n}\n\nint main()\n{\n    int arr[] = {10, 5, 10, 15, 10, 5};\n    int n = sizeof(arr) / sizeof(arr[0]);\n    countFreq(arr, n);\n    return 0;\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output: </strong><br>The highest frequency element is: 10<br>The lowest frequency element is: 15<br><strong>Time Complexity: </strong>O(N*N), where N = size of the array. We are using the nested loop to find the frequency.<br><strong>Space Complexity: </strong>&nbsp;O(N), where N = size of the array. It is for the visited array we are using.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\n\npublic class tUf {\n\n    public static void main(String args[]) {\n\n        int arr[] = {10, 5, 10, 15, 10, 5};\n        int n = arr.length;\n        countFreq(arr, n);\n    }\n    public static void countFreq(int arr[], int n) {\n        boolean visited[] = new boolean[n];\n        int maxFreq = 0, minFreq = n;\n        int maxEle = 0, minEle = 0;\n        for (int i = 0; i &lt; n; i++) {\n\n            // Skip this element if already processed\n            if (visited[i] == true)\n                continue;\n\n            // Count frequency\n            int count = 1;\n            for (int j = i + 1; j &lt; n; j++) {\n                if (arr[i] == arr[j]) {\n                    visited[j] = true;\n                    count++;\n                }\n            }\n            if (count &gt; maxFreq) {\n                maxEle = arr[i];\n                maxFreq = count;\n            }\n            if (count &lt; minFreq) {\n                minEle = arr[i];\n                minFreq = count;\n            }\n        }\n        System.out.println(\"The highest frequency element is: \" + maxEle);\n        System.out.println(\"The lowest frequency element is: \" + minEle);\n\n    }\n}  \n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p> <strong>Output: </strong><br>The highest frequency element is: 10<br>The lowest frequency element is: 15<br><strong>Time Complexity: </strong>O(N*N), where N = size of the array. We are using the nested loop to find the frequency.<br><strong>Space Complexity: </strong>&nbsp;O(N), where N = size of the array. It is for the visited array we are using. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Optimized approach(Using map):</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We can use a map of value and frequency pair, in which we can easily update the frequency of an element if it is already present in the map, if it is not present in the map then insert it in the map with frequency as 1. After completing all the iterations, we will find the element with the highest frequency and the element with the lowest frequency.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The steps are as follows:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li>Take a unordered_map&lt;int, int&gt; / HashMap of &lt;Integer, Integer&gt; pair.</li><li>Use a for loop to iterate the array.</li><li>If the element is not present in the map then insert it with frequency 1, otherwise increase the existing frequency by 1.</li><li>After visiting the whole array, we will find the element with the highest frequency and the element with the lowest frequency by iterating the map.</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Code</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    \n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvoid Frequency(int arr[], int n)\n{\n    unordered_map&lt;int, int&gt; map;\n\n    for (int i = 0; i &lt; n; i++)\n        map[arr[i]]++;\n\n    int maxFreq = 0, minFreq = n;\n    int maxEle = 0, minEle = 0;\n    // Traverse through map to find the elements.\n    for (auto it : map) {\n        int count = it.second;\n        int element = it.first;\n\n        if (count &gt; maxFreq) {\n            maxEle = element;\n            maxFreq = count;\n        }\n        if (count &lt; minFreq) {\n            minEle = element;\n            minFreq = count;\n        }\n    }\n\n    cout &lt;&lt; \"The highest frequency element is: \" &lt;&lt; maxEle &lt;&lt; \"\\n\";\n    cout &lt;&lt; \"The lowest frequency element is: \" &lt;&lt; minEle &lt;&lt; \"\\n\";\n}\n\nint main()\n{\n    int arr[] = {10, 5, 10, 15, 10, 5};\n    int n = sizeof(arr) / sizeof(arr[0]);\n    Frequency(arr, n);\n    return 0;\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output: </strong><br>The highest frequency element is: 10<br>The lowest frequency element is: 15<br><strong>Time Complexity: </strong>O(N), where N = size of the array. The insertion and retrieval operation in the map takes O(1) time.<br><strong>Space Complexity: </strong>&nbsp;O(N), where N = size of the array. It is for the map we are using.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\n\npublic class Main {\n\n    public static void main(String args[]) {\n\n        int arr[] = {10, 5, 10, 15, 10, 5};\n        int n = arr.length;\n        Frequency(arr, n);\n    }\n    static void Frequency(int arr[], int n) {\n        Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();\n\n        for (int i = 0; i &lt; n; i++) {\n            if (map.containsKey(arr[i])) {\n                map.put(arr[i], map.get(arr[i]) + 1);\n            } else {\n                map.put(arr[i], 1);\n            }\n        }\n\n        int maxFreq = 0, minFreq = n;\n        int maxEle = 0, minEle = 0;\n        // Traverse through map and find the elements\n        for (Map.Entry&lt;Integer, Integer&gt; entry : map.entrySet()) {\n            int count = entry.getValue();\n            int element = entry.getKey();\n\n            if (count &gt; maxFreq) {\n                maxEle = element;\n                maxFreq = count;\n            }\n            if (count &lt; minFreq) {\n                minEle = element;\n                minFreq = count;\n            }\n        }\n\n        System.out.println(\"The highest frequency element is: \" + maxEle);\n        System.out.println(\"The lowest frequency element is: \" + minEle);\n    }\n} \n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p> <strong>Output: </strong><br>The highest frequency element is: 10<br>The lowest frequency element is: 15<br><strong>Time Complexity: </strong>O(N), where N = size of the array. The insertion and retrieval operation in the map takes O(1) time.<br><strong>Space Complexity: </strong>&nbsp;O(N), where N = size of the array. It is for the map we are using. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;<strong><a href=\"https://www.linkedin.com/in/kriti39/\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>KRITIDIPTA GHOSH</strong></a></strong>&nbsp;for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a>.&nbsp;<em>If you want to suggest any improvement/correction in this article please mail us at&nbsp;write4tuf@gmail.com</em></p></blockquote>\n<!-- /wp:quote -->",
    "category_tag": "arrays",
    "likes": 234,
    "preview": "Problem Statement: Given an array of size N. Find the highest and lowest frequency element. Pre-requisite: Hashing Theory and Counting frequencies of array elements Examples: Example 1: Input: arra..."
}