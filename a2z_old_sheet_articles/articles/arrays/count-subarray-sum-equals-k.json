{
    "dislikes": 4,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:12:03 GMT+0530 (India Standard Time)",
    "slug": "count-subarray-sum-equals-k",
    "aid": "2233",
    "tuf_plus": "",
    "title": "Count Subarray sum Equals K",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "hashing",
            "topic-title": "Hashing"
        }
    ],
    "category_tag": "arrays",
    "likes": 337,
    "preview": "Problem Statement: Given an array of integers and an integer k, return the total number of subarrays whose sum equals k. A subarray is a contiguous non-empty sequence of elements within an array. P...",
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement:</strong> Given an array of integers and an integer k, return the total number of subarrays whose sum equals k.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>A subarray is a contiguous non-empty sequence of elements within an array.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Pre-requisite: </strong><a href=\"https://takeuforward.org/data-structure/longest-subarray-with-given-sum-k/\">Longest subarray with given sum</a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n<details class=\"article_example_details\">\n<summary class=\"article_example_summary\">\n<span><strong>\nExamples\n</strong>\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"atricle_example_content\">\n<pre class=\"wp-block-preformatted\"><!-- Insert New Examples Here -->\n<strong>Example 1:</strong>\n<strong>Input Format:</strong> N = 4, array[] = {3, 1, 2, 4}, k = 6\n<strong>Result:</strong> 2\n<strong>Explanation:</strong> The subarrays that sum up to 6 are [3, 1, 2] and [2, 4].\n\n<strong>Example 2:</strong>\n<strong>Input Format:</strong> N = 3, array[] = {1,2,3}, k = 3\n<strong>Result:</strong> 2\n<strong>Explanation:</strong> The subarrays that sum up to 3 are [1, 2], and [3].\n</pre>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Practice Section-->\n<div class=\"practice\">\n<span><strong>Practice: </strong></span>\n<div class=\"problem-buttons\">\n\n<!-- Add Codestudio Problem Link inside href -->\n<a href=\"https://www.codingninjas.com/codestudio/problems/subarray-sums-i_1467103?utm_source=youtube&amp;utm_medium=affiliate&amp;utm_campaign=striver_Arrayproblems\" target=\"_blank\" rel=\"noopener\">\n<span>Solve Problem</span>\n<img src=\"https://static.takeuforward.org/wp/uploads/2023/04/Group-11-5.png\" alt=\"code-studio\">\n</a>\n</div>\n\n\n<div class=\"problem-buttons\">\n<!-- Add Leetcode Problem Link inside href -->\n<a href=\"https://leetcode.com/problems/subarray-sum-equals-k/\" target=\"_blank\" rel=\"noopener\">\n<span>Solve Problem</span>\n<img src=\"https://cdn.iconscout.com/icon/free/png-256/free-leetcode-3521542-2944960.png?f=webp\" alt=\"leetcode\">\n</a>\n</div>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<div class=\"horizontal_navbar_dsa_article\">\n<div class=\"grid_container_three\">\n<a href=\"#brute-force-approach\" class=\"three-boxes box-a\">\nBrute Force Approach\n</a>\n<a href=\"#better-approach\" class=\"three-boxes box-b\">\nBetter Approach\n</a>\n<a href=\"#optimal-approach\" class=\"three-boxes box-c\">\nOptimal Approach\n</a>\n<a href=\"#dsa_article_video_explanation\" class=\"three-boxes box-d\">\n<svg width=\"26\" height=\"26\" viewBox=\"0 0 20 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M8 10L13.19 7L8 4V10ZM19.56 2.17C19.69 2.64 19.78 3.27 19.84 4.07C19.91 4.87 19.94 5.56 19.94 6.16L20 7C20 9.19 19.84 10.8 19.56 11.83C19.31 12.73 18.73 13.31 17.83 13.56C17.36 13.69 16.5 13.78 15.18 13.84C13.88 13.91 12.69 13.94 11.59 13.94L10 14C5.81 14 3.2 13.84 2.17 13.56C1.27 13.31 0.69 12.73 0.44 11.83C0.31 11.36 0.22 10.73 0.16 9.93C0.0900001 9.13 0.0599999 8.44 0.0599999 7.84L0 7C0 4.81 0.16 3.2 0.44 2.17C0.69 1.27 1.27 0.69 2.17 0.44C2.64 0.31 3.5 0.22 4.82 0.16C6.12 0.0899998 7.31 0.0599999 8.41 0.0599999L10 0C14.19 0 16.8 0.16 17.83 0.44C18.73 0.69 19.31 1.27 19.56 2.17Z\" fill=\"red\"></path>\n</svg>\n\n</a>\n<div class=\"box-e tooltip\">\n<svg viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M12.842 9.25L11.9577 10.17C11.2502 10.89 10.8081 11.5 10.8081 13H8.84297V12.5C8.84297 11.39 9.28511 10.39 9.99255 9.67L11.2109 8.41C11.5745 8.05 11.7906 7.55 11.7906 7C11.7906 6.46957 11.5836 5.96086 11.2151 5.58579C10.8465 5.21071 10.3467 5 9.82552 5C9.30434 5 8.80451 5.21071 8.43598 5.58579C8.06745 5.96086 7.86041 6.46957 7.86041 7H5.89531C5.89531 5.93913 6.30938 4.92172 7.04644 4.17157C7.7835 3.42143 8.78316 3 9.82552 3C10.8679 3 11.8675 3.42143 12.6046 4.17157C13.3417 4.92172 13.7557 5.93913 13.7557 7C13.7543 7.84324 13.4259 8.65183 12.842 9.25ZM10.8081 17H8.84297V15H10.8081M9.82552 0C8.53521 0 7.25754 0.258658 6.06545 0.761205C4.87337 1.26375 3.79021 2.00035 2.87783 2.92893C1.03519 4.8043 0 7.34784 0 10C0 12.6522 1.03519 15.1957 2.87783 17.0711C3.79021 17.9997 4.87337 18.7362 6.06545 19.2388C7.25754 19.7413 8.53521 20 9.82552 20C12.4314 20 14.9306 18.9464 16.7732 17.0711C18.6158 15.1957 19.651 12.6522 19.651 10C19.651 4.47 15.2296 0 9.82552 0Z\" fill=\"black\"></path>\n</svg>\n<div class=\"bottom\">\n<p>Expand any one approach by clicking the given options in the bar. Clicking one approach on bar,\ncloses all other expands. You can manually expand more than one approach at a time</p>\n<i></i>\n</div>\n\n</div>\n</div>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Approaches Drop-Down -->\n<div class=\"dsa_article_dropdown_approachs \">\n\n<!-- Brute Force Approach Starts from here -->\n<div id=\"brute-force-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nBrute Force Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n<p>The steps are as follows:</p>\n<ol><li>First, we will run a loop(<strong><em>say i</em></strong>) that will select every possible starting index of the subarray. The possible starting indices can vary from index 0 to index n-1(n = size of the array).</li><li>Inside the loop, we will run another loop(say j) that will signify the ending index of the subarray. For every subarray starting from the index i, the possible ending index can vary from index i to n-1(n = size of the array).</li><li>After that for each subarray starting from index i and ending at index j <strong>(i.e. arr[i\u2026.j]), </strong>we will run another loop to calculate the sum of all the elements(of that particular subarray).</li><li>After calculating the sum, we will check if the sum is equal to the given k. If it is, we will increase the value of the count.</li></ol>\n\n<p><strong>Intuition: </strong>We will check the sum of every possible subarray and count how many of them are equal to k. To get every possible subarray sum, we will be using three nested loops. The first two loops(say i and j) will iterate over every possible starting index and ending index of a subarray. Basically, in each iteration, the subarray range will be from index i to index j. Using another loop we will get the sum of the elements of the subarray <strong>[i\u2026..j]</strong>. Among all values of the sum calculated, we will only consider those that are equal to k.</p>\n<p><strong>Note: </strong>We are selecting every possible subarray using two nested loops and for each of them, we add all its elements using another loop.</p>\n<p><strong>Note: </strong><em>For a better understanding of intuition, please watch the video at the bottom of the page.</em></p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint findAllSubarraysWithGivenSum(vector &lt; int &gt; &amp; arr, int k) {\n    int n = arr.size(); // size of the given array.\n    int cnt = 0; // Number of subarrays:\n\n    for (int i = 0 ; i &lt; n; i++) { // starting index i\n        for (int j = i; j &lt; n; j++) { // ending index j\n\n            // calculate the sum of subarray [i...j]\n            int sum = 0;\n            for (int K = i; K &lt;= j; K++)\n                sum += arr[K];\n\n            // Increase the count if sum == k:\n            if (sum == k)\n                cnt++;\n        }\n    }\n    return cnt;\n}\n\nint main()\n{\n    vector<int> arr = {3, 1, 2, 4};\n    int k = 6;\n    int cnt = findAllSubarraysWithGivenSum(arr, k);\n    cout &lt;&lt; \"The number of subarrays is: \" &lt;&lt; cnt &lt;&lt; \"\\n\";\n    return 0;\n}\n\n</int></code>\n</pre>\n<p>\n<!-- Insert Output of Brute Force Here -->\n</p><p><strong>Output: </strong>The number of subarrays is: 2</p>\n<p></p>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\npublic class tUf {\n    public static int findAllSubarraysWithGivenSum(int arr[], int k) {\n        int n = arr.length; // size of the given array.\n        int cnt = 0; // Number of subarrays:\n\n        for (int i = 0 ; i &lt; n; i++) { // starting index i\n            for (int j = i; j &lt; n; j++) { // ending index j\n\n                // calculate the sum of subarray [i...j]\n                int sum = 0;\n                for (int K = i; K &lt;= j; K++)\n                    sum += arr[K];\n\n                // Increase the count if sum == k:\n                if (sum == k)\n                    cnt++;\n            }\n        }\n        return cnt;\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {3, 1, 2, 4};\n        int k = 6;\n        int cnt = findAllSubarraysWithGivenSum(arr, k);\n        System.out.println(\"The number of subarrays is: \" + cnt);\n    }\n}\n</code>\n</pre>\n<p>\n<!-- Insert Output of Brute Force Here -->\n</p><p><strong>Output: </strong>The number of subarrays is: 2</p>\n<p></p>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\ndef findAllSubarraysWithGivenSum(arr, k):\n    n = len(arr)  # size of the given array.\n    cnt = 0  # Number of subarrays.\n\n    for i in range(n):  # starting index i.\n        for j in range(i, n):  # ending index j.\n            # calculate the sum of subarray [i...j].\n            subarray_sum = sum(arr[i:j+1])\n\n            # Increase the count if sum == k.\n            if subarray_sum == k:\n                cnt += 1\n\n    return cnt\n\n\nif __name__ == '__main__':\n    arr = [3, 1, 2, 4]\n    k = 6\n    cnt = findAllSubarraysWithGivenSum(arr, k)\n    print(\"The number of subarrays is:\", cnt)\n\n</code>\n</pre>\n<p>\n<!-- Insert Output of Brute Force Here -->\n</p><p><strong>Output: </strong>The number of subarrays is: 2</p>\n<p></p>\n</div>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n<!-- Insert Time and Space Complexity of Brute Force Here -->\n</p><p><strong>Time Complexity: </strong>O(N<sup>3</sup>), where N = size of the array.<br><strong>Reason: </strong>We are using three nested loops here. Though all are not running for exactly N times, the time complexity will be approximately O(N<sup>3</sup>).</p>\n<p><strong>Space Complexity: </strong>O(1) as we are not using any extra space.</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Brute Force Approach Ends here -->\n\n\n<!-- Better Approach Starts from here -->\n\n<div id=\"better-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nBetter Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition For Better Approach Here -->\n<p>The steps are as follows:</p>\n<ol><li>First, we will run a loop(say i) that will select every possible starting index of the subarray. The possible starting indices can vary from index 0 to index n-1(n = array size).</li><li>Inside the loop, we will run another loop(say j) that will signify the ending index as well as the current element of the subarray. For every subarray starting from the index i, the possible ending index can vary from index i to n-1(n = size of the array).</li><li>Inside loop j, we will add the current element to the sum of the previous subarray i.e. <strong>sum = sum + arr[j]</strong>.&nbsp;</li><li>After calculating the sum, we will check if the sum is equal to the given k. If it is, we will increase the value of the count.</li></ol>\n<p><strong>Intuition: </strong>If we carefully observe, we can notice that to get the sum of the current subarray we just need to add the current element(i.e. <strong>arr[j]</strong>) to the sum of the previous subarray i.e. <strong>arr[i\u2026.j-1]</strong>.</p>\n<p>Assume previous subarray = <strong>arr[i\u2026\u2026j-1]</strong><strong><br></strong>current subarray = <strong>arr[i\u2026..j]</strong><strong><br></strong>Sum of <strong>arr[i\u2026.j]</strong> = <strong>(sum of arr[i\u2026.j-1]) + arr[j]</strong></p>\n<p>This is how we can remove the third loop and while moving j pointer, we can calculate the sum.</p>\n<p><strong>Note: </strong><em>For a better understanding of intuition, please watch the video at the bottom of the page.</em></p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint findAllSubarraysWithGivenSum(vector &lt; int &gt; &amp; arr, int k) {\n    int n = arr.size(); // size of the given array.\n    int cnt = 0; // Number of subarrays:\n\n    for (int i = 0 ; i &lt; n; i++) { // starting index i\n        int sum = 0;\n        for (int j = i; j &lt; n; j++) { // ending index j\n            // calculate the sum of subarray [i...j]\n            // sum of [i..j-1] + arr[j]\n            sum += arr[j];\n\n            // Increase the count if sum == k:\n            if (sum == k)\n                cnt++;\n        }\n    }\n    return cnt;\n}\n\nint main()\n{\n    vector<int> arr = {3, 1, 2, 4};\n    int k = 6;\n    int cnt = findAllSubarraysWithGivenSum(arr, k);\n    cout &lt;&lt; \"The number of subarrays is: \" &lt;&lt; cnt &lt;&lt; \"\\n\";\n    return 0;\n}\n</int></code>\n</pre>\n<p>\n<!-- Insert Output of Better Approach Here -->\n</p><p><strong>Output: </strong>The number of subarrays is: 2</p>\n<p></p>\n\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\npublic class tUf {\n    public static int findAllSubarraysWithGivenSum(int arr[], int k) {\n        int n = arr.length; // size of the given array.\n        int cnt = 0; // Number of subarrays:\n\n        for (int i = 0 ; i &lt; n; i++) { // starting index i\n            int sum = 0;\n            for (int j = i; j &lt; n; j++) { // ending index j\n                // calculate the sum of subarray [i...j]\n                // sum of [i..j-1] + arr[j]\n                sum += arr[j];\n\n                // Increase the count if sum == k:\n                if (sum == k)\n                    cnt++;\n            }\n        }\n        return cnt;\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {3, 1, 2, 4};\n        int k = 6;\n        int cnt = findAllSubarraysWithGivenSum(arr, k);\n        System.out.println(\"The number of subarrays is: \" + cnt);\n    }\n}  \n</code>\n</pre>\n<p>\n<!-- Insert Output of Better Approach Here -->\n</p><p><strong>Output: </strong>The number of subarrays is: 2</p>\n<p></p>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\n<!-- Insert Python Code of Better Approach Here -->\ndef findAllSubarraysWithGivenSum(arr, k):\n    n = len(arr)  # size of the given array.\n    cnt = 0  # Number of subarrays.\n\n    for i in range(n):  # starting index i.\n        subarray_sum = 0\n        for j in range(i, n):  # ending index j.\n            # calculate the sum of subarray [i...j]\n            # sum of [i..j-1] + arr[j]\n            subarray_sum += arr[j]\n\n            # Increase the count if sum == k.\n            if subarray_sum == k:\n                cnt += 1\n\n    return cnt\n\nif __name__ == '__main__':\n    arr = [3, 1, 2, 4]\n    k = 6\n    cnt = findAllSubarraysWithGivenSum(arr, k)\n    print(\"The number of subarrays is:\", cnt)\n</code>\n</pre>\n<p>\n<!-- Insert Output of Better Approach Here -->\n</p><p><strong>Output: </strong>The number of subarrays is: 2</p>\n<p></p>\n</div>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Better Approach Here -->\n</p><p><strong>Time Complexity: </strong>O(N<sup>2</sup>), where N = size of the array.<br><strong>Reason: </strong>We are using two nested loops here. As each of them is running for exactly N times, the time complexity will be approximately O(N<sup>2</sup>).</p>\n<p><strong>Space Complexity: </strong>O(1) as we are not using any extra space.</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Better Approach Ends from here -->\n\n\n<!-- Optimal Approach Starts from here -->\n\n<div id=\"optimal-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nOptimal Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm of Better Approach Here -->\n<p>In this approach, we are going to use the concept of the prefix sum to solve this problem. Here, the prefix sum of a subarray ending at index i simply means the sum of all the elements of that subarray.</p>\n<p><strong>Observation:</strong></p>\n<p>Assume, the prefix sum of a subarray ending at index i is <strong>x</strong>. In that subarray, we will search for another subarray ending at index i, whose sum equals <strong>k</strong>. Here, we need to observe that if there exists another subarray ending at index i with sum k, then the prefix sum of the rest of the subarray will be <strong>x-k</strong>. The below image will clarify the concept:</p>\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/04/countSubarray.jpg\" alt=\"\" class=\"wp-image-8285\"></figure>\n<p>Now, <em>for a subarray ending at index i with the prefix sum x, if we remove the part with the prefix sum x-k, we will be left with the part whose sum is equal to k. And that is what we want.</em></p>\n<p>Now, there may exist multiple subarrays with the prefix sum x-k. So, the number of subarrays with sum k that we can generate from the entire subarray ending at index i, is exactly equal to the number of subarrays with the prefix sum x-k, that we can remove from the entire subarray.</p>\n<p>That is why, instead of searching the subarrays with sum k, we will keep the occurrence of the prefix sum of the subarrays using a map data structure.&nbsp;</p>\n<p>In the map, we will store every prefix sum calculated, with its occurrence in a &lt;key, value&gt; pair. Now, at index i, we just need to check the map data structure to get the number of times that the subarrays with the prefix sum x-k occur. Then we will simply add that number to our answer.</p>\n<p>We will apply the above process for all possible indices of the given array. The possible values of the index i can be from 0 to n-1(where n = size of the array).</p>\n<p><strong>Approach:</strong></p>\n<p>The steps are as follows:</p>\n<ol><li>First, we will declare a map to store the prefix sums and their counts.</li><li>Then, we will set the value of 0 as 1 on the map.</li><li>Then we will run a loop(say i) from index 0 to n-1(n = size of the array).</li><li>For each index i, we will do the following:<ol><li>We will add the current element i.e. arr[i] to the prefix sum.</li><li>We will calculate the prefix sum i.e. x-k, for which we need the occurrence.</li><li>We will add the occurrence of the prefix sum x-k i.e. mpp[x-k] to our answer.</li><li>Then we will store the current prefix sum in the map increasing its occurrence by 1.</li></ol></li></ol>\n<p><strong>Question: Why do we need to set the value of 0?</strong><strong><br></strong>Let\u2019s understand this using an example. Assume the given array is [3, -3, 1, 1, 1] and k is 3. Now, for index 0, we get the total prefix sum as 3, and k is also 3. So, the prefix sum of the remove-part should be x-k = 3-3 = 0. Now, if the value is not previously set for the key 0 in the map, we will get the default value 0 for the key 0 and we will add 0 to our answer. This will mean that we have not found any subarray with sum 3 till now. But this should not be the case as index 0 itself is a subarray with sum k i.e. 3.<br>So, in order to avoid this situation we need to set the value of 0 as 1 on the map beforehand.</p>\n<p><strong>Note: </strong><em>For a better understanding of intuition, please watch the video at the bottom of the page.</em></p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint findAllSubarraysWithGivenSum(vector &lt; int &gt; &amp; arr, int k) {\n    int n = arr.size(); // size of the given array.\n    map<int, int=\"\"> mpp;\n    int preSum = 0, cnt = 0;\n\n    mpp[0] = 1; // Setting 0 in the map.\n    for (int i = 0; i &lt; n; i++) {\n        // add current element to prefix Sum:\n        preSum += arr[i];\n\n        // Calculate x-k:\n        int remove = preSum - k;\n\n        // Add the number of subarrays to be removed:\n        cnt += mpp[remove];\n\n        // Update the count of prefix sum\n        // in the map.\n        mpp[preSum] += 1;\n    }\n    return cnt;\n}\n\nint main()\n{\n    vector<int> arr = {3, 1, 2, 4};\n    int k = 6;\n    int cnt = findAllSubarraysWithGivenSum(arr, k);\n    cout &lt;&lt; \"The number of subarrays is: \" &lt;&lt; cnt &lt;&lt; \"\\n\";\n    return 0;\n}\n\n</int></int,></code>\n</pre>\n<p>\n<!-- Insert Output of Optimal Apporach Here -->\n</p><p><strong>Output: </strong>The number of subarrays is: 2</p>\n<p></p>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\npublic class tUf {\n    public static int findAllSubarraysWithGivenSum(int arr[], int k) {\n        int n = arr.length; // size of the given array.\n        Map<integer, integer=\"\"> mpp = new HashMap<integer, integer=\"\">();\n        int preSum = 0, cnt = 0;\n\n        mpp.put(0, 1); // Setting 0 in the map.\n        for (int i = 0; i &lt; n; i++) {\n            // add current element to prefix Sum:\n            preSum += arr[i];\n\n            // Calculate x-k:\n            int remove = preSum - k;\n\n            // Add the number of subarrays to be removed:\n            cnt += mpp.getOrDefault(remove, 0);\n\n            // Update the count of prefix sum\n            // in the map.\n            mpp.put(preSum, mpp.getOrDefault(preSum, 0) + 1);\n        }\n        return cnt;\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {3, 1, 2, 4};\n        int k = 6;\n        int cnt = findAllSubarraysWithGivenSum(arr, k);\n        System.out.println(\"The number of subarrays is: \" + cnt);\n    }\n}\n</integer,></integer,></code>\n</pre>\n<p>\n<!-- Insert Output of Optimal Apporach Here -->\n</p><p><strong>Output: </strong>The number of subarrays is: 2</p>\n<p></p>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\nfrom collections import defaultdict\n\ndef findAllSubarraysWithGivenSum(arr, k):\n    n = len(arr) # size of the given array.\n    mpp = defaultdict(int)\n    preSum = 0\n    cnt = 0\n\n    mpp[0] = 1 # Setting 0 in the map.\n    for i in range(n):\n        # add current element to prefix Sum:\n        preSum += arr[i]\n\n        # Calculate x-k:\n        remove = preSum - k\n\n        # Add the number of subarrays to be removed:\n        cnt += mpp[remove]\n\n        # Update the count of prefix sum\n        # in the map.\n        mpp[preSum] += 1\n\n    return cnt\n\n\nif __name__ == '__main__':\n    arr = [3, 1, 2, 4]\n    k = 6\n    cnt = findAllSubarraysWithGivenSum(arr, k)\n    print(\"The number of subarrays is:\", cnt)\n</code>\n</pre>\n<p>\n<!-- Insert Output of Optimal Apporach Here -->\n</p><p><strong>Output: </strong>The number of subarrays is: 2</p>\n<p></p>\n</div>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Optimal Approach-->\n</p><p><strong>Time Complexity: </strong>O(N) or O(N*logN) depending on which map data structure we are using, where N = size of the array.<br><strong>Reason: </strong>For example, if we are using an unordered_map data structure in C++ the time complexity will be O(N) but if we are using a map data structure, the time complexity will be O(N*logN). The least complexity will be O(N) as we are using a loop to traverse the array.</p>\n<p><strong>Note: </strong><em>To know more about maps, please refer to this: </em><a href=\"https://takeuforward.org/hashing/hashing-maps-time-complexity-collisions-division-rule-of-hashing-strivers-a2z-dsa-course/\"><em>Hashing | Maps | Time Complexity | Collisions | Division Rule of Hashing | Strivers A2Z DSA Course</em></a><em>.</em></p>\n<p><strong>Space Complexity: </strong>O(N) as we are using a map data structure.</p>\n\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Optimal Approach Starts from here -->\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n<details>\n<summary class=\"main-summary\">\n<span>\nVideo Explanation\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"yt-video-wrapper\">\n\n<!-- Insert iframe embed Link of Youtube Video-->\n<iframe class=\"lazy-loaded\" loading=\"lazy\" title=\"Count Subarray sum Equals K | Brute - Better -Optimal\" width=\"810\" height=\"456\" data-lazy-type=\"iframe\" data-src=\"https://www.youtube.com/embed/xvNwoz-ufXA?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\" src=\"https://www.youtube.com/embed/xvNwoz-ufXA?feature=oembed\"></iframe><noscript>\n<iframe loading=\"lazy\" title=\"Count Subarray sum Equals K | Brute - Better -Optimal\" width=\"810\" height=\"456\" src=\"https://www.youtube.com/embed/xvNwoz-ufXA?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe></noscript>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p> <em style=\"font-size: inherit; font-family: var(--text-font);\">Special thanks to&nbsp;<strong><a href=\"https://www.linkedin.com/in/kriti39/\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>KRITIDIPTA GHOSH</strong></a></strong>&nbsp;for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a style=\"font-size: inherit; font-family: var(--text-font);\" href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a><span style=\"font-size: inherit; color: var(--text-color); font-family: var(--text-font);\">.&nbsp;</span><em style=\"font-size: inherit;  font-family: var(--text-font);\">If you want to suggest any improvement/correction in this article please mail us at&nbsp;write4tuf@gmail.com</em> </p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:html -->\n<script>\n\nconst codeSections = document.querySelectorAll('.code-section');\n\n// Get last selected language from localStorage or set default value\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\n// Update last selected language for all sections and store in localStorage\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\n// Handle copy button click event\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\n// Set initial state of the tabs\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<script>\nconst codeSections = document.querySelectorAll('.code-section');\n\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script src=\"https://takeuforward.org/UXApproachDropDowns/3ApproachJSScript.js\"></script>\n<!-- /wp:html -->"
}