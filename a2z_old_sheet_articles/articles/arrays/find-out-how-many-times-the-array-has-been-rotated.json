{
    "dislikes": 9,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:12:05 GMT+0530 (India Standard Time)",
    "slug": "find-out-how-many-times-the-array-has-been-rotated",
    "aid": "2242",
    "tuf_plus": "",
    "title": "Find out how many times the array has been rotated",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "binary-search",
            "topic-title": "Binary Search"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        }
    ],
    "category_tag": "arrays",
    "likes": 150,
    "preview": "Problem Statement: Given an integer array arr of size N, sorted in ascending order (with distinct values). Now the array is rotated between 1 to N times which is unknown. Find how many times the ar...",
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement:</strong> Given an integer array <strong>arr</strong> of size <strong>N</strong>, sorted in ascending order (<strong>with distinct values</strong>). Now the array is rotated between 1 to N times which is unknown. Find how many times the array has been rotated.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Pre-requisites: </strong><a href=\"https://takeuforward.org/data-structure/minimum-in-rotated-sorted-array/\">Find minimum in Rotated Sorted Array</a>,\u00a0 <a href=\"https://takeuforward.org/strivers-a2z-dsa-course/strivers-a2z-dsa-course-sheet-2/\">Search in Rotated Sorted Array II</a> &amp; <a href=\"https://takeuforward.org/data-structure/binary-search-explained/\">Binary Search algorithm</a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n<details class=\"article_example_details\">\n<summary class=\"article_example_summary\">\n<span><strong>\nExamples\n</strong>\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"atricle_example_content\">\n<pre class=\"wp-block-preformatted\"><!-- Insert New Examples Here -->\n<pre class=\"wp-block-preformatted\"><strong>Example 1:</strong>\n<strong>Input Format:</strong> arr = [4,5,6,7,0,1,2,3]\n<strong>Result:</strong> 4\n<strong>Explanation:</strong> The original array should be [0,1,2,3,4,5,6,7]. So, we can notice that the array has been rotated 4 times.\n\n<strong>Example 2:</strong>\n<strong>Input Format:</strong> arr = [3,4,5,1,2]\n<strong>Result:</strong> 3\n<strong>Explanation:</strong> The original array should be [1,2,3,4,5]. So, we can notice that the array has been rotated 3 times.\n</pre>\n</pre>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Solution:</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>How does the rotation occur in a sorted array?</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Let's consider a sorted array: {1, 2, 3, 4, 5}. If we rotate this array 2 times, it will become: {4, 5, 1, 2, 3}. In essence, we moved the element at the last index to the front, while shifting the remaining elements to the right. We performed this process twice.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":11461,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/06/Screenshot-2023-06-27-231533.png\" alt=\"\" class=\"wp-image-11461\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>Observation:&nbsp;</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>We can easily observe that<strong><em> the number of rotations in an array is equal to the index(0-based index) of its minimum element.</em></strong></li><li><em>So,</em><strong><em> in order to solve this problem, we have to find the index of the minimum element.</em></strong></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:html -->\n<!-- This is Practice Section-->\n<div class=\"practice\">\n<span><strong>Practice: </strong></span>\n<div class=\"problem-buttons\">\n\n<!-- Add Problem Link inside href -->\n<a href=\"https://bit.ly/3MsMNOG\" target=\"_blank\" rel=\"noopener\">\n<span>Solve Problem</span>\n<img src=\"https://static.takeuforward.org/wp/uploads/2023/04/Group-11-5.png\" alt=\"code-studio\">\n</a>\n</div>\n</div>\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\nyourself first. </em></p>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<div class=\"horizontal_navbar_dsa_article\">\n<div class=\"grid_container_two\">\n<a href=\"#brute-force-approach\" class=\"two-boxes box-a\">\nBrute Force Approach\n</a>\n<a href=\"#optimal-approach\" class=\"two-boxes box-c\">\nOptimal Approach\n</a>\n<a href=\"#dsa_article_video_explanation\" class=\"three-boxes box-d\">\n<svg width=\"26\" height=\"26\" viewBox=\"0 0 20 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M8 10L13.19 7L8 4V10ZM19.56 2.17C19.69 2.64 19.78 3.27 19.84 4.07C19.91 4.87 19.94 5.56 19.94 6.16L20 7C20 9.19 19.84 10.8 19.56 11.83C19.31 12.73 18.73 13.31 17.83 13.56C17.36 13.69 16.5 13.78 15.18 13.84C13.88 13.91 12.69 13.94 11.59 13.94L10 14C5.81 14 3.2 13.84 2.17 13.56C1.27 13.31 0.69 12.73 0.44 11.83C0.31 11.36 0.22 10.73 0.16 9.93C0.0900001 9.13 0.0599999 8.44 0.0599999 7.84L0 7C0 4.81 0.16 3.2 0.44 2.17C0.69 1.27 1.27 0.69 2.17 0.44C2.64 0.31 3.5 0.22 4.82 0.16C6.12 0.0899998 7.31 0.0599999 8.41 0.0599999L10 0C14.19 0 16.8 0.16 17.83 0.44C18.73 0.69 19.31 1.27 19.56 2.17Z\" fill=\"red\"></path>\n</svg>\n\n</a>\n<div class=\"box-e tooltip\">\n<svg viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M12.842 9.25L11.9577 10.17C11.2502 10.89 10.8081 11.5 10.8081 13H8.84297V12.5C8.84297 11.39 9.28511 10.39 9.99255 9.67L11.2109 8.41C11.5745 8.05 11.7906 7.55 11.7906 7C11.7906 6.46957 11.5836 5.96086 11.2151 5.58579C10.8465 5.21071 10.3467 5 9.82552 5C9.30434 5 8.80451 5.21071 8.43598 5.58579C8.06745 5.96086 7.86041 6.46957 7.86041 7H5.89531C5.89531 5.93913 6.30938 4.92172 7.04644 4.17157C7.7835 3.42143 8.78316 3 9.82552 3C10.8679 3 11.8675 3.42143 12.6046 4.17157C13.3417 4.92172 13.7557 5.93913 13.7557 7C13.7543 7.84324 13.4259 8.65183 12.842 9.25ZM10.8081 17H8.84297V15H10.8081M9.82552 0C8.53521 0 7.25754 0.258658 6.06545 0.761205C4.87337 1.26375 3.79021 2.00035 2.87783 2.92893C1.03519 4.8043 0 7.34784 0 10C0 12.6522 1.03519 15.1957 2.87783 17.0711C3.79021 17.9997 4.87337 18.7362 6.06545 19.2388C7.25754 19.7413 8.53521 20 9.82552 20C12.4314 20 14.9306 18.9464 16.7732 17.0711C18.6158 15.1957 19.651 12.6522 19.651 10C19.651 4.47 15.2296 0 9.82552 0Z\" fill=\"black\"></path>\n</svg>\n<div class=\"bottom\">\n<p>Expand any one approach by clicking the given options in the bar. Clicking one approach on bar,\ncloses all other expands. You can manually expand more than one approach at a time</p>\n<i></i>\n</div>\n\n</div>\n</div>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Approaches Drop-Down -->\n<div class=\"dsa_article_dropdown_approachs \">\n\n<!-- Brute Force Approach Starts from here -->\n<div id=\"brute-force-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nBrute Force Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n<h3><strong>Algorithm:</strong></h3>\n<ul><li>First, we will declare an \u2018ans\u2019 and an \u2018index\u2019 variable initialized with a large number and -1 respectively.</li><li>Next, we will iterate through the array and compare each element with the variable called \u2018ans\u2019. Whenever we encounter an element 'arr[i]' that is smaller than \u2018ans\u2019, we will update \u2018ans\u2019 with the value of 'arr[i]' and also update the 'index' variable with the corresponding index value, 'i'.</li><li>Finally, we will return \u2018index\u2019 as our answer.</li></ul>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n\n<!-- Insert C++ code of Brute Force Here -->\n#include &lt;bits/stdc++.h>\nusing namespace std;\n\nint findKRotation(vector&lt;int> &amp;arr) {\n    int n = arr.size(); //size of array.\n    int ans = INT_MAX, index = -1;\n    for (int i = 0; i &lt; n; i++) {\n        if (arr[i] &lt; ans) {\n            ans = arr[i];\n            index = i;\n        }\n    }\n    return index;\n}\n\nint main()\n{\n    vector&lt;int> arr = {4, 5, 6, 7, 0, 1, 2, 3};\n    int ans = findKRotation(arr);\n    cout &lt;&lt; \"The array is rotated \" &lt;&lt; ans &lt;&lt; \" times.\\n\";\n    return 0;\n}\n\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\n<!-- Insert Java code of Brute Force Here -->\nimport java.util.*;\n\npublic class tUf {\n    public static int findKRotation(int[] arr) {\n        int n = arr.length; //size of array.\n        int ans = Integer.MAX_VALUE, index = -1;\n        for (int i = 0; i &lt; n; i++) {\n            if (arr[i] &lt; ans) {\n                ans = arr[i];\n                index = i;\n            }\n        }\n        return index;\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {4, 5, 6, 7, 0, 1, 2, 3};\n        int ans = findKRotation(arr);\n        System.out.println(\"The array is rotated \" + ans + \" times.\");\n    }\n}\n\n\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\n<!-- Insert Python code of Brute Force Here -->\nimport sys\ndef findKRotation(arr : [int]) -> int:\n    n = len(arr)  # Size of array\n    ans = float('inf')\n    index = -1\n    for i in range(n):\n        if arr[i] &lt; ans:\n            ans = arr[i]\n            index = i\n    return index\n\nif __name__ == \"__main__\":\n    arr = [4, 5, 6, 7, 0, 1, 2, 3]\n    ans = findKRotation(arr)\n    print(\"The array is rotated\", ans, \"times.\")\n\n\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\n<!-- Insert javascript code of Brute Force Here -->\nfunction findKRotation(arr) {\n    let n = arr.length; // Size of array.\n    let ans = Infinity, index = -1;\n    for (let i = 0; i &lt; n; i++) {\n        if (arr[i] &lt; ans) {\n            ans = arr[i];\n            index = i;\n        }\n    }\n    return index;\n}\n\nlet arr = [4, 5, 6, 7, 0, 1, 2, 3];\nlet ans = findKRotation(arr);\nconsole.log(\"The array is rotated \" + ans + \" times.\");\n\n\n\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Brute Force Here -->\n<strong>Output:</strong> The array is rotated 4 times.\n\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n<!-- Insert Time and Space Complexity of Brute Force Here -->\n<p><strong>Time Complexity: </strong>O(N), N = size of the given array.<strong><br></strong><strong>Reason: </strong>We have to iterate through the entire array to check if the target is present in the array.</p>\n<p><strong>Space Complexity: </strong>O(1)<strong><br></strong><strong>Reason: </strong>We have not used any extra data structures, this makes space complexity, even in the worst case as O(1).</p>\n</p>\n</details>\n</div>\n</details>\n</div>\n<!-- Brute Force Approach Ends here -->\n\n\n<!-- Optimal Approach Starts from here -->\n\n<div id=\"optimal-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nOptimal Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm of Better Approach Here -->\n<h3><strong>Optimal Approach(Using Binary Search)</strong>:&nbsp;</h3>\n<p>We are going to use the binary search algorithm to solve this problem.</p>\n<p><em>The primary objective of the Binary Search algorithm is to efficiently determine the appropriate half to eliminate, thereby reducing the search space by half. It does this by determining a specific condition that ensures that the target is not present in that half.</em></p>\n<p>In the previous article, <a href=\"https://takeuforward.org/data-structure/minimum-in-rotated-sorted-array/\">find the minimum in a rotated sorted array</a>, we have discussed how to find the minimum element in a rotated and sorted array using Binary search. In this problem, we will employ the same algorithm to determine the index of the minimum element. In the previous problem, we only stored the minimum element itself. However, in this updated approach, we will additionally keep track of the index. By making this small adjustment, we can effectively solve the problem using the existing algorithm.</p>\n<h3><strong>Algorithm:</strong></h3>\n<p>The steps are as follows:</p>\n<p>To begin, we will declare the variable 'ans' and initialize it with the largest possible value. Additionally, we will have two pointers, 'low' and 'high', as usual. In this case, we will also introduce an 'index' variable and initialize it with -1.</p>\n<ol><li><strong>Place the 2 pointers i.e. low and high: </strong>Initially, we will place the pointers like this: low will point to the first index and high will point to the last index.<br></li><li><strong>Calculate the \u2018mid\u2019: </strong>Now, inside a loop, we will calculate the value of \u2018mid\u2019 using the following formula:<br><strong>mid = (low+high) // 2 ( \u2018//\u2019 refers to integer division)</strong><br></li><li><strong>If arr[low] &lt;= arr[high]: </strong>In this case, the array from index low to high is completely sorted. Therefore, we can select the minimum element, arr[low].<br>Now,<strong><em> if arr[low] &lt; ans, we will update \u2018ans\u2019 with the value arr[low] and \u2018index\u2019 with the corresponding index low.</em></strong><br>Once this is done, there is no need to continue with the binary search algorithm. So, we will <strong>break </strong>from this step.<br></li><li>Identify the sorted half, and after picking the leftmost element, eliminate that half.<ol><li><strong>If arr[low] &lt;= arr[mid]: </strong><strong><br></strong>This condition ensures that the left part is sorted. So, we will pick the leftmost element i.e. <strong>arr[low]</strong>.<br>Now,<strong><em> if arr[low] &lt; ans, we will update \u2018ans\u2019 with the value arr[low] and \u2018index\u2019 with the corresponding index low.</em></strong><br>After that, we will eliminate this left half(i.e. low = mid+1).<br></li><li><strong>Otherwise, if the right half is sorted:&nbsp; </strong>This condition ensures that the right half is sorted. So, we will pick the leftmost element i.e. <strong>arr[mid]</strong>.<br>Now,<strong><em> if arr[mid] &lt; ans, we will update \u2018ans\u2019 with the value arr[mid] and \u2018index\u2019 with the corresponding index mid.</em></strong><br>After that, we will eliminate this right half(i.e. high = mid-1).<br></li></ol></li><li>This process will be inside a loop and the loop will continue until low crosses high. Finally, we will return the \u2018index\u2019 variable that stores the index of the minimum element.</li></ol>\n<p><strong>Dry-run: </strong><em>Please refer to the </em><a href=\"https://youtu.be/jtSiWTPLwd0\"><em>video</em></a><em> for a detailed explanation.</em></p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n\n<!-- Insert C++ code of Optimal Approach Here-->\n#include &lt;bits/stdc++.h>\nusing namespace std;\n\nint findKRotation(vector&lt;int> &amp;arr) {\n    int low = 0, high = arr.size() - 1;\n    int ans = INT_MAX;\n    int index = -1;\n    while (low &lt;= high) {\n        int mid = (low + high) / 2;\n        //search space is already sorted\n        //then arr[low] will always be\n        //the minimum in that search space:\n        if (arr[low] &lt;= arr[high]) {\n            if (arr[low] &lt; ans) {\n                index = low;\n                ans = arr[low];\n            }\n            break;\n        }\n\n        //if left part is sorted:\n        if (arr[low] &lt;= arr[mid]) {\n            // keep the minimum:\n            if (arr[low] &lt; ans) {\n                index = low;\n                ans = arr[low];\n            }\n\n            // Eliminate left half:\n            low = mid + 1;\n        }\n        else { //if right part is sorted:\n\n            // keep the minimum:\n            if (arr[mid] &lt; ans) {\n                index = mid;\n                ans = arr[mid];\n            }\n\n            // Eliminate right half:\n            high = mid - 1;\n        }\n    }\n    return index;\n}\n\nint main()\n{\n    vector&lt;int> arr = {4, 5, 6, 7, 0, 1, 2, 3};\n    int ans = findKRotation(arr);\n    cout &lt;&lt; \"The array is rotated \" &lt;&lt; ans &lt;&lt; \" times.\\n\";\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\n<!-- Insert Java code of Optimal Approach Here -->\nimport java.util.*;\n\npublic class tUf {\n    public static int findKRotation(int[] arr) {\n        int low = 0, high = arr.length - 1;\n        int ans = Integer.MAX_VALUE;\n        int index = -1;\n        while (low &lt;= high) {\n            int mid = (low + high) / 2;\n            //search space is already sorted\n            //then arr[low] will always be\n            //the minimum in that search space:\n            if (arr[low] &lt;= arr[high]) {\n                if (arr[low] &lt; ans) {\n                    index = low;\n                    ans = arr[low];\n                }\n                break;\n            }\n\n            //if left part is sorted:\n            if (arr[low] &lt;= arr[mid]) {\n                // keep the minimum:\n                if (arr[low] &lt; ans) {\n                    index = low;\n                    ans = arr[low];\n                }\n\n                // Eliminate left half:\n                low = mid + 1;\n            } else { //if right part is sorted:\n\n                // keep the minimum:\n                if (arr[mid] &lt; ans) {\n                    index = mid;\n                    ans = arr[mid];\n                }\n\n                // Eliminate right half:\n                high = mid - 1;\n            }\n        }\n        return index;\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {4, 5, 6, 7, 0, 1, 2, 3};\n        int ans = findKRotation(arr);\n        System.out.println(\"The array is rotated \" + ans + \" times.\");\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\n<!-- Insert Python code of Optimal Approach Here -->\nimport sys\ndef findKRotation(arr : [int]) -> int:\n    low = 0\n    high = len(arr) - 1\n    ans = float('inf')\n    index = -1\n    while low &lt;= high:\n        mid = (low + high) // 2\n\n        # If search space is already sorted,\n        # then arr[low] will always be\n        # the minimum in that search space\n        if arr[low] &lt;= arr[high]:\n            if arr[low] &lt; ans:\n                index = low\n                ans = arr[low]\n            break\n\n        # If left part is sorted\n        if arr[low] &lt;= arr[mid]:\n            # Keep the minimum\n            if arr[low] &lt; ans:\n                index = low\n                ans = arr[low]\n\n            # Eliminate left half\n            low = mid + 1\n        else:  # If right part is sorted\n            # Keep the minimum\n            if arr[mid] &lt; ans:\n                index = mid\n                ans = arr[mid]\n\n            # Eliminate right half\n            high = mid - 1\n\n    return index\n\nif __name__ == \"__main__\":\n    arr = [4, 5, 6, 7, 0, 1, 2, 3]\n    ans = findKRotation(arr)\n    print(\"The array is rotated\", ans, \"times.\")\n\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\n<!-- Insert javascript code of Brute Force Here -->\nfunction findKRotation(arr) {\n    let low = 0, high = arr.length - 1;\n    let ans = Infinity;\n    let index = -1;\n    while (low &lt;= high) {\n        let mid = Math.floor((low + high) / 2);\n        // If search space is already sorted,\n        // then arr[low] will always be\n        // the minimum in that search space:\n        if (arr[low] &lt;= arr[high]) {\n            if (arr[low] &lt; ans) {\n                index = low;\n                ans = arr[low];\n            }\n            break;\n        }\n\n        // If left part is sorted:\n        if (arr[low] &lt;= arr[mid]) {\n            // Keep the minimum:\n            if (arr[low] &lt; ans) {\n                index = low;\n                ans = arr[low];\n            }\n\n            // Eliminate left half:\n            low = mid + 1;\n        } else { // If right part is sorted:\n            // Keep the minimum:\n            if (arr[mid] &lt; ans) {\n                index = mid;\n                ans = arr[mid];\n            }\n\n            // Eliminate right half:\n            high = mid - 1;\n        }\n    }\n    return index;\n}\n\nlet arr = [4, 5, 6, 7, 0, 1, 2, 3];\nlet ans = findKRotation(arr);\nconsole.log(\"The array is rotated \" + ans + \" times.\");\n\n\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Optimal Apporach Here -->\n<strong>Output:</strong> The array is rotated 4 times.\n\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Optimal Approach-->\n<p><strong>Time Complexity: </strong>O(logN), N = size of the given array.<strong><br>Reason: </strong>We are basically using binary search to find the minimum.</p>\n<p><strong>Space Complexity: </strong>O(1)<strong><br>Reason: </strong>We have not used any extra data structures, this makes space complexity, even in the worst case as O(1).</p>\n</p>\n</details>\n</div>\n</details>\n</div>\n<!-- Optimal Approach Starts from here -->\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n<details>\n<summary class=\"main-summary\">\n<span>\nVideo Explanation\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"yt-video-wrapper\">\n\n<!-- Insert iframe embed Link of Youtube Video-->\n<iframe class=\"lazy-loaded\" loading=\"lazy\" title=\"Find out how many times array has been rotated\" width=\"810\" height=\"456\" data-lazy-type=\"iframe\" data-src=\"https://www.youtube.com/embed/jtSiWTPLwd0\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\" src=\"https://www.youtube.com/embed/jtSiWTPLwd0?feature=oembed\"></iframe><noscript>\n<iframe loading=\"lazy\" title=\"Find out how many times array has been rotated\" width=\"810\" height=\"456\" src=\"https://www.youtube.com/embed/jtSiWTPLwd0\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe></noscript>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script>\n\nconst codeSections = document.querySelectorAll('.code-section');\n\n// Get last selected language from localStorage or set default value\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\n// Update last selected language for all sections and store in localStorage\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\n// Handle copy button click event\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\n// Set initial state of the tabs\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<script>\nconst codeSections = document.querySelectorAll('.code-section');\n\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script src=\"https://takeuforward.org/UXApproachDropDowns/2ApproachJSScript.js\"></script>\n<!-- /wp:html -->"
}