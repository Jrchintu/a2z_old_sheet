{
    "dislikes": 5,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:12:06 GMT+0530 (India Standard Time)",
    "slug": "minimise-maximum-distance-between-gas-stations",
    "aid": "2251",
    "tuf_plus": "",
    "title": "Minimise Maximum Distance between Gas Stations",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "binary-search",
            "topic-title": "Binary Search"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        }
    ],
    "category_tag": "arrays",
    "likes": 189,
    "preview": "Problem Statement: You are given a sorted array \u2018arr\u2019 of length \u2018n\u2019, which contains positive integer positions of \u2018n\u2019 gas stations on the X-axis. You are also given an integer \u2018k\u2019. You have to plac...",
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement:</strong> You are given a sorted array \u2018arr\u2019 of length \u2018n\u2019, which contains positive integer positions of \u2018n\u2019 gas stations on the X-axis. You are also given an integer \u2018k\u2019. You have to place 'k' new gas stations on the X-axis. You can place them anywhere on the non-negative side of the X-axis, even on non-integer positions. Let 'dist' be the maximum value of the distance between adjacent gas stations after adding k new gas stations.<br>Find the minimum value of \u2018dist\u2019.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Note: </strong>Answers within 10^-6 of the actual answer will be accepted. For example, if the actual answer is 0.65421678124, it is okay to return 0.654216. Our answer will be accepted if that is the same as the actual answer up to the 6th decimal place.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n<details class=\"article_example_details\">\n<summary class=\"article_example_summary\">\n<span><strong>\nExamples\n</strong>\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"atricle_example_content\">\n<pre class=\"wp-block-preformatted\"><!-- Insert New Examples Here -->\n<pre class=\"wp-block-preformatted\"><strong>Example 1:</strong>\n<strong>Input Format:</strong> N = 5, arr[] = {1,2,3,4,5}, k = 4\n<strong>Result:</strong> 0.5\n<strong>Explanation:</strong> One of the possible ways to place 4 gas stations is {1,1.5,2,2.5,3,3.5,4,4.5,5}. Thus the maximum difference between adjacent gas stations is 0.5. Hence, the value of \u2018dist\u2019 is 0.5. It can be shown that there is no possible way to add 4 gas stations in such a way that the value of \u2018dist\u2019 is lower than this. \n<strong>Example 2:</strong>\n<strong>Input Format:</strong> N = 10, arr[] = {1,2,3,4,5,6,7,8,9,10}, k = 1\n<strong>Result:</strong> 1\n<strong>Explanation:</strong> One of the possible ways to place 1 gas station is {1,1.5,2,3,4,5,6,7,8,9,10}. Thus the maximum difference between adjacent gas stations is still 1. Hence, the value of \u2018dist\u2019 is 1. It can be shown that there is no possible way to add 1 gas station in such a way that the value of \u2018dist\u2019 is lower than this. \n\n<p>Let\u2019s understand how to place the new gas stations so that the maximum distance between two consecutive gas stations is reduced.&nbsp;</p>\n<p>Let\u2019s consider a small example like this: given gas stations = {1, 7} and k = 2.&nbsp;</p>\n<p><strong>Observation: </strong>A possible arrangement for placing 2 gas stations is as follows: {1, 7, 8, 9}. In this arrangement, the new gas stations are positioned after the last existing one. Prior to adding the new stations, the maximum distance between stations was 6 (<em>i.e. the distance between 1 and 7</em>). Even after placing the 2 new stations, the maximum distance remains unchanged at 6.</p>\n<p><strong>Conclusions:</strong></p>\n<ul><li>From the above observation, we can conclude that placing new gas stations before the first existing station or after the last existing station will make no difference to the maximum distance between two consecutive stations.</li><li>So, in order to minimize the maximum distance we have to place the new gas stations in between the existing stations.</li></ul>\n<p><strong>How to place the gas stations in between so that the maximum distance is minimized:</strong></p>\n<ul><li>Until now we have figured out that we have to place the gas stations in between the existing ones. But we have to place them in such a way that the maximum distance between two consecutive stations is the minimum possible.&nbsp;</li><li>Let\u2019s understand this considering the previous example. Given gas stations = {1, 7} and k = 2.<br>If we place the gas stations as follows: {1, 2, 6, 7}, the maximum distance will be 4(<em>i.e. 6-2 = 4</em>). But if we place them like this: {1, 3, 5, 7}, the maximum distance boils down to 2. It can be proved that we cannot make the maximum distance lesser than 2.<br></li></ul>\n<p>To minimize the maximum distance between gas stations, we need to insert new stations with equal spacing. If we have to add <strong>'k'</strong> gas stations within a section of length <strong>'section_length'</strong>, each station should be placed at a distance of<br><strong>(section_length / (k + 1))</strong> from one another.<br>This way, we maintain a uniform spacing between consecutive gas stations.<strong><br></strong><strong><br></strong>For example, the gas stations are = {1, 7} and k = 2. Here, the <strong>\u2018dist\u2019</strong> is = (7-1) = 6. So, the space between two gas stations will be dis / (k+1) = 6 / (2+1) = 2. The placements will be as follows: {1, 3, 5, 7}.</p>\n</pre>\n</pre>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Practice Section-->\n<div class=\"practice\">\n<span><strong>Practice: </strong></span>\n<div class=\"problem-buttons\">\n\n<!-- Add Problem Link inside href -->\n<a href=\"https://bit.ly/452QhyM\" target=\"_blank\" rel=\"noopener\">\n<span>Solve Problem</span>\n<img src=\"https://static.takeuforward.org/wp/uploads/2023/04/Group-11-5.png\" alt=\"code-studio\">\n</a>\n</div>\n</div>\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\nyourself first. </em></p>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<div class=\"horizontal_navbar_dsa_article\">\n<div class=\"grid_container_three\">\n<a href=\"#brute-force-approach\" class=\"three-boxes box-a\">\nBrute Force Approach\n</a>\n<a href=\"#better-approach\" class=\"three-boxes box-b\">\nBetter Approach\n</a>\n<a href=\"#optimal-approach\" class=\"three-boxes box-c\">\nOptimal Approach \n</a>\n<a href=\"#dsa_article_video_explanation\" class=\"three-boxes box-d\">\n<svg width=\"26\" height=\"26\" viewBox=\"0 0 20 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M8 10L13.19 7L8 4V10ZM19.56 2.17C19.69 2.64 19.78 3.27 19.84 4.07C19.91 4.87 19.94 5.56 19.94 6.16L20 7C20 9.19 19.84 10.8 19.56 11.83C19.31 12.73 18.73 13.31 17.83 13.56C17.36 13.69 16.5 13.78 15.18 13.84C13.88 13.91 12.69 13.94 11.59 13.94L10 14C5.81 14 3.2 13.84 2.17 13.56C1.27 13.31 0.69 12.73 0.44 11.83C0.31 11.36 0.22 10.73 0.16 9.93C0.0900001 9.13 0.0599999 8.44 0.0599999 7.84L0 7C0 4.81 0.16 3.2 0.44 2.17C0.69 1.27 1.27 0.69 2.17 0.44C2.64 0.31 3.5 0.22 4.82 0.16C6.12 0.0899998 7.31 0.0599999 8.41 0.0599999L10 0C14.19 0 16.8 0.16 17.83 0.44C18.73 0.69 19.31 1.27 19.56 2.17Z\" fill=\"red\"></path>\n</svg>\n\n</a>\n<div class=\"box-e tooltip\">\n<svg viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M12.842 9.25L11.9577 10.17C11.2502 10.89 10.8081 11.5 10.8081 13H8.84297V12.5C8.84297 11.39 9.28511 10.39 9.99255 9.67L11.2109 8.41C11.5745 8.05 11.7906 7.55 11.7906 7C11.7906 6.46957 11.5836 5.96086 11.2151 5.58579C10.8465 5.21071 10.3467 5 9.82552 5C9.30434 5 8.80451 5.21071 8.43598 5.58579C8.06745 5.96086 7.86041 6.46957 7.86041 7H5.89531C5.89531 5.93913 6.30938 4.92172 7.04644 4.17157C7.7835 3.42143 8.78316 3 9.82552 3C10.8679 3 11.8675 3.42143 12.6046 4.17157C13.3417 4.92172 13.7557 5.93913 13.7557 7C13.7543 7.84324 13.4259 8.65183 12.842 9.25ZM10.8081 17H8.84297V15H10.8081M9.82552 0C8.53521 0 7.25754 0.258658 6.06545 0.761205C4.87337 1.26375 3.79021 2.00035 2.87783 2.92893C1.03519 4.8043 0 7.34784 0 10C0 12.6522 1.03519 15.1957 2.87783 17.0711C3.79021 17.9997 4.87337 18.7362 6.06545 19.2388C7.25754 19.7413 8.53521 20 9.82552 20C12.4314 20 14.9306 18.9464 16.7732 17.0711C18.6158 15.1957 19.651 12.6522 19.651 10C19.651 4.47 15.2296 0 9.82552 0Z\" fill=\"black\"></path>\n</svg>\n<div class=\"bottom\">\n<p>Expand any one approach by clicking the given options in the bar. Clicking one approach on bar,\ncloses all other expands. You can manually expand more than one approach at a time</p>\n<i></i>\n</div>\n\n</div>\n</div>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Approaches Drop-Down -->\n<div class=\"dsa_article_dropdown_approachs \">\n\n<!-- Brute Force Approach Starts from here -->\n<div id=\"brute-force-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nBrute Force Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n<h3><strong>Naive Approach</strong>:&nbsp;</h3>\n<p>We are given n gas stations. Between them, there are n-1 sections where we may insert the new stations to reduce the distance. So, we will create an array of size n-1 and each of its indexes will represent the respective sections between the given gas stations.&nbsp;</p>\n<p>In each iteration, we will identify the index 'i' where the distance (arr[i+1] - arr[i]) is the maximum. Then, we will insert new stations into that section to reduce that maximum distance. The number of stations inserted in each section will be tracked using the previously declared array of size n-1.</p>\n<p>Finally, after placing all the stations we will find the maximum distance between two consecutive stations. To calculate the distance using the previously discussed formula, we will just do as follows for each section:<br><strong>distance = section_length / (number_of_stations_ inserted+1)</strong></p>\n<p>Among all the values of \u2018distance\u2019, the maximum one will be our answer.</p>\n<h3><strong>Algorithm:</strong></h3>\n<ol><li>First, we will declare an array <strong>\u2018howMany[]\u2019 </strong>of size n-1, to keep track of the number of placed gas stations.</li><li>Next, using a loop we will pick k gas stations one at a time.</li><li>Then, using another loop, we will find the index 'i' where the distance (arr[i+1] - arr[i]) is the maximum and insert the current gas station between arr[i] and arr[i+1] (i.e. howMany[i]++).</li><li>Finally, after placing all the new stations, we will find the distance between two consecutive gas stations. For a particular section,<br><strong>distance = section_length / (number_of_stations_ inserted+1)</strong><strong><br></strong><strong> </strong><strong></strong><strong>&nbsp; &nbsp; = (arr[i+1]-arr[i]) / (howMany[i]+1)</strong></li><li>Among all the distances, the maximum one will be the answer.</li></ol>\n<p><strong>Dry-run: </strong><em>Please refer to the </em><a href=\"https://youtu.be/kMSBvlZ-_HA\"><em>video</em></a><em> for the dry-run.</em></p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n\n<!-- Insert C++ code of Brute Force Here -->\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nlong double minimiseMaxDistance(vector&lt;int&gt; &amp;arr, int k) {\n    int n = arr.size(); //size of array.\n    vector&lt;int&gt; howMany(n - 1, 0);\n\n    //Pick and place k gas stations:\n    for (int gasStations = 1; gasStations &lt;= k; gasStations++) {\n        //Find the maximum section\n        //and insert the gas station:\n        long double maxSection = -1;\n        int maxInd = -1;\n        for (int i = 0; i &lt; n - 1; i++) {\n            long double diff = arr[i + 1] - arr[i];\n            long double sectionLength =\n                diff / (long double)(howMany[i] + 1);\n            if (sectionLength &gt; maxSection) {\n                maxSection = sectionLength;\n                maxInd = i;\n            }\n        }\n        //insert the current gas station:\n        howMany[maxInd]++;\n    }\n\n    //Find the maximum distance i.e. the answer:\n    long double maxAns = -1;\n    for (int i = 0; i &lt; n - 1; i++) {\n        long double diff = arr[i + 1] - arr[i];\n        long double sectionLength =\n            diff / (long double)(howMany[i] + 1);\n        maxAns = max(maxAns, sectionLength);\n    }\n    return maxAns;\n}\n\nint main()\n{\n    vector&lt;int&gt; arr = {1, 2, 3, 4, 5};\n    int k = 4;\n    long double ans = minimiseMaxDistance(arr, k);\n    cout &lt;&lt; \"The answer is: \" &lt;&lt; ans &lt;&lt; \"\\n\";\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\n<!-- Insert Java code of Brute Force Here -->\nimport java.util.*;\n\npublic class tUf {\n    public static double minimiseMaxDistance(int[] arr, int k) {\n        int n = arr.length; //size of array.\n        int[] howMany = new int[n - 1];\n\n        //Pick and place k gas stations:\n        for (int gasStations = 1; gasStations &lt;= k; gasStations++) {\n            //Find the maximum section\n            //and insert the gas station:\n            double maxSection = -1;\n            int maxInd = -1;\n            for (int i = 0; i &lt; n - 1; i++) {\n                double diff = arr[i + 1] - arr[i];\n                double sectionLength =\n                    diff / (double)(howMany[i] + 1);\n                if (sectionLength &gt; maxSection) {\n                    maxSection = sectionLength;\n                    maxInd = i;\n                }\n            }\n            //insert the current gas station:\n            howMany[maxInd]++;\n        }\n\n        //Find the maximum distance i.e. the answer:\n        double maxAns = -1;\n        for (int i = 0; i &lt; n - 1; i++) {\n            double diff = arr[i + 1] - arr[i];\n            double sectionLength =\n                diff / (double)(howMany[i] + 1);\n            maxAns = Math.max(maxAns, sectionLength);\n        }\n        return maxAns;\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {1, 2, 3, 4, 5};\n        int k = 4;\n        double ans = minimiseMaxDistance(arr, k);\n        System.out.println(\"The answer is: \" + ans);\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\n<!-- Insert Python code of Brute Force Here -->\ndef minimiseMaxDistance(arr, k):\n    n = len(arr)  # size of array\n    howMany = [0] * (n - 1)\n\n    # Pick and place k gas stations:\n    for gasStations in range(1, k + 1):\n        # Find the maximum section and insert the gas station:\n        maxSection = -1\n        maxInd = -1\n        for i in range(n - 1):\n            diff = arr[i + 1] - arr[i]\n            sectionLength = diff / (howMany[i] + 1)\n            if sectionLength &gt; maxSection:\n                maxSection = sectionLength\n                maxInd = i\n        # insert the current gas station:\n        howMany[maxInd] += 1\n\n    # Find the maximum distance i.e. the answer:\n    maxAns = -1\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        sectionLength = diff / (howMany[i] + 1)\n        maxAns = max(maxAns, sectionLength)\n    return maxAns\n\narr = [1, 2, 3, 4, 5]\nk = 4\nans = minimiseMaxDistance(arr, k)\nprint(\"The answer is:\", ans)\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\n<!-- Insert JavaScript code of Brute Force Here -->\nfunction minimiseMaxDistance(arr, k) {\n    const n = arr.length; //size of array.\n    const howMany = new Array(n - 1).fill(0);\n\n    //Pick and place k gas stations:\n    for (let gasStations = 1; gasStations &lt;= k; gasStations++) {\n        //Find the maximum section and insert the gas station:\n        let maxSection = -1;\n        let maxInd = -1;\n        for (let i = 0; i &lt; n - 1; i++) {\n            const diff = arr[i + 1] - arr[i];\n            const sectionLength = diff / (howMany[i] + 1);\n            if (sectionLength &gt; maxSection) {\n                maxSection = sectionLength;\n                maxInd = i;\n            }\n        }\n        //insert the current gas station:\n        howMany[maxInd]++;\n    }\n\n    //Find the maximum distance i.e. the answer:\n    let maxAns = -1;\n    for (let i = 0; i &lt; n - 1; i++) {\n        const diff = arr[i + 1] - arr[i];\n        const sectionLength = diff / (howMany[i] + 1);\n        maxAns = Math.max(maxAns, sectionLength);\n    }\n    return maxAns;\n}\n\nconst arr = [1, 2, 3, 4, 5];\nconst k = 4;\nconst ans = minimiseMaxDistance(arr, k);\nconsole.log(\"The answer is:\", ans);\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Brute Force Here -->\n</p><p><strong>Output:</strong>  The answer is: 0.5\n\n</p>\n<p></p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n<!-- Insert Time and Space Complexity of Brute Force Here -->\n</p><p><strong>Time Complexity: </strong>O(k*n) + O(n), n = size of the given array, k = no. of gas stations to be placed.<br><strong>Reason: </strong>O(k*n) to insert k gas stations between the existing stations with maximum distance. Another O(n) for finding the answer i.e. the maximum distance.</p>\n<p><strong>Space Complexity: </strong>O(n-1) as we are using an array to keep track of placed gas stations.</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Brute Force Approach Ends here -->\n\n\n<!-- Better Approach Starts from here -->\n\n<div id=\"better-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nBetter Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition For Better Approach Here -->\n<h3><strong>Better Approach(Using Heap)</strong>:&nbsp;</h3>\n<p>In the previous approach, for every gas station, we were finding the index i for which the distance between arr[i+1] and arr[i] is maximum. After that, our job was to place the gas station. Instead of using a loop to find the maximum distance, we can simply use the heap data structure i.e. the <a href=\"https://takeuforward.org/c/c-stl/priority-queue-in-c-stl/\"><strong><em>priority queue</em></strong></a>.</p>\n<p><strong>Priority Queue: </strong>Priority queue internally uses the heap data structure. In the max heap implementation, the first element is always the greatest of the elements it contains and the rest elements are in decreasing order.</p>\n<p><strong>Note: </strong>Please refer to the article: <a href=\"https://takeuforward.org/c/c-stl/priority-queue-in-c-stl/\">priority_queue in C++ STL</a> to know more about the data structure.</p>\n<p>Thus using a priority queue, we can optimize the search for the maximum distance. We will use the max heap implementation and the elements will be in the form of pairs i.e. &lt;distance, index&gt; as we want the indices sorted based on the distance. As we are using max heap the maximum distance will always be the first element.</p>\n<h3><strong>Algorithm:</strong></h3>\n<ol><li>First, we will declare an array <strong>\u2018howMany[]\u2019 </strong>of size n-1, to keep track of the number of placed gas stations and a <strong>priority queue </strong>that uses max heap.</li><li>We will insert the first n-1 indices with the respective distance value, arrr[i+1]-arr[i] for every index.</li><li>Next, using a loop we will pick k gas stations one at a time.</li><li>Then we will pick the first element of the priority queue as this is the element with the maximum distance. Let\u2019s call the index <strong>\u2018secInd\u2019.</strong></li><li>Now we will place the current gas station at \u2018secInd\u2019(<em>howMany[secInd]++</em>) and calculate the new section length,<br><strong>new_section_length = initial_section_length / (number_of_stations_ inserted+1)</strong><strong><br></strong><strong> </strong><strong></strong><strong>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = (arr[secInd+1] - arr[secInd]) / (howMany[i] + 1)</strong></li><li>After that, we will again insert the pair &lt;new_section_length, secInd&gt; into the priority queue for further consideration.</li><li>After performing all the steps for k gas stations, the distance at the top of the priority queue will be the answer as we want the maximum distance.</li></ol>\n<p><strong>Dry-run: </strong><em>Please refer to the </em><a href=\"https://youtu.be/kMSBvlZ-_HA\"><em>video</em></a><em> for the dry-run.</em></p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n\n<!-- Insert C++ Code of Better Approach Here -->\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nlong double minimiseMaxDistance(vector&lt;int&gt; &amp;arr, int k) {\n    int n = arr.size(); //size of array.\n    vector&lt;int&gt; howMany(n - 1, 0);\n    priority_queue&lt;pair&lt;long double, int&gt;&gt; pq;\n\n    //insert the first n-1 elements into pq\n    //with respective distance values:\n    for (int i = 0; i &lt; n - 1; i++) {\n        pq.push({arr[i + 1] - arr[i], i});\n    }\n\n    //Pick and place k gas stations:\n    for (int gasStations = 1; gasStations &lt;= k; gasStations++) {\n        //Find the maximum section\n        //and insert the gas station:\n        auto tp = pq.top();\n        pq.pop();\n        int secInd = tp.second;\n\n        //insert the current gas station:\n        howMany[secInd]++;\n\n        long double inidiff = arr[secInd + 1] - arr[secInd];\n        long double newSecLen = inidiff / (long double)(howMany[secInd] + 1);\n        pq.push({newSecLen, secInd});\n    }\n\n    return pq.top().first;\n}\n\nint main()\n{\n    vector&lt;int&gt; arr = {1, 2, 3, 4, 5};\n    int k = 4;\n    long double ans = minimiseMaxDistance(arr, k);\n    cout &lt;&lt; \"The answer is: \" &lt;&lt; ans &lt;&lt; \"\\n\";\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\n<!-- Insert Java Code of Better Approach Here -->\nimport java.util.*;\n\npublic class tUf {\n    public static class Pair {\n        double first;\n        int second;\n\n        Pair(double first, int second) {\n            this.first = first;\n            this.second = second;\n        }\n    }\n\n    public static double minimiseMaxDistance(int[] arr, int k) {\n        int n = arr.length; // size of array.\n        int[] howMany = new int[n - 1];\n        PriorityQueue&lt;Pair&gt; pq = new PriorityQueue&lt;&gt;((a, b) -&gt; Double.compare(b.first, a.first));\n\n        // insert the first n-1 elements into pq\n        // with respective distance values:\n        for (int i = 0; i &lt; n - 1; i++) {\n            pq.add(new Pair(arr[i + 1] - arr[i], i));\n        }\n\n        // Pick and place k gas stations:\n        for (int gasStations = 1; gasStations &lt;= k; gasStations++) {\n            // Find the maximum section\n            // and insert the gas station:\n            Pair tp = pq.poll();\n            int secInd = tp.second;\n\n            // insert the current gas station:\n            howMany[secInd]++;\n\n            double inidiff = arr[secInd + 1] - arr[secInd];\n            double newSecLen = inidiff / (double) (howMany[secInd] + 1);\n            pq.add(new Pair(newSecLen, secInd));\n        }\n\n        return pq.peek().first;\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {1, 2, 3, 4, 5};\n        int k = 4;\n        double ans = minimiseMaxDistance(arr, k);\n        System.out.println(\"The answer is: \" + ans);\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\n<!-- Insert Python Code of Better Approach Here -->\nimport heapq\n\ndef minimiseMaxDistance(arr, k):\n    n = len(arr)  # size of array.\n    howMany = [0] * (n - 1)\n    pq = []\n\n    # insert the first n-1 elements into pq\n    # with respective distance values:\n    for i in range(n - 1):\n        heapq.heappush(pq, ((-1)*(arr[i + 1] - arr[i]), i))\n\n    # Pick and place k gas stations:\n    for gasStations in range(1, k + 1):\n        # Find the maximum section\n        # and insert the gas station:\n        tp = heapq.heappop(pq)\n        secInd = tp[1]\n\n        # insert the current gas station:\n        howMany[secInd] += 1\n\n        inidiff = arr[secInd + 1] - arr[secInd]\n        newSecLen = inidiff / (howMany[secInd] + 1)\n        heapq.heappush(pq, (newSecLen*(-1), secInd))\n\n    return pq[0][0]*(-1)\n\narr = [1, 2, 3, 4, 5]\nk = 4\nans = minimiseMaxDistance(arr, k)\nprint(\"The answer is:\", ans)\n\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\n<!-- Insert javascript Code of Better Approach Here -->\nclass MaxPriorityQueue {\n    constructor() {\n        this.queue = [];\n    }\n\n    enqueue(element) {\n        this.queue.push(element);\n        this.queue.sort((a, b) =&gt; b.priority - a.priority);\n    }\n\n    dequeue() {\n        return this.queue.shift();\n    }\n\n    front() {\n        return this.queue[0];\n    }\n}\n\nfunction minimiseMaxDistance(arr, k) {\n    const n = arr.length; //size of array.\n    const howMany = new Array(n - 1).fill(0);\n    const pq = new MaxPriorityQueue();\n\n    //insert the first n-1 elements into pq\n    //with respective distance values:\n    for (let i = 0; i &lt; n - 1; i++) {\n        pq.enqueue({priority: arr[i + 1] - arr[i], value: i});\n    }\n\n    //Pick and place k gas stations:\n    for (let gasStations = 1; gasStations &lt;= k; gasStations++) {\n        //Find the maximum section\n        //and insert the gas station:\n        const tp = pq.dequeue();\n        const secInd = tp.value;\n\n        //insert the current gas station:\n        howMany[secInd]++;\n\n        const inidiff = arr[secInd + 1] - arr[secInd];\n        const newSecLen = inidiff / (howMany[secInd] + 1);\n        pq.enqueue({priority: newSecLen, value: secInd});\n    }\n\n    return pq.front().priority;\n}\n\nconst arr = [1, 2, 3, 4, 5];\nconst k = 4;\nconst ans = minimiseMaxDistance(arr, k);\nconsole.log(\"The answer is:\", ans);\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Better Approach Here -->\n<strong>Output:</strong>  The answer is: 0.5\n\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Better Approach Here -->\n</p><p><strong>Time Complexity: </strong>O(nlogn + klogn),&nbsp; n = size of the given array, k = no. of gas stations to be placed.<br><strong>Reason: </strong>Insert operation of priority queue takes logn time complexity. O(nlogn) for inserting all the indices with distance values and O(klogn) for placing the gas stations.</p>\n<p><strong>Space Complexity: </strong>O(n-1)+O(n-1)<br><strong>Reason:</strong> The first O(n-1) is for the array to keep track of placed gas stations and the second one is for the priority queue.</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Better Approach Ends from here -->\n\n\n<!-- Optimal Approach Starts from here -->\n\n<div id=\"optimal-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nOptimal Approach \n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm of Better Approach Here -->\n<h3><strong>Optimal Approach(Using Binary Search)</strong>:&nbsp;</h3>\n<p>We are going to use the Binary Search algorithm to optimize the approach.</p>\n<p><em>The primary objective of the Binary Search algorithm is to efficiently determine the appropriate half to eliminate, thereby reducing the search space by half. It does this by determining a specific condition that ensures that the target is not present in that half.</em></p>\n<p><strong>Observations:</strong></p>\n<ul><li><strong>Minimum possible answer: </strong>We will get the minimum answer when we place all the gas stations in a single location. Now, in this case, the maximum distance will be <strong><em>0</em></strong>.<br></li><li><strong>Maximum possible answer: </strong>We will not place stations before the first or after the last station rather we will place stations in between the existing stations. So, the maximum possible answer is the <strong><em>maximum distance between two consecutive existing stations</em></strong>.</li></ul>\n<p>From the observations, it is clear that our answer lies in the <strong>range [0, max(dist)]</strong>.</p>\n<p>Upon closer observation, we can recognize that our answer space is actually sorted. Additionally, we can identify a pattern that allows us to divide this space into two halves: one consisting of potential answers and the other of non-viable options. So, we will apply binary search on the answer space.</p>\n<p><strong>Changes in the binary search algorithm to apply it to the decimal answer space:</strong></p>\n<p>The traditional binary search algorithm used for integer answer space won't be effective in this case. As our answer space consists of decimal numbers, we need to adjust some conditions to tailor the algorithm to this specific context. The changes are the following:</p>\n<ul><li><strong>while(low &lt;= high): </strong>The condition 'while(low &lt;= high)' inside the 'while' loop won't work for decimal answers, and using it might lead to a <strong>TLE</strong> error. To avoid this, we can modify the condition to '<strong>while(high - low &gt; 10^(-6))</strong>'. This means we will only check numbers up to the 6th decimal place. Any differences beyond this decimal precision won't be considered, as the question explicitly accepts answers within 10^-6 of the actual answer.<br></li><li><strong>low = mid+1: </strong>We have used this operation to eliminate the left half. But if we apply the same here, we might ignore several decimal numbers and possibly our actual answer. So, we will use this: <strong>low = mid.</strong></li><li><strong>high = mid-1: </strong>Similarly<strong>, </strong>We have used this operation to eliminate the right half. But if we apply the same here, we might ignore several decimal numbers and possibly the actual answer. So, we will use this: <strong>high = mid.</strong></li></ul>\n<p>We are applying binary search on the answer i.e. the possible values of distances. So, we have to figure out a way to check the number of gas stations we can place for a particular value of distance.</p>\n<p><strong>How to check the number of gas stations we can place with a particular distance \u2018dist\u2019:</strong>&nbsp;</p>\n<p>In order to find out the number of gas stations we will use the following function:<br><br><strong>numberOfGasStationsRequired(dist, arr[]):&nbsp;</strong></p>\n<ol><li>We will use a loop(say i) that will run from 1 to n.</li><li>For each section between i and i-1, we will do the following:<br><strong>No. of stations = (arr[i]-arr[i-1]) / dist</strong></li><li><strong>Let's keep in mind a crucial edge case: </strong>if the section_length (arr[i] - arr[i-1]) is completely divisible by 'dist', the actual number of stations required will be one less than what we calculate.<br><strong>if (arr[i]-arr[i-1] == (No. of stations*dist): </strong>No. of stations -= 1.</li><li>Now, we will add the no. of stations regarding all the sections and the total will be the answer.</li></ol>\n<h3><strong>Algorithm:</strong></h3>\n<ol><li><strong>First, </strong>we will find the maximum distance between two consecutive gas stations i.e. max(dist).</li><li><strong>Place the 2 pointers i.e. low and high: </strong>Initially, we will place the pointers. The pointer low will point to 0 and the high will point to max(dist).<br></li><li><strong>Now, </strong>we will use the \u2018while\u2019 loop like this: <strong>while(high - low &gt; 10^(-6)).</strong></li><li><strong>Calculate the \u2018mid\u2019: </strong>Now, inside the loop, we will calculate the value of \u2018mid\u2019 using the following formula:<br><strong>mid = (low+high) / 2.0</strong><strong><br></strong></li><li><strong>Eliminate the halves based on the number of stations returned by numberOfGasStationsRequired(): </strong><strong><br></strong>We will pass the potential value of \u2018dist\u2019, represented by the variable 'mid', to the \u2018<strong>numberOfGasStationsRequired()</strong>' function. This function will return the number of gas stations we can place.<ol><li><strong>If result &gt; k: </strong>On satisfying this condition, we can conclude that the number \u2018mid\u2019 is smaller than our answer. So, we will eliminate the left half and consider the right half(i.e. low = mid).</li><li><strong>Otherwise, </strong>the value mid is one of the possible answers. But we want the minimum value. So, we will eliminate the right half and consider the left half(i.e. high = mid).</li></ol></li><li>Finally, outside the loop, we can return either low or high as their difference is beyond 10^(-6). They both can be the possible answer. Here, we have returned the \u2018high\u2019.</li></ol>\n<p>The steps from 4-5 will be inside a loop and the loop will continue until (low-high &lt;= 10^(-6)).</p>\n<p><strong>Dry-run: </strong><em>Please refer to the </em><a href=\"https://youtu.be/kMSBvlZ-_HA\"><em>video</em></a><em> for the dry-run.</em></p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n\n<!-- Insert C++ code of Optimal Approach Here-->\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint numberOfGasStationsRequired(long double dist, vector&lt;int&gt; &amp;arr) {\n    int n = arr.size(); // size of the array\n    int cnt = 0;\n    for (int i = 1; i &lt; n; i++) {\n        int numberInBetween = ((arr[i] - arr[i - 1]) / dist);\n        if ((arr[i] - arr[i - 1]) == (dist * numberInBetween)) {\n            numberInBetween--;\n        }\n        cnt += numberInBetween;\n    }\n    return cnt;\n}\n\nlong double minimiseMaxDistance(vector&lt;int&gt; &amp;arr, int k) {\n    int n = arr.size(); // size of the array\n    long double low = 0;\n    long double high = 0;\n\n    //Find the maximum distance:\n    for (int i = 0; i &lt; n - 1; i++) {\n        high = max(high, (long double)(arr[i + 1] - arr[i]));\n    }\n\n    //Apply Binary search:\n    long double diff = 1e-6 ;\n    while (high - low &gt; diff) {\n        long double mid = (low + high) / (2.0);\n        int cnt = numberOfGasStationsRequired(mid, arr);\n        if (cnt &gt; k) {\n            low = mid;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return high;\n}\n\nint main()\n{\n    vector&lt;int&gt; arr = {1, 2, 3, 4, 5};\n    int k = 4;\n    long double ans = minimiseMaxDistance(arr, k);\n    cout &lt;&lt; \"The answer is: \" &lt;&lt; ans &lt;&lt; \"\\n\";\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\n<!-- Insert Java code of Optimal Approach Here -->\nimport java.util.*;\n\npublic class tUf {\n    public static int numberOfGasStationsRequired(double dist, int[] arr) {\n        int n = arr.length; // size of the array\n        int cnt = 0;\n        for (int i = 1; i &lt; n; i++) {\n            int numberInBetween = (int)((arr[i] - arr[i - 1]) / dist);\n            if ((arr[i] - arr[i - 1]) == (dist * numberInBetween)) {\n                numberInBetween--;\n            }\n            cnt += numberInBetween;\n        }\n        return cnt;\n    }\n\n    public static double minimiseMaxDistance(int[] arr, int k) {\n        int n = arr.length; // size of the array\n        double low = 0;\n        double high = 0;\n\n        //Find the maximum distance:\n        for (int i = 0; i &lt; n - 1; i++) {\n            high = Math.max(high, (double)(arr[i + 1] - arr[i]));\n        }\n\n        //Apply Binary search:\n        double diff = 1e-6 ;\n        while (high - low &gt; diff) {\n            double mid = (low + high) / (2.0);\n            int cnt = numberOfGasStationsRequired(mid, arr);\n            if (cnt &gt; k) {\n                low = mid;\n            } else {\n                high = mid;\n            }\n        }\n        return high;\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {1, 2, 3, 4, 5};\n        int k = 4;\n        double ans = minimiseMaxDistance(arr, k);\n        System.out.println(\"The answer is: \" + ans);\n    }\n}\n\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\n<!-- Insert Python code of Optimal Approach Here -->\ndef numberOfGasStationsRequired(dist, arr):\n    n = len(arr)  # size of the array\n    cnt = 0\n    for i in range(1, n):\n        numberInBetween = ((arr[i] - arr[i - 1]) / dist)\n        if (arr[i] - arr[i - 1]) == (dist * numberInBetween):\n            numberInBetween -= 1\n        cnt += numberInBetween\n    return cnt\n\n\ndef minimiseMaxDistance(arr, k):\n    n = len(arr)  # size of the array\n    low = 0\n    high = 0\n\n    # Find the maximum distance:\n    for i in range(n - 1):\n        high = max(high, arr[i + 1] - arr[i])\n\n    # Apply Binary search:\n    diff = 1e-6\n    while high - low &gt; diff:\n        mid = (low + high) / 2.0\n        cnt = numberOfGasStationsRequired(mid, arr)\n        if cnt &gt; k:\n            low = mid\n        else:\n            high = mid\n\n    return high\n\n\narr = [1, 2, 3, 4, 5]\nk = 4\nans = minimiseMaxDistance(arr, k)\nprint(\"The answer is:\", ans)\n\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\n<!-- Insert Python code of Optimal Approach Here -->\nfunction numberOfGasStationsRequired(dist, arr) {\n    const n = arr.length; // size of the array\n    let cnt = 0;\n    for (let i = 1; i &lt; n; i++) {\n        const numberInBetween = Math.floor((arr[i] - arr[i - 1]) / dist);\n        if ((arr[i] - arr[i - 1]) === dist * numberInBetween) {\n            cnt += numberInBetween - 1;\n        } else {\n            cnt += numberInBetween;\n        }\n    }\n    return cnt;\n}\n\nfunction minimiseMaxDistance(arr, k) {\n    const n = arr.length; // size of the array\n    let low = 0;\n    let high = 0;\n\n    // Find the maximum distance:\n    for (let i = 0; i &lt; n - 1; i++) {\n        high = Math.max(high, arr[i + 1] - arr[i]);\n    }\n\n    // Apply Binary search:\n    const diff = 1e-6;\n    while (high - low &gt; diff) {\n        const mid = (low + high) / 2.0;\n        const cnt = numberOfGasStationsRequired(mid, arr);\n        if (cnt &gt; k) {\n            low = mid;\n        } else {\n            high = mid;\n        }\n    }\n    return high;\n}\n\nconst arr = [1, 2, 3, 4, 5];\nconst k = 4;\nconst ans = minimiseMaxDistance(arr, k);\nconsole.log(\"The answer is:\", ans);\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Optimal Apporach Here -->\n<strong>Output:</strong> The answer is: 0.5\n\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Optimal Approach-->\n</p><p><strong>Time Complexity: </strong>O(n*log(Len)) + O(n), n = size of the given array, Len = length of the answer space.<br><strong>Reason: </strong>We are applying binary search on the answer space. For every possible answer, we are calling the function <strong>numberOfGasStationsRequired() </strong>that takes O(n) time complexity. And another O(n) for finding the maximum distance initially.</p>\n<p><strong>Space Complexity: </strong>O(1) as we are using no extra space to solve this problem.</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Optimal Approach Starts from here -->\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n<details>\n<summary class=\"main-summary\">\n<span>\nVideo Explanation\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"yt-video-wrapper\">\n\n<!-- Insert iframe embed Link of Youtube Video-->\n<iframe class=\"lazy-loaded\" loading=\"lazy\" title=\"Minimise Maximum Distance between Gas Stations\" width=\"810\" height=\"456\" data-lazy-type=\"iframe\" data-src=\"https://www.youtube.com/embed/kMSBvlZ-_HA\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\" src=\"https://www.youtube.com/embed/kMSBvlZ-_HA?feature=oembed\"></iframe><noscript>\n<iframe loading=\"lazy\" title=\"Minimise Maximum Distance between Gas Stations\" width=\"810\" height=\"456\" src=\"https://www.youtube.com/embed/kMSBvlZ-_HA\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe></noscript>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script>\n\nconst codeSections = document.querySelectorAll('.code-section');\n\n// Get last selected language from localStorage or set default value\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\n// Update last selected language for all sections and store in localStorage\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\n// Handle copy button click event\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\n// Set initial state of the tabs\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<script>\nconst codeSections = document.querySelectorAll('.code-section');\n\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script src=\"https://takeuforward.org/UXApproachDropDowns/3ApproachJSScript.js\"></script>\n<!-- /wp:html -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to <strong><a href=\"https://www.linkedin.com/in/kriti39/\" target=\"_blank\" rel=\"noreferrer noopener\">KRITIDIPTA GHOSH</a></strong></em> <em>for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->"
}