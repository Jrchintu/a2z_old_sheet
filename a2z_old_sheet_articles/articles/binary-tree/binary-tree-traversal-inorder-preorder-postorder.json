{
    "dislikes": 15,
    "video": "ySp2epYvgTE",
    "publishedOn": "Sun Mar 24 2024 22:10:02 GMT+0530 (India Standard Time)",
    "slug": "binary-tree-traversal-inorder-preorder-postorder",
    "aid": "1654",
    "tuf_plus": "",
    "title": "Binary Tree Traversal : Inorder Preorder Postorder",
    "topics": [
        {
            "topic-id": "binary-tree",
            "topic-title": "Binary Tree"
        },
        {
            "topic-id": "recursion",
            "topic-title": "Recursion"
        }
    ],
    "category_tag": "binary-tree",
    "likes": 151,
    "preview": "Traversals in hierarchical data structures like Binary Trees can be broadly classified into two categories: Depth-First Search (DFS) and Breadth-First Search (BFS). Each of them utilises a differen...",
    "content": "<p>Traversals in hierarchical data structures like Binary Trees can be broadly classified into two categories:\n    Depth-First Search (DFS) and Breadth-First Search (BFS). Each of them utilises a different strategy to visit the\n    nodes within the tree.</p>\n\n<figure class=\"wp-block-image size-full is-resized\"><img\n        src=\"https://static.takeuforward.org/content/Screenshot%202024-01-07%20at%208.24.57%20PM--RjeP9YX\" alt=\"\"\n        class=\"wp-image-12743\" width=\"602\" height=\"196\"></figure>\n\n<p><strong>Depth-First Search (DFS) </strong> explores a binary tree by going as deeply as possible along each branch\n    before backtracking.</p>\n\n<ol>\n    <li>It starts from the root and explores as deeply as possible along each branch, visiting nodes until it reaches a\n        leaf node. It then backtracks to the most recent unexplored node and continues until all nodes are visited.</li>\n    <li>The order in which we visit a node determines if that traversal would be preorder, inorder and postorder.</li>\n    <li>DFS uses recursion or a stack to traverse deeper levels of the tree before visiting nodes at the same level.\n    </li>\n</ol>\n\n\n<p><strong>Breadth-First Search (BFS) </strong> explores a binary tree level by level, visiting all nodes at a given\n    level before processing to the next level.</p>\n\n<ol>\n    <li>It starts from the root and visits all nodes at level 0, then proceeds to level 1, level 2, and so on. Nodes at\n        a level are visited from left to right.</li>\n    <li>BFS uses a queue data structure to maintain nodes at each level, ensuring that nodes at higher levels are\n        visited moving to lower levels.</li>\n</ol>\n\n\n<p><strong>Inorder Traversal </strong> is the type of Depth First Traversal where nodes are visited in the order: Left,\n    Root, Right.</p>\n<p>It's named \"inorder\" because it traverses the nodes in a sequence where the \"Visit\" step occurs between the left and\n    right child nodes.</p>\n\n\n<figure class=\"wp-block-image size-full is-resized\"><img\n        src=\"https://static.takeuforward.org/content/Screenshot%202024-01-07%20at%208.32.00%20PM-FWEyDNjN\" alt=\"\"\n        class=\"wp-image-12743\" width=\"602\" height=\"196\"></figure>\n<p>Procedure of Inorder Traversal:</p>\n\n<ol>\n    <li>Visit the Left Subtree: Recursively traverse the left subtree until a leaf node or a node with no left child is\n        reached.</li>\n    <li>Visit the Current Node: Once at a node, perform the visitation operation (such as printing the node's value or\n        performing an operation with the node's data).</li>\n    <li>Traverse the Right Subtree: After visiting the current node, recursively traverse the right subtree, following\n        the same steps as the left subtree.</li>\n</ol>\n\n<p>Read about Inorder Traversal in detail <a\n        href=\"https://takeuforward.org/data-structure/inorder-traversal-of-binary-tree\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>here</strong></a></p>\n\n<p><strong>Preorder Traversal </strong> is the type of Depth First Traversal where nodes are visited in the order: Root,\n    Left then Right.</p>\n<p>It's named \"preorder\" because the \"Visit\" step occurs before traversing the left and right child nodes.</p>\n\n<figure class=\"wp-block-image size-full is-resized\"><img\n        src=\"https://static.takeuforward.org/content/Screenshot%202024-01-07%20at%208.44.51%20PM-786-gX9m\" alt=\"\"\n        class=\"wp-image-12743\" width=\"602\" height=\"196\"></figure>\n\n<p>Procedure of Preorder Traversal:</p>\n\n<ol>\n    <li>Visit the Current Node: Begin by visiting the current node, performing the visitation operation (such as\n        printing the node's value or performing an operation with the node's data).</li>\n    <li>Traverse the Left Subtree: Recursively traverse the left subtree, following the same steps starting from step 1.\n    </li>\n    <li>Traverse the Right Subtree: After fully traversing the left subtree, recursively traverse the right subtree,\n        following the same steps starting from step 1.</li>\n</ol>\n\n<p>Read about Preorder Traversal in detail <a\n        href=\"https://takeuforward.org/data-structure/preorder-traversal-of-binary-tree\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>here</strong></a></p>\n\n\n\n<p><strong>Postorder Traversal </strong> is the type of Depth First Traversal where nodes are visited in the order:\n    Left, Right then Root.</p>\n<p>It's named \"postorder\" because the \"Visit\" step occurs after traversing the left and right child nodes.</p>\n\n<figure class=\"wp-block-image size-full is-resized\"><img\n        src=\"https://static.takeuforward.org/content/Screenshot%202024-01-07%20at%208.55.17%20PM-DgFI8ob3\" alt=\"\"\n        class=\"wp-image-12743\" width=\"602\" height=\"196\"></figure>\n<p>Procedure of Postorder Traversal:</p>\n\n<ol>\n    <li>Traverse the Left Subtree: Recursively traverse the left subtree, following the same steps starting from step 1.\n    </li>\n    <li>Traverse the Right Subtree: Similarly, recursively traverse the right subtree, following the same steps starting\n        from step 1.</li>\n    <li>Visit the Current Node: After fully traversing both left and right subtrees, visit the current node, performing\n        the visitation operation (such as printing the node's value or performing an operation with the node's data).\n    </li>\n</ol>\n\n<p>Read about Postorder Traversal in detail <a\n        href=\"https://takeuforward.org/data-structure/post-order-traversal-of-binary-tree\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>here</strong></a></p>\n\n\n\n<h3> <strong>In Summary:</strong></h3>\n\n<figure class=\"wp-block-image size-full is-resized\"><img\n        src=\"https://static.takeuforward.org/content/Screenshot%202024-01-07%20at%209.03.01%20PM-Dw3JnHQa\" alt=\"\"\n        class=\"wp-image-12743\" width=\"602\" height=\"196\"></figure>\n\n<h3><strong>Order of Visitation:</strong></h3>\n<p>Inorder: Left, Visit, Right</p>\n<span>Visits nodes in ascending order in a BST, accessing left children before the parent and then the right\n    children.</span>\n\n<p>Preorder: Visit, Left, Right</p>\n<span>Starts with the root node, visits the current node before its children, then moves to left and right\n    children.</span>\n\n<p>Postorder: Left, Right, Visit</p>\n<span>Visits the children nodes before the parent node, exploring left and right subtrees before visiting the current\n    node.</span>\n\n\n<p><strong>Level Order Traversal </strong> is the type of Breadth First Traversal where nodes are visited level by\n    level, exploring each level completely before moving to the next level.\n\n<p>Level order traversal utilises a queue data structure to maintain the nodes at each level, ensuring that nodes at\n    higher levels are visited before moving to lower levels.</p>\n\n<figure class=\"wp-block-image size-full is-resized\"><img\n        src=\"https://static.takeuforward.org/content/Screenshot%202024-01-08%20at%2010.24.34%20AM-wmqzwxiP\" alt=\"\"\n        class=\"wp-image-12743\" width=\"602\" height=\"196\"></figure>\n\n<p>Procedure of Level Order Traversal:</p>\n\n<ol>\n    <li>Visit Nodes at Each Level: Starting from the root node, visit all nodes at level 0.\n    </li>\n    <li>Move to Next Level: After visiting all nodes at level 0, move to level 1 and visit all nodes at this level from\n        left to right.</li>\n    <li>Continue Level-wise: Repeat this process for subsequent levels, visiting nodes at each level from left to right\n        until all levels are visited.\n    </li>\n</ol>\n\n<p>Read about Level Order Traversal in detail <a\n        href=\"https://takeuforward.org/data-structure/level-order-traversal-of-a-binary-tree\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>here</strong></a>\n</p>\n\n<blockquote class=\"wp-block-quote\"><p>Special thanks to <strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268\">Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,<strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\"> please check out this article</a></strong></p></blockquote>"
}