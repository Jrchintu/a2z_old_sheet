{
    "dislikes": 1,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:10:05 GMT+0530 (India Standard Time)",
    "slug": "count-number-of-nodes-in-a-binary-tree",
    "aid": "1669",
    "title": "Count Number of Nodes in a Binary Tree",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/count-total-nodes-in-a-complete-bt",
    "topics": [
        {
            "topic-id": "binary-tree",
            "topic-title": "Binary Tree"
        },
        {
            "topic-id": "dynamic-programming",
            "topic-title": "Dynamic Programming"
        },
        {
            "topic-id": "recursion",
            "topic-title": "Recursion"
        }
    ],
    "content": "<p><strong>Problem Statement: </strong> Given a Complete Binary Tree, count and return the number of nodes in the given tree.\nA Complete Binary Tree is a binary tree in which all levels are completely filled, except possibly for the last level, and all nodes are as left as possible.\n</p>\n\n\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n    <details class=\"article_example_details\">\n        <summary class=\"article_example_summary\">\n            <span><strong>\n                    Examples\n                </strong>\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"atricle_example_content\">\n            <pre class=\"wp-block-preformatted\">\n                <span><strong>Example 1:</strong></span>\n                <span><strong>Input:</strong> Binary Tree: 1 2 3 4 5 6</span>\n                <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/count-total-nodes-image1-K14AZoeV\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n                <span><strong>Output:</strong> 6</span>\n                <span><strong>Explanation: </strong>There are 6 nodes in this Binary Tree.</span>\n                <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/count-total-nodes-image2-6dfcHg_V\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n                <span><strong>Example 2:</strong></span>\n                <span><strong>Input:</strong> Binary Tree: 2 4 3 5 9 8 7 1 6\n                </span>\n                <!--<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/lca-tree-image2-kwG05v8u\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>-->\n                <span><strong>Output :</strong> 9</span>\n                <span><strong>Explanation: </strong>There are 9 nodes in this Binary Tree.</span>\n                <!--<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/lca-tree-image4-sSf-8mj-\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>-->\n\n            </pre>\n        </div>\n    </details>\n</div>\n\n\n<!-- This is Practice Section-->\n<div class=\"practice\">\n    <span><strong>Practice: </strong></span>\n    <div class=\"problem-buttons\">\n\n        <!-- Add Problem Link inside href -->\n        <a href=\"https://www.codingninjas.com/studio/problems/nodes-in-complete-binary-tree_1281151?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf\" target=\"_blank\" rel=\"noopener\">\n            <span>Solve Problem</span>\n            <img src=\"https://takeuforward-content-images.s3.ap-south-1.amazonaws.com/content/Group-11-5-pFOq-8ga\" alt=\"code-studio\">\n        </a>\n    </div>\n    \n</div>\n\n\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out yourself first. </em></p>\n\n\n<!-- This is Approaches Drop-Down -->\n<div class=\"dsa_article_dropdown_approachs \">\n\n    <!-- Approach - 1 Starts from here -->\n    <div id=\"brute-force-approach\">\n        <details>\n            <summary class=\"main-summary\">\n                <span>\n                    <!-- Change Name Here -->\n                   Brute Force Approach \n                </span>\n                <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                    <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                    </path>\n                </svg>\n            </summary>\n            <div class=\"common-drops\">\n                <details class=\"secondary-details\" open=\"\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Algorithm / Intuition\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <div class=\"approach-algorithm\">\n                        <p>Complete Binary Tree: A complete binary tree is a binary tree where all levels, except possibly the last one, are completely filled, and the nodes in the last level are as left as possible. Read more about it here: <a href=\"https://takeuforward.org/binary-tree/introduction-to-trees/\"> Introduction to Trees</a></p>            \n                        <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/count-total-nodes-image5-6Z8a8a52\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n                        <p>A brute force approach would be to traverse the tree using inorder (or any) traversal and count the number of nodes as we are traversing the tree. In Inorder traversal, we visit the left subtree first, then the current node, and finally the right subtree. By incrementing the counter for each visited node, we effectively count all nodes in the binary tree.</p>\n                        <p><strong>Algorithm:</strong></p>\n                        <p><strong>Step 1:</strong> Start by initialising a variable to count (initial value 0) the number of nodes in the binary tree</p>\n                        \n                        <p><strong>Step 2:</strong>Define a recursive inorder function:</p>\n                        <p>Base Case: If the current node is null, return from the void function.</p>\n                        <p>Recursive Call: If the current node is not null, call the function for its left child.\n                        <ol><li>Increment the counter by 1 for each node.</li><li>Recursively call the function on the right child of the current node as well.</li></ol></p>\n                        <p><strong>Step 3:</strong>   Start the inorder traversal from the root of the Binary Tree by calling the recursive function on the root node with initial count to 0.</p>\n                        <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/count-total-nodes-image6-equTws2z\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n                        <p><strong>Step 4:</strong> Return the final value of the count variable after the traversal representing the total number of nodes.</p>\n                        \n                    </div>\n                </details>\n                <details class=\"code-section secondary-details\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Code\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <div class=\"code-tabs\">\n                        <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n                        <button class=\"code-tab\" data-lang=\"java\">Java</button>\n                        <button class=\"code-tab\" data-lang=\"python\">Python</button>\n                        <button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n                        <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\"\n                            xmlns=\"http://www.w3.org/2000/svg\">\n                            <path\n                                d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n                            </path>\n                        </svg>\n                    </div>\n                    <div class=\"code-content\">\n                        <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n                            <pre class=\"wp-block-code\">\n                                <code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;iostream&gt;\n#include &lt;unordered_map&gt;\n#include &lt;vector&gt;\n#include &lt;queue&gt;\n\nusing namespace std;\n\n// TreeNode structure\nstruct TreeNode {\n    int val;\n    TreeNode *left;\n    TreeNode *right;\n    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n};\n\n\nclass Solution {\npublic:\n    // Function to perform inorder\n    // traversal and count nodes\n    void inorder(TreeNode* root, int &amp;count) {\n        // Base case: If the current\n        // node is NULL, return\n        if (root == NULL) {\n            return;\n        }\n\n        // Increment count\n        // for the current node\n        count++;\n\n        // Recursively call inorder\n        // on the left subtree\n        inorder(root-&gt;left, count);\n\n        // Recursively call inorder\n        // on the right subtree\n        inorder(root-&gt;right, count);\n    }\n\n    // Function to count nodes in the binary tree\n    int countNodes(TreeNode* root) {\n        // Base case: If the root is NULL,\n        // the tree is empty, return 0\n        if (root == NULL) {\n            return 0;\n        }\n\n        // Initialize count variable to\n        // store the number of nodes\n        int count = 0;\n\n        // Call the inorder traversal\n        // function to count nodes\n        inorder(root, count);\n\n        // Return the final count of\n        // nodes in the binary tree\n        return count;\n    }\n};\n\n\n\n\nint main() {\n    // Create the binary tree\n    TreeNode* root = new TreeNode(1);\n    root-&gt;left = new TreeNode(2);\n    root-&gt;right = new TreeNode(3);\n    root-&gt;left-&gt;left = new TreeNode(4);\n    root-&gt;left-&gt;right = new TreeNode(5);\n    root-&gt;right-&gt;left = new TreeNode(6);\n\n    Solution sol;\n\n    // Call the countNodes function\n    int totalNodes = sol.countNodes(root);\n\n    // Print the result\n    cout &lt;&lt; &quot;Total number of nodes in the Complete Binary Tree: &quot;\n            &lt;&lt; totalNodes &lt;&lt; endl;\n\n\n\n    return 0;\n}\n                                </code>\n                            </pre>\n                        </div>\n                        <div class=\"code-block \" data-lang=\"java\">\n                            <pre class=\"wp-block-code\">\n                                <code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\n// TreeNode structure\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    public TreeNode(int x) {\n        val = x;\n        left = null;\n        right = null;\n    }\n}\n\npublic class Solution {\n    // Function to perform inorder\n    // traversal and count nodes\n    public void inorder(TreeNode root, int[] count) {\n        // Base case: If the current\n        // node is null, return\n        if (root == null) {\n            return;\n        }\n\n        // Increment count\n        // for the current node\n        count[0]++;\n\n        // Recursively call inorder\n        // on the left subtree\n        inorder(root.left, count);\n\n        // Recursively call inorder\n        // on the right subtree\n        inorder(root.right, count);\n    }\n\n    // Function to count nodes in the binary tree\n    public int countNodes(TreeNode root) {\n        // Base case: If the root is null,\n        // the tree is empty, return 0\n        if (root == null) {\n            return 0;\n        }\n\n        // Initialize count variable to\n        // store the number of nodes\n        int[] count = {0};\n\n        // Call the inorder traversal\n        // function to count nodes\n        inorder(root, count);\n\n        // Return the final count of\n        // nodes in the binary tree\n        return count[0];\n    }\n\n    public static void main(String[] args) {\n        // Create the binary tree\n        TreeNode root = new TreeNode(1);\n        root.left = new TreeNode(2);\n        root.right = new TreeNode(3);\n        root.left.left = new TreeNode(4);\n        root.left.right = new TreeNode(5);\n        root.right.left = new TreeNode(6);\n\n        Solution sol = new Solution();\n\n        // Call the countNodes function\n        int totalNodes = sol.countNodes(root);\n\n        // Print the result\n        System.out.println(&quot;Total number of nodes in the Complete Binary Tree: &quot; + totalNodes);\n    }\n}\n                                </code>\n                            </pre>\n                        </div>\n                        <div class=\"code-block\" data-lang=\"python\">\n                            <pre class=\"wp-block-code\">\n                                <code lang=\"python\" class=\"language-python\">\n# TreeNode class definition\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\n\nclass Solution:\n    def inorder(self, root, count):\n        &quot;&quot;&quot;\n        Function to perform inorder traversal and count nodes\n        &quot;&quot;&quot;\n        # Base case: If the current node is None, return\n        if root is None:\n            return\n\n        # Increment count for the current node\n        count[0] += 1\n\n        # Recursively call inorder on the left subtree\n        self.inorder(root.left, count)\n\n        # Recursively call inorder on the right subtree\n        self.inorder(root.right, count)\n\n    def countNodes(self, root):\n        &quot;&quot;&quot;\n        Function to count nodes in the binary tree\n        &quot;&quot;&quot;\n        # Base case: If the root is None, the tree is empty, return 0\n        if root is None:\n            return 0\n\n        # Initialize count variable to store the number of nodes\n        count = [0]\n\n        # Call the inorder traversal function to count nodes\n        self.inorder(root, count)\n\n        # Return the final count of nodes in the binary tree\n        return count[0]\n\n\n# Main function\nif __name__ == &quot;__main__&quot;:\n    # Create the binary tree\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    root.right.left = TreeNode(6)\n\n    sol = Solution()\n\n    # Call the countNodes function\n    totalNodes = sol.countNodes(root)\n\n    # Print the result\n    print(&quot;Total number of nodes in the Complete Binary Tree:&quot;, totalNodes)\n                                </code>\n                            </pre>\n                        </div>\n                         <div class=\"code-block\" data-lang=\"javascript\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"javascript\" class=\"language-javascript\">\n// TreeNode structure\nclass TreeNode {\n    constructor(x) {\n        this.val = x;\n        this.left = null;\n        this.right = null;\n    }\n}\n\nclass Solution {\n    // Function to perform inorder\n    // traversal and count nodes\n    inorder(root, count) {\n        // Base case: If the current\n        // node is null, return\n        if (root === null) {\n            return;\n        }\n\n        // Increment count\n        // for the current node\n        count++;\n\n        // Recursively call inorder\n        // on the left subtree\n        this.inorder(root.left, count);\n\n        // Recursively call inorder\n        // on the right subtree\n        this.inorder(root.right, count);\n    }\n\n    // Function to count nodes in the binary tree\n    countNodes(root) {\n        // Base case: If the root is null,\n        // the tree is empty, return 0\n        if (root === null) {\n            return 0;\n        }\n\n        // Initialize count variable to\n        // store the number of nodes\n        let count = 0;\n\n        // Call the inorder traversal\n        // function to count nodes\n        this.inorder(root, count);\n\n        // Return the final count of\n        // nodes in the binary tree\n        return count;\n    }\n}\n\n// Create the binary tree\nlet root = new TreeNode(1);\nroot.left = new TreeNode(2);\nroot.right = new TreeNode(3);\nroot.left.left = new TreeNode(4);\nroot.left.right = new TreeNode(5);\nroot.right.left = new TreeNode(6);\n\nlet sol = new Solution();\n\n// Call the countNodes function\nlet totalNodes = sol.countNodes(root);\n\n// Print the result\nconsole.log(&quot;Total number of nodes in the Complete Binary Tree: &quot; + totalNodes);\n\n                            </code>\n                        </pre>\n                        </div>\n                        <p>\n                           <strong>Output: </strong>Total number of nodes in the Complete Binary Tree: 6\n                        </p>\n                    </div>\n                </details>\n                <details class=\"secondary-details\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Complexity Analysis\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <p>\n                        <p><strong>Time Complexity: O(N)</strong> where N is the number of nodes in the binary tree as each node of the binary tree is visited exactly once.</p>\n\n                        <p><strong>Space Complexity : O(N)</strong> where N is the number of nodes in the binary tree. This is because the recursive stack uses an auxiliary space which can potentially hold all nodes in the tree when dealing with a skewed tree (all nodes have only one child), consuming space proportional to the number of nodes.\n                        In the average case or for a balanced tree, the maximum number of nodes that could be in the stack at any given time would be roughly the height of the tree hence O(log2N).</p>\n\n                    </p>\n                </details>\n            </div>\n        </details>\n    </div>\n    <!-- Approach - 1 Ends here -->\n\n\n    <!-- Approach - 2 Starts from here -->\n\n    <div id=\"optimal-approach\">\n        <details>\n            <summary class=\"main-summary\">\n                <span>\n                    Optimal Approach \n                </span>\n                <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                    <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                    </path>\n                </svg>\n            </summary>\n            <div class=\"common-drops\">\n                <details class=\"secondary-details\" open=\"\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Algorithm / Intuition\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <div class=\"approach-algorithm\">\n                        <p>Given that the binary is a complete binary tree, we can exploit its properties to optimise the algorithm and achieve a better time complexity.\n                        In a complete binary tree, the last level may not be completely filled, but the nodes are positioned from left to right. This property allows us to determine the number of nodes using just the height.\n                        The relationship between the height of the binary tree (h) and the maximum number of nodes it can have, denoted by the formula: \n                        Maximum Number of Nodes: 2^h-1</p>\n                        <!--<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/lca-tree-image7-rLcRwzU1\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>-->\n                        <p>If the last level of a binary tree is perfectly filled, known as a perfect binary tree, the count of nodes can be determined by the formula: 2h-1, where h is the height. To check if the last level of the Binary Tree is filled or not we can compare the left and right heights of the tree.</p>\n                        <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/count-total-nodes-image8-pVNPsui0\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n                        <p><ol><li>If the left height equals right height, it indicates that the last level is completely filled.</li><li>If the left height does not equal right height, the last level is not completely filled.</li></ol>\n                        In the case where left height and right height differ, we can employ a recursive approach. We recursively calculate the number of nodes in the left subtree and in the right subtree , and then return the total count as 1 + leftNodes + rightNodes.\n                        If the height of the left subtree is equal to the height of the right subtree, we can directly calculate using the 2h-1 formula.</p>\n\n                        <p><strong>Algorithm:</strong></p>\n                        <p><strong>Step 1: Base Case</strong>  If the given node is null, we return 0 as there are no nodes to count.</p>\n                    \n                        <p><strong>Step 2: Recursive Calls: </strong>  Recursively find the left height and right height of the Binary Tree. </p>\n                        <p><strong>Step 3: Comparison: </strong>   If the left height is equal to the right height implies that the tree\u2019s last level is completely filled. Return the count of nodes using the formula: return (1 &lt;&lt; lh) - 1, where &lt;&lt; represents the left shift operator and represents the power of 2. </p>\n                        <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/count-total-nodes-image9-7lgP5JO-\" alt=\"\" class=\"wp-image-8107\" width=\"600\" height=\"1000\"/></figure>\n                    \n                        <p><strong>Step 4: </strong>If the left height is not equal to the right height implies that the tree\u2019s last level is not completely filled.\n                        Recursively call the function to the left and right subtree and return the final number of nodes as\n                        1 + countNodes(root-&gt;left) + countNodes(root-&gt;right)</p>\n                        <p><strong>Step 5: </strong>  Implement the find left height and right height functions.\n                        <ol><li>Start with the variable height set to 0.</li><li>Use a while loop to traverse the left/right side of the tree incrementing the height until reaching a leaf node.</li><li>Return the calculated height.</li></ol></p>\n                        <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/count-total-nodes-image10-RztlTvqn\" alt=\"\" class=\"wp-image-8107\" width=\"600\" height=\"1000\"/></figure>\n\n                    </div>\n                </details>\n                <details class=\"code-section secondary-details\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Code\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <div class=\"code-tabs\">\n                        <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n                        <button class=\"code-tab\" data-lang=\"java\">Java</button>\n                        <button class=\"code-tab\" data-lang=\"python\">Python</button>\n                        <button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n                        <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\"\n                            xmlns=\"http://www.w3.org/2000/svg\">\n                            <path\n                                d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n                            </path>\n                        </svg>\n                    </div>\n                    <div class=\"code-content\">\n                        <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n                            <pre class=\"wp-block-code\">\n                                <code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;iostream&gt;\n#include &lt;unordered_map&gt;\n#include &lt;vector&gt;\n#include &lt;queue&gt;\n\nusing namespace std;\n\n// TreeNode structure\nstruct TreeNode {\n    int val;\n    TreeNode *left;\n    TreeNode *right;\n    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n};\n\n\n\nclass Solution {\npublic:\n    // Function to count nodes\n    // in a binary tree\n    int countNodes(TreeNode* root) {\n        // Base case: If the root\n        // is NULL, there are no nodes\n        if (root == NULL) {\n            return 0;\n        }\n        \n        // Find the left height and\n        // right height of the tree\n        int lh = findHeightLeft(root);\n        int rh = findHeightRight(root);\n        \n        // Check if the last level\n        // is completely filled\n        if (lh == rh) {\n            // If so, use the formula for\n            // total nodes in a perfect\n            // binary tree ie. 2^h - 1\n            return (1 &lt;&lt; lh) - 1; \n        }\n        \n        // If the last level is not completely\n        // filled, recursively count nodes in\n        // left and right subtrees\n        return 1 + countNodes(root-&gt;left) + countNodes(root-&gt;right);\n    }\n    \n    // Function to find the left height of a tree\n    int findHeightLeft(TreeNode* node) {\n        int height = 0;\n        // Traverse left child until\n        // reaching the leftmost leaf\n        while (node) {\n            height++;\n            node = node-&gt;left;\n        }\n        return height;\n    }\n    \n    // Function to find the right height of a tree\n    int findHeightRight(TreeNode* node) {\n        int height = 0;\n        // Traverse right child until\n        // reaching the rightmost leaf\n        while (node) {\n            height++;\n            node = node-&gt;right;\n        }\n        return height;\n    }\n};\n\n\n\nint main() {\n    // Create the binary tree\n    TreeNode* root = new TreeNode(1);\n    root-&gt;left = new TreeNode(2);\n    root-&gt;right = new TreeNode(3);\n    root-&gt;left-&gt;left = new TreeNode(4);\n    root-&gt;left-&gt;right = new TreeNode(5);\n    root-&gt;right-&gt;left = new TreeNode(6);\n\n    Solution sol;\n\n    // Call the countNodes function\n    int totalNodes = sol.countNodes(root);\n\n    // Print the result\n    cout &lt;&lt; &quot;Total number of nodes in the Complete Binary Tree: &quot;\n            &lt;&lt; totalNodes &lt;&lt; endl;\n\n\n\n    return 0;\n}\n                                </code>\n                            </pre>\n                        </div>\n                        <div class=\"code-block \" data-lang=\"java\">\n                            <pre class=\"wp-block-code\">\n                                <code lang=\"java\" class=\"language-java\">\nimport java.util.LinkedList;\nimport java.util.Queue;\n\n// TreeNode structure\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    public TreeNode(int x) {\n        val = x;\n        left = null;\n        right = null;\n    }\n}\n\npublic class Solution {\n    // Function to count the total number\n    // of nodes in a Complete Binary Tree\n    public int countNodes(TreeNode root) {\n        // Check if the tree is empty\n        if (root == null) {\n            return 0;\n        }\n\n        // Find the height of the left subtree\n        int lh = findHeightLeft(root);\n        // Find the height of the right subtree\n        int rh = findHeightRight(root);\n\n        // If the heights are equal, the tree\n        // is a full binary tree, and we can\n        // calculate the total nodes\n        if (lh == rh) {\n            return (1 &lt;&lt; lh) - 1;\n        }\n\n        // If the heights are not equal,\n        // recursively count nodes in the\n        // left and right subtrees\n        return 1 + countNodes(root.left) + countNodes(root.right);\n    }\n\n    // Function to find the\n    // height of the left subtree\n    private int findHeightLeft(TreeNode node) {\n        int height = 0;\n        while (node != null) {\n            height++;\n            node = node.left;\n        }\n        return height;\n    }\n\n    // Function to find the\n    // height of the right subtree\n    private int findHeightRight(TreeNode node) {\n        int height = 0;\n        while (node != null) {\n            height++;\n            node = node.right;\n        }\n        return height;\n    }\n\n    public static void main(String[] args) {\n        // Create the binary tree\n        TreeNode root = new TreeNode(1);\n        root.left = new TreeNode(2);\n        root.right = new TreeNode(3);\n        root.left.left = new TreeNode(4);\n        root.left.right = new TreeNode(5);\n        root.right.left = new TreeNode(6);\n\n        Solution sol = new Solution();\n\n        // Call the countNodes function\n        int totalNodes = sol.countNodes(root);\n\n        // Print the result\n        System.out.println(&quot;Total number of nodes in the Complete Binary Tree: &quot; + totalNodes);\n    }\n}           \n\n                                </code>\n                            </pre>\n                        </div>\n                        <div class=\"code-block\" data-lang=\"python\">\n                            <pre class=\"wp-block-code\">\n                                <code lang=\"python\" class=\"language-python\">\n                     \nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\n\nclass Solution:\n    def countNodes(self, root):\n        &quot;&quot;&quot;\n        Count the total number of nodes in the Complete Binary Tree.\n\n        :param root: TreeNode, the root of the binary tree\n        :return: int, total number of nodes in the binary tree\n        &quot;&quot;&quot;\n        if not root:\n            return 0\n\n        lh = self.findHeightLeft(root)\n        rh = self.findHeightRight(root)\n\n        if lh == rh:\n            return (1 &lt;&lt; lh) - 1\n        return 1 + self.countNodes(root.left) + self.countNodes(root.right)\n\n    def findHeightLeft(self, node):\n        &quot;&quot;&quot;\n        Find the height of the left subtree.\n\n        :param node: TreeNode, the root of the subtree\n        :return: int, height of the left subtree\n        &quot;&quot;&quot;\n        hght = 0\n        while node:\n            hght += 1\n            node = node.left\n        return hght\n\n    def findHeightRight(self, node):\n        &quot;&quot;&quot;\n        Find the height of the right subtree.\n\n        :param node: TreeNode, the root of the subtree\n        :return: int, height of the right subtree\n        &quot;&quot;&quot;\n        hght = 0\n        while node:\n            hght += 1\n            node = node.right\n        return hght\n\n\nif __name__ == &quot;__main__&quot;:\n    # Create the binary tree\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    root.right.left = TreeNode(6)\n\n    sol = Solution()\n\n    # Call the countNodes function\n    totalNodes = sol.countNodes(root)\n\n    # Print the result\n    print(f&quot;Total number of nodes in the Complete Binary Tree: {totalNodes}&quot;)\n                                </code>\n                            </pre>\n                        </div>\n                         <div class=\"code-block\" data-lang=\"javascript\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"javascript\" class=\"language-javascript\">\n// TreeNode structure\nclass TreeNode {\n    constructor(x) {\n        this.val = x;\n        this.left = null;\n        this.right = null;\n    }\n}\n\nclass Solution {\n    // Function to count nodes\n    // in a complete binary tree\n    countNodes(root) {\n        if (root === null) {\n            return 0;\n        }\n\n        // Find height of left and right subtrees\n        const lh = this.findHeightLeft(root);\n        const rh = this.findHeightRight(root);\n\n        // If height of left and right subtrees\n        // is the same, the tree is a perfect binary tree\n        if (lh === rh) {\n            return (1 &amp;lt;&amp;lt; lh) - 1;\n        }\n\n        // Recursive call for\n        // left and right subtrees\n        return 1 + this.countNodes(root.left) + this.countNodes(root.right);\n    }\n\n    // Function to find the\n    // height of the left subtree\n    findHeightLeft(node) {\n        let height = 0;\n        while (node) {\n            height++;\n            node = node.left;\n        }\n        return height;\n    }\n\n    // Function to find the\n    // height of the right subtree\n    findHeightRight(node) {\n        let height = 0;\n        while (node) {\n            height++;\n            node = node.right;\n        }\n        return height;\n    }\n}\n\n// Main function\nfunction main() {\n    // Create the binary tree\n    const root = new TreeNode(1);\n    root.left = new TreeNode(2);\n    root.right = new TreeNode(3);\n    root.left.left = new TreeNode(4);\n    root.left.right = new TreeNode(5);\n    root.right.left = new TreeNode(6);\n\n    const sol = new Solution();\n\n    // Call the countNodes function\n    const totalNodes = sol.countNodes(root);\n\n    // Print the result\n    console.log(&amp;quot;Total number of nodes in the Complete Binary Tree: &amp;quot; + totalNodes);\n}\n\n// Execute the main function\nmain();\n                    \n                            </code>\n                        </pre>\n                        </div>\n                        <p>\n                            <strong>Output:</strong> Total number of nodes in the Complete Binary Tree: 6\n                        </p>\n                    </div>\n                </details>\n                <details class=\"secondary-details\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Complexity Analysis\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <p>\n                        <p><strong>Time Complexity: O(log N * log N)</strong> where N is the number of nodes in the Binary Tree.\n                        <ol><li>The calculation of leftHeight and rightHeight takes O(log N) time.</li><li>In the worst case, when encountering the second case (leftHeight != rightHeight), the recursive calls are made at most log N times (the height of the tree).</li><li>Therefore, the total time complexity is O(log N * log N).</li></p>\n                        <p><strong>Space Complexity : O(H) ~ O(N)</strong>  where N is the number of nodes in the Binary Tree.\n                        <ol><li>The space complexity is determined by the maximum depth of the recursion stack, which is equal to the height of the binary tree.</li><li>Since the given tree is a complete binary tree, the height will always be log N.</li><li>Therefore, the space complexity is O(log N).</li></ol></p>\n\n\n                    </p>\n                </details>\n            </div>\n        </details>\n    </div>\n</div>\n\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n    <details>\n        <summary class=\"main-summary\">\n            <span>\n                Video Explanation\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"yt-video-wrapper\">\n           <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/u-yWemKGWO0?si=nO32uyNwtXm7YXUf\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n        </div>\n    </details>\n</div>\n\n<script src=\"https://takeuforward.org/UXApproachDropDowns/2ApproachJSScript.js\"></script>\n\n<blockquote class=\"wp-block-quote\">\n    Special thanks to <strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268\">Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,<strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\"> please check out this article</a></strong>\n</blockquote>\n\n\n<script>\n\n    const codeSections = document.querySelectorAll('.code-section');\n\n    // Get last selected language from localStorage or set default value\n    let lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp';\n\n    codeSections.forEach((section, sectionIndex) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n        const copyBtn = section.querySelector('.copy-btn');\n\n        codeTabs.forEach((tab) => {\n            tab.addEventListener('click', () => {\n                codeTabs.forEach((t) => {\n                    t.classList.remove('dsa_article_code_active');\n                });\n                tab.classList.add('dsa_article_code_active');\n\n                const lang = tab.dataset.lang;\n                const activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                codeBlocks.forEach((block) => {\n                    if (block === activeBlock) {\n                        block.classList.add('dsa_article_code_active');\n                    } else {\n                        block.classList.remove('dsa_article_code_active');\n                    }\n                });\n\n                // Update last selected language for all sections and store in localStorage\n                lastSelectedLanguage = lang;\n                localStorage.setItem('lastSelectedLanguage', lang);\n                codeSections.forEach((otherSection, otherIndex) => {\n                    if (otherIndex !== sectionIndex) {\n                        const otherTabs = otherSection.querySelectorAll('.code-tab');\n                        otherTabs.forEach((otherTab) => {\n                            if (otherTab.dataset.lang === lang) {\n                                otherTab.classList.add('dsa_article_code_active');\n                            } else {\n                                otherTab.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                        const otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                        const otherCodeBlocks = otherSection.querySelectorAll('.code-block');\n                        otherCodeBlocks.forEach((block) => {\n                            if (block === otherActiveBlock) {\n                                block.classList.add('dsa_article_code_active');\n                            } else {\n                                block.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                    }\n                });\n            });\n        });\n\n        // Handle copy button click event\n        copyBtn.addEventListener('click', () => {\n            const activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\n            navigator.clipboard.writeText(activeBlock.innerText);\n            copyBtn.classList.add('dsa_article_code_active');\n            setTimeout(() => {\n                copyBtn.classList.remove('dsa_article_code_active');\n            }, 1000);\n        });\n    });\n\n    // Set initial state of the tabs\n    codeSections.forEach((section) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n\n        codeTabs.forEach((tab) => {\n            if (tab.dataset.lang === lastSelectedLanguage) {\n                tab.classList.add('dsa_article_code_active');\n            } else {\n                tab.classList.remove('dsa_article_code_active');\n            }\n        });\n\n        codeBlocks.forEach((block) => {\n            if (block.dataset.lang === lastSelectedLanguage) {\n                block.classList.add('dsa_article_code_active');\n            } else {\n                block.classList.remove('dsa_article_code_active');\n            }\n        });\n    });\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>",
    "category_tag": "binary-tree",
    "likes": 31,
    "preview": "Problem Statement: Given a Complete Binary Tree, count and return the number of nodes in the given tree. A Complete Binary Tree is a binary tree in which all levels are completely filled, except po..."
}