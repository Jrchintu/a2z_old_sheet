{
    "dislikes": 2,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:12:07 GMT+0530 (India Standard Time)",
    "slug": "ceil-in-a-binary-search-tree",
    "aid": "2254",
    "tuf_plus": "",
    "title": "Ceil in a Binary Search Tree",
    "topics": [
        {
            "topic-id": "binary-search-tree",
            "topic-title": "Binary Search Tree"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "recursion",
            "topic-title": "Recursion"
        }
    ],
    "category_tag": "binary-search-tree",
    "likes": 53,
    "preview": "Problem Statement: Given a Binary Search Tree and a key, return the ceiling of the given key in the Binary Search Tree. 1. Ceiling of a value refers to the value of the smallest node in the Binary...",
    "content": "<p><strong>Problem Statement: </strong> Given a Binary Search Tree and a key, return the ceiling of the given key in the Binary Search Tree.\n<ol><li>Ceiling of a value refers to the value of the smallest node in the Binary Search Tree that is greater than or equal to the given key.</li><li>If the ceiling node does not exist, return nullptr.</li></ol></p>\n<div id=\"article_examples\">\n    <details class=\"article_example_details\">\n        <summary class=\"article_example_summary\">\n            <span><strong>\n                    Examples\n                </strong>\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"atricle_example_content\">\n            <pre class=\"wp-block-preformatted\">\n                <span><strong>Example 1:</strong></span>\n\t\t\t\t<span><strong>Input:</strong>Binary Search Tree: 10 5 13 3 6 11 14 2 4 -1 9, Key = 8\n\t\t\t\t</span>\n\t\t\t\t<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/ceil-bst-image1-uoREOeCw\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n\t\t\t\t<span><strong>Output:</strong>9</span>\t\t\t\n\t\t\t\t<span><strong>Explanation: </strong>In the given BST, the smallest value greater or equal to 8 is 9. </span>\n\t\t\t\t\n\t\t\t\t<span><strong>Example 2:</strong></span>\n\t\t\t\t<span><strong>Input:</strong>Binary Search Tree: 8 5 12 4 7 10 14 -1 -1 6 -1 -1 -1 13, Key = 8\n\t\t\t\t</span>\n\t\t\t\t<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/ceil-bst-image2-gZfV-1xo\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n\t\t\t\t<span><strong>Output: </strong>12</span>\n\t\t\t\t\n\t\t\t\t<span><strong>Explanation: </strong> In the given BST, the smallest value greater or equal to 11 is 12. </span>\n\t\t\t\t\t\n            </pre>\n        </div>\n    </details>\n</div>\n\n<!-- This is Practice Section-->\n<div class=\"practice\">\n    <span><strong>Practice: </strong></span>\n    <div class=\"problem-buttons\">\n\n        <!-- Add Problem Link inside href -->\n        <a href=\"https://www.codingninjas.com/studio/problems/ceil-from-bst_920464?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf\" target=\"_blank\" rel=\"noopener\">\n            <span>Solve Problem</span>\n            <img src=\"https://takeuforward-content-images.s3.ap-south-1.amazonaws.com/content/Group-11-5-pFOq-8ga\"\n                alt=\"code-studio\">\n        </a>\n    </div>\n    <!--<div class=\"problem-buttons\">\n         Add Problem Link inside href \n        <a href=\"\" target=\"_blank\" rel=\"noopener\">\n            <span>Solve Problem</span>\n            <img src=\"https://cdn.iconscout.com/icon/free/png-256/free-leetcode-3521542-2944960.png?f=webp\"\n                alt=\"leetcode\">\n        </a>\n    </div>-->\n</div>\n\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\n        yourself first. </em></p>\n\n\n<div id=\"brute-force-approach\">\n    <details>\n        <summary class=\"main-summary\">\n            <span>\n                Optimal Approach \n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                </path>\n            </svg>\n        </summary>\n        <div class=\"common-drops\">\n            <details class=\"secondary-details\" open=\"\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Algorithm / Intuition\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <div class=\"approach-algorithm\">\n                    <!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n                    \n                    <p>The strategy to find the `ceil` value is to keep track of the smallest node value encountered that is greater than or equal to the key. Traverse the tree recursively and move through it until it reaches the end or locates the key.\n                    During the traversal, at every node, if the key matches the node\u2019s values, it directly assigns the node\u2019s value as the ceiling and concludes the search.\n                    If the key is greater than the current node\u2019s value, the algorithm navigates to the right subtree to potentially find a larger value and if the key is smaller the algorithm updates the ceil value with the current node\u2019s values and explores the left subtree for potentially smaller values.</p>\n                    \n                    <h3>Algorithm: </h3>\n                    <p><strong>Step 1:</strong>Initialise a variable `ceil` to -1 to store the ceiling value initially.</p>\n                    <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/ceil-bst-image3-fr4GVhJR\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n                    <p><strong>Step 2: </strong>Traverse the Binary Search Tree by starting from the root and continue until reaching the end of the tree or finding the key. At every node:\n                    <ol><li>If the key value is equal to the node value, assign it as the ceiling value and return.</li><li>If the key value is greater than the current node\u2019s value, move to the right subtree.</li></ol></p>\n                    <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/ceil-bst-image4-uSknZALp\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>                   \n                    <p>If the key is smaller than the current node\u2019s value, update the `ceil` with the current node\u2019s value, and move to the left subtree.</p>\n                    <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/ceil-bst-image5-aoa3WH3e\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure> \n                    <p><strong>Step 3: </strong>\n                    Return the computed `ceil` value if the key is not found in the tree. This `ceil` value would represent the smallest node value greater than the key, or -1 if no such value exists in the BST.</p>\n                              \n                </div>\n            </details>\n            <details class=\"code-section secondary-details\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Code\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <div class=\"code-tabs\">\n                    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n                    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n                    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n                    <button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n                    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\"\n                        xmlns=\"http://www.w3.org/2000/svg\">\n                        <path\n                            d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n                        </path>\n                    </svg>\n                </div>\n                <div class=\"code-content\">\n                    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;climits&gt; \nusing namespace std;\n\n// Definition of TreeNode structure\n// for a binary tree node\nstruct TreeNode {\n    // Value of the node\n    int val;\n    \n    // Pointer to the left child node\n    TreeNode* left;\n    \n    // Pointer to the right child node\n    TreeNode* right;\n\n    // Constructor to initialize the node with a\n    // value and set left and right pointers to null\n    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n};\n\nclass Solution {\npublic:\n    // Function to find the ceiling of\n    // a key in a Binary Search Tree (BST)\n    int findCeil(TreeNode* root, int key){\n        // Initialize the variable\n        // to store the ceiling value\n        int ceil = -1; \n        \n        // Traverse the BST until reaching\n        // the end or finding the key\n        while(root){\n             // If the key is found, assign it\n             // as the ceiling and return\n            if(root-&gt;val == key){\n                ceil = root-&gt;val;\n                return ceil;\n            } \n            \n             // If the key is greater,\n             // move to the right subtree\n            if(key &gt; root-&gt;val){\n                root = root-&gt;right;\n            }\n            else{ \n                // If the key is smaller, update ceil\n                // and move to the left subtree\n                ceil = root-&gt;val;\n                root = root-&gt;left;\n            }\n        }\n         // Return the computed ceiling value\n        return ceil;\n    }\n};\n\n\n// Function to perform an in-order traversal\n// of a binary tree and print its nodes\nvoid printInOrder(TreeNode* root) {\n    // Check if the current node\n    // is null (base case for recursion)\n    if (root == nullptr) {\n        // If null, return and\n        // terminate the function\n        return;\n    }\n\n    // Recursively call printInOrder\n    // for the left subtree\n    printInOrder(root-&gt;left);\n\n    // Print the value of the current node\n    cout &lt;&lt; root-&gt;val &lt;&lt; &quot; &quot;;\n\n    // Recursively call printInOrder\n    // for the right subtree\n    printInOrder(root-&gt;right);\n}\n\nint main() {\n    // Creating a BST\n    TreeNode* root = new TreeNode(10);\n    root-&gt;left = new TreeNode(5);\n    root-&gt;right = new TreeNode(13);\n    root-&gt;left-&gt;left = new TreeNode(3);\n    root-&gt;left-&gt;left-&gt;left = new TreeNode(2);\n    root-&gt;left-&gt;left-&gt;right = new TreeNode(4);\n    root-&gt;left-&gt;right = new TreeNode(6);\n    root-&gt;left-&gt;right-&gt;right = new TreeNode(9);\n    root-&gt;right-&gt;left = new TreeNode(11);\n    root-&gt;right-&gt;right = new TreeNode(14);\n    \n    cout &lt;&lt; &quot;Binary Search Tree: &quot;&lt;&lt; endl;\n    printInOrder(root);\n    cout &lt;&lt; endl;\n\n    Solution solution;\n    \n    // Searching for a value in the BST\n    int target = 8;\n    int ciel = solution.findCeil(root, target);\n    \n    if(ciel != -1){\n        cout &lt;&lt; &quot;Ceiling of &quot; &lt;&lt; target &lt;&lt; &quot; is: &quot; &lt;&lt; ciel &lt;&lt; endl;\n    }\n    else{\n        cout &lt;&lt; &quot;No ceiling found!&quot;;\n    }\n    \n    return 0;\n}\n                            </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block \" data-lang=\"java\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"java\" class=\"language-java\">\n// Importing necessary packages\nimport java.util.*;\n\n// Definition of TreeNode structure for a binary tree node\nclass TreeNode {\n    // Value of the node\n    int val;\n\n    // Pointer to the left child node\n    TreeNode left;\n\n    // Pointer to the right child node\n    TreeNode right;\n\n    // Constructor to initialize the node with a\n    // value and set left and right pointers to null\n    TreeNode(int x) {\n        val = x;\n        left = null;\n        right = null;\n    }\n}\n\nclass Solution {\n    // Function to find the ceiling of\n    // a key in a Binary Search Tree (BST)\n    public int findCeil(TreeNode root, int key) {\n        // Initialize the variable to store the ceiling value\n        int ceil = -1;\n\n        // Traverse the BST until reaching\n        // the end or finding the key\n        while (root != null) {\n            // If the key is found, assign it\n            // as the ceiling and return\n            if (root.val == key) {\n                ceil = root.val;\n                return ceil;\n            }\n\n            // If the key is greater,\n            // move to the right subtree\n            if (key &gt; root.val) {\n                root = root.right;\n            } else {\n                // If the key is smaller, update ceil\n                // and move to the left subtree\n                ceil = root.val;\n                root = root.left;\n            }\n        }\n        // Return the computed ceiling value\n        return ceil;\n    }\n}\n\n// Class containing the main function\npublic class Main {\n    // Function to perform an in-order traversal\n    // of a binary tree and print its nodes\n    public static void printInOrder(TreeNode root) {\n        // Check if the current node\n        // is null (base case for recursion)\n        if (root == null) {\n            // If null, return and\n            // terminate the function\n            return;\n        }\n\n        // Recursively call printInOrder\n        // for the left subtree\n        printInOrder(root.left);\n\n        // Print the value of the current node\n        System.out.print(root.val + &quot; &quot;);\n\n        // Recursively call printInOrder\n        // for the right subtree\n        printInOrder(root.right);\n    }\n\n    // Main method\n    public static void main(String[] args) {\n        // Creating a BST\n        TreeNode root = new TreeNode(10);\n        root.left = new TreeNode(5);\n        root.right = new TreeNode(13);\n        root.left.left = new TreeNode(3);\n        root.left.left.left = new TreeNode(2);\n        root.left.left.right = new TreeNode(4);\n        root.left.right = new TreeNode(6);\n        root.left.right.right = new TreeNode(9);\n        root.right.left = new TreeNode(11);\n        root.right.right = new TreeNode(14);\n\n        System.out.println(&quot;Binary Search Tree: &quot;);\n        printInOrder(root);\n        System.out.println();\n\n        Solution solution = new Solution();\n\n        // Searching for a value in the BST\n        int target = 8;\n        int ceil = solution.findCeil(root, target);\n\n        if (ceil != -1) {\n            System.out.println(&quot;Ceiling of &quot; + target + &quot; is: &quot; + ceil);\n        } else {\n            System.out.println(&quot;No ceiling found!&quot;);\n        }\n    }\n}\n                            </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block\" data-lang=\"python\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"python\" class=\"language-python\">\n# Definition of TreeNode structure\n# for a binary tree node\nclass TreeNode:\n    # Constructor to initialize the node with a\n    # value and set left and right pointers to null\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    # Function to find the ceiling of\n    # a key in a Binary Search Tree (BST)\n    def findCeil(self, root, key):\n        # Initialize the variable\n        # to store the ceiling value\n        ceil = -1\n        \n        # Traverse the BST until reaching\n        # the end or finding the key\n        while root:\n            # If the key is found, assign it\n            # as the ceiling and return\n            if root.val == key:\n                ceil = root.val\n                return ceil\n            \n            # If the key is greater,\n            # move to the right subtree\n            if key &gt; root.val:\n                root = root.right\n            else:\n                # If the key is smaller, update ceil\n                # and move to the left subtree\n                ceil = root.val\n                root = root.left\n        \n        # Return the computed ceiling value\n        return ceil\n\n# Function to perform an in-order traversal\n# of a binary tree and print its nodes\ndef printInOrder(root):\n    # Check if the current node\n    # is null (base case for recursion)\n    if not root:\n        # If null, return and\n        # terminate the function\n        return\n    \n    # Recursively call printInOrder\n    # for the left subtree\n    printInOrder(root.left)\n    \n    # Print the value of the current node\n    print(root.val, end=&quot; &quot;)\n    \n    # Recursively call printInOrder\n    # for the right subtree\n    printInOrder(root.right)\n\n# Creating a BST\nroot = TreeNode(10)\nroot.left = TreeNode(5)\nroot.right = TreeNode(13)\nroot.left.left = TreeNode(3)\nroot.left.left.left = TreeNode(2)\nroot.left.left.right = TreeNode(4)\nroot.left.right = TreeNode(6)\nroot.left.right.right = TreeNode(9)\nroot.right.left = TreeNode(11)\nroot.right.right = TreeNode(14)\n\nprint(&quot;Binary Search Tree:&quot;)\nprintInOrder(root)\nprint()\n\nsolution = Solution()\n\n# Searching for a value in the BST\ntarget = 8\nciel = solution.findCeil(root, target)\n\nif ciel != -1:\n    print(f&quot;Ceiling of {target} is: {ciel}&quot;)\nelse:\n    print(&quot;No ceiling found!&quot;)\n                           </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block\" data-lang=\"javascript\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"javascript\" class=\"language-javascript\">\n// Definition of TreeNode structure\n// for a binary tree node\nclass TreeNode {\n    // Constructor to initialize the node with a\n    // value and set left and right pointers to null\n    constructor(x) {\n        this.val = x;\n        this.left = null;\n        this.right = null;\n    }\n}\n\nclass Solution {\n    // Function to find the ceiling of\n    // a key in a Binary Search Tree (BST)\n    findCeil(root, key) {\n        // Initialize the variable\n        // to store the ceiling value\n        let ceil = -1;\n        \n        // Traverse the BST until reaching\n        // the end or finding the key\n        while(root){\n            // If the key is found, assign it\n            // as the ceiling and return\n            if(root.val === key){\n                ceil = root.val;\n                return ceil;\n            }\n            \n            // If the key is greater,\n            // move to the right subtree\n            if(key &gt; root.val){\n                root = root.right;\n            } else {\n                // If the key is smaller, update ceil\n                // and move to the left subtree\n                ceil = root.val;\n                root = root.left;\n            }\n        }\n        // Return the computed ceiling value\n        return ceil;\n    }\n}\n\n// Function to perform an in-order traversal\n// of a binary tree and print its nodes\nfunction printInOrder(root) {\n    // Check if the current node\n    // is null (base case for recursion)\n    if (root === null) {\n        // If null, return and\n        // terminate the function\n        return;\n    }\n\n    // Recursively call printInOrder\n    // for the left subtree\n    printInOrder(root.left);\n\n    // Print the value of the current node\n    console.log(root.val + &quot; &quot;);\n\n    // Recursively call printInOrder\n    // for the right subtree\n    printInOrder(root.right);\n}\n\n// Creating a BST\nlet root = new TreeNode(10);\nroot.left = new TreeNode(5);\nroot.right = new TreeNode(13);\nroot.left.left = new TreeNode(3);\nroot.left.left.left = new TreeNode(2);\nroot.left.left.right = new TreeNode(4);\nroot.left.right = new TreeNode(6);\nroot.left.right.right = new TreeNode(9);\nroot.right.left = new TreeNode(11);\nroot.right.right = new TreeNode(14);\n\nconsole.log(&quot;Binary Search Tree: &quot;);\nprintInOrder(root);\n\nlet solution = new Solution();\n\n// Searching for a value in the BST\nlet target = 8;\nlet ciel = solution.findCeil(root, target);\n\nif(ciel !== -1){\n    console.log(&quot;Ceiling of &quot; + target + &quot; is: &quot; + ciel);\n} else {\n    console.log(&quot;No ceiling found!&quot;);\n}\n                            </code>\n                        </pre>\n                    </div>\n                    <p>\n                       <strong>Output</strong> \n                      \tBinary Search Tree: 2 3 4 5 6 9 10 11 13 14, Ceiling of 8 is: 9\n                    </p>\n                </div>\n            </details>\n            <details class=\"secondary-details\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Complexity Analysis\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <p>\n                    <!-- Insert Time and Space Complexity  Here -->\n                    <p><strong>Time Complexity: O(log2N)</strong>\n                     where N is the number of nodes in the Binary Search Tree. In the best case scenario, where the tree is balanced, the time complexity is the height of the tree ie. log2N.\n                     In the worst-case scenario, where the tree is degenerate (linear), the time complexity becomes O(n), as it would require traversing all nodes along the path from the root to the leaf.</p>\n\n\t\t\t\t\t<p><strong>Space Complexity: O(1)</strong>   \n\t\t\t\t\tsince the algorithm does not use any additional space or data structures.</p>\n\n                </p>\n            </details>\n        </div>\n    </details>\n</div>\n\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n    <details>\n        <summary class=\"main-summary\">\n            <span>\n                Video Explanation\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"yt-video-wrapper\">\n            <!-- Insert iframe embed Link of Youtube Video-->\n        <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/KSsk8AhdOZA?si=f_oJRBtcUKBdzEEo\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n        </div>\n    </details>\n</div>\n\n<blockquote class=\"wp-block-quote\">\n    Special thanks to <strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268\">Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,<strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\"> please check out this article</a></strong>\n</blockquote>\n\n<script>\n\n    const codeSections = document.querySelectorAll('.code-section');\n\n    // Get last selected language from localStorage or set default value\n    let lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp';\n\n    codeSections.forEach((section, sectionIndex) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n        const copyBtn = section.querySelector('.copy-btn');\n\n        codeTabs.forEach((tab) => {\n            tab.addEventListener('click', () => {\n                codeTabs.forEach((t) => {\n                    t.classList.remove('dsa_article_code_active');\n                });\n                tab.classList.add('dsa_article_code_active');\n\n                const lang = tab.dataset.lang;\n                const activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                codeBlocks.forEach((block) => {\n                    if (block === activeBlock) {\n                        block.classList.add('dsa_article_code_active');\n                    } else {\n                        block.classList.remove('dsa_article_code_active');\n                    }\n                });\n\n                // Update last selected language for all sections and store in localStorage\n                lastSelectedLanguage = lang;\n                localStorage.setItem('lastSelectedLanguage', lang);\n                codeSections.forEach((otherSection, otherIndex) => {\n                    if (otherIndex !== sectionIndex) {\n                        const otherTabs = otherSection.querySelectorAll('.code-tab');\n                        otherTabs.forEach((otherTab) => {\n                            if (otherTab.dataset.lang === lang) {\n                                otherTab.classList.add('dsa_article_code_active');\n                            } else {\n                                otherTab.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                        const otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                        const otherCodeBlocks = otherSection.querySelectorAll('.code-block');\n                        otherCodeBlocks.forEach((block) => {\n                            if (block === otherActiveBlock) {\n                                block.classList.add('dsa_article_code_active');\n                            } else {\n                                block.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                    }\n                });\n            });\n        });\n\n        // Handle copy button click event\n        copyBtn.addEventListener('click', () => {\n            const activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\n            navigator.clipboard.writeText(activeBlock.innerText);\n            copyBtn.classList.add('dsa_article_code_active');\n            setTimeout(() => {\n                copyBtn.classList.remove('dsa_article_code_active');\n            }, 1000);\n        });\n    });\n\n    // Set initial state of the tabs\n    codeSections.forEach((section) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n\n        codeTabs.forEach((tab) => {\n            if (tab.dataset.lang === lastSelectedLanguage) {\n                tab.classList.add('dsa_article_code_active');\n            } else {\n                tab.classList.remove('dsa_article_code_active');\n            }\n        });\n\n        codeBlocks.forEach((block) => {\n            if (block.dataset.lang === lastSelectedLanguage) {\n                block.classList.add('dsa_article_code_active');\n            } else {\n                block.classList.remove('dsa_article_code_active');\n            }\n        });\n    });\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>"
}