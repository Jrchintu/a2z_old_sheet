{
    "dislikes": 0,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:09:38 GMT+0530 (India Standard Time)",
    "slug": "implement-trie-1",
    "aid": "1544",
    "title": "Implement Trie - 1",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/trie-implementation-and-operations",
    "topics": [
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "trie",
            "topic-title": "Trie"
        }
    ],
    "content": "<p><strong>Problem Statement: </strong>Implement a Trie Data Structure which supports the following three operations:\n<ol><li>Search (word): To check if the string `word` is present in the Trie or not.</li><li>Insert (word): To insert a string `word` in the Trie.</li><li>Start With(word): To check if there is a string that has the prefix `word`.</li></ol></p>\n<p>\nTrie is a data structure that is like a tree data structure in its organisation. It consists of nodes that store letters or alphabets of words, which can be added, retrieved, and deleted from it in a very efficient way.</p>\n<p>\nIn other words, Trie is an information retrieval data structure, which can beat naive data structures like Hashmap, Tree, etc in the time complexity of its operations.\n\n</p>\n<div id=\"article_examples\">\n    <details class=\"article_example_details\">\n        <summary class=\"article_example_summary\">\n            <span><strong>\n                    Examples\n                </strong>\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"atricle_example_content\">\n            <pre class=\"wp-block-preformatted\">\n                <span><strong>Example 1:</strong></span>\n\t\t\t\t<span><strong>Input:</strong></span>\n\t\t\t\t<span>Insert: \u2018apple\u2019, \u2018apps\u2019, \u2018apxl\u2019</span>\n\t\t\t\t<span>Search word: \u2018app\u2019, \u2018appy\u2019</span>\n\t\t\t\t<span>Search prefix: \u2018app\u2019</span>\n\t\t\t\t\n\t\t\t\t<span><strong>Output: </strong></span>\n\t\t\t\t<span>Inserted \u2018apple\u2019, Inserted \u2018apps\u2019,Inserted, \u2018apxl\u2019.</span>\n\t\t\t\t<span>Words \u2018app\u2019 and \u2018appy\u2019 do not exist in Trie.</span>\n\t\t\t\t<span>Prefix \u2018app\u2019 exists in the Trie.</span>\n\t\t\n\t\t\t\t<span><strong>Explanation: </strong>Insert Operations: \u201capple\u201d, \u201capps\u201d and \u201capxl\u201d are inserted. </span>\n\t\t\t\t<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/implement-trie-i-image1-B50Mqjzt\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n\t\t\t\t<span>Search Operations: \u201cappy\u201d, \u201capp\u201d</span>\n\t\t\t\t<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/implement-trie-i-image2-tfjkzgo8\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n\t\t\t\t<span>Search Prefix Operations: \u201capp\u201d</span>\n\t\t\t\t<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/implement-trie-i-image3-KFFHIGYT\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n\t\t\t\t\n\t\t\t\t\t\n            </pre>\n        </div>\n    </details>\n</div>\n\n<!-- This is Practice Section-->\n<div class=\"practice\">\n    <span><strong>Practice: </strong></span>\n    <div class=\"problem-buttons\">\n\n        <!-- Add Problem Link inside href -->\n        <a href=\"https://www.codingninjas.com/studio/problems/trie-implementation_1062581?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf\" target=\"_blank\" rel=\"noopener\">\n            <span>Solve Problem</span>\n            <img src=\"https://takeuforward-content-images.s3.ap-south-1.amazonaws.com/content/Group-11-5-pFOq-8ga\"\n                alt=\"code-studio\">\n        </a>\n    </div>\n    <!--<div class=\"problem-buttons\">\n         Add Problem Link inside href \n        <a href=\"\" target=\"_blank\" rel=\"noopener\">\n            <span>Solve Problem</span>\n            <img src=\"https://cdn.iconscout.com/icon/free/png-256/free-leetcode-3521542-2944960.png?f=webp\"\n                alt=\"leetcode\">\n        </a>\n    </div>-->\n</div>\n\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\n        yourself first. </em></p>\n\n\n<div id=\"brute-force-approach\">\n    <details>\n        <summary class=\"main-summary\">\n            <span>\n                Optimal Approach \n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                </path>\n            </svg>\n        </summary>\n        <div class=\"common-drops\">\n            <details class=\"secondary-details\" open=\"\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Algorithm / Intuition\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <div class=\"approach-algorithm\">\n                    <!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n                    \n                    <p>The Trie data structure is used to efficiently store and retrieve a set of strings.</p>\n                    <p>It organises strings such that common prefixes are shared among strings, making operations like searching for words with a given prefix efficient. Trie allows for quick retrieval of all strings with a given prefix, making it highly efficient for autocomplete and predictive text applications.</p>\n                    <p>A Trie node is a data structure used to construct Trie. Each node contains the following components:</p>\n                    <ol><li>Links to Child Nodes: A Trie node contains an array of pointers called \u201clinks\u201d or \u201cpointer to children\u201d for each letter of the lowercase alphabet.\n                    These pointers represent connections to child nodes corresponding to each letter of the alphabet. For instance, the link at index 0 corresponds to the child node representing the letter 'a', the link at index 1 corresponds to 'b', and so forth.</li><li>Flag for End of Word: Each Trie node contains a boolean flag indicating whether the node marks the end of a word. This flag is essential for distinguishing between prefixes and complete words stored in the Trie.</li></ol></p>\n                    <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/implement-trie-i-image4-GeH_0wf9\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n                    <p>Each node in the trie nodes support several operations:\n                    <ol><li>Contains Key: This operation checks whether a specific letter (or key) exists as a child node of the current Trie node. It returns true if the letter is present, indicating a valid path in the Trie.</li><li>Get Child Node: Given a letter, this operation retrieves the corresponding child node of the current Trie node. If the letter is present, it returns the pointer to the child node; otherwise, it returns nullptr, signifying the absence of the letter.</li><li>Put Child Node: This operation establishes a connection between the current Trie node and a child node representing a particular letter. It sets the link at the corresponding index to point to the provided child node.</li><li>Set End Flag: Marks the current Trie node as the end of a word. This flag is crucial for determining whether a string stored in the Trie terminates at this node, indicating a complete word.</li><li>Is End of Word: Checks whether the current Trie node signifies the end of a word by examining the end flag. It returns true if the node marks the end of a word; otherwise, it returns false.</li></ol></p>\n                    <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/implement-trie-i-image5-8HtDJqUi\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n                    \n\n                    <h3>Algorithm 1: To Insert a Node in the Trie:</h3>\n                    <p><strong>Step 1:</strong>Start at the root node.</p>\n                   \n                    <p><strong>Step 2: </strong>For each character in the word:\n                    <ol><li>Check if the current node has a child node corresponding to the character.</li><li>If not, create a new node and link it as a child of the current node.</li><li>Move to the child node corresponding to the character.</li></ol></p> \n                   \t\n                    <p><strong>Step 3: </strong>\n                    Once all characters are inserted, mark the end of the word by setting the flag of the last node to true. </p>\n                    <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/implement-trie-i-image6-vlbmpOd1\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure> \n\n                    <h3>Algorithm 2: To Search for a word in the Trie:</h3>\n                    <p><strong>Step 1:</strong>Start at the root node.</p>\n                   \n                    <p><strong>Step 2: </strong>For each character in the word:\n                    <ol><li>Check if the current node has a child node corresponding to the character.</li><li>If not, the word is not in the Trie.</li><li>Move to the child node corresponding to the character.</li></ol></p> \n                   \t\n                    <p><strong>Step 3: </strong>\n                    After processing all characters, check if the flag of the last node is set to true. If yes, the word is found; otherwise, it is not.</p>\n                    <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/implement-trie-i-image7-16mtxqA-\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure> \n\n                    <h3>Algorithm 3: Check if Trie contains prefix:</h3>\n                    <p><strong>Step 1:</strong>Start at the root node.</p>\n                   \n                    <p><strong>Step 2: </strong>For each character in the prefix:\n                    <ol><li>Check if the current node has a child node corresponding to the character.</li><li>If not, there is no word with the given prefix.</li><li>Move to the child node corresponding to the character.</li></ol></p> \n                   \t\n                    <p><strong>Step 3: </strong>\n                    If all characters of the prefix are found, return true indicating the existence of words with the given prefix.</p>\n                    <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/implement-trie-i-image8-FHjjBPn7\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure> \n                              \n                </div>\n            </details>\n            <details class=\"code-section secondary-details\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Code\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <div class=\"code-tabs\">\n                    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n                    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n                    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n                    <button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n                    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\"\n                        xmlns=\"http://www.w3.org/2000/svg\">\n                        <path\n                            d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n                        </path>\n                    </svg>\n                </div>\n                <div class=\"code-content\">\n                    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;iostream&gt;\nusing namespace std;\n\n// Node structure for Trie\nstruct Node {\n    // Array to store links to child nodes,\n    // each index represents a letter\n    Node* links[26];\n    // Flag indicating if the node\n    // marks the end of a word\n    bool flag = false;\n\n    // Check if the node contains\n    // a specific key (letter)\n    bool containsKey(char ch) {\n        return links[ch - 'a'] != NULL;\n    }\n\n    // Insert a new node with a specific\n    // key (letter) into the Trie\n    void put(char ch, Node* node) {\n        links[ch - 'a'] = node;\n    }\n\n    // Get the node with a specific\n    // key (letter) from the Trie\n    Node* get(char ch) {\n        return links[ch - 'a'];\n    }\n\n    // Set the current node\n    // as the end of a word\n    void setEnd() {\n        flag = true;\n    }\n\n    // Check if the current node\n    // marks the end of a word\n    bool isEnd() {\n        return flag;\n    }\n};\n\n// Trie class\nclass Trie {\nprivate:\n    Node* root;\n\npublic:\n    // Constructor to initialize the\n    // Trie with an empty root node\n    Trie() {\n        root = new Node();\n    }\n\n    // Inserts a word into the Trie\n    // Time Complexity O(len), where len\n    // is the length of the word\n    void insert(string word) {\n        Node* node = root;\n        for (int i = 0; i &lt; word.length(); i++) {\n            if (!node-&gt;containsKey(word[i])) {\n                // Create a new node for\n                // the letter if not present\n                node-&gt;put(word[i], new Node());\n            }\n            // Move to the next node\n            node = node-&gt;get(word[i]);\n        }\n        // Mark the end of the word\n        node-&gt;setEnd();\n    }\n\n    // Returns if the word\n    // is in the trie\n    bool search(string word) {\n        Node* node = root;\n        for (int i = 0; i &lt; word.length(); i++) {\n            if (!node-&gt;containsKey(word[i])) {\n                // If a letter is not found,\n                // the word is not in the Trie\n                return false;\n            }\n            // Move to the next node\n            node = node-&gt;get(word[i]);\n        }\n        // Check if the last node\n        // marks the end of a word\n        return node-&gt;isEnd();\n    }\n\n    // Returns if there is any word in the\n    // trie that starts with the given prefix\n    bool startsWith(string prefix) {\n        Node* node = root;\n        for (int i = 0; i &lt; prefix.length(); i++) {\n            if (!node-&gt;containsKey(prefix[i])) {\n                // If a letter is not found, there is\n                // no word with the given prefix\n                return false;\n            }\n            // Move to the next node\n            node = node-&gt;get(prefix[i]);\n        }\n        // The prefix is found in the Trie\n        return true;\n    }\n};\n\n\nint main() {\n    Trie trie;\n    cout &lt;&lt; &quot;Inserting words: Striver, Striving, String, Strike&quot; &lt;&lt; endl;\n    trie.insert(&quot;striver&quot;);\n    trie.insert(&quot;striving&quot;);\n    trie.insert(&quot;string&quot;);\n    trie.insert(&quot;strike&quot;);\n    \n    cout &lt;&lt; &quot;Search if Strawberry exists in trie: &quot; &lt;&lt;\n    (trie.search(&quot;strawberry&quot;) ? &quot;True&quot; : &quot;False&quot;)&lt;&lt; endl;\n    \n    cout &lt;&lt; &quot;Search if Strike exists in trie: &quot; &lt;&lt;\n   ( trie.search(&quot;strike&quot;) ? &quot;True&quot; : &quot;False&quot; )&lt;&lt; endl;\n    \n    cout &lt;&lt; &quot;If words is Trie start with Stri: &quot; &lt;&lt;\n    (trie.startsWith(&quot;stri&quot;) ? &quot;True&quot; : &quot;False&quot; )&lt;&lt; endl;\n\n    return 0;\n}\n                            </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block \" data-lang=\"java\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"java\" class=\"language-java\">\npublic class Trie {\n\n    // Node structure for Trie\n    static class Node {\n        // Array to store links to child nodes,\n        // each index represents a letter\n        Node[] links = new Node[26];\n        // Flag indicating if the node\n        // marks the end of a word\n        boolean flag = false;\n\n        // Check if the node contains\n        // a specific key (letter)\n        boolean containsKey(char ch) {\n            return links[ch - 'a'] != null;\n        }\n\n        // Insert a new node with a specific\n        // key (letter) into the Trie\n        void put(char ch, Node node) {\n            links[ch - 'a'] = node;\n        }\n\n        // Get the node with a specific\n        // key (letter) from the Trie\n        Node get(char ch) {\n            return links[ch - 'a'];\n        }\n\n        // Set the current node\n        // as the end of a word\n        void setEnd() {\n            flag = true;\n        }\n\n        // Check if the current node\n        // marks the end of a word\n        boolean isEnd() {\n            return flag;\n        }\n    }\n\n    // Trie class\n    private Node root;\n\n    // Constructor to initialize the\n    // Trie with an empty root node\n    public Trie() {\n        root = new Node();\n    }\n\n    // Inserts a word into the Trie\n    // Time Complexity O(len), where len\n    // is the length of the word\n    public void insert(String word) {\n        Node node = root;\n        for (int i = 0; i &lt; word.length(); i++) {\n            if (!node.containsKey(word.charAt(i))) {\n                // Create a new node for\n                // the letter if not present\n                node.put(word.charAt(i), new Node());\n            }\n            // Move to the next node\n            node = node.get(word.charAt(i));\n        }\n        // Mark the end of the word\n        node.setEnd();\n    }\n\n    // Returns if the word\n    // is in the trie\n    public boolean search(String word) {\n        Node node = root;\n        for (int i = 0; i &lt; word.length(); i++) {\n            if (!node.containsKey(word.charAt(i))) {\n                // If a letter is not found,\n                // the word is not in the Trie\n                return false;\n            }\n            // Move to the next node\n            node = node.get(word.charAt(i));\n        }\n        // Check if the last node\n        // marks the end of a word\n        return node.isEnd();\n    }\n\n    // Returns if there is any word in the\n    // trie that starts with the given prefix\n    public boolean startsWith(String prefix) {\n        Node node = root;\n        for (int i = 0; i &lt; prefix.length(); i++) {\n            if (!node.containsKey(prefix.charAt(i))) {\n                // If a letter is not found, there is\n                // no word with the given prefix\n                return false;\n            }\n            // Move to the next node\n            node = node.get(prefix.charAt(i));\n        }\n        // The prefix is found in the Trie\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Trie trie = new Trie();\n        System.out.println(&quot;Inserting words: Striver, Striving, String, Strike&quot;);\n        trie.insert(&quot;striver&quot;);\n        trie.insert(&quot;striving&quot;);\n        trie.insert(&quot;string&quot;);\n        trie.insert(&quot;strike&quot;);\n\n        System.out.println(&quot;Search if Strawberry exists in trie: &quot; +\n                (trie.search(&quot;strawberry&quot;) ? &quot;True&quot; : &quot;False&quot;));\n\n        System.out.println(&quot;Search if Strike exists in trie: &quot; +\n                (trie.search(&quot;strike&quot;) ? &quot;True&quot; : &quot;False&quot;));\n\n        System.out.println(&quot;If words in Trie start with Stri: &quot; +\n                (trie.startsWith(&quot;stri&quot;) ? &quot;True&quot; : &quot;False&quot;));\n    }\n}\n                            </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block\" data-lang=\"python\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"python\" class=\"language-python\">\nclass Node:\n    def __init__(self):\n        # Array to store links to child nodes,\n        # each index represents a letter\n        self.links = [None] * 26\n        # Flag indicating if the node\n        # marks the end of a word\n        self.flag = False\n\n    # Check if the node contains\n    # a specific key (letter)\n    def containsKey(self, ch):\n        return self.links[ord(ch) - ord('a')] is not None\n\n    # Insert a new node with a specific\n    # key (letter) into the Trie\n    def put(self, ch, node):\n        self.links[ord(ch) - ord('a')] = node\n\n    # Get the node with a specific\n    # key (letter) from the Trie\n    def get(self, ch):\n        return self.links[ord(ch) - ord('a')]\n\n    # Set the current node\n    # as the end of a word\n    def setEnd(self):\n        self.flag = True\n\n    # Check if the current node\n    # marks the end of a word\n    def isEnd(self):\n        return self.flag\n\n\nclass Trie:\n    def __init__(self):\n        # Constructor to initialize the\n        # Trie with an empty root node\n        self.root = Node()\n\n    # Inserts a word into the Trie\n    # Time Complexity O(len), where len\n    # is the length of the word\n    def insert(self, word):\n        node = self.root\n        for ch in word:\n            if not node.containsKey(ch):\n                # Create a new node for\n                # the letter if not present\n                node.put(ch, Node())\n            # Move to the next node\n            node = node.get(ch)\n        # Mark the end of the word\n        node.setEnd()\n\n    # Returns if the word\n    # is in the trie\n    def search(self, word):\n        node = self.root\n        for ch in word:\n            if not node.containsKey(ch):\n                # If a letter is not found,\n                # the word is not in the Trie\n                return False\n            # Move to the next node\n            node = node.get(ch)\n        # Check if the last node\n        # marks the end of a word\n        return node.isEnd()\n\n    # Returns if there is any word in the\n    # trie that starts with the given prefix\n    def startsWith(self, prefix):\n        node = self.root\n        for ch in prefix:\n            if not node.containsKey(ch):\n                # If a letter is not found, there is\n                # no word with the given prefix\n                return False\n            # Move to the next node\n            node = node.get(ch)\n        # The prefix is found in the Trie\n        return True\n\n\nif __name__ == &quot;__main__&quot;:\n    trie = Trie()\n    print(&quot;Inserting words: Striver, Striving, String, Strike&quot;)\n    trie.insert(&quot;striver&quot;)\n    trie.insert(&quot;striving&quot;)\n    trie.insert(&quot;string&quot;)\n    trie.insert(&quot;strike&quot;)\n\n    print(&quot;Search if Strawberry exists in trie: &quot; +\n          (&quot;True&quot; if trie.search(&quot;strawberry&quot;) else &quot;False&quot;))\n\n    print(&quot;Search if Strike exists in trie: &quot; +\n          (&quot;True&quot; if trie.search(&quot;strike&quot;) else &quot;False&quot;))\n\n    print(&quot;If words in Trie start with Stri: &quot; +\n          (&quot;True&quot; if trie.startsWith(&quot;stri&quot;) else &quot;False&quot;))\n                           </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block\" data-lang=\"javascript\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"javascript\" class=\"language-javascript\">\n// Node structure for Trie\nclass Node {\n    constructor() {\n        // Array to store links to child nodes,\n        // each index represents a letter\n        this.links = new Array(26);\n        // Flag indicating if the node\n        // marks the end of a word\n        this.flag = false;\n    }\n\n    // Check if the node contains\n    // a specific key (letter)\n    containsKey(ch) {\n        return this.links[ch.charCodeAt(0) - 'a'.charCodeAt(0)] !== undefined;\n    }\n\n    // Insert a new node with a specific\n    // key (letter) into the Trie\n    put(ch, node) {\n        this.links[ch.charCodeAt(0) - 'a'.charCodeAt(0)] = node;\n    }\n\n    // Get the node with a specific\n    // key (letter) from the Trie\n    get(ch) {\n        return this.links[ch.charCodeAt(0) - 'a'.charCodeAt(0)];\n    }\n\n    // Set the current node\n    // as the end of a word\n    setEnd() {\n        this.flag = true;\n    }\n\n    // Check if the current node\n    // marks the end of a word\n    isEnd() {\n        return this.flag;\n    }\n}\n\n// Trie class\nclass Trie {\n    constructor() {\n        // Constructor to initialize the\n        // Trie with an empty root node\n        this.root = new Node();\n    }\n\n    // Inserts a word into the Trie\n    // Time Complexity O(len), where len\n    // is the length of the word\n    insert(word) {\n        let node = this.root;\n        for (let i = 0; i &lt; word.length; i++) {\n            if (!node.containsKey(word[i])) {\n                // Create a new node for\n                // the letter if not present\n                node.put(word[i], new Node());\n            }\n            // Move to the next node\n            node = node.get(word[i]);\n        }\n        // Mark the end of the word\n        node.setEnd();\n    }\n\n    // Returns if the word\n    // is in the trie\n    search(word) {\n        let node = this.root;\n        for (let i = 0; i &lt; word.length; i++) {\n            if (!node.containsKey(word[i])) {\n                // If a letter is not found,\n                // the word is not in the Trie\n                return false;\n            }\n            // Move to the next node\n            node = node.get(word[i]);\n        }\n        // Check if the last node\n        // marks the end of a word\n        return node.isEnd();\n    }\n\n    // Returns if there is any word in the\n    // trie that starts with the given prefix\n    startsWith(prefix) {\n        let node = this.root;\n        for (let i = 0; i &lt; prefix.length; i++) {\n            if (!node.containsKey(prefix[i])) {\n                // If a letter is not found, there is\n                // no word with the given prefix\n                return false;\n            }\n            // Move to the next node\n            node = node.get(prefix[i]);\n        }\n        // The prefix is found in the Trie\n        return true;\n    }\n}\n\n// Main function\nfunction main() {\n    const trie = new Trie();\n    console.log(&quot;Inserting words: Striver, Striving, String, Strike&quot;);\n    trie.insert(&quot;striver&quot;);\n    trie.insert(&quot;striving&quot;);\n    trie.insert(&quot;string&quot;);\n    trie.insert(&quot;strike&quot;);\n    \n    console.log(&quot;Search if Strawberry exists in trie: &quot; +\n    (trie.search(&quot;strawberry&quot;) ? &quot;True&quot; : &quot;False&quot;));\n    \n    console.log(&quot;Search if Strike exists in trie: &quot; +\n   ( trie.search(&quot;strike&quot;) ? &quot;True&quot; : &quot;False&quot; ));\n    \n    console.log(&quot;If words in Trie start with Stri: &quot; +\n    (trie.startsWith(&quot;stri&quot;) ? &quot;True&quot; : &quot;False&quot;));\n}\n\n// Execute main function\nmain();\n                            </code>\n                        </pre>\n                    </div>\n                    <p>\n                       <strong>Output</strong> \n                    </p>\n                    <p>Inserting words: Striver, Striving, String, Strike</p>\n                    <p>Search if Strawberry exists in Trie: False</p>\n                    <p>Search if Strike exists in Trie: True</p>\n                    <p>If words in Trie start with Stri: True</p>\n                </div>\n            </details>\n            <details class=\"secondary-details\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Complexity Analysis\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <p>\n                    <!-- Insert Time and Space Complexity  Here -->\n                    <p><strong>Time Complexity:</strong>\n                    <ol><li>Insertion: O(N) where N is the length of the word being inserted. This is because we have to iterate over each letter of the word to find its corresponding node or create a node accordingly.</li>\n                    <li>Search: O(N) where N is the length of the word being searched for. This is because in Trie search we traverse over each letter for the word from the root, checking if the current node contains a node at the index of the next letter. This process repeats until we reach the end of the word or encounter a node without the next letter.</li><li>Prefix Search: O(N) where N is the length of the prefix being searched for. Similar to searching for words, in prefix search we also iterate over each letter of the word to find its corresponding node.</li></ol></p>\n\n\t\t\t\t\t<p><strong>Space Complexity: O(N)</strong>   \n\t\t\t\t\twhere N is the total number of characters across all unique words inserted into the Trie. For each character in a word, a new node may need to be created leading to space proportional to the number of characters.</p>\n\n                </p>\n            </details>\n        </div>\n    </details>\n</div>\n\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n    <details>\n        <summary class=\"main-summary\">\n            <span>\n                Video Explanation\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"yt-video-wrapper\">\n            <!-- Insert iframe embed Link of Youtube Video-->\n        <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/dBGUmUQhjaM?si=X8mi54NCvUe_mmqn\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n        </div>\n    </details>\n</div>\n\n<blockquote class=\"wp-block-quote\">\n    Special thanks to <strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268\">Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,<strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\"> please check out this article</a></strong>\n</blockquote>\n\n<script>\n\n    const codeSections = document.querySelectorAll('.code-section');\n\n    // Get last selected language from localStorage or set default value\n    let lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp';\n\n    codeSections.forEach((section, sectionIndex) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n        const copyBtn = section.querySelector('.copy-btn');\n\n        codeTabs.forEach((tab) => {\n            tab.addEventListener('click', () => {\n                codeTabs.forEach((t) => {\n                    t.classList.remove('dsa_article_code_active');\n                });\n                tab.classList.add('dsa_article_code_active');\n\n                const lang = tab.dataset.lang;\n                const activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                codeBlocks.forEach((block) => {\n                    if (block === activeBlock) {\n                        block.classList.add('dsa_article_code_active');\n                    } else {\n                        block.classList.remove('dsa_article_code_active');\n                    }\n                });\n\n                // Update last selected language for all sections and store in localStorage\n                lastSelectedLanguage = lang;\n                localStorage.setItem('lastSelectedLanguage', lang);\n                codeSections.forEach((otherSection, otherIndex) => {\n                    if (otherIndex !== sectionIndex) {\n                        const otherTabs = otherSection.querySelectorAll('.code-tab');\n                        otherTabs.forEach((otherTab) => {\n                            if (otherTab.dataset.lang === lang) {\n                                otherTab.classList.add('dsa_article_code_active');\n                            } else {\n                                otherTab.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                        const otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                        const otherCodeBlocks = otherSection.querySelectorAll('.code-block');\n                        otherCodeBlocks.forEach((block) => {\n                            if (block === otherActiveBlock) {\n                                block.classList.add('dsa_article_code_active');\n                            } else {\n                                block.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                    }\n                });\n            });\n        });\n\n        // Handle copy button click event\n        copyBtn.addEventListener('click', () => {\n            const activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\n            navigator.clipboard.writeText(activeBlock.innerText);\n            copyBtn.classList.add('dsa_article_code_active');\n            setTimeout(() => {\n                copyBtn.classList.remove('dsa_article_code_active');\n            }, 1000);\n        });\n    });\n\n    // Set initial state of the tabs\n    codeSections.forEach((section) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n\n        codeTabs.forEach((tab) => {\n            if (tab.dataset.lang === lastSelectedLanguage) {\n                tab.classList.add('dsa_article_code_active');\n            } else {\n                tab.classList.remove('dsa_article_code_active');\n            }\n        });\n\n        codeBlocks.forEach((block) => {\n            if (block.dataset.lang === lastSelectedLanguage) {\n                block.classList.add('dsa_article_code_active');\n            } else {\n                block.classList.remove('dsa_article_code_active');\n            }\n        });\n    });\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>",
    "category_tag": "data-structure",
    "likes": 133,
    "preview": "Problem Statement: Implement a Trie Data Structure which supports the following three operations: 1. Search (word): To check if the string `word` is present in the Trie or not. 2. Insert (word): To..."
}