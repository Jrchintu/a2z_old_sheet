{
    "dislikes": 3,
    "video": "9twcmtQj4DU",
    "publishedOn": "Sun Mar 24 2024 22:11:42 GMT+0530 (India Standard Time)",
    "slug": "detect-cycle-in-a-directed-graph-using-dfs-g-19",
    "aid": "2143",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/detect-a-cycle-in-a-directed-graph",
    "title": "Detect cycle in a directed graph (using DFS) : G 19",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "graph",
            "topic-title": "Graph"
        }
    ],
    "likes": 108,
    "category_tag": "data-structure",
    "preview": "Problem Statement: Given a directed graph with V vertices and E edges, check whether it contains any cycle or not. Example 1: Input: N = 10, E = 11 Output: true Explanation: 8->9->10 is a cycle. Ex...",
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement:</strong> Given a directed graph with V vertices and E edges, check whether it contains any cycle or not.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Example 1:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<p></p><pre><p><strong>Input</strong>: N = 10, E = 11</p>\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2022/10/image.png\" alt=\"\" class=\"wp-image-6688\"></figure>\n<p><strong>Output</strong>: true</p>\n<p><strong>Explanation</strong>: 8-&gt;9-&gt;10 is a cycle.</p>\n</pre><p></p>\n<!-- /wp:html -->\n\n<!-- wp:paragraph -->\n<p><strong>Example 2</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<p></p><pre><p><strong>Input Format</strong>: N = 10, E = 10</p>\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2022/10/image-1.png\" alt=\"\" class=\"wp-image-6689\"></figure>\n<p><strong>Result</strong>: false</p>\n<p><strong>Explanation</strong>: No cycle detected.</p>\n</pre><p></p>\n<!-- /wp:html -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Solution</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"textColor\":\"accent\"} -->\n<p class=\"has-accent-color has-text-color\"><strong><em>Disclaimer</em></strong>: <em>Don't jump directly to the solution, try it out yourself first.</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Intuition: </strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In a <a href=\"https://takeuforward.org/graph/introduction-to-graph/\"><strong>Directed Cyclic Graph</strong></a>, during traversal, if we end up at a node, which we have visited previously in the path, that means we came around a circle and ended up at this node, which determines that it has a cycle.&nbsp;Previously, we have learned a similar technique to <a href=\"https://takeuforward.org/data-structure/detect-cycle-in-an-undirected-graph-using-dfs/\"><strong><em>detect cycles in an Undirected Graph (using DFS)</em></strong></a>. In that method, the algorithm returns true, if it finds an adjacent node that is previously visited and not a parent of the current node. But the same algorithm will not work in this case. Let\u2019s understand why this happens considering the below graph.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":6690,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2022/10/image-2.png\" alt=\"\" class=\"wp-image-6690\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:list -->\n<ul><li>You can also look at the GIF below, in case you fail to understand the below points.&nbsp;</li><li>Let\u2019s start <a href=\"https://takeuforward.org/data-structure/depth-first-search-dfs/\">DFS</a> from node 1. It will follow the path 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6, all the nodes including 5 will be visited as marked.&nbsp;</li><li>As there are no further nodes after node 6, DFS will backtrack to node 3 and will follow the path: 3-&gt;7-&gt;5-&gt;6. It followed this path because this path was left to be explored.&nbsp;</li><li>Reaching node 7, the adjacent node 5 can be found previously visited, but ideally, it should not have been visited, as we did not visit this node in a continuous path. At this point, the algorithm will conclude that this is a cycle and will return true but this is not a cycle as node 5 has been visited twice following two different paths.</li><li>This would have been true if the nodes are connected to undirected edges. But as we are dealing with directed edges this algorithm fails to detect a cycle.&nbsp;</li><li>Due to the above reason, we need to think of an algorithm, which keeps a track of visited nodes, in the traversal only.&nbsp;</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>The process will be similar as illustrated.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":6712,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2022/10/g-19-final-gif-1.gif\" alt=\"\" class=\"wp-image-6712\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>So the intuition is to reach a previously visited node again on the same path. If it can be done, we conclude that the graph has a cycle.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>Note:</em></strong> <em>If a directed graph contains a cycle, the node has to be visited again on the same path and not through different paths.</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Approach:</strong>&nbsp;&nbsp;</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Consider the following graph:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":6691,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2022/10/image-3.png\" alt=\"\" class=\"wp-image-6691\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>We will be solving it using DFS traversal. DFS goes in-depth, i.e., traverses all nodes by going ahead, and when there are no further nodes to traverse in the current path, then it backtracks on the same path and traverses other unvisited nodes.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The algorithm steps are as follows:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li>We will traverse the graph component-wise using the DFS technique.&nbsp;</li><li>Make sure to carry two visited arrays in the DFS call. One is a visited array(vis) and the other is a path-visited(pathVis) array. The visited array keeps a track of visited nodes, and the path-visited keeps a track of visited nodes in the current traversal only.&nbsp;</li><li>While making a DFS call, at first we will mark the node as visited in both the arrays and then will traverse through its adjacent nodes. Now, there may be either of the three cases:<ol><li>Case 1: If the adjacent node is not visited, we will make a new DFS call recursively with that particular node.</li><li>Case 2: If the adjacent node is visited and also on the same path(i.e marked visited in the pathVis array), we will return true, because it means it has a cycle, thereby the pathVis was true. Returning true will mean the end of the function call, as once we have got a cycle, there is no need to check for further adjacent nodes.&nbsp;</li><li>Case 3: If the adjacent node is visited but not on the same path(i.e not marked in the pathVis array), we will continue to the next adjacent node, as it would have been marked as visited in some other path, and not on the current one.</li></ol></li><li>Finally, if there are no further nodes to visit, we will unmark the current node in the pathVis array and just return false. Then we will backtrack to the previous node with the returned value. The point to remember is, while we enter we mark both the pathVis and vis as true, but at the end of traversal to all adjacent nodes, we just make sure we unmark the pathVis and still keep the vis marked as true, as it will avoid future extra traversal calls.&nbsp;</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>The following illustration will be useful in understanding the algorithm:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":6713,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2022/10/g-19-final-gif-2.gif\" alt=\"\" class=\"wp-image-6713\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    \n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nclass Solution {\nprivate:\n\tbool dfsCheck(int node, vector&lt;int&gt; adj[], int vis[], int pathVis[]) {\n\t\tvis[node] = 1;\n\t\tpathVis[node] = 1;\n\n\t\t// traverse for adjacent nodes\n\t\tfor (auto it : adj[node]) {\n\t\t\t// when the node is not visited\n\t\t\tif (!vis[it]) {\n\t\t\t\tif (dfsCheck(it, adj, vis, pathVis) == true)\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t\t// if the node has been previously visited\n\t\t\t// but it has to be visited on the same path\n\t\t\telse if (pathVis[it]) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\tpathVis[node] = 0;\n\t\treturn false;\n\t}\npublic:\n\t// Function to detect cycle in a directed graph.\n\tbool isCyclic(int V, vector&lt;int&gt; adj[]) {\n\t\tint vis[V] = {0};\n\t\tint pathVis[V] = {0};\n\n\t\tfor (int i = 0; i &lt; V; i++) {\n\t\t\tif (!vis[i]) {\n\t\t\t\tif (dfsCheck(i, adj, vis, pathVis) == true) return true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n};\n\n\nint main() {\n\n\t// V = 11, E = 11;\n\tvector&lt;int&gt; adj[11] = {{}, {2}, {3}, {4, 7}, {5}, {6}, {}, {5}, {9}, {10}, {8}};\n\tint V = 11;\n\tSolution obj;\n\tbool ans = obj.isCyclic(V, adj);\n\n\tif (ans)\n\t\tcout &lt;&lt; \"True\\n\";\n\telse\n\t\tcout &lt;&lt; \"False\\n\";\n\n\treturn 0;\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> True</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O(V+E)+O(V) , where V = no. of nodes and E = no. of edges. There can be at most V components. So, another O(V) time complexity.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(2N) + O(N) ~ O(2N): O(2N) for two visited arrays and O(N) for recursive stack space.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\n\n\nclass Solution {\n    private boolean dfsCheck(int node, ArrayList&lt;ArrayList&lt;Integer&gt;&gt; adj, int vis[], int pathVis[]) {\n        vis[node] = 1; \n        pathVis[node] = 1; \n        \n        // traverse for adjacent nodes \n        for(int it : adj.get(node)) {\n            // when the node is not visited \n            if(vis[it] == 0) {\n                if(dfsCheck(it, adj, vis, pathVis) == true) \n                    return true; \n            }\n            // if the node has been previously visited\n            // but it has to be visited on the same path \n            else if(pathVis[it] == 1) {\n                return true; \n            }\n        }\n        \n        pathVis[node] = 0; \n        return false; \n    }\n\n    // Function to detect cycle in a directed graph.\n    public boolean isCyclic(int V, ArrayList&lt;ArrayList&lt;Integer&gt;&gt; adj) {\n        int vis[] = new int[V];\n        int pathVis[] = new int[V];\n        \n        for(int i = 0;i&lt;V;i++) {\n            if(vis[i] == 0) {\n                if(dfsCheck(i, adj, vis, pathVis) == true) return true; \n            }\n        }\n        return false; \n    }\n}\n\npublic class tUf {\n    public static void main(String[] args) {\n        int V = 11;\n        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; adj = new ArrayList&lt;&gt;();\n        for (int i = 0; i &lt; V; i++) {\n            adj.add(new ArrayList&lt;&gt;());\n        }\n        adj.get(1).add(2);\n        adj.get(2).add(3);\n        adj.get(3).add(4);\n        adj.get(3).add(7);\n        adj.get(4).add(5);\n        adj.get(5).add(6);\n        adj.get(7).add(5);\n        adj.get(8).add(9);\n        adj.get(9).add(10);\n        adj.get(10).add(8);\n\n        Solution obj = new Solution();\n        boolean ans = obj.isCyclic(V, adj);\n        if (ans)\n            System.out.println(\"True\");\n        else\n            System.out.println(\"False\");\n\n    }\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> True</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O(V+E)+O(V) , where V = no. of nodes and E = no. of edges. There can be at most V components. So, another O(V) time complexity.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(2N) + O(N) ~ O(2N): O(2N) for two visited arrays and O(N) for recursive stack space.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;<strong><a href=\"https://www.linkedin.com/in/kriti39/\" target=\"_blank\" rel=\"noopener\"><strong>KRITIDIPTA GHOSH</strong></a></strong>&nbsp;for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a>.&nbsp;<em>If you want to suggest any improvement/correction in this article please mail us at&nbsp;write4tuf@gmail.com</em></p></blockquote>\n<!-- /wp:quote -->"
}