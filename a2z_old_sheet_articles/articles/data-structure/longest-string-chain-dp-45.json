{
    "dislikes": 2,
    "video": "YY8iBaYcc4g",
    "publishedOn": "Sun Mar 24 2024 22:11:30 GMT+0530 (India Standard Time)",
    "slug": "longest-string-chain-dp-45",
    "aid": "2089",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/longest-string-chain",
    "title": "Longest String Chain | (DP- 45)",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "dynamic-programming",
            "topic-title": "Dynamic Programming"
        },
        {
            "topic-id": "recursion",
            "topic-title": "Recursion"
        },
        {
            "topic-id": "string",
            "topic-title": "String"
        }
    ],
    "category_tag": "data-structure",
    "likes": 26,
    "preview": "Prerequisite: * Longest Increasing Subsequence * Printing longest increasing subsequence Problem Link: Longest String Chain Problem Statement: We are given an array of strings (sat words[ ]), and w...",
    "content": "<!-- wp:paragraph -->\n<p><em><strong>Prerequisite</strong>:</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><em><a href=\"https://takeuforward.org/data-structure/longest-increasing-subsequence-dp-41/\" target=\"_blank\" rel=\"noreferrer noopener\">Longest Increasing Subsequence</a></em></li><li><em><a href=\"https://takeuforward.org/data-structure/printing-longest-increasing-subsequence-dp-42/\" target=\"_blank\" rel=\"noreferrer noopener\">Printing longest increasing subsequence</a> </em></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Problem Link: </strong><a href=\"https://www.codingninjas.com/codestudio/problems/longest-string-chain_3752111?source=youtube&amp;campaign=striver_dp_videos&amp;utm_source=youtube&amp;utm_medium=affiliate&amp;utm_campaign=striver_dp_videos\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>Longest String Chain</strong></a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Problem Statement</strong>: We are given an array of strings (sat words[ ]), and we need to return the longest string chain. This longest string chain is defined as:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>A subsequence of words[ ] of the string.</li><li>Every element of this subsequence ( a string) except the first one can be formed by inserting a single character into the previous element.</li><li>The first element of this subsequence can be any string from the words[ ] array.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Example:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https://lh5.googleusercontent.com/NXCPBCrRlqaIiRIGKNvnfiL3J-FyWDgD7aoKDz6jdfTKp6YFKzcvsQaelX7XH3kV6iuPcf6F-4JGVobvyjuCZkAA1fwGclMTD-etLdeQrio4f1beXgb4S1trPOZr_A5OhVBPfXRTZuQhyNxX5JU\" alt=\"\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>We need to print the length of the longest string chain, in this case: 4.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Two consecutive strings in this string chain need to have an insertion of a single character. The character can be added to any place on the string.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https://lh5.googleusercontent.com/tt8oYLojLW1fk1zlgB3c7qyCOpUjO5KCQe22T8MiDvtlw5Zr1k5XNxKOb8GY1HHF0Ur0ICZkfolpv0bSxjaWX1cl6KqjzXn7T8ateW_t8cgSMF_2qnLEjm-unrUWtC0Fov5JnEgdRVygaTN1ZmQ\" alt=\"\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>Solution:&nbsp;</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This problem can be compared with the already discussed problem of /** link to dp-42 **/, the longest increasing subsequence.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>There we used to compare two elements of the array and consider the previous element of the array if it was smaller than the current element.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In this problem, we will use the same technique and compare two values of the array and consider the previous element of the array, if it is just one character deletion from the current element.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"width\":669,\"height\":363} -->\n<figure class=\"wp-block-image is-resized\"><img src=\"https://lh4.googleusercontent.com/-ePDR7Wj8y3Il2u9q7ssiY91q1cGi5XbqTXwe9XJsjopbCT_bePZZtG-ARX7Mvw9kZKaiDJ82gOpaoKTNdfU-zmoc_io370AWf0HdQ5UZPczxdh1-TE1pKhucJtHzirZign62EZIsMEEv06ZBkY\" alt=\"\" width=\"669\" height=\"363\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Now, the main task is left to write this compare( ) function.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>compare( S1, S2)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It returns true if the first string S1 is just a single character addition with S2 else it returns false. The way we have called the code, we expect S1 to be the larger string of the two. Therefore the length of S1 should be greater than the length of S2 by 1.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>After checking for the length we can do a character matching using a two-pointer approach.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>We will declare two pointers first and second, initially set to the first index of S1 and S2 respectively.</li><li>Then we set a while loop which will run till the first is less than the length of S1.</li><li>In every iteration, if both the characters match, i.e S1[first] == S2[second], we increment both first and second by 1.</li><li>Else, we will increment only first by 1.</li><li>As S1\u2019s length(say m) is just greater than S2\u2019s length(say n) by 1 using the above pointer approach both the pointers should point to m and n simultaneously. If it happens we return true, else we return false.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>For example:&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https://lh6.googleusercontent.com/3xnt0i8zgEkf_lGNJDd5iUoWAmcYBiafEGJAwjtto3JRM66bjyprYUnhTtVOqNZzAJB_q7edatC7vIFB0fnA2hSUhUDeCxL0PNp1tu50fumZ3l325RUBWYIwoO7AMj4zSNfxAACl26jYf9bc60s\" alt=\"\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>Note: </strong>This question<strong> </strong><a href=\"https://www.codingninjas.com/codestudio/problems/longest-string-chain_3752111?source=youtube&amp;campaign=striver_dp_videos&amp;utm_source=youtube&amp;utm_medium=affiliate&amp;utm_campaign=striver_dp_videos\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>Longest String Chain</strong></a> expects us to find the longest chain subset instead of subsequence, therefore we will first sort the array (on the basis of the length of the string) to get the answer as discussed in /** link to dp-44 **/.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nbool compare(string&amp; s1, string&amp; s2){\n    if(s1.size() != s2.size() + 1) return false;\n    \n    int first = 0;\n    int second = 0;\n    \n    while(first &lt; s1.size()){\n        if(second &lt; s2.size() &amp;&amp; s1[first] == s2[second]){\n            first ++;\n            second ++;\n        }\n        else first ++;\n    }\n    if(first == s1.size() &amp;&amp; second == s2.size()) return true;\n    else return false; \n}\n\nbool comp(string&amp; s1, string&amp; s2){\n    return s1.size() &lt; s2.size();\n}\n\n\nint longestStrChain(vector&lt;string&gt;&amp; arr){\n\n    int n = arr.size();\n    \n    //sort the array\n    \n    sort(arr.begin(), arr.end(),comp);\n\n    vector&lt;int&gt; dp(n,1);\n    \n    int maxi = 1;\n    \n    for(int i=0; i&lt;=n-1; i++){\n        \n        for(int prev_index = 0; prev_index &lt;=i-1; prev_index ++){\n            \n            if( compare(arr[i], arr[prev_index]) &amp;&amp; 1 + dp[prev_index] &gt; dp[i]){\n                dp[i] = 1 + dp[prev_index];\n            }\n        }\n        \n        if(dp[i] &gt; maxi)\n            maxi = dp[i];\n    }\n    return maxi;\n}\n    \n\nint main() {\n\t\n\tvector&lt;string&gt; words = {\"a\",\"b\",\"ba\",\"bca\",\"bda\",\"bdca\"};\n\t\n\tcout&lt;&lt;\" The length of the longest string chain is : \"&lt;&lt;longestStrChain(words);\n\t\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The length of the longest string chain is: 4</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(N*N * l)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reason: We are setting up two nested loops and the compare function can be estimated to l, where l is the length of the longest string in the words [ ] array. Also, we are sorting so the time complexity will be (N^2 * l + NlogN)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(N)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reason: We are only using a single array of size n.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\n\nclass LongestStrChain {\n    // Custom comparison function for sorting strings by length\n    static Comparator&lt;String> comp = (s1, s2) -> s1.length() - s2.length();\n\n    // Function to compare two strings and check if they form a valid chain\n    static boolean compare(String s1, String s2) {\n        if (s1.length() != s2.length() + 1) {\n            return false;\n        }\n\n        int first = 0;\n        int second = 0;\n\n        while (first &lt; s1.length()) {\n            if (second &lt; s2.length() &amp;&amp; s1.charAt(first) == s2.charAt(second)) {\n                first++;\n                second++;\n            } else {\n                first++;\n            }\n        }\n\n        return first == s1.length() &amp;&amp; second == s2.length();\n    }\n\n    // Function to find the length of the longest string chain\n    static int longestStrChain(List&lt;String> arr) {\n        int n = arr.size();\n\n        // Sort the array by string length\n        arr.sort(comp);\n\n        int[] dp = new int[n];\n        Arrays.fill(dp, 1);\n\n        int maxi = 1;\n\n        for (int i = 0; i &lt; n; i++) {\n            for (int prevIndex = 0; prevIndex &lt; i; prevIndex++) {\n                if (compare(arr.get(i), arr.get(prevIndex)) &amp;&amp; 1 + dp[prevIndex] > dp[i]) {\n                    dp[i] = 1 + dp[prevIndex];\n                }\n            }\n\n            if (dp[i] > maxi) {\n                maxi = dp[i];\n            }\n        }\n\n        return maxi;\n    }\n\n    public static void main(String[] args) {\n        List&lt;String> words = Arrays.asList(\"a\", \"b\", \"ba\", \"bca\", \"bda\", \"bdca\");\n\n        System.out.println(\"The length of the longest string chain is: \" + longestStrChain(words));\n    }\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The length of the longest string chain is: 4</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(N*N * l)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reason: We are setting up two nested loops and the compare function can be estimated to l, where l is the length of the longest string in the words [ ] array. Also, we are sorting so the time complexity will be (N^2 * l + NlogN)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(N)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reason: We are only using a single array of size n.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block\" data-lang=\"python\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">def is_predecessor(s1, s2):\n    # Check if s2 is a predecessor of s1\n    if len(s1) != len(s2) + 1:\n        return False\n\n    first = 0\n    second = 0\n\n    while first &lt; len(s1):\n        if second &lt; len(s2) and s1[first] == s2[second]:\n            first += 1\n            second += 1\n        else:\n            first += 1\n\n    return first == len(s1) and second == len(s2)\n\n\ndef longest_string_chain(arr):\n    n = len(arr)\n\n    # Sort the array in ascending order of string length\n    arr.sort(key=len)\n\n    dp = [1] * n\n    maxi = 1\n\n    for i in range(n):\n        for prev_index in range(i):\n            if is_predecessor(arr[i], arr[prev_index]) and 1 + dp[prev_index] > dp[i]:\n                dp[i] = 1 + dp[prev_index]\n\n        if dp[i] > maxi:\n            maxi = dp[i]\n\n    return maxi\n\n\nif __name__ == \"__main__\":\n    words = [\"a\", \"b\", \"ba\", \"bca\", \"bda\", \"bdca\"]\n\n    result = longest_string_chain(words)\n\n    print(\"The length of the longest string chain is:\", result)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The length of the longest string chain is: 4</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(N*N * l)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reason: We are setting up two nested loops and the compare function can be estimated to l, where l is the length of the longest string in the words [ ] array. Also, we are sorting so the time complexity will be (N^2 * l + NlogN)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(N)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reason: We are only using a single array of size n.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>[tabby title=\"JavaScript Code\"]</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">function compare(s1, s2) {\n    if (s1.length !== s2.length + 1) return false;\n\n    let first = 0;\n    let second = 0;\n\n    while (first &lt; s1.length) {\n        if (second &lt; s2.length &amp;&amp; s1[first] === s2[second]) {\n            first++;\n            second++;\n        } else {\n            first++;\n        }\n    }\n\n    return first === s1.length &amp;&amp; second === s2.length;\n}\n\nfunction comp(s1, s2) {\n    return s1.length &lt; s2.length;\n}\n\nfunction longestStrChain(arr) {\n    const n = arr.length;\n\n    // Sort the input array by string length in ascending order\n    arr.sort((s1, s2) => s1.length - s2.length);\n\n    // Initialize an array 'dp' with 1s\n    const dp = new Array(n).fill(1);\n\n    let maxi = 1;\n\n    for (let i = 0; i &lt; n; i++) {\n        for (let prevIndex = 0; prevIndex &lt; i; prevIndex++) {\n            if (compare(arr[i], arr[prevIndex]) &amp;&amp; 1 + dp[prevIndex] > dp[i]) {\n                dp[i] = 1 + dp[prevIndex];\n            }\n        }\n\n        if (dp[i] > maxi) {\n            maxi = dp[i];\n        }\n    }\n\n    return maxi;\n}\n\n// Main function\nfunction main() {\n    const words = [\"a\", \"b\", \"ba\", \"bca\", \"bda\", \"bdca\"];\n\n    const result = longestStrChain(words);\n    console.log(\"The length of the longest string chain is:\", result);\n}\n\n// Call the main function\nmain();\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The length of the longest string chain is: 4</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(N*N * l)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reason: We are setting up two nested loops and the compare function can be estimated to l, where l is the length of the longest string in the words [ ] array. Also, we are sorting so the time complexity will be (N^2 * l + NlogN)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(N)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reason: We are only using a single array of size n.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;<strong><a href=\"https://www.linkedin.com/in/anshuman-sharma-a1b245194/\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>Anshuman Sharma</strong></a></strong>&nbsp;for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a>.&nbsp;<em>If you want to suggest any improvement/correction in this article please mail us at&nbsp;write4tuf@gmail.com</em></p></blockquote>\n<!-- /wp:quote -->"
}