{
    "dislikes": 3,
    "video": "i05Ju7AftcM",
    "publishedOn": "Sun Mar 24 2024 22:09:24 GMT+0530 (India Standard Time)",
    "slug": "n-queen-problem-return-all-distinct-solutions-to-the-n-queens-puzzle",
    "aid": "1478",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/n-queen",
    "title": "N Queen Problem | Return all Distinct Solutions to the N-Queens Puzzle",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "recursion",
            "topic-title": "Recursion"
        }
    ],
    "category_tag": "data-structure",
    "likes": 155,
    "preview": "Problem Statement: The n-queens is the problem of placing n queens on n \u00d7 n chessboard such that no two queens can attack each other. Given an integer n, return all distinct solutions to the n -que...",
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement:</strong> The n-queens is the problem of placing n queens on n \u00d7 n chessboard such that no two queens can attack each other. Given an integer n, return all distinct solutions to the n -queens puzzle. Each solution contains a distinct boards configuration of the queen's placement, where \u2018Q\u2019 and \u2018.\u2019 indicate queen and empty space respectively.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\"><strong>Examples:</strong>\n\n<strong>Input:</strong> n = 4\n\n<strong>Output:</strong> [[\".Q..\",\"...Q\",\"Q...\",\"..Q.\"],[\"..Q.\",\"Q...\",\"...Q\",\".Q..\"]]\n\n<strong>Explanation:</strong> There exist two distinct solutions to the 4-queens puzzle as shown below\n<img width=\"624\" height=\"313\" src=\"https://lh5.googleusercontent.com/Llq0kUywtAlP5K6dFU_DUSdsPSUhWK3zsnBpc8U85nqqykaKqJ1GPoiPIExFOkFCGDnQJj2zKEmlUMiAJlCwFCK1y9SVg4YMy4tg2P9EmbeG2uLcyHFmBKX_cW5eTJJ2dkEut4bx\"></pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p><strong>Let us first understand how can we place queens in a chessboard so that no attack on either of them can take place.</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"624\" height=\"443\" src=\"https://lh6.googleusercontent.com/l0fh_YxHekQoQ5wds-mCrod1-bpFITlGT_X6QEGE_3S866ycYrJrA8A6ovfYledUTaPScWs1BUBSM6NUO1pyftH7VeVhZAHpWk5_NrsCGa-5b1VoSRYGwe3aMR3Dsc3cYQpZ_SWE\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Solution</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong><em>Disclaimer</em></strong>: <em>Don't jump directly to the solution, try it out yourself first.</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Solution 1:&nbsp;</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Intuition: </strong>Using the concept of Backtracking, we will place Queen at different positions of the chessboard and find the right arrangement where all the n queens can be placed on the n*n grid.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"624\" height=\"309\" src=\"https://lh5.googleusercontent.com/7QfQexopxtjWpwSmqlrbUDq0oRTu_Wo-sffZVU9b-4bj2jp30oL1qPyB2VLKE1HvhXXj3CItcDmlf4TgiuUYdfGTtrbsy91ix9mttLlDg1xt_h2go1eO4guww3bHSYCEdJgcQsuS\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Approach</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Ist position</strong>: This is the position where we can see no possible arrangement is found where all queens can be placed since, at the 3rd column, the Queen will be killed at all possible positions of row.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"624\" height=\"392\" src=\"https://lh5.googleusercontent.com/yBKXh7WgcSe7NpVF4SBBHJdXe7zRCPtrRBorJq37lXlal8t1kflUPRBgT0BmLr27ythWhkRC9gLOGpH5ZMpSEAzPKKqccLJD7u8te1lQ-hIP53w6-anQsrDx0V11DJMFOJBC-rKy\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>2nd position: </strong>One of the correct possible arrangements is found. So we will store it as our answer.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><img width=\"624\" height=\"509\" src=\"https://lh4.googleusercontent.com/FyMuuvj4K8HMHR7hpbOdWkGTX3-0PmUVG0kaWjUfWWIKp0Uth2CVlGfsBQtmQ-NkKB-Z2I9I20KpVZ_DU0bCayJDQ_pcyJHT0pCHA4jMPqc6ObW97FjOXHiQSYC8MC5OV1xgwZJP\"></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>3rd position: </strong>One of the correct possible arrangements is found. So we will store it as our answer.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><img width=\"624\" height=\"644\" src=\"https://lh5.googleusercontent.com/cAOExJ4tnI-01-My0KL5OCZlVVqb6aLJDAlgUZs-Uv8tpH0tkLQKWLJugaET3FTp5y-9ilt5jGq1ZY83oncqbB9H-aCFutnGdsHXnGsmR3JDEsitZrqhMh2g0ORrPOz2dYuGg2tl\"></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>4th position: </strong>This is the position where we can see no possible arrangement is found where all queens can be placed since, at the 4th column, the Queen will be killed at all possible positions of row.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><img width=\"607\" height=\"698\" src=\"https://lh6.googleusercontent.com/h_tzrr-D4aTEGXNxjCd3hvjVRc3DRK57clMNGWKC6m-jDTb2tViEfodjVaxs-2djvlwCMXvTjcv-xqnxpY5GEb-iWiAiQxdtkTNUuSzIeqJau_dDN9aj3LJfls-BuMMd7RT2Jsdu\"></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\nclass Solution {\n  public:\n    bool isSafe1(int row, int col, vector &lt; string &gt; board, int n) {\n      // check upper element\n      int duprow = row;\n      int dupcol = col;\n\n      while (row &gt;= 0 &amp;&amp; col &gt;= 0) {\n        if (board[row][col] == 'Q')\n          return false;\n        row--;\n        col--;\n      }\n\n      col = dupcol;\n      row = duprow;\n      while (col &gt;= 0) {\n        if (board[row][col] == 'Q')\n          return false;\n        col--;\n      }\n\n      row = duprow;\n      col = dupcol;\n      while (row &lt; n &amp;&amp; col &gt;= 0) {\n        if (board[row][col] == 'Q')\n          return false;\n        row++;\n        col--;\n      }\n      return true;\n    }\n\n  public:\n    void solve(int col, vector &lt; string &gt; &amp; board, vector &lt; vector &lt; string &gt;&gt; &amp; ans, int n) {\n      if (col == n) {\n        ans.push_back(board);\n        return;\n      }\n      for (int row = 0; row &lt; n; row++) {\n        if (isSafe1(row, col, board, n)) {\n          board[row][col] = 'Q';\n          solve(col + 1, board, ans, n);\n          board[row][col] = '.';\n        }\n      }\n    }\n\n  public:\n    vector &lt; vector &lt; string &gt;&gt; solveNQueens(int n) {\n      vector &lt; vector &lt; string &gt;&gt; ans;\n      vector &lt; string &gt; board(n);\n      string s(n, '.');\n      for (int i = 0; i &lt; n; i++) {\n        board[i] = s;\n      }\n      solve(0, board, ans, n);\n      return ans;\n    }\n};\nint main() {\n  int n = 4; // we are taking 4*4 grid and 4 queens\n  Solution obj;\n  vector &lt; vector &lt; string &gt;&gt; ans = obj.solveNQueens(n);\n  for (int i = 0; i &lt; ans.size(); i++) {\n    cout &lt;&lt; \"Arrangement \" &lt;&lt; i + 1 &lt;&lt; \"\\n\";\n    for (int j = 0; j &lt; ans[0].size(); j++) {\n      cout &lt;&lt; ans[i][j];\n      cout &lt;&lt; endl;\n    }\n    cout &lt;&lt; endl;\n  }\n  return 0;\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Arrangement 1<br>..Q.<br>Q\u2026<br>\u2026Q<br>.Q..</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Arrangement 2<br>.Q..<br>\u2026Q<br>Q\u2026<br>..Q.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>Exponential in nature, since we are trying out all ways. To be precise it goes as O</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(N! * N) nearly. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(N^2)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\nclass TUF {\n    public static List &lt; List &lt; String &gt;&gt; solveNQueens(int n) {\n        char[][] board = new char[n][n];\n        for (int i = 0; i &lt; n; i++)\n            for (int j = 0; j &lt; n; j++)\n                board[i][j] = '.';\n        List &lt; List &lt; String &gt;&gt; res = new ArrayList &lt; List &lt; String &gt;&gt; ();\n        dfs(0, board, res);\n        return res;\n    }\n\n    static boolean validate(char[][] board, int row, int col) {\n        int duprow = row;\n        int dupcol = col;\n        while (row &gt;= 0 &amp;&amp; col &gt;= 0) {\n            if (board[row][col] == 'Q') return false;\n            row--;\n            col--;\n        }\n\n        row = duprow;\n        col = dupcol;\n        while (col &gt;= 0) {\n            if (board[row][col] == 'Q') return false;\n            col--;\n        }\n\n        row = duprow;\n        col = dupcol;\n        while (col &gt;= 0 &amp;&amp; row &lt; board.length) {\n            if (board[row][col] == 'Q') return false;\n            col--;\n            row++;\n        }\n        return true;\n    }\n\n    static void dfs(int col, char[][] board, List &lt; List &lt; String &gt;&gt; res) {\n        if (col == board.length) {\n            res.add(construct(board));\n            return;\n        }\n\n        for (int row = 0; row &lt; board.length; row++) {\n            if (validate(board, row, col)) {\n                board[row][col] = 'Q';\n                dfs(col + 1, board, res);\n                board[row][col] = '.';\n            }\n        }\n    }\n\n\n\n    static List &lt; String &gt; construct(char[][] board) {\n        List &lt; String &gt; res = new LinkedList &lt; String &gt; ();\n        for (int i = 0; i &lt; board.length; i++) {\n            String s = new String(board[i]);\n            res.add(s);\n        }\n        return res;\n    }\n    public static void main(String args[]) {\n        int N = 4;\n        List &lt; List &lt; String &gt;&gt; queen = solveNQueens(N);\n        int i = 1;\n        for (List &lt; String &gt; it: queen) {\n            System.out.println(\"Arrangement \" + i);\n            for (String s: it) {\n                System.out.println(s);\n            }\n            System.out.println();\n            i += 1;\n        }\n        \n    }\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Arrangement 1<br>..Q.<br>Q\u2026<br>\u2026Q<br>.Q..</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Arrangement 2<br>.Q..<br>\u2026Q<br>Q\u2026<br>..Q.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>Exponential in nature since we are trying out all ways, to be precise its O(N! * N). </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O( N<sup>2 </sup>) </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block\" data-lang=\"python\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">class Solution:\n    def isSafe1(self, row, col, board, n):\n        # check upper element\n        duprow = row\n        dupcol = col\n\n\n        while row >= 0 and col >= 0:\n            if board[row][col] == 'Q':\n                return False\n            row -= 1\n            col -= 1\n\n\n        col = dupcol\n        row = duprow\n        while col >= 0:\n            if board[row][col] == 'Q':\n                return False\n            col -= 1\n\n\n        row = duprow\n        col = dupcol\n        while row &lt; n and col >= 0:\n            if board[row][col] == 'Q':\n                return False\n            row += 1\n            col -= 1\n\n\n        return True\n\n\n    def solve(self, col, board, ans, n):\n        if col == n:\n            ans.append(list(board))\n            return\n\n\n        for row in range(n):\n            if self.isSafe1(row, col, board, n):\n                board[row] = board[row][:col] + 'Q' + board[row][col+1:]\n                self.solve(col+1, board, ans, n)\n                board[row] = board[row][:col] + '.' + board[row][col+1:]\n\n\n    def solveNQueens(self, n):\n        ans = []\n        board = ['.'*n for _ in range(n)]\n        self.solve(0, board, ans, n)\n        return ans\n\n\nn = 4\nobj = Solution()\nans = obj.solveNQueens(n)\nfor i in range(len(ans)):\n    print(f\"Arrangement {i+1}\")\n    for j in range(len(ans[0])):\n        print(ans[i][j])\n    print()</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Arrangement 1<br>..Q.<br>Q\u2026<br>\u2026Q<br>.Q..</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Arrangement 2<br>.Q..<br>\u2026Q<br>Q\u2026<br>..Q.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>Exponential in nature since we are trying out all ways, to be precise its O(N! * N). </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O( N<sup>2 </sup>) </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Solution 2:\u00a0</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Intuition: </strong>This is the optimization of the issafe function. In the previous issafe function, we need o(N) for a row, o(N) for the column, and o(N) for the diagonal. Here, we will use hashing to maintain a list to check whether that position can be the right one or not.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Approach:&nbsp;</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>For checking Left row elements</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"624\" height=\"364\" src=\"https://lh6.googleusercontent.com/UZm_6j1v5WQYlA0Y7wMo4LObyB2TdWcWGeZegccZ9VxeDkgf3en9IG9-gnSKtZLAH3b0auF75tyc0oNWC6J1_MFgeqKOGsvQTny6nBD2padF6sISb0LWv16wj9Acy3-Q-4gU_FlB\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>For checking upper diagonal and lower diagonal</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"624\" height=\"371\" src=\"https://lh6.googleusercontent.com/cu5CY5IuyBkkiPmZDoYFF92lQL5PsKxndb_me-btV-sTD_jYE4dVmNrcCvo3ES2IpJeudhCaioqnSG8QqaO-vX64EAXkwcBfaZ0dC1qmHooXpmkicyeKBe1WW1Ldcw6dnYaGdUFx\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\nclass Solution {\n  public:\n    void solve(int col, vector &lt; string &gt; &amp; board, vector &lt; vector &lt; string &gt;&gt; &amp; ans, vector &lt; int &gt; &amp; leftrow, vector &lt; int &gt; &amp; upperDiagonal, vector &lt; int &gt; &amp; lowerDiagonal, int n) {\n      if (col == n) {\n        ans.push_back(board);\n        return;\n      }\n      for (int row = 0; row &lt; n; row++) {\n        if (leftrow[row] == 0 &amp;&amp; lowerDiagonal[row + col] == 0 &amp;&amp; upperDiagonal[n - 1 + col - row] == 0) {\n          board[row][col] = 'Q';\n          leftrow[row] = 1;\n          lowerDiagonal[row + col] = 1;\n          upperDiagonal[n - 1 + col - row] = 1;\n          solve(col + 1, board, ans, leftrow, upperDiagonal, lowerDiagonal, n);\n          board[row][col] = '.';\n          leftrow[row] = 0;\n          lowerDiagonal[row + col] = 0;\n          upperDiagonal[n - 1 + col - row] = 0;\n        }\n      }\n    }\n\n  public:\n    vector &lt; vector &lt; string &gt;&gt; solveNQueens(int n) {\n      vector &lt; vector &lt; string &gt;&gt; ans;\n      vector &lt; string &gt; board(n);\n      string s(n, '.');\n      for (int i = 0; i &lt; n; i++) {\n        board[i] = s;\n      }\n      vector &lt; int &gt; leftrow(n, 0), upperDiagonal(2 * n - 1, 0), lowerDiagonal(2 * n - 1, 0);\n      solve(0, board, ans, leftrow, upperDiagonal, lowerDiagonal, n);\n      return ans;\n    }\n};\nint main() {\n  int n = 4; // we are taking 4*4 grid and 4 queens\n  Solution obj;\n  vector &lt; vector &lt; string &gt;&gt; ans = obj.solveNQueens(n);\n  for (int i = 0; i &lt; ans.size(); i++) {\n    cout &lt;&lt; \"Arrangement \" &lt;&lt; i + 1 &lt;&lt; \"\\n\";\n    for (int j = 0; j &lt; ans[0].size(); j++) {\n      cout &lt;&lt; ans[i][j];\n      cout &lt;&lt; endl;\n    }\n    cout &lt;&lt; endl;\n  }\n  return 0;\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Arrangement 1<br>..Q.<br>Q\u2026<br>\u2026Q<br>.Q..</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Arrangement 2<br>.Q..<br>\u2026Q<br>Q\u2026<br>..Q.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong><meta charset=\"utf-8\">Exponential in nature since we are trying out all ways, to be precise it is O(N! * N). </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(N) </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\nclass TUF {\n    public static List &lt; List &lt; String &gt;&gt; solveNQueens(int n) {\n        char[][] board = new char[n][n];\n        for (int i = 0; i &lt; n; i++)\n            for (int j = 0; j &lt; n; j++)\n                board[i][j] = '.';\n        List &lt; List &lt; String &gt;&gt; res = new ArrayList &lt; List &lt; String &gt;&gt; ();\n        int leftRow[] = new int[n];\n        int upperDiagonal[] = new int[2 * n - 1];\n        int lowerDiagonal[] = new int[2 * n - 1];\n        solve(0, board, res, leftRow, lowerDiagonal, upperDiagonal);\n        return res;\n    }\n\n\n\n    static void solve(int col, char[][] board, List &lt; List &lt; String &gt;&gt; res, int leftRow[], int lowerDiagonal[], int upperDiagonal[]) {\n        if (col == board.length) {\n            res.add(construct(board));\n            return;\n        }\n\n        for (int row = 0; row &lt; board.length; row++) {\n            if (leftRow[row] == 0 &amp;&amp; lowerDiagonal[row + col] == 0 &amp;&amp; upperDiagonal[board.length - 1 + col - row] == 0) {\n                board[row][col] = 'Q';\n                leftRow[row] = 1;\n                lowerDiagonal[row + col] = 1;\n                upperDiagonal[board.length - 1 + col - row] = 1;\n                solve(col + 1, board, res, leftRow, lowerDiagonal, upperDiagonal);\n                board[row][col] = '.';\n                leftRow[row] = 0;\n                lowerDiagonal[row + col] = 0;\n                upperDiagonal[board.length - 1 + col - row] = 0;\n            }\n        }\n    }\n\n\n    static List &lt; String &gt; construct(char[][] board) {\n        List &lt; String &gt; res = new LinkedList &lt; String &gt; ();\n        for (int i = 0; i &lt; board.length; i++) {\n            String s = new String(board[i]);\n            res.add(s);\n        }\n        return res;\n    }\n    public static void main(String args[]) {\n        int N = 4;\n        List &lt; List &lt; String &gt;&gt; queen = solveNQueens(N);\n        int i = 1;\n        for (List &lt; String &gt; it: queen) {\n            System.out.println(\"Arrangement \" + i);\n            for (String s: it) {\n                System.out.println(s);\n            }\n            System.out.println();\n            i += 1;\n        }\n\n    }\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p id=\"block-8f3fd839-2acf-4e93-9bf5-3b336d4ae547\"><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p id=\"block-f95cd0a1-ddf5-416d-8d8b-959e4870365b\">Arrangement 1<br>..Q.<br>Q\u2026<br>\u2026Q<br>.Q..</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p id=\"block-b2e70f6e-f576-45d8-9c2e-b62867130deb\">Arrangement 2<br>.Q..<br>\u2026Q<br>Q\u2026<br>..Q.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p id=\"block-4b9effe4-6fff-45de-a5d1-2b24aa0cd721\"><strong>Time Complexity: </strong><meta charset=\"utf-8\">Exponential in nature since we are trying out all ways, to be precise its O(N! * N). </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p id=\"block-5b679523-c087-404d-abe1-30a0b096202e\"><strong>Space Complexity: </strong>O(N)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block\" data-lang=\"python\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">from typing import List\n\n\n\n\nclass Solution:\n    def solve(self, col, board, ans, leftrow, upperDiagonal, lowerDiagonal, n):\n        if col == n:\n            ans.append(board[:])\n            return\n\n\n        for row in range(n):\n            if leftrow[row] == 0 and lowerDiagonal[row+col] == 0 and upperDiagonal[n-1+col-row] == 0:\n                board[row] = board[row][:col] + 'Q' + board[row][col+1:]\n                leftrow[row] = 1\n                lowerDiagonal[row+col] = 1\n                upperDiagonal[n-1+col-row] = 1\n                self.solve(col+1, board, ans, leftrow,\n                           upperDiagonal, lowerDiagonal, n)\n                board[row] = board[row][:col] + '.' + board[row][col+1:]\n                leftrow[row] = 0\n                lowerDiagonal[row+col] = 0\n                upperDiagonal[n-1+col-row] = 0\n\n\n    def solveNQueens(self, n: int) -> List[List[str]]:\n        ans = []\n        board = ['.'*n for _ in range(n)]\n        leftrow = [0]*n\n        upperDiagonal = [0]*(2*n-1)\n        lowerDiagonal = [0]*(2*n-1)\n        self.solve(0, board, ans, leftrow, upperDiagonal, lowerDiagonal, n)\n        return ans\n\n\n\n\nif __name__ == '__main__':\n    n = 4\n    obj = Solution()\n    ans = obj.solveNQueens(n)\n    for i in range(len(ans)):\n        print(\"Arrangement\", i+1)\n        for j in range(len(ans[0])):\n            print(ans[i][j])\n            print()</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Arrangement 1<br>..Q.<br>Q\u2026<br>\u2026Q<br>.Q..</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Arrangement 2<br>.Q..<br>\u2026Q<br>Q\u2026<br>..Q.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>Exponential in nature since we are trying out all ways, to be precise it is O(N! * N). </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(N) </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to\u00a0<a href=\"https://www.linkedin.com/in/gurmeet-singh-630002201/\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>Gurmeet Singh</strong></a>\u00a0<em><em>and\u00a0<a href=\"https://www.linkedin.com/in/imsudip/\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>Sudip Ghosh</strong></a></em></em></em> <em>for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,\u00a0</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->"
}