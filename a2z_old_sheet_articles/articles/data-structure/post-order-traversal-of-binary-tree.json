{
    "dislikes": 54,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:09:23 GMT+0530 (India Standard Time)",
    "slug": "post-order-traversal-of-binary-tree",
    "aid": "1471",
    "title": "Post-Order Traversal Of Binary Tree",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/postorder-traversal",
    "topics": [
        {
            "topic-id": "binary-tree",
            "topic-title": "Binary Tree"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "recursion",
            "topic-title": "Recursion"
        },
        {
            "topic-id": "stack",
            "topic-title": "Stack"
        }
    ],
    "content": "<p><strong>Problem Statement: </strong>Given the root of a Binary Tree, write a recursive function that returns an array containing the postorder traversal of the tree.\n </p>\n\n\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n    <details class=\"article_example_details\">\n        <summary class=\"article_example_summary\">\n            <span><strong>\n                    Examples\n                </strong>\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"atricle_example_content\">\n            <pre class=\"wp-block-preformatted\">\n                <!-- Insert New Examples Here -->\n                <p><strong>Example 1:</strong></p>\n                <p><strong>Input:</strong>Binary Tree: 4 2 5 3 -1 7 6 -1 9 -1 -1 8 -1 1</p>\n                <p><figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/post_order_image1-zhiAPn4Z\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure></p>\n                <p><strong>Output:</strong> [1, 9, 3, 2, 7, 8, 6, 5, 4]</p>\n                <p><strong>Explanation: </strong>We traverse the binary tree in the order of Left, Right then Root recursively resulting in the following traversal:</p>\n                <p><figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/post_order_images-luo-pLne\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure></p>\n\n                <p><strong>Example 2:</strong></p>\n                <p><strong>Input:</strong>Binary Tree: 1 2 3 4 5 6 7 -1 -1 8 -1 -1 -1 9 10</p>\n                <p><figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/post_order_image3-_0Wa5gA1\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure></p>\n                <p><strong>Output:</strong> [1 2 4 5 8 3 6 7 9 10]</p>\n                <p><strong>Explanation: </strong> We traverse the binary tree in the order of Root, Left then Right recursively resulting in the following traversal:</p>\n                <p><figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/post_order_image2-IJcjx_qp\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure></p>\n\n            </pre>\n        </div>\n    </details>\n</div>\n\n\n<!-- This is Practice Section-->\n<div class=\"practice\">\n    <span><strong>Practice: </strong></span>\n    <div class=\"problem-buttons\">\n\n        <!-- Add Problem Link inside href -->\n        <a href=\"https://www.codingninjas.com/studio/problems/postorder-traversal_2035933?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf\" target=\"_blank\" rel=\"noopener\">\n            <span>Solve Problem</span>\n            <img src=\"https://takeuforward-content-images.s3.ap-south-1.amazonaws.com/content/Group-11-5-pFOq-8ga\"\n                alt=\"code-studio\">\n        </a>\n    </div>\n    <!--<div class=\"problem-buttons\">\n         Add Problem Link inside href \n        <a href=\"\" target=\"_blank\" rel=\"noopener\">\n            <span>Solve Problem</span>\n            <img src=\"https://cdn.iconscout.com/icon/free/png-256/free-leetcode-3521542-2944960.png?f=webp\"\n                alt=\"leetcode\">\n        </a>\n    </div>-->\n</div>\n\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\n        yourself first. </em></p>\n\n\n<div id=\"brute-force-approach\">\n    <details>\n        <summary class=\"main-summary\">\n            <span>\n                Optimal Approach \n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                </path>\n            </svg>\n        </summary>\n        <div class=\"common-drops\">\n            <details class=\"secondary-details\" open=\"\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Algorithm / Intuition\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <div class=\"approach-algorithm\">\n                    <!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n                    <p>Postorder traversal, another depth-first method in tree exploration, follows a sequence where the algorithm first explores the left subtree, then the right subtree, and finally visits the root node. In postorder traversal, we visit (or add to the array) the current node after traversing both its left and right subtrees.The sequence of steps in preorder traversal follows: Left, Right, Root.</p>\n                    <p><figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/post_order_image5-TJNsLtKT\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure></p>\n\n                    <p>\n                    \t<p><strong>Base Case:</strong>  If the current node is null, it means we have reached the end of a subtree and there are no further nodes to explore. Hence the recursive function stops and we return from that particular recursive call.</p>\n                    \t<p><strong>Recursive Function:</strong></p>\n                    \t<p>\n                    \t<ol>\n                    \t<li><strong>Traverse Left Subtree:</strong>  Explore the left subtree by recursively invoking the postorder function on the left child of the current node, ensuring a depth-first approach to node exploration.</li>\n                    \t<li><strong>Traverse Right Subtree:</strong> After fully traversing the left subtree, we move on to the right subtree, invoking the postorder function on the right child of the current node.</li>\n                    \t<li><strong>Process Current Node:</strong> After exploring the children of the current node, we process it by adding its value to the postorder traversal array.</li>\n                    \t</ol>\n                    \t</p>\n                    </p>\n                    <p><figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/post_order_image6-7HOGlzzY\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure></p>\n                    <p><strong>Algorithm:</strong></p>\n                    <p><strong>Step 1:</strong> Check for base case that if the current node is null, exit the void function.</p>\n                    <p><figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/post_order_image7-5xvfjgMI\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure></p>\n                    <p><strong>Step 2:</strong> Traverse the left subtree using a recursive postorder call on the left child.</p>\n                    <p><figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/post_order_image8-isgnjv1L\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure></p>\n                    <p><strong>Step 3:</strong> Traverse the right subtree using a recursive postorder call on the right child. </p>\n                    <p><figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/post_order_image9-trrZvw9r\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure></p>\n                    <p><strong>Step 4:</strong> Add the value of the current node to the postorder traversal array.This recursive approach implicitly uses the call stack to handle backtracking while exploring the tree nodes in a postorder manner.</p>\n                    <p><figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/post_order_image2-IJcjx_qp\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure></p>\n                </div>\n            </details>\n            <details class=\"code-section secondary-details\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Code\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <div class=\"code-tabs\">\n                    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n                    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n                    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n                    <button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n                    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\"\n                        xmlns=\"http://www.w3.org/2000/svg\">\n                        <path\n                            d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n                        </path>\n                    </svg>\n                </div>\n                <div class=\"code-content\">\n                    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nusing namespace std;\n\n// Node structure for the binary tree\nstruct Node {\n    int data;\n    Node* left;\n    Node* right;\n    // Constructor to initialize\n    // the node with a value\n    Node(int val) : data(val), left(nullptr), right(nullptr) {}\n};\n\n// Function to perform postorder\n// traversal recursively\nvoid postorder(Node* root, vector&lt;int&gt;&amp; arr){\n    // Base case: if root is null, return\n    if(root==NULL){\n        return;\n    }\n    // Traverse left subtree\n    postorder(root-&gt;left, arr);\n    // Traverse right subtree\n    postorder(root-&gt;right, arr);\n    // Visit the node\n    // (append node's data to the array)\n    arr.push_back(root-&gt;data);\n}\n\n// Function to get the postorder\n// traversal of a binary tree\nvector&lt;int&gt; postOrder(Node* root){\n    // Create a vector to\n    // store the traversal result\n    vector&lt;int&gt; arr;\n    // Perform postorder traversal\n    // starting from the root\n    postorder(root, arr);\n    // Return the postorder\n    // traversal result\n    return arr;\n}\n\n// Function to print the\n// elements of a vector\nvoid printVector(const vector&lt;int&gt;&amp; vec) {\n    // Iterate through the vector\n    // and print each element\n    for (int num : vec) {\n        cout &lt;&lt; num &lt;&lt; &quot; &quot;;\n    }\n    cout &lt;&lt; endl;\n}\n\n// Main function\nint main()\n{\n    // Creating a sample binary tree\n    Node* root = new Node(1);\n    root-&gt;left = new Node(2);\n    root-&gt;right = new Node(3);\n    root-&gt;left-&gt;left = new Node(4);\n    root-&gt;left-&gt;right = new Node(5);\n\n    // Getting postorder traversal\n    vector&lt;int&gt; result = postOrder(root);\n\n    // Printing the postorder\n    // traversal result\n    cout &lt;&lt; &quot;Postorder traversal: &quot;;\n    printVector(result);\n\n    return 0;\n}\n                            </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block \" data-lang=\"java\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"java\" class=\"language-java\">\nimport java.util.ArrayList;\nimport java.util.List;\n\n// Node structure for the binary tree\nclass Node {\n    int data;\n    Node left;\n    Node right;\n    \n    // Constructor to initialize\n    // the node with a value\n    Node(int val) {\n        data = val;\n        left = null;\n        right = null;\n    }\n}\n\npublic class BinaryTreeTraversal {\n    // Function to perform postorder\n    // traversal recursively\n    static void postorder(Node root, List&lt;Integer&gt; arr){\n        // Base case: if root is null, return\n        if(root == null){\n            return;\n        }\n        // Traverse left subtree\n        postorder(root.left, arr);\n        // Traverse right subtree\n        postorder(root.right, arr);\n        // Visit the node\n        // (append node's data to the array)\n        arr.add(root.data);\n    }\n\n    // Function to get the postorder\n    // traversal of a binary tree\n    static List&lt;Integer&gt; postOrder(Node root){\n        // Create a list to\n        // store the traversal result\n        List&lt;Integer&gt; arr = new ArrayList&lt;&gt;();\n        // Perform postorder traversal\n        // starting from the root\n        postorder(root, arr);\n        // Return the postorder\n        // traversal result\n        return arr;\n    }\n\n    // Function to print the\n    // elements of a list\n    static void printList(List&lt;Integer&gt; list) {\n        // Iterate through the list\n        // and print each element\n        for (int num : list) {\n            System.out.print(num + &quot; &quot;);\n        }\n        System.out.println();\n    }\n\n    // Main function\n    public static void main(String[] args) {\n        // Creating a sample binary tree\n        Node root = new Node(1);\n        root.left = new Node(2);\n        root.right = new Node(3);\n        root.left.left = new Node(4);\n        root.left.right = new Node(5);\n\n        // Getting postorder traversal\n        List&lt;Integer&gt; result = postOrder(root);\n\n        // Printing the postorder\n        // traversal result\n        System.out.print(&quot;Postorder traversal: &quot;);\n        printList(result);\n    }\n}\n                            </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block\" data-lang=\"python\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"python\" class=\"language-python\">\n# Node class for the binary tree\nclass Node:\n    def __init__(self, val):\n        self.data = val\n        self.left = None\n        self.right = None\n\n# Function to perform postorder\n# traversal recursively\ndef postorder(root, arr):\n    # Base case: if root is None, return\n    if root is None:\n        return\n    # Traverse left subtree\n    postorder(root.left, arr)\n    # Traverse right subtree\n    postorder(root.right, arr)\n    # Visit the node\n    # (append node's data to the list)\n    arr.append(root.data)\n\n# Function to get the postorder\n# traversal of a binary tree\ndef postOrder(root):\n    # Create a list to\n    # store the traversal result\n    arr = []\n    # Perform postorder traversal\n    # starting from the root\n    postorder(root, arr)\n    # Return the postorder\n    # traversal result\n    return arr\n\n# Function to print the\n# elements of a list\ndef printList(lst):\n    # Iterate through the list\n    # and print each element\n    for num in lst:\n        print(num, end=&quot; &quot;)\n    print()\n\n# Main function\nif __name__ == &quot;__main__&quot;:\n    # Creating a sample binary tree\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    root.left.left = Node(4)\n    root.left.right = Node(5)\n\n    # Getting postorder traversal\n    result = postOrder(root)\n\n    # Printing the postorder\n    # traversal result\n    print(&quot;Postorder traversal: &quot;, end=&quot;&quot;)\n    printList(result)\n                            </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block\" data-lang=\"javascript\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"javascript\" class=\"language-javascript\">\n// Node class for the binary tree\nclass Node {\n    constructor(val) {\n        this.data = val;\n        this.left = null;\n        this.right = null;\n    }\n}\n\n// Function to perform postorder\n// traversal recursively\nfunction postorder(root, arr) {\n    // Base case: if root\n    // is null, return\n    if (root === null) {\n        return;\n    }\n    // Traverse left subtree\n    postorder(root.left, arr);\n    // Traverse right subtree\n    postorder(root.right, arr);\n    // Visit the node (push node's \n    // data to the array)\n    arr.push(root.data);\n}\n\n// Function to get the postorder\n// traversal of a binary tree\nfunction postOrder(root) {\n    // Create an array to\n    // store the traversal result\n    const arr = [];\n    // Perform postorder traversal\n    // starting from the root\n    postorder(root, arr);\n    // Return the postorder\n    // traversal result\n    return arr;\n}\n\n// Function to print the\n// elements of an array\nfunction printArray(arr) {\n    // Iterate through the\n    // array and print each element\n    arr.forEach(num =&gt; {\n        process.stdout.write(num + &quot; &quot;);\n    });\n    process.stdout.write(&quot;\\n&quot;);\n}\n\n// Creating a sample binary tree\nlet root = new Node(1);\nroot.left = new Node(2);\nroot.right = new Node(3);\nroot.left.left = new Node(4);\nroot.left.right = new Node(5);\n\n// Getting postorder traversal\nlet result = postOrder(root);\n\n// Printing the postorder traversal result\nprocess.stdout.write(&quot;Postorder traversal: &quot;);\nprintArray(result);\n                            </code>\n                        </pre>\n                    </div>\n                    <p>\n                        <!-- Insert Output of Brute Force Here -->\n                       <strong>Output</strong> Postorder traversal: 4 5 2 3 1  \n                    </p>\n                </div>\n            </details>\n            <details class=\"secondary-details\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Complexity Analysis\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <p>\n                    <!-- Insert Time and Space Complexity  Here -->\n                    <p><strong>Time Complexity: O(N)</strong> where N is the number of nodes in the binary tree as each node of the binary tree is visited exactly once.</p>\n\t\t\t\t\t<p><strong>Space Complexity: O(N)</strong> where N is the number of nodes in the binary tree as an additional space for array is allocated to store the values of all \u2018N\u2019 nodes of the binary tree.</p>\n\n                </p>\n            </details>\n        </div>\n    </details>\n</div>\n\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n    <details>\n        <summary class=\"main-summary\">\n            <span>\n                Video Explanation\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"yt-video-wrapper\">\n            <!-- Insert iframe embed Link of Youtube Video-->\n           <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/2YBhNLodD8Q?si=NS5mTqgxd0rNZi0k\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n        </div>\n    </details>\n</div>\n\n<blockquote class=\"wp-block-quote\">\n     Special thanks to <strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268\">Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,<strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\"> please check out this article</a></strong>\n</blockquote>\n\n<script>\n\n    const codeSections = document.querySelectorAll('.code-section');\n\n    // Get last selected language from localStorage or set default value\n    let lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp';\n\n    codeSections.forEach((section, sectionIndex) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n        const copyBtn = section.querySelector('.copy-btn');\n\n        codeTabs.forEach((tab) => {\n            tab.addEventListener('click', () => {\n                codeTabs.forEach((t) => {\n                    t.classList.remove('dsa_article_code_active');\n                });\n                tab.classList.add('dsa_article_code_active');\n\n                const lang = tab.dataset.lang;\n                const activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                codeBlocks.forEach((block) => {\n                    if (block === activeBlock) {\n                        block.classList.add('dsa_article_code_active');\n                    } else {\n                        block.classList.remove('dsa_article_code_active');\n                    }\n                });\n\n                // Update last selected language for all sections and store in localStorage\n                lastSelectedLanguage = lang;\n                localStorage.setItem('lastSelectedLanguage', lang);\n                codeSections.forEach((otherSection, otherIndex) => {\n                    if (otherIndex !== sectionIndex) {\n                        const otherTabs = otherSection.querySelectorAll('.code-tab');\n                        otherTabs.forEach((otherTab) => {\n                            if (otherTab.dataset.lang === lang) {\n                                otherTab.classList.add('dsa_article_code_active');\n                            } else {\n                                otherTab.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                        const otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                        const otherCodeBlocks = otherSection.querySelectorAll('.code-block');\n                        otherCodeBlocks.forEach((block) => {\n                            if (block === otherActiveBlock) {\n                                block.classList.add('dsa_article_code_active');\n                            } else {\n                                block.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                    }\n                });\n            });\n        });\n\n        // Handle copy button click event\n        copyBtn.addEventListener('click', () => {\n            const activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\n            navigator.clipboard.writeText(activeBlock.innerText);\n            copyBtn.classList.add('dsa_article_code_active');\n            setTimeout(() => {\n                copyBtn.classList.remove('dsa_article_code_active');\n            }, 1000);\n        });\n    });\n\n    // Set initial state of the tabs\n    codeSections.forEach((section) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n\n        codeTabs.forEach((tab) => {\n            if (tab.dataset.lang === lastSelectedLanguage) {\n                tab.classList.add('dsa_article_code_active');\n            } else {\n                tab.classList.remove('dsa_article_code_active');\n            }\n        });\n\n        codeBlocks.forEach((block) => {\n            if (block.dataset.lang === lastSelectedLanguage) {\n                block.classList.add('dsa_article_code_active');\n            } else {\n                block.classList.remove('dsa_article_code_active');\n            }\n        });\n    });\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>",
    "category_tag": "data-structure",
    "likes": 61,
    "preview": "Problem Statement: Given the root of a Binary Tree, write a recursive function that returns an array containing the postorder traversal of the tree. Examples Example 1: Input:Binary Tree: 4 2 5 3 -..."
}