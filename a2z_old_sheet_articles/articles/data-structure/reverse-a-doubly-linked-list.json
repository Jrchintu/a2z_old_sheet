{
    "dislikes": 6,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:10:16 GMT+0530 (India Standard Time)",
    "slug": "reverse-a-doubly-linked-list",
    "aid": "1723",
    "tuf_plus": "",
    "title": "Reverse a Doubly Linked List",
    "topics": [
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "linked-list",
            "topic-title": "Linked List"
        }
    ],
    "category_tag": "data-structure",
    "likes": 89,
    "preview": "Problem Statement: Given a doubly linked list of size \u2018N\u2019 consisting of positive integers, your task is to reverse it and return the head of the modified doubly linked list. Examples Example 1: Inp...",
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement:</strong> Given a doubly linked list of size <strong>\u2018N\u2019 </strong>consisting of positive integers, your task is to <strong>reverse</strong> it and return the head of the modified doubly linked list.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n<details class=\"article_example_details\">\n<summary class=\"article_example_summary\">\n<span><strong>\nExamples\n</strong>\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"atricle_example_content\">\n<pre class=\"wp-block-preformatted\"><!-- Insert New Examples Here -->\n<p><strong>Example 1:</strong></p>\n<p><strong>Input Format</strong>:</p>\n<p>DLL: 1 &lt;-&gt; 2 &lt;-&gt; 3 &lt;-&gt; 4</p>\n<figure class=\"wp-block-image size-large\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/11/dll-insertatend-ex-1-1-1024x238.png\" alt=\"\" class=\"wp-image-12952\"></figure>\n<p><strong>Result</strong>: DLL: 4 &lt;-&gt; 3 &lt;-&gt; 2 &lt;-&gt; 1</p>\n<figure class=\"wp-block-image size-large\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/11/dll-reverse-1-1024x155.png\" alt=\"\" class=\"wp-image-12953\"></figure>\n<p><strong>Explanation</strong>: The doubly linked list is reversed and its last node is returned at the new head pointer.</p>\n<p><strong>Example 2:</strong></p>\n<p><strong>Input Format:</strong></p>\n<p>DLL: 10 &lt;-&gt; 20 &lt;-&gt; 30</p>\n<figure class=\"wp-block-image size-large\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/11/dll-insertatend-ex1-2-1024x244.png\" alt=\"\" class=\"wp-image-12954\"></figure>\n<p><strong>Result</strong>: DLL: 30 &lt;-&gt; 20 &lt;-&gt; 10</p>\n<figure class=\"wp-block-image size-large\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/11/dll-reverse-2-1024x231.png\" alt=\"\" class=\"wp-image-12955\"></figure>\n<p><strong>Explanation</strong>: In this case, the doubly linked list is reversed and its former tail is returned as its new head.</p>\n</pre>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Practice Section-->\n<div class=\"practice\">\n<span><strong>Practice: </strong></span>\n<div class=\"problem-buttons\">\n\n<!-- Add Problem Link inside href -->\n<a href=\"https://www.codingninjas.com/studio/problems/reverse-a-doubly-linked-list_1116098?utm_source=striver&amp;utm_medium=website&amp;utm_campaign=a_zcoursetuf\" target=\"_blank\" rel=\"noopener\">\n<span>Solve Problem</span>\n<img src=\"https://static.takeuforward.org/wp/uploads/2023/04/Group-11-5.png\" alt=\"code-studio\">\n</a>\n</div>\n</div>\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\nyourself first. </em></p>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<div class=\"horizontal_navbar_dsa_article\">\n<div class=\"grid_container_two\">\n<a href=\"#brute-force-approach\" class=\"two-boxes box-a\">\nBrute Force Approach\n</a>\n<a href=\"#optimal-approach\" class=\"two-boxes box-c\">\nOptimal Approach\n</a>\n<a href=\"#dsa_article_video_explanation\" class=\"three-boxes box-d\">\n<svg width=\"26\" height=\"26\" viewBox=\"0 0 20 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M8 10L13.19 7L8 4V10ZM19.56 2.17C19.69 2.64 19.78 3.27 19.84 4.07C19.91 4.87 19.94 5.56 19.94 6.16L20 7C20 9.19 19.84 10.8 19.56 11.83C19.31 12.73 18.73 13.31 17.83 13.56C17.36 13.69 16.5 13.78 15.18 13.84C13.88 13.91 12.69 13.94 11.59 13.94L10 14C5.81 14 3.2 13.84 2.17 13.56C1.27 13.31 0.69 12.73 0.44 11.83C0.31 11.36 0.22 10.73 0.16 9.93C0.0900001 9.13 0.0599999 8.44 0.0599999 7.84L0 7C0 4.81 0.16 3.2 0.44 2.17C0.69 1.27 1.27 0.69 2.17 0.44C2.64 0.31 3.5 0.22 4.82 0.16C6.12 0.0899998 7.31 0.0599999 8.41 0.0599999L10 0C14.19 0 16.8 0.16 17.83 0.44C18.73 0.69 19.31 1.27 19.56 2.17Z\" fill=\"red\"></path>\n</svg>\n\n</a>\n<div class=\"box-e tooltip\">\n<svg viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M12.842 9.25L11.9577 10.17C11.2502 10.89 10.8081 11.5 10.8081 13H8.84297V12.5C8.84297 11.39 9.28511 10.39 9.99255 9.67L11.2109 8.41C11.5745 8.05 11.7906 7.55 11.7906 7C11.7906 6.46957 11.5836 5.96086 11.2151 5.58579C10.8465 5.21071 10.3467 5 9.82552 5C9.30434 5 8.80451 5.21071 8.43598 5.58579C8.06745 5.96086 7.86041 6.46957 7.86041 7H5.89531C5.89531 5.93913 6.30938 4.92172 7.04644 4.17157C7.7835 3.42143 8.78316 3 9.82552 3C10.8679 3 11.8675 3.42143 12.6046 4.17157C13.3417 4.92172 13.7557 5.93913 13.7557 7C13.7543 7.84324 13.4259 8.65183 12.842 9.25ZM10.8081 17H8.84297V15H10.8081M9.82552 0C8.53521 0 7.25754 0.258658 6.06545 0.761205C4.87337 1.26375 3.79021 2.00035 2.87783 2.92893C1.03519 4.8043 0 7.34784 0 10C0 12.6522 1.03519 15.1957 2.87783 17.0711C3.79021 17.9997 4.87337 18.7362 6.06545 19.2388C7.25754 19.7413 8.53521 20 9.82552 20C12.4314 20 14.9306 18.9464 16.7732 17.0711C18.6158 15.1957 19.651 12.6522 19.651 10C19.651 4.47 15.2296 0 9.82552 0Z\" fill=\"black\"></path>\n</svg>\n<div class=\"bottom\">\n<p>Expand any one approach by clicking the given options in the bar. Clicking one approach on bar,\ncloses all other expands. You can manually expand more than one approach at a time</p>\n<i></i>\n</div>\n\n</div>\n</div>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Approaches Drop-Down -->\n<div class=\"dsa_article_dropdown_approachs \">\n\n<!-- Brute Force Approach Starts from here -->\n<div id=\"brute-force-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nBrute Force Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n\n<p>A brute-force approach involves replacing data in a doubly linked list. First, we traverse the list and store node data in a stack. Then, in a second pass, we assign elements from the stack to nodes, ensuring a reverse order replacement since stacks follow the <strong>Last-In-First-Out (LIFO)</strong> principle.</p>\n\n<h3><strong>Algorithm:</strong> </h3>\n\n<p>Step 1: Initialization a <strong>temp</strong> pointer to the <strong>head</strong> of the doubly linked list and a <strong>stack</strong> data structure to store the values from the list.</p>\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/11/dll-reverse-a1-step1-1024x363.png\" alt=\"\" class=\"wp-image-12957\"></figure>\n\n<p><strong>Step 2:</strong> <strong>Traverse</strong> the doubly linked list with the <strong>temp</strong> pointer and while traversing push the value<strong> </strong>at the <strong>current</strong> <strong>node</strong> <strong>temp</strong> onto the stack. Move the <strong>temp</strong> to the <strong>next</strong> <strong>node</strong> continuing <strong>until temp reaches null</strong> indicating the end of the list.</p>\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/11/dll-reverse-a1-step2-1024x813.jpg\" alt=\"\" class=\"wp-image-12958\"></figure>\n\n<p><strong>Step 3:</strong> <strong>Reset </strong>the<strong> temp </strong>pointer back to the <strong>head</strong> of the list and in thissecond iteration <strong>pop the element </strong>from the stack, replace the data at the <strong>current node</strong> with the popped value from the<strong> top </strong>of the stack and move temp to the next node. Repeat this step until temp reaches <strong>null</strong> or the<strong> stack </strong>becomes<strong> empty.</strong></p>\n<figure class=\"wp-block-image size-large\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/11/dll-reverse-a3-step3-1024x958.jpg\" alt=\"\" class=\"wp-image-12959\"></figure>\n\n<p></p>\n\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\n// Define a Node class for doubly linked list\nclass Node {\npublic:\n    // Data stored in the node\n    int data;   \n    // Pointer to the next node in the list \n    //(forward direction)\n    Node* next;     \n    // Pointer to the previous node in the list\n    //(backward direction)\n    Node* back;     \n\n    // Constructor for a Node with both data,\n    //a reference to the next node,\n    //and a reference to the previous node\n    Node(int data1, Node* next1, Node* back1) {\n        data = data1;\n        next = next1;\n        back = back1;\n    }\n\n    // Constructor for a Node with data,\n    //and no references to the next and\n    //previous nodes (end of the list)\n    Node(int data1) {\n        data = data1;\n        next = nullptr;\n        back = nullptr;\n    }\n};\n\n// Function to convert an array\n// to a doubly linked list\nNode* convertArr2DLL(vector&lt;int&gt; arr) {\n    // Create the head node with\n    //the first element of the array\n    \n    Node* head = new Node(arr[0]);\n    \n    // Initialize 'prev' to the head node\n    Node* prev = head;            \n\n    for (int i = 1; i &lt; arr.size(); i++) {\n        // Create a new node with data from the\n        //array and set its 'back' pointer to\n        //the previous node\n        \n        Node* temp = new Node(arr[i], nullptr, prev);\n        // Update the 'next' pointer of the\n        //previous node to point to\n        //the new node\n        prev-&gt;next = temp; \n         // Move 'prev' to the newly created\n         //node for the next iteration\n        prev = temp;       \n    }\n    // Return the head of the doubly linked list\n    return head;  \n}\n\n// Function to print the elements\n//of the doubly linked list\nvoid print(Node* head) {\n    while (head != nullptr) {\n        // Print the data in the tail node\n        cout &lt;&lt; head-&gt;data &lt;&lt; \" \";  \n         // Move to the next node\n        head = head-&gt;next;         \n    }\n}\n\n \n// Funcion to reverse a doubly linked list\n// Stack Brute Force Approach\nNode* reverseDLL(Node* head){\n    // if head is empty or there is only one element\n    // we can directly just return the head\n    if(head==NULL || head-&gt;next == NULL){\n        return head;\n    }\n    \n    // Initialise a stack st\n    stack&lt;int&gt; st;\n    \n    // Initialise the node pointer temp at head\n    Node* temp = head;\n    \n    // Traverse the doubly linked list via the temp pointer\n    while(temp!=NULL){\n        // insert the data of the current node into the stack\n        st.push(temp-&gt;data);\n        // traverse further\n        temp = temp-&gt;next;\n    }\n    \n    // Reinitialise temp to head\n    temp = head;\n    \n    // Second iteration of the DLL to replace the values\n    while(temp!=NULL){\n        // Replace the value pointed via temp with\n        // the value from the top of the stack\n        temp-&gt;data = st.top();\n        // Pop the value from the stack\n        st.pop();\n        // Traverse further\n        temp = temp-&gt;next;\n    }\n    \n    // Return the updated doubly linked \n    // where the values of nodes from both ends \n    // has been swapped\n    return head;\n\n}\n\n\nint main() {\n    vector&lt;int&gt; arr = {12, 5, 8, 7, 4};\n    Node* head = convertArr2DLL(arr);\n    cout &lt;&lt; endl &lt;&lt; \"Doubly Linked List Initially:  \" &lt;&lt; endl;\n    print(head);\n    cout &lt;&lt; endl &lt;&lt; \"Doubly Linked List After Reversing \" &lt;&lt; endl;\n    \n     // Insert a node with value 10 at the end\n    head = reverseDLL(head);\n    print(head);\n}\n\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.Stack;\n\npublic class DLinkedList {\n    public static class Node {\n        // Data stored in the node\n        public int data;\n        // Reference to the next node\n        //in the list (forward direction)\n        public Node next;\n        // Reference to the previous nod\n        //in the list (backward direction)\n        public Node back;\n\n        // Constructor for a Node with both data, \n        //a reference to the next node, and a\n        //reference to the previous node\n        public Node(int data1, Node next1, Node back1) {\n            data = data1;\n            next = next1;\n            back = back1;\n        }\n\n        // Constructor for a Node with data,\n        //and no references to the next and\n        //previous nodes (end of the list)\n        public Node(int data1) {\n            data = data1;\n            next = null;\n            back = null;\n        }\n    }\n\n    private static Node convertArr2DLL(int[] arr) {\n        // Create the head node with the\n        //first element of the array\n        Node head = new Node(arr[0]);\n        // Initialize 'prev' to the head node\n        Node prev = head;\n\n        for (int i = 1; i &lt; arr.length; i++) {\n            // Create a new node with data from\n            // the array and set its 'back' pointer\n            // to the previous node\n            \n            Node temp = new Node(arr[i], null, prev);\n            // Update the 'next' pointer of the\n            // previous node to point to the new node\n            \n            prev.next = temp;\n            // Move 'prev' to the newly created node\n            //for the next iteration\n            prev = temp;\n        }\n        // Return the head of the doubly linked list\n        return head;\n    }\n\n    private static void print(Node head) {\n        while (head != null) {\n            // Print the data in the current node\n            System.out.print(head.data + \" \");\n            // Move to the next node\n            head = head.next; \n        }\n        System.out.println();\n    }\n    \n        // Initialise a stack st\n    Stack&lt;Integer&gt; st = new Stack&lt;&gt;();\n    \n    // Initialise the node pointer temp at head\n    Node temp = head;\n    \n    // Traverse the doubly linked list via the temp pointer\n    while(temp!=null){\n        // insert the data of the current node into the stack\n        st.push(temp.data);\n        // traverse further\n        temp = temp.next;\n    }\n    \n    // Reinitialise temp to head\n    temp = head;\n    \n    // Second iteration of the DLL to replace the values\n    while(temp!=null){\n        // Replace the value pointed via temp with\n        // the value from the top of the stack and pop it\n        temp.data = st.pop();\n\n        // Traverse further\n        temp = temp.next;\n    }\n    \n    // Return the updated doubly linked \n    // where the values of nodes from both ends \n    // has been swapped\n    return head;\n\n    }\n\n    \n\n    public static void main(String[] args) {\n        int[] arr = {12, 5, 6, 8, 4};\n        // Convert the array to a doubly linked list\n        Node head = convertArr2DLL(arr);\n\n        // Print the doubly linked list\n        System.out.println(\u201cDoubly Linked List Initially:  \u201c);\n        print(head);\n\n        System.out.println(\"Doubly Linked List After Reversing :\");\n\n        head = reverseDLL(head);\n        print(head);\n\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\nclass Node:\n    def __init__(self, data, next_node=None, back_node=None):\n        # Data stored in the node\n        self.data = data\n        # Reference to the next node\n        # in the list (forward direction)\n        self.next = next_node\n        # Reference to the previous node\n        # in the list (backward direction)\n        self.back = back_node\n\ndef convert_arr_to_dll(arr):\n    # Create the head node with\n    # the first element of the array\n    head = Node(arr[0])\n    # Initialize 'prev' to the head node\n    prev = head\n\n    for i in range(1, len(arr)):\n        # Create a new node with data from the\n        # array and set its 'back' pointer\n        # to the previous node\n        temp = Node(arr[i], None, prev)\n        \n        # Update the 'next' pointer of the\n        # previous node to point to the new node\n        prev.next = temp\n        # Move 'prev' to the newly created \n        # node for the next iteration\n        prev = temp\n\n    # Return the head of the doubly linked list\n    return head\n\ndef print_dll(head):\n    while head is not None:\n        # Print the data in the current node\n        print(head.data, end=\" \")\n        # Move to the next node\n        head = head.next\n    print()\n\n\ndef reverse_dll(head):\n    # If head is empty or there is only\n    # one element, return the head directly\n    if head is None or head.next is None:\n        return head\n\n    # Initialize a stack to store values\n    st = []\n    # Initialize the node pointer\n    #'temp' at head\n    temp = head\n\n    # Traverse the doubly linked list\n    # via the 'temp' pointer\n    while temp is not None:\n        # Insert the data of the current\n        # node into the stack\n        st.append(temp.data)\n        # Traverse further\n        temp = temp.next\n\n    # Reinitialize 'temp' to head\n    temp = head\n\n    # Second iteration of the DLL\n    # to replace the values\n    while temp is not None:\n        # Replace the value pointed to\n        # by 'temp' with the value from\n        # the top of the stack and pop it\n        temp.data = st.pop()\n        # Traverse further\n        temp = temp.next\n\n    # Return the updated doubly linked list\n    # where the values of nodes from both\n    # ends have been swapped\n    return head\n\n\n# Example usage:\narr = [12, 5, 6, 8, 4]\n# Convert the array to a\n# doubly linked list\nhead = convert_arr_to_dll(arr)\n# Print the doubly linked list\nprint('Doubly Linked List Initially:  ')\nprint_dll(head)\n\nprint('Doubly Linked List After Reversing :')\n\n# Reverse the doubly linked list\nhead = reverse_dll(head)\n# Print the reversed doubly linked list\nprint_dll(head)\n\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n// Define the Node class for a doubly linked list\nclass Node {\n    constructor(data, next, back) {\n        this.data = data;\n        this.next = next;\n        this.back = back;\n    }\n}\n\n// Function to convert an array\n// to a doubly linked list\nfunction convertArr2DLL(arr) {\n    // Create the head node with \n    // the first element of the array\n    let head = new Node(arr[0]);\n    // Initialize 'prev' to the head node\n    let prev = head;\n\n    for (let i = 1; i &lt; arr.length; i++) {\n        // Create a new node with data from\n        // the array and set its 'back' pointer\n        // to the previous node\n        let temp = new Node(arr[i], null, prev);\n        // Update the 'next' pointer of the\n        // previous node to point to the new node\n        prev.next = temp;\n        // Move 'prev' to the newly created\n        // node for the next iteration\n        prev = temp;\n    }\n    // Return the head of the\n    // doubly linked list\n    return head;\n}\n\n// Function to print the elements\n// of the doubly linked list\nfunction print(head) {\n    while (head !== null) {\n        // Print the data in the current node\n        console.log(head.data + \" \");\n        // Move to the next node\n        head = head.next;\n    }\n    console.log();\n}\n\n// Function to reverse the data of a doubly linked list\nfunction reverseDLL(head) {\n    if (head === null || head.next === null) {\n        // If the list is empty or has only one element, no need to reverse\n        return head;\n    }\n\n    let st = []; // Create a stack to store data temporarily\n    let temp = head;\n\n    // First iteration: Push data into the stack while traversing\n    while (temp !== null) {\n        st.push(temp.data);\n        temp = temp.next;\n    }\n\n    temp = head;\n\n    // Second iteration: Pop data from the stack and update the list's nodes\n    while (temp !== null) {\n        temp.data = st.pop();\n        temp = temp.next;\n    }\n\n    return head;\n}\n\nconst arr = [12, 5, 6, 8, 4];\n// Convert the array to a doubly linked list\nlet head = convertArr2DLL(arr);\n// Print the doubly linked list\nconsole.log(\"Doubly Linked List Initially:  \");\nprint(head);\n\nconsole.log(\"Doubly Linked List After Reversing :\");\n\nhead = reverseDLL(head);\nprint(head);\n\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Brute Force Here -->\n<strong>Output:</strong> \nDoubly Linked List Initially:  \n12 5 6 8 4 \nDoubly Linked List After Reversing :\n4 8 6 5 12\n\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n<!-- Insert Time and Space Complexity of Brute Force Here -->\nTime Complexity : O(2N) During the first traversal, each node's value is pushed into the stack once, which requires O(N) time. Then, during the second iteration, the values are popped from the stack and used to update the nodes.\nSpace Complexity : O(N) This is because we are using an external stack data structure. At the end of the first iteration, the stack will hold all N values of the doubly linked list therefore the space required for stack is directly proportional to the size of the input doubly linked list.\n</p>\n</details>\n</div>\n</details>\n</div>\n<!-- Brute Force Approach Ends here -->\n\n\n<!-- Optimal Approach Starts from here -->\n\n<div id=\"optimal-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nOptimal Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm of Better Approach Here -->\n<h3><strong>Reverse the Links in a Single Traversal</strong></h3>\n<p>Instead of performing two separate traversals of the linked list and storing its node values in an external data structure, we can <strong>optimize</strong> our approach by directly <strong>modifying the links between the nodes </strong>within the doubly linked list <strong>in place</strong>, as visualized below:</p>\n<figure class=\"wp-block-image size-large\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/11/dll-reverselist-1024x365.png\" alt=\"\" class=\"wp-image-12962\"></figure>\n<p>We need to traverse on every node, and for every node change the next pointer and back pointer. If we can do this for all nodes, at the end of traversal, the doubly linked list will be reversed.</p>\n<figure class=\"wp-block-image size-large\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/11/dll-reverseLinks-1024x345.png\" alt=\"\" class=\"wp-image-12963\"></figure>\n<h3><strong>Algorithm:</strong></h3>\n<p><strong>Step 1</strong>: Initialise <strong>two pointers</strong> that are needed for the reversal. Initialize a <strong>current</strong> pointer to the <strong>head</strong> of the linked list. This pointer will <strong>traverse</strong> the list as we <strong>reverse</strong> it. Initialize a second pointer <strong>last</strong> to null. This pointer will be used for <span style=\"background-color: rgba(48, 48, 48, 0.2);\"><b>temporary s</b></span><strong>torage</strong> during <strong>pointer swapping, </strong>as we need a third variable while swapping two data<strong>.</strong></p>\n<figure class=\"wp-block-image size-large\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/11/dll-reversea2-step1-1024x238.png\" alt=\"\" class=\"wp-image-12964\"></figure>\n<p><strong>Step 2: </strong>Traverse through the DLL by looping over all the nodes.<strong>.</strong></p>\n<p><strong>Step 3: </strong>While iterating over all nodes in the linked list, we make changes to set the <strong>backward</strong> pointer of a node to the <strong>next</strong> changing its <strong>previous</strong> <strong>link</strong>. Along with this, the <strong>forward</strong> pointer is adjusted to point to the <strong>previous</strong> node, reversing the <strong>next</strong> <strong>link</strong>. To prevent losing the last node in this process, we use a <strong>reference</strong> to the <strong>last</strong> <strong>node</strong> to retain it.</p>\n<figure class=\"wp-block-image size-large\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/11/Screenshot-2023-11-11-at-10.13.00-PM-1024x359.png\" alt=\"\" class=\"wp-image-12965\"></figure>\n<ul><li>Update the <strong>current</strong> <strong>node's</strong> <strong>back</strong> pointer to point to the <strong>next</strong> <strong>node</strong> (c<strong>urrent-&gt;back = current-&gt;next</strong>). This step reverses the direction of the <strong>backward</strong> pointer.</li></ul>\n<figure class=\"wp-block-image size-large\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/11/dll-reverse-a2-atep3a-1024x316.png\" alt=\"\" class=\"wp-image-12966\"></figure>\n<ul><li>Update the <strong>current</strong> <strong>node's</strong> <strong>next</strong> pointer to point to the <strong>previous</strong> <strong>node</strong> (current-&gt;next = last). This step r<strong>everses the direction of the forward pointer.</strong></li></ul>\n<figure class=\"wp-block-image size-large\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/11/dll-reverse-a2-step3-c-1024x300.png\" alt=\"\" class=\"wp-image-12967\"></figure>\n<ul><li>Move the current pointer <strong>one step forward </strong>(current = current-&gt;back). This allows us to continue the reversal process.</li></ul>\n<p><strong>Step 4:</strong> After completing the traversal, the <strong>last</strong> node ends up at the <strong>second</strong> <strong>node</strong> in the reversed doubly linked list. To obtain the <strong>new</strong> <strong>head</strong> of the reversed list, we simply use the <strong>backward</strong> <strong>pointer</strong> of the <strong>last</strong> <strong>node</strong>, which points to the <strong>new</strong> <strong>head</strong>.</p>\n<p>To ensure that we handle the case where the traversal ended at the original list's end (i.e., the last pointer is not null), we <strong>update</strong> the <strong>head</strong> <strong>pointer</strong> to point to the <strong>new</strong> <strong>head</strong> of the reversed list, which is stored in the <strong>last</strong> <strong>pointer</strong>.</p>\n<p>Finally, we return the <strong>head</strong> <strong>pointer</strong>, now pointing to the head of the fully reversed doubly linked list.</p>\n<figure class=\"wp-block-image size-large\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/11/dll-reverse-a1-cum-739x1024.jpg\" alt=\"\" class=\"wp-image-12968\"></figure>\n<p></p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;iostream&gt;\n#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\n// Define a Node class for doubly linked list\nclass Node {\npublic:\n    // Data stored in the node\n    int data;   \n    // Pointer to the next node in the list \n    //(forward direction)\n    Node* next;     \n    // Pointer to the previous node in the list\n    //(backward direction)\n    Node* back;     \n\n    // Constructor for a Node with both data,\n    //a reference to the next node,\n    //and a reference to the previous node\n    Node(int data1, Node* next1, Node* back1) {\n        data = data1;\n        next = next1;\n        back = back1;\n    }\n\n    // Constructor for a Node with data,\n    //and no references to the next and\n    //backious nodes (end of the list)\n    Node(int data1) {\n        data = data1;\n        next = nullptr;\n        back = nullptr;\n    }\n};\n\n// Function to convert an array\n// to a doubly linked list\nNode* convertArr2DLL(vector&lt;int&gt; arr) {\n    // Create the head node with\n    //the first element of the array\n    \n    Node* head = new Node(arr[0]);\n    \n    // Initialize 'prev' to the head node\n    Node* prev = head;            \n\n    for (int i = 1; i &lt; arr.size(); i++) {\n        // Create a new node with data from the\n        //array and set its 'back' pointer to\n        //the previous node\n        \n        Node* temp = new Node(arr[i], nullptr, prev);\n        // Update the 'next' pointer of the\n        //previous node to point to\n        //the new node\n        prev-&gt;next = temp; \n         // Move 'prev' to the newly created\n         //node for the next iteration\n        prev = temp;       \n    }\n    // Return the head of the doubly linked list\n    return head;  \n}\n\n// Function to print the elements\n//of the doubly linked list\nvoid print(Node* head) {\n    while (head != nullptr) {\n        // Print the data in the tail node\n        cout &lt;&lt; head-&gt;data &lt;&lt; \" \";  \n         // Move to the next node\n        head = head-&gt;next;         \n    }\n}\n\n \n// Function to reverse a doubly linked list\n// In-place link exchange method\nNode* reverseDLL(Node* head) {\n    \n    // Check if the list is empty\n    // or has only one node\n    if (head == NULL || head-&gt;next == NULL) {\n        // No change is needed;\n        // return the current head\n        return head; \n    }\n    \n     // Initialize a pointer to\n     // the previous node\n    Node* prev = NULL;  \n    \n    // Initialize a pointer to\n    // the current node\n    Node* current = head;   \n\n    // Traverse the linked list\n    while (current != NULL) {\n        // Store a reference to\n        // the previous node\n        prev = current-&gt;back; \n        \n        // Swap the previous and\n        // next pointers\n        current-&gt;back = current-&gt;next; \n        \n        // This step reverses the links\n        current-&gt;next = prev;          \n        \n        // Move to the next node\n        // in the original list\n        current = current-&gt;back; \n    }\n    \n    // The final node in the original list\n    // becomes the new head after reversal\n    return prev-&gt;back;\n}\n\n\nint main() {\n    vector&lt;int&gt; arr = {12, 5, 8, 7, 4};\n    Node* head = convertArr2DLL(arr);\n    cout &lt;&lt; endl &lt;&lt; \"Doubly Linked List Initially:  \" &lt;&lt; endl;\n    print(head);\n    cout &lt;&lt; endl &lt;&lt; \"Doubly Linked List After Reversing \" &lt;&lt; endl;\n    \n     // Insert a node with value 10 at the end\n    head = reverseDLL(head);\n    print(head);\n\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.Stack;\n\npublic class DLinkedList {\n    public static class Node {\n        // Data stored in the node\n        public int data;\n        // Reference to the next node\n        //in the list (forward direction)\n        public Node next;\n        // Reference to the previous nod\n        //in the list (backward direction)\n        public Node back;\n\n        // Constructor for a Node with both data, \n        //a reference to the next node, and a\n        //reference to the previous node\n        public Node(int data1, Node next1, Node back1) {\n            data = data1;\n            next = next1;\n            back = back1;\n        }\n\n        // Constructor for a Node with data,\n        //and no references to the next and\n        //previous nodes (end of the list)\n        public Node(int data1) {\n            data = data1;\n            next = null;\n            back = null;\n        }\n    }\n\n    private static Node convertArr2DLL(int[] arr) {\n        // Create the head node with the\n        //first element of the array\n        Node head = new Node(arr[0]);\n        // Initialize 'prev' to the head node\n        Node prev = head;\n\n        for (int i = 1; i &lt; arr.length; i++) {\n            // Create a new node with data from\n            // the array and set its 'back' pointer\n            // to the previous node\n            \n            Node temp = new Node(arr[i], null, prev);\n            // Update the 'next' pointer of the\n            // previous node to point to the new node\n            \n            prev.next = temp;\n            // Move 'prev' to the newly created node\n            //for the next iteration\n            prev = temp;\n        }\n        // Return the head of the doubly linked list\n        return head;\n    }\n\n    private static void print(Node head) {\n        while (head != null) {\n            // Print the data in the current node\n            System.out.print(head.data + \" \");\n            // Move to the next node\n            head = head.next; \n        }\n        System.out.println();\n    }\n    \n    private static Node reverseDLL(Node head) {\n        // Check if the list is empty\n        // or has only one node\n        if (head == null || head.next == null) {\n            // No change is needed;\n            // return the current head\n            return head; \n        }\n        \n         // Initialize a pointer to\n         // the previous node        \n        Node prev = null;\n        \n        // Initialize a pointer to\n        // the current node\n        Node current = head;\n        \n        // Traverse the linked list\n        while (current != null) {\n            \n            // Store a reference to\n            // the previous node\n            prev = current.back;\n            \n            // Swap the previous and\n            // next pointers\n            current.back = current.next;\n            \n            // This step reverses the links\n            current.next = prev;\n            \n            // Move to the next node\n            // in the orignal list\n            \n            current = current.back;\n        }\n\n        // The final node in the original list\n        // becomes the new head after reversal\n        return prev.back;\n    }\n\n    \n\n    public static void main(String[] args) {\n        int[] arr = {12, 5, 6, 8, 4};\n        // Convert the array to a doubly linked list\n        Node head = convertArr2DLL(arr);\n\n        // Print the doubly linked list\n        System.out.println(\u201cDoubly Linked List Initially:  \u201c);\n        print(head);\n\n        System.out.println(\"Doubly Linked List After Reversing :\");\n\n        head = reverseDLL(head);\n        print(head);\n\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\nclass Node:\n    def __init__(self, data, next_node=None, back_node=None):\n        # Data stored in the node\n        self.data = data\n        # Reference to the next node\n        # in the list (forward direction)\n        self.next = next_node\n        # Reference to the previous node\n        # in the list (backward direction)\n        self.back = back_node\n\ndef convert_arr_to_dll(arr):\n    # Create the head node with\n    # the first element of the array\n    head = Node(arr[0])\n    # Initialize 'prev' to the head node\n    prev = head\n\n    for i in range(1, len(arr)):\n        # Create a new node with data from the\n        # array and set its 'back' pointer\n        # to the previous node\n        temp = Node(arr[i], None, prev)\n        \n        # Update the 'next' pointer of the\n        # previous node to point to the new node\n        prev.next = temp\n        # Move 'prev' to the newly created \n        # node for the next iteration\n        prev = temp\n\n    # Return the head of the doubly linked list\n    return head\n\ndef print_dll(head):\n    while head is not None:\n        # Print the data in the current node\n        print(head.data, end=\" \")\n        # Move to the next node\n        head = head.next\n    print()\n\ndef reverse_dll(head):\n    # Check if the list is empty\n    # or has only one node\n    if head is None or head.next is None:\n        # No change is needed;\n        # return the current head\n        return head\n    \n    # Initialize a pointer to\n    # the previous node\n    prev = None  \n    \n    # Initialize a pointer\n    # to the current node\n    current = head  \n\n    # Traverse the linked list\n    while current is not None:\n        \n        # Store a reference to\n        # the previous node\n        prev = current.back \n\n        # Swap the previous and next pointers\n        current.back = current.next\n        \n         # This step reverses the links\n        current.next = prev \n        \n        # Move to the next node\n        # in the original list\n        current = current.back  \n\n    # The final node in the original list\n    # becomes the new head after reversal\n    return prev.back\n\n# Example usage:\narr = [12, 5, 6, 8, 4]\n# Convert the array to a\n# doubly linked list\nhead = convert_arr_to_dll(arr)\n# Print the doubly linked list\nprint('Doubly Linked List Initially:  ')\nprint_dll(head)\n\nprint('Doubly Linked List After Reversing :')\n\n# Reverse the doubly linked list\nhead = reverse_dll(head)\n# Print the reversed doubly linked list\nprint_dll(head)\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n// Define the Node class for a doubly linked list\nclass Node {\n    constructor(data, next, back) {\n        this.data = data;\n        this.next = next;\n        this.back = back;\n    }\n}\n\n// Function to convert an array\n// to a doubly linked list\nfunction convertArr2DLL(arr) {\n    // Create the head node with \n    // the first element of the array\n    let head = new Node(arr[0]);\n    // Initialize 'prev' to the head node\n    let prev = head;\n\n    for (let i = 1; i &lt; arr.length; i++) {\n        // Create a new node with data from\n        // the array and set its 'back' pointer\n        // to the previous node\n        let temp = new Node(arr[i], null, prev);\n        // Update the 'next' pointer of the\n        // previous node to point to the new node\n        prev.next = temp;\n        // Move 'prev' to the newly created\n        // node for the next iteration\n        prev = temp;\n    }\n    // Return the head of the\n    // doubly linked list\n    return head;\n}\n\n// Function to print the elements\n// of the doubly linked list\nfunction print(head) {\n    while (head !== null) {\n        // Print the data in the current node\n        console.log(head.data + \" \");\n        // Move to the next node\n        head = head.next;\n    }\n    console.log();\n}\n\n// Function to reverse a doubly linked list\nfunction reverseDLL(head) {\n    // Check if the list is empty\n    // or has only one node\n    if (head === null || head.next === null) {\n        // No change is needed;\n        // return the current head\n        return head;\n    }\n    \n    // Initialize a pointer to\n    // the previous node\n    let prev = null; \n    \n    // Initialize a pointer\n    // to the current node\n    let current = head; \n\n    // Traverse the linked list\n    while (current !== null) {\n        // Store a reference to\n        // the previous node\n        prev = current.prev;\n\n        // Swap the previous\n        // and next pointers\n        current.prev = current.next;\n        \n         // This step reverses the links\n        current.next = prev;\n\n        // Move to the next node\n        // in the original list\n        current = current.prev; \n    }\n\n    // The final node in the original\n    // list becomes the new head after reversal\n    return prev.prev;\n}\n\nconst arr = [12, 5, 6, 8, 4];\n// Convert the array to a doubly linked list\nlet head = convertArr2DLL(arr);\n// Print the doubly linked list\nconsole.log(\"Doubly Linked List Initially:  \");\nprint(head);\n\nconsole.log(\"Doubly Linked List After Reversing :\");\n\nhead = reverseDLL(head);\nprint(head);\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Optimal Apporach Here -->\n<strong>Output:</strong> \nDoubly Linked List Initially:  \n12 5 6 8 4 \nDoubly Linked List After Reversing :\n4 8 6 5 12\n\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Optimal Approach-->\n</p><p><strong>Time Complexity : O(N) </strong>We only have to <strong>traverse</strong> the doubly linked list <strong>once</strong>, hence our time complexity is O(N).</p>\n<p><strong>Space Complexity : O(1), </strong>as the reversal is done in place.</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Optimal Approach Starts from here -->\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n<details>\n<summary class=\"main-summary\">\n<span>\nVideo Explanation\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"yt-video-wrapper\">\n\n<!-- Insert iframe embed Link of Youtube Video-->\n<iframe class=\"lazy-loaded\" loading=\"lazy\" title=\"Reverse a Doubly Linked List\" width=\"810\" height=\"456\" data-lazy-type=\"iframe\" data-src=\"https://www.youtube.com/embed/u3WUW2qe6ww?si=xGoLY3QIqFycpPlo\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\" src=\"https://www.youtube.com/embed/u3WUW2qe6ww?feature=oembed\"></iframe><noscript>\n<iframe loading=\"lazy\" title=\"Reverse a Doubly Linked List\" width=\"810\" height=\"456\" src=\"https://www.youtube.com/embed/u3WUW2qe6ww?si=xGoLY3QIqFycpPlo\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe></noscript>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script>\n\nconst codeSections = document.querySelectorAll('.code-section');\n\n// Get last selected language from localStorage or set default value\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\n// Update last selected language for all sections and store in localStorage\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\n// Handle copy button click event\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\n// Set initial state of the tabs\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<script>\nconst codeSections = document.querySelectorAll('.code-section');\n\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script src=\"https://takeuforward.org/UXApproachDropDowns/2ApproachJSScript.js\"></script>\n<!-- /wp:html -->\n\n<!-- wp:paragraph -->\n<p>In case you are learning DSA, you should definitely check out our free&nbsp;<a href=\"https://takeuforward.org/strivers-a2z-dsa-course/strivers-a2z-dsa-course-sheet-2/\">A2Z DSA Course</a>&nbsp;with videos and blogs.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;</em><strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268\" target=\"_blank\" rel=\"noreferrer noopener\">Gauri Tomar</a></strong><em>&nbsp;for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->"
}