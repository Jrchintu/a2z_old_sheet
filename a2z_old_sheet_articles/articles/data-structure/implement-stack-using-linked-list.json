{
    "dislikes": 9,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:10:31 GMT+0530 (India Standard Time)",
    "slug": "implement-stack-using-linked-list",
    "aid": "1799",
    "title": "Implement stack using linked list",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/implement-stack-using-linkedlist",
    "topics": [
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "linked-list",
            "topic-title": "Linked List"
        },
        {
            "topic-id": "stack",
            "topic-title": "Stack"
        }
    ],
    "content": "<!-- wp:paragraph -->\n<p><strong>Pre-requisites: </strong>Basic knowledge of stack and operations in the linked list.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Introduction</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Stack is a linear data structure in which elements are stored like a <em>pile</em><strong><em>, </em></strong>i.e. one on top of another.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The following diagram represents a simple stack</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Following operations can be performed in the stack:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li>push(): pushes an element at the top of the stack.</li><li>pop(): removes an element from the top of the stack.</li><li>size(): returns the size of the stack.</li><li>isEmpty(): returns a boolean value for whether the stack is empty or not.</li><li>peek()/top(): returns the top element of the stack.</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Implementation of stack</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The stack can be implemented in two ways:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li>Statically:&nbsp; Using arrays</li><li>Dynamically: Using a linked list</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>In this article, we\u2019ll focus more on the implementation of a stack using a linked list.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Approach</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Let's focus on each and every operation of the stack and see how we can implement it using a linked list.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We can assume our linked list to be a horizontal stack where the operations like deletion and insertion would take place at the top of the stack or at the head of the linked list.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>To perform all the operations our head of the linked list would act as the top of the stack.</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>push(): pushing an element at the top of a stack</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Pushing the element at the top of the stack would mean the same as pushing an element at the end of the linked list.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We can insert it at the beginning of the linked list using the following steps:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li>Create a node for our new element.</li><li>Point to the next pointer of our element node to point to the head of the linked list.</li><li>Make the element node our top node.</li><li>Increment the size variable.</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>For a more detailed explanation of insertion at the beginning of a linked list, refer to this article.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Let's see the function of this implementation</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    \n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">void stackPush(int x) {\n    stackNode * element = new stackNode(x);\n    element -&gt; next = top;\n    top = element;\n    cout &lt;&lt; \"Element pushed\" &lt;&lt; \"\\n\";\n    size++;\n  }\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">public void stackPush(int x) {\n    stackNode element = new stackNode(x);\n    element.next = top;\n    top = element;\n    System.out.println(\"Element pushed\");\n    size++;\n  }\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>pop(): removing an element from the top of a stack</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Removing an element from the top of the stack is the same as removing the element from the beginning of our linked list.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>The following steps are involved in the pop() method</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li>Check for <strong>underflow conditions</strong> in the stack.</li><li>Store the top node in a temp node and top node data in another variable.</li><li>Make the second node of our temp node a top.</li><li>Delete temp node.</li><li>Return the top node\u2019s data.</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>The following function explains the approach</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    \n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n int stackPop() {\n    if (top == NULL) {\n      return -1;\n    }\n    int topData = top -&gt; data;\n    stackNode * temp = top;\n    top = top -&gt; next;\n    delete temp;\n    size--;\n    return topData;\n  }\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">public int stackPop() {\n    if (top == null) return -1;\n    int topData = top.data;\n    stackNode temp = top;\n    top = top.next;\n    return topData;\n  }\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>size(): returns the size of the stack</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For this, we maintain a size variable. After each push operation, we increment the <strong>size</strong> variable and after each pop operation, we decrement the <strong>size</strong> variable.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Let\u2019s see the code implementation for this function.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    \n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">int stackSize() {\n    return size;\n  }\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">public int stackSize() {\n    return size;\n  }\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>isEmpty(): returns a boolean value for whether the stack is empty or not.</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To do this, we check if our top is equal to NULL.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Code implementation is as follows:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    \n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">bool stackIsEmpty() {\n    return top == NULL;\n  }\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">public boolean stackIsEmpty() {\n    return top == null;\n  }\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The following code compiles every function to form a complete stack implementation using a linked list.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    \n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include&lt;iostream&gt;\nusing namespace std;\n\nstruct stackNode {\n  int data;\n  stackNode * next;\n  int size;\n  stackNode(int d) {\n    data = d;\n    next = NULL;\n  }\n};\nstruct stack {\n  stackNode * top;\n  int size;\n  stack() {\n    top = NULL;\n    size = 0;\n  }\n  void stackPush(int x) {\n    stackNode * element = new stackNode(x);\n    element -&gt; next = top;\n    top = element;\n    cout &lt;&lt; \"Element pushed\" &lt;&lt; \"\\n\";\n    size++;\n  }\n  int stackPop() {\n    if (top == NULL) {\n      return -1;\n    }\n    int topData = top -&gt; data;\n    stackNode * temp = top;\n    top = top -&gt; next;\n    delete temp;\n    size--;\n    return topData;\n  }\n  int stackSize() {\n    return size;\n  }\n  bool stackIsEmpty() {\n    return top == NULL;\n  }\n  int stackPeek() {\n    if (top == NULL) return -1;\n    return top -&gt; data;\n  }\n  void printStack() {\n    stackNode * current = top;\n    while (current != NULL) {\n      cout &lt;&lt; current -&gt; data &lt;&lt; \" \";\n      current = current -&gt; next;\n    }\n  }\n};\nint main() {\n  stack s;\n  s.stackPush(10);\n  cout &lt;&lt; \"Element popped: \" &lt;&lt; s.stackPop() &lt;&lt; \"\\n\";\n  cout &lt;&lt; \"Stack size: \" &lt;&lt; s.stackSize() &lt;&lt; \"\\n\";\n  cout &lt;&lt;\"Stack empty or not? \"&lt;&lt;s.stackIsEmpty()&lt;&lt;\"\\n\";\n  cout &lt;&lt; \"stack's top element: \" &lt;&lt; s.stackPeek() &lt;&lt; \"\\n\";\n  return 0;\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Element pushed<br>Element popped: 10<br>Stack size: 0<br>Stack empty or not? 1<br>stack's top element: -1</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code class=\"\">class stack {\n  private class stackNode {\n    int data;\n    stackNode next;\n    stackNode(int d) {\n      data = d;\n      next = null;\n    }\n  }\n  stackNode top;\n  int size;\n  stack() {\n    this.top = null;\n    this.size = 0;\n  }\n  public void stackPush(int x) {\n    stackNode element = new stackNode(x);\n    element.next = top;\n    top = element;\n    System.out.println(\"Element pushed\");\n    size++;\n  }\n  public int stackPop() {\n    if (top == null) return -1;\n    int topData = top.data;\n    stackNode temp = top;\n    top = top.next;\n    return topData;\n  }\n  public int stackSize() {\n    return size;\n  }\n  public boolean stackIsEmpty() {\n    return top == null;\n  }\n  public void printStack() {\n    stackNode current = top;\n    while (current != null) {\n      System.out.print(current.data + \" \");\n      current = current.next;\n    }\n    System.out.println();\n  }\n}\nclass Main {\n  public static void main(String args[]) {\n    stack s = new stack();\n    s.stackPush(10);\n    s.stackPush(20);\n    s.printStack();\n    System.out.println(\"Element popped \" + s.stackPop());\n    System.out.println(\"Stack size: \" + s.stackSize());\n    System.out.println(\"Stack is empty or not: \" + s.stackIsEmpty());\n\n  }\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Element pushed<br>Element pushed<br>20 10<br>Element popped 20<br>Stack size: 2<br>Stack is empty or not: false</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;<strong><a href=\"https://www.linkedin.com/in/yash-m-374639108/\" target=\"_blank\" rel=\"noreferrer noopener\">Yash Mishra</a></strong></em>&nbsp;<em>for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->",
    "category_tag": "data-structure",
    "likes": 91,
    "preview": "Pre-requisites: Basic knowledge of stack and operations in the linked list. INTRODUCTION Stack is a linear data structure in which elements are stored like a pile, i.e. one on top of another. The f..."
}