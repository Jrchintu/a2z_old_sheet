{
    "dislikes": 3,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:09:52 GMT+0530 (India Standard Time)",
    "slug": "maximum-sum-of-non-adjacent-elements-dp-5",
    "aid": "1607",
    "title": "Maximum sum of non-adjacent elements (DP 5)",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/maximum-sum-of-non-adjacent-elements",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "dynamic-programming",
            "topic-title": "Dynamic Programming"
        },
        {
            "topic-id": "recursion",
            "topic-title": "Recursion"
        }
    ],
    "content": "<!-- wp:paragraph -->\n<p>In this article we will solve the problem: <strong>Maximum sum of non-adjacent elements (DP 5)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Problem Statement:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Given an array of \u2018N\u2019&nbsp; positive integers, we need to return the maximum sum of the subsequence such that no two elements of the subsequence are adjacent elements in the array.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Note: </strong>A subsequence of an array is a list with elements of the array where some elements are deleted ( or not deleted at all) and the elements should be in the same order in the subsequence as in the array.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n<details class=\"article_example_details\">\n<summary class=\"article_example_summary\">\n<span><strong>\nExamples\n</strong>\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"atricle_example_content\">\n<pre class=\"wp-block-preformatted\"><!-- Insert New Examples Here -->\n<pre class=\"wp-block-preformatted\"><strong><img src=\"https://lh6.googleusercontent.com/gQPoRaBGkwCKbJNy8cvXG2LBzD3khfxca938a6Zrph4HWQGLOxtVbDW3xO6WkDalQCBopYfBp5DX3oo_Drug3kRNBwhqDkYapMUu4LjwL_6_8dPot0h8ESZeMrbp1_3M_SW0zICR\" width=\"624\" height=\"216\"></strong>\n</pre>\n</pre>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Practice Section-->\n<div class=\"practice\">\n<span><strong>Practice: </strong></span>\n<div class=\"problem-buttons\">\n\n<!-- Add Problem Link inside href -->\n<a href=\"https://www.codingninjas.com/studio/problems/maximum-sum-of-non-adjacent-elements_843261?utm_source=striver&amp;utm_medium=website&amp;utm_campaign=a_zcoursetuf\" target=\"_blank\" rel=\"noopener\">\n<span>Solve Problem</span>\n<img src=\"https://static.takeuforward.org/wp/uploads/2023/04/Group-11-5.png\" alt=\"code-studio\">\n</a>\n</div>\n</div>\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\nyourself first. </em></p>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<div class=\"horizontal_navbar_dsa_article\">\n<div class=\"grid_container_three\">\n<a href=\"#brute-force-approach\" class=\"three-boxes box-a\">\nMemorization approach\n</a>\n<a href=\"#better-approach\" class=\"three-boxes box-b\">\nTabulation approach\n</a>\n<a href=\"#optimal-approach\" class=\"three-boxes box-c\">\nSpace Optimization\n</a>\n<a href=\"#dsa_article_video_explanation\" class=\"three-boxes box-d\">\n<svg width=\"26\" height=\"26\" viewBox=\"0 0 20 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M8 10L13.19 7L8 4V10ZM19.56 2.17C19.69 2.64 19.78 3.27 19.84 4.07C19.91 4.87 19.94 5.56 19.94 6.16L20 7C20 9.19 19.84 10.8 19.56 11.83C19.31 12.73 18.73 13.31 17.83 13.56C17.36 13.69 16.5 13.78 15.18 13.84C13.88 13.91 12.69 13.94 11.59 13.94L10 14C5.81 14 3.2 13.84 2.17 13.56C1.27 13.31 0.69 12.73 0.44 11.83C0.31 11.36 0.22 10.73 0.16 9.93C0.0900001 9.13 0.0599999 8.44 0.0599999 7.84L0 7C0 4.81 0.16 3.2 0.44 2.17C0.69 1.27 1.27 0.69 2.17 0.44C2.64 0.31 3.5 0.22 4.82 0.16C6.12 0.0899998 7.31 0.0599999 8.41 0.0599999L10 0C14.19 0 16.8 0.16 17.83 0.44C18.73 0.69 19.31 1.27 19.56 2.17Z\" fill=\"red\"></path>\n</svg>\n\n</a>\n<div class=\"box-e tooltip\">\n<svg viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M12.842 9.25L11.9577 10.17C11.2502 10.89 10.8081 11.5 10.8081 13H8.84297V12.5C8.84297 11.39 9.28511 10.39 9.99255 9.67L11.2109 8.41C11.5745 8.05 11.7906 7.55 11.7906 7C11.7906 6.46957 11.5836 5.96086 11.2151 5.58579C10.8465 5.21071 10.3467 5 9.82552 5C9.30434 5 8.80451 5.21071 8.43598 5.58579C8.06745 5.96086 7.86041 6.46957 7.86041 7H5.89531C5.89531 5.93913 6.30938 4.92172 7.04644 4.17157C7.7835 3.42143 8.78316 3 9.82552 3C10.8679 3 11.8675 3.42143 12.6046 4.17157C13.3417 4.92172 13.7557 5.93913 13.7557 7C13.7543 7.84324 13.4259 8.65183 12.842 9.25ZM10.8081 17H8.84297V15H10.8081M9.82552 0C8.53521 0 7.25754 0.258658 6.06545 0.761205C4.87337 1.26375 3.79021 2.00035 2.87783 2.92893C1.03519 4.8043 0 7.34784 0 10C0 12.6522 1.03519 15.1957 2.87783 17.0711C3.79021 17.9997 4.87337 18.7362 6.06545 19.2388C7.25754 19.7413 8.53521 20 9.82552 20C12.4314 20 14.9306 18.9464 16.7732 17.0711C18.6158 15.1957 19.651 12.6522 19.651 10C19.651 4.47 15.2296 0 9.82552 0Z\" fill=\"black\"></path>\n</svg>\n<div class=\"bottom\">\n<p>Expand any one approach by clicking the given options in the bar. Clicking one approach on bar,\ncloses all other expands. You can manually expand more than one approach at a time</p>\n<i></i>\n</div>\n\n</div>\n</div>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Approaches Drop-Down -->\n<div class=\"dsa_article_dropdown_approachs \">\n\n<!-- Brute Force Approach Starts from here -->\n<div id=\"brute-force-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nMemorization Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n<p>As we need to find the sum of subsequences, one approach that comes to our mind is to generate all subsequences and pick the one with the maximum sum.&nbsp;</p>\n<p>To generate all the subsequences, we can use the pick/non-pick technique. This technique can be briefly explained as follows:</p>\n<ul><li>At every index of the array, we have two options.</li><li>First, to pick the array element at that index and consider it in our subsequence.</li><li>Second, to leave the array element at that index and not to consider it in our subsequence.</li></ul>\n<p>A more detailed explanation of this technique is taught in <a href=\"https://www.youtube.com/watch?v=AxNNVECce8c\">Recursion on subsequences</a>. Readers are highly advised to watch that video.</p>\n<p>First, we will try to form the recursive solution to the problem with the pick/non-pick technique. There is one more catch, the problem wants us to have only non-adjacent elements of the array in the subsequence, therefore we need to address that too.</p>\n<p><strong>Steps to form the recursive solution</strong></p>\n<p>We will use the steps mentioned in the article <a href=\"https://takeuforward.org/data-structure/dynamic-programming-introduction/\">Dynamic Programming Introduction</a> in order to form our recursive solution.</p>\n<p><strong>Step 1: </strong>Form the function in terms of indexes:&nbsp;</p>\n<ul><li>We are given an array which can be easily thought of in terms of indexes.&nbsp;</li><li>We can define our function f(ind) as : Maximum sum of the subsequence starting from index 0 to index ind.</li><li>We need to return f(n-1) as our final answer.</li></ul>\n<p><strong>Step 2: </strong>Try all the choices to reach the goal.</p>\n<p>As mentioned earlier we will use the pick/non-pick technique to generate all subsequences. We also need to take care of the non-adjacent elements in this step.</p>\n<ul><li>If we pick an element then, pick = arr[ind] + f(ind-2). The reason we are doing f(ind-2) is because we have picked the current index element so we need to pick a non-adjacent element so we choose the index \u2018ind-2\u2019 instead of \u2018ind-1\u2019.</li><li>Next we need to ignore the current element in our subsequence. So nonPick= 0 + f(ind-1). As we don\u2019t pick the current element, we can consider the adjacent element in the subsequence.</li></ul>\n<p>Our pseudocode till this step will be:</p>\n<p><img width=\"358\" height=\"274\" src=\"https://lh3.googleusercontent.com/kxt9WyAopWxQrdkn0JDmpUZgc2Hck9kzWYXUaRaks_H7_BYPSzAWUZD8ZsSrB3kKUi3uQ_b5c2oQgEYEfDOTlm0XPG_JxrOyiXZUaBk5rSSa5GibdUd5O7n2qGwl5GyQu8plBgyV\"></p>\n<p><strong>Step 3: </strong>Take the maximum of all the choices</p>\n<p>As the problem statement asks to find the maximum subsequence total, we will return the maximum of two choices of step2.</p>\n<p><img width=\"383\" height=\"293\" src=\"https://lh4.googleusercontent.com/6B4SROavgWp3CSZs88mrKlQReJ8agT0RldW2OIM-3sgnG2s_Qg-fdSmrsGp3J-DtRk4FmE4Cpsn9qlst0hgLmZEt7g7g_EVkzaGWHeragCq8gacfWEG-oC7RTiTO6mdODdmU6ak9\"></p>\n<p><strong>Base Conditions</strong></p>\n<p>The base conditions for the recursive function will be as follows:</p>\n<ul><li>If ind=0, then we know to reach at index=0, we would have ignored the element at index = 1. Therefore, we can simply return the value of arr[ind] and consider it in the subsequence.</li><li>If ind&lt;0, this case can hit when we call f(ind-2) at ind=1. In this case we want to return to the calling function so we simply return 0 so that nothing is added to the subsequence sum.</li></ul>\n<p>Our final pseudo-code will be:</p>\n<p><img width=\"434\" height=\"373\" src=\"https://lh4.googleusercontent.com/p28QOHwR76bSmOcx0Mjd9iz50TVqyCqv_vJEC7lfTVM619vGAPoAWI7IsjjbNCfDjEAp0NV-TMoAMCibL-c-x3olW1FrxCsybhkJtKvLPZZBT3DN-YoN4PJGQUql7AcZE_VKZ1Kp\"></p>\n<p>Once we form the recursive solution, we can use the approach told in <a href=\"https://takeuforward.org/data-structure/dynamic-programming-introduction/\">Dynamic Programming Introduction</a> to convert it into a dynamic programming one.</p>\n<p><strong>Memoization approach</strong></p>\n<p>If we observe the recursion tree, we will observe a number of overlapping subproblems. Therefore the recursive solution can be memoized to reduce the time complexity.</p>\n<p><strong>Recursion tree diagram:</strong></p>\n<p><img width=\"624\" height=\"351\" src=\"https://lh4.googleusercontent.com/as1MMNbGAunIXOXeh-scjb4WtkS0CNU3KC2E_M9b1YIVzwqKXrQPnUypwfeiB57Pfz9OyrDzHZhL8t-Bt_m5v35bNQ6MU97n-NbiGGqSiGBXULCNl50K1V5wL314KDjllB2NSE7V\"></p>\n<p><strong>Note: </strong>To watch a detailed dry run of this approach, please watch the video attached below</p>\n<p><strong>Steps to convert Recursive code to memoization solution:</strong></p>\n<ul><li>Create a dp[n] array initialized to -1.</li><li>Whenever we want to find the answer of a particular value (say n), we first check whether the answer is already calculated using the dp array(i.e dp[n] != -1 ). If yes, simply return the value from the dp array.</li><li>If not, then we are finding the answer for the given value for the first time, we will use the recursive relation as usual but before returning from the function, we will set dp[n] to the solution we get.</li></ul>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\n// Function to solve the problem using dynamic programming\nint solveUtil(int ind, vector&lt;int&gt;&amp; arr, vector&lt;int&gt;&amp; dp) {\n    // If the result for this index is already computed, return it\n    if (dp[ind] != -1)\n        return dp[ind];\n\n    // Base cases\n    if (ind == 0) \n        return arr[ind];\n    if (ind &lt; 0)  \n        return 0;\n\n    // Choose the current element or skip it, and take the maximum\n    int pick = arr[ind] + solveUtil(ind - 2, arr, dp); // Choosing the current element\n    int nonPick = 0 + solveUtil(ind - 1, arr, dp);      // Skipping the current element\n\n    // Store the result in the DP table and return it\n    return dp[ind] = max(pick, nonPick);\n}\n\n// Function to initiate the solving process\nint solve(int n, vector&lt;int&gt;&amp; arr) {\n    vector&lt;int&gt; dp(n, -1); // Initialize the DP table with -1\n    return solveUtil(n - 1, arr, dp); // Start solving from the last element\n}\n\nint main() {\n    vector&lt;int&gt; arr{2, 1, 4, 9};\n    int n = arr.size();\n    \n    // Call the solve function and print the result\n    cout &lt;&lt; solve(n, arr);\n\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\npublic class Main {\n    // This function recursively calculates the maximum possible sum\n    // by considering or not considering the current element.\n    static int solveUtil(int ind, int[] arr, int[] dp) {\n        // If the index is negative, there are no elements left to consider.\n        if (ind &lt; 0) return 0;\n        \n        // If the index is 0, there is only one element to consider, so return its value.\n        if (ind == 0) return arr[ind];\n        \n        // If we have already calculated the result for this index, return it.\n        if (dp[ind] != -1) return dp[ind];\n        \n        // Calculate the maximum sum by either picking the current element or not picking it.\n        int pick = arr[ind] + solveUtil(ind - 2, arr, dp);\n        int nonPick = solveUtil(ind - 1, arr, dp);\n        \n        // Store the maximum of the two options in the dp array for future reference.\n        return dp[ind] = Math.max(pick, nonPick);\n    }\n\n    // This function initializes the dp array and calls the recursive solver.\n    static int solve(int n, int[] arr) {\n        int dp[] = new int[n];\n        \n        // Initialize the dp array with -1 to indicate that values are not calculated yet.\n        Arrays.fill(dp, -1);\n        \n        // Call the recursive solver for the last index (n-1).\n        return solveUtil(n - 1, arr, dp);\n    }\n\n    public static void main(String args[]) {\n        // Input array with elements.\n        int arr[] = {2, 1, 4, 9};\n        \n        // Get the length of the array.\n        int n = arr.length;\n        \n        // Call the solve function to find the maximum possible sum.\n        int result = solve(n, arr);\n        \n        // Print the result.\n        System.out.println(result);\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n# Function to solve the problem using dynamic programming\ndef solveUtil(ind, arr, dp):\n    # Check if the solution for this index has already been calculated\n    if dp[ind] != -1:\n        return dp[ind]\n    \n    # Base case: when the index is 0, return the value at that index\n    if ind == 0:\n        return arr[ind]\n    \n    # Base case: when the index is negative, return 0 (out of bounds)\n    if ind &lt; 0:\n        return 0\n    \n    # Calculate the maximum value when picking the current element\n    pick = arr[ind] + solveUtil(ind - 2, arr, dp)\n    \n    # Calculate the maximum value when not picking the current element\n    nonPick = 0 + solveUtil(ind - 1, arr, dp)\n    \n    # Store the maximum of the two choices in the DP table\n    dp[ind] = max(pick, nonPick)\n    \n    # Return the maximum value for the current index\n    return dp[ind]\n\n# Function to solve the problem for the given array\ndef solve(n, arr):\n    # Initialize a DP table with -1 values to store intermediate results\n    dp = [-1 for i in range(n)]\n    \n    # Call the recursive utility function to find the maximum value\n    return solveUtil(n - 1, arr, dp)\n\n# Main function to test the code\ndef main():\n    arr = [2, 1, 4, 9]\n    n = len(arr)\n    \n    # Call the solve function and print the result\n    print(solve(n, arr))\n\nif __name__ == '__main__':\n    main()\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n// Define the function to solve the problem\nfunction solveUtil(ind, arr, dp) {\n    // Check if the result for this index is already calculated\n    if (dp[ind] !== -1) return dp[ind];\n\n    // Base cases\n    if (ind === 0) return arr[ind];\n    if (ind &lt; 0) return 0;\n\n    // Calculate the maximum value by either picking or not picking the current element\n    const pick = arr[ind] + solveUtil(ind - 2, arr, dp);\n    const nonPick = 0 + solveUtil(ind - 1, arr, dp);\n\n    // Store the result in the DP array and return it\n    return (dp[ind] = Math.max(pick, nonPick));\n}\n\n// Main function to solve the problem\nfunction solve(n, arr) {\n    // Initialize a DP array with -1\n    const dp = new Array(n).fill(-1);\n    // Call the solveUtil function with the last index\n    return solveUtil(n - 1, arr, dp);\n}\n\n// Main program\nfunction main() {\n    const arr = [2, 1, 4, 9];\n    const n = arr.length;\n    console.log(solve(n, arr)); // Print the result\n}\n\n// Call the main function to run the program\nmain();\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Brute Force Here -->\n</p><p><strong>Output:</strong> 11\n\n</p>\n<p></p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n<!-- Insert Time and Space Complexity of Brute Force Here -->\n</p><p id=\"block-4ae2decf-d2cd-4fc8-bbc4-fc9e2369fc78\"><strong>Time Complexity: O(N)</strong></p>\n<p id=\"block-4de755ea-5362-45fd-bf80-e09cc4be1f72\">Reason: The overlapping subproblems will return the answer in constant time O(1). Therefore the total number of new subproblems we solve is \u2018n\u2019. Hence total time complexity is O(N).</p>\n<p id=\"block-3804d609-1a46-4132-99f5-151bad9c577a\"><strong>Space Complexity: O(N)</strong></p>\n<p id=\"block-b56b4156-b041-43e7-959d-f9cae963ad30\">Reason: We are using a recursion stack space(O(N)) and an array (again O(N)). Therefore total space complexity will be O(N) + O(N) \u2248 O(N)</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Brute Force Approach Ends here -->\n\n\n<!-- Better Approach Starts from here -->\n\n<div id=\"better-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nTabulation Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition For Better Approach Here -->\n<p><strong>Tabulation approach</strong></p>\n<ul><li>Declare a dp[] array of size n.</li><li>First initialize the base condition values, i.e dp[0] as 0.</li><li>Set an iterative loop which traverses the array( from index 1 to n-1) and for every index calculate pick&nbsp; and nonPick</li><li>&nbsp;And then we can set dp[i] = max (pick, nonPick)</li></ul>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\n// Function to solve the problem using dynamic programming\nint solveUtil(int n, vector&lt;int&gt;&amp; arr, vector&lt;int&gt;&amp; dp) {\n    // Base case: If there are no elements in the array, return 0\n    dp[0] = arr[0];\n    \n    // Iterate through the elements of the array\n    for (int i = 1; i &lt; n; i++) {\n        // Calculate the maximum value by either picking the current element\n        // or not picking it (i.e., taking the maximum of dp[i-2] + arr[i] and dp[i-1])\n        int pick = arr[i];\n        if (i &gt; 1)\n            pick += dp[i - 2];\n        int nonPick = dp[i - 1];\n        \n        // Store the maximum value in the dp array\n        dp[i] = max(pick, nonPick);\n    }\n    \n    // The last element of the dp array will contain the maximum sum\n    return dp[n - 1];\n}\n\n// Function to initiate the solving process\nint solve(int n, vector&lt;int&gt;&amp; arr) {\n    vector&lt;int&gt; dp(n, 0); // Initialize dp array with 0\n    return solveUtil(n, arr, dp);\n}\n\nint main() {\n    vector&lt;int&gt; arr{2, 1, 4, 9};\n    int n = arr.size();\n    \n    // Call the solve function and print the result\n    cout &lt;&lt; solve(n, arr);\n\n    return 0;\n}\n\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\nclass TUF {\n    // This function uses dynamic programming to find the maximum possible sum of non-adjacent elements.\n    static int solveUtil(int n, int[] arr, int[] dp) {\n        // Initialize the dp array with the first element of the input array.\n        dp[0] = arr[0];\n\n        // Iterate through the input array to fill the dp array.\n        for (int i = 1; i &lt; n; i++) {\n            // Calculate the maximum sum by either picking the current element or not picking it.\n            int pick = arr[i];\n            \n            // If there are at least two elements before the current element, add the value from dp[i-2].\n            if (i &gt; 1)\n                pick += dp[i - 2];\n            \n            // The non-pick option is to use the maximum sum from the previous element.\n            int nonPick = dp[i - 1];\n\n            // Store the maximum of the two options in the dp array for the current index.\n            dp[i] = Math.max(pick, nonPick);\n        }\n\n        // The final element of the dp array contains the maximum possible sum.\n        return dp[n - 1];\n    }\n\n    // This function initializes the dp array and calls the solver function.\n    static int solve(int n, int[] arr) {\n        int dp[] = new int[n];\n        \n        // Initialize the dp array with -1 to indicate that values are not calculated yet.\n        Arrays.fill(dp, -1);\n        \n        // Call the solver function to find the maximum possible sum.\n        return solveUtil(n, arr, dp);\n    }\n\n    public static void main(String args[]) {\n        // Input array with elements.\n        int arr[] = {2, 1, 4, 9};\n        \n        // Get the length of the array.\n        int n = arr.length;\n        \n        // Call the solve function to find the maximum possible sum.\n        int result = solve(n, arr);\n        \n        // Print the result.\n        System.out.println(result);\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n# Function to solve the problem using dynamic programming\ndef solveUtil(n, arr, dp):\n    # Initialize the first element of the DP table with the first element of the array\n    dp[0] = arr[0]\n    \n    # Loop through the array starting from the second element\n    for i in range(1, n):\n        # Calculate the maximum value when picking the current element\n        pick = arr[i]\n        \n        # Check if there are at least two elements before the current element\n        if i &gt; 1:\n            pick += dp[i - 2]\n        \n        # Calculate the maximum value when not picking the current element\n        non_pick = 0 + dp[i - 1]\n        \n        # Store the maximum of the two choices in the DP table\n        dp[i] = max(pick, non_pick)\n    \n    # Return the maximum value for the last index\n    return dp[n - 1]\n\n# Function to solve the problem for the given array\ndef solve(n, arr):\n    # Initialize a DP table with -1 values to store intermediate results\n    dp = [-1 for _ in range(n)]\n    \n    # Call the solveUtil function to find the maximum value\n    return solveUtil(n, arr, dp)\n\n# Main function to test the code\ndef main():\n    arr = [2, 1, 4, 9]\n    n = len(arr)\n    \n    # Call the solve function and print the result\n    print(solve(n, arr))\n\nif __name__ == '__main__':\n    main()\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n// Function to solve the problem using dynamic programming\nfunction solveUtil(n, arr, dp) {\n    // Initialize the first element of dp with the first element of the array\n    dp[0] = arr[0];\n\n    // Loop through the array to fill the dp array\n    for (let i = 1; i &lt; n; i++) {\n        // Calculate the maximum value when picking the current element\n        let pick = arr[i];\n        if (i &gt; 1) {\n            pick += dp[i - 2];\n        }\n\n        // Calculate the maximum value when not picking the current element\n        const nonPick = dp[i - 1];\n\n        // Store the maximum of pick and nonPick in dp\n        dp[i] = Math.max(pick, nonPick);\n    }\n\n    // Return the result, which is the last element of dp\n    return dp[n - 1];\n}\n\n// Main function to solve the problem\nfunction solve(n, arr) {\n    // Initialize a DP array with the same length as the input array, filled with -1\n    const dp = new Array(n).fill(-1);\n    // Call the solveUtil function to find the maximum sum\n    return solveUtil(n, arr, dp);\n}\n\n// Main program\nfunction main() {\n    // Input array\n    const arr = [2, 1, 4, 9];\n    const n = arr.length;\n\n    // Call the solve function and print the result\n    console.log(solve(n, arr));\n}\n\n// Call the main function to run the program\nmain();\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Better Approach Here -->\n<strong>Output:</strong>  11\n\n\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Better Approach Here -->\n</p><p><strong>Time Complexity: O(N)</strong></p>\n<p>Reason: We are running a simple iterative loop</p>\n<p><strong>Space Complexity: O(N)</strong></p>\n<p>Reason: We are using an external array of size \u2018n+1\u2019.</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Better Approach Ends from here -->\n\n\n<!-- Optimal Approach Starts from here -->\n\n<div id=\"optimal-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nSpace Optimization Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm of Better Approach Here -->\n<p><strong>Part 3: Space Optimization</strong></p>\n<p>If we closely look at the values required at every iteration,</p>\n<p><strong>dp[i], dp[i-1], and&nbsp; dp[i-2]</strong></p>\n<p>we see that for any i, we do need only the last two values in the array. So is there a need to maintain a whole array for it?&nbsp;</p>\n<p>The answer is \u2018No\u2019. Let us call dp[i-1] as prev and dp[i-2] as prev2. Now understand the following illustration.</p>\n<p><img width=\"575\" height=\"348\" src=\"https://lh3.googleusercontent.com/7DbfshoG1Lln3wc7TD5wzJ484xIvDB4g3FNNhsfYB2TJfncXTbQDW93Y719WZz1F_juYAoDPlTOC2fRfAw8V4ocMn8Gum-WXsbXYwTBrTbD1dkbh4pOjvK-HTVDOYbg72S1ORtyK\"></p>\n<ul><li>Each iteration\u2019s cur_i and prev become the next iteration\u2019s prev and prev2 respectively.</li><li>Therefore after calculating cur_i, if we update prev and prev2 according to the next step, we will always get the answer.&nbsp;</li><li>After the iterative loop has ended we can simply return prev as our answer.</li></ul>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\n// Function to solve the problem using dynamic programming\nint solve(int n, vector&lt;int&gt;&amp; arr) {\n    int prev = arr[0];   // Initialize the maximum sum ending at the previous element\n    int prev2 = 0;       // Initialize the maximum sum ending two elements ago\n    \n    for (int i = 1; i &lt; n; i++) {\n        int pick = arr[i];  // Maximum sum if we pick the current element\n        if (i &gt; 1)\n            pick += prev2;  // Add the maximum sum two elements ago\n        \n        int nonPick = 0 + prev;  // Maximum sum if we don't pick the current element\n        \n        int cur_i = max(pick, nonPick);  // Maximum sum ending at the current element\n        prev2 = prev;   // Update the maximum sum two elements ago\n        prev = cur_i;   // Update the maximum sum ending at the previous element\n    }\n    \n    return prev;  // Return the maximum sum\n}\n\nint main() {\n    vector&lt;int&gt; arr{2, 1, 4, 9};\n    int n = arr.size();\n    \n    // Call the solve function and print the result\n    cout &lt;&lt; solve(n, arr);\n\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\nclass TUF {\n    // This function finds the maximum possible sum of non-adjacent elements in an array\n    // using a more space-efficient dynamic programming approach.\n    static int solve(int n, int[] arr) {\n        // Initialize variables to keep track of the maximum sums at the current and previous positions.\n        int prev = arr[0];\n        int prev2 = 0;\n\n        // Iterate through the array starting from the second element.\n        for (int i = 1; i &lt; n; i++) {\n            // Calculate the maximum sum by either picking the current element or not picking it.\n            int pick = arr[i];\n\n            // If there are at least two elements before the current element, add the value from prev2.\n            if (i &gt; 1)\n                pick += prev2;\n\n            // The non-pick option is to use the maximum sum from the previous position.\n            int nonPick = prev;\n\n            // Calculate the maximum sum for the current position and update prev and prev2.\n            int cur_i = Math.max(pick, nonPick);\n            prev2 = prev;\n            prev = cur_i;\n        }\n\n        // The 'prev' variable now holds the maximum possible sum.\n        return prev;\n    }\n\n    public static void main(String args[]) {\n        // Input array with elements.\n        int arr[] = {2, 1, 4, 9};\n\n        // Get the length of the array.\n        int n = arr.length;\n\n        // Call the solve function to find the maximum possible sum.\n        int result = solve(n, arr);\n\n        // Print the result.\n        System.out.println(result);\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n# Function to solve the problem of finding the maximum sum of non-adjacent elements in an array\ndef solve(n, arr):\n    # Initialize variables to keep track of the previous maximum and the one before that\n    prev = arr[0]  # Initialize with the first element of the array\n    prev2 = 0      # Initialize with 0 because there is no element before the first\n    \n    # Loop through the array starting from the second element\n    for i in range(1, n):\n        # Calculate the maximum value when picking the current element\n        pick = arr[i]\n        \n        # Check if there are at least two elements before the current element\n        if i &gt; 1:\n            pick += prev2\n        \n        # Calculate the maximum value when not picking the current element\n        non_pick = 0 + prev\n        \n        # Calculate the maximum value for the current index\n        cur_i = max(pick, non_pick)\n        \n        # Update the 'prev' and 'prev2' variables for the next iteration\n        prev2 = prev\n        prev = cur_i\n    \n    # Return the maximum value for the last index, which represents the solution\n    return prev\n\n# Main function to test the code\ndef main():\n    arr = [2, 1, 4, 9]\n    n = len(arr)\n    \n    # Call the solve function and print the result\n    print(solve(n, arr))\n\nif __name__ == \"__main__\":\n    main()\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n// Function to solve the problem\nfunction solve(n, arr) {\n    // Initialize variables to keep track of the previous two maximum values\n    let prev = arr[0];\n    let prev2 = 0;\n    \n    // Loop through the array starting from the second element\n    for (let i = 1; i &lt; n; i++) {\n        // Calculate the maximum value when picking the current element\n        let pick = arr[i];\n        if (i &gt; 1) {\n            pick += prev2;\n        }\n        \n        // Calculate the maximum value when not picking the current element\n        const nonPick = prev;\n        \n        // Calculate the current maximum value and update prev and prev2\n        const cur_i = Math.max(pick, nonPick);\n        prev2 = prev;\n        prev = cur_i;\n    }\n    \n    // Return the final maximum value\n    return prev;\n}\n\n// Main program\nfunction main() {\n    // Input array\n    const arr = [2, 1, 4, 9];\n    const n = arr.length;\n\n    // Call the solve function and print the result\n    console.log(solve(n, arr));\n}\n\n// Call the main function to run the program\nmain();\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Optimal Apporach Here -->\n<strong>Output:</strong> 11\n\n\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Optimal Approach-->\n</p><p><strong>Time Complexity: O(N)</strong></p>\n<p>Reason: We are running a simple iterative loop</p>\n<p><strong>Space Complexity: O(1)</strong></p>\n<p>Reason: We are not using any extra space.</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Optimal Approach Starts from here -->\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n<details>\n<summary class=\"main-summary\">\n<span>\nVideo Explanation\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"yt-video-wrapper\">\n\n<!-- Insert iframe embed Link of Youtube Video-->\n<iframe class=\"lazy-loaded\" loading=\"lazy\" title=\"Maximum Sum of Non Adjacent Elements\" width=\"810\" height=\"456\" data-lazy-type=\"iframe\" data-src=\"https://www.youtube.com/embed/GrMBfJNk_NY?si=NEGz-0JUohNKsQVB\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\" src=\"https://www.youtube.com/embed/GrMBfJNk_NY?feature=oembed\"></iframe><noscript>\n<iframe loading=\"lazy\" title=\"Maximum Sum of Non Adjacent Elements\" width=\"810\" height=\"456\" src=\"https://www.youtube.com/embed/GrMBfJNk_NY?si=NEGz-0JUohNKsQVB\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe></noscript>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script>\n\nconst codeSections = document.querySelectorAll('.code-section');\n\n// Get last selected language from localStorage or set default value\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\n// Update last selected language for all sections and store in localStorage\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\n// Handle copy button click event\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\n// Set initial state of the tabs\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<script>\nconst codeSections = document.querySelectorAll('.code-section');\n\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script src=\"https://takeuforward.org/UXApproachDropDowns/3ApproachJSScript.js\"></script>\n<!-- /wp:html -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;<strong><a href=\"https://www.linkedin.com/in/anshuman-sharma-a1b245194/\" target=\"_blank\" rel=\"noreferrer noopener\">Anshuman Sharma</a></strong>&nbsp;and <a href=\"https://www.linkedin.com/in/abhipsita-das-5b7069212/?originalSubdomain=in\" target=\"_blank\" rel=\"noopener\" title=\"\"><strong>Abhipsita Das</strong></a></em> <em>for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->",
    "category_tag": "data-structure",
    "likes": 203,
    "preview": "In this article we will solve the problem: Maximum sum of non-adjacent elements (DP 5) Problem Statement: Given an array of \u2018N\u2019 positive integers, we need to return the maximum sum of the subsequen..."
}