{
    "dislikes": 8,
    "video": "1056s",
    "publishedOn": "Sun Mar 24 2024 22:09:39 GMT+0530 (India Standard Time)",
    "slug": "insertion-sort-algorithm",
    "aid": "1548",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/insertion-sorting",
    "title": "Insertion Sort Algorithm",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "sorting",
            "topic-title": "Sorting"
        }
    ],
    "category_tag": "data-structure",
    "likes": 430,
    "preview": "Problem Statement: Given an array of N integers, write a program to implement the Insertion sorting algorithm. Examples: Example 1: Input: N = 6, array[] = {13,46,24,52,20,9} Output: 9,13,20,24,46,...",
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement:</strong>&nbsp;Given an array of <strong>N integers</strong>, write a program to implement the Insertion sorting algorithm.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Examples:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\"><strong>Example 1:</strong>\n<strong>Input:</strong> N = 6, array[] = {13,46,24,52,20,9}\n<strong>Output:</strong> 9,13,20,24,46,52\n<strong>Explanation:</strong> \nAfter sorting the array is: 9,13,20,24,46,52\n\n\n<strong>Example 2:</strong>\n<strong>Input:</strong> N=5, array[] = {5,4,3,2,1}\n<strong>Output:</strong> 1,2,3,4,5\n<strong>Explanation:</strong> After sorting the array is: 1,2,3,4,5\n</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Solution</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"textColor\":\"accent\"} -->\n<p class=\"has-accent-color has-text-color\"><strong><em>Disclaimer</em></strong>: <em>Don't jump directly to the solution, try it out yourself first.</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Approach:&nbsp;</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li>Select an element in each iteration from the unsorted array(using a loop).</li><li>Place it in its corresponding position in the sorted part and shift the remaining elements accordingly (using an inner loop and swapping).</li><li>The \u201cinner while loop\u201d basically shifts the elements using swapping.</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Dry Run:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>The purple color represents the unsorted array.</li><li>The yellow color represents the current element that needs to be placed in the appropriate position.</li><li>The green color represents the sorted array.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Outer loop iteration 1(selected index i = 0):</strong> The element at index i=0 is 13 and there is no other element on the left of 13. So, currently, the subarray up to the first index is sorted as it contains only element 13.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":7926,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/03/Screenshot-2023-03-14-141316.png\" alt=\"\" class=\"wp-image-7926\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>Outer loop iteration 2(selected index i = 1):</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The selected element at index i=1 is 46. Now, we will try to move leftwards and put 46 in its correct position. Here, 46 &gt; 13 and so 46 is already in its correct position. Now, the subarray up to the second index is sorted.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":7927,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/03/Screenshot-2023-03-14-141418.png\" alt=\"\" class=\"wp-image-7927\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>Outer loop iteration 3(selected index i = 2):</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The selected element at index i=2 is 24. Now, we will try to move leftwards and put 24 in its correct position. Here, the correct position for 24 will be index 1. So, we will insert 24 in between 13 and 46. We will do it by swapping 24 and 46. Now, the subarray up to the third index is sorted.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":7928,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/03/Screenshot-2023-03-14-141514.png\" alt=\"\" class=\"wp-image-7928\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>Outer loop iteration 4(selected index i = 3):</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The selected element at index i=3 is 52. Now, we will try to move leftwards and put 52 in its correct position. Here, the correct position for 52 will be index 3. So, we need not swap anything. Now, the subarray up to the fourth index is sorted.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":7929,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/03/Screenshot-2023-03-14-141606.png\" alt=\"\" class=\"wp-image-7929\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>Outer loop iteration 5(selected index i = 4):</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The selected element at index i=4 is 20. Now, we will try to move leftwards and put 20 in its correct position. Here, the correct position for 20 will be index 1. So, we need to swap adjacent elements until 20 reaches index 1. Now, the subarray up to the fifth index is sorted.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":7930,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/03/Screenshot-2023-03-14-141708.png\" alt=\"\" class=\"wp-image-7930\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>Outer loop iteration 6(selected index i = 5):</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The selected element at index i=5 is 9. Now, we will try to move leftwards and put 9 in its correct position. Here, the correct position for 9 will be index 0. So, we need to swap adjacent elements until 9 reaches index 0. Now, the whole array is sorted.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":7932,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/03/Screenshot-2023-03-14-142052.png\" alt=\"\" class=\"wp-image-7932\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph {\"textColor\":\"black\"} -->\n<p class=\"has-black-color has-text-color\"><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    \n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvoid insertion_sort(int arr[], int n) {\n    for (int i = 0; i &lt;= n - 1; i++) {\n        int j = i;\n        while (j &gt; 0 &amp;&amp; arr[j - 1] &gt; arr[j]) {\n            int temp = arr[j - 1];\n            arr[j - 1] = arr[j];\n            arr[j] = temp;\n            j--;\n        }\n    }\n\n    cout &lt;&lt; \"After Using insertion sort: \" &lt;&lt; \"\\n\";\n    for (int i = 0; i &lt; n; i++) {\n        cout &lt;&lt; arr[i] &lt;&lt; \" \";\n    }\n    cout &lt;&lt; \"\\n\";\n}\n\nint main()\n{\n    int arr[] = {13, 46, 24, 52, 20, 9};\n    int n = sizeof(arr) / sizeof(arr[0]);\n    cout &lt;&lt; \"Before Using insertion Sort: \" &lt;&lt; endl;\n    for (int i = 0; i &lt; n; i++)\n    {\n        cout &lt;&lt; arr[i] &lt;&lt; \" \";\n    }\n    cout &lt;&lt; endl;\n\n    insertion_sort(arr, n);\n    return 0;\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Before insertion sort:<br>13 46 24 52 20 9<br>After insertion sort:<br>9 13 20 24 46 52</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time complexity: </strong>O(N<sup>2</sup>), (where N = size of the array), for the worst, and average cases.<br><strong>Reason:</strong> If we carefully observe, we can notice that the outer loop, say i, is running from 0 to n-1 i.e. n times, and for each i, the inner loop j runs from i to 1 i.e. i times. For, i = 1, the inner loop runs 1 time, for i = 2, the inner loop runs 2 times, and so on. So, the total steps will be approximately the following: 1 + 2 + 3 +......+ (n-2) + (n-1). The summation is approximately the sum of the first n natural numbers i.e. (n*(n+1))/2. The precise time complexity will be O(n2/2 + n/2). Previously, we have learned that we can ignore the lower values as well as the constant coefficients. So, the time complexity is O(n<sup>2</sup>). Here the value of n is N i.e. the size of the array.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(1)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\n\npublic class Main {\n    static void insertion_sort(int[] arr, int n) {\n        for (int i = 0; i &lt;= n - 1; i++) {\n            int j = i;\n            while (j &gt; 0 &amp;&amp; arr[j - 1] &gt; arr[j]) {\n                int temp = arr[j - 1];\n                arr[j - 1] = arr[j];\n                arr[j] = temp;\n                j--;\n            }\n        }\n\n        System.out.println(\"After insertion sort: \");\n        for (int i = 0; i &lt; n; i++) {\n            System.out.print(arr[i] + \" \");\n        }\n        System.out.println();\n    }\n    public static void main(String args[]) {\n        int arr[] = {13, 46, 24, 52, 20, 9};\n        int n = arr.length;\n        System.out.println(\"Before Using insertion Sort: \");\n        for (int i = 0; i &lt; n; i++) {\n            System.out.print(arr[i] + \" \");\n        }\n        System.out.println();\n        insertion_sort(arr, n);\n    }\n\n}  \n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Before insertion sort:<br>13 46 24 52 20 9<br>After insertion sort:<br>9 13 20 24 46 52</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time complexity: </strong>O(N<sup>2</sup>), (where N = size of the array), for the worst, and average cases.<br><strong>Reason:</strong> If we carefully observe, we can notice that the outer loop, say i, is running from 0 to n-1 i.e. n times, and for each i, the inner loop j runs from i to 1 i.e. i times. For, i = 1, the inner loop runs 1 time, for i = 2, the inner loop runs 2 times, and so on. So, the total steps will be approximately the following: 1 + 2 + 3 +......+ (n-2) + (n-1). The summation is approximately the sum of the first n natural numbers i.e. (n*(n+1))/2. The precise time complexity will be O(n2/2 + n/2). Previously, we have learned that we can ignore the lower values as well as the constant coefficients. So, the time complexity is O(n<sup>2</sup>). Here the value of n is N i.e. the size of the array.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(1)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Best Case Time Complexity:&nbsp;</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The best case occurs if the given array is already sorted. And if the given array is already sorted, the outer loop will only run and the inner loop will run for 0 times. So, our overall <strong>time complexity in the best case will boil down to O(N), </strong>where N = size of the array.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;<strong><a href=\"https://www.linkedin.com/in/rishirajgirmal/\" target=\"_blank\" rel=\"noreferrer noopener\">Rishiraj Girmal</a></strong>&nbsp;and <em>&nbsp;<strong><a href=\"https://www.linkedin.com/in/kriti39/\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>KRITIDIPTA GHOSH</strong></a></strong>&nbsp;</em></em><em>for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->\n\n"
}