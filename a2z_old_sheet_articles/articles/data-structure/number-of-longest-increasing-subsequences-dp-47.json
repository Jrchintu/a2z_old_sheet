{
    "dislikes": 1,
    "video": "cKVl1TFdNXg",
    "publishedOn": "Sun Mar 24 2024 22:11:39 GMT+0530 (India Standard Time)",
    "slug": "number-of-longest-increasing-subsequences-dp-47",
    "aid": "2131",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/number-of-longest-increasing-subsequences",
    "title": "Number of Longest Increasing Subsequences | (DP-47)",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "dynamic-programming",
            "topic-title": "Dynamic Programming"
        },
        {
            "topic-id": "recursion",
            "topic-title": "Recursion"
        }
    ],
    "likes": 38,
    "category_tag": "data-structure",
    "preview": "Problem Statement: Number of Longest Increasing Subsequences Prerequisite: Longest increasing subsequence, Printing Longest Increasing subsequence Problem Link: Given an array, \u2018Arr\u2019 of length \u2018n\u2019,...",
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement:&nbsp;</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Number of Longest Increasing Subsequences</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Prerequisite: </em><a href=\"https://takeuforward.org/data-structure/longest-increasing-subsequence-dp-41/\" target=\"_blank\" rel=\"noopener\"><em>Longest increasing subsequence</em></a><em>, </em><a href=\"https://takeuforward.org/data-structure/printing-longest-increasing-subsequence-dp-42/\" target=\"_blank\" rel=\"noopener\"><em>Printing Longest Increasing subsequence</em></a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Problem Link:&nbsp;</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Given an array, \u2018Arr\u2019 of length \u2018n\u2019, count the number of longest increasing subsequences (LIS).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"692\" height=\"267\" src=\"https://lh4.googleusercontent.com/mFTUVWeqxrdXqWtehJuGq7H0L8wSByFm1Wb4V8Yk-eX7_YuonoYAd36Vx7ZMDyLFjiA6mnQNwd1l-d2SCQ0X83qvy1q83ZmImWn53EV8Tem5TQ4eFFl73toSGKzSa_BtECMvHpvgHe0SfHR_MNqriZawaaNVfVfeiNM-00gJpJlyc18yXm-k1MKaeg\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Solution</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Intuition:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now let us revise the approach for finding the LIS as discussed in <a href=\"https://takeuforward.org/data-structure/printing-longest-increasing-subsequence-dp-42/\" target=\"_blank\" rel=\"noopener\"><em>Printing Longest Increasing subsequence</em></a>. Readers are highly advised to understand that approach first. In that solution, we write two nested loops to get a dp array whose maximum element gives us the length of the LIS as shown below:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"624\" height=\"339\" src=\"https://lh4.googleusercontent.com/2bfZGfS1ee3H7cEgYrRSeIugbEArhFjc64P8kqg0w_i5hrl-AuTfzYTSO5O-zT6hPwLBk5TYvZUmdYpKEPkIjpk13GkowOmeceIuEE8VQaXFVLOK5NkQolhc9x4OjZQsNg6Z6dVfs5S8zp7J69WyRzkiNXTZPg4Hwir_20ZAFBL99A-wt7R5ILmNOw\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now, what does this dp[i] represent? It represents the LIS in the array \u2018arr\u2019 from index 0 to index i in the array ending with element arr[i]. Therefore the maximum value of dp[i] in gives us the LIS of the array.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"629\" height=\"390\" src=\"https://lh6.googleusercontent.com/Mah0xXb1kfSnHMZp02IeJDNXiWncKsBBbyMXBmg5qbMeWatDFN6HWhC_9fgRn_jWtDS0u0SCkADRgWi08Vf9aN2gJ-xNwErwgxwb5WmtAvxeQBJDmZApenp7KTqy7YpCRt61wU8ge-Va1iA9L2xYm2uxRQ4DsdJBRt0jToNyPtYWA6RA1PM_NNQ48w\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now, after understanding the approach to finding the LIS, let us revisit the problem of counting the number of longest increasing subsequences of the array.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Let us take a new array ct[ ] to calculate the count and initialize it to 1. Then ct[i] will be the count of the number of longest increasing subsequences where each LIS ends where arr[i] is the last element of the subsequence.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Let us now understand the approach to get the values of the ct[ ] array, i.e to count the number of LIS. For that we will consider the below example:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Logic and approach for the dp and ct array[ ]</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Initial example:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The initial example is given below and the dp[ ] and ct[ ] array are initialized to 1.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"624\" height=\"260\" src=\"https://lh3.googleusercontent.com/ysj1Cmn_nrq_8nm_QittR7ZtgOqCr-PHighbJbeTf0qwi-MaIq9UlCGrRqvXlgbdXPVitdvE-0KFCSCotps-WJxaC42RqtdqZqXOJC-TtKyi6Dsr_ASggdUyX23x1uCpElIOglW_kZ1jiI_Y1ReraEp7XpsCDgrSFvmRe059DMu8NlbZ5AV095r71w\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now, we will iterate over the array and one by one see the final value of the dp[ ] and ct[ ] array. At this stage, it is super important to have a crystal clear understanding of what<strong> dp[i]</strong> and <strong>ct[i]</strong> means. Therefore their definitions are given in the below figure:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"624\" height=\"247\" src=\"https://lh3.googleusercontent.com/ibokhEFM6o9RscNXlTEIGeOubPAbDiv03FQFa_LxrgdnuPIpojZTEbe-g79r5PeCHchtMcZ9wbfzDH2WdgU0D5Reru_ZkjebdyZnyYFkAN1DFyKSyh-aHmuBaliAa9LllPA62Di5zKs045SFBY9jMbg0RWYvtF2HLVrXHiKA9kJ2htd5JCYYInr-fg\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>For i = 0,</strong></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><img width=\"582\" height=\"318\" src=\"https://lh4.googleusercontent.com/LXoTqwUn_V7Alj5Y8o9-UjMEFqXons3A2wpvQszJuD1yUVIPPlWmyUDeEOrTOZuz2sHmgfPEFoSCtysUBrpknGcvT7ouk0_H9osy181D6wcDJbV4I1Sfxu7KL5IDJcv8w43YeckQVCpj6jS77pJtBlxDwuUkzWqLfFADeDlrJn8qxtrD0vyY8QNglg\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We know that dp[i] and ct[i] will be 1 as they will be the only member of the unique LIS.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>For i=1,</strong></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><img width=\"624\" height=\"376\" src=\"https://lh3.googleusercontent.com/vA9amytxOjt2L3G00wYfWrRMz3fiwpbXVr5LpAlPFd_gh2EikmrRM0QSE5HnfmqMprPEuV6ZFpWCWgSY2JEBZLnrUqpgsYYE-zHPMnW-cyQ5qr1M_QrXpFLWl38Z87Cu9lxHCNDkV4eLdBAqgjqvL4GJVsYrCvCZIkJzG886fVtluSWjeGB8YcPGPg\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We know that 5 is greater than 1, so we can append it, therefore dp[1] will be 2 and the count still remains 1.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Similar is the case for i = 2,3 and 4.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"624\" height=\"464\" src=\"https://lh5.googleusercontent.com/ghH0g16iXQWdeKKutVbHrqmoKQWpzJrB2zct3_fL6I4AvJnQ5aFVaMapfqVuLXt8rowF5iwnlbq57MWR4He7wZjw9ilZoY8CUVaCZwL3UIQ1w6l2tXQFsxK4T1FgD4KExSNtSXFEwUPcn0WLaQjIwtlc7KmvyT_LnohaFRzWkIekzb_aolM6BbakcA\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>For i=5,</strong></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>This is an interesting case and we will break it into pieces. We are setting a nested loop, where i =5 and prev_index(say j) runs from 0 to 4.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>Initially j=0,</strong></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><img width=\"590\" height=\"310\" src=\"https://lh5.googleusercontent.com/WmdCZjzPTjDL6qKmGT4J2ZLdcqZt92EXaAss7wgwuib26S2q3gtlXZNMVQGHF15cAd9_CtVy23smrtNcPD2QvZp_NZjHDND9EWmz_5CYOkmjXIonIPSGKZd-3z4BVqLXvXY_ero1UcJdlAfI6Txkv1KrAC4TQxlv_dWpr8zB0LZJk8fVWA4o8BkW-A\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>At j=0, arr[j]&lt;arr[i] and dp[j+1]&gt;dp[i], therefore we can place 1 before 6 in the subsequence([1, 6]) to get LIS of length 2 in such a case, ct[i] will be ct[j]. In other words, the number of ways of getting LIS ending at arr[i], i.e ct[i] is equal to the number of ways of getting ct[j]. (ct[i] = ct[j]).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>At j=1, a similar case will follow, as arr[j]&lt;arr[i] and dp[j+1]&gt;dp[i], therefore we again update ct[i] to the value of ct[j].</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"590\" height=\"398\" src=\"https://lh6.googleusercontent.com/K0ccs1qHu85IjjK3cIPINGF753nJBf6ApYI03izu1eUHqTeK6omUunHNbAzB-ARr8a-LcOQohSncX6l-D9BR78-9AmvFV5wfewRHaUzhUzmWoNYp8kabPXZM0eKtPCI0xp0xGOt8Fq4-yA-Hs7CvTm1or2PQNSnQQkj7PpQJYpfSF3ZvDuomxw7u6A\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now let us see what happens at j =2,</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>At j=2, arr[j]&lt;arr[i], therefore we can consider placing before 6 but the length o0f LIS by placing the 4 before 6 will be 3, which is the existing value of dp[i]. In such a case we need to consider both the existing and the new LIS. Therefore, we will update ct[i] = ct[i] + ct[j], i.e 2 to count both the LIS ( [1, 5, 6] and [1, 4, 6]).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"590\" height=\"310\" src=\"https://lh6.googleusercontent.com/liLMUD7YL-dwb8qfg8FuIcdCp4qiL00CsnTAR1cNTN814Qyler7QZaJdfvrd59Vhp2IdqS09qUTk3lIxIEeGYyTbnOtpkVYD9klBCpIn0rJDW8GzPMP1qkQoBsZEgeOgLDMLiQNTf1gA4VC6v1ShNgpHoarn-yYAax0I4Z7ua5qRdZnESBKph3_kmw\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Similar will be the case for j=3, and j=4 as both will give us LIS of length 3 so we will count them as well.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"624\" height=\"561\" src=\"https://lh4.googleusercontent.com/vmYWzNAZznMfDg1EDmTCAZrwo4TemBcp12w50nEv6ZHtQumXBQL4KtoHSky75PNBaDaGNBYI3L_RTkoUC7cxbRGXxu-i0tGqpkd74H5rK4d7KPGG4QKoK8-yplYYDvodEeJq9NsEeVPIPBoslLiaUeqakQqxiQzr7W8_HN5XLZhk9SSN4ka7McE_-w\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>For i=6,</strong></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>When j=5, arr[j]&lt;arr[i], so we can add 6 before 7 for LIS, so we can again have 4 LIS.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"624\" height=\"517\" src=\"https://lh5.googleusercontent.com/kmnsn1hVqgvco9MxA62idcwTL3CE-L4T21g1ig-PuYDOOmdDRzh3iDm1JN4Iq7AFAvA0GHvA9HZBCaUqZkUsMGXTtqMpFuMQxyA5qUdkmmUi7UVfGRFaCt6VxjQKZucKfT_yThbZPa6bFyRUbLqgf3ojB_ysWlaffke1a1uBrdF2vnRLA8k42oXzjA\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Approach:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If we closely see the example we see two patterns for the nested loop conditions. We will always consider element at prev_index( say j) to place before element at index i only if arr[j] &lt; arr[i]. Now, there arises two conditions:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>if( arr[j] &lt; arr[i] &amp;&amp; dp[j+1] &gt; dp[i])</strong>, in this case we get a new LIS of greater length, therefore the number of LIS ending at arr[i], is the same as number of LIS ending at arr[j] as we simply append the element arr[j] to all those LIS. In simple terms, <strong>ct[i] = ct[j]</strong>. Try to dry run this example to understand: [1, 2, 3],</li><li><strong>if( arr[j] &lt; arr[i] &amp;&amp; dp[j+1]==dp[i]) </strong>in this case we get a new LIS of same length at which the ct[i] is originally holding the value for. Therefore the new ct[j] value will be the number of LIS that was given by its original value plus the number of LIS that ends at element arr[j] at length dp[j]. In simple terms, <strong>ct[i] = ct[i] + ct[j]</strong>. Try to dry run this example to understand: [1, 5, 6, 10].</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Based on these two conditions we can easily calculate the ct[ ]n array and return the ct[ ] value for the maximum value(s) of the dp[ ] array.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n    <button class=\"code-tab\" data-lang=\"javascript\">Javascript</button>\n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include &lt;bits/stdc++.h>\nusing namespace std;\n\n// Function to find the count of Longest Increasing Subsequences (LIS)\nint findNumberOfLIS(vector&lt;int>&amp; arr) {\n    int n = arr.size();\n\n    vector&lt;int> dp(n, 1); // dp[i] stores the length of the LIS ending at arr[i]\n    vector&lt;int> ct(n, 1); // ct[i] stores the count of LIS ending at arr[i]\n\n    int maxi = 1; // Initialize the maximum length as 1\n\n    for (int i = 0; i &lt; n; i++) {\n        for (int prev_index = 0; prev_index &lt; i; prev_index++) {\n            if (arr[prev_index] &lt; arr[i] &amp;&amp; dp[prev_index] + 1 > dp[i]) {\n                dp[i] = dp[prev_index] + 1;\n                // Inherit count\n                ct[i] = ct[prev_index];\n            } else if (arr[prev_index] &lt; arr[i] &amp;&amp; dp[prev_index] + 1 == dp[i]) {\n                // Increase the count\n                ct[i] = ct[i] + ct[prev_index];\n            }\n        }\n        maxi = max(maxi, dp[i]);\n    }\n\n    int numberOfLIS = 0;\n\n    for (int i = 0; i &lt; n; i++) {\n        if (dp[i] == maxi) {\n            numberOfLIS += ct[i];\n        }\n    }\n\n    return numberOfLIS;\n}\n\nint main() {\n    vector&lt;int> arr = {1, 5, 4, 3, 2, 6, 7, 2};\n\n    cout &lt;&lt; \"The count of Longest Increasing Subsequences (LIS) is \" &lt;&lt; findNumberOfLIS(arr) &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The count of LIS is 4</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(N*N)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reason: There are two nested loops that are run twice.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(N)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reason: We are only using two rows of size n.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\n\nclass TUF{\nstatic int findNumberOfLIS(int[] arr){\n    \n    int n = arr.length;\n    \n    int[] dp= new int[n];\n    int[] ct= new int[n];\n    \n    Arrays.fill(dp,1);\n    Arrays.fill(ct,1);\n    \n    int maxi = 1;\n    \n    for(int i=0; i&lt;=n-1; i++){\n        for(int prev_index = 0; prev_index &lt;=i-1; prev_index ++){\n            \n            if(arr[prev_index]&lt;arr[i] &amp;&amp; dp[prev_index]+1&gt;dp[i]){\n                dp[i] = dp[prev_index]+1;\n                //inherit\n                ct[i] = ct[prev_index];\n            }\n            else if(arr[prev_index]&lt;arr[i] &amp;&amp; dp[prev_index]+1==dp[i]){\n                //increase the count\n                ct[i] = ct[i] + ct[prev_index];\n            }\n        }\n         maxi = Math.max(maxi,dp[i]);\n    }\n    \n    int nos =0;\n    \n    for(int i=0; i&lt;=n-1; i++){\n       if(dp[i]==maxi) nos+=ct[i];\n    }\n    \n    return nos;\n}\n\npublic static void main(String args[]) {\n\t\n\tint[] arr = {1,5,4,3,2,6,7,2};\n\t\n\tSystem.out.println(\"The count of LIS is \"+findNumberOfLIS(arr));\n\t\n}\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The count of LIS is 4</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(N*N)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reason: There are two nested loops that are run twice.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(N)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reason: We are only using two rows of size n.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block\" data-lang=\"python\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">def find_number_of_LIS(arr):\n    n = len(arr)\n\n    # Initialize two dynamic programming lists for lengths and counts\n    dp = [1] * n\n    count = [1] * n\n\n    maxi = 1\n\n    for i in range(n):\n        for prev_index in range(i):\n            if arr[prev_index] &lt; arr[i] and dp[prev_index] + 1 > dp[i]:\n                dp[i] = dp[prev_index] + 1\n                # Inherit the count\n                count[i] = count[prev_index]\n            elif arr[prev_index] &lt; arr[i] and dp[prev_index] + 1 == dp[i]:\n                # Increase the count\n                count[i] += count[prev_index]\n        \n        maxi = max(maxi, dp[i])\n\n    num_of_LIS = 0\n\n    # Count the number of Longest Increasing Subsequences\n    for i in range(n):\n        if dp[i] == maxi:\n            num_of_LIS += count[i]\n\n    return num_of_LIS\n\n\nif __name__ == \"__main__\":\n    arr = [1, 5, 4, 3, 2, 6, 7, 2]\n\n    print(\"The count of Longest Increasing Subsequences is:\", find_number_of_LIS(arr))\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The count of LIS is 4</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(N*N)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reason: There are two nested loops that are run twice.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(N)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reason: We are only using two rows of size n.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block\" data-lang=\"javascript\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">function findNumberOfLIS(arr) {\n    const n = arr.length;\n\n    // Initialize two arrays to store the length and count of LIS ending at each index\n    const dp = new Array(n).fill(1); // dp[i] stores the length of the LIS ending at index i\n    const ct = new Array(n).fill(1); // ct[i] stores the count of LIS ending at index i\n\n    let maxi = 1; // Initialize the maximum LIS length\n\n    for (let i = 0; i &lt; n; i++) {\n        for (let prevIndex = 0; prevIndex &lt; i; prevIndex++) {\n            if (arr[prevIndex] &lt; arr[i] &amp;&amp; dp[prevIndex] + 1 > dp[i]) {\n                dp[i] = dp[prevIndex] + 1;\n                ct[i] = ct[prevIndex]; // Inherit count from the previous index\n            } else if (arr[prevIndex] &lt; arr[i] &amp;&amp; dp[prevIndex] + 1 === dp[i]) {\n                ct[i] += ct[prevIndex]; // Increase count if there are multiple LIS with the same length\n            }\n        }\n        maxi = Math.max(maxi, dp[i]); // Update the maximum LIS length\n    }\n\n    let numberOfLIS = 0;\n\n    for (let i = 0; i &lt; n; i++) {\n        if (dp[i] === maxi) {\n            numberOfLIS += ct[i]; // Sum counts of LIS with the maximum length\n        }\n    }\n\n    return numberOfLIS;\n}\n\n// Main function\nfunction main() {\n    const arr = [1, 5, 4, 3, 2, 6, 7, 2];\n\n    const result = findNumberOfLIS(arr);\n    console.log(\"The count of Longest Increasing Subsequences (LIS) is:\", result);\n}\n\n// Call the main function\nmain();\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The count of LIS is 4</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(N*N)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reason: There are two nested loops that are run twice.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(N)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reason: We are only using two rows of size n.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;<strong><a href=\"https://www.linkedin.com/in/anshuman-sharma-a1b245194/\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>Anshuman Sharma</strong></a></strong>&nbsp;for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a>.&nbsp;<em>If you want to suggest any improvement/correction in this article please mail us at&nbsp;write4tuf@gmail.com</em></p></blockquote>\n<!-- /wp:quote -->\n\n\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->"
}