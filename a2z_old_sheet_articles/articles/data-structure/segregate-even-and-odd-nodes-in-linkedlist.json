{
    "dislikes": 133,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:10:30 GMT+0530 (India Standard Time)",
    "slug": "segregate-even-and-odd-nodes-in-linkedlist",
    "aid": "1795",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/segregate-odd-and-even-nodes-in-ll",
    "title": "Segregate even and odd nodes in LinkedList",
    "topics": [
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "linked-list",
            "topic-title": "Linked List"
        }
    ],
    "likes": 143,
    "category_tag": "data-structure",
    "preview": "Problem Statement : Segregate even and odd nodes in LinkedList Given a LinkedList of integers. Modify the LinkedList in such a way that in Modified LinkedList all the even numbers appear before all...",
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement :\u00a0</strong>Segregate even and odd nodes in LinkedList</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Given a LinkedList of integers. Modify the LinkedList in such a way that in Modified LinkedList all the even numbers appear before all the odd numbers in LinkedList. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Also, note that the order of even and odd numbers should remain the same.\u00a0</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Examples:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\"><strong>Example 1:</strong>\n<strong>Input:</strong> 1\u21922\u21923\u21924\u21925\u21926\u2192Null\n<strong>Output:</strong> 2\u21924\u21926\u21921\u21923\u21925\u2192Null\n<strong>Explanation :</strong> \nOdd Nodes in LinkedList are 1,3,5 and \nEven Nodes in LinkedList are 2,4,6\nIn Modified LinkedList all even Nodes comes before \nall Odd Nodes. So Modified LinkedList looks like \n2\u21924\u21926\u21921\u21923\u21925\u2192Null. Order of even and odd Nodes is \nmaintained in modified LinkedList.\n\n<strong>Example 2:</strong>\n<strong>Input:</strong> 1\u21923\u21925\u2192Null\n<strong>Output:</strong> 1\u21923\u21925\u2192Null\n<strong>Explantion:</strong> As there are no Even Nodes in LinkedList, \nThe Modified LinkedList is same as Original LinkedList.\n\n<strong>Example 3:</strong>\n<strong>Input:</strong> 2\u21924\u21926\u21928\u2192Null\n<strong>Output:</strong> 2\u21924\u21926\u21928\u2192Null\n<strong>Explanation:</strong> As there are no Odd Nodes in LinkedList, \nThe Modified LinkedList is same as Original LinkedList.</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph {\"textColor\":\"accent\"} -->\n<p class=\"has-accent-color has-text-color\"><em><strong>Disclaimer: </strong>Don't jump directly to the solution, try it out yourself first.</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Intuition :&nbsp;</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The Intuition is to Split the LinkedList into two parts. One Contains all the Even Nodes and the other contains all the Odd Ends. After obtaining two LinkedLists we attach odd LinkedList at the end of the Even LinkedList.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To split the LinkedList take two dummy Nodes which act as the Heads of the odd and Even LinkedList. Traverse the original LinkedList. While traversing if the Node is odd remove the Node from the original LinkedList and add to odd LinkedList. Similarly for the Even Node too.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>After Traversing we obtain two LinkedList with all odd and all Even Nodes. Attach odd LinkedList at the end of Even LinkedList. As we are appending nodes to Odd and Even LinkedLists one by one the order of Nodes is undisturbed.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Algorithm Visual Representation :</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Original LinkedList</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"450\" height=\"148\" src=\"https://lh4.googleusercontent.com/Dq42kif-qjpL8wOotdlNYh8PBa1rh5abZae19pQ8buylkh93evnLmCD-I7Wqwh0cMC3VemvJ2sGTJncenff1uGRg8VGK5AKRp--wuAYqR3VlvYY1uasO4RNgDBDZJeVDenH0uSY6\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Creation of Heads for Even and Odd LinkedList</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"470\" height=\"290\" src=\"https://lh3.googleusercontent.com/szV7SN90i8yKNQ5YjLExn2CPkOK9mnDkYAHjHAEytpFSnqL1WnCyYeDOTtJsiIacsJ_CR5XVS15QkEh7cwDusPgwCRnNlSwfpR-NjOGogOhw_nr3EZhpI9jH1ZfDPcNwqWW2UerM\">'</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>As 1 is odd Node, Removing 1 from LinkedList and appending to OddLinkedList</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"456\" height=\"281\" src=\"https://lh3.googleusercontent.com/Uo7NXkqehsNDRsti1dfOG0YkYDwReSrSEgmUn49DQ7DuKjdZGWGKFrogE6eX47mOeaNcoEp_W1CgzBSiDVaCkracpNEagTxxrwIxP4bFs21TSNf1vas4U0g47ctDWJSpC963UCBJ\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>As 2 is Even Node, Removing 2 from LinkedList and appending to EvenLinkedList</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"478\" height=\"276\" src=\"https://lh6.googleusercontent.com/-iwAMihb-awsopN6uhs-fV1aXsZZ5Il0H56sC7GQd35GZjUjan-7Dtn9Mn1VdYuGTED7cbdZfx1VHdO3GSBG9m5wnzWfjTqYseOzxgiGIloheNnZV4qSJf8s2Y15DPdhZTCUklnO\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>As 3 is odd Node, Removing 3 from LinkedList and appending to OddLinkedList</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"436\" height=\"263\" src=\"https://lh6.googleusercontent.com/qD6IYQBtD0OBr2dGnSlyGYSCJ7EF_BVr5FjUv-dtOCG_iIA5X8VmignaVlVTUgO6FhokRroV3qOMafX74mGLx4IujrmPmwkLwq_5enI_PKb5gjbDhkRJWDqgwMTX-YAyL7pVg8Mt\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>As 4 is Even Node, Removing 4 from LinkedList and appending to Even LinkedList</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"610\" height=\"203\" src=\"https://lh3.googleusercontent.com/yUk62TBUiKBQYbBegyX7uU-XvMYUjLWF4EKaStb_63zegetABNVKodzFFTGoDpvvXSimOqps9RP8mzPo0zmEGGpdSYrP3lWmNMTHjZcsDYaeO4GB-nj3IJtMUtjvtI5K7xReJVgh\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Appending OddLinkedList at End of Even LinkedList</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"624\" height=\"221\" src=\"https://lh3.googleusercontent.com/x_nbnSbv_X5jij8S4vSSKNhraLb8w76eF-Vmysbto1z9NePe9iX0maVmS-a5kKG9y48WKvUyxz8AKKmTmDvuLMsXVgxxVOtOjvO-k6zRzSlEBZZs1eXEVFxmg1Ns7FZLRnLzVDta\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Modified LinkedList</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"472\" height=\"163\" src=\"https://lh3.googleusercontent.com/_v-3mL0-BMY6l0tM2UAVeNWUIm160L69zF7WvtEd_bvg7BfslOjtLsUkkKGhY_nN7w4NRnO5Qg-KkDbn8dR0fEUy8CbHHVLxvcq-A-pjwHmEvOU9uV0x9jsqF6t-fIbVYPjFDKjP\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    \n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nclass ListNode\n{\npublic:\n    int val;\n    ListNode *next;\n    ListNode(int x)\n    {\n        val = x;\n        next = nullptr;\n    }\n};\n\nListNode *head, *tail; // head and tail of the LinkedList\n\nvoid PrintList(ListNode *head) // Function to print the LinkedList\n{\n    ListNode *curr = head;\n    for (; curr != nullptr; curr = curr-&gt;next)\n        cout &lt;&lt; curr-&gt;val &lt;&lt; \"--&gt;\";\n    cout &lt;&lt; \"null\" &lt;&lt; endl;\n}\n\nvoid InsertatLast(int value) // Function for creating a LinkedList\n{\n\n    ListNode *newnode = new ListNode(value);\n    if (head == nullptr)\n        head = newnode, tail = newnode;\n    else\n        tail = tail-&gt;next = newnode;\n}\n\nListNode *SegregatetoOddEVen()\n{\n    // creating Heads of Odd and Even LinkedLists\n    ListNode *oddHead = new ListNode(-1), *oddTail = oddHead;\n    ListNode *evenHead = new ListNode(-1), *evenTail = evenHead;\n    ListNode *curr = head, *temp;\n    while (curr)\n    {\n        // Breaking the Link of the curr Node.\n        temp = curr;\n        curr = curr-&gt;next;\n        temp-&gt;next = nullptr;\n\n        if (temp-&gt;val &amp; 1) // If odd Node,append to odd LinkedList\n        {\n            oddTail-&gt;next = temp;\n            oddTail = temp;\n        }\n        else // If Even Node,append to even LinkedList\n        {\n            evenTail-&gt;next = temp;\n            evenTail = temp;\n        }\n    }\n    evenTail-&gt;next = oddHead-&gt;next; \n    // Appending Odd LinkedList at end of EvenLinkedList\n    return evenHead-&gt;next;\n} \n\nint main()\n{\n    InsertatLast(1);\n    InsertatLast(2);\n    InsertatLast(3);\n    InsertatLast(4);\n    cout &lt;&lt; \"Initial LinkedList : \" &lt;&lt; endl;\n    PrintList(head);\n    ListNode *newHead = SegregatetoOddEVen();\n    cout &lt;&lt; \"LinkedList After Segregration \" &lt;&lt; endl;\n    PrintList(newHead);\n    return 0;\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output :&nbsp;</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Initial LinkedList :&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>1\u21922\u21923\u21924\u2192null</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>LinkedList After Segregration</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>2\u21924\u21921\u21923\u2192null&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O(N) N is the number of Nodes in LinkedList. As we are traversing LinkedList once.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(1) We are just Manipulating the Links, not using any extra space.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\n\nclass ListNode\n{\n    int val;\n    ListNode next;\n    ListNode(int x)\n    {\n        val = x;\n        next = null;\n    }\n}\n\nclass TUF{\nstatic ListNode head, tail; // head and tail of the LinkedList\n\nstatic void PrintList(ListNode head) // Function to print the LinkedList\n{\n    ListNode curr = head;\n    for (; curr != null; curr = curr.next)\n        System.out.print(curr.val+\"--&gt;\");\n    System.out.println(\"null\");\n}\n\nstatic void InsertatLast(int value) // Function for creating a LinkedList\n{\n\n    ListNode newnode = new ListNode(value);\n    if (head == null)\n        {\n        head = newnode;\n        tail = newnode;\n        }\n    else\n        tail = tail.next = newnode;\n}\n\nstatic ListNode SegregatetoOddEVen()\n{\n    // creating Heads of Odd and Even LinkedLists\n    ListNode oddHead = new ListNode(-1), oddTail = oddHead;\n    ListNode evenHead = new ListNode(-1), evenTail = evenHead;\n    ListNode curr = head, temp;\n    while (curr!=null)\n    {\n        // Breaking the Link of the curr Node.\n        temp = curr;\n        curr = curr.next;\n        temp.next = null;\n\n        if (temp.val%2!=0) // If odd Node,append to odd LinkedList\n        {\n            oddTail.next = temp;\n            oddTail = temp;\n        }\n        else // If Even Node,append to even LinkedList\n        {\n            evenTail.next = temp;\n            evenTail = temp;\n        }\n    }\n    evenTail.next = oddHead.next; \n    // Appending Odd LinkedList at end of EvenLinkedList\n    return evenHead.next;\n} \n\npublic static void main(String args[])\n{\n    InsertatLast(1);\n    InsertatLast(2);\n    InsertatLast(3);\n    InsertatLast(4);\n    System.out.println(\"Intial LinkedList : \");\n    PrintList(head);\n    ListNode newHead = SegregatetoOddEVen();\n    System.out.println(\"LinkedList After Segregration \");\n    PrintList(newHead);\n}\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output :&nbsp;</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Initial LinkedList :&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>1\u21922\u21923\u21924\u2192null</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>LinkedList After Segregration</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>2\u21924\u21921\u21923\u2192null&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O(N) N is the number of Nodes in LinkedList. As we are traversing LinkedList once.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(1) We are just Manipulating the Links, not using any extra space.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;<strong><a href=\"https://www.linkedin.com/in/saisri-angajala-818598197/\" target=\"_blank\" rel=\"noreferrer noopener\">SaiSri Angajala</a></strong>&nbsp;for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->"
}