{
    "dislikes": 9,
    "video": "GYptUgnIM_I",
    "publishedOn": "Sun Mar 24 2024 22:09:13 GMT+0530 (India Standard Time)",
    "slug": "implement-stack-using-array",
    "aid": "1426",
    "title": "Implement Stack using Array",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/implement-stack-using-arrays",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "stack",
            "topic-title": "Stack"
        }
    ],
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem statement:</strong> Implement a stack using an array.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Note:</strong> Stack is a data structure that follows the <strong>Last In First Out (LIFO)</strong> rule.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Example:</strong> </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"508\" height=\"376\" src=\"https://lh5.googleusercontent.com/38iOcYEofTjzGa7IlFmJVWv_2SJ5eCsdcqqNqLSur4JOk3t7X7elCFdP95KWzyr0JpyFrys8i9_QiGpdntURNzVZA3m79cc7GnWViG2-FpUwpxThzb_OCFeXqiGIMyaKgBA96RQm\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Explanation</strong>:&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>push(): Insert the element in the stack.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>pop(): Remove and return the topmost element of the stack.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>top(): Return the topmost element of the stack</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>size(): Return the number of remaining elements in the stack.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Solution</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"textColor\":\"vivid-red\"} -->\n<p class=\"has-vivid-red-color has-text-color\"><em>Disclaimer</em>: <em>Don\u2019t jump directly to the solution, try it out yourself first.</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Intuition</strong>: As we know stack works on the principle of last in first out, so we have to put elements in an array such that it keeps track of the most recently inserted element. Hence we can think of using a Top variable which will help in keeping track of recent elements inserted in the array.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Approach</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>Declare an array of particular size.</li><li>Define a variable \u201cTop\u201d and initialize it as -1.</li><li>push(x): insert element is the array by increasing top by one.</li><li>pop(): check whether top is not equal to -1 if it is so, return top and decrease its value by one.</li><li>size(): return top+1.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><img width=\"536\" height=\"341\" src=\"https://lh5.googleusercontent.com/Tf5F14Aod0nLRLP3iZtOf3VwFCOUSKaGusVMfpbtUU4pU9zb9QRbqQ8s_Uvue2RGpmsBlI4cgQALk08_7cVrxx1UW_RrULS-sPnCyriqnD8jXdFRZbU6nDP1GOgm6dCFgceVUhpq\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include&lt;bits/stdc++.h&gt;\n\nusing namespace std;\nclass Stack {\n  int size;\n  int * arr;\n  int top;\n  public:\n    Stack() {\n      top = -1;\n      size = 1000;\n      arr = new int[size];\n    }\n  void push(int x) {\n    top++;\n    arr[top] = x;\n  }\n  int pop() {\n    int x = arr[top];\n    top--;\n    return x;\n  }\n  int Top() {\n    return arr[top];\n  }\n  int Size() {\n    return top + 1;\n  }\n};\nint main() {\n\n  Stack s;\n  s.push(6);\n  s.push(3);\n  s.push(7);\n  cout &lt;&lt; \"Top of stack is before deleting any element \" &lt;&lt; s.Top() &lt;&lt; endl;\n  cout &lt;&lt; \"Size of stack before deleting any element \" &lt;&lt; s.Size() &lt;&lt; endl;\n  cout &lt;&lt; \"The element deleted is \" &lt;&lt; s.pop() &lt;&lt; endl;\n  cout &lt;&lt; \"Size of stack after deleting an element \" &lt;&lt; s.Size() &lt;&lt; endl;\n  cout &lt;&lt; \"Top of stack after deleting an element \" &lt;&lt; s.Top() &lt;&lt; endl;\n  return 0;\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Top of stack is before deleting any element 7<br>Size of stack before deleting any element 3<br>The element deleted is 7<br>Size of stack after deleting an element 2<br>Top of stack after deleting an element 3</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity:</strong> O(N)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity:</strong> O(N)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\n\npublic class tuf {\n\n    public static void main(String[] args) {\n\n        stack s = new stack();\n        s.push(6);\n        s.push(3);\n        s.push(7);\n        System.out.println(\"Top of the stack before deleting any element \" + s.top());\n        System.out.println(\"Size of the stack before deleting any element \" + s.size());\n        System.out.println(\"The element deleted is \" + s.pop());\n        System.out.println(\"Size of the stack after deleting an element \" + s.size());\n        System.out.println(\"Top of the stack after deleting an element \" + s.top());\n    }\n}\nclass stack {\n    int size = 10000;\n    int arr[] = new int[size];\n    int top = -1;\n    void push(int x) {\n        top++;\n        arr[top] = x;\n    }\n    int pop() {\n        int x = arr[top];\n        top--;\n        return x;\n    }\n    int top() {\n        return arr[top];\n    }\n    int size() {\n        return top + 1;\n    }\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Top of the stack before deleting any element 7<br>Size of the stack before deleting any element 3<br>The element deleted is 7<br>Size of the stack after deleting an element 2<br>Top of the stack after deleting an element 3</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity:</strong> O(N)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity:</strong> O(N)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block\" data-lang=\"python\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">class Stack:\n    def __init__(self):\n        self.top = -1\n        self.size = 1000\n        self.arr = [0] * self.size\n\n\n    def push(self, x: int) -> None:\n        self.top += 1\n        self.arr[self.top] = x\n\n\n    def pop(self) -> int:\n        x = self.arr[self.top]\n        self.top -= 1\n        return x\n\n\n    def Top(self) -> int:\n        return self.arr[self.top]\n\n\n    def Size(self) -> int:\n        return self.top + 1\n\n\n\n\nif __name__ == \"__main__\":\n    s = Stack()\n    s.push(6)\n    s.push(3)\n    s.push(7)\n    print(\"Top of stack is before deleting any element\", s.Top())\n    print(\"Size of stack before deleting any element\", s.Size())\n    print(\"The element deleted is\", s.pop())\n    print(\"Size of stack after deleting an element\", s.Size())\n    print(\"Top of stack after deleting an element\", s.Top())</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Top of stack is before deleting any element 7<br>Size of stack before deleting any element 3<br>The element deleted is 7<br>Size of stack after deleting an element 2<br>Top of stack after deleting an element 3</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity:</strong> O(N)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity:</strong> O(N)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;<strong><strong><strong><a href=\"https://www.linkedin.com/in/prashant-sahu-2691a719a\" target=\"_blank\" rel=\"noreferrer noopener nofollow\">PRASHANT SAHU</a></strong></strong></strong>&nbsp;for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->",
    "category_tag": "data-structure",
    "likes": 331,
    "preview": "Problem statement: Implement a stack using an array. Note: Stack is a data structure that follows the Last In First Out (LIFO) rule. Example: Explanation: push(): Insert the element in the stack. p..."
}