{
    "dislikes": 35,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:10:07 GMT+0530 (India Standard Time)",
    "slug": "partition-set-into-2-subsets-with-min-absolute-sum-diff-dp-16",
    "aid": "1679",
    "title": "Partition Set Into 2 Subsets With Min Absolute Sum Diff (DP- 16)",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/partition-a-set-into-two-subsets-with-minimum-absolute-sum-difference",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "dynamic-programming",
            "topic-title": "Dynamic Programming"
        },
        {
            "topic-id": "recursion",
            "topic-title": "Recursion"
        }
    ],
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement:&nbsp;</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Partition A Set Into Two Subsets With Minimum Absolute Sum Difference</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Pre-req: <a href=\"https://takeuforward.org/data-structure/subset-sum-equal-to-target-dp-14/\">Subset Sum equal to target</a>, <a href=\"https://www.youtube.com/watch?v=AxNNVECce8c\">Recursion on Subsequences</a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Problem Link: </strong><a href=\"https://www.codingninjas.com/codestudio/problems/partition-a-set-into-two-subsets-such-that-the-difference-of-subset-sums-is-minimum_842494?source=youtube&amp;campaign=striver_dp_videos&amp;utm_source=youtube&amp;utm_medium=affiliate&amp;utm_campaign=striver_dp_videos&amp;leftPanelTab=0\"><strong>Partition A Set Into Two Subsets With Minimum Absolute Sum Difference</strong></a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We are given an array \u2018ARR\u2019 with N positive integers. We need to partition the array into two subsets such that the absolute difference of the sum of elements of the subsets is minimum.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We need to return only the minimum absolute difference of the sum of elements of the two partitions.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n<details class=\"article_example_details\">\n<summary class=\"article_example_summary\">\n<span><strong>\nExamples\n</strong>\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"atricle_example_content\">\n<pre class=\"wp-block-preformatted\"><!-- Insert New Examples Here -->\n<pre class=\"wp-block-preformatted\"><strong>Example 1:</strong>\n\n<img width=\"624\" height=\"383\" src=\"https://lh5.googleusercontent.com/oICvHTjrORRPm9JUDytnyHqWrUlINxqjDiubEr6QuxIoOo9jSyour1Vj2_qHB_db7odN6GSMfwrjq9Xo-cW6bVucybEuGI8e5otDrZYJfJ9lOinss2svNF2l7WSFDOS4RjfB0e33\">\n\n<strong>Example 2:</strong>\n\n<img width=\"624\" height=\"383\" src=\"https://lh6.googleusercontent.com/hzfpq7TeeGBg81iSmuI7g4r90g3Irlzwc-hi4eqjvfrOL5amhXPf0MFb-1Odbg_RZ5503XuSFjaedtguNVBxZYuxyKBqys-hL1jWPpcZMvYJCI3pJW6-j1AAM5StTr8RMzrSrxUf\">\n</pre>\n</pre>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Practice Section-->\n<div class=\"practice\">\n<span><strong>Practice: </strong></span>\n<div class=\"problem-buttons\">\n\n<!-- Add Problem Link inside href -->\n<a href=\"https://www.codingninjas.com/studio/problems/partition-a-set-into-two-subsets-such-that-the-difference-of-subset-sums-is-minimum._842494?utm_source=striver&amp;utm_medium=website&amp;utm_campaign=a_zcoursetuf\" target=\"_blank\" rel=\"noopener\">\n<span>Solve Problem</span>\n<img src=\"https://static.takeuforward.org/wp/uploads/2023/04/Group-11-5.png\" alt=\"code-studio\">\n</a>\n</div>\n</div>\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\nyourself first. </em></p>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<div class=\"horizontal_navbar_dsa_article\">\n<div class=\"grid_container_three\">\n<a href=\"#brute-force-approach\" class=\"three-boxes box-a\">\nMemorization approach\n</a>\n<a href=\"#better-approach\" class=\"three-boxes box-b\">\nTabulation approach\n</a>\n<a href=\"#optimal-approach\" class=\"three-boxes box-c\">\nSpace Optimization\n</a>\n<a href=\"#dsa_article_video_explanation\" class=\"three-boxes box-d\">\n<svg width=\"26\" height=\"26\" viewBox=\"0 0 20 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M8 10L13.19 7L8 4V10ZM19.56 2.17C19.69 2.64 19.78 3.27 19.84 4.07C19.91 4.87 19.94 5.56 19.94 6.16L20 7C20 9.19 19.84 10.8 19.56 11.83C19.31 12.73 18.73 13.31 17.83 13.56C17.36 13.69 16.5 13.78 15.18 13.84C13.88 13.91 12.69 13.94 11.59 13.94L10 14C5.81 14 3.2 13.84 2.17 13.56C1.27 13.31 0.69 12.73 0.44 11.83C0.31 11.36 0.22 10.73 0.16 9.93C0.0900001 9.13 0.0599999 8.44 0.0599999 7.84L0 7C0 4.81 0.16 3.2 0.44 2.17C0.69 1.27 1.27 0.69 2.17 0.44C2.64 0.31 3.5 0.22 4.82 0.16C6.12 0.0899998 7.31 0.0599999 8.41 0.0599999L10 0C14.19 0 16.8 0.16 17.83 0.44C18.73 0.69 19.31 1.27 19.56 2.17Z\" fill=\"red\"></path>\n</svg>\n\n</a>\n<div class=\"box-e tooltip\">\n<svg viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M12.842 9.25L11.9577 10.17C11.2502 10.89 10.8081 11.5 10.8081 13H8.84297V12.5C8.84297 11.39 9.28511 10.39 9.99255 9.67L11.2109 8.41C11.5745 8.05 11.7906 7.55 11.7906 7C11.7906 6.46957 11.5836 5.96086 11.2151 5.58579C10.8465 5.21071 10.3467 5 9.82552 5C9.30434 5 8.80451 5.21071 8.43598 5.58579C8.06745 5.96086 7.86041 6.46957 7.86041 7H5.89531C5.89531 5.93913 6.30938 4.92172 7.04644 4.17157C7.7835 3.42143 8.78316 3 9.82552 3C10.8679 3 11.8675 3.42143 12.6046 4.17157C13.3417 4.92172 13.7557 5.93913 13.7557 7C13.7543 7.84324 13.4259 8.65183 12.842 9.25ZM10.8081 17H8.84297V15H10.8081M9.82552 0C8.53521 0 7.25754 0.258658 6.06545 0.761205C4.87337 1.26375 3.79021 2.00035 2.87783 2.92893C1.03519 4.8043 0 7.34784 0 10C0 12.6522 1.03519 15.1957 2.87783 17.0711C3.79021 17.9997 4.87337 18.7362 6.06545 19.2388C7.25754 19.7413 8.53521 20 9.82552 20C12.4314 20 14.9306 18.9464 16.7732 17.0711C18.6158 15.1957 19.651 12.6522 19.651 10C19.651 4.47 15.2296 0 9.82552 0Z\" fill=\"black\"></path>\n</svg>\n<div class=\"bottom\">\n<p>Expand any one approach by clicking the given options in the bar. Clicking one approach on bar,\ncloses all other expands. You can manually expand more than one approach at a time</p>\n<i></i>\n</div>\n\n</div>\n</div>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Approaches Drop-Down -->\n<div class=\"dsa_article_dropdown_approachs \">\n\n<!-- Brute Force Approach Starts from here -->\n<div id=\"brute-force-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nMemorization Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n<p>This question is a slight modification of the problem discussed in the <a href=\"https://takeuforward.org/data-structure/subset-sum-equal-to-target-dp-14/\">Subset Sum equal to target</a>.&nbsp;</p>\n<p>Before discussing the approach for this question, it is important to understand what we did in the previous question of the Subset Sum equal to the <a href=\"https://takeuforward.org/data-structure/subset-sum-equal-to-target-dp-14/\">target</a>. There we found whether or not a subset exists in an array with a given target sum. We used a dp array to get to our answer.</p>\n<p><img width=\"624\" height=\"351\" src=\"https://lh3.googleusercontent.com/SFOVb7kI-Rqg0ayayAvdT7fBx652suA-1b68sVDS0b4_kPOKNsr9z-KncBTfa_sjhUaq0AA_S-AbhoXRD27q-9E5strpH_myfkjY3VXYkJ7oYbsQzFLtB2nWfm5aLmrlbwWE2BZ_\"></p>\n<p>We used to return dp[n-1][k] as our answer. One interesting thing that is happening is that for calculating our answer for dp[n-1][k], we are also solving multiple sub-problems and at the same time storing them as well. We will use this property to solve the question of this article.</p>\n<p>In this question, we need to partition the array into two subsets( say with sum S1 and S2) and we need to return the minimized absolute difference of S1 and S2. But do we need two variables for it? The answer is <strong>No</strong>. We can use a variable totSum, which stores the sum of all elements of the input array, and then we can simply say S2 = totSum - S1. Therefore we only need one variable S1.</p>\n<p>Now, what values can S1 take? Well, it can go anywhere from 0 (no elements in S1) to totSum( all elements in S1). If we observe the last row of the dp array which we had discussed above, it gives us the targets for which there exists a subset. We will set its column value to totSum, to find the answer from 0(smaller limit of S1) to totSum (the larger limit of S1).</p>\n<p>Our work is very simple, using the last row of the dp array, we will first find which all S1 values are valid. Using the valid S1 values, we will find S2 (totSum - S1). From this S1 and S2, we will find their absolute difference. We will return the minimum value of this absolute difference as our answer.</p>\n<p>From here we will try to find a subsequence in the array with a target as discussed in <a href=\"https://takeuforward.org/data-structure/subset-sum-equal-to-target-dp-14/\">Subset Sum equal to target</a> after generating the dp array, we will use the last row to find our answer.</p>\n<p><strong>Note: </strong>Readers are highly advised to watch this video \u201c<a href=\"https://www.youtube.com/watch?v=AxNNVECce8c\">Recursion on Subsequences</a>\u201d to understand how we generate subsequences using recursion.</p>\n<p><strong>Steps to form the recursive solution:&nbsp;</strong></p>\n<p>We will first form the recursive solution by the three points mentioned in <a href=\"https://takeuforward.org/data-structure/dynamic-programming-introduction/\">Dynamic Programming Introduction</a>.&nbsp;</p>\n<p><strong>Step 1: </strong>Express the problem in terms of indexes.</p>\n<p>The array will have an index but there is one more parameter \u201ctarget\u201d. We are given the initial problem to find whether there exists in the whole array a subsequence whose sum is equal to the target.</p>\n<p>So, we can say that initially, we need to find(n-1, target) which means that we need to find whether there exists a subsequence in the array from index 0 to n-1, whose sum is equal to the target. Similarly, we can generalize it for any index ind as follows:</p>\n<p><img width=\"624\" height=\"83\" src=\"https://lh6.googleusercontent.com/YMsEcV2pp7V5vuMOoaNLmSmIhN4x4qmSrY4hLBHtjdFqtWi1cnMJBKy6_soVsGs6vbSj9vgEUg4A1kRhHyKWlf0Uo8rbXS2iN9mXSL5xYgVe5R7Twdufuirf9wECT7rkKpe9x4ho\"></p>\n<p><strong>Base Cases:</strong></p>\n<ul><li>If target == 0, it means that we have already found the subsequence from the previous steps, so we can return true.</li><li>If ind==0, it means we are at the first element, so we need to return arr[ind]==target. If the element is equal to the target we return true else false.</li></ul>\n<p><img width=\"396\" height=\"284\" src=\"https://lh3.googleusercontent.com/wUCX-H6rFWT4At-QnMx2PrEgA8C79bvnIGtgrqgO2UD6x7obMOpZKjKjXvpgF_GSphrhziYjDyvQCc1eB8JF6vIi3K_ylXfV2OL0-lWA4aNmYxtNgME92Be1fidzJh4oqtonyeqd\"></p>\n<p><strong>Step 2: </strong>Try out all possible choices at a given index.</p>\n<p>We need to generate all the subsequences. We will use the pick/non-pick technique as discussed in this video \u201c<a href=\"https://www.youtube.com/watch?v=AxNNVECce8c\">Recursion on Subsequences</a>\u201d.</p>\n<p>We have two choices:</p>\n<ul><li><strong>Exclude the current element in the subsequence: </strong>We first try to find a subsequence without considering the current index element. For this, we will make a recursive call to f(ind-1,target).</li><li><strong>Include the current element in the subsequence:</strong> We will try to find a subsequence by considering the current index as element as part of subsequence. As we have included arr[ind], the updated target which we need to find in the rest if the array will be target - arr[ind]. Therefore, we will call f(ind-1,target-arr[ind]).</li></ul>\n<p><strong>Note: </strong>We will consider the current element in the subsequence only when the current element is less or equal to the target.</p>\n<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2022/02/image-1-2.jpeg\" alt=\"\" class=\"wp-image-2731\" width=\"475\" height=\"450\"></figure>\n<p><strong>Step 3:&nbsp; Return (taken || notTaken)</strong></p>\n<p>As we are looking for only one subset, if any of the one among taken or not taken returns true, we can return true from our function. Therefore, we return \u2018or(||)\u2019 of both of them.</p>\n<p>The final pseudocode after steps 1, 2, and 3:</p>\n<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2022/02/image-2-2.jpeg\" alt=\"\" class=\"wp-image-2733\" width=\"471\" height=\"476\"></figure>\n<p><strong>Steps to memoize a recursive solution:</strong></p>\n<p>If we draw the recursion tree, we will see that there are overlapping subproblems. In order to convert a recursive solution the following steps will be taken:</p>\n<ol><li>Create a dp array of size [n][totSum+1]. The size of the input array is \u2018n\u2019, so the index will always lie between \u20180\u2019 and \u2018n-1\u2019. The target can take any value between \u20180\u2019 and \u2018totSum\u2019. Therefore we take the dp array as dp[n][totSum+1]</li><li>We initialize the dp array to -1.</li><li>Whenever we want to find the answer of particular parameters (say f(ind,target)), we first check whether the answer is already calculated using the dp array(i.e dp[ind][target]!= -1 ). If yes, simply return the value from the dp array.</li><li>If not, then we are finding the answer for the given value for the first time, we will use the recursive relation as usual but before returning from the function, we will set dp[ind][target] to the solution we get.</li><li>When we get the dp array, we will use its last row to find the absolute minimum difference of two partitions.</li></ol>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\n// Function to solve the subset sum problem with memoization\nbool subsetSumUtil(int ind, int target, vector&lt;int&gt;&amp; arr, vector&lt;vector&lt;int&gt;&gt;&amp; dp) {\n    // Base case: If the target sum is 0, return true\n    if (target == 0)\n        return dp[ind][target] = true;\n\n    // Base case: If we have considered all elements and the target is still not 0, return false\n    if (ind == 0)\n        return dp[ind][target] = (arr[0] == target);\n\n    // If the result for this state is already calculated, return it\n    if (dp[ind][target] != -1)\n        return dp[ind][target];\n\n    // Recursive cases\n    // 1. Exclude the current element\n    bool notTaken = subsetSumUtil(ind - 1, target, arr, dp);\n\n    // 2. Include the current element if it doesn't exceed the target\n    bool taken = false;\n    if (arr[ind] &lt;= target)\n        taken = subsetSumUtil(ind - 1, target - arr[ind], arr, dp);\n\n    // Store the result in the DP table and return\n    return dp[ind][target] = notTaken || taken;\n}\n\n// Function to find the minimum absolute difference between two subset sums\nint minSubsetSumDifference(vector&lt;int&gt;&amp; arr, int n) {\n    int totSum = 0;\n\n    // Calculate the total sum of the array\n    for (int i = 0; i &lt; n; i++) {\n        totSum += arr[i];\n    }\n\n    // Initialize a DP table to store the results of the subset sum problem\n    vector&lt;vector&lt;int&gt;&gt; dp(n, vector&lt;int&gt;(totSum + 1, -1));\n\n    // Calculate the subset sum for each possible sum from 0 to the total sum\n    for (int i = 0; i &lt;= totSum; i++) {\n        bool dummy = subsetSumUtil(n - 1, i, arr, dp);\n    }\n\n    int mini = 1e9;\n    for (int i = 0; i &lt;= totSum; i++) {\n        if (dp[n - 1][i] == true) {\n            int diff = abs(i - (totSum - i));\n            mini = min(mini, diff);\n        }\n    }\n    return mini;\n}\n\nint main() {\n    vector&lt;int&gt; arr = {1, 2, 3, 4};\n    int n = arr.size();\n\n    cout &lt;&lt; \"The minimum absolute difference is: \" &lt;&lt; minSubsetSumDifference(arr, n);\n\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\npublic class Main {\n    // Helper function to calculate the minimum absolute difference of two subsets\n    static int minSubsetSumDifference(ArrayList&lt;Integer&gt; arr, int n) {\n        int totSum = 0;\n\n        // Calculate the total sum of the array elements\n        for (int i = 0; i &lt; n; i++) {\n            totSum += arr.get(i);\n        }\n\n        // Create a DP table to store subset sum information\n        boolean[][] dp = new boolean[n][totSum + 1];\n\n        // Initialize the DP table for the first row\n        for (int i = 0; i &lt;= totSum; i++) {\n            dp[0][i] = (i == arr.get(0));\n        }\n\n        // Fill in the DP table using bottom-up dynamic programming\n        for (int ind = 1; ind &lt; n; ind++) {\n            for (int target = 0; target &lt;= totSum; target++) {\n                // Calculate if the current element is not taken\n                boolean notTaken = dp[ind - 1][target];\n\n                // Calculate if the current element is taken\n                boolean taken = false;\n                if (arr.get(ind) &lt;= target) {\n                    taken = dp[ind - 1][target - arr.get(ind)];\n                }\n\n                // Update the DP table for the current element and target sum\n                dp[ind][target] = notTaken || taken;\n            }\n        }\n\n        int mini = Integer.MAX_VALUE;\n\n        // Find the minimum absolute difference between two subsets\n        for (int i = 0; i &lt;= totSum; i++) {\n            if (dp[n - 1][i]) {\n                int diff = Math.abs(i - (totSum - i));\n                mini = Math.min(mini, diff);\n            }\n        }\n        return mini;\n    }\n\n    public static void main(String[] args) {\n        ArrayList&lt;Integer&gt; arr = new ArrayList&lt;&gt;(Arrays.asList(1, 2, 3, 4));\n        int n = arr.size();\n\n        // Calculate and print the minimum absolute difference\n        System.out.println(\"The minimum absolute difference is: \" + minSubsetSumDifference(arr, n));\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\ndef subsetSumUtil(ind, target, arr, dp):\n    # Base case: If the target sum is 0, we have found a subset that sums to the target.\n    if target == 0:\n        return True\n\n    # Base case: If we have reached the first element of the array, check if it equals the target.\n    if ind == 0:\n        return arr[0] == target\n\n    # Check if the result for this combination of 'ind' and 'target' has already been computed.\n    if dp[ind][target] != -1:\n        return dp[ind][target]\n\n    # Recursive cases:\n    # 1. Try not taking the current element.\n    notTaken = subsetSumUtil(ind - 1, target, arr, dp)\n\n    # 2. Try taking the current element if it is less than or equal to the target.\n    taken = False\n    if arr[ind] &lt;= target:\n        taken = subsetSumUtil(ind - 1, target - arr[ind], arr, dp)\n\n    # Update the DP table and return the result.\n    dp[ind][target] = notTaken or taken\n    return dp[ind][target]\n\ndef minSubsetSumDifference(arr):\n    n = len(arr)\n    totSum = sum(arr)\n\n    # Initialize a DP table to store the subset sum information.\n    dp = [[-1 for i in range(totSum + 1)] for j in range(n)]\n\n    # Calculate dummy values for all possible sums using subsetSumUtil.\n    for i in range(totSum + 1):\n        dummy = subsetSumUtil(n - 1, i, arr, dp)\n\n    # Initialize a variable to track the minimum absolute difference.\n    mini = int(1e9)\n\n    # Iterate through all possible sums.\n    for i in range(totSum + 1):\n        if dp[n - 1][i] == True:\n            # Calculate the difference between the current sum and the complement sum.\n            diff = abs(i - (totSum - i))\n            mini = min(mini, diff)\n\n    return mini\n\ndef main():\n    arr = [1, 2, 3, 4]\n    print(\"The minimum absolute difference is:\", minSubsetSumDifference(arr))\n\nif __name__ == \"__main__\":\n    main()\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\nfunction subsetSumUtil(ind, target, arr, dp) {\n  if (target === 0)\n    return dp[ind][target] = true;\n\n  if (ind === 0)\n    return dp[ind][target] = arr[0] === target;\n\n  if (dp[ind][target] !== -1)\n    return dp[ind][target];\n\n  const notTaken = subsetSumUtil(ind - 1, target, arr, dp);\n\n  let taken = false;\n  if (arr[ind] &lt;= target)\n    taken = subsetSumUtil(ind - 1, target - arr[ind], arr, dp);\n\n  return dp[ind][target] = notTaken || taken;\n}\n\n// Function to find the minimum absolute difference of two subset sums\nfunction minSubsetSumDifference(arr, n) {\n  let totSum = 0;\n\n  for (let i = 0; i &lt; n; i++) {\n    totSum += arr[i];\n  }\n\n  // Create a 2D array for dynamic programming\n  const dp = new Array(n);\n  for (let i = 0; i &lt; n; i++) {\n    dp[i] = new Array(totSum + 1).fill(-1);\n  }\n\n  // Calculate the subset sum for all possible sums up to totSum\n  for (let i = 0; i &lt;= totSum; i++) {\n    const dummy = subsetSumUtil(n - 1, i, arr, dp);\n  }\n\n  let mini = 1e9;\n  for (let i = 0; i &lt;= totSum; i++) {\n    if (dp[n - 1][i] === true) {\n      const diff = Math.abs(i - (totSum - i));\n      mini = Math.min(mini, diff);\n    }\n  }\n  return mini;\n}\n\n// Main function\nfunction main() {\n  const arr = [1, 2, 3, 4];\n  const n = arr.length;\n\n  console.log(\"The minimum absolute difference is: \" + minSubsetSumDifference(arr, n));\n}\n\n// Run the main function\nmain();\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Brute Force Here -->\n</p><p><strong>Output:</strong> The minimum absolute difference is: 0\n\n</p>\n<p></p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n<!-- Insert Time and Space Complexity of Brute Force Here -->\n</p><p><strong>Time Complexity: O(N*totSum) +O(N) +O(N)</strong></p>\n<p>Reason: There are two nested loops that account for O(N*totSum), at starting we are running a for loop to calculate totSum and at last a for loop to traverse the last row.</p>\n<p><strong>Space Complexity: O(N*totSum) + O(N)</strong></p>\n<p>Reason: We are using an external array of size \u2018N * totSum\u2019 and a stack space of O(N).</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Brute Force Approach Ends here -->\n\n\n<!-- Better Approach Starts from here -->\n\n<div id=\"better-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nTabulation Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition For Better Approach Here -->\n<p>To convert the memoization approach to a tabulation one, create a dp array with the same size as done in memoization. We can set its type as bool and initialize it as false.</p>\n<p><img width=\"624\" height=\"351\" src=\"https://lh6.googleusercontent.com/Nlpyomak8yPGABpnCHSaRTuYAukFEMFwGv9ylGvFvJLmY_64Z4fiJSK1vJfK2nLwYmmc_WP814I3zWDIF3t2Ghp2Pug0fSWf-oKRHTn5Q1bIpCgDt34GMJpMtw5nQhHHZxtEIFTw\"></p>\n<p>First, we need to initialize the base conditions of the recursive solution.</p>\n<ul><li>If target == 0, ind can take any value from 0 to n-1, therefore we need to set the value of the first column as true. </li></ul>\n<p><img width=\"624\" height=\"351\" src=\"https://lh5.googleusercontent.com/6ASB31kg_oijxLc7olVp7EhZ0dvoYrYWJbeHXhTgmaQg6Z7tVqRaOgFtoArU3EAgtd9yGev_uyc1EQySEutc7bfiqhuquFhF-zBoHOwwrHZg9-GMSLFfzKDGmGR0mS2JXo89v6Uy\"></p>\n<ul><li>The first row dp[0][] indicates that only the first element of the array is considered, therefore for the target value equal to arr[0], only cell with that target will be true, so explicitly set dp[0][arr[0]] =true, (dp[0][arr[0]] means that we are considering the first element of the array with the target equal to the first element itself). Please note that it can happen that arr[0]&gt;target, so we first check it: if(arr[0]&lt;=target) then set dp[0][arr[0]] = true. </li></ul>\n<p><img width=\"624\" height=\"351\" src=\"https://lh3.googleusercontent.com/KeoI9fBQAllW7ltVi374ugUwZPIav2KL31GlRq5DZ3UPI6l_Zk39UUSF3rUVtDHcTs8eU1fOWFz11DEHDkcwZcAzumQnj7gr0Wy_xHcev14qkdfe3psprGi_L5uXmnnNk5yFBUx9\"></p>\n<ul><li>After that, we will set our nested for loops to traverse the dp array, and following the logic discussed in the recursive approach, we will set the value of each cell. Instead of recursive calls, we will use the dp array itself.</li><li>When we get the dp array, we will use its last row to find the absolute minimum difference between two partitions.</li></ul>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\n// Function to find the minimum absolute difference between two subset sums\nint minSubsetSumDifference(vector&lt;int&gt;&amp; arr, int n) {\n    int totSum = 0;\n\n    // Calculate the total sum of the array\n    for (int i = 0; i &lt; n; i++) {\n        totSum += arr[i];\n    }\n\n    // Initialize a DP table to store the results of the subset sum problem\n    vector&lt;vector&lt;bool&gt;&gt; dp(n, vector&lt;bool&gt;(totSum + 1, false));\n\n    // Base case: If no elements are selected (sum is 0), it's a valid subset\n    for (int i = 0; i &lt; n; i++) {\n        dp[i][0] = true;\n    }\n\n    // Initialize the first row based on the first element of the array\n    if (arr[0] &lt;= totSum)\n        dp[0][totSum] = true;\n\n    // Fill in the DP table using a bottom-up approach\n    for (int ind = 1; ind &lt; n; ind++) {\n        for (int target = 1; target &lt;= totSum; target++) {\n            // Exclude the current element\n            bool notTaken = dp[ind - 1][target];\n\n            // Include the current element if it doesn't exceed the target\n            bool taken = false;\n            if (arr[ind] &lt;= target)\n                taken = dp[ind - 1][target - arr[ind]];\n\n            dp[ind][target] = notTaken || taken;\n        }\n    }\n\n    int mini = 1e9;\n    for (int i = 0; i &lt;= totSum; i++) {\n        if (dp[n - 1][i] == true) {\n            // Calculate the absolute difference between two subset sums\n            int diff = abs(i - (totSum - i));\n            mini = min(mini, diff);\n        }\n    }\n    return mini;\n}\n\nint main() {\n    vector&lt;int&gt; arr = {1, 2, 3, 4};\n    int n = arr.size();\n\n    cout &lt;&lt; \"The minimum absolute difference is: \" &lt;&lt; minSubsetSumDifference(arr, n);\n\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\npublic class Main {\n    // Function to calculate the minimum absolute difference of two subsets\n    static int minSubsetSumDifference(ArrayList&lt;Integer&gt; arr, int n) {\n        int totSum = 0;\n\n        // Calculate the total sum of the array elements\n        for (int i = 0; i &lt; n; i++) {\n            totSum += arr.get(i);\n        }\n\n        // Create a DP table to store subset sum information\n        boolean[][] dp = new boolean[n][totSum + 1];\n\n        // Initialize the DP table for the first row\n        for (int i = 0; i &lt; n; i++) {\n            dp[i][0] = true;\n        }\n\n        // Initialize the DP table for the first column\n        if (arr.get(0) &lt;= totSum) {\n            dp[0][totSum] = true;\n        }\n\n        // Fill in the DP table using bottom-up dynamic programming\n        for (int ind = 1; ind &lt; n; ind++) {\n            for (int target = 1; target &lt;= totSum; target++) {\n                // Calculate if the current element is not taken\n                boolean notTaken = dp[ind - 1][target];\n\n                // Calculate if the current element is taken\n                boolean taken = false;\n                if (arr.get(ind) &lt;= target) {\n                    taken = dp[ind - 1][target - arr.get(ind)];\n                }\n\n                // Update the DP table for the current element and target sum\n                dp[ind][target] = notTaken || taken;\n            }\n        }\n\n        int mini = Integer.MAX_VALUE;\n\n        // Find the minimum absolute difference between two subsets\n        for (int i = 0; i &lt;= totSum; i++) {\n            if (dp[n - 1][i]) {\n                int diff = Math.abs(i - (totSum - i));\n                mini = Math.min(mini, diff);\n            }\n        }\n        return mini;\n    }\n\n    public static void main(String[] args) {\n        ArrayList&lt;Integer&gt; arr = new ArrayList&lt;&gt;(Arrays.asList(1, 2, 3, 4));\n        int n = arr.size();\n\n        // Calculate and print the minimum absolute difference\n        System.out.println(\"The minimum absolute difference is: \" + minSubsetSumDifference(arr, n));\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\ndef minSubsetSumDifference(arr, n):\n    # Calculate the total sum of the array elements.\n    totSum = sum(arr)\n\n    # Initialize a DP table to store subset sum information.\n    dp = [[False for i in range(totSum + 1)] for j in range(n)]\n\n    # Initialize the base cases for the DP table.\n    for i in range(n):\n        dp[i][0] = True\n\n    # Handle the base case for the first element in the array.\n    if arr[0] &lt;= totSum:\n        dp[0][arr[0]] = True\n\n    # Fill in the DP table using dynamic programming.\n    for ind in range(1, n):\n        for target in range(1, totSum + 1):\n            # If the current element is not taken, the result is the same as the previous row.\n            notTaken = dp[ind - 1][target]\n\n            # If the current element is taken, subtract its value from the target and check the previous row.\n            taken = False\n            if arr[ind] &lt;= target:\n                taken = dp[ind - 1][target - arr[ind]]\n\n            # Update the DP table with the result of taking or not taking the current element.\n            dp[ind][target] = notTaken or taken\n\n    # Initialize a variable to track the minimum absolute difference.\n    mini = int(1e9)\n\n    # Iterate through all possible sums.\n    for i in range(totSum + 1):\n        if dp[n - 1][i] == True:\n            # Calculate the difference between the current sum and the complement sum.\n            diff = abs(i - (totSum - i))\n            mini = min(mini, diff)\n\n    return mini\n\ndef main():\n    arr = [1, 2, 3, 4]\n    n = len(arr)\n\n    # Find and print the minimum absolute difference between two subsets.\n    print(\"The minimum absolute difference is:\", minSubsetSumDifference(arr, n))\n\nif __name__ == '__main__':\n    main()\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\nfunction minSubsetSumDifference(arr, n) {\n  let totSum = 0;\n\n  // Calculate the total sum of elements in the array\n  for (let i = 0; i &lt; n; i++) {\n    totSum += arr[i];\n  }\n\n  // Create a 2D boolean array for dynamic programming\n  const dp = new Array(n);\n  for (let i = 0; i &lt; n; i++) {\n    dp[i] = new Array(totSum + 1).fill(false);\n  }\n\n  // Initialize the first row of the dp array\n  for (let i = 0; i &lt; n; i++) {\n    dp[i][0] = true;\n  }\n\n  // Initialize the first column of the dp array\n  if (arr[0] &lt;= totSum) {\n    dp[0][arr[0]] = true;\n  }\n\n  // Fill the dp array using bottom-up dynamic programming\n  for (let ind = 1; ind &lt; n; ind++) {\n    for (let target = 1; target &lt;= totSum; target++) {\n      const notTaken = dp[ind - 1][target];\n\n      let taken = false;\n      if (arr[ind] &lt;= target) {\n        taken = dp[ind - 1][target - arr[ind]];\n      }\n\n      dp[ind][target] = notTaken || taken;\n    }\n  }\n\n  let mini = 1e9;\n  for (let i = 0; i &lt;= totSum; i++) {\n    if (dp[n - 1][i] === true) {\n      const diff = Math.abs(i - (totSum - i));\n      mini = Math.min(mini, diff);\n    }\n  }\n  return mini;\n}\n\n// Main function\nfunction main() {\n  const arr = [1, 2, 3, 4];\n  const n = arr.length;\n\n  console.log(\"The minimum absolute difference is: \" + minSubsetSumDifference(arr, n));\n}\n\n// Run the main function\nmain();\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Better Approach Here -->\n<strong>Output:</strong> The minimum absolute difference is: 0\n\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Better Approach Here -->\n</p><p><strong>Time Complexity: O(N*totSum) +O(N) +O(N)</strong></p>\n<p>Reason: There are two nested loops that account for O(N*totSum), at starting we are running a for loop to calculate totSum, and at last a for loop to traverse the last row.</p>\n<p><strong>Space Complexity: O(N*totSum)</strong></p>\n<p>Reason: We are using an external array of size \u2018N * totSum\u2019. Stack Space is eliminated.</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Better Approach Ends from here -->\n\n\n<!-- Optimal Approach Starts from here -->\n\n<div id=\"optimal-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nSpace Optimization Approach \n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm of Better Approach Here -->\n<p>If we closely look the relation,</p>\n<p><strong>dp[ind][target] =&nbsp; dp[ind-1][target] || dp[ind-1][target-arr[ind]]</strong></p>\n<p>We see that to calculate a value of a cell of the dp array, we need only the previous row values (say prev). So, we don\u2019t need to store an entire array. Hence we can space optimize it.</p>\n<p><strong>Note: </strong>Whenever we create a new row ( say cur), we need to explicitly set its first element is true according to our base condition.</p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\n// Function to find the minimum absolute difference between two subset sums\nint minSubsetSumDifference(vector&lt;int&gt;&amp; arr, int n) {\n    int totSum = 0;\n\n    // Calculate the total sum of the array\n    for (int i = 0; i &lt; n; i++) {\n        totSum += arr[i];\n    }\n\n    // Initialize a boolean vector 'prev' to represent the previous row of the DP table\n    vector&lt;bool&gt; prev(totSum + 1, false);\n\n    // Base case: If no elements are selected (sum is 0), it's a valid subset\n    prev[0] = true;\n\n    // Initialize the first row based on the first element of the array\n    if (arr[0] &lt;= totSum)\n        prev[arr[0]] = true;\n\n    // Fill in the DP table using a bottom-up approach\n    for (int ind = 1; ind &lt; n; ind++) {\n        // Create a boolean vector 'cur' to represent the current row of the DP table\n        vector&lt;bool&gt; cur(totSum + 1, false);\n        cur[0] = true;\n\n        for (int target = 1; target &lt;= totSum; target++) {\n            // Exclude the current element\n            bool notTaken = prev[target];\n\n            // Include the current element if it doesn't exceed the target\n            bool taken = false;\n            if (arr[ind] &lt;= target)\n                taken = prev[target - arr[ind]];\n\n            cur[target] = notTaken || taken;\n        }\n\n        // Set 'cur' as the 'prev' for the next iteration\n        prev = cur;\n    }\n\n    int mini = 1e9;\n    for (int i = 0; i &lt;= totSum; i++) {\n        if (prev[i] == true) {\n            // Calculate the absolute difference between two subset sums\n            int diff = abs(i - (totSum - i));\n            mini = min(mini, diff);\n        }\n    }\n    return mini;\n}\n\nint main() {\n    vector&lt;int&gt; arr = {1, 2, 3, 4};\n    int n = arr.size();\n\n    cout &lt;&lt; \"The minimum absolute difference is: \" &lt;&lt; minSubsetSumDifference(arr, n);\n\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\npublic class Main {\n    // Function to calculate the minimum absolute difference of two subsets\n    static int minSubsetSumDifference(ArrayList&lt;Integer&gt; arr, int n) {\n        int totSum = 0;\n\n        // Calculate the total sum of the array elements\n        for (int i = 0; i &lt; n; i++) {\n            totSum += arr.get(i);\n        }\n\n        // Create an array to store DP results for the previous row\n        boolean[] prev = new boolean[totSum + 1];\n\n        // Initialize the DP array for the first row\n        prev[0] = true;\n\n        // Initialize the DP array for the first column\n        if (arr.get(0) &lt;= totSum) {\n            prev[arr.get(0)] = true;\n        }\n\n        // Fill in the DP array using bottom-up dynamic programming\n        for (int ind = 1; ind &lt; n; ind++) {\n            // Create an array to store DP results for the current row\n            boolean[] cur = new boolean[totSum + 1];\n            cur[0] = true;\n            for (int target = 1; target &lt;= totSum; target++) {\n                // Calculate if the current element is not taken\n                boolean notTaken = prev[target];\n\n                // Calculate if the current element is taken\n                boolean taken = false;\n                if (arr.get(ind) &lt;= target) {\n                    taken = prev[target - arr.get(ind)];\n                }\n\n                // Update the DP array for the current element and target sum\n                cur[target] = notTaken || taken;\n            }\n            prev = cur;\n        }\n\n        int mini = Integer.MAX_VALUE;\n\n        // Find the minimum absolute difference between two subsets\n        for (int i = 0; i &lt;= totSum; i++) {\n            if (prev[i]) {\n                int diff = Math.abs(i - (totSum - i));\n                mini = Math.min(mini, diff);\n            }\n        }\n        return mini;\n    }\n\n    public static void main(String[] args) {\n        ArrayList&lt;Integer&gt; arr = new ArrayList&lt;&gt;(Arrays.asList(1, 2, 3, 4));\n        int n = arr.size();\n\n        // Calculate and print the minimum absolute difference\n        System.out.println(\"The minimum absolute difference is: \" + minSubsetSumDifference(arr, n));\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\ndef minSubsetSumDifference(arr, n):\n    # Calculate the total sum of the array elements.\n    totSum = sum(arr)\n    \n    # Initialize a boolean array 'prev' to store the results for the previous row.\n    prev = [False] * (totSum + 1)\n    prev[0] = True  # Base case: An empty subset can always achieve a sum of 0.\n\n    # Handle the base case for the first element in the array.\n    if arr[0] &lt;= totSum:\n        prev[arr[0]] = True\n\n    # Iterate through the elements in the array.\n    for ind in range(1, n):\n        # Initialize a new boolean array 'cur' for the current row.\n        cur = [False] * (totSum + 1)\n        cur[0] = True  # An empty subset can always achieve a sum of 0.\n\n        # Fill in the 'cur' array using dynamic programming.\n        for target in range(1, totSum + 1):\n            # If the current element is not taken, the result is the same as the previous row.\n            notTaken = prev[target]\n\n            # If the current element is taken, subtract its value from the target and check the previous row.\n            taken = prev[target - arr[ind]] if arr[ind] &lt;= target else False\n\n            # Update the 'cur' array with the result of taking or not taking the current element.\n            cur[target] = notTaken or taken\n\n        # Update 'prev' to 'cur' for the next iteration.\n        prev = cur\n\n    # Initialize a variable to track the minimum absolute difference.\n    mini = int(1e9)\n\n    # Iterate through all possible sums.\n    for i in range(totSum + 1):\n        if prev[i]:\n            # Calculate the difference between the current sum and the complement sum.\n            diff = abs(i - (totSum - i))\n            mini = min(mini, diff)\n\n    return mini\n\ndef main():\n    arr = [1, 2, 3, 4]\n    n = len(arr)\n    \n    # Find and print the minimum absolute difference between two subsets.\n    print(\"The minimum absolute difference is:\", minSubsetSumDifference(arr, n))\n\nif __name__ == \"__main__\":\n    main()\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\nfunction minSubsetSumDifference(arr, n) {\n  let totSum = 0;\n\n  // Calculate the total sum of elements in the array\n  for (let i = 0; i &lt; n; i++) {\n    totSum += arr[i];\n  }\n\n  // Initialize the previous array for dynamic programming\n  const prev = new Array(totSum + 1).fill(false);\n  prev[0] = true;\n\n  // Initialize the first column of the dp array\n  if (arr[0] &lt;= totSum) {\n    prev[arr[0]] = true;\n  }\n\n  // Fill the dp array using bottom-up dynamic programming\n  for (let ind = 1; ind &lt; n; ind++) {\n    const cur = new Array(totSum + 1).fill(false);\n    cur[0] = true;\n    for (let target = 1; target &lt;= totSum; target++) {\n      const notTaken = prev[target];\n\n      let taken = false;\n      if (arr[ind] &lt;= target) {\n        taken = prev[target - arr[ind]];\n      }\n\n      cur[target] = notTaken || taken;\n    }\n    // Update 'prev' array with 'cur' for the next iteration\n    for (let i = 0; i &lt; prev.length; i++) {\n      prev[i] = cur[i];\n    }\n  }\n\n  let mini = 1e9;\n  for (let i = 0; i &lt;= totSum; i++) {\n    if (prev[i] === true) {\n      const diff = Math.abs(i - (totSum - i));\n      mini = Math.min(mini, diff);\n    }\n  }\n  return mini;\n}\n\n// Main function\nfunction main() {\n  const arr = [1, 2, 3, 4];\n  const n = arr.length;\n\n  console.log(\"The minimum absolute difference is: \" + minSubsetSumDifference(arr, n));\n}\n\n// Run the main function\nmain();\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Optimal Apporach Here -->\n<strong>Output:</strong>The minimum absolute difference is: 0\n\n\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Optimal Approach-->\n</p><p><strong>Time Complexity: O(N*totSum) +O(N) +O(N)</strong></p>\n<p>Reason: There are two nested loops that account for O(N*totSum), at starting we are running a for loop to calculate totSum and at last a for loop to traverse the last row.</p>\n<p><strong>Space Complexity: O(totSum)</strong></p>\n<p>Reason: We are using an external array of size \u2018totSum+1\u2019 to store only one row.</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Optimal Approach Starts from here -->\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n<details>\n<summary class=\"main-summary\">\n<span>\nVideo Explanation\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"yt-video-wrapper\">\n\n<!-- Insert iframe embed Link of Youtube Video-->\n<iframe class=\"lazy-loaded\" loading=\"lazy\" title=\"Partition A Set Into Two Subsets With Minimum Absolute Sum Difference\" width=\"810\" height=\"456\" data-lazy-type=\"iframe\" data-src=\"https://www.youtube.com/embed/GS_OqZb2CWc?si=ZoIDeMexb3oEFB76\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\" src=\"https://www.youtube.com/embed/GS_OqZb2CWc?feature=oembed\"></iframe><noscript>\n<iframe loading=\"lazy\" title=\"Partition A Set Into Two Subsets With Minimum Absolute Sum Difference\" width=\"810\" height=\"456\" src=\"https://www.youtube.com/embed/GS_OqZb2CWc?si=ZoIDeMexb3oEFB76\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe></noscript>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script>\n\nconst codeSections = document.querySelectorAll('.code-section');\n\n// Get last selected language from localStorage or set default value\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\n// Update last selected language for all sections and store in localStorage\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\n// Handle copy button click event\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\n// Set initial state of the tabs\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<script>\nconst codeSections = document.querySelectorAll('.code-section');\n\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script src=\"https://takeuforward.org/UXApproachDropDowns/3ApproachJSScript.js\"></script>\n<!-- /wp:html -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;<strong><a href=\"https://www.linkedin.com/in/anshuman-sharma-a1b245194/\" target=\"_blank\" rel=\"noreferrer noopener\">Anshuman Sharma</a></strong>&nbsp;<em><em>and&nbsp;<a href=\"https://www.linkedin.com/in/abhipsita-das-5b7069212/?originalSubdomain=in\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>Abhipsita Das</strong></a></em></em></em> <em>for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->",
    "category_tag": "data-structure",
    "likes": 106,
    "preview": "Problem Statement: Partition A Set Into Two Subsets With Minimum Absolute Sum Difference Pre-req: Subset Sum equal to target, Recursion on Subsequences Problem Link: Partition A Set Into Two Subset..."
}