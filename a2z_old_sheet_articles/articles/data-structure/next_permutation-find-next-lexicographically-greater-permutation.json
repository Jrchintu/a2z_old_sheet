{
    "dislikes": 24,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:09:04 GMT+0530 (India Standard Time)",
    "slug": "next_permutation-find-next-lexicographically-greater-permutation",
    "aid": "1384",
    "tuf_plus": "",
    "title": "next_permutation : find next lexicographically greater permutation",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        }
    ],
    "category_tag": "data-structure",
    "likes": 816,
    "preview": "Problem Statement: Given an array Arr[] of integers, rearrange the numbers of the given array into the lexicographically next greater permutation of numbers. If such an arrangement is not possible,...",
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement: </strong>Given an array Arr[] of integers, rearrange the numbers of the given array into the lexicographically next greater permutation of numbers.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If such an arrangement is not possible, it must rearrange to the lowest possible order (i.e., sorted in ascending order).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n<details class=\"article_example_details\">\n<summary class=\"article_example_summary\">\n<span><strong>\nExamples\n</strong>\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"atricle_example_content\">\n<p><strong>Example 1 :</strong></p>\n<pre class=\"wp-block-preformatted\"><strong>Input format:</strong> Arr[] = {1,3,2}\n<strong>Output</strong>: Arr[] = {2,1,3}\n<strong>Explanation: </strong>All permutations of {1,2,3} are {{1,2,3} , {1,3,2}, {2,13} , {2,3,1} , {3,1,2} , {3,2,1}}. So, the next permutation just after {1,3,2} is {2,1,3}.</pre>\n<p><strong>Example 2:</strong></p>\n<pre class=\"wp-block-preformatted\"><strong>Input format:</strong> Arr[] = {3,2,1}\n<strong>Output: </strong>Arr[] = {1,2,3}\n<strong>Explanation: </strong>As we see all permutations of {1,2,3}, we find {3,2,1} at the last position. So, we have to return the topmost permutation.</pre>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Practice Section-->\n<div class=\"practice\">\n<span><strong>Practice: </strong></span>\n<div class=\"problem-buttons\">\n\n<!-- Add Problem Link inside href -->\n<a href=\"https://bit.ly/3qoj5iQ\" target=\"_blank\" rel=\"noopener\">\n<span>Solve Problem</span>\n<img src=\"https://static.takeuforward.org/wp/uploads/2023/04/Group-11-5.png\" alt=\"code-studio\">\n</a>\n</div>\n<div class=\"problem-buttons\">\n<!-- Add Problem Link inside href -->\n<a href=\"https://leetcode.com/problems/next-permutation/\" target=\"_blank\" rel=\"noopener\">\n<span>Solve Problem</span>\n<img src=\"https://cdn.iconscout.com/icon/free/png-256/free-leetcode-3521542-2944960.png?f=webp\" alt=\"leetcode\">\n</a>\n</div>\n</div>\n\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\nyourself first. </em></p>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<div class=\"horizontal_navbar_dsa_article\">\n<div class=\"grid_container_three\">\n<a href=\"#brute-force-approach\" class=\"three-boxes box-a\">\nSolution 1\n</a>\n<a href=\"#better-approach\" class=\"three-boxes box-b\">\nSolution 2\n</a>\n<a href=\"#optimal-approach\" class=\"three-boxes box-c\">\nSolution 3\n</a>\n<a href=\"#dsa_article_video_explanation\" class=\"three-boxes box-d\">\n<svg width=\"26\" height=\"26\" viewBox=\"0 0 20 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M8 10L13.19 7L8 4V10ZM19.56 2.17C19.69 2.64 19.78 3.27 19.84 4.07C19.91 4.87 19.94 5.56 19.94 6.16L20 7C20 9.19 19.84 10.8 19.56 11.83C19.31 12.73 18.73 13.31 17.83 13.56C17.36 13.69 16.5 13.78 15.18 13.84C13.88 13.91 12.69 13.94 11.59 13.94L10 14C5.81 14 3.2 13.84 2.17 13.56C1.27 13.31 0.69 12.73 0.44 11.83C0.31 11.36 0.22 10.73 0.16 9.93C0.0900001 9.13 0.0599999 8.44 0.0599999 7.84L0 7C0 4.81 0.16 3.2 0.44 2.17C0.69 1.27 1.27 0.69 2.17 0.44C2.64 0.31 3.5 0.22 4.82 0.16C6.12 0.0899998 7.31 0.0599999 8.41 0.0599999L10 0C14.19 0 16.8 0.16 17.83 0.44C18.73 0.69 19.31 1.27 19.56 2.17Z\" fill=\"red\"></path>\n</svg>\n\n</a>\n<div class=\"box-e tooltip\">\n<svg viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M12.842 9.25L11.9577 10.17C11.2502 10.89 10.8081 11.5 10.8081 13H8.84297V12.5C8.84297 11.39 9.28511 10.39 9.99255 9.67L11.2109 8.41C11.5745 8.05 11.7906 7.55 11.7906 7C11.7906 6.46957 11.5836 5.96086 11.2151 5.58579C10.8465 5.21071 10.3467 5 9.82552 5C9.30434 5 8.80451 5.21071 8.43598 5.58579C8.06745 5.96086 7.86041 6.46957 7.86041 7H5.89531C5.89531 5.93913 6.30938 4.92172 7.04644 4.17157C7.7835 3.42143 8.78316 3 9.82552 3C10.8679 3 11.8675 3.42143 12.6046 4.17157C13.3417 4.92172 13.7557 5.93913 13.7557 7C13.7543 7.84324 13.4259 8.65183 12.842 9.25ZM10.8081 17H8.84297V15H10.8081M9.82552 0C8.53521 0 7.25754 0.258658 6.06545 0.761205C4.87337 1.26375 3.79021 2.00035 2.87783 2.92893C1.03519 4.8043 0 7.34784 0 10C0 12.6522 1.03519 15.1957 2.87783 17.0711C3.79021 17.9997 4.87337 18.7362 6.06545 19.2388C7.25754 19.7413 8.53521 20 9.82552 20C12.4314 20 14.9306 18.9464 16.7732 17.0711C18.6158 15.1957 19.651 12.6522 19.651 10C19.651 4.47 15.2296 0 9.82552 0Z\" fill=\"black\"></path>\n</svg>\n<div class=\"bottom\">\n<p>Expand any one approach by clicking the given options in the bar. Clicking one approach on bar,\ncloses all other expands. You can manually expand more than one approach at a time</p>\n<i></i>\n</div>\n\n</div>\n</div>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Approaches Drop-Down -->\n<div class=\"dsa_article_dropdown_approachs \">\n\n<!-- Brute Force Approach Starts from here -->\n<div id=\"brute-force-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nSolution 1\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n<p>Brute Force: Finding all possible permutations.&nbsp;</p>\n<p><strong>Approach :</strong></p>\n<p>Step 1: Find all possible permutations of elements present and store them.</p>\n<p>Step 2: Search input from all possible permutations.</p>\n<p>Step 3: Print the next permutation present right after it.</p>\n<p><em>For reference of how to find all possible permutations, follow up </em><a href=\"https://www.youtube.com/watch?v=f2ic2Rsc9pU&amp;t=32s\"><em>https://www.youtube.com/watch?v=f2ic2Rsc9pU&amp;t=32s</em></a><em>. This video shows for distinct elements but code works for duplicates too.</em></p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>For finding, all possible permutations, it is taking N!xN. N represents the number of elements present in the input array. Also for searching input arrays from all possible permutations will take N!. Therefore, it has a Time complexity of O(N!xN).</p>\n<p><strong>Space Complexity :</strong></p>\n<p>Since we are not using any extra spaces except stack spaces for recursion calls. So, it has a space complexity of O(1).</p>\n</details>\n</div>\n</details>\n</div>\n<!-- Brute Force Approach Ends here -->\n\n\n<!-- Better Approach Starts from here -->\n<div id=\"better-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nSolution 2\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<div style=\"padding: 10px;\">\n<p>Using  in-built function</p>\n<p>C++ provides an in-built function called next_permutation() which directly returns the lexicographically next greater permutation of the input.</p>\n</div>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">Javascript</button>\n\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include&lt;iostream&gt;\n#include&lt;vector&gt;\n#include&lt;algorithm&gt;\n\nusing namespace std;\n\nint main() {\n    int arr[] = {1,3,2};\n    \n    next_permutation(arr,arr+3);//using in-built function of C++\n    \n    cout&lt;&lt;arr[0]&lt;&lt;\" \"&lt;&lt;arr[1]&lt;&lt;\" \"&lt;&lt;arr[2];\n    \n    return 0;\n}\n</code>\n</pre>\n<p><strong>Output: </strong>The next permutation is: 2 1 3</p>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n</code>\n</pre>\n</div>\n\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\n</code>\n</pre>\n</div>\n</div>\n</details>\n</div>\n</details>\n</div>\n\n<!-- Optimal Approach Starts from here -->\n<div id=\"optimal-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nSolution 3\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n<p>The steps are the following:</p>\n<ol><li><strong>Find the break-point, i: </strong>Break-point means the <strong><em>first index i from the back of the given array</em></strong> where arr[i] becomes smaller than arr[i+1].<br>For example, if the given array is {2,1,5,4,3,0,0}, the break-point will be index 1(<em>0-based indexing</em>). Here from the back of the array, index 1 is the first index where arr[1] i.e. 1 is smaller than arr[i+1] i.e. 5.<br><em>To find the break-point, using a loop we will traverse the array backward and store the index i where arr[i] is less than the value at index (i+1) i.e. arr[i+1].</em><em><br></em></li><li><strong>If such a break-point does not exist i.e. if the array is sorted in decreasing order, </strong>the given permutation is the last one in the sorted order of all possible permutations. So, the next permutation must be the first i.e. the permutation in increasing order.<br>So, <strong><em>in this case, we will reverse the whole array and will return it as our answer.</em></strong><strong><em><br></em></strong></li><li><strong>If a break-point exists:</strong><ol><li>Find the smallest number i.e. &gt; arr[i] and in the right half of index i(i.e. from index i+1 to n-1) and swap it with arr[i].</li><li>Reverse the entire right half(i.e. from index i+1 to n-1) of index i. And finally, return the array.</li></ol></li></ol>\n<p><strong>Note: </strong><em>For a better understanding of intuition, please watch the video at the bottom of the page.</em></p>\n<p><strong>Intuition:&nbsp;</strong></p>\n<p>We build up the intuition of the algorithm through the following observations.</p>\n</div>\n</details>\n\n\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nObservations\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Obs 1 -->\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nObservation 1\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n<p>Let\u2019s try to observe some dictionary-ordered strings like \u201craj\u201d, \u201crax\u201d, and \u201crbx\u201d. If we carefully observe, we can notice that these strings contain a common prefix, and the rankings are done based on the differentiating characters.</p>\n<p>For example, \u201craj\u201d and \u201crax\u201d has a common prefix i.e. \u201cra\u201d and the differentiating characters are \u2018j\u2019 and \u2018x\u2019. Now, as \u2018j\u2019 appears before \u2018x\u2019 in the alphabet, \u201craj\u201d appears before \u201crax\u201d in the given order. The same logic is applicable for \u201crax\u201d and \u201crbx\u201d(<em>Common prefix: \u201cr\u201d, differentiating characters: \u2018a\u2019 and \u2018b\u2019)</em>.</p>\n<p>The same observation can be done on the permutations of numbers. For example, if the array is [1, 2, 3], all possible permutations in sorted order will look like the following:</p>\n<ul><li>[1, 2, 3]</li><li>[1, 3, 2]</li><li>[2, 1, 3]</li><li>[2, 3, 1]</li><li>[3, 1, 2]</li><li>[3, 2, 1]</li></ul>\n<p>In the above cases, we can also notice that all the permutations contain an index i(<em>between the first and second last index</em>) such that its right part is sorted in decreasing order. Now, <strong>if we look at the array in the backward direction, it is sorted in increasing order up to index i (<em>from n-1 to index i+1</em></strong><strong>).</strong></p>\n<p><strong><em>We can call this index i as the break-point of the array.</em></strong> The left half of index i (<em>the length of the left half might be 0</em>) in the current permutation is the same as in the previous permutation. And the right half of the break-point is always in decreasing order.</p>\n<p>The structure of every possible permutation is the following:</p>\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/03/Screenshot-2023-03-30-232902.png\" alt=\"\" class=\"wp-image-8235\"></figure>\n<p><strong>After all, we can conclude that the difference between the next and current permutation always starts at the index i i.e. the break-point. How to find the break-point in an array:<br></strong>We can clearly observe that the right half of the break-point will always be in decreasing order. So, <strong><em>from the backside, the array will be in increasing order up to the break-point index</em></strong>. Keeping this in mind, we will traverse the array from the backside and we will break from the first index where arr[i] becomes smaller than arr[i+1]. The code will look like the following:</p>\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/03/Screenshot-2023-03-30-233007.png\" alt=\"\" class=\"wp-image-8236\"></figure>\n</div>\n</details>\n\n\n\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nObservation 2\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n<p><strong>If the break-point does not exist i.e. ind remains -1 in the code:</strong><strong><br></strong>For an array that is sorted in decreasing order break-point does not exist. Here, we can assure that the given array is the last one in the sorted order of all permutations. In this case, the break-point index will be -1, the right half of the break-point will be the whole array and the left half will be of length 0.</p>\n<p>In this case, the next permutation should be as minimum as possible. So to achieve it, we just need to reverse the whole array. And this will be our answer in this case. The code will look like the following:</p>\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/03/Screenshot-2023-03-30-233130.png\" alt=\"\" class=\"wp-image-8237\"></figure>\n</div>\n</details>\n\n\n\n\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nObservation 3\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n<p>Until now, we have found the break-point where the difference starts in the permutations. <strong><em>As the left half of the break-point should remain the same, we will not perform any operation on the left half.&nbsp;</em></strong></p>\n<p>Now we need to modify the break-point and the right half to get the next permutation. By the convention of ordering, we can say that the element at the break-point in the next permutation should be the next greater element of arr[break-point] in the current permutation.</p>\n<p>Now to find the next greater element, we cannot use the whole array as the left half of the break-point should remain the same. But we can use the right half as it can be modified.</p>\n<p>So, we will find the next greater element of arr[break-point] from the right half and swap it with arr[break-point] itself. Next greater element of arr[break-point] means the smallest element in the right half, greater than arr[break-point].</p>\n<p><strong>How to find and swap the next greater element of arr[break-point]:<br></strong>The right half is sorted in decreasing order(or increasing order from the backside). So, we will again <strong><em>traverse the array in the backward direction, and at the first index where arr[index] &gt; arr[break-point], we will swap arr[index] and arr[break-point]</em></strong>. </p>\n<p>The code will be the following:</p>\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/03/Screenshot-2023-03-30-233316.png\" alt=\"\" class=\"wp-image-8238\"></figure>\n<p><strong><em>For example</em></strong>, if the given array is {2, 1, 5, 4, 3, 0, 0}, the break-point will be index 1, and the next greater element of arr[1] i.e. 1 is 3 from the right half. After swapping the array will be like: {2, 3, 5, 4, 1, 0, 0}.</p>\n</div>\n</details>\n\n\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nObservation 4\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n<p>From the above example, we can observe that after swapping the right half remains sorted in decreasing fashion as it was before. Until now, we have modified the break-point. Now we are only left to modify the right half accordingly.</p>\n<p>We want the permutation to be as close as possible to the given one. After swapping, the new element at the break-point has already made it greater from the given permutation. Now we want the right part to be the minimum possible and then only the permutation will be the closest to the given one. Hence, we will simply reverse the entire right half to make it ascending.</p>\n<p>The code will be the following:</p>\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/03/Screenshot-2023-03-30-233436.png\" alt=\"\" class=\"wp-image-8239\"></figure>\n<p>Finally, the above array will be like {2, 3, 0, 0, 1, 4, 5}.</p>\n</div>\n</details>\n</div>\n</details>\n\n\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nDry Run\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>We will take the input array {1,3,2}.</p>\n<p><strong>Step 1</strong>: First find an increasing sequence. We take i1 = 1. Starting traversing backward.</p>\n<figure class=\"wp-block-image is-resized\"><img src=\"https://lh5.googleusercontent.com/Di_DeyxM2IffC7fxJ2QqXKQu_eHKcexdYaW738kQZUyDJmmQR1S4TPabaW_C7Bm2Y8EAqy4Z_PoKSDZ95rx3SqNEe6c2IcmU0Tn8oUYnbZJuNdPUHLIAeLbtzFcwQ1AbSnvCEEZS=s1600\" alt=\"\" width=\"387\" height=\"238\"></figure>\n<p><strong>Step 2</strong>: Since 3 is not less than 2, we decrease i1 by 1.</p>\n<figure class=\"wp-block-image is-resized\"><img src=\"https://lh4.googleusercontent.com/qngfbBa2VKwKXvTbrKjl46SAT-OF4pmTY4DZlVLMHNKGxqJpTuYCS1dKDvR-cgyfY13NjFAZT7OqGrH91vOebptBxwx3aQrNhOwev_ctQyg5ESYCB7X7oubic-zQ8r_YfCgVOIxt=s1600\" alt=\"\" width=\"360\" height=\"209\"></figure>\n<p><strong>Step 3</strong>: Since 1 is less than 2, we achieved our start of the increasing sequence. Now, i1 = 0.</p>\n<p><strong>Step 4</strong>: i2 will be another index to find just greater than i1 indexed elements in the array. Point i2 to the last element.</p>\n<figure class=\"wp-block-image is-resized\"><img src=\"https://lh6.googleusercontent.com/6JuMxwNbZbifFASVK9MGrEWo9E0VQi4fRmfUX_P2gLc44QqOLWtpst7OkUNQFxJLgaSv0B8ifVpCcZ8uO11NDwU4z0G-UlPY0cRznti8-90tMa9RuHRnsj2yhBvV_LgTtVVwfjd3=s1600\" alt=\"\" width=\"358\" height=\"221\"></figure>\n<p><strong>Step 5</strong>: i2 indexed element is greater than i1 indexed element. So, i2 has a value of 2.</p>\n<p><strong>Step 6</strong>: Swapping values present in i1 and i2 indices.</p>\n<figure class=\"wp-block-image is-resized\"><img src=\"https://lh5.googleusercontent.com/d__cuwrpQ7n5sjQYohpPGjv-PNmWp2KWimtpukp8iSm7oHn0hhfYl7OplfBwUlfF4Q_Gx9NG0jqHjBWJVFut62hRxAXd1QnmCn82u2vDo64N4bxyL6Tzo7JRTm-BoAjcPxS2NhQo=s1600\" alt=\"\" width=\"365\" height=\"208\"></figure>\n<p><strong>Step 7</strong>: Reversing from i1+1 index to last of the array.</p>\n<figure class=\"wp-block-image is-resized\"><img src=\"https://lh6.googleusercontent.com/QxcJt13QxJknO_nR62bI0szDBIXf044S4wq4ftvh34fQNNuuKMPFiKsgOuTUXuLqZ2IkNTOYatDUm4ateGRSFpETGsAfdP7szm3tORs00U94rAq6bdtueiIOkfAKpajgsUSAF7Sz=s1600\" alt=\"\" width=\"368\" height=\"127\"></figure>\n<p>Thus, we achieved our final answer.</p>\n</details>\n\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">Javascript</button>\n\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvector&lt;int&gt; nextGreaterPermutation(vector&lt;int&gt; &amp;A) {\n    int n = A.size(); // size of the array.\n\n    // Step 1: Find the break point:\n    int ind = -1; // break point\n    for (int i = n - 2; i &gt;= 0; i--) {\n        if (A[i] &lt; A[i + 1]) {\n            // index i is the break point\n            ind = i;\n            break;\n        }\n    }\n\n    // If break point does not exist:\n    if (ind == -1) {\n        // reverse the whole array:\n        reverse(A.begin(), A.end());\n        return A;\n    }\n\n    // Step 2: Find the next greater element\n    //         and swap it with arr[ind]:\n\n    for (int i = n - 1; i &gt; ind; i--) {\n        if (A[i] &gt; A[ind]) {\n            swap(A[i], A[ind]);\n            break;\n        }\n    }\n\n    // Step 3: reverse the right half:\n    reverse(A.begin() + ind + 1, A.end());\n\n    return A;\n}\n\nint main()\n{\n    vector&lt;int&gt; A = {2, 1, 5, 4, 3, 0, 0};\n    vector&lt;int&gt; ans = nextGreaterPermutation(A);\n\n    cout &lt;&lt; \"The next permutation is: [\";\n    for (auto it : ans) {\n        cout &lt;&lt; it &lt;&lt; \" \";\n    }\n    cout &lt;&lt; \"]n\";\n    return 0;\n}\n</code>\n</pre>\n<p><strong>Output: </strong>The next permutation is: [2 3 0 0 1 4 5 ]</p>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\npublic class tUf {\n    public static List&lt; Integer &gt; nextGreaterPermutation(List&lt; Integer &gt; A) {\n        int n = A.size(); // size of the array.\n\n        // Step 1: Find the break point:\n        int ind = -1; // break point\n        for (int i = n - 2; i &gt;= 0; i--) {\n            if (A.get(i) &lt; A.get(i + 1)) {\n                // index i is the break point\n                ind = i;\n                break;\n            }\n        }\n\n        // If break point does not exist:\n        if (ind == -1) {\n            // reverse the whole array:\n            Collections.reverse(A);\n            return A;\n        }\n\n        // Step 2: Find the next greater element\n        //         and swap it with arr[ind]:\n\n        for (int i = n - 1; i &gt; ind; i--) {\n            if (A.get(i) &gt; A.get(ind)) {\n                int tmp = A.get(i);\n                A.set(i, A.get(ind));\n                A.set(ind, tmp);\n                break;\n            }\n        }\n\n        // Step 3: reverse the right half:\n        List&lt;Integer&gt; sublist = A.subList(ind + 1, n);\n        Collections.reverse(sublist);\n\n        return A;\n    }\n\n    public static void main(String args[]) {\n        List&lt;Integer&gt; A = Arrays.asList(new Integer[] {2, 1, 5, 4, 3, 0, 0});\n        List&lt;Integer&gt; ans = nextGreaterPermutation(A);\n\n        System.out.print(\"The next permutation is: [\");\n        for (int i = 0; i &lt; ans.size(); i++) {\n            System.out.print(ans.get(i) + \" \");\n        }\n        System.out.println(\"]\");\n\n    }\n\n}\n</code>\n</pre>\n<p><strong>Output: </strong>The next permutation is: [2 3 0 0 1 4 5 ]</p>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\nfrom typing import List\n\ndef nextGreaterPermutation(A: List[int]) -&gt; List[int]:\n    n = len(A) # size of the array.\n\n    # Step 1: Find the break point:\n    ind = -1 # break point\n    for i in range(n-2, -1, -1):\n        if A[i] &lt; A[i + 1]:\n            # index i is the break point\n            ind = i\n            break\n\n    # If break point does not exist:\n    if ind == -1:\n        # reverse the whole array:\n        A.reverse()\n        return A\n\n    # Step 2: Find the next greater element\n    #         and swap it with arr[ind]:\n    for i in range(n - 1, ind, -1):\n        if A[i] &gt; A[ind]:\n            A[i], A[ind] = A[ind], A[i]\n            break\n\n    # Step 3: reverse the right half:\n    A[ind+1:] = reversed(A[ind+1:])\n\n    return A\n\nif __name__ == \"__main__\":\n    A = [2, 1, 5, 4, 3, 0, 0]\n    ans = nextGreaterPermutation(A)\n\n    print(\"The next permutation is: [\", end=\"\")\n    for it in ans:\n        print(it, end=\" \")\n    print(\"]\")\n</code>\n</pre>\n<p><strong>Output: </strong>The next permutation is: [2 3 0 0 1 4 5 ]</p>\n</div>\n\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\nfunction nextGreaterPermutation(A) {\n    let n = A.length; // size of the array.\n\n    // Step 1: Find the break point:\n    let ind = -1; // break point\n    for (let i = n - 2; i &gt;= 0; i--) {\n        if (A[i] &lt; A[i + 1]) {\n            // index i is the break point\n            ind = i;\n            break;\n        }\n    }\n\n    // If break point does not exist:\n    if (ind == -1) {\n        // reverse the whole array:\n        A.reverse();\n        return A;\n    }\n\n    // Step 2: Find the next greater element\n    //         and swap it with A[ind]:\n\n    for (let i = n - 1; i &gt; ind; i--) {\n        if (A[i] &gt; A[ind]) {\n            [A[i], A[ind]] = [A[ind], A[i]]; // swap A[i] and A[ind]\n            break;\n        }\n    }\n\n    // Step 3: reverse the right half:\n    A.splice(ind + 1, n - ind - 1, ...A.slice(ind + 1).reverse());\n\n    return A;\n}\n\nlet A = [2, 1, 5, 4, 3, 0, 0];\nlet ans = nextGreaterPermutation(A);\n\nconsole.log(\"The next permutation is: [\" + ans.join(\" \") + \"]\");\n</code>\n</pre>\n<p><strong>Output: </strong>The next permutation is: [2 3 0 0 1 4 5 ]</p>\n</div>\n</div>\n</details>\n\n\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n<p><strong>Time Complexity: </strong>O(3N), where N = size of the given array<br>Finding the break-point, finding the next greater element, and reversal at the end takes O(N) for each, where N is the number of elements in the input array. This sums up to 3*O(N) which is approximately O(3N).</p>\n<p><strong>Space Complexity: </strong>Since no extra storage is required. Thus, its space complexity is O(1).</p>\n</p>\n</details>\n</div>\n</details>\n</div>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n<details>\n<summary class=\"main-summary\">\n<span>\nVideo Explanation\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"yt-video-wrapper\">\n<iframe width=\"810\" height=\"456\" src=\"https://www.youtube.com/embed/JDOXKqF60RQ?start=1\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script src=\"https://takeuforward.org/UXApproachDropDowns/3ApproachJSScript.js\"></script>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script>\n\nconst codeSections = document.querySelectorAll('.code-section');\n\n// Get last selected language from localStorage or set default value\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\n// Update last selected language for all sections and store in localStorage\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\n// Handle copy button click event\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\n// Set initial state of the tabs\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<script>\nconst codeSections = document.querySelectorAll('.code-section');\n\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>\n<!-- /wp:html -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to <strong><a data-type=\"URL\" data-id=\"https://www.linkedin.com/in/dewanshi-paul-2515091b9\" href=\"https://www.linkedin.com/in/dewanshi-paul-2515091b9\" target=\"_blank\" rel=\"noreferrer noopener\">Dewanshi Paul</a></strong> and <strong><strong><a href=\"https://www.linkedin.com/in/kriti39/\" target=\"_blank\" rel=\"noopener\" title=\"\">KRITIDIPTA GHOSH</a></strong></strong></em> <em>for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/contribute/help-us-grow-takeuforward/\">please check out this article</a><em>.</em></p></blockquote>\n<!-- /wp:quote -->"
}