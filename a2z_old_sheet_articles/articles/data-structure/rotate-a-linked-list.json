{
    "dislikes": 1,
    "video": "9VPm6nEbVPA",
    "publishedOn": "Sun Mar 24 2024 22:09:56 GMT+0530 (India Standard Time)",
    "slug": "rotate-a-linked-list",
    "aid": "1628",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/rotate-a-ll",
    "title": "Rotate a Linked List",
    "topics": [
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "linked-list",
            "topic-title": "Linked List"
        }
    ],
    "category_tag": "data-structure",
    "likes": 81,
    "preview": "In this article, we will solve the problem: \"Rotate a Linked List\" Problem Statement: Given the head of a linked list, rotate the list to the right by k places. Examples: Example 1: Input: head = [...",
    "content": "<!-- wp:paragraph -->\n<p>In this article, we will solve the problem: \"Rotate a Linked List\"</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Problem Statement: </strong>Given the head of a <a href=\"https://takeuforward.org/linked-list/linked-list-introduction/\" target=\"_blank\" rel=\"noreferrer noopener\">linked list</a>, rotate the list to the right by k places.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Examples:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\"><strong>Example 1:</strong>\n<strong>Input:</strong>\n\thead = [1,2,3,4,5] \n\tk = 2\n<strong>Output:</strong>\n head = [4,5,1,2,3]\n<strong>Explanation:\n</strong> We have to rotate the list to the right twice.\n\n<strong><img width=\"624\" height=\"371\" src=\"https://lh4.googleusercontent.com/BjpfnYWtAbT7F_fcdSeBj5-doMD5H6wWmw4TZV9cUjpjAHB8kxAFxvOkV7FNLh8ctfjczvfRGqkeASHytfU8I8mL29m7w-dBlNlqtGz7ziI6sk7lIHsN2U00nik6OZFDL2pCY2E_\"></strong></pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\"><strong>Example 2:</strong>\n<strong>Input:</strong>\n\thead = [1,2,3]\n\tk = 4\n<strong>Output:</strong>\nhead = [3,1,2]\n<strong>Explanation:\n</strong>\n<strong><img width=\"624\" height=\"339\" src=\"https://lh3.googleusercontent.com/cz0OMCLCPmCHTvm8g-JXlRaWzubetA-8tenh16iAbTGDQYDCRimrhWeYESEHC4hc5Q4pizNIZxykwFjFxrPto6zrAQ-Ryhs381XpqtXG1WEfJOE8TV6yw6jG69RwM40CfuGhZyiH\"></strong></pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p><strong>Solution: Brute Force</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Approach:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We have to move the last element to first for each k.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For each k, find the last element from the list. Move it to the first.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nclass node {\n    public:\n        int num;\n        node* next;\n        node(int a) {\n            num = a;\n            next = NULL;\n        }\n};\n//utility function to insert node at the end of the list\nvoid insertNode(node* &amp;head,int val) {\n    node* newNode = new node(val);\n    if(head == NULL) {\n        head = newNode;\n        return;\n    }\n    node* temp = head;\n    while(temp-&gt;next != NULL) temp = temp-&gt;next;\n    \n    temp-&gt;next = newNode;\n    return;\n}\n//utility function to rotate list by k times\nnode* rotateRight(node* head,int k) {\n    if(head == NULL||head-&gt;next == NULL) return head;\n    for(int i=0;i&lt;k;i++) {\n        node* temp = head;\n        while(temp-&gt;next-&gt;next != NULL) temp = temp-&gt;next;\n        node* end = temp-&gt;next;\n        temp-&gt;next = NULL;\n        end-&gt;next = head;\n        head = end;\n    }\n    return head;\n}\n//utility function to print list\nvoid printList(node* head) {\n    while(head-&gt;next != NULL) {\n        cout&lt;&lt;head-&gt;num&lt;&lt;\"-&gt;\";\n        head = head-&gt;next;\n    } \n    cout&lt;&lt;head-&gt;num&lt;&lt;endl;\n    return;\n}\n\nint main() {\n    node* head = NULL;\n    //inserting Node\n    insertNode(head,1);\n    insertNode(head,2);\n    insertNode(head,3);\n    insertNode(head,4);\n    insertNode(head,5);\n    \n    cout&lt;&lt;\"Original list: \";\n    printList(head);\n    \n    int k = 2;\n    node* newHead = rotateRight(head,k);//calling function for rotating right of \n    the nodes by k times\n    \n    cout&lt;&lt;\"After \"&lt;&lt;k&lt;&lt;\" iterations: \";\n    printList(newHead);//list after rotating nodes\n    return 0;\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Original list: 1-&gt;2-&gt;3-&gt;4-&gt;5<br>After 2 iterations: 4-&gt;5-&gt;1-&gt;2-&gt;3</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity:</strong> O(Number of nodes present in the list*k)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Reason</em>: For k times, we are iterating through the entire list to get the last element and move it to first.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity:</strong> O(1)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Reason</em>: No extra data structures is used for computations</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\nclass Node {\n  int num;\n  Node next;\n  Node(int a) {\n    num = a;\n    next = null;\n  }\n}\nclass TUF {\n  //utility function to insert node at the end of the list\n  static Node insertNode(Node head, int val) {\n    Node newNode = new Node(val);\n    if (head == null) {\n      head = newNode;\n      return head;\n    }\n    Node temp = head;\n    while (temp.next != null) temp = temp.next;\n\n    temp.next = newNode;\n    return head;\n  }\n  //utility function to rotate list by k times\n  static Node rotateRight(Node head, int k) {\n    if (head == null || head.next == null) return head;\n    for (int i = 0; i &lt; k; i++) {\n      Node temp = head;\n      while (temp.next.next != null) temp = temp.next;\n      Node end = temp.next;\n      temp.next = null;\n      end.next = head;\n      head = end;\n    }\n    return head;\n  }\n  //utility function to print list\n  static void printList(Node head) {\n    while (head.next != null) {\n      System.out.print(head.num + \"-&gt;\");\n      head = head.next;\n    }\n    System.out.println(head.num);\n\n  }\n\n  public static void main(String args[]) {\n    Node head = null;\n    //inserting Node\n    head = insertNode(head, 1);\n    head = insertNode(head, 2);\n    head = insertNode(head, 3);\n    head = insertNode(head, 4);\n    head = insertNode(head, 5);\n\n    System.out.println(\"Original list: \");\n    printList(head);\n\n    int k = 2;\n    Node newHead = rotateRight(head, k); //calling function for rotating \n    right of the nodes by k times\n\n    System.out.println(\"After \" + k + \" iterations: \");\n    printList(newHead); //list after rotating nodes\n\n  }\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Original list:<br>1-&gt;2-&gt;3-&gt;4-&gt;5<br>After 2 iterations:<br>4-&gt;5-&gt;1-&gt;2-&gt;3</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity:</strong> O(Number of nodes present in the list*k)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Reason</em>: For k times, we are iterating through the entire list to get the last element and move it to first.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity:</strong> O(1)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Reason</em>: No extra data structures are used for computations</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block\" data-lang=\"python\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">class Node:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n\n\n\n\n# utility function to insert node at the end of the linked list\ndef insertNode(head, val):\n    newNode = Node(val)\n    if head == None:\n        head = newNode\n        return head\n    temp = head\n    while temp.next != None:\n        temp = temp.next\n    temp.next = newNode\n    return head\n\n\n\n\n# utility function to rotate list by k times\ndef rotateRight(head, k):\n    if head == None or head.next == None:\n        return head\n    for i in range(k):\n        temp = head\n        while temp.next.next != None:\n            temp = temp.next\n        end = temp.next\n        temp.next = None\n        end.next = head\n        head = end\n    return head\n\n\n\n\n# utility function to print list\ndef printList(head):\n    while head.next != None:\n        print(head.val, end='->')\n        head = head.next\n    print(head.val)\n    return\n\n\n\n\nif __name__ == '__main__':\n    head = None\n    # inserting Node\n    head = insertNode(head, 1)\n    head = insertNode(head, 2)\n    head = insertNode(head, 3)\n    head = insertNode(head, 4)\n    head = insertNode(head, 5)\n\n\n    print(\"Original list: \", end='')\n    printList(head)\n\n\n    k = 2\n    # calling function for rotating right of the nodes by k times\n    newHead = rotateRight(head, k)\n\n\n    print(\"After\", k, \"iterations: \", end='')\n    printList(newHead)  # list after rotating nodes\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Original list: 1-&gt;2-&gt;3-&gt;4-&gt;5<br>After 2 iterations: 4-&gt;5-&gt;1-&gt;2-&gt;3</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity:</strong> O(Number of nodes present in the list*k)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Reason</em>: For k times, we are iterating through the entire list to get the last element and move it to first.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity:</strong> O(1)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Reason</em>: No extra data structures is used for computations</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Solution: Optimal Solution</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Approach:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Let\u2019s take an example.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>head = [1,2,3,4,5] k = 2000000000</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If we see a brute force approach, it will take O(5*2000000000) which is not a good time complexity when we can optimize it.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We can see that for every k which is multiple of the length of the list, we get back the original list. Try to operate brute force on any linked list for k as a multiple of the length of the list.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This gives us a hint that for k greater than the length of the list, we have to rotate the list for k%length of the list. This reduces our time complexity.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Steps to the algorithm:-</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>Calculate the length of the list.</li><li>Connect the last node to the first node, converting it to a <a href=\"https://takeuforward.org/data-structure/circular-linked-list-in-c/\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>circular linked list</strong></a>.</li><li>Iterate to cut the link of the last node and start a node of k%length of the list rotated list.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Dry Run:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Let\u2019s calculate the length of the list by iterating on it until it reaches null and increasing the count. Once the length is calculated we will connect the last node to the first node.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":2054,\"width\":690,\"height\":371,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2022/01/image-42.png\" alt=\"\" class=\"wp-image-2054\" width=\"690\" height=\"371\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:image {\"id\":2055,\"width\":688,\"height\":371,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2022/01/image-43.png\" alt=\"\" class=\"wp-image-2055\" width=\"688\" height=\"371\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:image {\"id\":2056,\"width\":683,\"height\":361,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2022/01/image-44.png\" alt=\"\" class=\"wp-image-2056\" width=\"683\" height=\"361\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Now, the length of the list is 5 and k is 2. k is less than the length of the given list. So, we will have the head of the rotating list at the kth element from the end remove the link from the length-k node from its next node and make it NULL.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":2057,\"width\":702,\"height\":382,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2022/01/image-45.png\" alt=\"\" class=\"wp-image-2057\" width=\"702\" height=\"382\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Thus, we received our desired output.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nclass node {\n    public:\n        int num;\n        node* next;\n        node(int a) {\n            num = a;\n            next = NULL;\n        }\n};\n//utility function to insert node at the end of the list\nvoid insertNode(node* &amp;head,int val) {\n    node* newNode = new node(val);\n    if(head == NULL) {\n        head = newNode;\n        return;\n    }\n    node* temp = head;\n    while(temp-&gt;next != NULL) temp = temp-&gt;next;\n    \n    temp-&gt;next = newNode;\n    return;\n}\n//utility function to rotate list by k times\nnode* rotateRight(node* head,int k) {\n    if(head == NULL||head-&gt;next == NULL||k == 0) return head;\n    //calculating length\n    node* temp = head;\n    int length = 1;\n    while(temp-&gt;next != NULL) {\n        ++length;\n        temp = temp-&gt;next;\n    }\n    //link last node to first node\n    temp-&gt;next = head;\n    k = k%length; //when k is more than length of list\n    int end = length-k; //to get end of the list\n    while(end--) temp = temp-&gt;next;\n    //breaking last node link and pointing to NULL\n    head = temp-&gt;next;\n    temp-&gt;next = NULL;\n        \n    return head;\n}\n\n//utility function to print list\nvoid printList(node* head) {\n    while(head-&gt;next != NULL) {\n        cout&lt;&lt;head-&gt;num&lt;&lt;\"-&gt;\";\n        head = head-&gt;next;\n    } \n    cout&lt;&lt;head-&gt;num&lt;&lt;endl;\n    return;\n}\n\nint main() {\n    node* head = NULL;\n    //inserting Node\n    insertNode(head,1);\n    insertNode(head,2);\n    insertNode(head,3);\n    insertNode(head,4);\n    insertNode(head,5);\n    \n    cout&lt;&lt;\"Original list: \";\n    printList(head);\n    \n    int k = 2;\n    node* newHead = rotateRight(head,k);//calling function for rotating right of the nodes by k times\n    \n    cout&lt;&lt;\"After \"&lt;&lt;k&lt;&lt;\" iterations: \";\n    printList(newHead);//list after rotating nodes\n    return 0;\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Original list: 1-&gt;2-&gt;3-&gt;4-&gt;5<br>After 2 iterations: 4-&gt;5-&gt;1-&gt;2-&gt;3</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity:</strong> O(length of list) + O(length of list - (length of list%k))</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Reason</em>: O(length of the list) for calculating the length of the list. O(length of the list - (length of list%k)) for breaking link.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity:</strong> O(1)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Reason</em>: No extra data structure is used for computation.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\nclass Node {\n        int num;\n        Node next;\n        Node(int a) {\n            num = a;\n            next = null;\n        }\n}\nclass TUF{\n//utility function to insert node at the end of the list\nstatic Node insertNode(Node head,int val) {\n    Node newNode = new Node(val);\n    if(head == null) {\n        head = newNode;\n        return head;\n    }\n    Node temp = head;\n    while(temp.next != null) temp = temp.next;\n    \n    temp.next = newNode;\n    return head;\n}\n//utility function to rotate list by k times\nstatic Node rotateRight(Node head,int k) {\n    if(head == null||head.next == null||k == 0) return head;\n    //calculating length\n    Node temp = head;\n    int length = 1;\n    while(temp.next != null) {\n        ++length;\n        temp = temp.next;\n    }\n    //link last node to first node\n    temp.next = head;\n    k = k%length; //when k is more than length of list\n    int end = length-k; //to get end of the list\n    while(end--!=0) temp = temp.next;\n    //breaking last node link and pointing to NULL\n    head = temp.next;\n    temp.next = null;\n        \n    return head;\n}\n\n//utility function to print list\nstatic void printList(Node head) {\n    while(head.next != null) {\n        System.out.print(head.num+\"-&gt;\");\n        head = head.next;\n    } \n    System.out.println(head.num);\n    \n}\n\npublic static void main(String args[]) {\n    Node head = null;\n    //inserting Node\n    head=insertNode(head,1);\n    head=insertNode(head,2);\n    head=insertNode(head,3);\n    head=insertNode(head,4);\n    head=insertNode(head,5);\n    \n    System.out.println(\"Original list: \");\n    printList(head);\n    \n    int k = 2;\n    Node newHead = rotateRight(head,k);//calling function for rotating right \n    of the nodes by k times\n    \n    System.out.println(\"After \"+k+\" iterations: \");\n    printList(newHead);//list after rotating nodes\n\n}\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Original list:<br>1-&gt;2-&gt;3-&gt;4-&gt;5<br>After 2 iterations:<br>4-&gt;5-&gt;1-&gt;2-&gt;3</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity:</strong> O(length of list) + O(length of list - (length of list%k))</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Reason</em>: O(length of the list) for calculating the length of the list. O(length of the list - (length of list%k)) for breaking link.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity:</strong> O(1)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Reason</em>: No extra data structure is used for computation.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block\" data-lang=\"python\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">class Node:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n\n\n\n\n# utility function to insert node at the end of the linked list\ndef insertNode(head, val):\n    newNode = Node(val)\n    if head == None:\n        head = newNode\n        return head\n    temp = head\n    while temp.next != None:\n        temp = temp.next\n    temp.next = newNode\n    return head\n\n\n\n\n# utility function to rotate list by k times\ndef rotateRight(head, k):\n    if head == None or head.next == None or k == 0:\n        return head\n    # calculating length\n    temp = head\n    length = 1\n    while temp.next != None:\n        length += 1\n        temp = temp.next\n    # link last node to first node\n    temp.next = head\n    k = k % length  # when k is more than length of list\n    end = length - k  # to get end of the list\n    while end:\n        temp = temp.next\n        end -= 1\n    # breaking last node link and pointing to NULL\n    head = temp.next\n    temp.next = None\n\n\n    return head\n\n\n\n\n# utility function to print list\ndef printList(head):\n    while head.next != None:\n        print(head.val, end='->')\n        head = head.next\n    print(head.val)\n    return\n\n\n\n\nif __name__ == '__main__':\n    head = None\n    # inserting Node\n    head = insertNode(head, 1)\n    head = insertNode(head, 2)\n    head = insertNode(head, 3)\n    head = insertNode(head, 4)\n    head = insertNode(head, 5)\n\n\n    print(\"Original list: \", end='')\n    printList(head)\n\n\n    k = 2\n    # calling function for rotating right of the nodes by k times\n    newHead = rotateRight(head, k)\n\n\n    print(\"After\", k, \"iterations: \", end='')\n    printList(newHead)  # list after rotating nodes</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Original list: 1-&gt;2-&gt;3-&gt;4-&gt;5<br>After 2 iterations: 4-&gt;5-&gt;1-&gt;2-&gt;3</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity:</strong> O(length of list) + O(length of list - (length of list%k))</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Reason</em>: O(length of the list) for calculating the length of the list. O(length of the list - (length of list%k)) for breaking link.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity:</strong> O(1)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Reason</em>: No extra data structure is used for computation.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em><em>Special thanks to\u00a0<strong><a href=\"https://www.linkedin.com/in/dewanshi-paul-2515091b9\" target=\"_blank\" rel=\"noreferrer noopener\">Dewanshi Paul</a> and <em><a href=\"https://www.linkedin.com/in/imsudip/\" target=\"_blank\" rel=\"noopener\" title=\"\">Sudip Ghosh</a></em></strong>\u00a0for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,\u00a0</em><a href=\"https://takeuforward.org/contribute/help-us-grow-takeuforward/\">please check out this articl</a></em>e</p></blockquote>\n<!-- /wp:quote -->"
}