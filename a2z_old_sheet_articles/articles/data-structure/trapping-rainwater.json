{
    "dislikes": 8,
    "video": "m18Hntz4go8",
    "publishedOn": "Sun Mar 24 2024 22:09:20 GMT+0530 (India Standard Time)",
    "slug": "trapping-rainwater",
    "aid": "1459",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/trapping-rainwater",
    "title": "Trapping Rainwater",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "stack",
            "topic-title": "Stack"
        }
    ],
    "category_tag": "data-structure",
    "likes": 162,
    "preview": "Problem Statement: Given an array of non-negative integers representation elevation of ground. Your task is to find the water that can be trapped after rain. Examples: Example 1: Input: height= [0,...",
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement:</strong> Given an array of non-negative integers representation elevation of ground. Your task is to find the water that can be trapped after rain.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Examples:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\"><strong>Example 1:</strong>\n\n<strong>Input:</strong> height= [0,1,0,2,1,0,1,3,2,1,2,1]\n\n<strong>Output:</strong> 6\n\n<strong>Explanation:</strong> As seen from the diagram 1+1+2+1+1=6 unit of water can be trapped\n\n<img width=\"602\" height=\"185\" src=\"https://lh5.googleusercontent.com/hOxXODWtxKylLDwiTcNhYOHl971ZA598XSetgJEdWqOLClWo0v19WTRT4PArmNa_SDU3ZJ-pnbe2Hl5gwXBHw5g8PsKpSY5E2aM_XibdIktRvkJ3ILw2W8X8aLfgHgRgQWcvkUbY\">\n\n<strong>Example 2:</strong>\n\n<strong>Input: </strong> [4,2,0,3,2,5]\n\n<strong>Output:</strong>9\n</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Solution</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong><em>Disclaimer</em></strong>: <em>Don't jump directly to the solution, try it out yourself first.</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Solution 1: Brute force</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Approach</strong>: For each index, we have to find the amount of water that can be stored and we have to sum it up.If we observe carefully the amount the water stored at a particular index is the minimum of maximum elevation to the left and right of the index minus the elevation at that index.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include&lt;bits/stdc++.h&gt;\n\nusing namespace std;\nint trap(vector &lt; int &gt; &amp; arr) {\n  int n = arr.size();\n  int waterTrapped = 0;\n  for (int i = 0; i &lt; n; i++) {\n    int j = i;\n    int leftMax = 0, rightMax = 0;\n    while (j &gt;= 0) {\n      leftMax = max(leftMax, arr[j]);\n      j--;\n    }\n    j = i;\n    while (j &lt; n) {\n      rightMax = max(rightMax, arr[j]);\n      j++;\n    }\n    waterTrapped += min(leftMax, rightMax) - arr[i];\n  }\n  return waterTrapped;\n}\n\nint main() {\n  vector &lt; int &gt; arr;\n  arr = {0,1,0,2,1,0,1,3,2,1,2,1};\n  cout &lt;&lt; \"The water that can be trapped is \" &lt;&lt; trap(arr) &lt;&lt; endl;\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> The water that can be trapped is 6</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity:</strong> O(N*N) as for each index we are calculating leftMax and rightMax so it is a nested loop.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity:</strong> O(1).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\nclass TUF {\n    static int trap(int[] arr) {\n        int n = arr.length;\n        int waterTrapped = 0;\n        for (int i = 0; i &lt; n; i++) {\n            int j = i;\n            int leftMax = 0, rightMax = 0;\n            while (j &gt;= 0) {\n                leftMax = Math.max(leftMax, arr[j]);\n                j--;\n            }\n            j = i;\n            while (j &lt; n) {\n                rightMax = Math.max(rightMax, arr[j]);\n                j++;\n            }\n            waterTrapped += Math.min(leftMax, rightMax) - arr[i];\n        }\n        return waterTrapped;\n    }\n    public static void main(String args[]) {\n        int arr[] = {0,1,0,2,1,0,1,3,2,1,2,1};\n        System.out.println(\"The duplicate element is \" + trap(arr));\n    }\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> The water that can be trapped is 6</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity:</strong> O(N*N) as for each index we are calculating leftMax and rightMax so it is a nested loop.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity:</strong> O(1).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block\" data-lang=\"python\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">from typing import List\n\n\n\n\ndef trap(arr: List[int]) -> int:\n    n = len(arr)\n    waterTrapped = 0\n    for i in range(n):\n        j = i\n        leftMax = 0\n        rightMax = 0\n        while j >= 0:\n            leftMax = max(leftMax, arr[j])\n            j -= 1\n        j = i\n        while j &lt; n:\n            rightMax = max(rightMax, arr[j])\n            j += 1\n        waterTrapped += min(leftMax, rightMax) - arr[i]\n    return waterTrapped\n\n\n\n\nif __name__ == \"__main__\":\n    arr = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]\n    print(f\"The water that can be trapped is {trap(arr)}\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> The water that can be trapped is 6</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity:</strong> O(N*N) as for each index we are calculating leftMax and rightMax so it is a nested loop.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity:</strong> O(1).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Solution 2:Better solution</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Intuition: </strong>We are taking O(N) for computing leftMax and rightMax at each index. The complexity can be boiled down to O(1) if we precompute the leftMax and rightMax at each index.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Approach: </strong>Take 2 array prefix and suffix array and precompute the leftMax and rightMax for each index beforehand. Then use the formula min(prefix[I], suffix[i])-arr[i] to compute water trapped at each index.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include&lt;bits/stdc++.h&gt;\n\nusing namespace std;\nint trap(vector &lt; int &gt; &amp; arr) {\n  int n = arr.size();\n  int prefix[n], suffix[n];\n  prefix[0] = arr[0];\n  for (int i = 1; i &lt; n; i++) {\n    prefix[i] = max(prefix[i - 1], arr[i]);\n  }\n  suffix[n - 1] = arr[n - 1];\n  for (int i = n - 2; i &gt;= 0; i--) {\n    suffix[i] = max(suffix[i + 1], arr[i]);\n  }\n  int waterTrapped = 0;\n  for (int i = 0; i &lt; n; i++) {\n    waterTrapped += min(prefix[i], suffix[i]) - arr[i];\n  }\n  return waterTrapped;\n}\n\nint main() {\n  vector &lt; int &gt; arr;\n  arr = {0,1,0,2,1,0,1,3,2,1,2,1};\n  cout &lt;&lt; \"The water that can be trapped is \" &lt;&lt; trap(arr) &lt;&lt; endl;\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> The water that can be trapped is 6</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O(3*N) as we are traversing through the array only once. And O(2*N) for computing prefix and suffix array. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(N)+O(N) for prefix and suffix arrays.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\nclass TUF {\n    static int trap(int[] arr) {\n        int n = arr.length;\n        int prefix[] = new int[n];\n        int suffix[] = new int[n];\n        prefix[0] = arr[0];\n        for (int i = 1; i &lt; n; i++) {\n            prefix[i] = Math.max(prefix[i - 1], arr[i]);\n        }\n        suffix[n - 1] = arr[n - 1];\n        for (int i = n - 2; i &gt;= 0; i--) {\n            suffix[i] = Math.max(suffix[i + 1], arr[i]);\n        }\n        int waterTrapped = 0;\n        for (int i = 0; i &lt; n; i++) {\n            waterTrapped += Math.min(prefix[i], suffix[i]) - arr[i];\n        }\n        return waterTrapped;\n    }\n\n    public static void main(String args[]) {\n        int arr[] = {0,1,0,2,1,0,1,3,2,1,2,1};\n        System.out.println(\"The duplicate element is \" + trap(arr));\n    }\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> The water that can be trapped is 6</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O(3*N) as we are traversing through the array only once. And O(2*N) for computing prefix and suffix array. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(N)+O(N) for prefix and suffix arrays.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block\" data-lang=\"python\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">from typing import List\n\n\n\n\ndef trap(arr: List[int]) -> int:\n    n = len(arr)\n    prefix = [0] * n\n    suffix = [0] * n\n    prefix[0] = arr[0]\n    for i in range(1, n):\n        prefix[i] = max(prefix[i - 1], arr[i])\n    suffix[n - 1] = arr[n - 1]\n    for i in range(n - 2, -1, -1):\n        suffix[i] = max(suffix[i + 1], arr[i])\n    waterTrapped = 0\n    for i in range(n):\n        waterTrapped += min(prefix[i], suffix[i]) - arr[i]\n    return waterTrapped\n\n\n\n\nif __name__ == \"__main__\":\n    arr = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]\n    print(f\"The water that can be trapped is {trap(arr)}\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> The water that can be trapped is 6</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O(3*N) as we are traversing through the array only once. And O(2*N) for computing prefix and suffix array. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(N)+O(N) for prefix and suffix arrays.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Solution 3:Optimal Solution(<a href=\"https://takeuforward.org/data-structure/what-is-two-pointer-approach/\" target=\"_blank\" rel=\"noreferrer noopener\">Two pointer approach</a>)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Approach:</strong> Take 2 pointers l(left pointer) and r(right pointer) pointing to 0th and (n-1)th index respectively. Take two variables leftMax and rightMax and initialize them to 0. If height[l] is less than or equal to height[r] then if leftMax is less than height[l] update leftMax to height[l] else add leftMax-height[l] to your final answer and move the l pointer to the right i.e l++. If height[r] is less than height[l], then now we are dealing with the right block. If height[r] is greater than rightMax, then update rightMax to height[r] else add rightMax-height[r] to the final answer. Now move r to the left. Repeat these steps till l and r crosses each other.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Intuition:</strong> We need a minimum of leftMax and rightMax.So if we take the case when height[l]&lt;=height[r] we increase l++, so we can surely say that there is a block with a height more than height[l] to the right of l. And for the same reason when height[r]&lt;=height[l] we can surely say that there is a block to the left of r which is at least of height[r]. So by traversing these cases and using two pointers approach the time complexity can be decreased without using extra space.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include&lt;bits/stdc++.h&gt;\n\nusing namespace std;\nint trap(vector &lt; int &gt; &amp; height) {\n  int n = height.size();\n  int left = 0, right = n - 1;\n  int res = 0;\n  int maxLeft = 0, maxRight = 0;\n  while (left &lt;= right) {\n    if (height[left] &lt;= height[right]) {\n      if (height[left] &gt;= maxLeft) {\n        maxLeft = height[left];\n      } else {\n        res += maxLeft - height[left];\n      }\n      left++;\n    } else {\n      if (height[right] &gt;= maxRight) {\n        maxRight = height[right];\n      } else {\n        res += maxRight - height[right];\n      }\n      right--;\n    }\n  }\n  return res;\n}\n\nint main() {\n  vector &lt; int &gt; arr;\n  arr = {0,1,0,2,1,0,1,3,2,1,2,1};\n  cout &lt;&lt; \"The water that can be trapped is \" &lt;&lt; trap(arr) &lt;&lt; endl;\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> The water that can be trapped is 6</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity:</strong> O(N) because we are using 2 pointer approach.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity:</strong> O(1) because we are not using anything extra.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\nclass TUF {\n    static int trap(int[] height) {\n        int n = height.length;\n        int left = 0, right = n - 1;\n        int res = 0;\n        int maxLeft = 0, maxRight = 0;\n        while (left &lt;= right) {\n            if (height[left] &lt;= height[right]) {\n                if (height[left] &gt;= maxLeft) {\n                    maxLeft = height[left];\n                } else {\n                    res += maxLeft - height[left];\n                }\n                left++;\n            } else {\n                if (height[right] &gt;= maxRight) {\n                    maxRight = height[right];\n                } else {\n                    res += maxRight - height[right];\n                }\n                right--;\n            }\n        }\n        return res;\n    }\n\n\n    public static void main(String args[]) {\n        int arr[] = {0,1,0,2,1,0,1,3,2,1,2,1};\n        System.out.println(\"The duplicate element is \" + trap(arr));\n    }\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> The water that can be trapped is 6</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity:</strong> O(N) because we are using 2 pointer approach.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity:</strong> O(1) because we are not using anything extra.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block\" data-lang=\"python\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">from typing import List\n\n\n\n\ndef trap(height: List[int]) -> int:\n    n = len(height)\n    left = 0\n    right = n-1\n    res = 0\n    maxLeft = 0\n    maxRight = 0\n    while left &lt;= right:\n        if height[left] &lt;= height[right]:\n            if height[left] >= maxLeft:\n                maxLeft = height[left]\n            else:\n                res += maxLeft - height[left]\n            left += 1\n        else:\n            if height[right] >= maxRight:\n                maxRight = height[right]\n            else:\n                res += maxRight - height[right]\n            right -= 1\n    return res\n\n\n\n\nif __name__ == \"__main__\":\n    arr = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]\n    print(f\"The water that can be trapped is {trap(arr)}\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> The water that can be trapped is 6</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity:</strong> O(N) because we are using 2 pointer approach.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity:</strong> O(1) because we are not using anything extra.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to\u00a0<strong><strong><a href=\"https://www.linkedin.com/in/pranav-padawe-9486241ba/\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>Pranav Padawe</strong></a></strong></strong>\u00a0<em><em><strong>and\u00a0<em><a href=\"https://www.linkedin.com/in/imsudip/\" target=\"_blank\" rel=\"noreferrer noopener\">Sudip Ghosh</a></em></strong></em></em></em> <em>for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,\u00a0</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->"
}