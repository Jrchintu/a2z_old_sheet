{
    "dislikes": 3,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:09:14 GMT+0530 (India Standard Time)",
    "slug": "median-of-two-sorted-arrays-of-different-sizes",
    "aid": "1430",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/median-of-2-sorted-arrays",
    "title": "Median of Two Sorted Arrays of different sizes",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "binary-search",
            "topic-title": "Binary Search"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        }
    ],
    "likes": 200,
    "category_tag": "data-structure",
    "preview": "Problem Statement: Given two sorted arrays arr1 and arr2 of size m and n respectively, return the median of the two sorted arrays. The median is defined as the middle value of a sorted list of numb...",
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement: </strong>Given <strong>two sorted arrays</strong> arr1 and arr2 of size m and n respectively, return the <strong>median</strong> of the two sorted arrays. The median is defined as the middle value of a sorted list of numbers. In case the length of the list is even, the median is the average of the two middle elements.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n<details class=\"article_example_details\">\n<summary class=\"article_example_summary\">\n<span><strong>\nExamples\n</strong>\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"atricle_example_content\">\n<pre class=\"wp-block-preformatted\"><!-- Insert New Examples Here -->\n<pre class=\"wp-block-preformatted\"><strong>Example 1:</strong>\n<strong>Input Format:</strong> n1 = 3, arr1[] = {2,4,6}, n2 = 3, arr2[] = {1,3,5}\n<strong>Result:</strong> 3.5\n<strong>Explanation:</strong> The array after merging 'a' and 'b' will be { 1, 2, 3, 4, 5, 6 }. As the length of the merged list is even, the median is the average of the two middle elements. Here two medians are 3 and 4. So the median will be the average of 3 and 4, which is 3.5.\n\n<strong>Example 2:</strong>\n<strong>Input Format:</strong> n1 = 3, arr1[] = {2,4,6}, n2 = 2, arr2[] = {1,3}\n<strong>Result:</strong> 3\n<strong>Explanation:</strong> The array after merging 'a' and 'b' will be { 1, 2, 3, 4, 6 }. The median is simply 3.\n</pre>\n</pre>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Practice Section-->\n<div class=\"practice\">\n<span><strong>Practice: </strong></span>\n<div class=\"problem-buttons\">\n\n<!-- Add Problem Link inside href -->\n<a href=\"https://bit.ly/3BtvLJS\" target=\"_blank\" rel=\"noopener\">\n<span>Solve Problem</span>\n<img src=\"https://static.takeuforward.org/wp/uploads/2023/04/Group-11-5.png\" alt=\"code-studio\">\n</a>\n</div>\n</div>\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\nyourself first. </em></p>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<div class=\"horizontal_navbar_dsa_article\">\n<div class=\"grid_container_three\">\n<a href=\"#brute-force-approach\" class=\"three-boxes box-a\">\nBrute Force Approach\n</a>\n<a href=\"#better-approach\" class=\"three-boxes box-b\">\nBetter Approach\n</a>\n<a href=\"#optimal-approach\" class=\"three-boxes box-c\">\nOptimal Approach \n</a>\n<a href=\"#dsa_article_video_explanation\" class=\"three-boxes box-d\">\n<svg width=\"26\" height=\"26\" viewBox=\"0 0 20 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M8 10L13.19 7L8 4V10ZM19.56 2.17C19.69 2.64 19.78 3.27 19.84 4.07C19.91 4.87 19.94 5.56 19.94 6.16L20 7C20 9.19 19.84 10.8 19.56 11.83C19.31 12.73 18.73 13.31 17.83 13.56C17.36 13.69 16.5 13.78 15.18 13.84C13.88 13.91 12.69 13.94 11.59 13.94L10 14C5.81 14 3.2 13.84 2.17 13.56C1.27 13.31 0.69 12.73 0.44 11.83C0.31 11.36 0.22 10.73 0.16 9.93C0.0900001 9.13 0.0599999 8.44 0.0599999 7.84L0 7C0 4.81 0.16 3.2 0.44 2.17C0.69 1.27 1.27 0.69 2.17 0.44C2.64 0.31 3.5 0.22 4.82 0.16C6.12 0.0899998 7.31 0.0599999 8.41 0.0599999L10 0C14.19 0 16.8 0.16 17.83 0.44C18.73 0.69 19.31 1.27 19.56 2.17Z\" fill=\"red\"></path>\n</svg>\n\n</a>\n<div class=\"box-e tooltip\">\n<svg viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M12.842 9.25L11.9577 10.17C11.2502 10.89 10.8081 11.5 10.8081 13H8.84297V12.5C8.84297 11.39 9.28511 10.39 9.99255 9.67L11.2109 8.41C11.5745 8.05 11.7906 7.55 11.7906 7C11.7906 6.46957 11.5836 5.96086 11.2151 5.58579C10.8465 5.21071 10.3467 5 9.82552 5C9.30434 5 8.80451 5.21071 8.43598 5.58579C8.06745 5.96086 7.86041 6.46957 7.86041 7H5.89531C5.89531 5.93913 6.30938 4.92172 7.04644 4.17157C7.7835 3.42143 8.78316 3 9.82552 3C10.8679 3 11.8675 3.42143 12.6046 4.17157C13.3417 4.92172 13.7557 5.93913 13.7557 7C13.7543 7.84324 13.4259 8.65183 12.842 9.25ZM10.8081 17H8.84297V15H10.8081M9.82552 0C8.53521 0 7.25754 0.258658 6.06545 0.761205C4.87337 1.26375 3.79021 2.00035 2.87783 2.92893C1.03519 4.8043 0 7.34784 0 10C0 12.6522 1.03519 15.1957 2.87783 17.0711C3.79021 17.9997 4.87337 18.7362 6.06545 19.2388C7.25754 19.7413 8.53521 20 9.82552 20C12.4314 20 14.9306 18.9464 16.7732 17.0711C18.6158 15.1957 19.651 12.6522 19.651 10C19.651 4.47 15.2296 0 9.82552 0Z\" fill=\"black\"></path>\n</svg>\n<div class=\"bottom\">\n<p>Expand any one approach by clicking the given options in the bar. Clicking one approach on bar,\ncloses all other expands. You can manually expand more than one approach at a time</p>\n<i></i>\n</div>\n\n</div>\n</div>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Approaches Drop-Down -->\n<div class=\"dsa_article_dropdown_approachs \">\n\n<!-- Brute Force Approach Starts from here -->\n<div id=\"brute-force-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nBrute Force Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n<h3><strong>Naive Approach(Brute-force)</strong>:&nbsp;</h3>\n<p>The extremely naive approach is to merge the two sorted arrays and then find the median in that merged array.</p>\n<p><strong>How to merge two sorted arrays:</strong></p>\n<p>The word \u201cmerge\u201d suggests applying the merge step of the <a href=\"https://takeuforward.org/data-structure/merge-sort-algorithm/\">merge sort algorithm</a>. In that step, we essentially perform the same actions as required by this solution. By using two pointers on two given arrays, we fill up the elements into a third array.</p>\n<p><strong>How to find the median:</strong></p>\n<ul><li><strong>If the length of the merged array (n1+n2) is even: </strong>The median is the average of the two middle elements. index = (n1+n2) / 2, median = (arr3[index] + arr3[index-1]) / 2.0.</li><li><strong>If the length of the merged array (n1+n2) is odd: </strong>index = (n1+n2) / 2,<br>median = arr3[index].</li></ul>\n<p><strong>Algorithm:</strong></p>\n<ol><li>We will use a third array i.e. arr3[] of size (n1+n2) to store the elements of the two sorted arrays.&nbsp;</li><li>Now, we will take two pointers i and j, where i points to the first element of arr1[] and j points to the first element of arr2[].</li><li>Next, using a while loop( while(i &lt; n1 &amp;&amp; j &lt; n2)), we will select two elements i.e. arr1[i] and arr2[j], and consider the smallest one among the two. Then, we will insert the smallest element in the third array and increase that specific pointer by 1.<ol><li><strong>If arr1[i] &lt; arr2[j]: </strong>Insert arr1[i] into the third array and increase i by 1.</li><li><strong>Otherwise: </strong>Insert arr2[j] into the third array and increase j by 1.</li></ol></li><li>After that, the left-out elements from both arrays will be copied as it is into the third array.</li><li>Now, the third array i.e. arr3[] will be the sorted merged array. Now the median will be the following:<ol><li><strong>If the length of arr3[] i.e. (n1+n2) is even: </strong>The median is the average of the two middle elements. index = (n1+n2) / 2, median = (arr3[index] + arr3[index-1]) / 2.0.</li><li><strong>If the length of arr3[] i.e. (n1+n2) is odd: </strong>index = (n1+n2) / 2,<br>median = arr3[index].</li></ol></li><li>Finally, we will return the value of the median.</li></ol>\n<p><strong>Dry-run: </strong><em>Please refer to the attached video for a detailed dry-run.</em></p>\n<p><img src=\"https://lh5.googleusercontent.com/gNnVUolM2WfLeSLrsVnDLiUORUIAFwhySR8B9_Q4yytRXpmQn5RzkFzoRPAuML-PH15L-HDRzYE85hHpO0SOHyZh65OisOLTAi1OQ9kjnOBngH7ArBB6dsf4ivXw5DNCgoJytCKzN3GjX6B11fLkHeA\" width=\"624\" height=\"351\"></p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n\n<!-- Insert C++ code of Brute Force Here -->\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\ndouble median(vector&lt;int&gt;&amp; a, vector&lt;int&gt;&amp; b) {\n    //size of two given arrays:\n    int n1 = a.size(), n2 = b.size();\n\n    vector&lt;int&gt; arr3;\n    //apply the merge step:\n    int i = 0, j = 0;\n    while (i &lt; n1 &amp;&amp; j &lt; n2) {\n        if (a[i] &lt; b[j]) arr3.push_back(a[i++]);\n        else arr3.push_back(b[j++]);\n    }\n\n    //copy the left-out elements:\n    while (i &lt; n1) arr3.push_back(a[i++]);\n    while (j &lt; n2) arr3.push_back(b[j++]);\n\n    //Find the median:\n    int n = n1 + n2;\n    if (n % 2 == 1) {\n        return (double)arr3[n / 2];\n    }\n\n    double median = ((double)arr3[n / 2] + (double)arr3[(n / 2) - 1]) / 2.0;\n    return median;\n}\n\nint main()\n{\n    vector&lt;int&gt; a = {1, 4, 7, 10, 12};\n    vector&lt;int&gt; b = {2, 3, 6, 15};\n    cout &lt;&lt; \"The median of two sorted array is \" &lt;&lt; fixed &lt;&lt; setprecision(1)\n         &lt;&lt; median(a, b) &lt;&lt; '\\n';\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\n<!-- Insert Java code of Brute Force Here -->\nimport java.util.*;\n\npublic class tUf {\n    public static double median(int[] a, int[] b) {\n        // Size of two given arrays\n        int n1 = a.length;\n        int n2 = b.length;\n\n        List&lt;Integer&gt; arr3 = new ArrayList&lt;&gt;();\n        // Apply the merge step\n        int i = 0, j = 0, k = 0;\n        while (i &lt; n1 &amp;&amp; j &lt; n2) {\n            if (a[i] &lt; b[j]) {\n                arr3.add(a[i++]);\n            } else {\n                arr3.add(b[j++]);\n            }\n        }\n\n        // Copy the left-out elements\n        while (i &lt; n1) {\n            arr3.add(a[i++]);\n        }\n        while (j &lt; n2) {\n            arr3.add(b[j++]);\n        }\n\n        // Find the median\n        int n = n1 + n2;\n        if (n % 2 == 1) {\n            return (double) arr3.get(n / 2);\n        }\n\n        double median = ((double) arr3.get(n / 2) + (double) arr3.get((n / 2) - 1)) / 2.0;\n        return median;\n    }\n\n    public static void main(String[] args) {\n        int[] a = {1, 4, 7, 10, 12};\n        int[] b = {2, 3, 6, 15};\n        System.out.println(\"The median of two sorted arrays is \" + median(a, b));\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\n<!-- Insert Python code of Brute Force Here -->\ndef median(a, b):\n    # size of two given arrays:\n    n1, n2 = len(a), len(b)\n\n    arr3 = []\n    # apply the merge step:\n    i, j = 0, 0\n    while i &lt; n1 and j &lt; n2:\n        if a[i] &lt; b[j]:\n            arr3.append(a[i])\n            i += 1\n        else:\n            arr3.append(b[j])\n            j += 1\n\n    # copy the left-out elements:\n    arr3.extend(a[i:])\n    arr3.extend(b[j:])\n\n    # Find the median:\n    n = n1 + n2\n    if n % 2 == 1:\n        return float(arr3[n // 2])\n\n    median = (arr3[n // 2] + arr3[(n // 2) - 1]) / 2.0\n    return median\n\n\nif __name__ == \"__main__\":\n    a = [1, 4, 7, 10, 12]\n    b = [2, 3, 6, 15]\n    print(\"The median of two sorted arrays is\", \"{:.1f}\".format(median(a, b)))\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\n<!-- Insert JavaScript code of Brute Force Here -->\nfunction median(a, b) {\n    // size of two given arrays:\n    const n1 = a.length, n2 = b.length;\n\n    const arr3 = [];\n    // apply the merge step:\n    let i = 0, j = 0;\n    while (i &lt; n1 &amp;&amp; j &lt; n2) {\n        if (a[i] &lt; b[j]) arr3.push(a[i++]);\n        else arr3.push(b[j++]);\n    }\n\n    // copy the left-out elements:\n    while (i &lt; n1) arr3.push(a[i++]);\n    while (j &lt; n2) arr3.push(b[j++]);\n\n    // Find the median:\n    const n = n1 + n2;\n    if (n % 2 === 1) {\n        return arr3[Math.floor(n / 2)];\n    }\n\n    const median = (arr3[n / 2] + arr3[(n / 2) - 1]) / 2.0;\n    return median;\n}\n\nconst a = [1, 4, 7, 10, 12];\nconst b = [2, 3, 6, 15];\nconsole.log(\"The median of two sorted arrays is \" + median(a, b).toFixed(1));\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Brute Force Here -->\n</p><p><strong>Output:</strong> The median of two sorted arrays is 6.0\n\n</p>\n<p></p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n<!-- Insert Time and Space Complexity of Brute Force Here -->\n</p><p><strong>Time Complexity: </strong>O(n1+n2), where&nbsp; n1 and n2 are the sizes of the given arrays.<br><strong>Reason: </strong>We traverse through both arrays linearly.</p>\n<p><strong>Space Complexity: </strong>O(n1+n2), where&nbsp; n1 and n2 are the sizes of the given arrays.<br><strong>Reason: </strong>We are using an extra array of size (n1+n2) to solve this problem.</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Brute Force Approach Ends here -->\n\n\n<!-- Better Approach Starts from here -->\n\n<div id=\"better-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nBetter Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition For Better Approach Here -->\n<p>To optimize the space used in the previous approach, we can eliminate the third array used to store the final merged result. After closer examination, we realize that we only need the two middle elements at indices (n1+n2)/2 and ((n1+n2)/2)-1, rather than the entire merged array, to solve the problem effectively.</p>\n<p>We will stick to the same basic approach, but instead of storing elements in a separate array, we will use a counter called 'cnt' to represent the imaginary third array's index. As we traverse through the arrays, when 'cnt' reaches either index (n1+n2)/2 or ((n1+n2)/2)-1, we will store that particular element. This way, we can achieve the same goal without using any extra space.</p>\n<h3><strong>Algorithm:</strong></h3>\n<ol><li>We will call the required indices as <strong>ind2 = </strong>(n1+n2)/2 and <strong>ind1 = </strong>((n1+n2)/2)-1. Now we will declare the counter called \u2018cnt\u2019 and initialize it with 0.</li><li>Now, as usual, we will take two pointers i and j, where i points to the first element of arr1[] and j points to the first element of arr2[].</li><li>Next, using a while loop( while(i &lt; n1 &amp;&amp; j &lt; n2)), we will select two elements i.e. arr1[i] and arr2[j], and consider the smallest one among the two. Then, we will increase that specific pointer by 1.<br>In addition to that, in each iteration, we will check if the counter \u2018cnt\u2019 hits the indices <strong>ind1 or ind2. </strong>when 'cnt' reaches either index ind1 or ind2, we will store that particular element. We will also increase the \u2018cnt\u2019 by 1 every time regardless of matching the conditions.<ol><li><strong>If arr1[i] &lt; arr2[j]: </strong>Check \u2018cnt\u2019 to perform necessary operations and increase i and \u2018cnt\u2019 by 1.</li><li><strong>Otherwise: </strong>Check \u2018cnt\u2019 to perform necessary operations and increase j and \u2018cnt\u2019 by 1.</li></ol></li><li>After that, the left-out elements from both arrays will be copied as it is into the third array. While copying we will again check the above-said conditions for the counter, \u2018cnt\u2019 and increase it by 1.</li><li>Now, let\u2019s call the elements at the required indices as <strong>ind1el(</strong><strong><em>at ind1</em></strong><strong>) </strong>and<strong> ind2el(</strong><strong><em>at ind2</em></strong><strong>)</strong>:<ol><li><strong>If the total length i.e. (n1+n2) is even: </strong>The median is the average of the two middle elements. median = (ind1el + ind2el) / 2.0.</li><li><strong>If the total length i.e. (n1+n2) is odd: </strong>median = ind2el.</li></ol></li><li>Finally, we will return the value of the median.</li></ol>\n<p><strong>Dry-run: </strong><em>Please refer to the attached video for a detailed dry-run.</em></p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n\n<!-- Insert C++ Code of Better Approach Here -->\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\ndouble median(vector&lt;int&gt;&amp; a, vector&lt;int&gt;&amp; b) {\n    //size of two given arrays:\n    int n1 = a.size(), n2 = b.size();\n    int n = n1 + n2; //total size\n    //required indices:\n    int ind2 = n / 2;\n    int ind1 = ind2 - 1;\n    int cnt = 0;\n    int ind1el = -1, ind2el = -1;\n\n    //apply the merge step:\n    int i = 0, j = 0;\n    while (i &lt; n1 &amp;&amp; j &lt; n2) {\n        if (a[i] &lt; b[j]) {\n            if (cnt == ind1) ind1el = a[i];\n            if (cnt == ind2) ind2el = a[i];\n            cnt++;\n            i++;\n        }\n        else {\n            if (cnt == ind1) ind1el = b[j];\n            if (cnt == ind2) ind2el = b[j];\n            cnt++;\n            j++;\n        }\n    }\n\n    //copy the left-out elements:\n    while (i &lt; n1) {\n        if (cnt == ind1) ind1el = a[i];\n        if (cnt == ind2) ind2el = a[i];\n        cnt++;\n        i++;\n    }\n    while (j &lt; n2) {\n        if (cnt == ind1) ind1el = b[j];\n        if (cnt == ind2) ind2el = b[j];\n        cnt++;\n        j++;\n    }\n\n    //Find the median:\n    if (n % 2 == 1) {\n        return (double)ind2el;\n    }\n\n    return (double)((double)(ind1el + ind2el)) / 2.0;\n}\n\nint main()\n{\n    vector&lt;int&gt; a = {1, 4, 7, 10, 12};\n    vector&lt;int&gt; b = {2, 3, 6, 15};\n    cout &lt;&lt; \"The median of two sorted array is \" &lt;&lt; fixed &lt;&lt; setprecision(1)\n         &lt;&lt; median(a, b) &lt;&lt; '\\n';\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\n<!-- Insert Java Code of Better Approach Here -->\nimport java.util.*;\n\npublic class tUf {\n    public static double median(int[] a, int[] b) {\n        // Size of two given arrays\n        int n1 = a.length;\n        int n2 = b.length;\n\n        int n = n1 + n2; //total size\n        //required indices:\n        int ind2 = n / 2;\n        int ind1 = ind2 - 1;\n        int cnt = 0;\n        int ind1el = -1, ind2el = -1;\n\n        //apply the merge step:\n        int i = 0, j = 0;\n        while (i &lt; n1 &amp;&amp; j &lt; n2) {\n            if (a[i] &lt; b[j]) {\n                if (cnt == ind1) ind1el = a[i];\n                if (cnt == ind2) ind2el = a[i];\n                cnt++;\n                i++;\n            } else {\n                if (cnt == ind1) ind1el = b[j];\n                if (cnt == ind2) ind2el = b[j];\n                cnt++;\n                j++;\n            }\n        }\n\n        //copy the left-out elements:\n        while (i &lt; n1) {\n            if (cnt == ind1) ind1el = a[i];\n            if (cnt == ind2) ind2el = a[i];\n            cnt++;\n            i++;\n        }\n        while (j &lt; n2) {\n            if (cnt == ind1) ind1el = b[j];\n            if (cnt == ind2) ind2el = b[j];\n            cnt++;\n            j++;\n        }\n\n        //Find the median:\n        if (n % 2 == 1) {\n            return (double)ind2el;\n        }\n\n        return (double)((double)(ind1el + ind2el)) / 2.0;\n    }\n\n    public static void main(String[] args) {\n        int[] a = {1, 4, 7, 10, 12};\n        int[] b = {2, 3, 6, 15};\n        System.out.println(\"The median of two sorted arrays is \" + median(a, b));\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\n<!-- Insert Python Code of Better Approach Here -->\ndef median(a, b):\n    # size of two given arrays:\n    n1, n2 = len(a), len(b)\n    n = n1 + n2  # total size\n    # required indices:\n    ind2 = n // 2\n    ind1 = ind2 - 1\n    cnt = 0\n    ind1el, ind2el = -1, -1\n\n    # apply the merge step:\n    i, j = 0, 0\n    while i &lt; n1 and j &lt; n2:\n        if a[i] &lt; b[j]:\n            if cnt == ind1:\n                ind1el = a[i]\n            if cnt == ind2:\n                ind2el = a[i]\n            cnt += 1\n            i += 1\n        else:\n            if cnt == ind1:\n                ind1el = b[j]\n            if cnt == ind2:\n                ind2el = b[j]\n            cnt += 1\n            j += 1\n\n    # copy the left-out elements:\n    while i &lt; n1:\n        if cnt == ind1:\n            ind1el = a[i]\n        if cnt == ind2:\n            ind2el = a[i]\n        cnt += 1\n        i += 1\n    while j &lt; n2:\n        if cnt == ind1:\n            ind1el = b[j]\n        if cnt == ind2:\n            ind2el = b[j]\n        cnt += 1\n        j += 1\n\n    # Find the median:\n    if n % 2 == 1:\n        return float(ind2el)\n\n    return float(ind1el + ind2el) / 2.0\n\n\nif __name__ == \"__main__\":\n    a = [1, 4, 7, 10, 12]\n    b = [2, 3, 6, 15]\n    print(\"The median of two sorted arrays is\", \"{:.1f}\".format(median(a, b)))\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\n<!-- Insert javascript Code of Better Approach Here -->\nfunction median(a, b) {\n    // size of two given arrays:\n    const n1 = a.length, n2 = b.length;\n    const n = n1 + n2; // total size\n    // required indices:\n    const ind2 = Math.floor(n / 2);\n    const ind1 = ind2 - 1;\n    let cnt = 0;\n    let ind1el = -1, ind2el = -1;\n\n    // apply the merge step:\n    let i = 0, j = 0;\n    while (i &lt; n1 &amp;&amp; j &lt; n2) {\n        if (a[i] &lt; b[j]) {\n            if (cnt === ind1) ind1el = a[i];\n            if (cnt === ind2) ind2el = a[i];\n            cnt++;\n            i++;\n        }\n        else {\n            if (cnt === ind1) ind1el = b[j];\n            if (cnt === ind2) ind2el = b[j];\n            cnt++;\n            j++;\n        }\n    }\n\n    // copy the left-out elements:\n    while (i &lt; n1) {\n        if (cnt === ind1) ind1el = a[i];\n        if (cnt === ind2) ind2el = a[i];\n        cnt++;\n        i++;\n    }\n    while (j &lt; n2) {\n        if (cnt === ind1) ind1el = b[j];\n        if (cnt === ind2) ind2el = b[j];\n        cnt++;\n        j++;\n    }\n\n    // Find the median:\n    if (n % 2 === 1) {\n        return ind2el;\n    }\n\n    return (ind1el + ind2el) / 2.0;\n}\n\nconst a = [1, 4, 7, 10, 12];\nconst b = [2, 3, 6, 15];\nconsole.log(\"The median of two sorted arrays is \" + median(a, b).toFixed(1));\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Better Approach Here -->\n<strong>Output:</strong>  The median of two sorted arrays is 6.0\n\n\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Better Approach Here -->\n</p><p><strong>Time Complexity: </strong>O(n1+n2), where&nbsp; n1 and n2 are the sizes of the given arrays.<br><strong>Reason: </strong>We traverse through both arrays linearly.</p>\n<p><strong>Space Complexity: </strong>O(1), as we are not using any extra space to solve this problem.</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Better Approach Ends from here -->\n\n\n<!-- Optimal Approach Starts from here -->\n\n<div id=\"optimal-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nOptimal Approach \n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm of Better Approach Here -->\n<p>We are going to use the Binary Search algorithm to optimize the approach.</p>\n<p><em>The primary objective of the Binary Search algorithm is to efficiently determine the appropriate half to eliminate, thereby reducing the search space by half. It does this by determining a specific condition that ensures that the target is not present in that half.</em></p>\n<p>Now, let\u2019s learn through the following observations how we can apply binary search to this problem. First, we will try to solve this problem where n1+n2 is even and then we will consider the odd scenario.</p>\n<h4><strong>Observations:</strong></h4>\n<p>Assume, n = n1+n2 i.e. the total length of the final merged array.</p>\n<ul><li><strong>Median creates a partition on the final merged array: </strong>Upon closer observation, we can easily show that the median divides the final merged array into two halves. For example,</li></ul>\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/08/Screenshot-2023-08-05-204911.png\" alt=\"\" class=\"wp-image-11765\"></figure>\n<ul><li><strong>Characteristics of each half:</strong><ul><li>Each half contains (n/2) elements.</li><li>Each half also contains <strong>x </strong>elements from the first array i.e. arr1[] and <strong>(n/2)-x</strong> elements from the second array i.e. arr2[]. The value of x might be different for the two halves. For example, in the above array, the left half contains 3 elements from arr1[] and 2 elements from arr2[].<br></li></ul></li><li><strong>The unique configuration of halves: </strong>Considering different values of x, we can get different left and right halves(x = the number of elements taken from arr1[] for a particular half). Some different configurations for the above example are shown below:</li></ul>\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/08/Screenshot-2023-08-05-205008.png\" alt=\"\" class=\"wp-image-11766\"></figure>\n<p><strong>How to solve the problem using the above observations:</strong></p>\n<ul><li><strong>Try to form the unique left half:&nbsp;</strong><ul><li>For a valid merged array, the configurations of the two halves are unique. So, we can try to form the halves with different values of <strong>x, </strong>where x = the number of elements taken from arr1[] for a particular half.</li><li>There's no need to construct both halves. Once we have the correct left half, the right half is automatically determined, consisting of the remaining elements not yet considered. <strong><em>Therefore, our focus will solely be on creating the unique left half.</em></strong><strong><em><br></em></strong></li><li><strong>How to form all configurations of the left half: </strong>We know that the left half will surely contain <strong>x </strong>elements from arr1[] and <strong>(n/2)-x</strong> elements from arr2[]. Here the only variable is <strong>x. </strong>The minimum possible value of x is 0 and the maximum possible value is n1(<em>i.e. The length of the considered array</em>).<br><strong><em>For all the values,[0, n1] of x, we will try to form the left half and then we will check if that half\u2019s configuration is valid.</em></strong><strong><em><br></em></strong></li></ul></li><li><strong>Check if the formed left half is valid: </strong><strong></strong><strong> </strong><strong></strong><strong> </strong><strong></strong><strong> </strong><strong></strong>For a valid left half, the merged array will always be sorted. So, if the merged array containing the formed left half is sorted, the formation is valid.<ul><li><strong>How to check if the merged array is sorted without forming the array:</strong><strong><br></strong>In order to check we will consider 4 elements, i.e. l1, l2, r1, r2.<ul><li>l1 = the maximum element belonging to arr1[] of the left half.</li><li>l2 = the maximum element belonging to arr2[] of the left half.</li><li>r1 = the minimum element belonging to arr1[] of the right half.</li><li>r1 = the minimum element belonging to arr2[] of the right half.</li></ul></li></ul></li></ul>\n<p>For example,</p>\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/08/Screenshot-2023-08-05-205247.png\" alt=\"\" class=\"wp-image-11767\"></figure>\n<p><strong>How to apply Binary search to form the left half:</strong></p>\n<ul><li>We will check the formation of the left half for all possible values of <strong>x. </strong>Now, we know that the minimum possible value of x is 0 and the maximum is n1(<em>i.e. The length of the considered array</em>). Now the range is sorted. So, <strong>we will apply the binary search on the possible values of x i.e. [0, n1].</strong><strong><br></strong></li><li><strong>How to eliminate the halves based on the values of x: </strong>Binary search works by eliminating the halves in each step. Upon closer observation, we can eliminate the halves based on the following conditions:<ul><li><strong>If l1 &gt; r2: </strong>This implies that we have considered more elements from arr1[] than necessary. So, we have to take less elements from arr1[] and more from arr2[]. In such a scenario, we should try smaller values of x. To achieve this, we will eliminate the right half (high = mid-1).</li><li><strong>If l2 &gt; r1: </strong>This implies that we have considered more elements from arr2[] than necessary. So, we have to take less elements from arr2[] and more from arr1[]. In such a scenario, we should try bigger values of x. To achieve this, we will eliminate the left half (low = mid+1).</li></ul></li></ul>\n<p>Until now, we have learned how to use binary search but with the assumption that (n1+n2) is even. Let\u2019s generalize this.</p>\n<p><strong>If (n1+n2) is odd: </strong>In the case of even, we have considered the length of the left half as<br>(n1+n2) / 2. In this case, that length will be (n1 + n2 + 1) / 2. This much change is enough to handle the case of odd. The rest of the things will be completely the same.<br><strong><em>As in the code, division refers to integer division, this modified formula (n1+n2+1) / 2 will be valid for both cases of odd and even.</em></strong></p>\n<p><strong>What will be the answer i.e. the median:</strong></p>\n<ul><li><strong>If l1 &lt;= r2 &amp;&amp; l2 &lt;= r1: </strong>This condition assures that we have found the correct elements.&nbsp;<ul><li><strong>If (n1+n2) is odd: </strong>The median will be max(l1, l2).</li><li><strong>Otherwise, </strong>median = (max(l1, l2) + min(r1, r2)) / 2.0</li></ul></li></ul>\n<p><strong>Note: </strong>We are applying binary search on the possible values of x i.e. [0, n1]. Here n1 is the length of arr1[]. Now, to further optimize it, we will consider the smaller array as arr1[]. So, the actual range will be [0, min(n1, n2)].</p>\n<h3><strong>Algorithm:</strong></h3>\n<ol><li>First, we have to make sure that the arr1[] is the smaller array. If not by default, we will just swap the arrays. Our main goal is to consider the smaller array as arr1[].</li><li><strong>Calculate the length of the left half: </strong>left = (n1+n2+1) / 2.</li><li><strong>Place the 2 pointers i.e. low and high: </strong>Initially, we will place the pointers. The pointer low will point to 0 and the high will point to n1(<em>i.e. The size of arr1[]</em>).<br></li><li><strong>Calculate the \u2018mid1\u2019 i.e. x and \u2018mid2\u2019 i.e. left-x: </strong>Now, inside the loop, we will calculate the value of \u2018mid1\u2019 using the following formula:<br><strong>mid1 = (low+high) // 2 ( \u2018//\u2019 refers to integer division)</strong><strong><br></strong><strong>mid2 = left-mid1</strong></li><li><strong>Calculate l1, l2, r1, and r2: </strong>Generally,<ol><li>l1 = arr1[mid1-1]</li><li>l2 = arr2[mid2-1]</li><li>r1 = arr1[mid1]</li><li>r2 = arr2[mid2]<strong><br></strong>The possible values of \u2018mid1\u2019 and \u2018mid2\u2019 might be 0 and n1 and n2 respectively. So, to handle these cases, we need to store some default values for these four variables. The default value for l1 and l2 will be <strong>INT_MIN </strong>and for r1 and r2, it will be <strong>INT_MAX.</strong></li></ol></li><li><strong>Eliminate the halves based on the following conditions:</strong><ol><li><strong>If l1 &lt;= r2 &amp;&amp; l2 &lt;= r1: </strong>We have found the answer.<ol><li><strong>If (n1+n2) is odd: </strong>Return the median = max(l1, l2).</li><li><strong>Otherwise: </strong>Return median = (max(l1, l2)+min(r1, r2)) / 2.0</li></ol></li><li><strong>If l1 &gt; r2: </strong>This implies that we have considered more elements from arr1[] than necessary. So, we have to take less elements from arr1[] and more from arr2[]. In such a scenario, we should try smaller values of x. To achieve this, we will eliminate the right half (high = mid1-1).</li><li><strong>If l2 &gt; r1: </strong>This implies that we have considered more elements from arr2[] than necessary. So, we have to take less elements from arr2[] and more from arr1[]. In such a scenario, we should try bigger values of x. To achieve this, we will eliminate the left half (low = mid1+1).</li></ol></li><li>Finally, outside the loop, we will include a dummy return statement just to avoid warnings or errors.</li></ol>\n<p>The steps from 4-6 will be inside a loop and the loop will continue until low crosses high.</p>\n<p><strong>Dry-run: </strong><em>Please refer to the attached video for the dry run.</em></p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n\n<!-- Insert C++ code of Optimal Approach Here-->\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\ndouble median(vector&lt;int&gt;&amp; a, vector&lt;int&gt;&amp; b) {\n    int n1 = a.size(), n2 = b.size();\n    //if n1 is bigger swap the arrays:\n    if (n1 &gt; n2) return median(b, a);\n\n    int n = n1 + n2; //total length\n    int left = (n1 + n2 + 1) / 2; //length of left half\n    //apply binary search:\n    int low = 0, high = n1;\n    while (low &lt;= high) {\n        int mid1 = (low + high) &gt;&gt; 1;\n        int mid2 = left - mid1;\n        //calculate l1, l2, r1 and r2;\n        int l1 = INT_MIN, l2 = INT_MIN;\n        int r1 = INT_MAX, r2 = INT_MAX;\n        if (mid1 &lt; n1) r1 = a[mid1];\n        if (mid2 &lt; n2) r2 = b[mid2];\n        if (mid1 - 1 &gt;= 0) l1 = a[mid1 - 1];\n        if (mid2 - 1 &gt;= 0) l2 = b[mid2 - 1];\n\n        if (l1 &lt;= r2 &amp;&amp; l2 &lt;= r1) {\n            if (n % 2 == 1) return max(l1, l2);\n            else return ((double)(max(l1, l2) + min(r1, r2))) / 2.0;\n        }\n\n        //eliminate the halves:\n        else if (l1 &gt; r2) high = mid1 - 1;\n        else low = mid1 + 1;\n    }\n    return 0; //dummy statement\n}\n\nint main()\n{\n    vector&lt;int&gt; a = {1, 4, 7, 10, 12};\n    vector&lt;int&gt; b = {2, 3, 6, 15};\n    cout &lt;&lt; \"The median of two sorted array is \" &lt;&lt; fixed &lt;&lt; setprecision(1)\n         &lt;&lt; median(a, b) &lt;&lt; '\\n';\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\n<!-- Insert Java code of Optimal Approach Here -->\nimport java.util.*;\n\npublic class tUf {\n    public static double median(int[] a, int[] b) {\n        int n1 = a.length, n2 = b.length;\n        //if n1 is bigger swap the arrays:\n        if (n1 &gt; n2) return median(b, a);\n\n        int n = n1 + n2; //total length\n        int left = (n1 + n2 + 1) / 2; //length of left half\n        //apply binary search:\n        int low = 0, high = n1;\n        while (low &lt;= high) {\n            int mid1 = (low + high) / 2;\n            int mid2 = left - mid1;\n            //calculate l1, l2, r1 and r2;\n            int l1 = (mid1 &gt; 0) ? a[mid1 - 1] : Integer.MIN_VALUE;\n            int l2 = (mid2 &gt; 0) ? b[mid2 - 1] : Integer.MIN_VALUE;\n            int r1 = (mid1 &lt; n1) ? a[mid1] : Integer.MAX_VALUE;\n            int r2 = (mid2 &lt; n2) ? b[mid2] : Integer.MAX_VALUE;\n\n            if (l1 &lt;= r2 &amp;&amp; l2 &lt;= r1) {\n                if (n % 2 == 1) return Math.max(l1, l2);\n                else return ((double) (Math.max(l1, l2) + Math.min(r1, r2))) / 2.0;\n            } else if (l1 &gt; r2) high = mid1 - 1;\n            else low = mid1 + 1;\n        }\n        return 0; //dummy statement\n    }\n\n    public static void main(String[] args) {\n        int[] a = {1, 4, 7, 10, 12};\n        int[] b = {2, 3, 6, 15};\n        System.out.println(\"The median of two sorted arrays is \" + median(a, b));\n    }\n}\n\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\n<!-- Insert Python code of Optimal Approach Here -->\ndef median(a, b):\n    n1, n2 = len(a), len(b)\n    # if n1 is bigger swap the arrays:\n    if n1 &gt; n2:\n        return median(b, a)\n\n    n = n1 + n2  # total length\n    left = (n1 + n2 + 1) // 2  # length of left half\n    # apply binary search:\n    low, high = 0, n1\n    while low &lt;= high:\n        mid1 = (low + high) // 2\n        mid2 = left - mid1\n        # calculate l1, l2, r1, and r2;\n        l1, l2, r1, r2 = float('-inf'), float('-inf'), float('inf'), float('inf')\n        if mid1 &lt; n1:\n            r1 = a[mid1]\n        if mid2 &lt; n2:\n            r2 = b[mid2]\n        if mid1 - 1 &gt;= 0:\n            l1 = a[mid1 - 1]\n        if mid2 - 1 &gt;= 0:\n            l2 = b[mid2 - 1]\n\n        if l1 &lt;= r2 and l2 &lt;= r1:\n            if n % 2 == 1:\n                return max(l1, l2)\n            else:\n                return (float(max(l1, l2)) + float(min(r1, r2))) / 2.0\n\n        # eliminate the halves:\n        elif l1 &gt; r2:\n            high = mid1 - 1\n        else:\n            low = mid1 + 1\n    return 0  # dummy statement\n\n\na = [1, 4, 7, 10, 12]\nb = [2, 3, 6, 15]\nprint(\"The median of two sorted arrays is {:.1f}\".format(median(a, b)))\n\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\n<!-- Insert Python code of Optimal Approach Here -->\nfunction median(a, b) {\n    let n1 = a.length, n2 = b.length;\n    // if n1 is bigger swap the arrays:\n    if (n1 &gt; n2) return median(b, a);\n\n    let n = n1 + n2; // total length\n    let left = Math.floor((n1 + n2 + 1) / 2); // length of left half\n    // apply binary search:\n    let low = 0, high = n1;\n    while (low &lt;= high) {\n        let mid1 = Math.floor((low + high) / 2);\n        let mid2 = left - mid1;\n        // calculate l1, l2, r1, and r2\n        let l1 = Number.MIN_SAFE_INTEGER, l2 = Number.MIN_SAFE_INTEGER;\n        let r1 = Number.MAX_SAFE_INTEGER, r2 = Number.MAX_SAFE_INTEGER;\n        if (mid1 &lt; n1) r1 = a[mid1];\n        if (mid2 &lt; n2) r2 = b[mid2];\n        if (mid1 - 1 &gt;= 0) l1 = a[mid1 - 1];\n        if (mid2 - 1 &gt;= 0) l2 = b[mid2 - 1];\n\n        if (l1 &lt;= r2 &amp;&amp; l2 &lt;= r1) {\n            if (n % 2 === 1) return Math.max(l1, l2);\n            else return (Math.max(l1, l2) + Math.min(r1, r2)) / 2;\n        }\n\n        // eliminate the halves:\n        else if (l1 &gt; r2) high = mid1 - 1;\n        else low = mid1 + 1;\n    }\n    return 0; // dummy statement\n}\n\nlet a = [1, 4, 7, 10, 12];\nlet b = [2, 3, 6, 15];\nconsole.log(\"The median of two sorted arrays is \" + median(a, b).toFixed(1));\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Optimal Apporach Here -->\n<strong>Output:</strong> The median of two sorted array is 6.0\n\n\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Optimal Approach-->\n</p><p><strong>Time Complexity: </strong>O(log(min(n1,n2))), where n1 and n2 are the sizes of two given arrays.<br><strong>Reason: </strong>We are applying binary search on the range [0, min(n1, n2)].</p>\n<p><strong>Space Complexity: </strong>O(1) as no extra space is used.</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Optimal Approach Starts from here -->\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n<details>\n<summary class=\"main-summary\">\n<span>\nVideo Explanation\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"yt-video-wrapper\">\n\n<!-- Insert iframe embed Link of Youtube Video-->\n<iframe class=\"lazy-loaded\" loading=\"lazy\" title=\"Median of two sorted arrays\" width=\"810\" height=\"456\" data-lazy-type=\"iframe\" data-src=\"https://www.youtube.com/embed/NTop3VTjmxk\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\" src=\"https://www.youtube.com/embed/C2rRzz-JDk8?feature=oembed\"></iframe><noscript>\n<iframe loading=\"lazy\" title=\"Median of two sorted araays\" width=\"810\" height=\"456\" src=\"https://www.youtube.com/embed/NTop3VTjmxk\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe></noscript>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script>\n\nconst codeSections = document.querySelectorAll('.code-section');\n\n// Get last selected language from localStorage or set default value\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\n// Update last selected language for all sections and store in localStorage\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\n// Handle copy button click event\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\n// Set initial state of the tabs\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<script>\nconst codeSections = document.querySelectorAll('.code-section');\n\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script src=\"https://takeuforward.org/UXApproachDropDowns/3ApproachJSScript.js\"></script>\n<!-- /wp:html -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em><em>Special thanks to\u00a0<strong><a href=\"https://www.linkedin.com/in/dewanshi-paul-2515091b9\" target=\"_blank\" rel=\"noreferrer noopener\">Dewanshi Paul</a></strong>\u00a0and <em><strong><a href=\"https://www.linkedin.com/in/kriti39/\" target=\"_blank\" rel=\"noreferrer noopener\">KRITIDIPTA GHOSH</a></strong></em></em></em> <em><em>for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,\u00a0</em><a href=\"https://takeuforward.org/contribute/help-us-grow-takeuforward/\">please check out this articl</a><em>e</em></em></p></blockquote>\n<!-- /wp:quote -->"
}