{
    "dislikes": 13,
    "video": "LjPx4wQaRIs",
    "publishedOn": "Sun Mar 24 2024 22:09:27 GMT+0530 (India Standard Time)",
    "slug": "job-sequencing-problem",
    "aid": "1493",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/job-sequencing-problem",
    "title": "Job Sequencing Problem",
    "topics": [
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "greedy",
            "topic-title": "Greedy"
        }
    ],
    "likes": 180,
    "category_tag": "data-structure",
    "preview": "Problem Statement: You are given a set of N jobs where each job comes with a deadline and profit. The profit can only be earned upon completing the job within its deadline. Find the number of jobs...",
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement:</strong> You are given a set of N jobs where each job comes with a<strong> deadline</strong> and <strong>profit</strong>. The profit can only be earned upon completing the job within its deadline. Find the <strong>number of jobs</strong> done and the <strong>maximum profit</strong> that can be obtained. Each job takes a <strong>single unit </strong>of time and only <strong>one job</strong> can be performed at a time.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Examples</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\"><strong>Example 1:</strong>\n\n<strong>Input:</strong> N = 4, Jobs = {(1,4,20),(2,1,10),(3,1,40),(4,1,30)}\n\n<strong>Output</strong>: 2 60\n\n<strong>Explanation:</strong> The 3rd job with a deadline 1 is performed during the first unit of time .The 1st job is performed during the second unit of time as its deadline is 4.\nProfit = 40 + 20 = 60\n\n<strong>Example 2:</strong>\n\n<strong>Input:</strong> N = 5, Jobs = {(1,2,100),(2,1,19),(3,2,27),(4,1,25),(5,1,15)}\n\n<strong>Output:</strong> 2 127\n\n<strong>Explanation:</strong> The  first and third job both having a deadline 2 give the highest profit. \nProfit = 100 + 27 = 127\n</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Solution</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"textColor\":\"vivid-red\"} -->\n<p class=\"has-vivid-red-color has-text-color\"><strong><em>Disclaimer</em></strong>: <em>Don't jump directly to the solution, try it out yourself first.</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Approach</strong>:&nbsp; The strategy to maximize profit should be to pick up jobs that offer<strong> higher profits. </strong>Hence we should <strong>sort</strong> the jobs in descending order of profit. Now say if a job has a deadline of 4 we can perform it anytime between day 1-4, but it is preferable to perform the job on its <strong>last day</strong>. This leaves enough empty slots on the previous days to perform other jobs.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Basic Outline of the approach:-</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>Sort the jobs in descending order of profit.&nbsp;</li><li>If the maximum deadline is x, make an array of size x .Each array index is set to -1 initially as no jobs have been performed yet.</li><li>For every job check if it can be performed on its last day.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:list -->\n<ul><li>If possible mark that index with the job id and add the profit to our answer.&nbsp;</li><li>If not possible, loop through the previous indexes until an empty slot is found.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>DRY RUN:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"624\" height=\"251\" src=\"https://lh4.googleusercontent.com/oPnEMwtHivvA7Uy36G1lSQSraQ6xJ__THJJ3XiLL3mP--VgNerwFaPZgfXWbS3WDFYn2EKL8WiG3VDu3fAtB5Ii3ZFiT5-Ln8XmM1_zwH0Q7sTg_28NYWBDOP07_MQ\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Profit = 90 , No of jobs done = 3</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include&lt;bits/stdc++.h&gt;\n\nusing namespace std;\n// A structure to represent a job \nstruct Job {\n   int id; // Job Id \n   int dead; // Deadline of job \n   int profit; // Profit if job is over before or on deadline \n};\nclass Solution {\n   public:\n      bool static comparison(Job a, Job b) {\n         return (a.profit &gt; b.profit);\n      }\n   //Function to find the maximum profit and the number of jobs done\n   pair &lt; int, int &gt; JobScheduling(Job arr[], int n) {\n\n      sort(arr, arr + n, comparison);\n      int maxi = arr[0].dead;\n      for (int i = 1; i &lt; n; i++) {\n         maxi = max(maxi, arr[i].dead);\n      }\n\n      int slot[maxi + 1];\n\n      for (int i = 0; i &lt;= maxi; i++)\n         slot[i] = -1;\n\n      int countJobs = 0, jobProfit = 0;\n\n      for (int i = 0; i &lt; n; i++) {\n         for (int j = arr[i].dead; j &gt; 0; j--) {\n            if (slot[j] == -1) {\n               slot[j] = i;\n               countJobs++;\n               jobProfit += arr[i].profit;\n               break;\n            }\n         }\n      }\n\n      return make_pair(countJobs, jobProfit);\n   }\n};\nint main() {\n   int n = 4;\n   Job arr[n] = {{1,4,20},{2,1,10},{3,2,40},{4,2,30}};\n\n   Solution ob;\n   //function call\n   pair &lt; int, int &gt; ans = ob.JobScheduling(arr, n);\n   cout &lt;&lt; ans.first &lt;&lt; \" \" &lt;&lt; ans.second &lt;&lt; endl;\n\n   return 0;\n} \n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> 3 90</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(N log N) + O(N*M).</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>O(N log N ) </strong>for sorting the jobs in decreasing order of profit. <strong>O(N*M)</strong> since we are iterating through all <strong>N </strong>jobs and for every job we are checking from the last deadline, say <strong>M </strong>deadlines in the worst case.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(M) </strong>for an array that keeps track on which day which job is performed if <strong>M</strong> is the maximum deadline available.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Job {\n   int id, profit, deadline;\n   Job(int x, int y, int z) {\n      this.id = x;\n      this.deadline = y;\n      this.profit = z;\n   }\n}\n\nclass solve {\n   // return an array of size 2 having the 0th element equal to the count\n   // and 1st element equal to the maximum profit\n   int[] JobScheduling(Job arr[], int n) {\n      Arrays.sort(arr, (a, b) -&gt; (b.profit - a.profit));\n\n      int maxi = 0;\n      for (int i = 0; i &lt; n; i++) {\n         if (arr[i].deadline &gt; maxi) {\n            maxi = arr[i].deadline;\n         }\n      }\n\n      int result[] = new int[maxi + 1];\n\n      for (int i = 1; i &lt;= maxi; i++) {\n         result[i] = -1;\n      }\n\n      int countJobs = 0, jobProfit = 0;\n\n      for (int i = 0; i &lt; n; i++) {\n\n         for (int j = arr[i].deadline; j &gt; 0; j--) {\n\n            // Free slot found \n            if (result[j] == -1) {\n               result[j] = i;\n               countJobs++;\n               jobProfit += arr[i].profit;\n               break;\n            }\n         }\n      }\n\n      int ans[] = new int[2];\n      ans[0] = countJobs;\n      ans[1] = jobProfit;\n      return ans;\n\n   }\n}\nclass Main {\n   public static void main(String[] args) throws IOException {\n\n      //size of array\n      Job[] arr = new Job[4];\n      arr[0] = new Job(1, 4, 20);\n      arr[1] = new Job(2, 1, 10);\n      arr[2] = new Job(3, 2, 40);\n      arr[3] = new Job(4, 2, 30);\n\n      solve ob = new solve();\n\n      //function call\n      int[] res = ob.JobScheduling(arr, 4);\n      System.out.println(res[0] + \" \" + res[1]);\n\n   }\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> 3 90</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(N log N) + O(N*M).</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>O(N log N ) </strong>for sorting the jobs in decreasing order of profit. <strong>O(N*M)</strong> since we are iterating through all <strong>N </strong>jobs and for every job we are checking from the last deadline, say <strong>M </strong>deadlines in the worst case.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(M) </strong>for an array that keeps track of which day job is performed if <strong>M</strong> is the maximum deadline available.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block\" data-lang=\"python\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">class job:\n    def __init__(self, id, deadline, profit):\n        self.id = id\n        self.deadline = deadline\n        self.profit = profit\n\n\n\n\nclass Solution:\n    def jobScheduling(self, jobs):\n        jobs.sort(key=lambda x: x.profit, reverse=True)\n        maxi = jobs[0].deadline\n        for i in range(1, len(jobs)):\n            maxi = max(maxi, jobs[i].deadline)\n\n\n        slot = [-1] * (maxi + 1)\n        countJobs = 0\n        jobProfit = 0\n\n\n        for i in range(len(jobs)):\n            for j in range(jobs[i].deadline, 0, -1):\n                if slot[j] == -1:\n                    slot[j] = i\n                    countJobs += 1\n                    jobProfit += jobs[i].profit\n                    break\n\n\n        return countJobs, jobProfit\n\n\n\n\nif __name__ == \"__main__\":\n    jobs = [job(1, 4, 20), job(2, 1, 10), job(3, 2, 40), job(4, 2, 30)]\n    count, profit = Solution().jobScheduling(jobs)\n    print(count, profit)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> 3 90</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(N log N) + O(N*M).</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>O(N log N ) </strong>for sorting the jobs in decreasing order of profit. <strong>O(N*M)</strong> since we are iterating through all <strong>N </strong>jobs and for every job we are checking from the last deadline, say <strong>M </strong>deadlines in the worst case.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(M) </strong>for an array that keeps track of which day job is performed if <strong>M</strong> is the maximum deadline available.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to\u00a0<strong><a href=\"https://www.linkedin.com/in/somparna-c-a724a5121/\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>Somparna Chakrabarti</strong></a></strong>\u00a0<em><strong><em><strong>and\u00a0<em><a href=\"https://www.linkedin.com/in/imsudip/\" target=\"_blank\" rel=\"noreferrer noopener\">Sudip Ghosh</a></em></strong></em></strong></em></em> <em>for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,\u00a0</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->"
}