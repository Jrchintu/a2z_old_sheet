{
    "dislikes": 16,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:09:20 GMT+0530 (India Standard Time)",
    "slug": "boundary-traversal-of-a-binary-tree",
    "aid": "1456",
    "title": "Boundary Traversal of a Binary Tree",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/boundary-traversal",
    "topics": [
        {
            "topic-id": "binary-tree",
            "topic-title": "Binary Tree"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "recursion",
            "topic-title": "Recursion"
        }
    ],
    "content": "<p><strong>Problem Statement: </strong> Given a Binary Tree, perform the boundary traversal of the tree.\nThe boundary traversal is the process of visiting the boundary nodes of the binary tree in the anticlockwise direction, starting from the root.\n \n</p>\n\n<div id=\"article_examples\">\n    <details class=\"article_example_details\">\n        <summary class=\"article_example_summary\">\n            <span><strong>\n                    Examples\n                </strong>\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"atricle_example_content\">\n            <pre class=\"wp-block-preformatted\">\n                <span><strong>Example 1:</strong></span>\n\t\t\t\t<span><strong>Input:</strong>Binary Tree: 1 2 7 3 -1 -1 8 -1 4 9 -1 5 6 10 11\n\t\t\t\t</span>\n\t\t\t\t<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/boundary-traversal-image1-XAwduImr\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n\t\t\t\t<span><strong>Output:</strong> Boundary Traversal: [1, 2, 3, 4, 5, 6, 10, 11, 9, 8, 7]</span>\n\t\t\t\t<span><strong>Explanation: </strong>The boundary traversal of a binary tree involves visiting its boundary nodes in an anticlockwise direction:\n\t\t\t\t<ol><li>Starting from the root, we traverse from: 1</li><li>The left side traversal includes the nodes: 2, 3, 4</li><li>The bottom traversal include the leaf nodes: 5, 6, 10, 11</li><li>The right side traversal includes the nodes: 9, 8, 7</li><li>We return to the  root and the boundary traversal is complete.</li></ol></span>\n\t\t\t\t<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/boundary-traversal-image2-1EFr7OIC\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n\t\t\t\t<span><strong>Example 2:</strong></span>\n\t\t\t\t<span><strong>Input:</strong>Binary Tree: 10 5 20 3 8 18 25 -1 7 -1 -1\n\t\t\t\t</span>\n\t\t\t\t<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/boundary-traversal-image3-nVhO_RQ1\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n\t\t\t\t<span><strong>Output :</strong> Boundary Traversal: [10, 5, 3, 7, 8, 18, 25, 20]</span>\n\t\t\t\t<span><strong>Explanation: </strong>The boundary traversal of a binary tree involves visiting its boundary nodes in an anticlockwise direction:\n\t\t\t\t<ol><li>Starting from the root, we traverse from: 10</li><li>The left side traversal includes the nodes: 5</li><li>The bottom traversal include the leaf nodes: 3, 7, 8, 18, 25</li><li>The right side traversal includes the nodes: 20</li><li>We return to the  root and the boundary traversal is complete.</li></ol></span>\n\t\t\t\t<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/boundary-traversal-image4-4QJ8Okw7\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n\t\t\t\t\n            </pre>\n        </div>\n    </details>\n</div>\n\n<!-- This is Practice Section-->\n<div class=\"practice\">\n    <span><strong>Practice: </strong></span>\n    <div class=\"problem-buttons\">\n\n        <!-- Add Problem Link inside href -->\n        <a href=\"https://www.codingninjas.com/studio/problems/boundary-traversal-of-binary-tree_790725?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf\" target=\"_blank\" rel=\"noopener\">\n            <span>Solve Problem</span>\n            <img src=\"https://takeuforward-content-images.s3.ap-south-1.amazonaws.com/content/Group-11-5-pFOq-8ga\"\n                alt=\"code-studio\">\n        </a>\n    </div>\n    <!--<div class=\"problem-buttons\">\n         Add Problem Link inside href \n        <a href=\"\" target=\"_blank\" rel=\"noopener\">\n            <span>Solve Problem</span>\n            <img src=\"https://cdn.iconscout.com/icon/free/png-256/free-leetcode-3521542-2944960.png?f=webp\"\n                alt=\"leetcode\">\n        </a>\n    </div>-->\n</div>\n\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\n        yourself first. </em></p>\n\n\n<div id=\"brute-force-approach\">\n    <details>\n        <summary class=\"main-summary\">\n            <span>\n                Optimal Approach \n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                </path>\n            </svg>\n        </summary>\n        <div class=\"common-drops\">\n            <details class=\"secondary-details\" open=\"\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Algorithm / Intuition\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <div class=\"approach-algorithm\">\n                    <!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n                    <p>The boundary traversal algorithm should be divided into three main parts traversed in the anti-clockwise direction:</p>\n                    <p><figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/boundary-traversal-image5-NX7SblTw\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure></p>\n                    <p><strong>Left Boundary:</strong> Traverse the left boundary of the tree. Start from the root and keep moving to the left child; if unavailable, move to the right child. Continue this until we reach a leaf node.</p>\n                    <p><strong>Bottom Boundary:</strong> Traverse the bottom boundary of the tree by traversing the leaf nodes using a simple preorder traversal. We check if the current node is a lead, and if so, its value is added to the boundary traversal array. </p>\n                    <p><strong>Right Boundary:</strong> The right boundary is traversed in the reverse direction, similar to the left boundary traversal starting from the root node and keep moving to the right child; if unavailable, move to the left child. Nodes that are not leaves are pushed into the right boundary array from end to start to ensure that they are added in the reverse direction.</p>\n                    <p><strong>Algorithm:</strong></p>\n                    <p><strong>Step 1:</strong> Initialise an empty array to store the boundary traversal nodes.</p>\n                    \n                    <p><strong>Step 2:</strong> Create a helper function to check if a node is a leaf. This is to avoid cases where there will be an overlap in the traversal of nodes.\n                    We exclude leaf nodes when adding left and right boundaries as they will already be added when in the bottom boundary. </p>\n                    \n                    \n                    <p><strong>Step 3:</strong>  Initialise a recursive function `addLeftBoundary` and a vector to store the left traversal.\n                    <ol><li>Start from the root of the tree.</li><li>Traverse down the left side of the tree until we reach a leaf node. For each non-leaf node, add its value to the result list.</li><li>Traverse to its left child. If unavailable, call the recursion function to its right child.</li></ol></p>\n                    <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/boundary-traversal-image6-jpEN8faZ\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n                    \n                    <p><strong>Step 4:</strong> Implement a recursive function `addLeafNodes` and a vector to store the bottom traversal.\n                    <ol><li>If the current node is a leaf, add its value to the result list.</li><li>Recursively travel to the current nodes left and right subtrees in a preorder fashion.</li></ol></p>\n                    <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/boundary-traversal-image7-fsN2b9gx\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n\n                    <p><strong>Step 5:</strong> Implement a recursive function `addRightBoundary` and a vector to store the right traversal.\n                    <ol><li>Start from the root of the tree.</li><li>Traverse to the right most side of the tree until we reach a leaf node.</li><li>For each non-leaf node, call the recursive function to its right child; if unavailable, call to its left child.</li><li>While the recursion backtracks, add the current node\u2019s value to the result list.</li></ol></p>\n                    <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/boundary-traversal-image8-H55prFyT\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n                    \n                </div>\n            </details>\n            <details class=\"code-section secondary-details\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Code\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <div class=\"code-tabs\">\n                    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n                    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n                    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n                    <button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n                    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\"\n                        xmlns=\"http://www.w3.org/2000/svg\">\n                        <path\n                            d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n                        </path>\n                    </svg>\n                </div>\n                <div class=\"code-content\">\n                    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nusing namespace std;\n\n// Node structure for the binary tree\nstruct Node {\n    int data;\n    Node* left;\n    Node* right;\n    // Constructor to initialize\n    // the node with a value\n    Node(int val) : data(val), left(nullptr), right(nullptr) {}\n};\n\nclass Solution {\npublic:\n    // Function to check\n    // if a node is a leaf\n    bool isLeaf(Node* root) {\n        return !root-&gt;left &amp;&amp; !root-&gt;right;\n    }\n\n    // Function to add the\n    // left boundary of the tree\n    void addLeftBoundary(Node* root, vector&lt;int&gt;&amp; res) {\n        Node* curr = root-&gt;left;\n        while (curr) {\n            // If the current node is not a leaf,\n            // add its value to the result\n            if (!isLeaf(curr)) {\n                res.push_back(curr-&gt;data);\n            }\n            // Move to the left child if it exists,\n            // otherwise move to the right child\n            if (curr-&gt;left) {\n                curr = curr-&gt;left;\n            } else {\n                curr = curr-&gt;right;\n            }\n        }\n    }\n\n    // Function to add the\n    // right boundary of the tree\n    void addRightBoundary(Node* root, vector&lt;int&gt;&amp; res) {\n        Node* curr = root-&gt;right;\n        vector&lt;int&gt; temp;\n        while (curr) {\n            // If the current node is not a leaf,\n            // add its value to a temporary vector\n            if (!isLeaf(curr)) {\n                temp.push_back(curr-&gt;data);\n            }\n            // Move to the right child if it exists,\n            // otherwise move to the left child\n            if (curr-&gt;right) {\n                curr = curr-&gt;right;\n            } else {\n                curr = curr-&gt;left;\n            }\n        }\n        // Reverse and add the values from\n        // the temporary vector to the result\n        for (int i = temp.size() - 1; i &gt;= 0; --i) {\n            res.push_back(temp[i]);\n        }\n    }\n\n    // Function to add the\n    // leaves of the tree\n    void addLeaves(Node* root, vector&lt;int&gt;&amp; res) {\n        // If the current node is a\n        // leaf, add its value to the result\n        if (isLeaf(root)) {\n            res.push_back(root-&gt;data);\n            return;\n        }\n        // Recursively add leaves of\n        // the left and right subtrees\n        if (root-&gt;left) {\n            addLeaves(root-&gt;left, res);\n        }\n        if (root-&gt;right) {\n            addLeaves(root-&gt;right, res);\n        }\n    }\n\n    // Main function to perform the\n    // boundary traversal of the binary tree\n    vector&lt;int&gt; printBoundary(Node* root) {\n        vector&lt;int&gt; res;\n        if (!root) {\n            return res;\n        }\n        // If the root is not a leaf,\n        // add its value to the result\n        if (!isLeaf(root)) {\n            res.push_back(root-&gt;data);\n        }\n\n        // Add the left boundary, leaves,\n        // and right boundary in order\n        addLeftBoundary(root, res);\n        addLeaves(root, res);\n        addRightBoundary(root, res);\n\n        return res;\n    }\n};\n\n// Helper function to\n// print the result\nvoid printResult(const vector&lt;int&gt;&amp; result) {\n    for (int val : result) {\n        cout &lt;&lt; val &lt;&lt; &quot; &quot;;\n    }\n    cout &lt;&lt; endl;\n}\n\nint main() {\n    // Creating a sample binary tree\n    Node* root = new Node(1);\n    root-&gt;left = new Node(2);\n    root-&gt;right = new Node(3);\n    root-&gt;left-&gt;left = new Node(4);\n    root-&gt;left-&gt;right = new Node(5);\n    root-&gt;right-&gt;left = new Node(6);\n    root-&gt;right-&gt;right = new Node(7);\n\n    Solution solution;\n\n    // Get the boundary traversal\n    vector&lt;int&gt; result = solution.printBoundary(root);\n\n    // Print the result\n    cout &lt;&lt; &quot;Boundary Traversal: &quot;;\n    printResult(result);\n\n    return 0;\n}\n                            </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block \" data-lang=\"java\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"java\" class=\"language-java\">\nimport java.util.ArrayList;\nimport java.util.List;\n\n// Node structure for the binary tree\nclass Node {\n    int data;\n    Node left;\n    Node right;\n\n    // Constructor to initialize\n    // the node with a value\n    Node(int val) {\n        data = val;\n        left = null;\n        right = null;\n    }\n}\n\npublic class Solution {\n    // Function to check\n    // if a node is a leaf\n    boolean isLeaf(Node root) {\n        return root.left == null &amp;&amp; root.right == null;\n    }\n\n    // Function to add the\n    // left boundary of the tree\n    void addLeftBoundary(Node root, List&lt;Integer&gt; res) {\n        Node curr = root.left;\n        while (curr != null) {\n            // If the current node is not a leaf,\n            // add its value to the result\n            if (!isLeaf(curr)) {\n                res.add(curr.data);\n            }\n            // Move to the left child if it exists,\n            // otherwise move to the right child\n            if (curr.left != null) {\n                curr = curr.left;\n            } else {\n                curr = curr.right;\n            }\n        }\n    }\n\n    // Function to add the\n    // right boundary of the tree\n    void addRightBoundary(Node root, List&lt;Integer&gt; res) {\n        Node curr = root.right;\n        List&lt;Integer&gt; temp = new ArrayList&lt;&gt;();\n        while (curr != null) {\n            // If the current node is not a leaf,\n            // add its value to a temporary list\n            if (!isLeaf(curr)) {\n                temp.add(curr.data);\n            }\n            // Move to the right child if it exists,\n            // otherwise move to the left child\n            if (curr.right != null) {\n                curr = curr.right;\n            } else {\n                curr = curr.left;\n            }\n        }\n        // Reverse and add the values from\n        // the temporary list to the result\n        for (int i = temp.size() - 1; i &gt;= 0; --i) {\n            res.add(temp.get(i));\n        }\n    }\n\n    // Function to add the\n    // leaves of the tree\n    void addLeaves(Node root, List&lt;Integer&gt; res) {\n        // If the current node is a\n        // leaf, add its value to the result\n        if (isLeaf(root)) {\n            res.add(root.data);\n            return;\n        }\n        // Recursively add leaves of\n        // the left and right subtrees\n        if (root.left != null) {\n            addLeaves(root.left, res);\n        }\n        if (root.right != null) {\n            addLeaves(root.right, res);\n        }\n    }\n\n    // Main function to perform the\n    // boundary traversal of the binary tree\n    List&lt;Integer&gt; printBoundary(Node root) {\n        List&lt;Integer&gt; res = new ArrayList&lt;&gt;();\n        if (root == null) {\n            return res;\n        }\n        // If the root is not a leaf,\n        // add its value to the result\n        if (!isLeaf(root)) {\n            res.add(root.data);\n        }\n\n        // Add the left boundary, leaves,\n        // and right boundary in order\n        addLeftBoundary(root, res);\n        addLeaves(root, res);\n        addRightBoundary(root, res);\n\n        return res;\n    }\n\n    // Helper function to\n    // print the result\n    void printResult(List&lt;Integer&gt; result) {\n        for (int val : result) {\n            System.out.print(val + &quot; &quot;);\n        }\n        System.out.println();\n    }\n\n    public static void main(String[] args) {\n        // Creating a sample binary tree\n        Node root = new Node(1);\n        root.left = new Node(2);\n        root.right = new Node(3);\n        root.left.left = new Node(4);\n        root.left.right = new Node(5);\n        root.right.left = new Node(6);\n        root.right.right = new Node(7);\n\n        Solution solution = new Solution();\n\n        // Get the boundary traversal\n        List&lt;Integer&gt; result = solution.printBoundary(root);\n\n        // Print the result\n        System.out.print(&quot;Boundary Traversal: &quot;);\n        solution.printResult(result);\n    }\n}\n                            </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block\" data-lang=\"python\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"python\" class=\"language-python\">\nclass Node:\n    def __init__(self, val):\n        self.data = val\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def isLeaf(self, root):\n        &quot;&quot;&quot;\n        Function to check if a node is a leaf\n        &quot;&quot;&quot;\n        return not root.left and not root.right\n\n    def addLeftBoundary(self, root, res):\n        &quot;&quot;&quot;\n        Function to add the left boundary of the tree\n        &quot;&quot;&quot;\n        curr = root.left\n        while curr:\n            if not self.isLeaf(curr):\n                # If the current node is not a leaf,\n                # add its value to the result\n                res.append(curr.data)\n            # Move to the left child if it exists,\n            # otherwise move to the right child\n            if curr.left:\n                curr = curr.left\n            else:\n                curr = curr.right\n\n    def addRightBoundary(self, root, res):\n        &quot;&quot;&quot;\n        Function to add the right boundary of the tree\n        &quot;&quot;&quot;\n        curr = root.right\n        temp = []\n        while curr:\n            if not self.isLeaf(curr):\n                # If the current node is not a leaf,\n                # add its value to a temporary vector\n                temp.append(curr.data)\n            # Move to the right child if it exists,\n            # otherwise move to the left child\n            if curr.right:\n                curr = curr.right\n            else:\n                curr = curr.left\n        # Reverse and add the values from\n        # the temporary vector to the result\n        for i in range(len(temp) - 1, -1, -1):\n            res.append(temp[i])\n\n    def addLeaves(self, root, res):\n        &quot;&quot;&quot;\n        Function to add the leaves of the tree\n        &quot;&quot;&quot;\n        if self.isLeaf(root):\n            # If the current node is a leaf,\n            # add its value to the result\n            res.append(root.data)\n            return\n        # Recursively add leaves of\n        # the left and right subtrees\n        if root.left:\n            self.addLeaves(root.left, res)\n        if root.right:\n            self.addLeaves(root.right, res)\n\n    def printBoundary(self, root):\n        &quot;&quot;&quot;\n        Main function to perform the\n        boundary traversal of the binary tree\n        &quot;&quot;&quot;\n        res = []\n        if not root:\n            return res\n        # If the root is not a leaf,\n        # add its value to the result\n        if not self.isLeaf(root):\n            res.append(root.data)\n\n        # Add the left boundary, leaves,\n        # and right boundary in order\n        self.addLeftBoundary(root, res)\n        self.addLeaves(root, res)\n        self.addRightBoundary(root, res)\n\n        return res\n\n# Helper function to\n# print the result\ndef printResult(result):\n    for val in result:\n        print(val, end=&quot; &quot;)\n    print()\n\n# Creating a sample binary tree\nroot = Node(1)\nroot.left = Node(2)\nroot.right = Node(3)\nroot.left.left = Node(4)\nroot.left.right = Node(5)\nroot.right.left = Node(6)\nroot.right.right = Node(7)\n\nsolution = Solution()\n\n# Get the boundary traversal\nresult = solution.printBoundary(root)\n\n# Print the result\nprint(&quot;Boundary Traversal:&quot;, end=&quot; &quot;)\nprintResult(result)\n                           </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block\" data-lang=\"javascript\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"javascript\" class=\"language-javascript\">\n// Node structure for the binary tree\nclass Node {\n    constructor(val) {\n        this.data = val;\n        this.left = null;\n        this.right = null;\n    }\n}\n\nclass Solution {\n    // Function to check if a node is a leaf\n    isLeaf(root) {\n        return !root.left &amp;&amp; !root.right;\n    }\n\n    // Function to add the left boundary of the tree\n    addLeftBoundary(root, res) {\n        let curr = root.left;\n        while (curr) {\n            // If the current node is not a leaf, add its value to the result\n            if (!this.isLeaf(curr)) {\n                res.push(curr.data);\n            }\n            // Move to the left child if it exists, otherwise move to the right child\n            if (curr.left) {\n                curr = curr.left;\n            } else {\n                curr = curr.right;\n            }\n        }\n    }\n\n    // Function to add the right boundary of the tree\n    addRightBoundary(root, res) {\n        let curr = root.right;\n        let temp = [];\n        while (curr) {\n            // If the current node is not a leaf, add its value to a temporary vector\n            if (!this.isLeaf(curr)) {\n                temp.push(curr.data);\n            }\n            // Move to the right child if it exists, otherwise move to the left child\n            if (curr.right) {\n                curr = curr.right;\n            } else {\n                curr = curr.left;\n            }\n        }\n        // Reverse and add the values from the temporary vector to the result\n        for (let i = temp.length - 1; i &gt;= 0; --i) {\n            res.push(temp[i]);\n        }\n    }\n\n    // Function to add the leaves of the tree\n    addLeaves(root, res) {\n        // If the current node is a leaf, add its value to the result\n        if (this.isLeaf(root)) {\n            res.push(root.data);\n            return;\n        }\n        // Recursively add leaves of the left and right subtrees\n        if (root.left) {\n            this.addLeaves(root.left, res);\n        }\n        if (root.right) {\n            this.addLeaves(root.right, res);\n        }\n    }\n\n    // Main function to perform the boundary traversal of the binary tree\n    printBoundary(root) {\n        let res = [];\n        if (!root) {\n            return res;\n        }\n        // If the root is not a leaf, add its value to the result\n        if (!this.isLeaf(root)) {\n            res.push(root.data);\n        }\n\n        // Add the left boundary, leaves, and right boundary in order\n        this.addLeftBoundary(root, res);\n        this.addLeaves(root, res);\n        this.addRightBoundary(root, res);\n\n        return res;\n    }\n}\n\n// Helper function to print the result\nfunction printResult(result) {\n    for (let val of result) {\n        console.log(val + &quot; &quot;);\n    }\n    console.log();\n}\n\n// Creating a sample binary tree\nlet root = new Node(1);\nroot.left = new Node(2);\nroot.right = new Node(3);\nroot.left.left = new Node(4);\nroot.left.right = new Node(5);\nroot.right.left = new Node(6);\nroot.right.right = new Node(7);\n\nlet solution = new Solution();\n\n// Get the boundary traversal\nlet result = solution.printBoundary(root);\n\n// Print the result\nconsole.log(&quot;Boundary Traversal: &quot;);\nprintResult(result);\n\n                            </code>\n                        </pre>\n                    </div>\n                    <p>\n                       <strong>Output</strong> Boundary Traversal: 1 2 4 5 6 7 3\n                    </p>\n                </div>\n            </details>\n            <details class=\"secondary-details\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Complexity Analysis\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <p>\n                    <!-- Insert Time and Space Complexity  Here -->\n                    <p><strong>Time Complexity: O(N)</strong> where N is the number of nodes in the Binary Tree. \n                    <ol><li>Adding the left boundary of the Binary Tree results in the traversal of the left side of the tree which is proportional to the the height of the three hence O(H) ie. O(log2N). In the worst case that the tree is skewed the complexity would be O(N).</li><li>For the bottom traversal of the Binary Tree, traversing the leaves is proportional to O(N) as preorder traversal visits every node once.</li><li>Adding the right boundary of the Binary Tree results in the traversal of the right side of the tree which is proportional to the the height of the three hence O(H) ie. O(log2N). In the worst case that the tree is skewed the complexity would be O(N).</li></ol>\n                    Since all these operations are performed sequentially, the overall time complexity is dominated by the most expensive operation, which is O(N).</p>\n\t\t\t\t\t<p><strong>Space Complexity: O(N)</strong>  where N is the number of nodes in the Binary Tree to store the boundary nodes of the tree.\n\t\t\t\t\tO(H) or O(log2N) Recursive stack space while traversing the tree. In the worst case scenario the tree is skewed and the auxiliary recursion stack space would be stacked up to the maximum depth of the tree, resulting in an O(N) auxiliary space complexity. </p>\n\n                </p>\n            </details>\n        </div>\n    </details>\n</div>\n\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n    <details>\n        <summary class=\"main-summary\">\n            <span>\n                Video Explanation\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"yt-video-wrapper\">\n            <!-- Insert iframe embed Link of Youtube Video-->\n          <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/0ca1nvR0be4?si=gDupXS5WvbQZoX9H\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n        </div>\n    </details>\n</div>\n\n<blockquote class=\"wp-block-quote\">\n    Special thanks to <strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268\">Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,<strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\"> please check out this article</a></strong>\n</blockquote>\n\n<script>\n\n    const codeSections = document.querySelectorAll('.code-section');\n\n    // Get last selected language from localStorage or set default value\n    let lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp';\n\n    codeSections.forEach((section, sectionIndex) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n        const copyBtn = section.querySelector('.copy-btn');\n\n        codeTabs.forEach((tab) => {\n            tab.addEventListener('click', () => {\n                codeTabs.forEach((t) => {\n                    t.classList.remove('dsa_article_code_active');\n                });\n                tab.classList.add('dsa_article_code_active');\n\n                const lang = tab.dataset.lang;\n                const activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                codeBlocks.forEach((block) => {\n                    if (block === activeBlock) {\n                        block.classList.add('dsa_article_code_active');\n                    } else {\n                        block.classList.remove('dsa_article_code_active');\n                    }\n                });\n\n                // Update last selected language for all sections and store in localStorage\n                lastSelectedLanguage = lang;\n                localStorage.setItem('lastSelectedLanguage', lang);\n                codeSections.forEach((otherSection, otherIndex) => {\n                    if (otherIndex !== sectionIndex) {\n                        const otherTabs = otherSection.querySelectorAll('.code-tab');\n                        otherTabs.forEach((otherTab) => {\n                            if (otherTab.dataset.lang === lang) {\n                                otherTab.classList.add('dsa_article_code_active');\n                            } else {\n                                otherTab.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                        const otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                        const otherCodeBlocks = otherSection.querySelectorAll('.code-block');\n                        otherCodeBlocks.forEach((block) => {\n                            if (block === otherActiveBlock) {\n                                block.classList.add('dsa_article_code_active');\n                            } else {\n                                block.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                    }\n                });\n            });\n        });\n\n        // Handle copy button click event\n        copyBtn.addEventListener('click', () => {\n            const activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\n            navigator.clipboard.writeText(activeBlock.innerText);\n            copyBtn.classList.add('dsa_article_code_active');\n            setTimeout(() => {\n                copyBtn.classList.remove('dsa_article_code_active');\n            }, 1000);\n        });\n    });\n\n    // Set initial state of the tabs\n    codeSections.forEach((section) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n\n        codeTabs.forEach((tab) => {\n            if (tab.dataset.lang === lastSelectedLanguage) {\n                tab.classList.add('dsa_article_code_active');\n            } else {\n                tab.classList.remove('dsa_article_code_active');\n            }\n        });\n\n        codeBlocks.forEach((block) => {\n            if (block.dataset.lang === lastSelectedLanguage) {\n                block.classList.add('dsa_article_code_active');\n            } else {\n                block.classList.remove('dsa_article_code_active');\n            }\n        });\n    });\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>",
    "category_tag": "data-structure",
    "likes": 165,
    "preview": "Problem Statement: Given a Binary Tree, perform the boundary traversal of the tree. The boundary traversal is the process of visiting the boundary nodes of the binary tree in the anticlockwise dire..."
}