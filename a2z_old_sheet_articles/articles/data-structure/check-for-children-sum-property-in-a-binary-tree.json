{
    "dislikes": 6,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:09:30 GMT+0530 (India Standard Time)",
    "slug": "check-for-children-sum-property-in-a-binary-tree",
    "aid": "1507",
    "title": "Check for Children Sum Property in a Binary Tree",
    "tuf_plus": "",
    "topics": [
        {
            "topic-id": "binary-tree",
            "topic-title": "Binary Tree"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "recursion",
            "topic-title": "Recursion"
        }
    ],
    "content": "<p><strong>Problem Statement: </strong>  Given a Binary Tree, convert the value of its nodes to follow the Children Sum Property.\nThe Children Sum Property in a binary tree states that for every node, the sum of its children's values (if they exist) should be equal to the node's value. If a child is missing, it is considered as having a value of 0.\n\n</p>\n<p><strong>Note: </strong>\n\t<ol><li>The node values can be increased by any positive integer any number of times, but decrementing any node value is not allowed.</li><li>A value for a NULL node can be assumed as 0.</li><li>We cannot change the structure of the given binary tree.</li></ol></p>\n<div id=\"article_examples\">\n    <details class=\"article_example_details\">\n        <summary class=\"article_example_summary\">\n            <span><strong>\n                    Examples\n                </strong>\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"atricle_example_content\">\n            <pre class=\"wp-block-preformatted\">\n                <span><strong>Example 1:</strong></span>\n\t\t\t\t<span><strong>Input:</strong>Binary Tree: 2 35 10 2 3 5 2\n\t\t\t\t</span>\n\t\t\t\t<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/children-sum-tree-image1-UaSSCvLK\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n\t\t\t\t<span><strong>Output:</strong> Binary Tree: 45 35 10 30 5 8 2</span>\n\t\t\t\t<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/children-sum-tree-image2-Ej8vCKl8\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n\t\t\t\t<span><strong>Explanation: </strong>We cannot decrement the value of the node but only increment. There are many different ways to do this but we have to ensure that we are only increasing the values of the nodes in such a way that its value is equal to the sum of its left and right children.</span>\n\t\t\t\t\n\t\t\t\t<span><strong>Example 2:</strong></span>\n\t\t\t\t<span><strong>Input:</strong>Binary Tree: 50 7 2 3 5 1 30\n\t\t\t\t</span>\n\t\t\t\t<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/children-sum-tree-image3-jhKF1ZVU\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n\t\t\t\t<span><strong>Output :</strong> Binary Tree: 50 55 5 86 1 31 30 </span>\n\t\t\t\t<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/children-sum-tree-image4-aJTxenfk\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n\t\t\t\t<span><strong>Explanation: </strong>We modify the tree in such a way that the value of each node becomes the value of its left and right children. If a node is a left or right child and its parent is of a greater value, since we cannot decrease the value of the parent, we increase the value of the children nodes so that the Binary Tree follows the children sum property.</span>\n\t\t\t\t\n\n\t\t\t\t\n            </pre>\n        </div>\n    </details>\n</div>\n\n<!-- This is Practice Section-->\n<div class=\"practice\">\n    <span><strong>Practice: </strong></span>\n    <div class=\"problem-buttons\">\n\n        <!-- Add Problem Link inside href -->\n        <a href=\"https://www.codingninjas.com/studio/problems/children-sum-property_8357239?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf\" target=\"_blank\" rel=\"noopener\">\n            <span>Solve Problem</span>\n            <img src=\"https://takeuforward-content-images.s3.ap-south-1.amazonaws.com/content/Group-11-5-pFOq-8ga\"\n                alt=\"code-studio\">\n        </a>\n    </div>\n    <!--<div class=\"problem-buttons\">\n         Add Problem Link inside href \n        <a href=\"\" target=\"_blank\" rel=\"noopener\">\n            <span>Solve Problem</span>\n            <img src=\"https://cdn.iconscout.com/icon/free/png-256/free-leetcode-3521542-2944960.png?f=webp\"\n                alt=\"leetcode\">\n        </a>\n    </div>-->\n</div>\n\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\n        yourself first. </em></p>\n\n\n<div id=\"brute-force-approach\">\n    <details>\n        <summary class=\"main-summary\">\n            <span>\n                Optimal Approach \n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                </path>\n            </svg>\n        </summary>\n        <div class=\"common-drops\">\n            <details class=\"secondary-details\" open=\"\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Algorithm / Intuition\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <div class=\"approach-algorithm\">\n                    <!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n                    <p>The constraint is that we cannot decrease the value of any node, only increase it. Also, the structure of the binary tree cannot be changed.\n                    If we follow a bottom-up approach and try to adjust parent values based on children, we may reach a situation where the sum of children exceeds the parent's value, requiring us to decrease the parent's value, which is not allowed.</p>\n                    <p><figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/children-sum-tree-image5-1T_YV01n\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure></p>\n                    <p>With just a bottom-up approach, we cannot guarantee that the Children Sum Property will be satisfied at each level. It might work for some cases but not for all. There's no clear strategy to ensure that the property holds true for the entire tree.\n                    A key insight here is that there's no restriction on how much we can increase the value of each node. Hence, we have the flexibility to adjust the values as needed to ensure that the Children Sum Property holds true at every node in the tree.</p>\n                    <p><figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/children-sum-tree-image6-ph8Bw9ZL\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure></p>\n                    <p>This means that if the sum of the values of a node's children is less than the node's value, we can simply increase the values of the children (and potentially the grandchildren and so on) until the property is satisfied.\n                    Using recursive calls, we traverse the binary tree, addressing each node and its children iteratively. At each step, we calculate the sum of the children's values and compare it with the parent node's value.</p>\n                    \n                    <p><strong>Algorithm:</strong></p>\n                    <p><strong>Step 1: Base Case</strong>Start by checking if we've reached the end of a branch in the tree. If the current node is null, simply return.</p>\n                    \n                    <p><strong>Step 2: Calculate Children Sum:</strong> For each non-null node, calculate the sum of the values of its left and right children, if they exist. Add up the values of the left and right children (if they are not null) and store this sum in a variable called child.</p>\n                   \n\n                    <p><strong>Step 3: Comparison and Value Update: </strong>\n                    Compare the sum of the children (child) with the current node's value.</p>\n                    <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/children-sum-tree-image7-SqnWmSy7\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n                    <p>If the sum of children is greater than or equal to the current node's value, we update the value of the parent to the sum of the children.</p>                                      \n                    <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/children-sum-tree-image8-PnClm34a\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>  \n                    <p>If the sum of children is smaller than the current node's value, we need to make an adjustment to ensure the property holds. However, remember that we cannot decrease the value of any node. So, instead, we update one of the children's values to match the current node's value.</p>        \n                    <p><strong>Step 4: Recursive Calls: </strong>\n                    For each node in the current level:\n                    After handling the current node, we recursively call the function on the left and right children of the current node. </p>\n                    \n                    <p><strong>Step 5: Update Current Node's Value:</strong> Once both children have been processed, we recalculate the total sum of the values of the left and right children and update the current node\u2019s value to match the total sum of its children. </p>\n                    \n                    \n                </div>\n            </details>\n            <details class=\"code-section secondary-details\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Code\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <div class=\"code-tabs\">\n                    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n                    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n                    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n                    <button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n                    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\"\n                        xmlns=\"http://www.w3.org/2000/svg\">\n                        <path\n                            d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n                        </path>\n                    </svg>\n                </div>\n                <div class=\"code-content\">\n                    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;iostream&gt;\n#include &lt;unordered_map&gt;\n#include &lt;vector&gt;\n#include &lt;queue&gt;\n\nusing namespace std;\n\n// TreeNode structure\nstruct TreeNode {\n    int val;\n    TreeNode *left;\n    TreeNode *right;\n    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n};\n\n\n\nclass Solution {\npublic:\n    // Function to change the values of the nodes\n    // based on the sum of its children's values.\n    void changeTree(TreeNode* root) {\n        // Base case: If the current node\n        // is NULL, return and do nothing.\n        if (root == NULL) {\n            return;\n        }\n\n        // Calculate the sum of the values of\n        // the left and right children, if they exist.\n        int child = 0;\n        if (root-&gt;left) {\n            child += root-&gt;left-&gt;val;\n        }\n        if (root-&gt;right) {\n            child += root-&gt;right-&gt;val;\n        }\n\n        // Compare the sum of children with\n        // the current node's value and update\n        if (child &gt;= root-&gt;val) {\n            root-&gt;val = child;\n        } else {\n            // If the sum is smaller, update the\n            // child with the current node's value.\n            if (root-&gt;left) {\n                root-&gt;left-&gt;val = root-&gt;val;\n            } else if (root-&gt;right) {\n                root-&gt;right-&gt;val = root-&gt;val;\n            }\n        }\n\n        // Recursively call the function\n        // on the left and right children.\n        changeTree(root-&gt;left);\n        changeTree(root-&gt;right);\n\n        // Calculate the total sum of the\n        // values of the left and right\n        // children, if they exist.\n        int tot = 0;\n        if (root-&gt;left) {\n            tot += root-&gt;left-&gt;val;\n        }\n        if (root-&gt;right) {\n            tot += root-&gt;right-&gt;val;\n        }\n\n        // If either left or right child\n        // exists, update the current node's\n        // value with the total sum.\n        if (root-&gt;left or root-&gt;right) {\n            root-&gt;val = tot;\n        }\n    }\n};\n\n\n// Function to print the inorder\n// traversal of the tree\nvoid inorderTraversal(TreeNode* root) {\n    if (root == nullptr) {\n        return;\n    }\n    inorderTraversal(root-&gt;left);\n    cout &lt;&lt; root-&gt;val &lt;&lt; &quot; &quot;;\n    inorderTraversal(root-&gt;right);\n}\n\nint main() {\n    // Create the binary tree\n    TreeNode* root = new TreeNode(3);\n    root-&gt;left = new TreeNode(5);\n    root-&gt;right = new TreeNode(1);\n    root-&gt;left-&gt;left = new TreeNode(6);\n    root-&gt;left-&gt;right = new TreeNode(2);\n    root-&gt;right-&gt;left = new TreeNode(0);\n    root-&gt;right-&gt;right = new TreeNode(8);\n    root-&gt;left-&gt;right-&gt;left = new TreeNode(7);\n    root-&gt;left-&gt;right-&gt;right = new TreeNode(4);\n\n    Solution sol;\n\n    // Print the inorder traversal\n    // of tree before modification\n    cout &lt;&lt; &quot;Binary Tree before modification: &quot;;\n    inorderTraversal(root);\n    cout &lt;&lt; endl;\n\n    // Call the changeTree function\n    // to modify the binary tree\n    sol.changeTree(root);\n\n    // Print the inorder traversal\n    // after modification\n    cout &lt;&lt; &quot;Binary Tree after Children Sum Property: &quot; ;\n    inorderTraversal(root);\n    cout &lt;&lt; endl;\n\n    return 0;\n}\n                            </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block \" data-lang=\"java\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"java\" class=\"language-java\">\nimport java.util.LinkedList;\nimport java.util.Queue;\n\n// TreeNode structure\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    public TreeNode(int x) {\n        val = x;\n        left = null;\n        right = null;\n    }\n}\n\npublic class Solution {\n    // Function to change the values of the nodes\n    // based on the sum of its children's values.\n    public void changeTree(TreeNode root) {\n        // Base case: If the current node\n        // is null, return and do nothing.\n        if (root == null) {\n            return;\n        }\n\n        // Calculate the sum of the values of\n        // the left and right children, if they exist.\n        int child = 0;\n        if (root.left != null) {\n            child += root.left.val;\n        }\n        if (root.right != null) {\n            child += root.right.val;\n        }\n\n        // Compare the sum of children with\n        // the current node's value and update\n        if (child &gt;= root.val) {\n            root.val = child;\n        } else {\n            // If the sum is smaller, update the\n            // child with the current node's value.\n            if (root.left != null) {\n                root.left.val = root.val;\n            } else if (root.right != null) {\n                root.right.val = root.val;\n            }\n        }\n\n        // Recursively call the function\n        // on the left and right children.\n        changeTree(root.left);\n        changeTree(root.right);\n\n        // Calculate the total sum of the\n        // values of the left and right\n        // children, if they exist.\n        int tot = 0;\n        if (root.left != null) {\n            tot += root.left.val;\n        }\n        if (root.right != null) {\n            tot += root.right.val;\n        }\n\n        // If either left or right child\n        // exists, update the current node's\n        // value with the total sum.\n        if (root.left != null || root.right != null) {\n            root.val = tot;\n        }\n    }\n}\n\n// Function to print the inorder\n// traversal of the tree\nclass TreeTraversal {\n    public static void inorderTraversal(TreeNode root) {\n        if (root == null) {\n            return;\n        }\n        inorderTraversal(root.left);\n        System.out.print(root.val + &quot; &quot;);\n        inorderTraversal(root.right);\n    }\n}\n\nclass Main {\n    public static void main(String[] args) {\n        // Create the binary tree\n        TreeNode root = new TreeNode(3);\n        root.left = new TreeNode(5);\n        root.right = new TreeNode(1);\n        root.left.left = new TreeNode(6);\n        root.left.right = new TreeNode(2);\n        root.right.left = new TreeNode(0);\n        root.right.right = new TreeNode(8);\n        root.left.right.left = new TreeNode(7);\n        root.left.right.right = new TreeNode(4);\n\n        Solution sol = new Solution();\n\n        // Print the inorder traversal\n        // of tree before modification\n        System.out.print(&quot;Binary Tree before modification: &quot;);\n        TreeTraversal.inorderTraversal(root);\n        System.out.println();\n\n        // Call the changeTree function\n        // to modify the binary tree\n        sol.changeTree(root);\n\n        // Print the inorder traversal\n        // after modification\n        System.out.print(&quot;Binary Tree after Children Sum Property: &quot;);\n        TreeTraversal.inorderTraversal(root);\n        System.out.println();\n    }\n}\n                            </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block\" data-lang=\"python\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"python\" class=\"language-python\">\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\n\nclass Solution:\n    def changeTree(self, root):\n        # Base case: If the current node\n        # is None, return and do nothing.\n        if root is None:\n            return\n\n        # Calculate the sum of the values of\n        # the left and right children, if they exist.\n        child = 0\n        if root.left:\n            child += root.left.val\n        if root.right:\n            child += root.right.val\n\n        # Compare the sum of children with\n        # the current node's value and update\n        if child &gt;= root.val:\n            root.val = child\n        else:\n            # If the sum is smaller, update the\n            # child with the current node's value.\n            if root.left:\n                root.left.val = root.val\n            elif root.right:\n                root.right.val = root.val\n\n        # Recursively call the function\n        # on the left and right children.\n        self.changeTree(root.left)\n        self.changeTree(root.right)\n\n        # Calculate the total sum of the\n        # values of the left and right\n        # children, if they exist.\n        tot = 0\n        if root.left:\n            tot += root.left.val\n        if root.right:\n            tot += root.right.val\n\n        # If either left or right child\n        # exists, update the current node's\n        # value with the total sum.\n        if root.left or root.right:\n            root.val = tot\n\n\n# Function to print the inorder\n# traversal of the tree\ndef inorderTraversal(root):\n    if root is None:\n        return\n    inorderTraversal(root.left)\n    print(root.val, end=&quot; &quot;)\n    inorderTraversal(root.right)\n\n\n# Create the binary tree\nroot = TreeNode(3)\nroot.left = TreeNode(5)\nroot.right = TreeNode(1)\nroot.left.left = TreeNode(6)\nroot.left.right = TreeNode(2)\nroot.right.left = TreeNode(0)\nroot.right.right = TreeNode(8)\nroot.left.right.left = TreeNode(7)\nroot.left.right.right = TreeNode(4)\n\nsol = Solution()\n\n# Print the inorder traversal\n# of tree before modification\nprint(&quot;Binary Tree before modification:&quot;, end=&quot; &quot;)\ninorderTraversal(root)\nprint()\n\n# Call the changeTree function\n# to modify the binary tree\nsol.changeTree(root)\n\n# Print the inorder traversal\n# after modification\nprint(&quot;Binary Tree after Children Sum Property:&quot;, end=&quot; &quot;)\ninorderTraversal(root)\nprint()\n                           </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block\" data-lang=\"javascript\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"javascript\" class=\"language-javascript\">\n// TreeNode structure\nclass TreeNode {\n    constructor(x) {\n        this.val = x;\n        this.left = null;\n        this.right = null;\n    }\n}\n\nclass Solution {\n    // Function to change the values of the nodes\n    // based on the sum of its children's values.\n    changeTree(root) {\n        // Base case: If the current node\n        // is null, return and do nothing.\n        if (root === null) {\n            return;\n        }\n\n        // Calculate the sum of the values of\n        // the left and right children, if they exist.\n        let child = 0;\n        if (root.left) {\n            child += root.left.val;\n        }\n        if (root.right) {\n            child += root.right.val;\n        }\n\n        // Compare the sum of children with\n        // the current node's value and update\n        if (child &gt;= root.val) {\n            root.val = child;\n        } else {\n            // If the sum is smaller, update the\n            // child with the current node's value.\n            if (root.left) {\n                root.left.val = root.val;\n            } else if (root.right) {\n                root.right.val = root.val;\n            }\n        }\n\n        // Recursively call the function\n        // on the left and right children.\n        this.changeTree(root.left);\n        this.changeTree(root.right);\n\n        // Calculate the total sum of the\n        // values of the left and right\n        // children, if they exist.\n        let tot = 0;\n        if (root.left) {\n            tot += root.left.val;\n        }\n        if (root.right) {\n            tot += root.right.val;\n        }\n\n        // If either left or right child\n        // exists, update the current node's\n        // value with the total sum.\n        if (root.left || root.right) {\n            root.val = tot;\n        }\n    }\n}\n\n// Function to print the inorder\n// traversal of the tree\nfunction inorderTraversal(root) {\n    if (root === null) {\n        return;\n    }\n    inorderTraversal(root.left);\n    console.log(root.val + &quot; &quot;);\n    inorderTraversal(root.right);\n}\n\n// Main function\nfunction main() {\n    // Create the binary tree\n    const root = new TreeNode(3);\n    root.left = new TreeNode(5);\n    root.right = new TreeNode(1);\n    root.left.left = new TreeNode(6);\n    root.left.right = new TreeNode(2);\n    root.right.left = new TreeNode(0);\n    root.right.right = new TreeNode(8);\n    root.left.right.left = new TreeNode(7);\n    root.left.right.right = new TreeNode(4);\n\n    const sol = new Solution();\n\n    // Print the inorder traversal\n    // of tree before modification\n    console.log(&quot;Binary Tree before modification: &quot;);\n    inorderTraversal(root);\n    console.log(&quot;&quot;);\n\n    // Call the changeTree function\n    // to modify the binary tree\n    sol.changeTree(root);\n\n    // Print the inorder traversal\n    // after modification\n    console.log(&quot;Binary Tree after Children Sum Property: &quot;);\n    inorderTraversal(root);\n    console.log(&quot;&quot;);\n}\n\n// Call the main function\nmain();\n\n                            </code>\n                        </pre>\n                    </div>\n                    <p>\n                       <strong>Output</strong> \n                      \tBinary Tree before modification: 6 5 7 2 4 3 0 1 8, Binary Tree after Children Sum Property: 6 17 7 11 4 25 0 8 8\n\n                    </p>\n                </div>\n            </details>\n            <details class=\"secondary-details\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Complexity Analysis\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <p>\n                    <!-- Insert Time and Space Complexity  Here -->\n                    <p><strong>Time Complexity: O(N)</strong>   where N is the number of nodes in the binary tree. This is because the algorithm traverses each node exactly once, performing constant-time operations at each node.</p>\n\n\t\t\t\t\t<p><strong>Space Complexity: O(N)</strong>   where N is the number of nodes in the Binary Tree.\n\t\t\t\t\t<ol><li>In the worst case scenario the tree is skewed and the auxiliary recursion stack space would be stacked up to the maximum height of the tree, resulting in a space complexity of O(N).</li><li>In the optimal case of a balanced tree, the auxiliary space would take up space proportional to O(log2N).</li></ol></p>\n\n                </p>\n            </details>\n        </div>\n    </details>\n</div>\n\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n    <details>\n        <summary class=\"main-summary\">\n            <span>\n                Video Explanation\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"yt-video-wrapper\">\n            <!-- Insert iframe embed Link of Youtube Video-->\n         <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fnmisPM6cVo?si=ADOYcFA-Gs-DvtHd\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n        </div>\n    </details>\n</div>\n\n<blockquote class=\"wp-block-quote\">\n    Special thanks to <strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268\">Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,<strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\"> please check out this article</a></strong>\n</blockquote>\n\n<script>\n\n    const codeSections = document.querySelectorAll('.code-section');\n\n    // Get last selected language from localStorage or set default value\n    let lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp';\n\n    codeSections.forEach((section, sectionIndex) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n        const copyBtn = section.querySelector('.copy-btn');\n\n        codeTabs.forEach((tab) => {\n            tab.addEventListener('click', () => {\n                codeTabs.forEach((t) => {\n                    t.classList.remove('dsa_article_code_active');\n                });\n                tab.classList.add('dsa_article_code_active');\n\n                const lang = tab.dataset.lang;\n                const activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                codeBlocks.forEach((block) => {\n                    if (block === activeBlock) {\n                        block.classList.add('dsa_article_code_active');\n                    } else {\n                        block.classList.remove('dsa_article_code_active');\n                    }\n                });\n\n                // Update last selected language for all sections and store in localStorage\n                lastSelectedLanguage = lang;\n                localStorage.setItem('lastSelectedLanguage', lang);\n                codeSections.forEach((otherSection, otherIndex) => {\n                    if (otherIndex !== sectionIndex) {\n                        const otherTabs = otherSection.querySelectorAll('.code-tab');\n                        otherTabs.forEach((otherTab) => {\n                            if (otherTab.dataset.lang === lang) {\n                                otherTab.classList.add('dsa_article_code_active');\n                            } else {\n                                otherTab.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                        const otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                        const otherCodeBlocks = otherSection.querySelectorAll('.code-block');\n                        otherCodeBlocks.forEach((block) => {\n                            if (block === otherActiveBlock) {\n                                block.classList.add('dsa_article_code_active');\n                            } else {\n                                block.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                    }\n                });\n            });\n        });\n\n        // Handle copy button click event\n        copyBtn.addEventListener('click', () => {\n            const activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\n            navigator.clipboard.writeText(activeBlock.innerText);\n            copyBtn.classList.add('dsa_article_code_active');\n            setTimeout(() => {\n                copyBtn.classList.remove('dsa_article_code_active');\n            }, 1000);\n        });\n    });\n\n    // Set initial state of the tabs\n    codeSections.forEach((section) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n\n        codeTabs.forEach((tab) => {\n            if (tab.dataset.lang === lastSelectedLanguage) {\n                tab.classList.add('dsa_article_code_active');\n            } else {\n                tab.classList.remove('dsa_article_code_active');\n            }\n        });\n\n        codeBlocks.forEach((block) => {\n            if (block.dataset.lang === lastSelectedLanguage) {\n                block.classList.add('dsa_article_code_active');\n            } else {\n                block.classList.remove('dsa_article_code_active');\n            }\n        });\n    });\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>",
    "category_tag": "data-structure",
    "likes": 91,
    "preview": "Problem Statement: Given a Binary Tree, convert the value of its nodes to follow the Children Sum Property. The Children Sum Property in a binary tree states that for every node, the sum of its chi..."
}