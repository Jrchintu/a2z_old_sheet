{
    "dislikes": 2,
    "video": "fWX9xDmIzRI",
    "publishedOn": "Sun Mar 24 2024 22:10:04 GMT+0530 (India Standard Time)",
    "slug": "subset-sum-equal-to-target-dp-14",
    "aid": "1666",
    "title": "Subset sum equal to target (DP- 14)",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/subset-sum-equals-to-target",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "dynamic-programming",
            "topic-title": "Dynamic Programming"
        },
        {
            "topic-id": "recursion",
            "topic-title": "Recursion"
        }
    ],
    "content": "<!-- wp:paragraph -->\n<p>In this article, we will solve the most asked coding interview problem: Subset sum equal to target.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In this article, we will be going to understand the pattern of dynamic programming on subsequences of an array. We will be using the problem <a href=\"https://www.codingninjas.com/codestudio/problems/subset-sum-equal-to-k_1550954?leftPanelTab=0\">\"Subset Sum Equal to K\"</a>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>First, we need to understand <strong>what a subsequence/subset is</strong>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>A subset/subsequence is a contiguous or non-contiguous part of an array, where elements appear in the same order as the original array.<br>For example, for the array: [2,3,1] , the subsequences will be [{2},{3},{1},{2,3},{2,1},{3,1},{2,3,1}} but {3,2} is <strong>not</strong> a subsequence because its elements are not in the same order as the original array.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Problem Link: </strong><a href=\"https://www.codingninjas.com/codestudio/problems/subset-sum-equal-to-k_1550954?leftPanelTab=0\">Subset Sum Equal to K</a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We are given an array \u2018ARR\u2019 with N positive integers. We need to find if there is a subset in \u201cARR\u201d with a sum equal to K. If there is, return true else return false.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n<details class=\"article_example_details\">\n<summary class=\"article_example_summary\">\n<span><strong>\nExamples\n</strong>\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"atricle_example_content\">\n<pre class=\"wp-block-preformatted\"><!-- Insert New Examples Here -->\n<pre class=\"wp-block-preformatted\"><strong>Example:</strong>\n\n<img width=\"375\" height=\"268\" src=\"https://lh3.googleusercontent.com/rysBOW8CTed-bDzIHGURWVZDU-Ckn7F6Xhjl3QxKdbMY2f5cPZe0fk0FTpUxUqMDHamE3bTSK0PvMDZmwXWB3yta0JchhCVajBy0ieq4uOJ_lszEK7oJK9fBdEhy23WFZI1wR0jA\"></pre>\n</pre>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Practice Section-->\n<div class=\"practice\">\n<span><strong>Practice: </strong></span>\n<div class=\"problem-buttons\">\n\n<!-- Add Problem Link inside href -->\n<a href=\"https://www.codingninjas.com/studio/problems/subset-sum-equal-to-k_1550954?utm_source=striver&amp;utm_medium=website&amp;utm_campaign=a_zcoursetuf\" target=\"_blank\" rel=\"noopener\">\n<span>Solve Problem</span>\n<img src=\"https://static.takeuforward.org/wp/uploads/2023/04/Group-11-5.png\" alt=\"code-studio\">\n</a>\n</div>\n</div>\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\nyourself first. </em></p>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<div class=\"horizontal_navbar_dsa_article\">\n<div class=\"grid_container_three\">\n<a href=\"#brute-force-approach\" class=\"three-boxes box-a\">\nMemorization approach\n</a>\n<a href=\"#better-approach\" class=\"three-boxes box-b\">\nTabulation approach\n</a>\n<a href=\"#optimal-approach\" class=\"three-boxes box-c\">\nSpace Optimization\n</a>\n<a href=\"#dsa_article_video_explanation\" class=\"three-boxes box-d\">\n<svg width=\"26\" height=\"26\" viewBox=\"0 0 20 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M8 10L13.19 7L8 4V10ZM19.56 2.17C19.69 2.64 19.78 3.27 19.84 4.07C19.91 4.87 19.94 5.56 19.94 6.16L20 7C20 9.19 19.84 10.8 19.56 11.83C19.31 12.73 18.73 13.31 17.83 13.56C17.36 13.69 16.5 13.78 15.18 13.84C13.88 13.91 12.69 13.94 11.59 13.94L10 14C5.81 14 3.2 13.84 2.17 13.56C1.27 13.31 0.69 12.73 0.44 11.83C0.31 11.36 0.22 10.73 0.16 9.93C0.0900001 9.13 0.0599999 8.44 0.0599999 7.84L0 7C0 4.81 0.16 3.2 0.44 2.17C0.69 1.27 1.27 0.69 2.17 0.44C2.64 0.31 3.5 0.22 4.82 0.16C6.12 0.0899998 7.31 0.0599999 8.41 0.0599999L10 0C14.19 0 16.8 0.16 17.83 0.44C18.73 0.69 19.31 1.27 19.56 2.17Z\" fill=\"red\"></path>\n</svg>\n\n</a>\n<div class=\"box-e tooltip\">\n<svg viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M12.842 9.25L11.9577 10.17C11.2502 10.89 10.8081 11.5 10.8081 13H8.84297V12.5C8.84297 11.39 9.28511 10.39 9.99255 9.67L11.2109 8.41C11.5745 8.05 11.7906 7.55 11.7906 7C11.7906 6.46957 11.5836 5.96086 11.2151 5.58579C10.8465 5.21071 10.3467 5 9.82552 5C9.30434 5 8.80451 5.21071 8.43598 5.58579C8.06745 5.96086 7.86041 6.46957 7.86041 7H5.89531C5.89531 5.93913 6.30938 4.92172 7.04644 4.17157C7.7835 3.42143 8.78316 3 9.82552 3C10.8679 3 11.8675 3.42143 12.6046 4.17157C13.3417 4.92172 13.7557 5.93913 13.7557 7C13.7543 7.84324 13.4259 8.65183 12.842 9.25ZM10.8081 17H8.84297V15H10.8081M9.82552 0C8.53521 0 7.25754 0.258658 6.06545 0.761205C4.87337 1.26375 3.79021 2.00035 2.87783 2.92893C1.03519 4.8043 0 7.34784 0 10C0 12.6522 1.03519 15.1957 2.87783 17.0711C3.79021 17.9997 4.87337 18.7362 6.06545 19.2388C7.25754 19.7413 8.53521 20 9.82552 20C12.4314 20 14.9306 18.9464 16.7732 17.0711C18.6158 15.1957 19.651 12.6522 19.651 10C19.651 4.47 15.2296 0 9.82552 0Z\" fill=\"black\"></path>\n</svg>\n<div class=\"bottom\">\n<p>Expand any one approach by clicking the given options in the bar. Clicking one approach on bar,\ncloses all other expands. You can manually expand more than one approach at a time</p>\n<i></i>\n</div>\n\n</div>\n</div>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Approaches Drop-Down -->\n<div class=\"dsa_article_dropdown_approachs \">\n\n<!-- Brute Force Approach Starts from here -->\n<div id=\"brute-force-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nMemorization Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n<h4><strong>Why a Greedy Solution doesn\u2019t work?</strong></h4>\n<p>A Greedy Solution doesn\u2019t make sense because we are not looking to optimize anything. We can rather try to generate all subsequences using recursion and whenever we get a single subsequence whose sum is equal to the given target, we can return true.</p>\n<p><strong>Note: </strong>Readers are highly advised to watch this video \u201c<a href=\"https://www.youtube.com/watch?v=AxNNVECce8c\">Recursion on Subsequences</a>\u201d to understand how we generate subsequences using recursion.</p>\n<h3><strong>Steps to form the recursive solution:&nbsp;</strong></h3>\n<p>We will first form the recursive solution by the three points mentioned in the <a href=\"https://takeuforward.org/data-structure/dynamic-programming-introduction/\">Dynamic Programming Introduction</a>.&nbsp;</p>\n<p><strong>Step 1: </strong>Express the problem in terms of indexes.</p>\n<p>The array will have an index but there is one more parameter \u201ctarget\u201d. We are given the initial problem to find whether there exists in the whole array a subsequence whose sum is equal to the target.</p>\n<p>So, we can say that initially, we need to find(n-1, target) which means that we need to find whether there exists a subsequence in the array from index 0 to n-1, whose sum is equal to the target. Similarly, we can generalize it for any index ind as follows:</p>\n<p><img width=\"624\" height=\"83\" src=\"https://lh3.googleusercontent.com/RKP3VbPBrprJxEC0916G0VZvqyi7CdH_8ErTqgO1ew3j1ITgv1MZXY5jn-VBxA-u3yfKSpOhf888QycXkTnkovvVgN-X7kHmkpDce-hYOYBfvhwEomLwCmmODst5ptVl9EKvpaU8\"></p>\n<p><strong>Base Cases:</strong></p>\n<ul><li>If target == 0, it means that we have already found the subsequence from the previous steps, so we can return true.</li><li>If ind==0, it means we are at the first element, so we need to return arr[ind]==target. If the element is equal to the target we return true else false.</li></ul>\n<p><img width=\"396\" height=\"284\" src=\"https://lh3.googleusercontent.com/sHh6VOemw7NNtAPrlV2ADIu5_2Y3krU-ZUAUFr11Jecm3Wg-JcyCFrGcL7nTbJmXkrPlPxoj0kDsyDhkAd03NJAJUxeKbdrf5rtZuaqZNhaHCNJN3kPu-DSuGZSweV6di7kFEuAR\"></p>\n<p><strong>Step 2: </strong>Try out all possible choices at a given index.</p>\n<p>We need to generate all the subsequences. We will use the pick/non-pick technique as discussed in this video \u201c<a href=\"https://www.youtube.com/watch?v=AxNNVECce8c\">Recursion on Subsequences</a>\u201d.</p>\n<p>We have two choices:</p>\n<ul><li><strong>Exclude the current element in the subsequence: </strong>We first try to find a subsequence without considering the current index element. For this, we will make a recursive call to f(ind-1,target).</li><li><strong>Include the current element in the subsequence:</strong> We will try to find a subsequence by considering the current index as element as part of subsequence. As we have included arr[ind], the updated target which we need to find in the rest if the array will be target - arr[ind]. Therefore, we will call f(ind-1,target-arr[ind]).</li></ul>\n<p><strong>Note: </strong>We will consider the current element in the subsequence only when the current element is less or equal to the target.</p>\n<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2022/02/image-1.jpeg\" alt=\"\" class=\"wp-image-2723\" width=\"475\" height=\"450\"></figure>\n<p><strong>Step 3:&nbsp; Return (taken || notTaken)</strong></p>\n<p>As we are looking for only one subset, if any of the one among taken or not taken returns true, we can return true from our function. Therefore, we return \u2018or(||)\u2019 of both of them.</p>\n<p>The final pseudocode after steps 1, 2, and 3:</p>\n<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2022/02/image-2.jpeg\" alt=\"\" class=\"wp-image-2724\" width=\"471\" height=\"476\"></figure>\n<p><strong>Steps to memoize a recursive solution:</strong></p>\n<p>If we draw the recursion tree, we will see that there are overlapping subproblems. In order to convert a recursive solution the following steps will be taken:</p>\n<ol><li>Create a dp array of size [n][k+1]. The size of the input array is \u2018n\u2019, so the index will always lie between \u20180\u2019 and \u2018n-1\u2019. The target can take any value between \u20180\u2019 and \u2018k\u2019. Therefore we take the dp array as dp[n][k+1]</li><li>We initialize the dp array to -1.</li><li>Whenever we want to find the answer of particular parameters (say f(ind,target)), we first check whether the answer is already calculated using the dp array(i.e dp[ind][target]!= -1 ). If yes, simply return the value from the dp array.</li><li>If not, then we are finding the answer for the given value for the first time, we will use the recursive relation as usual but before returning from the function, we will set dp[ind][target] to the solution we get.</li></ol>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\n// Function to check if there is a subset of 'arr' with a sum equal to 'target'\nbool subsetSumUtil(int ind, int target, vector&lt;int&gt;&amp; arr, vector&lt;vector&lt;int&gt;&gt;&amp; dp) {\n    // If the target sum is 0, we have found a subset\n    if (target == 0)\n        return true;\n\n    // If we have reached the first element in 'arr'\n    if (ind == 0)\n        return arr[0] == target;\n\n    // If the result for this subproblem has already been computed, return it\n    if (dp[ind][target] != -1)\n        return dp[ind][target];\n\n    // Try not taking the current element into the subset\n    bool notTaken = subsetSumUtil(ind - 1, target, arr, dp);\n\n    // Try taking the current element into the subset if it doesn't exceed the target\n    bool taken = false;\n    if (arr[ind] &lt;= target)\n        taken = subsetSumUtil(ind - 1, target - arr[ind], arr, dp);\n\n    // Store the result in the dp array to avoid recomputation\n    return dp[ind][target] = notTaken || taken;\n}\n\n// Function to check if there is a subset of 'arr' with a sum equal to 'k'\nbool subsetSumToK(int n, int k, vector&lt;int&gt;&amp; arr) {\n    // Initialize a 2D DP array for memoization\n    vector&lt;vector&lt;int&gt;&gt; dp(n, vector&lt;int&gt;(k + 1, -1));\n\n    // Call the recursive subsetSumUtil function\n    return subsetSumUtil(n - 1, k, arr, dp);\n}\n\nint main() {\n    vector&lt;int&gt; arr = {1, 2, 3, 4};\n    int k = 4;\n    int n = arr.size();\n\n    // Call the subsetSumToK function and print the result\n    if (subsetSumToK(n, k, arr))\n        cout &lt;&lt; \"Subset with the given target found\";\n    else\n        cout &lt;&lt; \"Subset with the given target not found\";\n\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\nclass TUF {\n    // Helper function to solve subset sum problem using dynamic programming\n    static boolean subsetSumUtil(int ind, int target, int[] arr, int[][] dp) {\n        // If the target sum is achieved, return true\n        if (target == 0)\n            return true;\n\n        // If we have considered all elements but haven't reached the target, return false\n        if (ind == 0)\n            return arr[0] == target;\n\n        // If the result for this subproblem has already been calculated, return it\n        if (dp[ind][target] != -1)\n            return dp[ind][target] == 0 ? false : true;\n\n        // Try not taking the current element\n        boolean notTaken = subsetSumUtil(ind - 1, target, arr, dp);\n\n        // Try taking the current element if it doesn't exceed the target\n        boolean taken = false;\n        if (arr[ind] &lt;= target)\n            taken = subsetSumUtil(ind - 1, target - arr[ind], arr, dp);\n\n        // Store the result in the DP table and return whether either option was successful\n        dp[ind][target] = notTaken || taken ? 1 : 0;\n        return notTaken || taken;\n    }\n\n    // Main function to check if there exists a subset with a given target sum\n    static boolean subsetSumToK(int n, int k, int[] arr) {\n        // Create a DP table with dimensions [n][k+1]\n        int dp[][] = new int[n][k + 1];\n\n        // Initialize DP table with -1 (unprocessed)\n        for (int row[] : dp)\n            Arrays.fill(row, -1);\n\n        // Call the recursive helper function\n        return subsetSumUtil(n - 1, k, arr, dp);\n    }\n\n    public static void main(String args[]) {\n        int arr[] = { 1, 2, 3, 4 };\n        int k = 4;\n        int n = arr.length;\n\n        // Check if there exists a subset with the given target sum\n        if (subsetSumToK(n, k, arr))\n            System.out.println(\"Subset with the given target found\");\n        else\n            System.out.println(\"Subset with the given target not found\");\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\ndef subsetSumUtil(ind, target, arr, dp):\n    # Check if the target sum has been achieved.\n    if target == 0:\n        return True\n\n    # If we have reached the first element in the array.\n    if ind == 0:\n        return arr[0] == target\n\n    # Check if the result for this combination of 'ind' and 'target' has already been computed.\n    if dp[ind][target] != -1:\n        return dp[ind][target]\n\n    # Recursively try not taking the current element.\n    notTaken = subsetSumUtil(ind - 1, target, arr, dp)\n\n    taken = False\n    # Check if the current element can be taken without exceeding the target.\n    if arr[ind] &lt;= target:\n        taken = subsetSumUtil(ind - 1, target - arr[ind], arr, dp)\n\n    # Store the result in the dp array to avoid recomputation.\n    dp[ind][target] = notTaken or taken\n    return dp[ind][target]\n\ndef subsetSumToK(n, k, arr):\n    # Initialize a memoization table with -1.\n    dp = [[-1 for j in range(k + 1)] for i in range(n)]\n\n    # Call the utility function to find if a subset with the given target sum exists.\n    return subsetSumUtil(n - 1, k, arr, dp)\n\ndef main():\n    arr = [1, 2, 3, 4]\n    k = 4\n    n = len(arr)\n\n    if subsetSumToK(n, k, arr):\n        print(\"Subset with the given target found\")\n    else:\n        print(\"Subset with the given target not found\")\n\nif __name__ == \"__main__\":\n    main()\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n// Function to check if a subset of an array can sum up to a target value\nfunction subsetSumToK(n, k, arr) {\n    // Create a 2D array 'dp' to memoize subproblem results\n    const dp = new Array(n);\n    for (let i = 0; i &lt; n; i++) {\n        dp[i] = new Array(k + 1).fill(false);\n    }\n\n    // Base case: If the target is 0, an empty subset is always a valid solution\n    for (let i = 0; i &lt; n; i++) {\n        dp[i][0] = true;\n    }\n\n    // Fill the dp array using dynamic programming\n    for (let i = 1; i &lt; n; i++) {\n        for (let j = 1; j &lt;= k; j++) {\n            // Check if the current element can be included in the subset\n            const notTaken = dp[i - 1][j];\n            const taken = arr[i] &lt;= j ? dp[i - 1][j - arr[i]] : false;\n            dp[i][j] = notTaken || taken;\n        }\n    }\n\n    // The final result is stored in dp[n-1][k]\n    return dp[n - 1][k];\n}\n\n// Main function\nfunction main() {\n    const arr = [1, 2, 3, 4];\n    const k = 4;\n    const n = arr.length;\n\n    if (subsetSumToK(n, k, arr)) {\n        console.log(\"Subset with given target found\");\n    } else {\n        console.log(\"Subset with given target not found\");\n    }\n}\n\n// Call the main function to start the program\nmain();\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Brute Force Here -->\n</p><p><strong>Output:</strong> Subset with given target found\n\n</p>\n<p></p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n<!-- Insert Time and Space Complexity of Brute Force Here -->\n</p><p><strong>Time Complexity: O(N*K)</strong></p>\n<p>Reason: There are N*K states therefore at max \u2018N*K\u2019 new problems will be solved.</p>\n<p><strong>Space Complexity: O(N*K) + O(N)</strong></p>\n<p>Reason: We are using a recursion stack space(O(N)) and a 2D array ( O(N*K)).</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Brute Force Approach Ends here -->\n\n\n<!-- Better Approach Starts from here -->\n\n<div id=\"better-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nTabulation Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition For Better Approach Here -->\n<p><strong>Steps to convert Recursive Solution to Tabulation one.</strong></p>\n<p>To convert the memoization approach to a tabulation one, create a dp array with the same size as done in memoization. We can set its type as bool and initialize it as false.</p>\n<p><img width=\"624\" height=\"351\" src=\"https://lh3.googleusercontent.com/aKRhigmTVvwfRo5kh3xZz_xgazYkVmj2PjL6FFyrEwgKnQIgo0qtuFlpec5fjnHvarAWiEflUcI2bj44ERRbanxSNaY2eY57C8tHd6KL1XwIweawUEWKQqN-yyQw-CR3b51S9hqP\"></p>\n<p>First, we need to initialize the base conditions of the recursive solution.</p>\n<ul><li>If target == 0, ind can take any value from 0 to n-1, therefore we need to set the value of the first column as true.</li></ul>\n<p><img width=\"624\" height=\"351\" src=\"https://lh4.googleusercontent.com/Ybj4DjsaCRdoX4oJBUdX_KjfunrHhFYTZ-eA9BF_4ZSa_ItapmrdfwmASEuapQ1f06yViNc0lqkVdKwb6AP4FlPpiTQMKHbBAyzEStyQzvHJNjuRnQItmwIFJIu_PNPcq5o4FXJH\"></p>\n<ul><li>The first row dp[0][] indicates that only the first element of the array is considered, therefore for the target value equal to arr[0], only cell with that target will be true, so explicitly set dp[0][arr[0]] =true, (dp[0][arr[0]] means that we are considering the first element of the array with the target equal to the first element itself). Please note that it can happen that arr[0]&gt;target, so we first check it: if(arr[0]&lt;=target) then set dp[0][arr[0]] = true. </li></ul>\n<p><img width=\"624\" height=\"351\" src=\"https://lh4.googleusercontent.com/78km0lvY5WD_q5H3fJPcdXpwFoAjQueE1brTZN-IGImd_YyS9DFPgLyyNaZGxHJ3fwBznyuU1VDEy8CrgNkKCZtK7rKZA1KtJp04UhE6kHMI56eJA0fH9V0uZEvEu4nbxXyqjuAH\"></p>\n<ul><li>After that , we will set our nested for loops to traverse the dp array and following the logic discussed in the recursive approach, we will set the value of each cell. Instead of recursive calls, we will use the dp array itself.</li><li>At last we will return dp[n-1][k] as our answer.</li></ul>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\n// Function to check if there is a subset of 'arr' with a sum equal to 'k'\nbool subsetSumToK(int n, int k, vector&lt;int&gt; &amp;arr) {\n    // Initialize a 2D DP array with dimensions (n x k+1) to store subproblem results\n    vector&lt;vector&lt;bool&gt;&gt; dp(n, vector&lt;bool&gt;(k + 1, false));\n\n    // Base case: If the target sum is 0, we can always achieve it by taking no elements\n    for (int i = 0; i &lt; n; i++) {\n        dp[i][0] = true;\n    }\n\n    // Base case: If the first element of 'arr' is less than or equal to 'k', set dp[0][arr[0]] to true\n    if (arr[0] &lt;= k) {\n        dp[0][arr[0]] = true;\n    }\n\n    // Fill the DP array iteratively\n    for (int ind = 1; ind &lt; n; ind++) {\n        for (int target = 1; target &lt;= k; target++) {\n            // If we don't take the current element, the result is the same as the previous row\n            bool notTaken = dp[ind - 1][target];\n\n            // If we take the current element, subtract its value from the target and check the previous row\n            bool taken = false;\n            if (arr[ind] &lt;= target) {\n                taken = dp[ind - 1][target - arr[ind]];\n            }\n\n            // Store the result in the DP array for the current subproblem\n            dp[ind][target] = notTaken || taken;\n        }\n    }\n\n    // The final result is stored in dp[n-1][k]\n    return dp[n - 1][k];\n}\n\nint main() {\n    vector&lt;int&gt; arr = {1, 2, 3, 4};\n    int k = 4;\n    int n = arr.size();\n\n    // Call the subsetSumToK function and print the result\n    if (subsetSumToK(n, k, arr))\n        cout &lt;&lt; \"Subset with the given target found\";\n    else\n        cout &lt;&lt; \"Subset with the given target not found\";\n\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\nclass TUF {\n    // Function to check if there exists a subset with a given target sum\n    static boolean subsetSumToK(int n, int k, int[] arr) {\n        // Create a boolean DP table with dimensions [n][k+1]\n        boolean dp[][] = new boolean[n][k + 1];\n        \n        // Initialize the first row of the DP table\n        for (int i = 0; i &lt; n; i++) {\n            dp[i][0] = true;\n        }\n\n        // Initialize the first column of the DP table\n        if (arr[0] &lt;= k) {\n            dp[0][arr[0]] = true;\n        }\n\n        // Fill in the DP table using bottom-up approach\n        for (int ind = 1; ind &lt; n; ind++) {\n            for (int target = 1; target &lt;= k; target++) {\n                // Calculate if the current target can be achieved without taking the current element\n                boolean notTaken = dp[ind - 1][target];\n                \n                // Calculate if the current target can be achieved by taking the current element\n                boolean taken = false;\n                if (arr[ind] &lt;= target) {\n                    taken = dp[ind - 1][target - arr[ind]];\n                }\n                \n                // Store the result in the DP table\n                dp[ind][target] = notTaken || taken;\n            }\n        }\n\n        // The final result is stored in the bottom-right cell of the DP table\n        return dp[n - 1][k];\n    }\n\n    public static void main(String args[]) {\n        int arr[] = { 1, 2, 3, 4 };\n        int k = 4;\n        int n = arr.length;\n\n        // Check if there exists a subset with the given target sum\n        if (subsetSumToK(n, k, arr))\n            System.out.println(\"Subset with the given target found\");\n        else\n            System.out.println(\"Subset with the given target not found\");\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\ndef subsetSumToK(n, k, arr):\n    # Initialize a 2D DP table with False values.\n    dp = [[False for j in range(k + 1)] for i in range(n)]\n    \n    # Set the first column to True since a sum of 0 is always possible with an empty subset.\n    for i in range(n):\n        dp[i][0] = True\n    \n    # Check if the first element of the array can be used to make the target sum.\n    if arr[0] &lt;= k:\n        dp[0][arr[0]] = True\n    \n    # Fill in the DP table iteratively.\n    for ind in range(1, n):\n        for target in range(1, k + 1):\n            notTaken = dp[ind - 1][target]  # Not taking the current element.\n            taken = False\n            # Check if taking the current element is possible without exceeding the target.\n            if arr[ind] &lt;= target:\n                taken = dp[ind - 1][target - arr[ind]]\n            dp[ind][target] = notTaken or taken  # Update the DP table with the result.\n    \n    # The final result is stored in the bottom-right cell of the DP table.\n    return dp[n - 1][k]\n\ndef main():\n    arr = [1, 2, 3, 4]\n    k = 4\n    n = len(arr)\n\n    if subsetSumToK(n, k, arr):\n        print(\"Subset with the given target found\")\n    else:\n        print(\"Subset with the given target not found\")\n\nif __name__ == '__main__':\n    main()\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\nfunction subsetSumToK(n, k, arr) {\n    // Create a 2D array 'dp' to memoize subproblem results\n    const dp = new Array(n);\n    for (let i = 0; i &lt; n; i++) {\n        dp[i] = new Array(k + 1).fill(false);\n    }\n\n    // Base case: If the target is 0, an empty subset is always a valid solution\n    for (let i = 0; i &lt; n; i++) {\n        dp[i][0] = true;\n    }\n\n    // Initialize the first row based on the value of the first element in 'arr'\n    if (arr[0] &lt;= k) {\n        dp[0][arr[0]] = true;\n    }\n\n    // Fill the dp array using dynamic programming\n    for (let ind = 1; ind &lt; n; ind++) {\n        for (let target = 1; target &lt;= k; target++) {\n            // Check if the current element can be included in the subset\n            const notTaken = dp[ind - 1][target];\n            const taken = arr[ind] &lt;= target ? dp[ind - 1][target - arr[ind]] : false;\n            dp[ind][target] = notTaken || taken;\n        }\n    }\n\n    // The final result is stored in dp[n-1][k]\n    return dp[n - 1][k];\n}\n\n// Main function\nfunction main() {\n    const arr = [1, 2, 3, 4];\n    const k = 4;\n    const n = arr.length;\n\n    if (subsetSumToK(n, k, arr)) {\n        console.log(\"Subset with given target found\");\n    } else {\n        console.log(\"Subset with given target not found\");\n    }\n}\n\n// Call the main function to start the program\nmain();\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Better Approach Here -->\n<strong>Output:</strong> Subset with given target found\n\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Better Approach Here -->\n</p><p><strong>Time Complexity: O(N*K)</strong></p>\n<p>Reason: There are two nested loops</p>\n<p><strong>Space Complexity: O(N*K)</strong></p>\n<p>Reason: We are using an external array of size \u2018N*K\u2019. Stack Space is eliminated.</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Better Approach Ends from here -->\n\n\n<!-- Optimal Approach Starts from here -->\n\n<div id=\"optimal-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nSpace Optimization Approach \n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm of Better Approach Here -->\n<p>If we closely look the relation,</p>\n<p><strong>dp[ind][target] =&nbsp; dp[ind-1][target] || dp[ind-1][target-arr[ind]]</strong></p>\n<p>We see that to calculate a value of a cell of the dp array, we need only the previous row values (say prev). So, we don\u2019t need to store an entire array. Hence we can space optimize it.</p>\n<p><strong>Note: </strong>Whenever we create a new row ( say cur), we need to explicitly set its first element is true according to our base condition.</p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\n// Function to check if there is a subset of 'arr' with a sum equal to 'k'\nbool subsetSumToK(int n, int k, vector&lt;int&gt; &amp;arr) {\n    // Initialize a vector 'prev' to store the previous row of the DP table\n    vector&lt;bool&gt; prev(k + 1, false);\n\n    // Base case: If the target sum is 0, we can always achieve it by taking no elements\n    prev[0] = true;\n\n    // Base case: If the first element of 'arr' is less than or equal to 'k', set prev[arr[0]] to true\n    if (arr[0] &lt;= k) {\n        prev[arr[0]] = true;\n    }\n\n    // Iterate through the elements of 'arr' and update the DP table\n    for (int ind = 1; ind &lt; n; ind++) {\n        // Initialize a new row 'cur' to store the current state of the DP table\n        vector&lt;bool&gt; cur(k + 1, false);\n\n        // Base case: If the target sum is 0, we can achieve it by taking no elements\n        cur[0] = true;\n\n        for (int target = 1; target &lt;= k; target++) {\n            // If we don't take the current element, the result is the same as the previous row\n            bool notTaken = prev[target];\n\n            // If we take the current element, subtract its value from the target and check the previous row\n            bool taken = false;\n            if (arr[ind] &lt;= target) {\n                taken = prev[target - arr[ind]];\n            }\n\n            // Store the result in the current DP table row for the current subproblem\n            cur[target] = notTaken || taken;\n        }\n\n        // Update 'prev' with the current row 'cur' for the next iteration\n        prev = cur;\n    }\n\n    // The final result is stored in prev[k]\n    return prev[k];\n}\n\nint main() {\n    vector&lt;int&gt; arr = {1, 2, 3, 4};\n    int k = 4;\n    int n = arr.size();\n\n    // Call the subsetSumToK function and print the result\n    if (subsetSumToK(n, k, arr))\n        cout &lt;&lt; \"Subset with the given target found\";\n    else\n        cout &lt;&lt; \"Subset with the given target not found\";\n\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\nclass TUF {\n    // Function to check if there exists a subset with a given target sum\n    static boolean subsetSumToK(int n, int k, int[] arr) {\n        // Create an array to store the previous row of the DP table\n        boolean prev[] = new boolean[k + 1];\n        \n        // Initialize the first row of the DP table\n        prev[0] = true;\n\n        // Initialize the first column of the DP table\n        if (arr[0] &lt;= k) {\n            prev[arr[0]] = true;\n        }\n\n        // Fill in the DP table using bottom-up approach\n        for (int ind = 1; ind &lt; n; ind++) {\n            // Create an array to store the current row of the DP table\n            boolean cur[] = new boolean[k + 1];\n            \n            // Initialize the first column of the current row\n            cur[0] = true;\n            \n            for (int target = 1; target &lt;= k; target++) {\n                // Calculate if the current target can be achieved without taking the current element\n                boolean notTaken = prev[target];\n                \n                // Calculate if the current target can be achieved by taking the current element\n                boolean taken = false;\n                if (arr[ind] &lt;= target) {\n                    taken = prev[target - arr[ind]];\n                }\n                \n                // Store the result in the current row of the DP table\n                cur[target] = notTaken || taken;\n            }\n            \n            // Update the previous row with the current row\n            prev = cur;\n        }\n\n        // The final result is stored in the last cell of the previous row\n        return prev[k];\n    }\n\n    public static void main(String args[]) {\n        int arr[] = { 1, 2, 3, 4 };\n        int k = 4;\n        int n = arr.length;\n\n        // Check if there exists a subset with the given target sum\n        if (subsetSumToK(n, k, arr))\n            System.out.println(\"Subset with the given target found\");\n        else\n            System.out.println(\"Subset with the given target not found\");\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\ndef subset_sum_to_k(n, k, arr):\n    # Initialize a boolean array 'prev' with size (k + 1).\n    prev = [False] * (k + 1)\n    \n    # Set the first element of 'prev' to True since an empty subset can sum up to 0.\n    prev[0] = True\n    \n    # Check if the first element of 'arr' can directly contribute to the target sum 'k'.\n    if arr[0] &lt;= k:\n        prev[arr[0]] = True\n\n    # Loop through the elements of 'arr' and update 'prev' using dynamic programming.\n    for ind in range(1, n):\n        # Initialize a new boolean array 'cur' for the current element.\n        cur = [False] * (k + 1)\n        \n        # An empty subset can always sum up to 0.\n        cur[0] = True\n        \n        for target in range(1, k + 1):\n            not_taken = prev[target]  # Previous result without including the current element.\n            taken = False\n            \n            # Check if including the current element is possible without exceeding the target.\n            if arr[ind] &lt;= target:\n                taken = prev[target - arr[ind]]\n            \n            # Update 'cur' with the result for the current 'target'.\n            cur[target] = not_taken or taken\n        \n        # Update 'prev' with the results for the current element 'ind'.\n        prev = cur\n\n    # The final result is stored in 'prev[k]'.\n    return prev[k]\n\ndef main():\n    arr = [1, 2, 3, 4]\n    k = 4\n    n = len(arr)\n\n    if subset_sum_to_k(n, k, arr):\n        print(\"Subset with the given target found\")\n    else:\n        print(\"Subset with the given target not found\")\n\nif __name__ == \"__main__\":\n    main()\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\nfunction subsetSumToK(n, k, arr) {\n    // Initialize a boolean array 'prev' to store the previous row of the DP table\n    const prev = new Array(k + 1).fill(false);\n\n    // Base case: If the target is 0, an empty subset is always a valid solution\n    prev[0] = true;\n\n    // Initialize the first element of 'prev' based on the value of the first element in 'arr'\n    if (arr[0] &lt;= k) {\n        prev[arr[0]] = true;\n    }\n\n    // Loop through the elements of 'arr' and calculate the DP table row by row\n    for (let ind = 1; ind &lt; n; ind++) {\n        // Initialize a new boolean array 'cur' for the current row\n        const cur = new Array(k + 1).fill(false);\n\n        // Base case: An empty subset is always a valid solution\n        cur[0] = true;\n\n        for (let target = 1; target &lt;= k; target++) {\n            // Check if the current element can be included in the subset\n            const notTaken = prev[target];\n            const taken = arr[ind] &lt;= target ? prev[target - arr[ind]] : false;\n            cur[target] = notTaken || taken;\n        }\n\n        // Set 'cur' as the new 'prev' for the next iteration\n        prev.splice(0, prev.length, ...cur);\n    }\n\n    // The final result is stored in prev[k]\n    return prev[k];\n}\n\n// Main function\nfunction main() {\n    const arr = [1, 2, 3, 4];\n    const k = 4;\n    const n = arr.length;\n\n    if (subsetSumToK(n, k, arr)) {\n        console.log(\"Subset with given target found\");\n    } else {\n        console.log(\"Subset with given target not found\");\n    }\n}\n\n// Call the main function to start the program\nmain();\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Optimal Apporach Here -->\n<strong>Output:</strong>Subset with given target found\n\n\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Optimal Approach-->\n</p><p><strong>Time Complexity: O(N*K)</strong></p>\n<p>Reason: There are three nested loops</p>\n<p><strong>Space Complexity: O(K)</strong></p>\n<p>Reason: We are using an external array of size \u2018K+1\u2019 to store only one row.</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Optimal Approach Starts from here -->\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n<details>\n<summary class=\"main-summary\">\n<span>\nVideo Explanation\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"yt-video-wrapper\">\n\n<!-- Insert iframe embed Link of Youtube Video-->\n<iframe class=\"lazy-loaded\" loading=\"lazy\" title=\"Subset Equals to Target\" width=\"810\" height=\"456\" data-lazy-type=\"iframe\" data-src=\"https://www.youtube.com/embed/fWX9xDmIzRI?si=BEDZI1Ll50k4Al3-\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\" src=\"https://www.youtube.com/embed/xvNwoz-ufXA?feature=oembed\"></iframe><noscript>\n<iframe loading=\"lazy\" title=\"Subset Equals to Target\" width=\"810\" height=\"456\" src=\"https://www.youtube.com/embed/fWX9xDmIzRI?si=BEDZI1Ll50k4Al3-\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe></noscript>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script>\n\nconst codeSections = document.querySelectorAll('.code-section');\n\n// Get last selected language from localStorage or set default value\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\n// Update last selected language for all sections and store in localStorage\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\n// Handle copy button click event\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\n// Set initial state of the tabs\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<script>\nconst codeSections = document.querySelectorAll('.code-section');\n\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script src=\"https://takeuforward.org/UXApproachDropDowns/3ApproachJSScript.js\"></script>\n<!-- /wp:html -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;<strong><a href=\"https://www.linkedin.com/in/anshuman-sharma-a1b245194/\" target=\"_blank\" rel=\"noreferrer noopener\">Anshuman Sharma</a></strong>&nbsp;<em><em>and&nbsp;<a href=\"https://www.linkedin.com/in/abhipsita-das-5b7069212/?originalSubdomain=in\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>Abhipsita Das</strong></a></em></em></em> <em>for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->",
    "category_tag": "data-structure",
    "likes": 185,
    "preview": "In this article, we will solve the most asked coding interview problem: Subset sum equal to target. In this article, we will be going to understand the pattern of dynamic programming on subsequence..."
}