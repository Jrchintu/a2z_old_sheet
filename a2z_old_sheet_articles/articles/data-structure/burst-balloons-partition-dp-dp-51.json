{
    "dislikes": 3,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:11:52 GMT+0530 (India Standard Time)",
    "slug": "burst-balloons-partition-dp-dp-51",
    "aid": "2183",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/burst-balloons",
    "title": "Burst Balloons | Partition DP | DP 51",
    "topics": [
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "dynamic-programming",
            "topic-title": "Dynamic Programming"
        }
    ],
    "category_tag": "data-structure",
    "likes": 37,
    "preview": "Problem Statement: You are given n balloons, indexed from 0 to n - 1. Each balloon is painted with a number on it represented by an array. You are asked to burst all the balloons. If you burst the...",
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement:</strong> You are given n balloons, indexed from 0 to n - 1. Each balloon is painted with a number on it represented by an array. You are asked to burst all the balloons.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If you burst the ith balloon, you will get arr[i - 1] * arr[i] * arr[i + 1] coins. If i - 1 or i + 1 goes out of the array's bounds, then treat it as if there is a balloon with a 1 painted on it.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Return the maximum coins you can collect by bursting the balloons wisely.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Pre-requisite: </strong><a href=\"https://takeuforward.org/dynamic-programming/matrix-chain-multiplication-dp-48/\"><strong>MCM</strong></a><strong> &amp; </strong><a href=\"https://takeuforward.org/data-structure/minimum-cost-to-cut-the-stick-dp-50/\"><strong>DP 50</strong></a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n<details class=\"article_example_details\">\n<summary class=\"article_example_summary\">\n<span><strong>\nExamples\n</strong>\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"atricle_example_content\">\n<pre class=\"wp-block-preformatted\"><!-- Insert New Examples Here -->\n<pre class=\"wp-block-preformatted\"><strong>Example 1:</strong>\n<strong>Input:</strong> N = 4, array[] = {3, 1, 5, 8}\n<strong>Output</strong>: 167\n<strong>Explanation:\n</strong>First, we will burst the second balloon with \nthe value 1. Coins = 3*1*5 = 15.\nSecond, we will burst the balloon with the \nvalue 5. Coins = 3*5*8 = 120.\nThird, we will burst the balloon with the \nvalue 3. Coins = 1*3*8 = 24.\nFourth, we will burst the balloon with the \nvalue 8. Coins = 1*8*1 = 8.\nSo, the total number of coins we can collect \nis 167. This is the maximum number of coins we \ncan collect.</pre>\n<pre class=\"wp-block-preformatted\"><strong>Example 2:</strong>\n<strong>Input</strong>: N = 2, array[] = {1, 5}\n<strong>Output</strong>: 10\n<strong>Explanation</strong>:\nFirst, we will burst the second balloon with the \nvalue 1. Coins = 1*1*5 = 5.\nSecond, we will burst the balloon with the \nvalue 5. Coins = 1*5*1 = 5.\nSo, the total number of coins we can collect is 10. \nThis is the maximum number of coins we can collect.</pre>\n</pre>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Practice Section-->\n<div class=\"practice\">\n<span><strong>Practice: </strong></span>\n<div class=\"problem-buttons\">\n\n<!-- Add Problem Link inside href -->\n<a href=\"https://www.codingninjas.com/codestudio/problems/burst-balloons_628471?utm_source=striver&amp;utm_medium=website&amp;utm_campaign=a_zcoursetuf\" target=\"_blank\" rel=\"noopener\">\n<span>Solve Problem</span>\n<img src=\"https://static.takeuforward.org/wp/uploads/2023/04/Group-11-5.png\" alt=\"code-studio\">\n</a>\n</div>\n</div>\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\nyourself first. </em></p>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<div class=\"horizontal_navbar_dsa_article\">\n<div class=\"grid_container_three\">\n<a href=\"#brute-force-approach\" class=\"three-boxes box-a\">\nRecursive approach\n</a>\n<a href=\"#better-approach\" class=\"three-boxes box-b\">\nMemoization approach\n</a>\n<a href=\"#optimal-approach\" class=\"three-boxes box-c\">\nTabulation Approach\n</a>\n<a href=\"#dsa_article_video_explanation\" class=\"three-boxes box-d\">\n<svg width=\"26\" height=\"26\" viewBox=\"0 0 20 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M8 10L13.19 7L8 4V10ZM19.56 2.17C19.69 2.64 19.78 3.27 19.84 4.07C19.91 4.87 19.94 5.56 19.94 6.16L20 7C20 9.19 19.84 10.8 19.56 11.83C19.31 12.73 18.73 13.31 17.83 13.56C17.36 13.69 16.5 13.78 15.18 13.84C13.88 13.91 12.69 13.94 11.59 13.94L10 14C5.81 14 3.2 13.84 2.17 13.56C1.27 13.31 0.69 12.73 0.44 11.83C0.31 11.36 0.22 10.73 0.16 9.93C0.0900001 9.13 0.0599999 8.44 0.0599999 7.84L0 7C0 4.81 0.16 3.2 0.44 2.17C0.69 1.27 1.27 0.69 2.17 0.44C2.64 0.31 3.5 0.22 4.82 0.16C6.12 0.0899998 7.31 0.0599999 8.41 0.0599999L10 0C14.19 0 16.8 0.16 17.83 0.44C18.73 0.69 19.31 1.27 19.56 2.17Z\" fill=\"red\"></path>\n</svg>\n\n</a>\n<div class=\"box-e tooltip\">\n<svg viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M12.842 9.25L11.9577 10.17C11.2502 10.89 10.8081 11.5 10.8081 13H8.84297V12.5C8.84297 11.39 9.28511 10.39 9.99255 9.67L11.2109 8.41C11.5745 8.05 11.7906 7.55 11.7906 7C11.7906 6.46957 11.5836 5.96086 11.2151 5.58579C10.8465 5.21071 10.3467 5 9.82552 5C9.30434 5 8.80451 5.21071 8.43598 5.58579C8.06745 5.96086 7.86041 6.46957 7.86041 7H5.89531C5.89531 5.93913 6.30938 4.92172 7.04644 4.17157C7.7835 3.42143 8.78316 3 9.82552 3C10.8679 3 11.8675 3.42143 12.6046 4.17157C13.3417 4.92172 13.7557 5.93913 13.7557 7C13.7543 7.84324 13.4259 8.65183 12.842 9.25ZM10.8081 17H8.84297V15H10.8081M9.82552 0C8.53521 0 7.25754 0.258658 6.06545 0.761205C4.87337 1.26375 3.79021 2.00035 2.87783 2.92893C1.03519 4.8043 0 7.34784 0 10C0 12.6522 1.03519 15.1957 2.87783 17.0711C3.79021 17.9997 4.87337 18.7362 6.06545 19.2388C7.25754 19.7413 8.53521 20 9.82552 20C12.4314 20 14.9306 18.9464 16.7732 17.0711C18.6158 15.1957 19.651 12.6522 19.651 10C19.651 4.47 15.2296 0 9.82552 0Z\" fill=\"black\"></path>\n</svg>\n<div class=\"bottom\">\n<p>Expand any one approach by clicking the given options in the bar. Clicking one approach on bar,\ncloses all other expands. You can manually expand more than one approach at a time</p>\n<i></i>\n</div>\n\n</div>\n</div>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Approaches Drop-Down -->\n<div class=\"dsa_article_dropdown_approachs \">\n\n<!-- Brute Force Approach Starts from here -->\n<div id=\"brute-force-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nRecursive Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n<p>From the question, we can easily understand that we must burst the balloons in a particular order to collect the maximum number of coins. For example, in the first case, we followed the order: 1, 5, 3, 8 to collect the maximum number of coins i.e. 167. So, the order of bursting the balloons will change the number of coins we can collect. There may be several orders that we can follow.</p>\n<p>So, in order to find a valid order, can figure out the first balloon we will burst. Apparently, the entire array(i.e. given) is the range of the elements(i.e. the balloons) and anyone among the elements can be the first.</p>\n<p>First, we will try to solve the problem using the technique we have learned in <a href=\"https://takeuforward.org/data-structure/matrix-chain-multiplication-tabulation-method-dp-49/\" target=\"_blank\" rel=\"noopener\" title=\"\">MCM</a>. In the MCM, we selected the matrices sequentially so that the number of scalar multiplication is minimized. Similarly, here we can maintain an order where we will first try to choose the first element, then we can try to find the second one, and so on.&nbsp;</p>\n<p><strong><em>Now, let\u2019s understand if we can really solve the problem using the above approach:</em></strong></p>\n<p>Let\u2019s consider the following example:</p>\n<p>We are given an array: {b1, b2, b3, b4, b5, b6}. Each element of the given array is representing a balloon. Now, if we burst the b4, we will get a total of (b3*b4*b5) coins. After bursting b4, we are left with the left sub-problem {b1, b2, b3} and the right sub-problem {b5, b6} to solve.</p>\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/01/Screenshot-2023-01-08-152921.png\" alt=\"\" class=\"wp-image-7216\"></figure>\n<p><strong><em>Now, the question is, if we can say that the final answer will be the summation of the current number of coins and the answers from the left and right subproblems</em></strong>. The answer is <strong><em>No</em></strong>.</p>\n<p>Let\u2019s understand the reason behind this. Imagine, at first we burst the balloon b4. Then, we are left with the array:&nbsp; {b1, b2, b3, b5, b6}. Now, if we try to burst b3, it will be dependent on b5. Similarly, if we try to burst b5, it will be dependent on b3. Similarly, we can observe the same dependency in the case of other elements as well. So, we cannot solve the subproblems {b1, b2, b3} and {b4, b5} independently as they are dependent on each other.</p>\n<h5><strong>Intuition:</strong></h5>\n<p>Until now, we have clearly understood that we cannot solve this problem using this approach. So, we will just try to think in the opposite way. First, we tried to find out a balloon that we will burst first. But now, we will first try to find that balloon which we will burst last.</p>\n<p><strong>Note: </strong><em>The intuition is to first find the last balloon, then the second last, and so on. This is the sequence we need to follow to solve this problem.</em></p>\n<p><strong><em>Now, let\u2019s understand how the subproblems are independent in this approach:</em></strong></p>\n<p>Let\u2019s consider the following example:</p>\n<p>We are given an array: {b1, b2, b3, b4, b5, b6}. Assume, b4 be the last balloon we will burst. Then we can surely say, the total no. of coins we can get by bursting the balloon b4 is (1*b4*1). Now, we get two subproblems as usual: {b1, b2, b3} and {b5, b6}, and while choosing the second last balloon, we can ensure that b4 exists while bursting the second last balloon. If the second last balloon belongs to the 1st sub-problem i.e. {b1, b2, b3}, it will be only dependent on the last balloon i.e. b4 as the rightmost element will be b4. Similarly,&nbsp; if the second last balloon belongs to the 2nd sub-problem i.e. {b5, b6}, it will also be dependent only on the last balloon i.e. b4 as the leftmost element will be b4. The following illustration will clarify the concept:</p>\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/01/Screenshot-2023-01-08-153026.png\" alt=\"\" class=\"wp-image-7217\"></figure>\n<p>Now, we can clearly observe the subproblems are no anymore dependent on each other.</p>\n<p>We have found the right approach until now. Now, let us quickly revise the rules to solve a problem on partition dp.</p>\n<ol><li>Start with the entire block/array and mark it with i, j.</li><li>Try all partitions.</li><li>Return the best possible answer of the two partitions (the answer that comes after dividing the problem into two subproblems and solving them recursively).</li></ol>\n<p>Now let us go through these rules and apply them to this problem.</p>\n<p><strong>Marking the array with i, j:</strong></p>\n<p>We are given an array of balloons of size N. The entire array basically represents the range of the balloons. So, we will place i and j at both ends of the array.</p>\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/01/Screenshot-2023-01-08-153131.png\" alt=\"\" class=\"wp-image-7218\"></figure>\n<p><strong>Try all partitions:</strong></p>\n<p>As we have figured out the logic for marking the i, and j pointers, we will move to the partitioning loop. We can simply write a for loop(say ind) starting from i to j, The problem is being broken in the following manner:</p>\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/01/Screenshot-2023-01-08-153507.png\" alt=\"\" class=\"wp-image-7219\"></figure>\n<p><strong>Note: </strong>Here f(i, ind-1) is the left sub-problem, and f(ind+1, j) is the right sub-problem.&nbsp;</p>\n<p><strong>Base Case: </strong>We can say that when i &gt; j this is not a valid partition and so we will return 0.</p>\n<p><strong>Return the best possible answer:</strong></p>\n<p>Here, in this problem, we are trying to achieve the maximum possible answer i.e. the maximum number of coins. So, among all the costs calculated, we will just store the maximum one. And finally, the maximum cost will be our answer.</p>\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/01/Screenshot-2023-01-08-153612.png\" alt=\"\" class=\"wp-image-7220\"></figure>\n<p><strong>Note</strong>: <em>If you wish to see the dry run of the above approach, you can watch the video attached to this article.</em></p>\n<p><strong>Approach</strong>:&nbsp;</p>\n<p><strong>The recursive algorithm steps are as follows:</strong></p>\n<ol><li>Append 1 to both ends of the given array.</li><li>Convert the problem to a recursive function marked by two pointers i and j.</li><li>Use a loop to check all possible combinations of balloons and get all possible total numbers of coins.</li><li>Return the maximum number of coins we can get.</li><li><strong>Base case: </strong>If i &gt; j, we will return 0.</li></ol>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\n// Recursive function to calculate the maximum coins obtained\nint maxCoinsHelper(int i, int j, vector&lt;int&gt; &amp;nums) {\n    if (i &gt; j) return 0;\n    int maxCoins = INT_MIN;\n    \n    // Iterate through each possible balloon to burst last\n    for (int k = i; k &lt;= j; k++) {\n        // Calculate the coins obtained by bursting the k-th balloon last\n        int coins = nums[i - 1] * nums[k] * nums[j + 1];\n        \n        // Recursively calculate the maximum coins for the remaining balloons\n        int remainingCoins = maxCoinsHelper(i, k - 1, nums) + maxCoinsHelper(k + 1, j, nums);\n        \n        // Update the maximum coins\n        maxCoins = max(maxCoins, coins + remainingCoins);\n    }\n    \n    return maxCoins;\n}\n\n// Function to calculate the maximum coins obtained\nint maxCoins(vector&lt;int&gt; &amp;nums) {\n    int n = nums.size();\n    \n    // Add 1 to the beginning and end of the nums array\n    nums.insert(nums.begin(), 1);\n    nums.push_back(1);\n    \n    // Call the helper function to compute the maximum coins\n    return maxCoinsHelper(1, n, nums);\n}\n\nint main() {\n    vector&lt;int&gt; nums = {3, 1, 5, 8};\n    int maxCoinsResult = maxCoins(nums);\n    cout &lt;&lt; \"Maximum coins obtained: \" &lt;&lt; maxCoinsResult &lt;&lt; \"\\n\";\n    \n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\nimport java.util.*;\n\npublic class TUF {\n    // Function to recursively calculate the maximum coins\n    static int maxCoins(int i, int j, ArrayList&lt;Integer&gt; a) {\n        if (i &gt; j) return 0;\n        int maxi = Integer.MIN_VALUE;\n        for (int ind = i; ind &lt;= j; ind++) {\n            int cost = a.get(i - 1) * a.get(ind) * a.get(j + 1)\n                       + maxCoins(i, ind - 1, a) + maxCoins(ind + 1, j, a);\n            maxi = Math.max(maxi, cost);\n        }\n        return maxi;\n    }\n\n    // Wrapper function to calculate the maximum coins\n    static int maxCoins(ArrayList&lt;Integer&gt; a) {\n        int n = a.size();\n        a.add(1);\n        a.add(0, 1);\n        return maxCoins(1, n, a);\n    }\n\n    public static void main(String[] args) {\n        ArrayList&lt;Integer&gt; a = new ArrayList&lt;&gt;(Arrays.asList(3, 1, 5, 8));\n        int ans = maxCoins(a);\n        System.out.println(ans);\n    }\n}\n\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\ndef maxCoins(a):\n    n = len(a)\n    a.insert(0, 1)\n    a.append(1)\n\n    # Create a 2D DP table initialized with zeros\n    dp = [[0] * (n + 2) for _ in range(n + 2)]\n\n    # Calculate the maximum coins using dynamic programming\n    for length in range(1, n + 1):\n        for i in range(1, n - length + 2):\n            j = i + length - 1\n            maxi = float('-inf')\n            \n            for ind in range(i, j + 1):\n                cost = a[i - 1] * a[ind] * a[j + 1] + dp[i][ind - 1] + dp[ind + 1][j]\n                maxi = max(maxi, cost)\n            \n            dp[i][j] = maxi\n    \n    return dp[1][n]\n\nif __name__ == \"__main__\":\n    a = [3, 1, 5, 8]\n    ans = maxCoins(a)\n    print(ans)\n\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\nfunction findMaxCoins(a) {\n    // Function f implements the recursive calculation\n    function f(i, j, a) {\n        // Base case: if i &gt; j, return 0\n        if (i &gt; j) return 0;\n        \n        let maxi = -Infinity;\n\n        // Iterate through all possible balloon indices from i to j\n        for (let ind = i; ind &lt;= j; ind++) {\n            // Calculate the cost for bursting balloon ind\n            let cost = a[i - 1] * a[ind] * a[j + 1] +\n                       f(i, ind - 1, a) + f(ind + 1, j, a);\n            \n            // Update the maximum cost\n            maxi = Math.max(maxi, cost);\n        }\n        \n        return maxi;\n    }\n\n    // Add 1 to the beginning and end of the array 'a'\n    a.unshift(1);\n    a.push(1);\n\n    // Call the recursive function 'f' with initial values\n    return f(1, a.length - 2, a);\n}\n\n// Define the input values\nlet a = [3, 1, 5, 8];\n\n// Call the function and print the result\nlet ans = findMaxCoins(a);\nconsole.log(ans);\n</code>\n</pre>\n</div>\n\n<p>\n<!-- Insert Output of Brute Force Here -->\nThe maximum coins we can get: 167(For example 1)\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n<!-- Insert Time and Space Complexity of Brute Force Here -->\n</p><p><strong>Time Complexity: Exponential</strong></p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Brute Force Approach Ends here -->\n\n\n<!-- Better Approach Starts from here -->\n\n<div id=\"better-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nMemoization Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition For Better Approach Here -->\n<p><strong>Steps to memoize the recursive solution:</strong></p>\n<ol><li>Create a dp array of size [n+1][n+1]. i and j can range from 1 to n so we take the size n+1 X n+1.</li><li>We initialize the dp array to -1.</li><li>Whenever we want to find the answer to particular parameters (say f(i,j)), we first check whether the answer is already calculated using the dp array(i.e dp[i][j]!= -1 ). If yes, simply return the value from the dp array.</li><li>If not, then we are finding the answer for the given value for the first time, we will use the recursive relation as usual but before returning from the function, we will set dp[i][j] to the solution we get.</li></ol>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\n// Recursive function to calculate the maximum coins obtained\nint maxCoinsHelper(int i, int j, vector&lt;int&gt; &amp;nums, vector&lt;vector&lt;int&gt;&gt; &amp;dp) {\n    if (i &gt; j) return 0;\n    if (dp[i][j] != -1) return dp[i][j];\n    int maxCoins = INT_MIN;\n    \n    // Iterate through each possible balloon to burst last\n    for (int k = i; k &lt;= j; k++) {\n        // Calculate the coins obtained by bursting the k-th balloon last\n        int coins = nums[i - 1] * nums[k] * nums[j + 1];\n        \n        // Recursively calculate the maximum coins for the remaining balloons\n        int remainingCoins = maxCoinsHelper(i, k - 1, nums, dp) + maxCoinsHelper(k + 1, j, nums, dp);\n        \n        // Update the maximum coins\n        maxCoins = max(maxCoins, coins + remainingCoins);\n    }\n    \n    return dp[i][j] = maxCoins;\n}\n\n// Function to calculate the maximum coins obtained\nint maxCoins(vector&lt;int&gt; &amp;nums) {\n    int n = nums.size();\n    \n    // Add 1 to the beginning and end of the nums array\n    nums.insert(nums.begin(), 1);\n    nums.push_back(1);\n    \n    // Create a DP array for memoization\n    vector&lt;vector&lt;int&gt;&gt; dp(n + 2, vector&lt;int&gt;(n + 2, -1));\n    \n    // Call the helper function to compute the maximum coins\n    return maxCoinsHelper(1, n, nums, dp);\n}\n\nint main() {\n    vector&lt;int&gt; nums = {3, 1, 5, 8};\n    int maxCoinsResult = maxCoins(nums);\n    cout &lt;&lt; \"Maximum coins obtained: \" &lt;&lt; maxCoinsResult &lt;&lt; \"\\n\";\n    \n    return 0;\n}\n\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\nimport java.util.*;\n\npublic class TUF {\n    // Function to recursively calculate the maximum coins\n    static int maxCoins(int i, int j, ArrayList&lt;Integer&gt; a, int[][] dp) {\n        if (i &gt; j) return 0;\n        if (dp[i][j] != -1) return dp[i][j];\n        int maxi = Integer.MIN_VALUE;\n        for (int ind = i; ind &lt;= j; ind++) {\n            int cost = a.get(i - 1) * a.get(ind) * a.get(j + 1)\n                       + maxCoins(i, ind - 1, a, dp) + maxCoins(ind + 1, j, a, dp);\n            maxi = Math.max(maxi, cost);\n        }\n        return dp[i][j] = maxi;\n    }\n\n    // Wrapper function to calculate the maximum coins\n    static int maxCoins(ArrayList&lt;Integer&gt; a) {\n        int n = a.size();\n        a.add(1);\n        a.add(0, 1);\n        int[][] dp = new int[n + 2][n + 2];\n        for (int[] row : dp) {\n            Arrays.fill(row, -1);\n        }\n        return maxCoins(1, n, a, dp);\n    }\n\n    public static void main(String[] args) {\n        ArrayList&lt;Integer&gt; a = new ArrayList&lt;&gt;(Arrays.asList(3, 1, 5, 8));\n        int ans = maxCoins(a);\n        System.out.println(ans);\n    }\n}\n\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\ndef maxCoins(a):\n    n = len(a)\n    \n    # Extend the list 'a' with 1s at both ends\n    a.insert(0, 1)\n    a.append(1)\n\n    # Create a 2D DP table initialized with -1s\n    dp = [[-1] * (n + 2) for _ in range(n + 2)]\n\n    def f(i, j):\n        if i &gt; j:\n            return 0\n        if dp[i][j] != -1:\n            return dp[i][j]\n        maxi = float('-inf')\n        for ind in range(i, j + 1):\n            cost = a[i - 1] * a[ind] * a[j + 1] + f(i, ind - 1) + f(ind + 1, j)\n            maxi = max(maxi, cost)\n        dp[i][j] = maxi\n        return maxi\n\n    return f(1, n)\n\nif __name__ == \"__main__\":\n    a = [3, 1, 5, 8]\n    ans = maxCoins(a)\n    print(ans)\n\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\nfunction findMaxCoins(a) {\n    // Function f with memoization\n    function f(i, j, a, dp) {\n        // Base case: if i &gt; j, return 0\n        if (i &gt; j) return 0;\n\n        // If the result for this subproblem is already computed, return it\n        if (dp[i][j] !== -1) return dp[i][j];\n\n        let maxi = -Infinity;\n\n        // Iterate through all possible balloon indices from i to j\n        for (let ind = i; ind &lt;= j; ind++) {\n            // Calculate the cost for bursting balloon ind\n            let cost = a[i - 1] * a[ind] * a[j + 1] +\n                       f(i, ind - 1, a, dp) + f(ind + 1, j, a, dp);\n\n            // Update the maximum cost\n            maxi = Math.max(maxi, cost);\n        }\n\n        // Store the result in the memoization table\n        dp[i][j] = maxi;\n        return maxi;\n    }\n\n    // Add 1 to the beginning and end of the array 'a'\n    a.unshift(1);\n    a.push(1);\n\n    // Create a memoization table 'dp' initialized with -1\n    let n = a.length;\n    let dp = new Array(n).fill(null).map(() =&gt; new Array(n).fill(-1));\n\n    // Call the recursive function 'f' with initial values\n    return f(1, n - 2, a, dp);\n}\n\n// Define the input values\nlet a = [3, 1, 5, 8];\n\n// Call the function and print the result\nlet ans = findMaxCoins(a);\nconsole.log(ans);\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Better Approach Here -->\nThe maximum coins we can get: 167(For example 1)\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Better Approach Here -->\n</p><p><strong>Time Complexity: </strong>O(N<sup>3</sup>), There are total N<sup>2</sup> no. of states. And for each state, we are running a partitioning loop roughly for N times.</p>\n<p><strong>Space Complexity: </strong>O(N<sup>2</sup>) + Auxiliary stack space of O(N), N<sup>2</sup> for the dp array we are using.&nbsp;</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Better Approach Ends from here -->\n\n\n<!-- Optimal Approach Starts from here -->\n\n<div id=\"optimal-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nTabulation Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm of Optimal Approach Here -->\n<p><strong>Tabulation:</strong></p>\n<ol><li>First of all, we handle the base case. If (i &gt; j) we return 0. To cover this case we can initialize the entire dp array with 0.<br><strong><em>Here, we need the dp of size n+2 X n+2 as the highest value of j can be n and in that case, it will search for the value a[j+1] i.e. a[n+1]. So, to handle this case, we need the size to be n+2.</em></strong><strong><em><br></em></strong></li><li>Next, memoization is a top-down approach, whereas tabulation is bottom-up. Our changing parameters i and j will change in opposite directions, i.e i will change from n\u21921 and j will change from 1\u2192 n.</li><li>Next, we copy down the recursive logic(recurrence) inside the nested loops.</li></ol>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\n// Function to calculate the maximum coins obtained\nint maxCoins(vector&lt;int&gt; &amp;nums) {\n    int n = nums.size();\n    \n    // Add 1 to the beginning and end of the nums array\n    nums.insert(nums.begin(), 1);\n    nums.push_back(1);\n    \n    // Create a DP array for memoization\n    vector&lt;vector&lt;int&gt;&gt; dp(n + 2, vector&lt;int&gt;(n + 2, 0));\n\n    for (int i = n; i &gt;= 1; i--) {\n        for (int j = 1; j &lt;= n; j++) {\n            if (i &gt; j) continue;\n            int maxi = INT_MIN;\n            \n            // Iterate through each possible balloon to burst last\n            for (int ind = i; ind &lt;= j; ind++) {\n                // Calculate the coins obtained by bursting the ind-th balloon last\n                int coins = nums[i - 1] * nums[ind] * nums[j + 1];\n                \n                // Calculate the maximum coins for the remaining balloons\n                int remainingCoins = dp[i][ind - 1] + dp[ind + 1][j];\n                \n                // Update the maximum coins\n                maxi = max(maxi, coins + remainingCoins);\n            }\n            \n            dp[i][j] = maxi;\n        }\n    }\n    \n    return dp[1][n];\n}\n\nint main() {\n    vector&lt;int&gt; nums = {3, 1, 5, 8};\n    int maxCoinsResult = maxCoins(nums);\n    cout &lt;&lt; \"Maximum coins obtained: \" &lt;&lt; maxCoinsResult &lt;&lt; \"\\n\";\n    \n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\nimport java.util.*;\n\npublic class MaxCoins {\n    static int maxCoins(ArrayList&lt;Integer&gt; a) {\n        int n = a.size();\n        \n        // Add 1 to the beginning and end of the array\n        a.add(0, 1);\n        a.add(1);\n        \n        // Create a 2D DP array\n        int[][] dp = new int[n + 2][n + 2];\n\n        // Iterate from the end to the beginning\n        for (int i = n; i &gt;= 1; i--) {\n            for (int j = 1; j &lt;= n; j++) {\n                if (i &gt; j) continue;\n                int maxi = Integer.MIN_VALUE;\n                \n                // Iterate through possible indices to split the array\n                for (int ind = i; ind &lt;= j; ind++) {\n                    int cost = a.get(i - 1) * a.get(ind) * a.get(j + 1) +\n                               dp[i][ind - 1] + dp[ind + 1][j];\n                    maxi = Math.max(maxi, cost);\n                }\n                dp[i][j] = maxi;\n            }\n        }\n        return dp[1][n];\n    }\n\n    public static void main(String[] args) {\n        ArrayList&lt;Integer&gt; a = new ArrayList&lt;&gt;(Arrays.asList(3, 1, 5, 8));\n        int ans = maxCoins(a);\n        System.out.println(ans);\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\ndef maxCoins(a):\n    n = len(a)\n    \n    # Extend the list 'a' with 1s at both ends\n    a.insert(0, 1)\n    a.append(1)\n\n    # Create a 2D DP table initialized with 0s\n    dp = [[0] * (n + 2) for _ in range(n + 2)]\n\n    # Loop from the end of 'a' to the beginning\n    for i in range(n, 0, -1):\n        for j in range(1, n + 1):\n            if i &gt; j:\n                continue\n            maxi = float('-inf')\n            \n            # Iterate through the balloons from 'i' to 'j'\n            for ind in range(i, j + 1):\n                cost = a[i - 1] * a[ind] * a[j + 1] + dp[i][ind - 1] + dp[ind + 1][j]\n                maxi = max(maxi, cost)\n            \n            dp[i][j] = maxi\n    \n    return dp[1][n]\n\nif __name__ == \"__main__\":\n    a = [3, 1, 5, 8]\n    ans = maxCoins(a)\n    print(ans)\n\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\nfunction findMaxCoins(a) {\n    // Add 1 to the beginning and end of the array 'a'\n    a.unshift(1);\n    a.push(1);\n    \n    // Get the length of the array 'a'\n    let n = a.length;\n    \n    // Create a 2D array 'dp' to store dynamic programming results\n    let dp = new Array(n + 2);\n    for (let i = 0; i &lt; n + 2; i++) {\n        dp[i] = new Array(n + 2).fill(0);\n    }\n\n    // Loop to fill in the 'dp' array\n    for (let i = n; i &gt;= 1; i--) {\n        for (let j = 1; j &lt;= n; j++) {\n            // Skip invalid cases where i &gt; j\n            if (i &gt; j) continue;\n\n            let maxi = -Infinity;\n\n            // Calculate the cost for each possible balloon to burst between i and j\n            for (let ind = i; ind &lt;= j; ind++) {\n                let cost = a[i - 1] * a[ind] * a[j + 1] +\n                           dp[i][ind - 1] + dp[ind + 1][j];\n                maxi = Math.max(maxi, cost);\n            }\n\n            // Store the maximum cost in 'dp'\n            dp[i][j] = maxi;\n        }\n    }\n\n    // The maximum coins are stored in dp[1][n]\n    return dp[1][n];\n}\n\n// Define the input values\nlet a = [3, 1, 5, 8];\n\n// Call the function and print the result\nlet ans = findMaxCoins(a);\nconsole.log(ans);\n\n</code>\n</pre>\n<p>\n<!-- Insert Output of Optimal Apporach Here -->\nThe maximum coins we can get: 167(For example 1)\n</p>\n</div>\n</div></details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Optimal Approach-->\n</p><p><strong>Time Complexity: </strong>O(N<sup>3</sup>), There are total N<sup>2</sup> no. of states. And for each state, we are running a partitioning loop roughly for N times.</p>\n<p><strong>Space Complexity: </strong>O(N<sup>2</sup>), N<sup>2</sup> for the dp array we are using.</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Optimal Approach Starts from here -->\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n<details>\n<summary class=\"main-summary\">\n<span>\nVideo Explanation\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"yt-video-wrapper\">\n\n<!-- Insert iframe embed Link of Youtube Video-->\n<iframe class=\"lazy-loaded\" loading=\"lazy\" title=\"Burst Balloons\" width=\"810\" height=\"456\" data-lazy-type=\"iframe\" data-src=\"https://www.youtube.com/embed/Yz4LlDSlkns?si=L8vLq0UvjPFuTle5\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\" src=\"https://www.youtube.com/embed/Yz4LlDSlkns?feature=oembed\"></iframe><noscript>\n<iframe loading=\"lazy\" title=\"Burst Balloons\" width=\"810\" height=\"456\" src=\"https://www.youtube.com/embed/Yz4LlDSlkns?si=L8vLq0UvjPFuTle5\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe></noscript>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script>\n\nconst codeSections = document.querySelectorAll('.code-section');\n\n// Get last selected language from localStorage or set default value\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\n// Update last selected language for all sections and store in localStorage\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\n// Handle copy button click event\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\n// Set initial state of the tabs\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<script>\nconst codeSections = document.querySelectorAll('.code-section');\n\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script src=\"https://takeuforward.org/UXApproachDropDowns/3ApproachJSScript.js\"></script>\n<!-- /wp:html -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;<strong><a href=\"https://www.linkedin.com/in/kriti39/\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>KRITIDIPTA GHOSH</strong></a></strong>&nbsp;for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a>.&nbsp;<em>If you want to suggest any improvement/correction in this article please mail us at&nbsp;write4tuf@gmail.com</em></p></blockquote>\n<!-- /wp:quote -->"
}