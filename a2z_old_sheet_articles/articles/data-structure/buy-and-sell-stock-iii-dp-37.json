{
    "dislikes": 2,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:11:14 GMT+0530 (India Standard Time)",
    "slug": "buy-and-sell-stock-iii-dp-37",
    "aid": "2015",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/best-time-to-buy-and-sell-stock-iii",
    "title": "Buy and Sell Stock - III | (DP - 37)",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "dynamic-programming",
            "topic-title": "Dynamic Programming"
        },
        {
            "topic-id": "recursion",
            "topic-title": "Recursion"
        }
    ],
    "likes": 28,
    "category_tag": "data-structure",
    "preview": "Problem Link: Best Time to Buy and Sell Stock III We are given an array Arr[] of length n. It represents the price of a stock on \u2018n\u2019 days. The following guidelines need to be followed: 1. We can bu...",
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Link: </strong><a href=\"https://www.codingninjas.com/codestudio/problems/buy-and-sell-stock_1071012?source=youtube&amp;campaign=striver_dp_videos&amp;utm_source=youtube&amp;utm_medium=affiliate&amp;utm_campaign=striver_dp_videos&amp;leftPanelTab=0\" target=\"_blank\" rel=\"noreferrer noopener\">Best Time to Buy and Sell Stock III</a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We are given an array Arr[] of length n. It represents the price of a stock on \u2018n\u2019 days. The following guidelines need to be followed:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li>We can buy and sell the stock any number of times.</li><li>In order to sell the stock, we need to first buy it on the same or any previous day.</li><li>We can\u2019t buy a stock again after buying it once. In other words, we first buy a stock and then sell it. After selling we can buy and sell again. But we can\u2019t sell before buying and can\u2019t buy before selling any previously bought stock.</li><li>We can do at most 2 transactions.</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><img width=\"624\" height=\"339\" src=\"https://lh5.googleusercontent.com/sB8AyklVerFBUFwlhAxcNefX_t3oLxtx8ONeYmdM6_WExtgUDmKQnJIbRwwaUJZ3BaFqMwJEgfKUJJ3T_gs6ZsbiPGtDXs-oJhHYMNpZdfCIQJq0N4Y9r6N6x3sJqSnWNH9eA24QKAJB-rRa2g\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n<details class=\"article_example_details\">\n<summary class=\"article_example_summary\">\n<span><strong>\nExamples\n</strong>\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"atricle_example_content\">\n<pre class=\"wp-block-preformatted\"><!-- Insert New Examples Here -->\n<p><img width=\"624\" height=\"328\" src=\"https://lh4.googleusercontent.com/5bxjbzg4Tyh6SkOSZ-_XMGoEGdh900ihysHjta4IGWWmz1O9L9A7STNY6lF3w9qGYmqY6BYOiO2FXr3ckseN048uBj079TTXb1P9aJdx5NpbjkY76hAm0iuHclMuRmpx29RWlzQjU4rf25ermQ\"></p>\n</pre>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Practice Section-->\n<div class=\"practice\">\n<span><strong>Practice: </strong></span>\n<div class=\"problem-buttons\">\n\n<!-- Add Problem Link inside href -->\n<a href=\"https://www.codingninjas.com/studio/problems/best-time-to-buy-and-sell-stock-iii_1071012?utm_source=striver&amp;utm_medium=website&amp;utm_campaign=a_zcoursetuf\" target=\"_blank\" rel=\"noopener\">\n<span>Solve Problem</span>\n<img src=\"https://static.takeuforward.org/wp/uploads/2023/04/Group-11-5.png\" alt=\"code-studio\">\n</a>\n</div>\n</div>\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\nyourself first. </em></p>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<div class=\"horizontal_navbar_dsa_article\">\n<div class=\"grid_container_three\">\n<a href=\"#brute-force-approach\" class=\"three-boxes box-a\">\nMemoization approach\n</a>\n<a href=\"#better-approach\" class=\"three-boxes box-b\">\nTabulation approach\n</a>\n<a href=\"#optimal-approach\" class=\"three-boxes box-c\">\nSpace Optimization\n</a>\n<a href=\"#dsa_article_video_explanation\" class=\"three-boxes box-d\">\n<svg width=\"26\" height=\"26\" viewBox=\"0 0 20 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M8 10L13.19 7L8 4V10ZM19.56 2.17C19.69 2.64 19.78 3.27 19.84 4.07C19.91 4.87 19.94 5.56 19.94 6.16L20 7C20 9.19 19.84 10.8 19.56 11.83C19.31 12.73 18.73 13.31 17.83 13.56C17.36 13.69 16.5 13.78 15.18 13.84C13.88 13.91 12.69 13.94 11.59 13.94L10 14C5.81 14 3.2 13.84 2.17 13.56C1.27 13.31 0.69 12.73 0.44 11.83C0.31 11.36 0.22 10.73 0.16 9.93C0.0900001 9.13 0.0599999 8.44 0.0599999 7.84L0 7C0 4.81 0.16 3.2 0.44 2.17C0.69 1.27 1.27 0.69 2.17 0.44C2.64 0.31 3.5 0.22 4.82 0.16C6.12 0.0899998 7.31 0.0599999 8.41 0.0599999L10 0C14.19 0 16.8 0.16 17.83 0.44C18.73 0.69 19.31 1.27 19.56 2.17Z\" fill=\"red\"></path>\n</svg>\n\n</a>\n<div class=\"box-e tooltip\">\n<svg viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M12.842 9.25L11.9577 10.17C11.2502 10.89 10.8081 11.5 10.8081 13H8.84297V12.5C8.84297 11.39 9.28511 10.39 9.99255 9.67L11.2109 8.41C11.5745 8.05 11.7906 7.55 11.7906 7C11.7906 6.46957 11.5836 5.96086 11.2151 5.58579C10.8465 5.21071 10.3467 5 9.82552 5C9.30434 5 8.80451 5.21071 8.43598 5.58579C8.06745 5.96086 7.86041 6.46957 7.86041 7H5.89531C5.89531 5.93913 6.30938 4.92172 7.04644 4.17157C7.7835 3.42143 8.78316 3 9.82552 3C10.8679 3 11.8675 3.42143 12.6046 4.17157C13.3417 4.92172 13.7557 5.93913 13.7557 7C13.7543 7.84324 13.4259 8.65183 12.842 9.25ZM10.8081 17H8.84297V15H10.8081M9.82552 0C8.53521 0 7.25754 0.258658 6.06545 0.761205C4.87337 1.26375 3.79021 2.00035 2.87783 2.92893C1.03519 4.8043 0 7.34784 0 10C0 12.6522 1.03519 15.1957 2.87783 17.0711C3.79021 17.9997 4.87337 18.7362 6.06545 19.2388C7.25754 19.7413 8.53521 20 9.82552 20C12.4314 20 14.9306 18.9464 16.7732 17.0711C18.6158 15.1957 19.651 12.6522 19.651 10C19.651 4.47 15.2296 0 9.82552 0Z\" fill=\"black\"></path>\n</svg>\n<div class=\"bottom\">\n<p>Expand any one approach by clicking the given options in the bar. Clicking one approach on bar,\ncloses all other expands. You can manually expand more than one approach at a time</p>\n<i></i>\n</div>\n\n</div>\n</div>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Approaches Drop-Down -->\n<div class=\"dsa_article_dropdown_approachs \">\n\n<!-- Brute Force Approach Starts from here -->\n<div id=\"brute-force-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nMemoization Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n<p>Every day, we will have two choices, either to do nothing and move to the next day or to buy/sell (based on the last transaction and the number of transactions left) and find out the profit. Therefore we need to generate all the choices in order to compare the profit. As we need to try out all the possible choices, we will use <strong>recursion</strong>.</p>\n<p><strong>Steps to form the recursive solution:&nbsp;</strong></p>\n<p>We will first form the recursive solution by the three points mentioned in the <a href=\"https://takeuforward.org/data-structure/dynamic-programming-introduction/\" target=\"_blank\" rel=\"noreferrer noopener\">Dynamic Programming Introduction</a>.&nbsp;</p>\n<p><strong>Step 1: </strong>Express the problem in terms of indexes.</p>\n<p>We need to think in the terms of the number of days, therefore one variable will be the array index( say ind). Next, we need to respect the condition that we can\u2019t buy a stock again, that is we need to first sell a stock, and then we can buy that again. Therefore we need a second variable \u2018buy\u2019 which tells us on a particular day whether we can buy or sell the stock. Next, we have a cap on the number of transactions that we can make. Here the initial cap is 2. We need to always keep in mind this constraint. We can generalize the function as :</p>\n<p><img width=\"624\" height=\"209\" src=\"https://lh4.googleusercontent.com/tMDI7uJy0cTTTO3-aS0c-x-R-iEuFpSkq49q3iLrTm7C6O2ACXTqJaAlRdNCKIDwzakQlTKcn3h1_AIQVDXbHfImE3V52gnl0wOaXflBD-T1ntivOoCZ_BLVpVkrG4ASdDO_ZQZ7yUuMXyZdRQ\"></p>\n<p><strong>Step 2: </strong>Try out all possible choices at a given index.</p>\n<p>Every day, we have two choices:</p>\n<ul><li>To either buy/sell the stock(based on the buy variable\u2019s value and if \u2018cap\u2019 &gt; 0).&nbsp;</li><li>To do nothing and move on to the next day.</li></ul>\n<p>We need to generate all the choices. We will use the pick/non-pick technique as discussed in this video \u201c<a href=\"https://www.youtube.com/watch?v=AxNNVECce8c\" target=\"_blank\" rel=\"noreferrer noopener\">Recursion on Subsequences</a>\u201d.</p>\n<p><strong>Case 1: </strong>When buy == 0, we can buy the stock.</p>\n<p>If we can buy the stock on a particular day, we have two options:</p>\n<ul><li><strong>Option 1: </strong>To do no transaction and move to the next day. In this case, the net profit earned will be <strong>0</strong> from the current transaction, and to calculate the maximum profit starting from the next day, we will recursively call f(ind+1,0, cap). As we have not bought the stock, the \u2018buy\u2019 variable value will still remain 0, indicating that we can buy the stock the next day. And the \u2018cap\u2019 variable will remain the same as if no transaction took place.</li></ul>\n<ul><li><strong>Option 2: </strong>The other option is to buy the stock on the current day. In this case, the net profit earned from the current transaction will be <strong>-Arr[i]</strong>. As we are buying the stock, we are giving money out of our pocket, therefore the profit we earn <strong>is negative</strong>. To calculate the maximum profit starting from the next day, we will recursively call <strong>f(ind+1,1, cap)</strong>. As we have bought the stock, the \u2018buy\u2019 variable value will change to 1, indicating that we can\u2019t buy and only sell the stock the next day. As we have <strong>only</strong> bought the stock and not sold it the transaction remains incomplete and the \u2018cap\u2019 variable value remains unchanged.</li></ul>\n<p><strong>Case 2: </strong>When buy == 1, we can sell the stock.</p>\n<p>If we can buy the stock on a particular day, we have two options:</p>\n<ul><li><strong>Option 1: </strong>To do no transaction and move to the next day. In this case, the net profit earned will be <strong>0</strong> from the current transaction, and to calculate the maximum profit starting from the next day, we will recursively call <strong>f(ind+1,1, cap)</strong>. As we have not bought the stock, the \u2018buy\u2019 variable value will still remain at 1, indicating that we can\u2019t buy and only sell the stock the next day. And the \u2018cap\u2019 variable will remain the same as if no transaction took place.</li></ul>\n<ul><li><strong>Option 2: </strong>The other option is to sell the stock on the current day. In this case, the net profit earned from the current transaction will be +<strong>Arr[i]</strong>. As we are selling the stock, we are putting the money into our pocket, therefore the profit we earn <strong>is positive</strong>. To calculate the maximum profit starting from the next day, we will recursively call f(ind+1,0,cap-1). As we have sold the stock, the \u2018buy\u2019 variable value will change to 0, indicating that we can buy the stock the next day. As we have sold the earlier bought stock, we make one complete transaction, therefore now we update the \u2018cap\u2019 variable\u2019s value to cap-1.</li></ul>\n<p><strong>Note: </strong>Buying and selling a stock together counts as one complete transaction.</p>\n<p>The figure below gives us the summary:</p>\n<p><img width=\"624\" height=\"395\" src=\"https://lh5.googleusercontent.com/6fzKSBpMsH5UUEvqck-hjGZqs9LT5riizuo57ydWpbVb3Fmjk8QGFLhghvE0bQbtAPa_4HTdFLDSF1ZOOGb4qs8-cE6yN_f19uX2mvNRrgLDimrumy5V-_BY3pPfF8cHHadCulcTDouJNvomVQ\"></p>\n<p><img width=\"482\" height=\"363\" src=\"https://lh3.googleusercontent.com/w025f0Nzj7Os3b-4D6Ah0-nrnaMZPkIhBwooKEl1ZRDXm7HeGwnjswurnTkTgHss96qR6-QkkERVtJgQk7sJCYeOeeBjajwpj2O2GJCRRR9-EePeX4knAkfLR2qcrfGACstrjaF7kFJ7uzLIdQ\"></p>\n<p><strong>Step 3:&nbsp; Return the maximum&nbsp;</strong></p>\n<p>As we are looking to maximize the profit earned, we will return the maximum value in both cases.</p>\n<p><strong>Base Cases:</strong></p>\n<ul><li>If ind==n, it means we have finished trading on all days, and there is no more money that we can get, therefore we simply return 0.</li><li>If cap==0, it means that we cannot make any more transactions. Therefore we return 0.</li></ul>\n<p>The final pseudocode after steps 1, 2, and 3:</p>\n<p><img width=\"486\" height=\"391\" src=\"https://lh6.googleusercontent.com/z_mxj1bzDrIHw4Pm3h8q_LE0FNJPfkWzzM_ZoEpfb2KU-lKTn2Vz3Upz-rF9SH4W_yvAxO_rezX_F_GgV8BveBezC3i0efRo7fl20bSSybZ3XVkpucmVn8_LcYqa2sFCTA3OXEZpeWclVS3PZg\"></p>\n<p><strong>Steps to memoize a recursive solution:</strong></p>\n<p>If we draw the recursion tree, we will see that there are overlapping subproblems. In order to convert a recursive solution the following steps will be taken:</p>\n<ol><li>Create a dp array of size [n][2][3]. The size of the input array is \u2018n\u2019, so the index will always lie between \u20180\u2019 and \u2018n-1\u2019. The \u2018buy\u2019&nbsp; variable can take only two values: 0 and 1 and the \u2018cap\u2019 variable can only take three variables 0, 1, and 2. Therefore we take the dp array as dp[n][2][3].</li><li>We initialize the dp array to -1.</li><li>Whenever we want to find the answer of particular parameters (say f(ind,buy,cap)), we first check whether the answer is already calculated using the dp array(i.e dp[ind][buy][cap]!= -1 ). If yes, simply return the value from the dp array.</li><li>If not, then we are finding the answer for the given value for the first time, we will use the recursive relation as usual but before returning from the function, we will set dp[ind][buy][cap] to the solution we get.</li></ol>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint getAns(vector&lt;int&gt;&amp; Arr, int n, int ind, int buy, int cap, vector&lt;vector&lt;vector&lt;int&gt;&gt;&gt;&amp; dp) {\n    // Base case: If we reach the end of the array or run out of allowed transactions, return 0.\n    if (ind == n || cap == 0)\n        return 0;\n\n    // If the result is already calculated, return it.\n    if (dp[ind][buy][cap] != -1)\n        return dp[ind][buy][cap];\n\n    int profit;\n\n    if (buy == 0) { // We can buy the stock\n        profit = max(0 + getAns(Arr, n, ind + 1, 0, cap, dp),\n                     -Arr[ind] + getAns(Arr, n, ind + 1, 1, cap, dp));\n    }\n\n    if (buy == 1) { // We can sell the stock\n        profit = max(0 + getAns(Arr, n, ind + 1, 1, cap, dp),\n                     Arr[ind] + getAns(Arr, n, ind + 1, 0, cap - 1, dp));\n    }\n\n    // Store and return the calculated profit.\n    return dp[ind][buy][cap] = profit;\n}\n\nint maxProfit(vector&lt;int&gt;&amp; prices, int n) {\n    // Creating a 3D DP array of size [n][2][3]\n    vector&lt;vector&lt;vector&lt;int&gt;&gt;&gt; dp(n, vector&lt;vector&lt;int&gt;&gt;(2, vector&lt;int&gt;(3, -1)));\n\n    // Call the recursive function to calculate maximum profit\n    return getAns(prices, n, 0, 0, 2, dp);\n}\n\nint main() {\n    vector&lt;int&gt; prices = {3, 3, 5, 0, 0, 3, 1, 4};\n    int n = prices.size();\n\n    // Call the maxProfit function and print the result\n    cout &lt;&lt; \"The maximum profit that can be generated is \" &lt;&lt; maxProfit(prices, n);\n\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\nimport java.util.Arrays;\n\nclass StockProfit {\n    static int getAns(int[] Arr, int n, int ind, int buy, int cap, int[][][] dp) {\n        // Base case: If we have processed all stocks or have no capital left, return 0 profit\n        if (ind == n || cap == 0)\n            return 0;\n\n        // If the result for this state is already calculated, return it\n        if (dp[ind][buy][cap] != -1)\n            return dp[ind][buy][cap];\n\n        int profit;\n\n        if (buy == 0) { // We can buy the stock\n            profit = Math.max(0 + getAns(Arr, n, ind + 1, 0, cap, dp),\n                    -Arr[ind] + getAns(Arr, n, ind + 1, 1, cap, dp));\n        }\n\n        if (buy == 1) { // We can sell the stock\n            profit = Math.max(0 + getAns(Arr, n, ind + 1, 1, cap, dp),\n                    Arr[ind] + getAns(Arr, n, ind + 1, 0, cap - 1, dp));\n        }\n\n        // Store the calculated profit in the dp array and return it\n        return dp[ind][buy][cap] = profit;\n    }\n\n    static int maxProfit(int[] prices) {\n        int n = prices.length;\n\n        // Creating a 3D dp array of size [n][2][3]\n        int[][][] dp = new int[n][2][3];\n\n        // Initialize the dp array with -1\n        for (int i = 0; i &lt; n; i++) {\n            for (int j = 0; j &lt; 2; j++) {\n                Arrays.fill(dp[i][j], -1);\n            }\n        }\n\n        // Calculate and return the maximum profit\n        return getAns(prices, n, 0, 0, 2, dp);\n    }\n\n    public static void main(String[] args) {\n        int[] prices = {3, 3, 5, 0, 0, 3, 1, 4};\n        int n = prices.length;\n\n        // Calculate and print the maximum profit\n        System.out.println(\"The maximum profit that can be generated is \" + maxProfit(prices));\n    }\n}\n\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\ndef maxProfit(prices):\n    n = len(prices)\n    \n    # Create a 3D DP table with dimensions (n) x 2 x 3 and initialize it with -1 values\n    dp = [[[-1 for _ in range(3)] for _ in range(2)] for _ in range(n)]\n    \n    def getAns(ind, buy, cap):\n        # Recursive function to calculate the maximum profit\n        \n        if ind == n or cap == 0:\n            return 0  # Base case: If we have reached the end of the array or used up all transactions, return zero profit\n        \n        if dp[ind][buy][cap] != -1:\n            return dp[ind][buy][cap]  # If the result is already computed, return it\n        \n        profit = 0\n        \n        if buy == 0:\n            # We can buy the stock\n            profit = max(0 + getAns(ind + 1, 0, cap), -prices[ind] + getAns(ind + 1, 1, cap))\n        elif buy == 1:\n            # We can sell the stock\n            profit = max(0 + getAns(ind + 1, 1, cap), prices[ind] + getAns(ind + 1, 0, cap - 1))\n        \n        dp[ind][buy][cap] = profit  # Store the result in the DP table\n        return profit\n\n    return getAns(0, 0, 2)  # Start with buying (0) and 2 transactions available (cap=2)\n\ndef main():\n    prices = [3, 3, 5, 0, 0, 3, 1, 4]\n\n    max_profit = maxProfit(prices)\n    print(\"The maximum profit that can be generated is\", max_profit)\n\nif __name__ == \"__main__\":\n    main()\n\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\nfunction maxProfit(prices) {\n    const n = prices.length;\n\n    // Creating a 3D array to store dynamic programming values\n    const dp = new Array(n).fill(null).map(() =&gt;\n        new Array(2).fill(null).map(() =&gt;\n            new Array(3).fill(-1)\n        )\n    );\n\n    function getAns(ind, buy, cap) {\n        if (ind === n || cap === 0) return 0; // Base case\n\n        if (dp[ind][buy][cap] !== -1)\n            return dp[ind][buy][cap];\n\n        let profit;\n\n        if (buy === 0) { // We can buy the stock\n            profit = Math.max(\n                0 + getAns(ind + 1, 0, cap, dp),\n                -prices[ind] + getAns(ind + 1, 1, cap, dp)\n            );\n        }\n\n        if (buy === 1) { // We can sell the stock\n            profit = Math.max(\n                0 + getAns(ind + 1, 1, cap, dp),\n                prices[ind] + getAns(ind + 1, 0, cap - 1, dp)\n            );\n        }\n\n        dp[ind][buy][cap] = profit;\n        return profit;\n    }\n\n    // Call the recursive function to compute the result\n    return getAns(0, 0, 2);\n}\n\n// Main function\nfunction main() {\n    const prices = [3, 3, 5, 0, 0, 3, 1, 4];\n    const n = prices.length;\n\n    // Calculate the maximum profit\n    const maxProfitValue = maxProfit(prices);\n\n    console.log(\"The maximum profit that can be generated is\", maxProfitValue);\n}\n\n// Call the main function to start the program\nmain();\n</code>\n</pre>\n</div>\n\n<p>\n<!-- Insert Output of Brute Force Here -->\nThe maximum profit that can be generated is 6\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n<!-- Insert Time and Space Complexity of Brute Force Here -->\n</p><p><strong>Time Complexity: O(N*2*3)&nbsp;</strong></p>\n<p>Reason: There are N*2*3 states therefore at max \u2018N*2*3\u2019 new problems will be solved.</p>\n<p><strong>Space Complexity: O(N*2*3) + O(N)</strong></p>\n<p>Reason: We are using a recursion stack space(O(N)) and a 3D array ( O(N*2*3)).</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Brute Force Approach Ends here -->\n\n\n<!-- Better Approach Starts from here -->\n\n<div id=\"better-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nTabulation Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition For Better Approach Here -->\n<p>To convert the memoization approach to a tabulation one, create a dp array with the size [N+1][2][3].</p>\n<p><strong>Handling the base case:</strong></p>\n<p>Now, what the base condition in the recursive relation is:</p>\n<p><strong>if( ind == n || cap == 0) return 0</strong></p>\n<p>We handle this in the following way:</p>\n<ul><li><strong>ind == n</strong></li></ul>\n<p>When ind == n, the other two variables: cap and buy can take any value, therefore we can set the following two loops and set dp[n][buy][cap] = 0</p>\n<p><img width=\"326\" height=\"300\" src=\"https://lh3.googleusercontent.com/rcqninQjeFKsXrBSSEQ3QVUN2U_ihNCrNnn0A9sFjZbPVLgujBlgTmIDhYBdac0_BwQ41uBuCsZRritWTL-VnUQZQV0U2mo6DZJqODD-cYK0fyDybs1ciX7j9m9CCygNDSA2Hp86BEHGB7C4zg\"></p>\n<ul><li><strong>cap == 0</strong></li></ul>\n<p>When cap == 0, the other two variables: ind and cap can take any value, therefore we can set the following two loops and set dp[ind][buy][0] = 0.</p>\n<p><img width=\"326\" height=\"300\" src=\"https://lh4.googleusercontent.com/g4KIV824Ofaj21ZQgz4B2GTwCFCmPTx5kVC8A0ao5DgTcG-A9nnJ1vILDXK9r3Df46Tw2wEi7YP_BZBgtokTCF7V_E6Tp9nZIjXUfwJfb9QBHHk-ZG2cHTuvSNiljedkr7WpThzo0crjsJscaA\"></p>\n<p>Another hack is to initialize the entire 3D DP Array as 0. In this case, we need not worry about explicitly setting the base cases.</p>\n<ul><li>First, we declare the dp array of size [n+1][2][3] as zero.</li><li>As we have initialized the array as 0, we have automatically set the base condition as explained above.</li><li>Now, traverse the array in the opposite direction of that of the memoization technique. We will start from ind = n-1 -&gt; ind =0.</li><li>In every iteration copy the recursive code logic.</li><li>At last dp[0][0][2] ( maximum profit generated on i<sup>th</sup> day, when we can buy the stock on 0th day and can have a total 2 transactions) gives us the final answer.</li></ul>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint maxProfit(vector&lt;int&gt;&amp; Arr, int n) {\n    // Creating a 3D DP array of size [n+1][2][3] initialized to 0\n    vector&lt;vector&lt;vector&lt;int&gt;&gt;&gt; dp(n + 1, vector&lt;vector&lt;int&gt;&gt;(2, vector&lt;int&gt;(3, 0)));\n\n    // Base case: dp array is already initialized to 0, covering the base case.\n\n    for (int ind = n - 1; ind &gt;= 0; ind--) {\n        for (int buy = 0; buy &lt;= 1; buy++) {\n            for (int cap = 1; cap &lt;= 2; cap++) {\n                if (buy == 0) { // We can buy the stock\n                    dp[ind][buy][cap] = max(0 + dp[ind + 1][0][cap],\n                                           -Arr[ind] + dp[ind + 1][1][cap]);\n                }\n\n                if (buy == 1) { // We can sell the stock\n                    dp[ind][buy][cap] = max(0 + dp[ind + 1][1][cap],\n                                           Arr[ind] + dp[ind + 1][0][cap - 1]);\n                }\n            }\n        }\n    }\n\n    // The result is stored in dp[0][0][2] which represents maximum profit after the final transaction.\n    return dp[0][0][2];\n}\n\nint main() {\n    vector&lt;int&gt; prices = {3, 3, 5, 0, 0, 3, 1, 4};\n    int n = prices.size();\n\n    // Call the maxProfit function and print the result\n    cout &lt;&lt; \"The maximum profit that can be generated is \" &lt;&lt; maxProfit(prices, n);\n\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\nimport java.util.Arrays;\n\nclass StockProfit {\n    static int maxProfit(int[] prices) {\n        int n = prices.length;\n\n        // Creating a 3D dp array of size [n+1][2][3] initialized to 0\n        int[][][] dp = new int[n + 1][2][3];\n\n        // Loop through the dp array, starting from the second last stock (ind=n-1)\n        for (int ind = n - 1; ind &gt;= 0; ind--) {\n            for (int buy = 0; buy &lt;= 1; buy++) {\n                for (int cap = 1; cap &lt;= 2; cap++) {\n\n                    if (buy == 0) { // We can buy the stock\n                        dp[ind][buy][cap] = Math.max(0 + dp[ind + 1][0][cap],\n                                -prices[ind] + dp[ind + 1][1][cap]);\n                    }\n\n                    if (buy == 1) { // We can sell the stock\n                        dp[ind][buy][cap] = Math.max(0 + dp[ind + 1][1][cap],\n                                prices[ind] + dp[ind + 1][0][cap - 1]);\n                    }\n                }\n            }\n        }\n\n        // The maximum profit with 2 transactions is stored in dp[0][0][2]\n        return dp[0][0][2];\n    }\n\n    public static void main(String[] args) {\n        int[] prices = {3, 3, 5, 0, 0, 3, 1, 4};\n        int n = prices.length;\n\n        // Calculate and print the maximum profit\n        System.out.println(\"The maximum profit that can be generated is \" + maxProfit(prices));\n    }\n}\n\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\ndef maxProfit(prices):\n    n = len(prices)\n    \n    # Create a 3D DP table with dimensions (n+1) x 2 x 3 and initialize it to 0 values\n    dp = [[[0 for _ in range(3)] for _ in range(2)] for _ in range(n + 1)]\n    \n    # The base case is already covered as the DP array is initialized to 0\n    \n    for ind in range(n - 1, -1, -1):\n        for buy in range(2):\n            for cap in range(1, 3):\n                \n                if buy == 0:\n                    # We can buy the stock\n                    dp[ind][buy][cap] = max(0 + dp[ind + 1][0][cap], -prices[ind] + dp[ind + 1][1][cap])\n                elif buy == 1:\n                    # We can sell the stock\n                    dp[ind][buy][cap] = max(0 + dp[ind + 1][1][cap], prices[ind] + dp[ind + 1][0][cap - 1])\n    \n    return dp[0][0][2]\n\ndef main():\n    prices = [3, 3, 5, 0, 0, 3, 1, 4]\n\n    max_profit = maxProfit(prices)\n    print(\"The maximum profit that can be generated is\", max_profit)\n\nif __name__ == \"__main__\":\n    main()\n\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\nfunction maxProfit(prices) {\n    const n = prices.length;\n\n    // Creating a 3D array to store dynamic programming values\n    const dp = new Array(n + 1).fill(null).map(() =&gt;\n        new Array(2).fill(null).map(() =&gt;\n            new Array(3).fill(0)\n        )\n    );\n\n    // Loop through the array to calculate the maximum profit\n    for (let ind = n - 1; ind &gt;= 0; ind--) {\n        for (let buy = 0; buy &lt;= 1; buy++) {\n            for (let cap = 1; cap &lt;= 2; cap++) {\n\n                if (buy === 0) { // We can buy the stock\n                    dp[ind][buy][cap] = Math.max(\n                        0 + dp[ind + 1][0][cap],\n                        -prices[ind] + dp[ind + 1][1][cap]\n                    );\n                }\n\n                if (buy === 1) { // We can sell the stock\n                    dp[ind][buy][cap] = Math.max(\n                        0 + dp[ind + 1][1][cap],\n                        prices[ind] + dp[ind + 1][0][cap - 1]\n                    );\n                }\n            }\n        }\n    }\n\n    return dp[0][0][2];\n}\n\n// Main function\nfunction main() {\n    const prices = [3, 3, 5, 0, 0, 3, 1, 4];\n    const n = prices.length;\n\n    // Calculate the maximum profit\n    const maxProfitValue = maxProfit(prices);\n\n    console.log(\"The maximum profit that can be generated is\", maxProfitValue);\n}\n\n// Call the main function to start the program\nmain();\n\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Better Approach Here -->\nThe maximum profit that can be generated is 6\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Better Approach Here -->\n</p><p><strong>Time Complexity: O(N*2*3)&nbsp;</strong></p>\n<p>Reason: There are three nested loops that account for O(N*2*3) complexity.</p>\n<p><strong>Space Complexity: O(N*2*3)</strong></p>\n<p>Reason: We are using an external array of size \u2018N*2*3\u2019. Stack Space is eliminated.</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Better Approach Ends from here -->\n\n\n<!-- Optimal Approach Starts from here -->\n\n<div id=\"optimal-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nSpace Optimization Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm of Optimal Approach Here -->\n<p>If we closely look at the relation,</p>\n<pre class=\"wp-block-preformatted\"><strong>dp[ind][buy][cap] = max( dp[ind+1][buy][cap] , max( dp[ind+1][!buy][cap])</strong></pre>\n<p>We see that to calculate a value of a cell of the dp array, we need only the next row values(say ahead of ind+1). So, we don\u2019t need to store an entire 2-D array. Hence we can space optimize it.</p>\n<p><img width=\"406\" height=\"366\" src=\"https://lh3.googleusercontent.com/RzG7sW8V5fCBepQRFyRy2RU7ErEJiqYlB60-3CWc-8-ye6ol3fx4gxEAazOhyAzHvr7Lc45jeb6u-PT2J1EXuHsYINCyhg8goyXWj5URwA37FinD_FUBRC350QXDdviqPrvYnLV6609o1STcfA\"></p>\n<ul><li>We set a 2D vector ahead initialized to 0 (base condition) and another 2D</li><li>Then we set three nested loops to calculate the cur array\u2019s values.</li><li>We replace dp[ind] with cur and dp[ind+1] with ahead in our tabulation code.</li><li>After the inner loop execution, we set ahead as cur for the next outer loop iteration.</li><li>At last, we return ahead[0][2] as our answer.</li></ul>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint maxProfit(vector&lt;int&gt;&amp; Arr, int n) {\n    // Create two 2D arrays to store the profit information, one for the current state and one for the ahead state.\n    vector&lt;vector&lt;int&gt;&gt; ahead(2, vector&lt;int&gt;(3, 0));\n    vector&lt;vector&lt;int&gt;&gt; cur(2, vector&lt;int&gt;(3, 0));\n\n    for (int ind = n - 1; ind &gt;= 0; ind--) {\n        for (int buy = 0; buy &lt;= 1; buy++) {\n            for (int cap = 1; cap &lt;= 2; cap++) {\n                if (buy == 0) { // We can buy the stock\n                    cur[buy][cap] = max(0 + ahead[0][cap], \n                                        -Arr[ind] + ahead[1][cap]);\n                }\n\n                if (buy == 1) { // We can sell the stock\n                    cur[buy][cap] = max(0 + ahead[1][cap],\n                                        Arr[ind] + ahead[0][cap - 1]);\n                }\n            }\n        }\n        // Update the ahead state with the current state for the next iteration.\n        ahead = cur;\n    }\n\n    return ahead[0][2];\n}\n\nint main() {\n    vector&lt;int&gt; prices = {3, 3, 5, 0, 0, 3, 1, 4};\n    int n = prices.size();\n\n    // Call the maxProfit function and print the result\n    cout &lt;&lt; \"The maximum profit that can be generated is \" &lt;&lt; maxProfit(prices, n);\n\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\nimport java.util.Arrays;\n\nclass StockProfit {\n    static int maxProfit(int[] prices) {\n        int n = prices.length;\n\n        // Create a 2D array 'ahead' and 'cur' to store profit values\n        int[][] ahead = new int[2][3];\n        int[][] cur = new int[2][3];\n\n        // Loop through the prices array, starting from the second last stock (ind=n-1)\n        for (int ind = n - 1; ind &gt;= 0; ind--) {\n            for (int buy = 0; buy &lt;= 1; buy++) {\n                for (int cap = 1; cap &lt;= 2; cap++) {\n\n                    if (buy == 0) { // We can buy the stock\n                        cur[buy][cap] = Math.max(0 + ahead[0][cap],\n                                -prices[ind] + ahead[1][cap]);\n                    }\n\n                    if (buy == 1) { // We can sell the stock\n                        cur[buy][cap] = Math.max(0 + ahead[1][cap],\n                                prices[ind] + ahead[0][cap - 1]);\n                    }\n                }\n            }\n\n            // Update 'ahead' with the values in 'cur'\n            for (int i = 0; i &lt; 2; i++) {\n                for (int j = 1; j &lt; 3; j++) {\n                    ahead[i][j] = cur[i][j];\n                }\n            }\n        }\n\n        // The maximum profit with 2 transactions is stored in ahead[0][2]\n        return ahead[0][2];\n    }\n\n    public static void main(String[] args) {\n        int[] prices = {3, 3, 5, 0, 0, 3, 1, 4};\n        int n = prices.length;\n\n        // Calculate and print the maximum profit\n        System.out.println(\"The maximum profit that can be generated is \" + maxProfit(prices));\n    }\n}\n\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\ndef maxProfit(prices):\n    n = len(prices)\n    \n    # Create two 2D arrays, ahead and cur, both of size 2x3, initialized to 0 values\n    ahead = [[0 for _ in range(3)] for _ in range(2)]\n    cur = [[0 for _ in range(3)] for _ in range(2)]\n    \n    for ind in range(n - 1, -1, -1):\n        for buy in range(2):\n            for cap in range(1, 3):\n                \n                if buy == 0:\n                    # We can buy the stock\n                    cur[buy][cap] = max(0 + ahead[0][cap], -prices[ind] + ahead[1][cap])\n                elif buy == 1:\n                    # We can sell the stock\n                    cur[buy][cap] = max(0 + ahead[1][cap], prices[ind] + ahead[0][cap - 1])\n        \n        ahead = cur  # Update ahead with the current values\n    \n    return ahead[0][2]\n\ndef main():\n    prices = [3, 3, 5, 0, 0, 3, 1, 4]\n\n    max_profit = maxProfit(prices)\n    print(\"The maximum profit that can be generated is\", max_profit)\n\nif __name__ == \"__main__\":\n    main()\n\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\nfunction maxProfit(prices) {\n    const n = prices.length;\n\n    // Create two arrays 'ahead' and 'cur' to store dynamic programming values\n    const ahead = new Array(2).fill(null).map(() =&gt;\n        new Array(3).fill(0)\n    );\n\n    const cur = new Array(2).fill(null).map(() =&gt;\n        new Array(3).fill(0)\n    );\n\n    // Loop through the array to calculate the maximum profit\n    for (let ind = n - 1; ind &gt;= 0; ind--) {\n        for (let buy = 0; buy &lt;= 1; buy++) {\n            for (let cap = 1; cap &lt;= 2; cap++) {\n\n                if (buy === 0) { // We can buy the stock\n                    cur[buy][cap] = Math.max(\n                        0 + ahead[0][cap],\n                        -prices[ind] + ahead[1][cap]\n                    );\n                }\n\n                if (buy === 1) { // We can sell the stock\n                    cur[buy][cap] = Math.max(\n                        0 + ahead[1][cap],\n                        prices[ind] + ahead[0][cap - 1]\n                    );\n                }\n            }\n        }\n        ahead[0] = [...cur[0]]; // Update 'ahead' with the values from 'cur'\n        ahead[1] = [...cur[1]]; // Update 'ahead' with the values from 'cur'\n    }\n\n    return ahead[0][2];\n}\n\n// Main function\nfunction main() {\n    const prices = [3, 3, 5, 0, 0, 3, 1, 4];\n    const n = prices.length;\n\n    // Calculate the maximum profit\n    const maxProfitValue = maxProfit(prices);\n\n    console.log(\"The maximum profit that can be generated is\", maxProfitValue);\n}\n\n// Call the main function to start the program\nmain();\n\n</code>\n</pre>\n<p>\n<!-- Insert Output of Optimal Apporach Here -->\nThe maximum profit that can be generated is 6\n</p>\n</div>\n</div></details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Optimal Approach-->\n</p><p><strong>Time Complexity: O(N*2*3)</strong></p>\n<p>Reason: There are three nested loops that account for O(N*2*3) complexity</p>\n<p><strong>Space Complexity: O(1)</strong></p>\n<p>Reason: We are using two external arrays of size \u20182*3\u2019.</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Optimal Approach Starts from here -->\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n<details>\n<summary class=\"main-summary\">\n<span>\nVideo Explanation\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"yt-video-wrapper\">\n\n<!-- Insert iframe embed Link of Youtube Video-->\n<iframe class=\"lazy-loaded\" loading=\"lazy\" title=\"Buy and Sell Stocks III\" width=\"810\" height=\"456\" data-lazy-type=\"iframe\" data-src=\"https://www.youtube.com/embed/-uQGzhYj8BQ?si=V0bNRkhc6aZSnsZa\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\" src=\"https://www.youtube.com/embed/-uQGzhYj8BQ?feature=oembed\"></iframe><noscript>\n<iframe loading=\"lazy\" title=\"Buy and Sell Stocks III\" width=\"810\" height=\"456\" src=\"https://www.youtube.com/embed/-uQGzhYj8BQ?si=V0bNRkhc6aZSnsZa\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe></noscript>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script>\n\nconst codeSections = document.querySelectorAll('.code-section');\n\n// Get last selected language from localStorage or set default value\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\n// Update last selected language for all sections and store in localStorage\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\n// Handle copy button click event\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\n// Set initial state of the tabs\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<script>\nconst codeSections = document.querySelectorAll('.code-section');\n\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script src=\"https://takeuforward.org/UXApproachDropDowns/3ApproachJSScript.js\"></script>\n<!-- /wp:html -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;<strong><a href=\"https://www.linkedin.com/in/anshuman-sharma-a1b245194/\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>Anshuman Sharma</strong></a></strong>&nbsp;for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a>.&nbsp;<em>If you want to suggest any improvement/correction in this article please mail us at&nbsp;write4tuf@gmail.com</em></p></blockquote>\n<!-- /wp:quote -->"
}