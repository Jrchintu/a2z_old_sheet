{
    "dislikes": 2,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:11:53 GMT+0530 (India Standard Time)",
    "slug": "partition-array-for-maximum-sum-front-partition-dp-54",
    "aid": "2186",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/",
    "title": "Partition Array for Maximum Sum | Front Partition : DP 54",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "dynamic-programming",
            "topic-title": "Dynamic Programming"
        },
        {
            "topic-id": "recursion",
            "topic-title": "Recursion"
        }
    ],
    "category_tag": "data-structure",
    "likes": 29,
    "preview": "Problem Statement: Given an integer array arr, partition the array into (contiguous) subarrays of length at most k. After partitioning, each subarray has its values changed to become the maximum va...",
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement:</strong> Given an integer array arr, partition the array into (contiguous) subarrays of length at most k. After partitioning, each subarray has its values changed to become the maximum value of that subarray.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Return the largest sum of the given array after partitioning.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n<details class=\"article_example_details\">\n<summary class=\"article_example_summary\">\n<span><strong>\nExamples\n</strong>\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"atricle_example_content\">\n<pre class=\"wp-block-preformatted\"><!-- Insert New Examples Here -->\n<pre class=\"wp-block-preformatted\"><strong>Example 1:</strong>\n<strong>Input:</strong> arr = [1,15,7,9,2,5,10], k = 3\n<strong>Output</strong>: 84\n<strong>Explanation:</strong> The partition will be the following to get the largest sum:\n [1, 15, 7 | 9 | 2, 5, 10]. \nAfter replacing the elements of each subarray with its maximum, the array will look like this:[15,15,15,9,10,10,10] and the sum will be 84.</pre>\n<pre class=\"wp-block-preformatted\"><strong>Example 2:</strong>\n<strong>Input</strong>: arr[] = [1], k = 1\n<strong>Output</strong>: 1\n<strong>Explanation</strong>: only one partition is possible \nlike this: [1] and the sum will be 1.</pre>\n</pre>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Practice Section-->\n<div class=\"practice\">\n<span><strong>Practice: </strong></span>\n<div class=\"problem-buttons\">\n\n<!-- Add Problem Link inside href -->\n<a href=\"https://www.codingninjas.com/studio/problems/partition-array-for-maximum-sum_3755255?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf\" target=\"_blank\" rel=\"noopener\">\n<span>Solve Problem</span>\n<img src=\"https://static.takeuforward.org/wp/uploads/2023/04/Group-11-5.png\" alt=\"code-studio\">\n</a>\n</div>\n</div>\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\nyourself first. </em></p>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<div class=\"horizontal_navbar_dsa_article\">\n<div class=\"grid_container_three\">\n<a href=\"#brute-force-approach\" class=\"three-boxes box-a\">\nRecursive approach\n</a>\n<a href=\"#better-approach\" class=\"three-boxes box-b\">\nMemoization approach\n</a>\n<a href=\"#optimal-approach\" class=\"three-boxes box-c\">\nTabulation Approach\n</a>\n<a href=\"#dsa_article_video_explanation\" class=\"three-boxes box-d\">\n<svg width=\"26\" height=\"26\" viewBox=\"0 0 20 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M8 10L13.19 7L8 4V10ZM19.56 2.17C19.69 2.64 19.78 3.27 19.84 4.07C19.91 4.87 19.94 5.56 19.94 6.16L20 7C20 9.19 19.84 10.8 19.56 11.83C19.31 12.73 18.73 13.31 17.83 13.56C17.36 13.69 16.5 13.78 15.18 13.84C13.88 13.91 12.69 13.94 11.59 13.94L10 14C5.81 14 3.2 13.84 2.17 13.56C1.27 13.31 0.69 12.73 0.44 11.83C0.31 11.36 0.22 10.73 0.16 9.93C0.0900001 9.13 0.0599999 8.44 0.0599999 7.84L0 7C0 4.81 0.16 3.2 0.44 2.17C0.69 1.27 1.27 0.69 2.17 0.44C2.64 0.31 3.5 0.22 4.82 0.16C6.12 0.0899998 7.31 0.0599999 8.41 0.0599999L10 0C14.19 0 16.8 0.16 17.83 0.44C18.73 0.69 19.31 1.27 19.56 2.17Z\" fill=\"red\"></path>\n</svg>\n\n</a>\n<div class=\"box-e tooltip\">\n<svg viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M12.842 9.25L11.9577 10.17C11.2502 10.89 10.8081 11.5 10.8081 13H8.84297V12.5C8.84297 11.39 9.28511 10.39 9.99255 9.67L11.2109 8.41C11.5745 8.05 11.7906 7.55 11.7906 7C11.7906 6.46957 11.5836 5.96086 11.2151 5.58579C10.8465 5.21071 10.3467 5 9.82552 5C9.30434 5 8.80451 5.21071 8.43598 5.58579C8.06745 5.96086 7.86041 6.46957 7.86041 7H5.89531C5.89531 5.93913 6.30938 4.92172 7.04644 4.17157C7.7835 3.42143 8.78316 3 9.82552 3C10.8679 3 11.8675 3.42143 12.6046 4.17157C13.3417 4.92172 13.7557 5.93913 13.7557 7C13.7543 7.84324 13.4259 8.65183 12.842 9.25ZM10.8081 17H8.84297V15H10.8081M9.82552 0C8.53521 0 7.25754 0.258658 6.06545 0.761205C4.87337 1.26375 3.79021 2.00035 2.87783 2.92893C1.03519 4.8043 0 7.34784 0 10C0 12.6522 1.03519 15.1957 2.87783 17.0711C3.79021 17.9997 4.87337 18.7362 6.06545 19.2388C7.25754 19.7413 8.53521 20 9.82552 20C12.4314 20 14.9306 18.9464 16.7732 17.0711C18.6158 15.1957 19.651 12.6522 19.651 10C19.651 4.47 15.2296 0 9.82552 0Z\" fill=\"black\"></path>\n</svg>\n<div class=\"bottom\">\n<p>Expand any one approach by clicking the given options in the bar. Clicking one approach on bar,\ncloses all other expands. You can manually expand more than one approach at a time</p>\n<i></i>\n</div>\n\n</div>\n</div>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Approaches Drop-Down -->\n<div class=\"dsa_article_dropdown_approachs \">\n\n<!-- Brute Force Approach Starts from here -->\n<div id=\"brute-force-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nRecursive Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n<p>In order to solve this problem, we need to partition the given array in such a way that the length of every substring does not exceed k. For example, if the array, [1,15,7,9,2,5,10], is given and the value of k is 3, one of the valid partitions will be [<strong>1,15,</strong> | <strong>7,9,2,</strong> | <strong>5,10</strong>].&nbsp; In this case, the length of each substring is smaller or equal to k.<br>Now, after making such partitions following the above way, we need to change the elements of each substring with its maximum element. Then we will calculate the sum of the whole array. If we apply this to the above array, it will be like&nbsp; [<strong>15,15,</strong> | <strong>9,9,9,</strong> | <strong>10,10</strong>] and the sum will be 77.</p>\n<p>Here, in the question, it is clearly mentioned that we have to do the partition in such a way that the sum of the array becomes the maximum possible.</p>\n<h3><strong>Intuition:</strong></h3>\n<p>This problem is similar to the problem <a href=\"https://www.youtube.com/watch?v=_H8V5hJUGd0&amp;list=PLgUwDviBIf0qUlt5H_kiKYaNSqJ81PMMY&amp;index=54\" target=\"_blank\" rel=\"noopener\" title=\"\">Palindrome Partitioning - II</a>. We are also going to solve this problem using the <strong><em>front partition</em></strong>. In the front partition technique, we generally start checking from the starting index and check if we can make a partition after that particular index.</p>\n<p>We have found the right approach so far. Now, let us quickly discuss the <strong><em>rules to write the recurrence</em></strong> to solve this problem:</p>\n<ol><li>Express everything(i.e. the given array) in terms of the index.</li><li>Try all partitions.</li><li>Return the best possible answer of all partitions (i.e. the answers that come after dividing the problem into subproblems and solving them recursively).<br>Derive the base case as well.</li></ol>\n<p>To explain the rules, we are considering example 1 i.e. arr = [1,15,7,9,2,5,10] and k = 3.</p>\n<h5><strong>Express everything(i.e. the given array) in terms of the index:</strong></h5>\n<p>We are given an array and so it is easy to express the array in terms of the index. Now, following the front partition rules we will place the pointer ind to index 0 i.e. the first index. The function will look like the following:</p>\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/01/Screenshot-2023-01-10-203910.png\" alt=\"\" class=\"wp-image-7253\"></figure>\n<p><strong>Try all partitions:</strong></p>\n<p>f(ind) actually considers the subarray starting from index ind up to the end index and returns the maximum possible sum by making partitions in that particular subarray. For example, if the given array is [1,15,7,9,2,5,10], f(2) considers the subarray [7,9,2,5,10](<em>following 0-based indexing</em>).<br>As we have figured out the logic for marking the pointer, ind, we will move to the partitioning loop. <strong><em>We can simply write a for loop(say j) starting from ind to ind+k-1(k = given subarray size) as it is clearly mentioned that the length of a partition can be at most k</em></strong>.&nbsp; The problem is being broken in the following manner(<em>considering the specified example</em>):</p>\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/01/Screenshot-2023-01-10-204022.png\" alt=\"\" class=\"wp-image-7254\"></figure>\n<p><strong>Note: </strong><em>It may happen that the limit </em>ind+k-1<em> exceeds the length of the array. That is why we will take the limit of </em>j<em> as </em>min(n, ind+k-1)<em> where </em>n = size of the array<em>. This will avoid the runtime error.</em><br><strong>Base case: </strong>When the value of ind becomes equal to n(n = size of the array), we can say there are no elements left to be considered. So, <strong>when (ind == n) the function will return 0</strong>.</p>\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/01/Screenshot-2023-01-10-204118.png\" alt=\"\" class=\"wp-image-7255\"></figure>\n<p><strong>Return the best possible answer of all partitions:</strong></p>\n<p><strong>Observation: </strong><strong><em>How to calculate the answer</em></strong></p>\n<p>It is clearly stated in the question that after making a partition, we have to replace all the elements of the subarray with the maximum element of that subarray. So, we will follow the same.Inside the partitioning loop, after making a partition at j, all the elements of the subarray arr[ind\u2026.j] will turn into the maximum element of that subarray i.e. maximum(arr[ind\u2026.j]). Therefore, the sum of the subarray will be (<strong>maximum element * length of the subarray</strong>). Consider the illustration below:</p>\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/01/Screenshot-2023-01-10-204221.png\" alt=\"\" class=\"wp-image-7256\"></figure>\n<p>So, the answer will be the summation of the sum of the left subarray and the answer returned by the subproblem starting from index j+1 i.e. Sum =&nbsp; (maximum element * length of the subarray) + f(j+1).</p>\n<p>Now, calculating all possible sums, we will consider the maximum one.</p>\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/01/Screenshot-2023-01-10-204310.png\" alt=\"\" class=\"wp-image-7257\"></figure>\n<p><strong>Note</strong>: <em>If you wish to see the dry run of the above approach, you can watch the video attached to this article.</em></p>\n<h3><strong>Approach</strong>:&nbsp;</h3>\n<p><strong>The recursive algorithm steps are as follows:</strong></p>\n<ol><li>Convert the problem to a recursive function marked by the pointer ind.</li><li>Use a loop to check all possible partitions of the array and calculate the maximum sum we can achieve.</li><li>Return the maximum possible sum.</li></ol>\n<p><strong>Base case: </strong>When the value of ind becomes equal to n(n = size of the array), we can say there are no elements left to be considered. So, <strong>when (ind == n) the function will return 0</strong>.</p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\n// Recursive function to find the maximum sum after partitioning.\nint maxSumAfterPartitioning(vector&lt;int&gt;&amp; num, int k) {\n    int n = num.size();\n\n    // Base case: If the current index is equal to the size of the array, return 0.\n    if (ind == n) return 0;\n\n    int len = 0;\n    int maxi = INT_MIN;\n    int maxAns = INT_MIN;\n\n    // Loop through the array starting from the current index.\n    for (int j = ind; j &lt; min(ind + k, n); j++) {\n        len++;\n        maxi = max(maxi, num[j]);\n        int sum = len * maxi + maxSumAfterPartitioning(j + 1, num, k);\n        maxAns = max(maxAns, sum);\n    }\n    return maxAns;\n}\n\nint main() {\n    vector&lt;int&gt; num = {1, 15, 7, 9, 2, 5, 10};\n    int k = 3;\n    int maxSum = maxSumAfterPartitioning(num, k);\n    cout &lt;&lt; \"The maximum sum is: \" &lt;&lt; maxSum &lt;&lt; \"\\n\";\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\npublic class MaxSumAfterPartitioning {\n    static int f(int ind, int[] num, int k) {\n        int n = num.length;\n        // Base case:\n        if (ind == n) return 0;\n\n        int len = 0;\n        int maxi = Integer.MIN_VALUE;\n        int maxAns = Integer.MIN_VALUE;\n        \n        // Iterate through the next 'k' elements or remaining elements if less than 'k'.\n        for (int j = ind; j &lt; Math.min(ind + k, n); j++) {\n            len++;\n            maxi = Math.max(maxi, num[j]);\n            int sum = len * maxi + f(j + 1, num, k);\n            maxAns = Math.max(maxAns, sum);\n        }\n        return maxAns;\n    }\n\n    static int maxSumAfterPartitioning(int[] num, int k) {\n        return f(0, num, k);\n    }\n\n    public static void main(String[] args) {\n        int[] num = {1, 15, 7, 9, 2, 5, 10};\n        int k = 3;\n        int maxSum = maxSumAfterPartitioning(num, k);\n        System.out.println(\"The maximum sum is: \" + maxSum);\n    }\n}\n\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\ndef max_sum_after_partitioning(num, k):\n    n = len(num)\n    dp = [0] * (n + 1)\n\n    for i in range(1, n + 1):\n        max_val = 0\n        for j in range(1, min(i, k) + 1):\n            max_val = max(max_val, num[i - j])\n            dp[i] = max(dp[i], dp[i - j] + max_val * j)\n\n    return dp[n]\n\nif __name__ == \"__main__\":\n    num = [1, 15, 7, 9, 2, 5, 10]\n    k = 3\n    max_sum = max_sum_after_partitioning(num, k)\n    print(\"The maximum sum is:\", max_sum)\n\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n// Function to find the maximum sum after partitioning an array\nfunction maxSumAfterPartitioning(num, k) {\n    const n = num.length;\n\n    // Function f to recursively calculate the maximum sum\n    function f(ind) {\n        // Base case: If ind reaches the end of the array, return 0\n        if (ind === n) return 0;\n\n        let len = 0;\n        let maxi = -Infinity;\n        let maxAns = -Infinity;\n\n        // Loop through the array from index 'ind' up to 'ind + k' or 'n', whichever is smaller\n        for (let j = ind; j &lt; Math.min(ind + k, n); j++) {\n            len++;\n            maxi = Math.max(maxi, num[j]);\n\n            // Calculate the sum for the current partition and recursive call\n            const sum = len * maxi + f(j + 1);\n            maxAns = Math.max(maxAns, sum);\n        }\n\n        return maxAns;\n    }\n\n    // Call the recursive function with initial index 0\n    return f(0);\n}\n\n// Main function\nfunction main() {\n    const num = [1, 15, 7, 9, 2, 5, 10];\n    const k = 3;\n    const maxSum = maxSumAfterPartitioning(num, k);\n    console.log(\"The maximum sum is:\", maxSum);\n}\n\n// Call the main function\nmain();\n</code>\n</pre>\n</div>\n\n<p>\n<!-- Insert Output of Brute Force Here -->\nThe maximum sum is: 84 (For example 1)\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n<!-- Insert Time and Space Complexity of Brute Force Here -->\n</p><p><strong>Time Complexity: Exponential</strong></p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Brute Force Approach Ends here -->\n\n\n<!-- Better Approach Starts from here -->\n\n<div id=\"better-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nMemoization Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition For Better Approach Here -->\n<p><strong>Steps to memoize the recursive solution:</strong></p>\n<ol><li>Create a 1D dp array of size [n]. ind can range from 0 to n-1. So we take the size n.</li><li>We initialize the dp array to -1.</li><li>Whenever we want to find the answer to a particular parameter (say f(ind)), we first check whether the answer is already calculated using the dp array(i.e dp[ind] != -1 ). If yes, simply return the value from the dp array.</li><li>If not, then we are finding the answer for the given value for the first time, we will use the recursive relation as usual but before returning from the function, we will set dp[ind] to the solution we get.</li></ol>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\n// Recursive function to find the maximum sum after partitioning.\nint f(int ind, vector&lt;int&gt; &amp;num, int k, vector&lt;int&gt; &amp;dp) {\n    int n = num.size();\n\n    // Base case: If the current index is equal to the size of the array, return 0.\n    if (ind == n) return 0;\n\n    // If the result for this index is already computed, return it from dp array.\n    if (dp[ind] != -1) return dp[ind];\n\n    int len = 0;\n    int maxi = INT_MIN;\n    int maxAns = INT_MIN;\n\n    // Loop through the array starting from the current index.\n    for (int j = ind; j &lt; min(ind + k, n); j++) {\n        len++;\n        maxi = max(maxi, num[j]);\n        int sum = len * maxi + f(j + 1, num, k, dp);\n        maxAns = max(maxAns, sum);\n    }\n\n    // Store the computed result in the dp array and return it.\n    return dp[ind] = maxAns;\n}\n\nint maxSumAfterPartitioning(vector&lt;int&gt;&amp; num, int k) {\n    int n = num.size();\n    vector&lt;int&gt; dp(n, -1);\n    return f(0, num, k, dp);\n}\n\nint main() {\n    vector&lt;int&gt; num = {1, 15, 7, 9, 2, 5, 10};\n    int k = 3;\n    int maxSum = maxSumAfterPartitioning(num, k);\n    cout &lt;&lt; \"The maximum sum is: \" &lt;&lt; maxSum &lt;&lt; \"\\n\";\n    return 0;\n}\n\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\npublic class MaxSumAfterPartitioning {\n    static int f(int ind, int[] num, int k, int[] dp) {\n        int n = num.length;\n        // Base case:\n        if (ind == n) return 0;\n\n        if (dp[ind] != -1) return dp[ind];\n        int len = 0;\n        int maxi = Integer.MIN_VALUE;\n        int maxAns = Integer.MIN_VALUE;\n        \n        // Iterate through the next 'k' elements or remaining elements if less than 'k'.\n        for (int j = ind; j &lt; Math.min(ind + k, n); j++) {\n            len++;\n            maxi = Math.max(maxi, num[j]);\n            int sum = len * maxi + f(j + 1, num, k, dp);\n            maxAns = Math.max(maxAns, sum);\n        }\n        return dp[ind] = maxAns;\n    }\n\n    static int maxSumAfterPartitioning(int[] num, int k) {\n        int n = num.length;\n        int[] dp = new int[n];\n        Arrays.fill(dp, -1);\n        return f(0, num, k, dp);\n    }\n\n    public static void main(String[] args) {\n        int[] num = {1, 15, 7, 9, 2, 5, 10};\n        int k = 3;\n        int maxSum = maxSumAfterPartitioning(num, k);\n        System.out.println(\"The maximum sum is: \" + maxSum);\n    }\n}\n\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\ndef max_sum_after_partitioning(num, k):\n    n = len(num)\n    dp = [-1] * n\n\n    def f(ind):\n        # Base case:\n        if ind == n:\n            return 0\n\n        if dp[ind] != -1:\n            return dp[ind]\n\n        len_val = 0\n        max_val = float('-inf')\n        max_ans = float('-inf')\n\n        for j in range(ind, min(ind + k, n)):\n            len_val += 1\n            max_val = max(max_val, num[j])\n            summation = len_val * max_val + f(j + 1)\n            max_ans = max(max_ans, summation)\n\n        dp[ind] = max_ans\n        return dp[ind]\n\n    return f(0)\n\nif __name__ == \"__main__\":\n    num = [1, 15, 7, 9, 2, 5, 10]\n    k = 3\n    max_sum = max_sum_after_partitioning(num, k)\n    print(\"The maximum sum is:\", max_sum)\n\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\n// Function to find the maximum sum after partitioning an array\nfunction maxSumAfterPartitioning(num, k) {\n    const n = num.length;\n\n    // Create a memoization table dp to store calculated values\n    const dp = new Array(n).fill(-1);\n\n    // Function f to recursively calculate the maximum sum\n    function f(ind) {\n        // Base case: If ind reaches the end of the array, return 0\n        if (ind === n) return 0;\n\n        // Check if the result for this index is already computed\n        if (dp[ind] !== -1) return dp[ind];\n\n        let len = 0;\n        let maxi = -Infinity;\n        let maxAns = -Infinity;\n\n        // Loop through the array from index 'ind' up to 'ind + k' or 'n', whichever is smaller\n        for (let j = ind; j &lt; Math.min(ind + k, n); j++) {\n            len++;\n            maxi = Math.max(maxi, num[j]);\n\n            // Calculate the sum for the current partition and recursive call\n            const sum = len * maxi + f(j + 1);\n            maxAns = Math.max(maxAns, sum);\n        }\n\n        // Store the result in the memoization table\n        dp[ind] = maxAns;\n        return maxAns;\n    }\n\n    // Call the recursive function with initial index 0\n    return f(0);\n}\n\n// Main function\nfunction main() {\n    const num = [1, 15, 7, 9, 2, 5, 10];\n    const k = 3;\n    const maxSum = maxSumAfterPartitioning(num, k);\n    console.log(\"The maximum sum is:\", maxSum);\n}\n\n// Call the main function\nmain();\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Better Approach Here -->\nThe maximum sum is: 84 (For example 1)\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Better Approach Here -->\n</p><p><strong>Time Complexity: </strong>O(N*k)<br><strong>Reason: </strong>There are a total of N states and for each state, we are running a loop from 0 to k.</p>\n<p><strong>Space Complexity: </strong>O(N) + Auxiliary stack space O(N)<br><strong>Reason: </strong>First O(N) for the dp array we are using.</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Better Approach Ends from here -->\n\n\n<!-- Optimal Approach Starts from here -->\n\n<div id=\"optimal-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nTabulation Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm of Optimal Approach Here -->\n<p><strong>Tabulation:</strong></p>\n<ol><li>First of all, we handle the base case. If (ind == n) we return 0. To cover this case we can initialize the entire dp array with 0.<br><strong><em>Here, as we are checking </em></strong><strong>dp[j+1] </strong><strong><em>&nbsp;every time, the function will give a runtime error if </em></strong><strong>j = n-1</strong><strong><em>. To avoid this, we will take the array size as </em></strong><strong>n+1</strong><strong><em> instead of </em></strong><strong>n</strong><strong><em>.</em></strong></li><li>Next, memoization is a top-down approach, whereas tabulation is bottom-up. Our changing parameter ind will change in opposite directions, i.e ind will change from n-1\u21920.</li><li>Next, we copy down the recursive logic(recurrence) inside the loop.</li></ol>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\n// Function to find the maximum sum after partitioning the array.\nint maxSumAfterPartitioning(vector&lt;int&gt;&amp; num, int k) {\n    int n = num.size();\n    \n    // Create a DP array to store the maximum sum.\n    vector&lt;int&gt; dp(n + 1, 0);\n    \n    // Iterate through the array from right to left.\n    for (int ind = n - 1; ind &gt;= 0; ind--) {\n        int len = 0;\n        int maxi = INT_MIN;\n        int maxAns = INT_MIN;\n        \n        // Loop through the next k elements (or remaining elements if k is smaller).\n        for (int j = ind; j &lt; min(ind + k, n); j++) {\n            len++;\n            maxi = max(maxi, num[j]);\n            int sum = len * maxi + dp[j + 1];\n            maxAns = max(maxAns, sum);\n        }\n        \n        // Store the computed maximum sum in the DP array.\n        dp[ind] = maxAns;\n    }\n    \n    // The maximum sum after partitioning the entire array is stored in dp[0].\n    return dp[0];\n}\n\nint main() {\n    vector&lt;int&gt; num = {1, 15, 7, 9, 2, 5, 10};\n    int k = 3;\n    int maxSum = maxSumAfterPartitioning(num, k);\n    cout &lt;&lt; \"The maximum sum is: \" &lt;&lt; maxSum &lt;&lt; \"\\n\";\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\npublic class MaxSumAfterPartitioning {\n    static int maxSumAfterPartitioning(int[] num, int k) {\n        int n = num.length;\n        int[] dp = new int[n + 1];\n        \n        // Traverse the input array from right to left\n        for (int ind = n - 1; ind &gt;= 0; ind--) {\n            int len = 0;\n            int maxi = Integer.MIN_VALUE;\n            int maxAns = Integer.MIN_VALUE;\n            \n            // Iterate through the next 'k' elements or remaining elements if less than 'k'.\n            for (int j = ind; j &lt; Math.min(ind + k, n); j++) {\n                len++;\n                maxi = Math.max(maxi, num[j]);\n                int sum = len * maxi + dp[j + 1];\n                maxAns = Math.max(maxAns, sum);\n            }\n            dp[ind] = maxAns;\n        }\n        return dp[0];\n    }\n\n    public static void main(String[] args) {\n        int[] num = {1, 15, 7, 9, 2, 5, 10};\n        int k = 3;\n        int maxSum = maxSumAfterPartitioning(num, k);\n        System.out.println(\"The maximum sum is: \" + maxSum);\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\ndef max_sum_after_partitioning(num, k):\n    n = len(num)\n    dp = [0] * (n + 1)\n\n    for ind in range(n - 1, -1, -1):\n        len_val = 0\n        max_val = float('-inf')\n        max_ans = float('-inf')\n\n        for j in range(ind, min(ind + k, n)):\n            len_val += 1\n            max_val = max(max_val, num[j])\n            summation = len_val * max_val + dp[j + 1]\n            max_ans = max(max_ans, summation)\n\n        dp[ind] = max_ans\n\n    return dp[0]\n\nif __name__ == \"__main__\":\n    num = [1, 15, 7, 9, 2, 5, 10]\n    k = 3\n    max_sum = max_sum_after_partitioning(num, k)\n    print(\"The maximum sum is:\", max_sum)\n\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\n/// Function to find the maximum sum after partitioning an array\nfunction maxSumAfterPartitioning(num, k) {\n    const n = num.length;\n\n    // Create an array dp to store the maximum sum for each index\n    const dp = new Array(n + 1).fill(0);\n\n    // Loop through the array from the end to the beginning\n    for (let ind = n - 1; ind &gt;= 0; ind--) {\n        let len = 0;\n        let maxi = -Infinity;\n        let maxAns = -Infinity;\n\n        // Loop through elements from 'ind' to 'ind + k' or 'n', whichever is smaller\n        for (let j = ind; j &lt; Math.min(ind + k, n); j++) {\n            len++;\n            maxi = Math.max(maxi, num[j]);\n\n            // Calculate the sum for the current partition and add it to the value in dp for the next index\n            const sum = len * maxi + dp[j + 1];\n            maxAns = Math.max(maxAns, sum);\n        }\n\n        // Store the maximum sum in dp for the current index\n        dp[ind] = maxAns;\n    }\n\n    // The result is stored in dp[0]\n    return dp[0];\n}\n\n// Main function\nfunction main() {\n    const num = [1, 15, 7, 9, 2, 5, 10];\n    const k = 3;\n    const maxSum = maxSumAfterPartitioning(num, k);\n    console.log(\"The maximum sum is:\", maxSum);\n}\n\n// Call the main function\nmain();\n\n</code>\n</pre>\n<p>\n<!-- Insert Output of Optimal Apporach Here -->\nThe maximum sum is: 84 (For example 1)\n</p>\n</div>\n</div></details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Optimal Approach-->\n</p><p><strong>Time Complexity: </strong>O(N*k)<br><strong>Reason: </strong>There are a total of N states and for each state, we are running a loop from 0 to k.</p>\n<p><strong>Space Complexity: </strong>O(N)<br><strong>Reason: </strong>O(N) for the dp array we are using.</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Optimal Approach Starts from here -->\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n<details>\n<summary class=\"main-summary\">\n<span>\nVideo Explanation\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"yt-video-wrapper\">\n\n<!-- Insert iframe embed Link of Youtube Video-->\n<iframe class=\"lazy-loaded\" loading=\"lazy\" title=\"Partition Array for Maximum Sum \" width=\"810\" height=\"456\" data-lazy-type=\"iframe\" data-src=\"https://www.youtube.com/embed/PhWWJmaKfMc?si=XdWTFP1ryj8Tq_8F\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\" src=\"https://www.youtube.com/embed/PhWWJmaKfMc?feature=oembed\"></iframe><noscript>\n<iframe loading=\"lazy\" title=\"Partition Array for Maximum Sum \" width=\"810\" height=\"456\" src=\"https://www.youtube.com/embed/PhWWJmaKfMc?si=XdWTFP1ryj8Tq_8F\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe></noscript>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script>\n\nconst codeSections = document.querySelectorAll('.code-section');\n\n// Get last selected language from localStorage or set default value\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\n// Update last selected language for all sections and store in localStorage\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\n// Handle copy button click event\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\n// Set initial state of the tabs\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<script>\nconst codeSections = document.querySelectorAll('.code-section');\n\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script src=\"https://takeuforward.org/UXApproachDropDowns/3ApproachJSScript.js\"></script>\n<!-- /wp:html -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;<strong><a href=\"https://www.linkedin.com/in/kriti39/\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>KRITIDIPTA GHOSH</strong></a></strong>&nbsp;for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a>.&nbsp;<em>If you want to suggest any improvement/correction in this article please mail us at&nbsp;write4tuf@gmail.com</em></p></blockquote>\n<!-- /wp:quote -->"
}