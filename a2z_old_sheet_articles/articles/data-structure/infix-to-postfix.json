{
    "dislikes": 10,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:10:23 GMT+0530 (India Standard Time)",
    "slug": "infix-to-postfix",
    "aid": "1761",
    "tuf_plus": "",
    "title": "Infix to Postfix",
    "topics": [
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "stack",
            "topic-title": "Stack"
        }
    ],
    "category_tag": "data-structure",
    "likes": 172,
    "preview": "Problem Statement: Given an infix expression, Your task is to convert the given infix expression to a postfix expression. Examples: Example 1: Input: a+b*(c^d-e)^(f+g*h)-i Output: abcd^e-fgh*+^*+i-...",
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement:</strong> Given an infix expression, Your task is to convert the given infix expression to a postfix expression.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Examples:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\"><strong>Example 1:</strong>\n<strong>Input:</strong> a+b*(c^d-e)^(f+g*h)-i\n<strong>Output</strong>: abcd^e-fgh*+^*+i-\n<strong>Explanation:</strong> Infix to postfix\n\n<strong>Example 2:</strong>\n<strong>Input:</strong> (p+q)*(m-n)\n<strong>Output</strong>: pq+mn-*\n<strong>Explanation:</strong> Infix to postfix\n</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Solution</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"textColor\":\"accent\"} -->\n<p class=\"has-accent-color has-text-color\"><strong><em>Disclaimer</em></strong>: <em>Don't jump directly to the solution, try it out yourself first.</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>What is infix expression?</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><li>The traditional method of writing mathematical expressions is called infix expressions.</li><li>It is of the form <strong>&lt;operand&gt;&lt;operator&gt;&lt;operand&gt;</strong>.</li><li>As the name suggests, here the operator is fixed inside between the operands. e.g. A+B here the plus operator is placed inside between the two operators, <strong>(A*B)/Q.</strong></li><li>Such expressions are easy to understand and evaluate for human beings. However, the computer finds it difficult to parse - Information is needed about operator precedence and associativity rules, and brackets that override these rules.</li><li>Hence we have postfix and prefix notations which make the computer take less effort to solve the problem.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>What is postfix expression?</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><li>The postfix expression as the name suggests has the operator placed right after the two operands.</li><li>It is of the form <strong>&lt;operand&gt;&lt;operand&gt;&lt;operator&gt;</strong></li><li>In the infix expressions, it is difficult to keep track of the operator precedence whereas here the postfix expression itself determines the precedence of operators (which is done by the placement of operators)i.e the operator which occurs first operates on the operand.</li><li>E.g.<strong> PQ-C/</strong>, here \u2013 operation is done on P and Q and then / is applied on C and the previous result.</li><li>A postfix expression is a parenthesis-free expression. For evaluation, we evaluate it from left to right.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><img width=\"602\" height=\"257\" src=\"https://lh3.googleusercontent.com/fih_k8YXtqbiwR3Zk-RRUVoQcoVE7a5KPGmAS8lr4fVqz6Vc0sE_hZ3iOcL7y2dQCt_AwZ5ZyouhBOdSLydvt5QAZKRL3NAMfwB11-QTI3P1fr5kGmObHrdNd3nBmCyxwO8869BU\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Approach</strong>: To convert Infix expression to Postfix</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>1. Scan the infix expression from <strong>left to right</strong>.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>2. If the scanned character is an operand, Print it.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>3. Else,&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>If the <a href=\"https://en.wikipedia.org/wiki/Order_of_operations\">precedence</a> of the scanned operator is greater than the precedence of the operator in the stack or the stack is <strong>empty</strong> or the stack contains a<strong> \u2018(\u2018</strong>, push the character into the stack.&nbsp;</li><li>Else, Pop all the operators from the stack which are greater than or equal to in precedence than that of the scanned operator. After doing that Push the scanned operator to the stack.&nbsp;</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>4. If the scanned character is an<strong> \u2018(\u2018</strong>, push it into the stack.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>5. If the scanned character is an <strong>\u2018)\u2019</strong>, pop the stack and output it until a \u2018(\u2018 is encountered, and discard both the parenthesis.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>6. Repeat steps 2-5 until the entire infix expression is scanned.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>7. Print the output.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>8. Pop and print the output from the stack until it is not empty.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    \n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include&lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\n//Function to return precedence of operators\nint prec(char c) {\n  if (c == '^')\n    return 3;\n  else if (c == '/' || c == '*')\n    return 2;\n  else if (c == '+' || c == '-')\n    return 1;\n  else\n    return -1;\n}\n\n// The main function to convert infix expression\n//to postfix expression\nvoid infixToPostfix(string s) {\n\n  stack &lt; char &gt; st; //For stack operations, we are using C++ built in stack\n  string result;\n\n  for (int i = 0; i &lt; s.length(); i++) {\n    char c = s[i];\n\n    // If the scanned character is\n    // an operand, add it to output string.\n    if ((c &gt;= 'a' &amp;&amp; c &lt;= 'z') || (c &gt;= 'A' &amp;&amp; c &lt;= 'Z') || (c &gt;= '0' &amp;&amp; c &lt;= '9'))\n      result += c;\n\n    // If the scanned character is an\n    // \u2018(\u2018, push it to the stack.\n    else if (c == '(')\n      st.push('(');\n\n    // If the scanned character is an \u2018)\u2019,\n    // pop and to output string from the stack\n    // until an \u2018(\u2018 is encountered.\n    else if (c == ')') {\n      while (st.top() != '(') {\n        result += st.top();\n        st.pop();\n      }\n      st.pop();\n    }\n\n    //If an operator is scanned\n    else {\n      while (!st.empty() &amp;&amp; prec(s[i]) &lt;= prec(st.top())) {\n        result += st.top();\n        st.pop();\n      }\n      st.push(c);\n    }\n  }\n\n  // Pop all the remaining elements from the stack\n  while (!st.empty()) {\n    result += st.top();\n    st.pop();\n  }\n\n  cout &lt;&lt; \"Prefix expression: \" &lt;&lt; result &lt;&lt; endl;\n}\n\nint main() {\n  string exp = \"(p+q)*(m-n)\";\n  cout &lt;&lt; \"Infix expression: \" &lt;&lt; exp &lt;&lt; endl;\n  infixToPostfix(exp);\n  return 0;\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Infix expression: (p+q)*<em>(m-n) </em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Prefix expression: pq+mn-</em>*</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(N)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity:</strong> <strong>O(N) </strong>for using the stack</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.Stack;\n\nclass TUF {\n\n  // A utility function to return\n  // precedence of a given operator\n  // Higher returned value means\n  // higher precedence\n  static int Prec(char ch) {\n    switch (ch) {\n    case '+':\n    case '-':\n      return 1;\n\n    case '*':\n    case '/':\n      return 2;\n\n    case '^':\n      return 3;\n    }\n    return -1;\n  }\n\n  // The main method that converts\n  // given infix expression\n  // to postfix expression.\n  static String infixToPostfix(String exp) {\n    // initializing empty String for result\n    String result = new String(\"\");\n\n    // initializing empty stack\n    Stack &lt; Character &gt; stack = new Stack &lt; &gt; ();\n\n    for (int i = 0; i &lt; exp.length(); ++i) {\n      char c = exp.charAt(i);\n\n      // If the scanned character is an\n      // operand, add it to output.\n      if (Character.isLetterOrDigit(c))\n        result += c;\n\n      // If the scanned character is an '(',\n      // push it to the stack.\n      else if (c == '(')\n        stack.push(c);\n\n      // If the scanned character is an ')',\n      // pop and output from the stack\n      // until an '(' is encountered.\n      else if (c == ')') {\n        while (!stack.isEmpty() &amp;&amp;\n          stack.peek() != '(')\n          result += stack.pop();\n\n        stack.pop();\n      } else // an operator is encountered\n      {\n        while (!stack.isEmpty() &amp;&amp; Prec(c) &lt;=\n          Prec(stack.peek())) {\n\n          result += stack.pop();\n        }\n        stack.push(c);\n      }\n\n    }\n\n    // pop all the operators from the stack\n    while (!stack.isEmpty()) {\n      if (stack.peek() == '(')\n        return \"Invalid Expression\";\n      result += stack.pop();\n    }\n    return result;\n  }\n\n  // Driver method\n  public static void main(String[] args) {\n    String exp = \"(p+q)*(m-n)\";\n    System.out.println(\"Infix expression: \" + exp);\n    System.out.println(\"Prefix expression: \" + infixToPostfix(exp));\n  }\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Infix expression: (p+q)*<em>(m-n) </em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Prefix expression: pq+mn-</em>*</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(N)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity:</strong> <strong>O(N) </strong>for using the stack</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;<strong><a href=\"https://www.linkedin.com/in/abhishek-yadav-11a116212/\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>Abhishek Yadav</strong></a></strong>&nbsp;for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->"
}