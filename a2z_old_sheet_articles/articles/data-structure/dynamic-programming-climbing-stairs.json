{
    "dislikes": 6,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:09:48 GMT+0530 (India Standard Time)",
    "slug": "dynamic-programming-climbing-stairs",
    "aid": "1590",
    "title": "Dynamic Programming : Climbing Stairs",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/climbing-stairs",
    "topics": [
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "dynamic-programming",
            "topic-title": "Dynamic Programming"
        },
        {
            "topic-id": "recursion",
            "topic-title": "Recursion"
        }
    ],
    "content": "<!-- wp:heading -->\n<h2><strong>How to write 1-D Recurrence relation / Climbing Stairs</strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In this article, we will learn to write 1-D Recurrence relations using the problem \u201cClimbing Stairs\u201d</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Problem Statement:</strong> Given a number of stairs. Starting from the 0th stair we need to climb to the \u201cNth\u201d stair. At a time we can climb either one or two steps. We need to return the total number of distinct ways to reach from 0th to Nth stair.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https://lh4.googleusercontent.com/mverBR5G4oT3nPNVB1pMJge__AatbCggvGWlBftwz_6ZhJ2a_Q6-g1kYZRv6VAEkUpnwSZ1yeVl6mt22r5I_mGLl6KLNJU3bQIS_gZm8I3yG2vVz8GBDaNWhSoY89ZTLtVEuXrok\" alt=\"\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>Pre-req: Recursion, </strong><a href=\"https://takeuforward.org/data-structure/dynamic-programming-introduction/\"><strong>Dynamic Programming Introduction</strong></a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Solution :</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>How to Identify a DP problem?</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When we see a problem, it is very important to identify it as a dynamic programming problem. Generally (but not limited to) if the problem statement asks for the following:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>Count the total number of ways</li><li>Given multiple ways of doing a task, which way will give the minimum or the maximum output.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>We can try to apply recursion. Once we get the recursive solution, we can go ahead to convert it to a dynamic programming one.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Steps To Solve The Problem After Identification</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Once the problem has been identified, the following three steps comes handy in solving the problem:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>Try to represent the problem in terms of indexes.</li><li>Try all possible choices/ways at every index according to the problem statement.</li><li>If the question states<ul><li>Count all the ways - return sum of all choices/ways.</li><li>Find maximum/minimum- return the choice/way with maximum/minimum output.</li></ul></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Using these steps to solve the problem \u201cClimbing Stairs\u201d</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Step 1: </strong>We will assume n stairs as indexes from 0 to N.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"width\":323,\"height\":383} -->\n<figure class=\"wp-block-image is-resized\"><img src=\"https://lh6.googleusercontent.com/ju1xIL-YjYOi-UL2DjoIjjwKcvHkgZ78Lfi_FyjaYT6Sk6M4LdWVLaM1oPdGyftJOa3LfCcs4-Ec_CRy6eQ7TNqgssrvq5o6nZcofvaLKqxNdWIZwM-Wa89JqcPDTH6w8TC8SH1j\" alt=\"\" width=\"323\" height=\"383\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>Step 2: </strong>At a single time, we have 2 choices: Jump one step or jump two steps. We will try both of these options at every index.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"width\":258,\"height\":288} -->\n<figure class=\"wp-block-image is-resized\"><img src=\"https://lh4.googleusercontent.com/qYp5CdHJ0Wqq_Bct5RhB5oKKXUBOdnoe-Ya6fjh3vqVIQbzsnrSLE7QjlMkm2IDhHuIjNKlLfhVavT4AJkRWoaREJSvcCQZ_Tx0rtYmuiJXFaz9Wg3m-OXcycwsfSQnBjWsskSep\" alt=\"\" width=\"258\" height=\"288\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>Step 3: </strong>As the problem statement asks to count the total number of distinct ways, we will return the sum of all the choices in our recursive function.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The base case will be when we want to go to the 0th stair, then we have only one option.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The basic pseudo-code for the problem will be given as:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"width\":311,\"height\":263} -->\n<figure class=\"wp-block-image is-resized\"><img src=\"https://lh5.googleusercontent.com/LJaJ8_On9wDHckmB-blNmIDpm89qrKiJlQGiV40IO8EHg4xNc51YGdTb63A_-ndFDEDKFpXYv9rCxl4CyTakTekRdB91JUzX_USNl8SEFaL3x0mea0IBe_UMrRMMrKagDd1qQJnD\" alt=\"\" width=\"311\" height=\"263\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>There will be one more edge-case when n=1, if we call f(n-2) we will reach stair numbered -1 which is not defined, therefore we add an extra test case to return 1 ( the only way) when n=1.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"width\":311,\"height\":263} -->\n<figure class=\"wp-block-image is-resized\"><img src=\"https://lh5.googleusercontent.com/BHi-BvNqgckfvqxxNWYa0KFIP2IXZhTLONJDM1AzTjB7HkHvu_q97rAastK-Ge32Rv0U5Xa4DV9YsPAz1MJM7LkA_6j6kdjoUxNE3hTgpfPCe5_sNyO0rpdZqCFRVLDaIpevrlT2\" alt=\"\" width=\"311\" height=\"263\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>If we clearly observe the pseudo-code, we see that it almost matches the problem \u201c<strong>fibonacci numbers</strong>\u201d discussed in <a href=\"https://takeuforward.org/data-structure/dynamic-programming-introduction/\">Dynamic Programming Introduction</a> ! So the readers can follow that article to understand the approach used for the dynamic programming solution after the recursive solution.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Steps for the Tabulation approach.</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>Declare a dp[] array of size n+1.</li><li>First initialize the base condition values, i.e i=0 and i=1 of the dp array as 1.</li><li>Set an iterative loop that traverses the array( from index 2 to n) and for every index set its value as dp[i-1] + dp[i-2].\u00a0</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    \n    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre title=\"C++ Code\" class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\n\nint main() {\n\n  int n=3;\n  vector&lt;int&gt; dp(n+1,-1);\n  \n  dp[0]= 1;\n  dp[1]= 1;\n  \n  for(int i=2; i&lt;=n; i++){\n      dp[i] = dp[i-1]+ dp[i-2];\n  }\n  cout&lt;&lt;dp[n];\n  return 0;\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(N)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reason: We are running a simple iterative loop</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(N)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reason: We are using an external array of size \u2018n+1\u2019.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block\" data-lang=\"python\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">def main():\n    n = 3\n    dp = [-1] * (n + 1)\n    dp[0] = 1\n    dp[1] = 1\n\n    for i in range(2, n+1):\n      dp[i] = dp[i-1] + dp[i-2]\n    print(dp[n])\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(N)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reason: We are running a simple iterative loop</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(N)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reason: We are using an external array of size \u2018n+1\u2019.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Part 3: Space Optimization</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If we closely look the relation,</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>dp[i] =&nbsp; dp[i-1] + dp[i-2]</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>we see that for any i, we do need only the last two values in the array. So is there a need to maintain a whole array for it?&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The answer is \u2018No\u2019. Let us call dp[i-1] as prev and dp[i-2] as prev2. Now understand the following illustration.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"width\":665,\"height\":402} -->\n<figure class=\"wp-block-image is-resized\"><img src=\"https://lh3.googleusercontent.com/Y6ufS2mB8y2FsiCMTOxs9qzhawXzfV-lBkz8tIZKbZYDqaIrc8JjfvAF0rGiY76iLwssFJDlU7jkTXgTAxU7kTDnu9kPdztSp7IhGqSxeqXIsTn7inRn93he4leRVxsbkSW2KZac\" alt=\"\" width=\"665\" height=\"402\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:list -->\n<ul><li>Each iteration\u2019s cur_i and prev becomes the next iteration\u2019s prev and prev2 respectively.</li><li>Therefore after calculating cur_i, if we update prev and prev2 according to the next step, we will always get the answer.&nbsp;</li><li>After the iterative loop has ended we can simply return prev as our answer.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    \n    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre title=\"C++ Code\" class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\n\nint main() {\n\n  int n=3;\n  \n  int prev2 = 1;\n  int prev = 1;\n  \n  for(int i=2; i&lt;=n; i++){\n      int cur_i = prev2+ prev;\n      prev2 = prev;\n      prev= cur_i;\n  }\n  cout&lt;&lt;prev;\n  return 0;\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(N)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reason: We are running a simple iterative loop</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(1)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reason: We are not using any extra space.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block\" data-lang=\"python\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">def main():\n    n = 3\n    prev2 = 1\n    prev = 1\n\n    for i in range(2, n+1):\n        cur_i = prev2 + prev\n        prev2 = prev\n        prev = cur_i\n\n    print(prev)\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(N)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reason: We are running a simple iterative loop</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(1)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reason: We are not using any extra space.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to\u00a0<strong><a href=\"https://www.linkedin.com/in/anshuman-sharma-a1b245194/\" target=\"_blank\" rel=\"noreferrer noopener\">Anshuman Sharma</a></strong>\u00a0 <em>and\u00a0<a href=\"https://www.linkedin.com/in/abhipsita-das-5b7069212/?originalSubdomain=in\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>Abhipsita Das</strong></a></em></em> <em>for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,\u00a0</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->",
    "category_tag": "data-structure",
    "likes": 281,
    "preview": "HOW TO WRITE 1-D RECURRENCE RELATION / CLIMBING STAIRS In this article, we will learn to write 1-D Recurrence relations using the problem \u201cClimbing Stairs\u201d Problem Statement: Given a number of stai..."
}