{
    "dislikes": 5,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:10:14 GMT+0530 (India Standard Time)",
    "slug": "coin-change-2-dp-22",
    "aid": "1717",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/coin-change-ii",
    "title": "Coin Change 2 (DP - 22)",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "dynamic-programming",
            "topic-title": "Dynamic Programming"
        },
        {
            "topic-id": "recursion",
            "topic-title": "Recursion"
        }
    ],
    "category_tag": "data-structure",
    "likes": 54,
    "preview": "Problem Link: Ways to Make a Coin Change We are given an array Arr with N distinct coins and a target. We have an infinite supply of each coin denomination. We need to find the number of ways we su...",
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Link: </strong><a href=\"https://www.codingninjas.com/codestudio/problems/ways-to-make-coin-change_630471?source=youtube&amp;campaign=striver_dp_videos&amp;utm_source=youtube&amp;utm_medium=affiliate&amp;utm_campaign=striver_dp_videos\"><strong>Ways to Make a Coin Change</strong></a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We are given an array Arr with N distinct coins and a target. We have an infinite supply of each coin denomination. We need to find the number of ways we sum up the coin values to give us the target.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Each coin can be used any number of times.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n<details class=\"article_example_details\">\n<summary class=\"article_example_summary\">\n<span><strong>\nExamples\n</strong>\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"atricle_example_content\">\n<pre class=\"wp-block-preformatted\"><!-- Insert New Examples Here -->\n<pre class=\"wp-block-preformatted\"><strong>Example:</strong>\n\n<img width=\"624\" height=\"265\" src=\"https://lh5.googleusercontent.com/iyZgys0bQ2_EjJUUXEjjtYn3y4ZKThe_MYqLQ0E9YKL93xHDV0KzsK1zaq1mrB7CzmTSuUtZA75JsaRBnDq-K4RigX31GOd6B3Tr9-Ts_yuf_OyELBFM3ZdR3ulCEXMSbHFC9nr9\"></pre>\n</pre>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Practice Section-->\n<div class=\"practice\">\n<span><strong>Practice: </strong></span>\n<div class=\"problem-buttons\">\n\n<!-- Add Problem Link inside href -->\n<a href=\"https://www.codingninjas.com/studio/problems/ways-to-make-coin-change_630471?utm_source=striver&amp;utm_medium=website&amp;utm_campaign=a_zcoursetuf\" target=\"_blank\" rel=\"noopener\">\n<span>Solve Problem</span>\n<img src=\"https://static.takeuforward.org/wp/uploads/2023/04/Group-11-5.png\" alt=\"code-studio\">\n</a>\n</div>\n</div>\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\nyourself first. </em></p>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<div class=\"horizontal_navbar_dsa_article\">\n<div class=\"grid_container_three\">\n<a href=\"#brute-force-approach\" class=\"three-boxes box-a\">\nMemorization approach\n</a>\n<a href=\"#better-approach\" class=\"three-boxes box-b\">\nTabulation approach\n</a>\n<a href=\"#optimal-approach\" class=\"three-boxes box-c\">\nSpace Optimization\n</a>\n<a href=\"#dsa_article_video_explanation\" class=\"three-boxes box-d\">\n<svg width=\"26\" height=\"26\" viewBox=\"0 0 20 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M8 10L13.19 7L8 4V10ZM19.56 2.17C19.69 2.64 19.78 3.27 19.84 4.07C19.91 4.87 19.94 5.56 19.94 6.16L20 7C20 9.19 19.84 10.8 19.56 11.83C19.31 12.73 18.73 13.31 17.83 13.56C17.36 13.69 16.5 13.78 15.18 13.84C13.88 13.91 12.69 13.94 11.59 13.94L10 14C5.81 14 3.2 13.84 2.17 13.56C1.27 13.31 0.69 12.73 0.44 11.83C0.31 11.36 0.22 10.73 0.16 9.93C0.0900001 9.13 0.0599999 8.44 0.0599999 7.84L0 7C0 4.81 0.16 3.2 0.44 2.17C0.69 1.27 1.27 0.69 2.17 0.44C2.64 0.31 3.5 0.22 4.82 0.16C6.12 0.0899998 7.31 0.0599999 8.41 0.0599999L10 0C14.19 0 16.8 0.16 17.83 0.44C18.73 0.69 19.31 1.27 19.56 2.17Z\" fill=\"red\"></path>\n</svg>\n\n</a>\n<div class=\"box-e tooltip\">\n<svg viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M12.842 9.25L11.9577 10.17C11.2502 10.89 10.8081 11.5 10.8081 13H8.84297V12.5C8.84297 11.39 9.28511 10.39 9.99255 9.67L11.2109 8.41C11.5745 8.05 11.7906 7.55 11.7906 7C11.7906 6.46957 11.5836 5.96086 11.2151 5.58579C10.8465 5.21071 10.3467 5 9.82552 5C9.30434 5 8.80451 5.21071 8.43598 5.58579C8.06745 5.96086 7.86041 6.46957 7.86041 7H5.89531C5.89531 5.93913 6.30938 4.92172 7.04644 4.17157C7.7835 3.42143 8.78316 3 9.82552 3C10.8679 3 11.8675 3.42143 12.6046 4.17157C13.3417 4.92172 13.7557 5.93913 13.7557 7C13.7543 7.84324 13.4259 8.65183 12.842 9.25ZM10.8081 17H8.84297V15H10.8081M9.82552 0C8.53521 0 7.25754 0.258658 6.06545 0.761205C4.87337 1.26375 3.79021 2.00035 2.87783 2.92893C1.03519 4.8043 0 7.34784 0 10C0 12.6522 1.03519 15.1957 2.87783 17.0711C3.79021 17.9997 4.87337 18.7362 6.06545 19.2388C7.25754 19.7413 8.53521 20 9.82552 20C12.4314 20 14.9306 18.9464 16.7732 17.0711C18.6158 15.1957 19.651 12.6522 19.651 10C19.651 4.47 15.2296 0 9.82552 0Z\" fill=\"black\"></path>\n</svg>\n<div class=\"bottom\">\n<p>Expand any one approach by clicking the given options in the bar. Clicking one approach on bar,\ncloses all other expands. You can manually expand more than one approach at a time</p>\n<i></i>\n</div>\n\n</div>\n</div>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Approaches Drop-Down -->\n<div class=\"dsa_article_dropdown_approachs \">\n\n<!-- Brute Force Approach Starts from here -->\n<div id=\"brute-force-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nMemorization Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n<p>We will first form the recursive solution by the three points mentioned in <a href=\"https://takeuforward.org/data-structure/dynamic-programming-introduction/\">Dynamic Programming Introduction</a>.&nbsp;</p>\n<p><strong>Step 1: </strong>Express the problem in terms of indexes.</p>\n<p>We are given \u2018n\u2019 coins. Their denomination value is given by the array \u2018arr\u2019.So clearly one parameter will be \u2018ind\u2019, i.e index up to which the array items are being considered.</p>\n<p>There is one more parameter, the given target value \u201cT\u201d which we want to achieve so that while generating subsequences, we can decide whether we want to include a particular coin or not.&nbsp;</p>\n<p>So, we can say that initially, we need to find f(n-1, T) where T is the initial target given to us in the question. f(n-1, T) means we are finding the total number of ways to form the target T by considering coins from index 0 to index n-1 of the arr array.</p>\n<p><img width=\"624\" height=\"113\" src=\"https://lh4.googleusercontent.com/9QAvghu-Q3xb8lc3mmWi1PI0g4oEyx0JfPvjYV_z9_ZXXYFdwB_pAtLR_Fo6zGkREmfthaZhgGKt-jyGumn_spwvpeyR7l0TpJN-vG0oyg0M-GJNLxoHzxENXSJZ4cVrXZqyu1l2\"></p>\n<p><strong>Base Cases:</strong></p>\n<p>If ind==0, it means we are at the first item so we have only one coin denomination, therefore the following two cases can arise:</p>\n<ul><li><strong>T is divisible by arr[0]&nbsp; (eg: arr[0] = 4</strong> and <strong>T = 12)</strong></li></ul>\n<p>In such a case where the target is divisible by the coin element value, we will return 1 as we will be able to form the target.</p>\n<ul><li><strong>T is not divisible by arr[0] (eg: arr[0] = 4</strong> and <strong>T = 7)</strong></li></ul>\n<p>&nbsp;In all other cases, we will not be able to form the target, so we will return 0.</p>\n<p><img width=\"386\" height=\"293\" src=\"https://lh3.googleusercontent.com/eanQNJiSjt5Ua1H0z0uxSDUJV_VrfnkQRHWTo1bpGWQr8AKrVtGe_GMU6k5wNSwN1A3haiWdckWidHxX1pKq5jKpiOEv-1C_v_FK44BLq-oA9mgwo6felDfHUtCRBANt074S0LlL\"></p>\n<p><strong>Step 2: </strong>Try out all possible choices at a given index.</p>\n<p>We need to generate all the subsequences. We will use the pick/non-pick technique as discussed in this video \u201c<a href=\"https://www.youtube.com/watch?v=AxNNVECce8c\">Recursion on Subsequences</a>\u201d.</p>\n<p>We have two choices:</p>\n<ul><li><strong>Exclude the current element in the subsequence: </strong>We first try to find a subsequence without considering the current index coin. If we exclude the current coin, the target sum will not be affected. So we will call the recursive function <strong>f(ind-1,T) </strong>to find the remaining answer.</li><li><strong>Include the current element in the subsequence:</strong> We will try to find a subsequence by considering the current icoin. As we have included the coin, the target sum will be updated to T-arr[ind].<br></li></ul>\n<p>Now here is the catch, as there is an unlimited supply of coins, we want to again form a solution with the same coin value. So we <strong>will not</strong> recursively call for f(ind-1, T-arr[ind]) rather we will stay at that index only and call for f(find, <strong>T-arr[ind])</strong> to find the answer.<br><strong>Note</strong>: We will consider the current coin only when its denomination value (arr[ind]) is less than or equal to the target T.</p>\n<p><img width=\"377\" height=\"460\" src=\"https://lh4.googleusercontent.com/eJEGaFRCTVHw-iYEUwabMmpm_SVcug2wORQ5ZaFijOCWiQDpFWhlVuwvsaaPNKos1TsV1mvnbARLZBA-8Mg_LORonPCzQdmi14ozNP2IXuNzLlg1mpAgPOZgxompVTRLhjvOKGAQ\"></p>\n<p><strong>Step 3:&nbsp; Return the sum of take and notTake</strong></p>\n<p>As we have to return the total number of ways we can form the target, we will return the sum of notTake and take as our answer.</p>\n<p>The final pseudocode after steps 1, 2, and 3:</p>\n<p><img width=\"380\" height=\"503\" src=\"https://lh4.googleusercontent.com/SYWs4kLJhnrar-Cr_5W-Gp-xmYtTGLFI61tAyQbPCDCtfxBol3vKKxgSXwETqV3yQYk1wX-43UuhvphHXl60-5j4oyFrirJjM7DLVunBc_ENLC1N6pTC8ry_1gZvbfVCJPQUcJvI\"></p>\n<p><strong>Steps to memoize a recursive solution:</strong></p>\n<p>If we draw the recursion tree, we will see that there are overlapping subproblems. In order to convert a recursive solution to the following steps will be taken:</p>\n<ol><li>Create a dp array of size [n][T+1]. The size of the input array is \u2018N\u2019, so the index will always lie between \u20180\u2019 and \u2018n-1\u2019. The target can take any value between \u20180\u2019 and \u2018T\u2019. Therefore we take the dp array as dp[n][T+1]</li><li>We initialize the dp array to -1.</li><li>Whenever we want to find the answer of particular parameters (say f(ind,target)), we first check whether the answer is already calculated using the dp array(i.e dp[ind][target]!= -1 ). If yes, simply return the value from the dp array.</li><li>If not, then we are finding the answer for the given value for the first time, we will use the recursive relation as usual but before returning from the function, we will set dp[ind][target] to the solution we get.</li></ol>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\n// Function to count the number of ways to make change for a given target sum\nlong countWaysToMakeChangeUtil(vector&lt;int&gt;&amp; arr, int ind, int T, vector&lt;vector&lt;long&gt;&gt;&amp; dp) {\n    // Base case: if we're at the first element\n    if (ind == 0) {\n        // Check if the target sum is divisible by the first element\n        return (T % arr[0] == 0);\n    }\n    \n    // If the result for this index and target sum is already calculated, return it\n    if (dp[ind][T] != -1)\n        return dp[ind][T];\n        \n    // Calculate the number of ways without taking the current element\n    long notTaken = countWaysToMakeChangeUtil(arr, ind - 1, T, dp);\n    \n    // Calculate the number of ways by taking the current element\n    long taken = 0;\n    if (arr[ind] &lt;= T)\n        taken = countWaysToMakeChangeUtil(arr, ind, T - arr[ind], dp);\n        \n    // Store the sum of ways in the DP table and return it\n    return dp[ind][T] = notTaken + taken;\n}\n\n// Function to count the number of ways to make change for the target sum\nlong countWaysToMakeChange(vector&lt;int&gt;&amp; arr, int n, int T) {\n    vector&lt;vector&lt;long&gt;&gt; dp(n, vector&lt;long&gt;(T + 1, -1)); // Create a DP table\n    \n    // Call the utility function to calculate the answer\n    return countWaysToMakeChangeUtil(arr, n - 1, T, dp);\n}\n\nint main() {\n    vector&lt;int&gt; arr = {1, 2, 3};\n    int target = 4;\n    int n = arr.size();\n    \n    cout &lt;&lt; \"The total number of ways is \" &lt;&lt; countWaysToMakeChange(arr, n, target) &lt;&lt; endl;\n\n    return 0; // Return 0 to indicate successful program execution\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\nclass TUF {\n    // Recursive function to count the ways to make change\n    static long countWaysToMakeChangeUtil(int[] arr, int ind, int T, long[][] dp) {\n        // Base case: If the current index is 0\n        if (ind == 0) {\n            // If T is divisible by the first element of the array, return 1, else return 0\n            if (T % arr[0] == 0)\n                return 1;\n            else\n                return 0;\n        }\n\n        // If the result for this subproblem has already been calculated, return it\n        if (dp[ind][T] != -1)\n            return dp[ind][T];\n\n        // Calculate the number of ways without taking the current element\n        long notTaken = countWaysToMakeChangeUtil(arr, ind - 1, T, dp);\n\n        // Initialize the number of ways taking the current element as 0\n        long taken = 0;\n\n        // If the current element is less than or equal to T, calculate 'taken'\n        if (arr[ind] &lt;= T)\n            taken = countWaysToMakeChangeUtil(arr, ind, T - arr[ind], dp);\n\n        // Store the result in the dp array and return it\n        return dp[ind][T] = notTaken + taken;\n    }\n\n    // Function to count the ways to make change\n    static long countWaysToMakeChange(int[] arr, int n, int T) {\n        // Create a 2D array to store results of subproblems\n        long dp[][] = new long[n][T + 1];\n\n        // Initialize the dp array with -1 to indicate that subproblems are not solved yet\n        for (long row[] : dp)\n            Arrays.fill(row, -1);\n\n        // Call the countWaysToMakeChangeUtil function to calculate the number of ways\n        return countWaysToMakeChangeUtil(arr, n - 1, T, dp);\n    }\n\n    public static void main(String args[]) {\n        int arr[] = { 1, 2, 3 };\n        int target = 4;\n        int n = arr.length;\n\n        // Call the countWaysToMakeChange function and print the result\n        System.out.println(\"The total number of ways is \" + countWaysToMakeChange(arr, n, target));\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\ndef countWaysToMakeChangeUtil(arr, ind, T, dp):\n    # Base case: If we have reached the first element in the array.\n    if ind == 0:\n        return 1 if T % arr[0] == 0 else 0\n\n    # If the result for this state is already calculated, return it.\n    if dp[ind][T] != -1:\n        return dp[ind][T]\n\n    # Calculate the number of ways when the current element is not taken.\n    not_taken = countWaysToMakeChangeUtil(arr, ind - 1, T, dp)\n\n    # Initialize a variable for the number of ways when the current element is taken.\n    taken = 0\n    if arr[ind] &lt;= T:\n        taken = countWaysToMakeChangeUtil(arr, ind, T - arr[ind], dp)\n\n    # Store the total number of ways in the DP table.\n    dp[ind][T] = not_taken + taken\n    return dp[ind][T]\n\n# Function to count the number of ways to make change for a given target amount\ndef countWaysToMakeChange(arr, n, T):\n    # Create a DP table with initial values as -1.\n    dp = [[-1 for i in range(T + 1)] for j in range(n)]\n    return countWaysToMakeChangeUtil(arr, n - 1, T, dp)\n\ndef main():\n    arr = [1, 2, 3]\n    target = 4\n    n = len(arr)\n    print(\"The total number of ways is\", countWaysToMakeChange(arr, n, target))\n\nif __name__ == \"__main__\":\n    main()\n\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\nfunction countWaysToMakeChangeUtil(arr, ind, T, dp) {\n    // Base case: If we have reached the first coin in the array\n    if (ind === 0) {\n        // Check if 'T' is divisible by the coin value\n        return (T % arr[0] === 0) ? 1 : 0;\n    }\n\n    // If the result for this combination of 'ind' and 'T' has already been calculated, return it\n    if (dp[ind][T] !== -1)\n        return dp[ind][T];\n\n    // Initialize variables to store results\n    let notTaken = countWaysToMakeChangeUtil(arr, ind - 1, T, dp);\n\n    let taken = 0;\n    if (arr[ind] &lt;= T)\n        taken = countWaysToMakeChangeUtil(arr, ind, T - arr[ind], dp);\n\n    // Store and return the result\n    return dp[ind][T] = notTaken + taken;\n}\n\n// Define a function to count the total number of ways to make change for 'T'\nfunction countWaysToMakeChange(arr, n, T) {\n    // Create a 2D array 'dp' to store dynamic programming results, initialized with -1\n    const dp = Array.from({ length: n }, () =&gt; Array(T + 1).fill(-1));\n    \n    // Call the recursive utility function to calculate the result\n    return countWaysToMakeChangeUtil(arr, n - 1, T, dp);\n}\n\n// Main function\nfunction main() {\n    const arr = [1, 2, 3];\n    const target = 4;\n    const n = arr.length;\n\n    // Call the countWaysToMakeChange function and print the result\n    console.log(\"The total number of ways is \" + countWaysToMakeChange(arr, n, target));\n}\n\n// Call the main function to start the program\nmain();\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Brute Force Here -->\n</p><p><strong>Output:</strong> The total number of ways is 4\n\n\n</p>\n<p></p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n<!-- Insert Time and Space Complexity of Brute Force Here -->\n</p><p><strong>Time Complexity: O(N*T)</strong></p>\n<p>Reason: There are N*W states therefore at max \u2018N*T\u2019 new problems will be solved.</p>\n<p><strong>Space Complexity: O(N*T) + O(N)</strong></p>\n<p>Reason: We are using a recursion stack space(O(N)) and a 2D array ( O(N*T)).</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Brute Force Approach Ends here -->\n\n\n<!-- Better Approach Starts from here -->\n\n<div id=\"better-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nTabulation Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition For Better Approach Here -->\n<p>To convert the memoization approach to a tabulation one, create a dp array with the same size as done in memoization. We can initialize it as 0.</p>\n<p>First, we need to initialize the base conditions of the recursive solution.</p>\n<ul><li>At ind==0, we are considering the first element, if the target value is divisible by the first coin\u2019s value, we set the cell's value as 1 or else 0.</li><li>Next, we are done for the first row, so our \u2018ind\u2019 variable will move from 1 to n-1, whereas our \u2018target\u2019 variable will move from 0 to \u2018T\u2019. We will set the nested loops to traverse the dp array.</li><li>Inside the nested loops, we will apply the recursive logic to find the answer of the cell.</li><li>When the nested loop execution has ended, we will return dp[n-1][T] as our answer.</li></ul>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\n// Function to count the number of ways to make change for a given target sum\nlong countWaysToMakeChange(vector&lt;int&gt;&amp; arr, int n, int T) {\n    vector&lt;vector&lt;long&gt;&gt; dp(n, vector&lt;long&gt;(T + 1, 0)); // Create a DP table\n\n    // Initializing base condition\n    for (int i = 0; i &lt;= T; i++) {\n        if (i % arr[0] == 0)\n            dp[0][i] = 1;\n        // Else condition is automatically fulfilled,\n        // as dp array is initialized to zero\n    }\n\n    for (int ind = 1; ind &lt; n; ind++) {\n        for (int target = 0; target &lt;= T; target++) {\n            long notTaken = dp[ind - 1][target];\n\n            long taken = 0;\n            if (arr[ind] &lt;= target)\n                taken = dp[ind][target - arr[ind]];\n\n            dp[ind][target] = notTaken + taken;\n        }\n    }\n\n    return dp[n - 1][T];\n}\n\nint main() {\n    vector&lt;int&gt; arr = {1, 2, 3};\n    int target = 4;\n    int n = arr.size();\n\n    cout &lt;&lt; \"The total number of ways is \" &lt;&lt; countWaysToMakeChange(arr, n, target) &lt;&lt; endl;\n\n    return 0; // Return 0 to indicate successful program execution\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\nclass TUF {\n    // Function to count the ways to make change\n    static long countWaysToMakeChange(int[] arr, int n, int T) {\n        // Create a 2D array to store results of subproblems\n        long dp[][] = new long[n][T + 1];\n\n        // Initialize base condition for the first element of the array\n        for (int i = 0; i &lt;= T; i++) {\n            if (i % arr[0] == 0)\n                dp[0][i] = 1;\n            // Else condition is automatically fulfilled, as dp array is initialized to zero\n        }\n\n        // Fill the dp array using dynamic programming\n        for (int ind = 1; ind &lt; n; ind++) {\n            for (int target = 0; target &lt;= T; target++) {\n                long notTaken = dp[ind - 1][target];\n\n                long taken = 0;\n                if (arr[ind] &lt;= target)\n                    taken = dp[ind][target - arr[ind]];\n\n                dp[ind][target] = notTaken + taken;\n            }\n        }\n\n        return dp[n - 1][T];\n    }\n\n    public static void main(String args[]) {\n        int arr[] = { 1, 2, 3 };\n        int target = 4;\n        int n = arr.length;\n\n        // Call the countWaysToMakeChange function and print the result\n        System.out.println(\"The total number of ways is \" + countWaysToMakeChange(arr, n, target));\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\ndef countWaysToMakeChange(arr, n, T):\n    # Create a DP table to store the number of ways for different target amounts\n    dp = [[0 for j in range(T + 1)] for i in range(n)]\n    \n    # Initialize the base condition for the first element in the array\n    for i in range(T + 1):\n        if i % arr[0] == 0:\n            dp[0][i] = 1\n        # Else condition is automatically fulfilled, as dp array is initialized to zero\n\n    # Iterate through the array elements and target amounts\n    for ind in range(1, n):\n        for target in range(T + 1):\n            # Calculate the number of ways when the current element is not taken\n            notTaken = dp[ind - 1][target]\n\n            # Initialize a variable for the number of ways when the current element is taken\n            taken = 0\n            if arr[ind] &lt;= target:\n                taken = dp[ind][target - arr[ind]]\n\n            # Store the total number of ways in the DP table\n            dp[ind][target] = notTaken + taken\n\n    # Return the total number of ways for the given target amount\n    return dp[n - 1][T]\n\ndef main():\n    arr = [1, 2, 3]\n    target = 4\n    n = len(arr)\n    print(\"The total number of ways is\", countWaysToMakeChange(arr, n, target))\n\nif __name__ == \"__main__\":\n    main()\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\nfunction countWaysToMakeChange(arr, n, T) {\n    // Create a 2D array 'dp' to store dynamic programming results, initialized with 0\n    const dp = Array.from({ length: n }, () =&gt; Array(T + 1).fill(0));\n    \n    // Initializing the base condition for the first coin in the array\n    for (let i = 0; i &lt;= T; i++) {\n        if (i % arr[0] === 0)\n            dp[0][i] = 1;\n        // Else condition is automatically fulfilled,\n        // as dp array is initialized to zero\n    }\n    \n    // Populating the dp array using nested loops\n    for (let ind = 1; ind &lt; n; ind++) {\n        for (let target = 0; target &lt;= T; target++) {\n            const notTaken = dp[ind - 1][target];\n            \n            let taken = 0;\n            if (arr[ind] &lt;= target)\n                taken = dp[ind][target - arr[ind]];\n                \n            dp[ind][target] = notTaken + taken;\n        }\n    }\n    \n    // The result is stored in the bottom-right cell of the dp array\n    return dp[n - 1][T];\n}\n\n// Main function\nfunction main() {\n    const arr = [1, 2, 3];\n    const target = 4;\n    const n = arr.length;\n\n    // Call the countWaysToMakeChange function and print the result\n    console.log(\"The total number of ways is \" + countWaysToMakeChange(arr, n, target));\n}\n\n// Call the main function to start the program\nmain();\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Better Approach Here -->\n<strong>Output:</strong> The total number of ways is 4\n\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Better Approach Here -->\n</p><p><strong>Time Complexity: O(N*T)</strong></p>\n<p>Reason: There are two nested loops</p>\n<p><strong>Space Complexity: O(N*T)</strong></p>\n<p>Reason: We are using an external array of size \u2018N*T\u2019. Stack Space is eliminated.</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Better Approach Ends from here -->\n\n\n<!-- Optimal Approach Starts from here -->\n\n<div id=\"optimal-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nSpace Optimization Approach \n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm of Better Approach Here -->\n<p>If we closely look the relation,</p>\n<p><strong>dp[ind][target] =&nbsp; dp[ind-1][target] ,dp[ind-1][target-arr[ind]]</strong></p>\n<p>We see that to calculate a value of a cell of the dp array, we need only the previous row values (say prev). So, we don\u2019t need to store an entire array. Hence we can space optimize it.</p>\n<p><strong>Note: </strong>We first need to initialize the first row as we had done in the tabulation approach.</p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\n// Function to count the number of ways to make change for a given target sum\nlong countWaysToMakeChange(vector&lt;int&gt;&amp; arr, int n, int T) {\n    vector&lt;long&gt; prev(T + 1, 0);  // Create a vector to store the previous DP state\n\n    // Initialize base condition\n    for (int i = 0; i &lt;= T; i++) {\n        if (i % arr[0] == 0)\n            prev[i] = 1;  // There is one way to make change for multiples of the first coin\n        // Else condition is automatically fulfilled,\n        // as the prev vector is initialized to zero\n    }\n\n    for (int ind = 1; ind &lt; n; ind++) {\n        vector&lt;long&gt; cur(T + 1, 0);  // Create a vector to store the current DP state\n        for (int target = 0; target &lt;= T; target++) {\n            long notTaken = prev[target];  // Number of ways without taking the current coin\n\n            long taken = 0;\n            if (arr[ind] &lt;= target)\n                taken = cur[target - arr[ind]];  // Number of ways by taking the current coin\n                \n            cur[target] = notTaken + taken;  // Total number of ways for the current target\n        }\n        prev = cur;  // Update the previous DP state with the current state for the next coin\n    }\n\n    return prev[T];  // Return the total number of ways to make change for the target\n}\n\nint main() {\n    vector&lt;int&gt; arr = {1, 2, 3};  // Coin denominations\n    int target = 4;  // Target sum\n    int n = arr.size();  // Number of coin denominations\n\n    // Call the function to calculate and output the total number of ways to make change\n    cout &lt;&lt; \"The total number of ways is \" &lt;&lt; countWaysToMakeChange(arr, n, target) &lt;&lt; endl;\n\n    return 0;  // Return 0 to indicate successful program execution\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\nclass TUF {\n    // Function to count the ways to make change\n    static long countWaysToMakeChange(int[] arr, int n, int T) {\n        // Create an array to store results of subproblems for the previous element\n        long[] prev = new long[T + 1];\n\n        // Initialize base condition for the first element of the array\n        for (int i = 0; i &lt;= T; i++) {\n            if (i % arr[0] == 0)\n                prev[i] = 1;\n            // Else condition is automatically fulfilled, as prev array is initialized to zero\n        }\n\n        // Fill the prev array using dynamic programming\n        for (int ind = 1; ind &lt; n; ind++) {\n            // Create an array to store results of subproblems for the current element\n            long[] cur = new long[T + 1];\n            for (int target = 0; target &lt;= T; target++) {\n                long notTaken = prev[target];\n\n                long taken = 0;\n                if (arr[ind] &lt;= target)\n                    taken = cur[target - arr[ind]];\n\n                cur[target] = notTaken + taken;\n            }\n            prev = cur;\n        }\n\n        return prev[T];\n    }\n\n    public static void main(String args[]) {\n        int arr[] = { 1, 2, 3 };\n        int target = 4;\n        int n = arr.length;\n\n        // Call the countWaysToMakeChange function and print the result\n        System.out.println(\"The total number of ways is \" + countWaysToMakeChange(arr, n, target));\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\ndef countWaysToMakeChange(arr, n, T):\n    # Initialize a list 'prev' to store the number of ways for different target amounts\n    prev = [0] * (T + 1)\n    \n    # Initialize the base condition for the first element in the array\n    for i in range(T + 1):\n        if i % arr[0] == 0:\n            prev[i] = 1\n    # Else condition is automatically fulfilled, as 'prev' is initialized to zeros.\n\n    # Iterate through the array elements and target amounts\n    for ind in range(1, n):\n        # Initialize a list 'cur' to store the number of ways for the current element\n        cur = [0] * (T + 1)\n        for target in range(T + 1):\n            # Calculate the number of ways when the current element is not taken\n            notTaken = prev[target]\n\n            # Initialize a variable for the number of ways when the current element is taken\n            taken = 0\n            if arr[ind] &lt;= target:\n                taken = cur[target - arr[ind]]\n\n            # Store the total number of ways in 'cur'\n            cur[target] = notTaken + taken\n        \n        # Update 'prev' with the results from 'cur' for the next iteration\n        prev = cur\n\n    # Return the total number of ways for the given target amount\n    return prev[T]\n\ndef main():\n    arr = [1, 2, 3]\n    target = 4\n    n = len(arr)\n\n    print(\"The total number of ways is\", countWaysToMakeChange(arr, n, target))\n\nif __name__ == '__main__':\n    main()\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\nfunction countWaysToMakeChange(arr, n, T) {\n    // Initialize an array 'prev' to store dynamic programming results, initialized with 0\n    let prev = new Array(T + 1).fill(0);\n    \n    // Initializing the base condition for the first coin in the array\n    for (let i = 0; i &lt;= T; i++) {\n        if (i % arr[0] === 0)\n            prev[i] = 1;\n        // Else condition is automatically fulfilled,\n        // as 'prev' array is initialized to zero\n    }\n    \n    // Populating the 'cur' array using nested loops\n    for (let ind = 1; ind &lt; n; ind++) {\n        // Initialize an array 'cur' for the current iteration\n        let cur = new Array(T + 1).fill(0);\n        for (let target = 0; target &lt;= T; target++) {\n            const notTaken = prev[target];\n            \n            let taken = 0;\n            if (arr[ind] &lt;= target)\n                taken = cur[target - arr[ind]];\n                \n            cur[target] = notTaken + taken;\n        }\n        // Update 'prev' to be the same as 'cur' for the next iteration\n        prev = [...cur];\n    }\n    \n    // The result is stored in the last element of the 'prev' array\n    return prev[T];\n}\n\n// Main function\nfunction main() {\n    const arr = [1, 2, 3];\n    const target = 4;\n    const n = arr.length;\n\n    // Call the countWaysToMakeChange function and print the result\n    console.log(\"The total number of ways is \" + countWaysToMakeChange(arr, n, target));\n}\n\n// Call the main function to start the program\nmain();\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Optimal Apporach Here -->\n<strong>Output:</strong>The total number of ways is 4\n\n\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Optimal Approach-->\n</p><p><strong>Time Complexity: O(N*T)</strong></p>\n<p>Reason: There are two nested loops.</p>\n<p><strong>Space Complexity: O(T)</strong></p>\n<p>Reason: We are using an external array of size \u2018T+1\u2019 to store two rows only.</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Optimal Approach Starts from here -->\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n<details>\n<summary class=\"main-summary\">\n<span>\nVideo Explanation\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"yt-video-wrapper\">\n\n<!-- Insert iframe embed Link of Youtube Video-->\n<iframe class=\"lazy-loaded\" loading=\"lazy\" title=\"Coin Change 2\" width=\"810\" height=\"456\" data-lazy-type=\"iframe\" data-src=\"https://www.youtube.com/embed/HgyouUi11zk?si=TspAvmpN9oR9317X\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\" src=\"https://www.youtube.com/embed/HgyouUi11zk?feature=oembed\"></iframe><noscript>\n<iframe loading=\"lazy\" title=\"Coin Change 2\" width=\"810\" height=\"456\" src=\"https://www.youtube.com/embed/HgyouUi11zk?si=TspAvmpN9oR9317X\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe></noscript>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script>\n\nconst codeSections = document.querySelectorAll('.code-section');\n\n// Get last selected language from localStorage or set default value\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\n// Update last selected language for all sections and store in localStorage\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\n// Handle copy button click event\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\n// Set initial state of the tabs\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<script>\nconst codeSections = document.querySelectorAll('.code-section');\n\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script src=\"https://takeuforward.org/UXApproachDropDowns/3ApproachJSScript.js\"></script>\n<!-- /wp:html -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;<strong><a href=\"https://www.linkedin.com/in/anshuman-sharma-a1b245194/\" target=\"_blank\" rel=\"noreferrer noopener\">Anshuman Sharma</a></strong>&nbsp;<em>and&nbsp;<a href=\"https://www.linkedin.com/in/abhipsita-das-5b7069212/?originalSubdomain=in\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>Abhipsita Das</strong></a></em></em> <em>for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->"
}