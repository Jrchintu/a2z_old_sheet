{
    "dislikes": 5,
    "video": "3Et9MrMc02A",
    "publishedOn": "Sun Mar 24 2024 22:09:19 GMT+0530 (India Standard Time)",
    "slug": "implement-queue-using-stack",
    "aid": "1451",
    "title": "Implement Queue using Stack",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/implement-queue-using-stack",
    "topics": [
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "queue",
            "topic-title": "Queue"
        },
        {
            "topic-id": "stack",
            "topic-title": "Stack"
        }
    ],
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement:</strong> Given a Stack having some elements stored in it. Can you implement a<br>Queue using the given Stack?</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Queue: </strong>A Queue is a linear data structure that works on the basis of <strong>FIFO(First in First out). </strong>This means the element added at first will be removed first from the Queue.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph {\"textColor\":\"vivid-red\"} -->\n<p class=\"has-vivid-red-color has-text-color\"><strong><em>Disclaimer</em></strong>: <em>Don't jump directly to the solution, try it out yourself first.</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Solution 1: Using two Stacks where push operation is O(N)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Approach:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><img width=\"624\" height=\"255\" src=\"https://lh5.googleusercontent.com/lrN12LWpCadq5_SY6yA3Gw2gFZkf2rzZfKZ-xzv_1-alSiLvXj8fVQv7drPE9gmZH5BwzKlji5s7JIsClsECrfdqtnOceDqohRsfpC4dsLWEVc26mZNT3n0jjxmnIzo-0A1TWG6r\"></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>push(x) -&gt;</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"624\" height=\"465\" src=\"https://lh6.googleusercontent.com/R64-tR_yfjESoxJYDVoykRPkABC7y_fOI8lV2yZbPdJvSyKvnZStZpeBJsJMorHd3NshFsM-tL-g7cmZt9QgYyXyHGy8q0HgX9aqArovthRwPNynPUwTOV9zS3iTI_J3XoZjeUPD\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>pop()-&gt;</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"624\" height=\"175\" src=\"https://lh5.googleusercontent.com/w52IrlSNkGHV2owA70H1RKBO9lglS7uDEeRaXMxB9hUjLiBk6fHDl06V-eR4pFZA0C8W4uOsKtA92y5zfcijQr7FBtNnADjaKjMrU4gT_6VGDXmaN1zh1kW6_KJrGN_KoofxAgeA\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>top()</strong>-&gt;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"624\" height=\"236\" src=\"https://lh3.googleusercontent.com/OptgBjobB0owOaYDwoLJaqwhj-aDaAKhn0liUeTGVe3nkeqkAOuMdCepFq9TABSmB_db6hhoAk-TzzYhYtBdhu-RRa9siPl5i4kwNRsu-BvQmqLQO1gniaiaCQN8Y_HQMsVP5NLr\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>size()</strong>-&gt;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>size() operation is for returning the size of a queue which can be done by using the function Stack1. size(). It will actually return the total number of elements in the queue.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\nstruct Queue {\n  stack &lt; int &gt; input, output;\n  \n  // Push elements in queue\n  void Push(int data) {\n    // Pop out all elements from the stack input\n    while (!input.empty()) {\n      output.push(input.top());\n      input.pop();\n    }\n    // Insert the desired element in the stack input\n    cout &lt;&lt; \"The element pushed is \" &lt;&lt; data &lt;&lt; endl;\n    input.push(data);\n    // Pop out elements from the stack output and push them into the stack input\n    while (!output.empty()) {\n      input.push(output.top());\n      output.pop();\n    }\n  }\n  // Pop the element from the Queue\n  int Pop() {\n    if (input.empty()) {\n      cout &lt;&lt; \"Stack is empty\";\n      exit(0);\n    }\n    int val = input.top();\n    input.pop();\n    return val;\n  }\n  // Return the Topmost element from the Queue\n  int Top() {\n    if (input.empty()) {\n      cout &lt;&lt; \"Stack is empty\";\n      exit(0);\n    }\n    return input.top();\n  }\n  // Return the size of the Queue\n  int size() {\n    return input.size();\n  }\n};\nint main() {\n  Queue q;\n  q.Push(3);\n  q.Push(4);\n  cout &lt;&lt; \"The element poped is \" &lt;&lt; q.Pop() &lt;&lt; endl;\n  q.Push(5);\n  cout &lt;&lt; \"The top of the queue is \" &lt;&lt; q.Top() &lt;&lt; endl;\n  cout &lt;&lt; \"The size of the queue is \" &lt;&lt; q.size() &lt;&lt; endl;\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p id=\"output\">The element pushed is 3 </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p id=\"output\">The element pushed is 4 </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p id=\"output\">The element poped is 3 </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p id=\"output\">The element pushed is 5 </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p id=\"output\">The top of the queue is 4 </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p id=\"output\">The size of the queue is 2</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O(N<sup> </sup>) &nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(2N)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\n\nclass MyQueue {\n    Stack &lt; Integer &gt; input = new Stack &lt; &gt; ();\n    Stack &lt; Integer &gt; output = new Stack &lt; &gt; ();\n    /** Initialize your data structure here. */\n    public MyQueue() {\n\n    }\n\n    /** Push element x to the back of queue. */\n    public void push(int x) {\n        while (input.empty() == false) {\n            output.push(input.peek());\n            input.pop();\n        }\n        // Insert the desired element in the stack input\n        System.out.println(\"The element pushed is \" + x);\n        input.push(x);\n        // Pop out elements from the stack output and push them into the stack input\n        while (output.empty() == false) {\n            input.push(output.peek());\n            output.pop();\n        }\n\n    }\n\n    /** Removes the element from in front of queue and returns that element. */\n    public int pop() {\n        // shift input to output \n        if (input.empty()) {\n            System.out.println(\"Stack is empty\");\n\n        }\n        int val = input.peek();\n        input.pop();\n        return val;\n\n    }\n\n    /** Get the front element. */\n    public int peek() {\n        // shift input to output \n        if (input.empty()) {\n            System.out.println(\"Stack is empty\");\n\n        }\n        return input.peek();\n    }\n\n\n    int size() {\n        return input.size();\n    }\n}\nclass TUF {\n    public static void main(String args[]) {\n        MyQueue q = new MyQueue();\n        q.push(3);\n        q.push(4);\n        System.out.println(\"The element poped is \" + q.pop());\n        q.push(5);\n        System.out.println(\"The top element is \" + q.peek());\n        System.out.println(\"The size of the queue is \" + q.size());\n\n    }\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The element pushed is 3<br>The element pushed is 4<br>The element poped is 3<br>The element pushed is 5<br>The top element is 4<br>The size of the queue is 2</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O(N<sup> </sup>) &nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(2N)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block\" data-lang=\"python\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">from queue import LifoQueue\n# using LifoQueue which is a stack in python\n\n\n\n\nclass Queue:\n    def __init__(self):\n        self.input = LifoQueue()\n        self.output = LifoQueue()\n\n\n    def push(self, data: int) -> None:\n        # Pop out all elements from the stack input\n        while not self.input.empty():\n            self.output.put(self.input.get())\n        # Insert the desired element in the stack input\n        print(\"The element pushed is\", data)\n        self.input.put(data)\n        # Pop out elements from the stack output and push them into the stack input\n        while not self.output.empty():\n            self.input.put(self.output.get())\n\n\n    # Pop the element from the Queue\n    def pop(self) -> int:\n        if self.input.qsize() == 0:\n            print(\"Stack is empty\")\n            exit(0)\n        val = self.input.get()\n        return val\n\n\n    def Top(self) -> int:\n        if self.input.qsize() == 0:\n            print(\"Stack is empty\")\n            exit(0)\n        return self.input.queue[-1]\n\n\n    def size(self) -> int:\n        return self.input.qsize()\n\n\n\n\nif __name__ == \"__main__\":\n    q = Queue()\n    q.push(3)\n    q.push(4)\n    print(\"The element poped is\", q.pop())\n    q.push(5)\n    print(\"The top of the queue is\", q.Top())\n    print(\"The size of the queue is\", q.size())\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The element pushed is 3<br>The element pushed is 4<br>The element poped is 3<br>The element pushed is 5<br>The top element is 4<br>The size of the queue is 2</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O(N<sup> </sup>) &nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(2N)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Solution 2: Using two Stacks where push operation is O(1)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Approach</strong> :</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Push()-&gt;</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><img width=\"624\" height=\"271\" src=\"https://lh5.googleusercontent.com/cyrQpSoer5LXYHsWlE7EexruYcBcHOOYR6dFWVhwG8ZhIV0N6ZQ5BqGYaVQnxCfe86bL999w7DRTK0xNLGzapCvDUnc-IdwN24arTdyFTpuO5Wx4Mx5V4K2b86s7d1ZApLvfRz8n\"></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Pop()-&gt;</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"624\" height=\"228\" src=\"https://lh6.googleusercontent.com/SCtOoeI2c7RfhqiTJ04h6S6ypvD8D56X0xADIHJp4kkLqjjpA_9Hh0cSSWVS1ud-NPhaRNjt91tGE_vkYHU5oh7dW7-96M3xW44RcafiX-EcsJAoF3ux45ntrB7bi4Xadx-Px1eY\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"624\" height=\"164\" src=\"https://lh3.googleusercontent.com/AlCUaPu7QOThJqIXiiUvOaxxft_GrbLZZf4WmSEOqjJmPUJjLzjzrCxQdi18kyQc_Q97lkazuL-H07ciVUrvZ_KCXY8nnH6YjyEw9I4KhYXuzT8wmoW1IGmUmnu8gOaTb3yfy94k\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>top()</strong>-&gt;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"624\" height=\"213\" src=\"https://lh4.googleusercontent.com/hHNIa47YcwkZ0h9M94cxYBIuLl89TP8TJkbPOJcXcC5TWFNxlTtFWR8wq454ab4ShPK44w9LRUAZBsH3CN8kiF96LlxxqqyBlMnsYhVzj09zjbS6jAOF-oaoyjVPGLLQZJGSISfN\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"624\" height=\"171\" src=\"https://lh3.googleusercontent.com/45nuKRNKUuc90kPtPB-iF9rna58jlPvHuceM1c5vo2IVsFB1E5JeWsaFRUboa7BNrVdzpAvGjvqxIw8gm3_Ssb7XncavzVU_iVLvVtuAvO084cFcIHZt91YlPYAxHdu1AwT6uyee\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Size():</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><img width=\"624\" height=\"468\" src=\"https://lh5.googleusercontent.com/wZaLy37CL0kx0VtN73DmjmiSuvHjSdPlzS3BNIfnbZz8i5QtLao1Mjb6QoVJCy53OCczCVHs3f5GCeHkYUqimJI_aT_oXp_HKZ1HThaqjcskYfQCINjq1qsjxQlTJIgwCR3W4J8X\"></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\nclass MyQueue {\n  public:\n    stack &lt; int &gt; input, output;\n  /** Initialize your data structure here. */\n  MyQueue() {\n\n  }\n\n  /** Push element x to the back of queue. */\n  void push(int x) {\n    cout &lt;&lt; \"The element pushed is \" &lt;&lt; x &lt;&lt; endl;\n    input.push(x);\n  }\n\n  /** Removes the element from in front of queue and returns that element. */\n  int pop() {\n    // shift input to output \n    if (output.empty())\n      while (input.size())\n        output.push(input.top()), input.pop();\n\n    int x = output.top();\n    output.pop();\n    return x;\n  }\n\n  /** Get the front element. */\n  int top() {\n    // shift input to output \n    if (output.empty())\n      while (input.size())\n        output.push(input.top()), input.pop();\n    return output.top();\n  }\n\n  int size() {\n    return (output.size() + input.size()); \n  }\n\n};\nint main() {\n  MyQueue q;\n  q.push(3);\n  q.push(4);\n  cout &lt;&lt; \"The element poped is \" &lt;&lt; q.pop() &lt;&lt; endl;\n  q.push(5);\n  cout &lt;&lt; \"The top of the queue is \" &lt;&lt; q.top() &lt;&lt; endl;\n  cout &lt;&lt; \"The size of the queue is \" &lt;&lt; q.size() &lt;&lt; endl;\n\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p id=\"output\">The element pushed is 3 </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p id=\"output\">The element pushed is 4 </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p id=\"output\">The element poped is 3 </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p id=\"output\">The element pushed is 5 </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p id=\"output\">The top of the queue is 4 </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p id=\"output\">The size of the queue is 2</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O(1<sup> </sup>) </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(2N) </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\n\nclass MyQueue {\n    Stack &lt; Integer &gt; input = new Stack &lt; &gt; ();\n    Stack &lt; Integer &gt; output = new Stack &lt; &gt; ();\n    /** Initialize your data structure here. */\n    public MyQueue() {\n\n    }\n\n    /** Push element x to the back of queue. */\n    public void push(int x) {\n        System.out.println(\"The element pushed is \" + x);\n        input.push(x);\n    }\n\n    /** Removes the element from in front of queue and returns that element. */\n    public int pop() {\n        // shift input to output \n        if (output.empty())\n            while (input.empty() == false) {\n                output.push(input.peek());\n                input.pop();\n            }\n\n\n        int x = output.peek();\n        output.pop();\n        return x;\n    }\n\n    /** Get the front element. */\n    public int peek() {\n        // shift input to output \n        if (output.empty())\n            while (input.empty() == false) {\n                output.push(input.peek());\n                input.pop();\n            }\n        return output.peek();\n    }\n    int size() {\n        return (output.size() + input.size());\n    }\n\n\n}\nclass TUF {\n    public static void main(String args[]) {\n        MyQueue q = new MyQueue();\n        q.push(3);\n        q.push(4);\n        System.out.println(\"The element poped is \" + q.pop());\n        q.push(5);\n        System.out.println(\"The top element is \" + q.peek());\n        System.out.println(\"The size of the queue is \" + q.size());\n\n    }\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The element pushed is 3<br>The element pushed is 4<br>The element poped is 3<br>The element pushed is 5<br>The top element is 4<br>The size of the queue is 2</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O(1<sup> </sup>) </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(2N) </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block\" data-lang=\"python\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">from queue import LifoQueue\n# using LifoQueue which is a stack in python\n\n\n\n\nclass MyQueue:\n    def __init__(self):\n        self.input = LifoQueue()\n        self.output = LifoQueue()\n\n\n    # Push element x to the back of queue.\n    def push(self, x: int) -> None:\n        print(\"The element pushed is \", x)\n        self.input.put(x)\n\n\n    # Removes the element from in front of queue and returns that element.\n    def pop(self) -> int:\n        # shift input to output\n        if self.output.empty():\n            while not self.input.empty():\n                self.output.put(self.input.get())\n        x = self.output.get()\n        return x\n\n\n    # Get the front element.\n    def top(self) -> int:\n        # shift input to output\n        if self.output.empty():\n            while not self.input.empty():\n                self.output.put(self.input.get())\n        return self.output.queue[-1]\n\n\n    def size(self) -> int:\n        return self.input.qsize() + self.output.qsize()\n\n\n\n\nif __name__ == \"__main__\":\n    q = MyQueue()\n    q.push(3)\n    q.push(4)\n    print(\"The element poped is \", q.pop())\n    q.push(5)\n    print(\"The top of the queue is \", q.top())\n    print(\"The size of the queue is \", q.size())</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p id=\"output\">The element pushed is 3 </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p id=\"output\">The element pushed is 4 </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p id=\"output\">The element poped is 3 </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p id=\"output\">The element pushed is 5 </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p id=\"output\">The top of the queue is 4 </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p id=\"output\">The size of the queue is 2</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O(1<sup> </sup>) </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(2N) </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to\u00a0<strong><a href=\"https://www.linkedin.com/in/gurmeet-singh-630002201/\" target=\"_blank\" rel=\"noreferrer noopener nofollow\"><strong>Gurmeet Singh</strong></a></strong>\u00a0<em><em>and\u00a0<a href=\"https://www.linkedin.com/in/imsudip/\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>Sudip Ghosh</strong></a></em></em></em> <em>for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,\u00a0</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->",
    "category_tag": "data-structure",
    "likes": 95,
    "preview": "Problem Statement: Given a Stack having some elements stored in it. Can you implement a Queue using the given Stack? Queue: A Queue is a linear data structure that works on the basis of FIFO(First..."
}