{
    "dislikes": 40,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:10:11 GMT+0530 (India Standard Time)",
    "slug": "count-subsets-with-sum-k-dp-17",
    "aid": "1697",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/count-subsets-with-sum-k",
    "title": "Count Subsets with Sum K (DP - 17)",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "dynamic-programming",
            "topic-title": "Dynamic Programming"
        },
        {
            "topic-id": "recursion",
            "topic-title": "Recursion"
        }
    ],
    "likes": 70,
    "category_tag": "data-structure",
    "preview": "Problem Statement: Count Subsets with Sum K Pre-req: Subset Sum equal to target, Recursion on Subsequences Problem Link: Count Subsets With Sum K We are given an array \u2018ARR\u2019 with N positive integer...",
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement:&nbsp;Count Subsets with Sum K</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Pre-req: <a href=\"https://takeuforward.org/data-structure/subset-sum-equal-to-target-dp-14/\">Subset Sum equal to target</a>, <a href=\"https://www.youtube.com/watch?v=AxNNVECce8c\">Recursion on Subsequences</a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Problem Link: </strong><a href=\"https://www.codingninjas.com/codestudio/problems/number-of-subsets_3952532?source=youtube&amp;campaign=striver_dp_videos&amp;utm_source=youtube&amp;utm_medium=affiliate&amp;utm_campaign=striver_dp_videos\">Count Subsets With Sum K</a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We are given an array \u2018ARR\u2019 with N positive integers and an integer K. We need to find the number of subsets whose sum is equal to K.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n<details class=\"article_example_details\">\n<summary class=\"article_example_summary\">\n<span><strong>\nExamples\n</strong>\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"atricle_example_content\">\n<pre class=\"wp-block-preformatted\"><!-- Insert New Examples Here -->\n<pre class=\"wp-block-preformatted\"><strong>Example:</strong>\n\n<img width=\"624\" height=\"356\" src=\"https://lh4.googleusercontent.com/pKgBxODRwO9eGi2OEQPcgpZwmOz-BaOcCpy29NqzoOau4IN_ioOJvjsnHkl5cB2bCJx67byJbceLB1sX7enyoTa1kwa1BE6NBdPX0szXrnzY7HADEQuo0BeRIkD28yq2WcVR8JzV\">\n</pre>\n</pre>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Practice Section-->\n<div class=\"practice\">\n<span><strong>Practice: </strong></span>\n<div class=\"problem-buttons\">\n\n<!-- Add Problem Link inside href -->\n<a href=\"https://www.codingninjas.com/studio/problems/count-subsets-with-sum-k_3952532?utm_source=striver&amp;utm_medium=website&amp;utm_campaign=a_zcoursetuf\" target=\"_blank\" rel=\"noopener\">\n<span>Solve Problem</span>\n<img src=\"https://static.takeuforward.org/wp/uploads/2023/04/Group-11-5.png\" alt=\"code-studio\">\n</a>\n</div>\n</div>\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\nyourself first. </em></p>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<div class=\"horizontal_navbar_dsa_article\">\n<div class=\"grid_container_three\">\n<a href=\"#brute-force-approach\" class=\"three-boxes box-a\">\nMemorization approach\n</a>\n<a href=\"#better-approach\" class=\"three-boxes box-b\">\nTabulation approach\n</a>\n<a href=\"#optimal-approach\" class=\"three-boxes box-c\">\nSpace Optimization\n</a>\n<a href=\"#dsa_article_video_explanation\" class=\"three-boxes box-d\">\n<svg width=\"26\" height=\"26\" viewBox=\"0 0 20 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M8 10L13.19 7L8 4V10ZM19.56 2.17C19.69 2.64 19.78 3.27 19.84 4.07C19.91 4.87 19.94 5.56 19.94 6.16L20 7C20 9.19 19.84 10.8 19.56 11.83C19.31 12.73 18.73 13.31 17.83 13.56C17.36 13.69 16.5 13.78 15.18 13.84C13.88 13.91 12.69 13.94 11.59 13.94L10 14C5.81 14 3.2 13.84 2.17 13.56C1.27 13.31 0.69 12.73 0.44 11.83C0.31 11.36 0.22 10.73 0.16 9.93C0.0900001 9.13 0.0599999 8.44 0.0599999 7.84L0 7C0 4.81 0.16 3.2 0.44 2.17C0.69 1.27 1.27 0.69 2.17 0.44C2.64 0.31 3.5 0.22 4.82 0.16C6.12 0.0899998 7.31 0.0599999 8.41 0.0599999L10 0C14.19 0 16.8 0.16 17.83 0.44C18.73 0.69 19.31 1.27 19.56 2.17Z\" fill=\"red\"></path>\n</svg>\n\n</a>\n<div class=\"box-e tooltip\">\n<svg viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M12.842 9.25L11.9577 10.17C11.2502 10.89 10.8081 11.5 10.8081 13H8.84297V12.5C8.84297 11.39 9.28511 10.39 9.99255 9.67L11.2109 8.41C11.5745 8.05 11.7906 7.55 11.7906 7C11.7906 6.46957 11.5836 5.96086 11.2151 5.58579C10.8465 5.21071 10.3467 5 9.82552 5C9.30434 5 8.80451 5.21071 8.43598 5.58579C8.06745 5.96086 7.86041 6.46957 7.86041 7H5.89531C5.89531 5.93913 6.30938 4.92172 7.04644 4.17157C7.7835 3.42143 8.78316 3 9.82552 3C10.8679 3 11.8675 3.42143 12.6046 4.17157C13.3417 4.92172 13.7557 5.93913 13.7557 7C13.7543 7.84324 13.4259 8.65183 12.842 9.25ZM10.8081 17H8.84297V15H10.8081M9.82552 0C8.53521 0 7.25754 0.258658 6.06545 0.761205C4.87337 1.26375 3.79021 2.00035 2.87783 2.92893C1.03519 4.8043 0 7.34784 0 10C0 12.6522 1.03519 15.1957 2.87783 17.0711C3.79021 17.9997 4.87337 18.7362 6.06545 19.2388C7.25754 19.7413 8.53521 20 9.82552 20C12.4314 20 14.9306 18.9464 16.7732 17.0711C18.6158 15.1957 19.651 12.6522 19.651 10C19.651 4.47 15.2296 0 9.82552 0Z\" fill=\"black\"></path>\n</svg>\n<div class=\"bottom\">\n<p>Expand any one approach by clicking the given options in the bar. Clicking one approach on bar,\ncloses all other expands. You can manually expand more than one approach at a time</p>\n<i></i>\n</div>\n\n</div>\n</div>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Approaches Drop-Down -->\n<div class=\"dsa_article_dropdown_approachs \">\n\n<!-- Brute Force Approach Starts from here -->\n<div id=\"brute-force-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nMemorization Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n<p>A Greedy Solution doesn\u2019t make sense because we are not looking to optimize anything. We can rather try to generate all subsequences using recursion and whenever we get a single subsequence whose sum is equal to the given target, we can count it.</p>\n<p><strong>Note: </strong>Readers are highly advised to watch this video \u201c<a href=\"https://www.youtube.com/watch?v=AxNNVECce8c\">Recursion on Subsequences</a>\u201d to understand how we generate subsequences using recursion.</p>\n<h3><strong>Steps to form the recursive solution:&nbsp;</strong></h3>\n<p>We will first form the recursive solution by the three points mentioned in <a href=\"https://takeuforward.org/data-structure/dynamic-programming-introduction/\">Dynamic Programming Introduction</a>.&nbsp;</p>\n<p><strong>Step 1: </strong>Express the problem in terms of indexes.</p>\n<p>The array will have an index but there is one more parameter \u201ctarget\u201d. We are given the initial problem to find whether there exists in the whole array a subsequence whose sum is equal to the target.</p>\n<p>So, we can say that initially, we need to find(n-1, target) which means that we are counting the number of subsequences in the array from index 0 to n-1, whose sum is equal to the target. Similarly, we can generalize it for any index ind as follows:</p>\n<p><img width=\"624\" height=\"77\" src=\"https://lh4.googleusercontent.com/0oNM4eJJkIwTRQEKr2CqQXcSO0Jgv4Qo3Dxoe88CBameJZzfMcuUdZjvGguHKtTRAPRONqzTJwx8U5vtkcflRnuYYLJ_SlqDpWw6achjN9TWLdpjZEvrjC5M8T8ipYpT7CW3MuId\"></p>\n<h3><strong>Base Cases:</strong></h3>\n<ul><li>If target == 0, it means that we have already found the subsequence from the previous steps, so we can return 1.</li><li>If ind==0, it means we are at the first element, so we need to return arr[ind]==target. If the element is equal to the target we return 1 else we return 0.</li></ul>\n<p><img width=\"396\" height=\"284\" src=\"https://lh5.googleusercontent.com/ISU0bWQENQoxLS8aSARRpOmp3CyA3f1xdYrwkjax7-ze_337ZyTIf5lZk0nSae9MD-SEOy1nmvzH22MSvrcDJoxPzkIQssEajEEMbOWjdwwidX45dIDkF5n5mLbND_IrSB4s1LSN\"></p>\n<p><strong>Step 2: </strong>Try out all possible choices at a given index.</p>\n<p>We need to generate all the subsequences. We will use the pick/non-pick technique as discussed in this video \u201c<a href=\"https://www.youtube.com/watch?v=AxNNVECce8c\">Recursion on Subsequences</a>\u201d.</p>\n<p>We have two choices:</p>\n<ul><li><strong>Exclude the current element in the subsequence: </strong>We first try to find a subsequence without considering the current index element. For this, we will make a recursive call to f(ind-1,target).</li><li><strong>Include the current element in the subsequence:</strong> We will try to find a subsequence by considering the current index as element as part of subsequence. As we have included arr[ind], the updated target which we need to find in the rest if the array will be target - arr[ind]. Therefore, we will call f(ind-1,target-arr[ind]).</li></ul>\n<p><strong>Note: </strong>We will consider the current element in the subsequence only when the current element is less than or equal to the target.</p>\n<p><img width=\"422\" height=\"392\" src=\"https://lh6.googleusercontent.com/YVTckTDf7plFBPm3h-ac3Pi33i-hWlw3Qpt90E-Rjygut8gE2wl4jL14Nq0CX00R9S-LQ5JJExnJmZqAwnvXpG_Q_6AbpH2zsER1W6u6_AetENsVkV8bcpMbGD_1gNg-SZ1Z8ZbL\"></p>\n<p><strong>Step 3:&nbsp; Return sum of taken and notTaken</strong></p>\n<p>As we have to return the total count of subsets with the target sum, we will return the sum of taken and notTaken from our recursive call.</p>\n<p>The final pseudocode after steps 1, 2, and 3:</p>\n<p><img width=\"452\" height=\"459\" src=\"https://lh5.googleusercontent.com/BgLQ7V9rXa_vBfIqbzM-Kltw2QE4t19neQRJi2whPkVQk0Z24zJ-_c1lntuGmbqD0nJREP34Yl_IIdh7rA1leOraQIYBTBTlHbEBFggn1b4cgBGfnt17_s-A7mY0BytauXGKZ8zo\"></p>\n<p><strong>Steps to memoize a recursive solution:</strong></p>\n<p>If we draw the recursion tree, we will see that there are overlapping subproblems. In order to convert a recursive solution the following steps will be taken:</p>\n<ol><li>Create a dp array of size [n][k+1]. The size of the input array is \u2018n\u2019, so the index will always lie between \u20180\u2019 and \u2018n-1\u2019. The target can take any value between \u20180\u2019 and \u2018k\u2019. Therefore we take the dp array as dp[n][k+1]</li><li>We initialize the dp array to -1.</li><li>Whenever we want to find the answer of particular parameters (say f(ind,target)), we first check whether the answer is already calculated using the dp array(i.e dp[ind][target]!= -1 ). If yes, simply return the value from the dp array.</li><li>If not, then we are finding the answer for the given value for the first time, we will use the recursive relation as usual but before returning from the function, we will set dp[ind][target] to the solution we get.</li></ol>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h>\nusing namespace std;\n\n// Function to count the number of subsets with a given sum\nint findWaysUtil(int ind, int target, vector&lt;int>&amp; arr, vector&lt;vector&lt;int>>&amp; dp) {\n    // Base case: If the target sum is 0, we found a valid subset\n    if (target == 0)\n        return 1;\n\n    // Base case: If we have considered all elements and the target is still not 0, return 0\n    if (ind == 0)\n        return (arr[0] == target) ? 1 : 0;\n\n    // If the result for this state is already calculated, return it\n    if (dp[ind][target] != -1)\n        return dp[ind][target];\n\n    // Recursive cases\n    // 1. Exclude the current element\n    int notTaken = findWaysUtil(ind - 1, target, arr, dp);\n\n    // 2. Include the current element if it doesn't exceed the target\n    int taken = 0;\n    if (arr[ind] &lt;= target)\n        taken = findWaysUtil(ind - 1, target - arr[ind], arr, dp);\n\n    // Store the result in the DP table and return\n    return dp[ind][target] = notTaken + taken;\n}\n\n// Function to count the number of subsets with a given sum\nint findWays(vector&lt;int>&amp; num, int k) {\n    int n = num.size();\n    vector&lt;vector&lt;int>> dp(n, vector&lt;int>(k + 1, -1));\n    return findWaysUtil(n - 1, k, num, dp);\n}\n\nint main() {\n    vector&lt;int> arr = {1, 2, 2, 3};\n    int k = 3;\n\n    cout &lt;&lt; \"The number of subsets found are \" &lt;&lt; findWays(arr, k);\n\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\nclass TUF {\n    // Helper function to find the number of ways to achieve a target sum\n    static int findWaysUtil(int ind, int target, int[] arr, int[][] dp) {\n        if (target == 0)\n            return 1;\n\n        if (ind == 0)\n            return arr[0] == target ? 1 : 0;\n\n        if (dp[ind][target] != -1)\n            return dp[ind][target];\n\n        // Calculate the number of ways when the current element is not taken\n        int notTaken = findWaysUtil(ind - 1, target, arr, dp);\n\n        // Calculate the number of ways when the current element is taken\n        int taken = 0;\n        if (arr[ind] &lt;= target)\n            taken = findWaysUtil(ind - 1, target - arr[ind], arr, dp);\n\n        // Store and return the result for the current state\n        return dp[ind][target] = notTaken + taken;\n    }\n\n    // Main function to find the number of ways to form subsets with a target sum\n    static int findWays(int[] num, int k) {\n        int n = num.length;\n        int dp[][] = new int[n][k + 1];\n\n        for (int row[] : dp)\n            Arrays.fill(row, -1);\n\n        return findWaysUtil(n - 1, k, num, dp);\n    }\n\n    public static void main(String args[]) {\n        int arr[] = {1, 2, 2, 3};\n        int k = 3;\n\n        // Calculate and print the number of subsets that sum up to k\n        System.out.println(\"The number of subsets found are \" + findWays(arr, k));\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\ndef findWays(num, k):\n    n = len(num)\n    \n    # Initialize a 2D DP array to store the count of subsets for different targets.\n    dp = [[0] * (k + 1) for _ in range(n)]\n    \n    # Base case: There is always one way to make a subset with a target sum of 0 (empty subset).\n    for i in range(n):\n        dp[i][0] = 1\n    \n    # Handle the base case for the first element in the array.\n    if num[0] &lt;= k:\n        dp[0][num[0]] = 1\n\n    # Iterate through the elements in the array.\n    for ind in range(1, n):\n        for target in range(1, k + 1):\n            # If the current element is not taken, the count is the same as the previous row.\n            notTaken = dp[ind - 1][target]\n            \n            # If the current element is taken, subtract its value from the target and check the previous row.\n            taken = 0\n            if num[ind] &lt;= target:\n                taken = dp[ind - 1][target - num[ind]]\n            \n            # Update the DP array with the total count of ways (taken + notTaken).\n            dp[ind][target] = notTaken + taken\n\n    # The result is stored in the bottom-right cell of the DP array.\n    return dp[n - 1][k]\n\ndef main():\n    arr = [1, 2, 2, 3]\n    k = 3\n    \n    # Find and print the number of subsets that can be formed with a sum of 'k'.\n    print(\"The number of subsets found are\", findWays(arr, k))\n\nif __name__ == \"__main__\":\n    main()\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\nfunction findWaysUtil(ind, target, arr, dp) {\n  if (target === 0)\n    return 1;\n\n  if (ind === 0)\n    return arr[0] === target ? 1 : 0;\n\n  if (dp[ind][target] !== -1)\n    return dp[ind][target];\n\n  const notTaken = findWaysUtil(ind - 1, target, arr, dp);\n\n  let taken = 0;\n  if (arr[ind] &lt;= target)\n    taken = findWaysUtil(ind - 1, target - arr[ind], arr, dp);\n\n  return dp[ind][target] = notTaken + taken;\n}\n\n// Function to find the number of subsets with the given sum 'k'\nfunction findWays(num, k) {\n  const n = num.length;\n  const dp = new Array(n);\n  for (let i = 0; i &lt; n; i++) {\n    dp[i] = new Array(k + 1).fill(-1);\n  }\n\n  return findWaysUtil(n - 1, k, num, dp);\n}\n\n// Main function\nfunction main() {\n  const arr = [1, 2, 2, 3];\n  const k = 3;\n\n  console.log(\"The number of subsets found are: \" + findWays(arr, k));\n}\n\n// Run the main function\nmain();\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Brute Force Here -->\n</p><p><strong>Output:</strong> The number of subsets found are 3\n\n</p>\n<p></p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n<!-- Insert Time and Space Complexity of Brute Force Here -->\n<p><strong>Time Complexity: O(N*K)</strong></p>\n<p>Reason: There are N*K states therefore at max \u2018N*K\u2019 new problems will be solved.</p>\n<p><strong>Space Complexity: O(N*K) + O(N)</strong></p>\n<p>Reason: We are using a recursion stack space(O(N)) and a 2D array ( O(N*K)).</p>\n</p>\n</details>\n</div>\n</details>\n</div>\n<!-- Brute Force Approach Ends here -->\n\n\n<!-- Better Approach Starts from here -->\n\n<div id=\"better-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nTabulation Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition For Better Approach Here -->\n<p>To convert the memoization approach to a tabulation one, create a dp array with the same size as done in memoization. We can initialize it as 0.</p>\n<p><img width=\"624\" height=\"351\" src=\"https://lh6.googleusercontent.com/llVJ0TW2Ql3g4SgdG9PA4vSiqATbqULrBkXHvCD4ZrcONLlOwM5gkID8ah2RziPhaLJSRtl_3pk85TTYoCaXxGZ2LIHUFYEBLVGofj88yPGUY33aNjJg_gR73vvo16EldsCqdx2_\"></p>\n<p>First, we need to initialize the base conditions of the recursive solution.</p>\n<ul><li>If target == 0, ind can take any value from 0 to n-1, therefore we need to set the value of the first column as 1.</li></ul>\n<p><img width=\"624\" height=\"351\" src=\"https://lh4.googleusercontent.com/IejUpnjipFSgWV8fHqls8RW1TeIUegz4Dz-_WCdOuW7VK0ZFU39hufCGd3pyFi8nxD5Fo6i0cDKXdbg0P30WfJ0F1hDTXKLXudiU4BKlc6a5ML3bnUYbj--YRRGYG5CyitvZ7DPm\"></p>\n<ul><li>The first row dp[0][] indicates that only the first element of the array is considered, therefore for the target value equal to arr[0], only cell with that target will be true, so explicitly set dp[0][arr[0]] =1, (dp[0][arr[0]] means that we are considering the first element of the array with the target equal to the first element itself). Please note that it can happen that arr[0]&gt;target, so we first check it: if(arr[0]&lt;=target) then set dp[0][arr[0]] = 1.</li></ul>\n<p><img width=\"624\" height=\"351\" src=\"https://lh4.googleusercontent.com/bnxG7Mjq4ly91LduBbS5piMFYU_3Wdnfd7sndR-qNeeLqATuTt1SLstSVi8ckkrtbU8BIbOvXeIHj4KUQ7Ggo4qIJycd1sHiqSr9jU6cWXGByGmD89oJtoMq2_cWKXZhhznZ2ErD\"></p>\n<ul><li>After that, we will set our nested for loops to traverse the dp array, and following the logic discussed in the recursive approach, we will set the value of each cell. Instead of recursive calls, we will use the dp array itself.</li><li>At last, we will return dp[n-1][k] as our answer.</li></ul>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h>\nusing namespace std;\n\n// Function to count the number of subsets with a given sum\nint findWays(vector&lt;int>&amp; num, int k) {\n    int n = num.size();\n\n    // Create a 2D DP table with dimensions n x k+1, initialized with zeros\n    vector&lt;vector&lt;int>> dp(n, vector&lt;int>(k + 1, 0));\n\n    // Base case: If the target sum is 0, there is one valid subset (the empty subset)\n    for (int i = 0; i &lt; n; i++) {\n        dp[i][0] = 1;\n    }\n\n    // Initialize the first row based on the first element of the array\n    if (num[0] &lt;= k) {\n        dp[0][num[0]] = 1;\n    }\n\n    // Fill in the DP table using a bottom-up approach\n    for (int ind = 1; ind &lt; n; ind++) {\n        for (int target = 1; target &lt;= k; target++) {\n            // Exclude the current element\n            int notTaken = dp[ind - 1][target];\n\n            // Include the current element if it doesn't exceed the target\n            int taken = 0;\n            if (num[ind] &lt;= target) {\n                taken = dp[ind - 1][target - num[ind]];\n            }\n\n            // Update the DP table\n            dp[ind][target] = notTaken + taken;\n        }\n    }\n\n    // The final result is in the last cell of the DP table\n    return dp[n - 1][k];\n}\n\nint main() {\n    vector&lt;int> arr = {1, 2, 2, 3};\n    int k = 3;\n\n    cout &lt;&lt; \"The number of subsets found are \" &lt;&lt; findWays(arr, k);\n\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\nclass TUF {\n    // Function to find the number of subsets with a given target sum\n    static int findWays(int[] num, int k) {\n        int n = num.length;\n\n        // Create a 2D DP array to store the number of ways to achieve each target sum\n        int[][] dp = new int[n][k + 1];\n\n        // Initialize the first row of the DP array\n        for (int i = 0; i &lt; n; i++) {\n            dp[i][0] = 1;\n        }\n\n        // Initialize the first column of the DP array\n        if (num[0] &lt;= k) {\n            dp[0][num[0]] = 1;\n        }\n\n        // Fill in the DP array using bottom-up dynamic programming\n        for (int ind = 1; ind &lt; n; ind++) {\n            for (int target = 1; target &lt;= k; target++) {\n                // Calculate the number of ways when the current element is not taken\n                int notTaken = dp[ind - 1][target];\n\n                // Calculate the number of ways when the current element is taken\n                int taken = 0;\n                if (num[ind] &lt;= target) {\n                    taken = dp[ind - 1][target - num[ind]];\n                }\n\n                // Update the DP array for the current element and target sum\n                dp[ind][target] = notTaken + taken;\n            }\n        }\n\n        // The result is stored in the last cell of the DP array\n        return dp[n - 1][k];\n    }\n\n    public static void main(String args[]) {\n        int arr[] = {1, 2, 2, 3};\n        int k = 3;\n\n        // Calculate and print the number of subsets that sum up to k\n        System.out.println(\"The number of subsets found are \" + findWays(arr, k));\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\ndef findWays(num, k):\n    n = len(num)\n    \n    # Initialize a 2D DP array to store the count of subsets for different targets.\n    dp = [[0] * (k + 1) for _ in range(n)]\n    \n    # Base case: There is always one way to make a subset with a target sum of 0 (empty subset).\n    for i in range(n):\n        dp[i][0] = 1\n    \n    # Handle the base case for the first element in the array.\n    if num[0] &lt;= k:\n        dp[0][num[0]] = 1\n\n    # Iterate through the elements in the array.\n    for ind in range(1, n):\n        for target in range(1, k + 1):\n            # If the current element is not taken, the count is the same as the previous row.\n            notTaken = dp[ind - 1][target]\n            \n            # If the current element is taken, subtract its value from the target and check the previous row.\n            taken = 0\n            if num[ind] &lt;= target:\n                taken = dp[ind - 1][target - num[ind]]\n            \n            # Update the DP array with the total count of ways (taken + notTaken).\n            dp[ind][target] = notTaken + taken\n\n    # The result is stored in the bottom-right cell of the DP array.\n    return dp[n - 1][k]\n\ndef main():\n    arr = [1, 2, 2, 3]\n    k = 3\n    \n    # Find and print the number of subsets that can be formed with a sum of 'k'.\n    print(\"The number of subsets found are\", findWays(arr, k))\n\nif __name__ == \"__main__\":\n    main()\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\nfunction findWays(num, k) {\n  const n = num.length;\n\n  // Create a 2D array 'dp' for dynamic programming\n  const dp = new Array(n);\n  for (let i = 0; i &lt; n; i++) {\n    dp[i] = new Array(k + 1).fill(0);\n  }\n\n  // Initialize the first row of 'dp' to 1 (only one way to get a sum of 0)\n  for (let i = 0; i &lt; n; i++) {\n    dp[i][0] = 1;\n  }\n\n  // Initialize the first column of 'dp' based on the first element of 'num'\n  if (num[0] &lt;= k) {\n    dp[0][num[0]] = 1;\n  }\n\n  // Fill the 'dp' array using bottom-up dynamic programming\n  for (let ind = 1; ind &lt; n; ind++) {\n    for (let target = 1; target &lt;= k; target++) {\n      const notTaken = dp[ind - 1][target];\n\n      let taken = 0;\n      if (num[ind] &lt;= target) {\n        taken = dp[ind - 1][target - num[ind]];\n      }\n\n      dp[ind][target] = notTaken + taken;\n    }\n  }\n\n  return dp[n - 1][k];\n}\n\n// Main function\nfunction main() {\n  const arr = [1, 2, 2, 3];\n  const k = 3;\n\n  console.log(\"The number of subsets found are: \" + findWays(arr, k));\n}\n\n// Run the main function\nmain();\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Better Approach Here -->\n<strong>Output:</strong> The number of subsets found are 3\n\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Better Approach Here -->\n<p><strong>Time Complexity: O(N*K)</strong></p>\n<p>Reason: There are two nested loops</p>\n<p><strong>Space Complexity: O(N*K)</strong></p>\n<p>Reason: We are using an external array of size \u2018N*K\u2019. Stack Space is eliminated.</p>\n</p>\n</details>\n</div>\n</details>\n</div>\n<!-- Better Approach Ends from here -->\n\n\n<!-- Optimal Approach Starts from here -->\n\n<div id=\"optimal-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nSpace Optimization Approach \n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm of Better Approach Here -->\n<p>If we closely look the relation,</p>\n<p><strong>dp[ind][target] =&nbsp; dp[ind-1][target] + dp[ind-1][target-arr[ind]]</strong></p>\n<p>We see that to calculate a value of a cell of the dp array, we need only the previous row values (say prev). So, we don\u2019t need to store an entire array. Hence we can space optimize it.</p>\n<p><strong>Note: </strong>Whenever we create a new row ( say cur), we need to explicitly set its first element is true according to our base condition.</p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h>\nusing namespace std;\n\n// Function to count the number of subsets with a given sum\nint findWays(vector&lt;int>&amp; num, int k) {\n    int n = num.size();\n\n    // Initialize a vector 'prev' to represent the previous row of the DP table\n    vector&lt;int> prev(k + 1, 0);\n\n    // Base case: If the target sum is 0, there is one valid subset (the empty subset)\n    prev[0] = 1;\n\n    // Initialize the first row based on the first element of the array\n    if (num[0] &lt;= k) {\n        prev[num[0]] = 1;\n    }\n\n    // Fill in the DP table using a bottom-up approach\n    for (int ind = 1; ind &lt; n; ind++) {\n        // Create a vector 'cur' to represent the current row of the DP table\n        vector&lt;int> cur(k + 1, 0);\n\n        cur[0] = 1;\n\n        for (int target = 1; target &lt;= k; target++) {\n            // Exclude the current element\n            int notTaken = prev[target];\n\n            // Include the current element if it doesn't exceed the target\n            int taken = 0;\n            if (num[ind] &lt;= target) {\n                taken = prev[target - num[ind]];\n            }\n\n            // Update the current row of the DP table\n            cur[target] = notTaken + taken;\n        }\n\n        // Set 'cur' as 'prev' for the next iteration\n        prev = cur;\n    }\n\n    // The final result is in the last cell of the 'prev' vector\n    return prev[k];\n}\n\nint main() {\n    vector&lt;int> arr = {1, 2, 2, 3};\n    int k = 3;\n\n    cout &lt;&lt; \"The number of subsets found are \" &lt;&lt; findWays(arr, k);\n\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\nclass TUF {\n    // Function to find the number of subsets with a given target sum\n    static int findWays(int[] num, int k) {\n        int n = num.length;\n\n        // Create an array to store the number of ways to achieve each target sum\n        int[] prev = new int[k + 1];\n\n        // Initialize the first element of the array\n        prev[0] = 1;\n\n        // Initialize the array for the first column\n        if (num[0] &lt;= k) {\n            prev[num[0]] = 1;\n        }\n\n        // Fill in the array using bottom-up dynamic programming\n        for (int ind = 1; ind &lt; n; ind++) {\n            // Create an array to store the number of ways for the current element\n            int[] cur = new int[k + 1];\n\n            // Initialize the first element of the current array\n            cur[0] = 1;\n\n            for (int target = 1; target &lt;= k; target++) {\n                // Calculate the number of ways when the current element is not taken\n                int notTaken = prev[target];\n\n                // Calculate the number of ways when the current element is taken\n                int taken = 0;\n                if (num[ind] &lt;= target) {\n                    taken = prev[target - num[ind]];\n                }\n\n                // Update the current array for the current element and target sum\n                cur[target] = notTaken + taken;\n            }\n\n            // Update the previous array with the current array for the next iteration\n            prev = cur;\n        }\n\n        // The result is stored in the last element of the array\n        return prev[k];\n    }\n\n    public static void main(String args[]) {\n        int arr[] = {1, 2, 2, 3};\n        int k = 3;\n\n        // Calculate and print the number of subsets that sum up to k\n        System.out.println(\"The number of subsets found are \" + findWays(arr, k));\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\ndef findWays(num, k):\n    n = len(num)\n\n    # Initialize a list 'prev' to store the count of subsets for different targets.\n    prev = [0 for i in range(k + 1)]\n    \n    # Base case: There is always one way to make a subset with a target sum of 0 (empty subset).\n    prev[0] = 1\n    \n    # Handle the base case for the first element in the array.\n    if num[0] &lt;= k:\n        prev[num[0]] = 1\n    \n    # Iterate through the elements in the array.\n    for ind in range(1, n):\n        # Initialize a new list 'cur' to store the count for the current row.\n        cur = [0 for i in range(k + 1)]\n        cur[0] = 1\n        \n        for target in range(1, k + 1):\n            # If the current element is not taken, the count is the same as the previous row.\n            notTaken = prev[target]\n    \n            # If the current element is taken, subtract its value from the target and check the previous row.\n            taken = 0\n            if num[ind] &lt;= target:\n                taken = prev[target - num[ind]]\n        \n            # Update the 'cur' list with the total count of ways (taken + notTaken).\n            cur[target] = notTaken + taken\n        \n        # Update 'prev' to 'cur' for the next iteration.\n        prev = cur\n    \n    # The result is stored in 'prev[k]', indicating the count of subsets that can be formed with a sum of 'k'.\n    return prev[k]\n\ndef main():\n    arr = [1, 2, 2, 3]\n    k = 3\n    \n    # Find and print the number of subsets that can be formed with a sum of 'k'.\n    print(\"The number of subsets found are\", findWays(arr, k))\n\nif __name__ == \"__main__\":\n    main()\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\nfunction findWays(num, k) {\n  const n = num.length;\n\n  // Initialize the 'prev' array for dynamic programming\n  const prev = new Array(k + 1).fill(0);\n  prev[0] = 1;\n\n  // Initialize the first column of 'prev' based on the first element of 'num'\n  if (num[0] &lt;= k) {\n    prev[num[0]] = 1;\n  }\n\n  // Fill the 'prev' array using bottom-up dynamic programming\n  for (let ind = 1; ind &lt; n; ind++) {\n    const cur = new Array(k + 1).fill(0);\n    cur[0] = 1;\n    for (let target = 1; target &lt;= k; target++) {\n      const notTaken = prev[target];\n\n      let taken = 0;\n      if (num[ind] &lt;= target) {\n        taken = prev[target - num[ind]];\n      }\n\n      cur[target] = notTaken + taken;\n    }\n\n    // Update 'prev' array with 'cur' for the next iteration\n    for (let i = 0; i &lt; prev.length; i++) {\n      prev[i] = cur[i];\n    }\n  }\n\n  return prev[k];\n}\n\n// Main function\nfunction main() {\n  const arr = [1, 2, 2, 3];\n  const k = 3;\n\n  console.log(\"The number of subsets found are: \" + findWays(arr, k));\n}\n\n// Run the main function\nmain();\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Optimal Apporach Here -->\n<strong>Output:</strong>The number of subsets found are 3\n\n\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Optimal Approach-->\n<p><strong>Time Complexity: O(N*K)</strong></p>\n<p>Reason: There are two nested loops</p>\n<p><strong>Space Complexity: O(K)</strong></p>\n<p>Reason: We are using an external array of size \u2018K+1\u2019 to store only one row.</p>\n</p>\n</details>\n</div>\n</details>\n</div>\n<!-- Optimal Approach Starts from here -->\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n<details>\n<summary class=\"main-summary\">\n<span>\nVideo Explanation\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"yt-video-wrapper\">\n\n<!-- Insert iframe embed Link of Youtube Video-->\n<iframe class=\"lazy-loaded\" loading=\"lazy\" title=\"Counts Subsets with Sum K\" width=\"810\" height=\"456\" data-lazy-type=\"iframe\" data-src=\"https://www.youtube.com/embed/ZHyb-A2Mte4?si=m_X4ZmgRHM-Hc04c\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\" src=\"https://www.youtube.com/embed/ZHyb-A2Mte4?feature=oembed\"></iframe><noscript>\n<iframe loading=\"lazy\" title=\"Counts Subsets with Sum K\" width=\"810\" height=\"456\" src=\"https://www.youtube.com/embed/ZHyb-A2Mte4?si=m_X4ZmgRHM-Hc04c\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe></noscript>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script>\n\nconst codeSections = document.querySelectorAll('.code-section');\n\n// Get last selected language from localStorage or set default value\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\n// Update last selected language for all sections and store in localStorage\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\n// Handle copy button click event\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\n// Set initial state of the tabs\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<script>\nconst codeSections = document.querySelectorAll('.code-section');\n\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script src=\"https://takeuforward.org/UXApproachDropDowns/3ApproachJSScript.js\"></script>\n<!-- /wp:html -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;<strong><a href=\"https://www.linkedin.com/in/anshuman-sharma-a1b245194/\" target=\"_blank\" rel=\"noreferrer noopener\">Anshuman Sharma</a></strong>&nbsp;<em><em>and&nbsp;<a href=\"https://www.linkedin.com/in/abhipsita-das-5b7069212/?originalSubdomain=in\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>Abhipsita Das</strong></a></em></em></em> <em>for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->"
}