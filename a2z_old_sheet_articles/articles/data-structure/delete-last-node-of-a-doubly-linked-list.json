{
    "dislikes": 2,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:10:07 GMT+0530 (India Standard Time)",
    "slug": "delete-last-node-of-a-doubly-linked-list",
    "aid": "1681",
    "title": "Delete Last Node of a Doubly Linked List",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/delete-tail-of-dll",
    "topics": [
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "linked-list",
            "topic-title": "Linked List"
        }
    ],
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement: </strong>Given a Doubly Linked List. Delete the last of a Doubly Linked List.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n<details class=\"article_example_details\">\n<summary class=\"article_example_summary\">\n<span><strong>\nExamples\n</strong>\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"atricle_example_content\">\n<pre class=\"wp-block-preformatted\"><!-- Insert New Examples Here -->\n<p><strong>Example 1:</strong> DLL: 1 &lt;-&gt; 3 &lt;-&gt; 4 &lt;-&gt; 1</p>\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/10/dll-delete-head-ex-1-1-1024x181.png\" alt=\"\" class=\"wp-image-12783\" width=\"768\" height=\"136\"></figure>\n<p><strong>Result</strong>: DLL: 1 &lt;-&gt; 3 &lt;-&gt; 4</p>\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/10/dll-1-3-4-1024x217.png\" alt=\"\" class=\"wp-image-12784\" width=\"768\" height=\"163\"></figure>\n<p><strong>Explanation: </strong>After deleting the tail node we will get a doubly linked list. The node at the end of the doubly linked list will no longer be a part of it.</p>\n<p><strong>Input Format: </strong>DLL: 7 &lt;-&gt; 5</p>\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/10/dll-ex-result-2-2-1024x240.png\" alt=\"\" class=\"wp-image-12785\" width=\"768\" height=\"180\"></figure>\n<p><strong>Result</strong>: DLL: 7</p>\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/10/Screenshot-2023-10-03-at-3.44.17-PM-1024x280.png\" alt=\"\" class=\"wp-image-12786\" width=\"768\" height=\"210\"></figure>\n<p><strong>Explanation: </strong>7 will be the only node left after we delete the tail node of the doubly linked list.</p>\n</pre>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Practice Section-->\n<div class=\"practice\">\n<span><strong>Practice: </strong></span>\n<div class=\"problem-buttons\">\n\n<!-- Add Problem Link inside href -->\n<a href=\"https://www.codingninjas.com/studio/problems/delete-last-node-of-a-doubly-linked-list_8160469?utm_source=striver&amp;utm_medium=website&amp;utm_campaign=a_zcoursetuf\" target=\"_blank\" rel=\"noopener\">\n<span>Solve Problem</span>\n<img src=\"https://static.takeuforward.org/wp/uploads/2023/04/Group-11-5.png\" alt=\"code-studio\">\n</a>\n</div>\n</div>\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\nyourself first. </em></p>\n<!-- /wp:html -->\n\n<!-- wp:heading -->\n<h2><strong>Solution:</strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Approach</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To delete the tail of a doubly linked list, we update the linkage between its last node and its second last node. Since a doubly linked list is bidirectional, we set the second last node's next pointer and the last node's back pointer to null. Then, we return the head as the result.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Two edge cases to consider are:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li>If the input doubly linked list is empty, we return null.</li><li>If there is only one node in the list, that node itself will be the tail and we return null after deleting that node.</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Algorithm</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Step 1: </strong>Traverse the doubly linked list to the last node and keep<strong> </strong>track of it using the tail pointer.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We start from the head of the doubly linked list and iterate through the list using a while loop until we reach the last node. The <strong>tail</strong> pointer is used to keep track of this last node.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Step 2: </strong>Obtain the second last node using the tail's back pointer, and name it the <strong>prev</strong> pointer.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Step 3:</strong> Set the 'next' pointer of the prev node to null. This step effectively disconnects the initial tail node from the list in the forward direction, making <strong>prev</strong> the new tail node.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Step 4: </strong>Set the 'back' pointer of the tail node to null. This ensures that the <strong>tail</strong> node no longer points back to the <strong>prev</strong> node, as it is now the last node in the list.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Step 5: </strong>Return the head of the doubly linked list as the result. Now that we have updated the doubly linked list, the list is now one node shorter than before.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":12787,\"width\":768,\"height\":591,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/10/Screenshot-2023-10-03-at-4.01.11-PM-1024x788.png\" alt=\"\" class=\"wp-image-12787\" width=\"768\" height=\"591\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>Step 6: Delete tail (C++ Only)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>\u00a0Note that in C++, it's essential to explicitly<strong> delete the previous tail</strong> to <strong>free</strong> <strong>memory</strong>. In Java, <strong>memory management </strong>is<strong> </strong>automatic, handled by the <strong>garbage collector</strong>, which cleans up unreferenced objects.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include &lt;iostream>\n#include &lt;bits/stdc++.h>\n\nusing namespace std;\n\n// Define a Node class for doubly linked list\nclass Node {\npublic:\n    int data;       // Data stored in the node\n    Node* next;     // Pointer to the next node in the list (forward direction)\n    Node* back;     // Pointer to the previous node in the list (backward direction)\n\n    // Constructor for a Node with both data, a reference to the next node, and a reference to the previous node\n    Node(int data1, Node* next1, Node* back1) {\n        data = data1;\n        next = next1;\n        back = back1;\n    }\n\n    // Constructor for a Node with data, and no references to the next and previous nodes (end of the list)\n    Node(int data1) {\n        data = data1;\n        next = nullptr;\n        back = nullptr;\n    }\n};\n\n// Function to convert an array to a doubly linked list\nNode* convertArr2DLL(vector&lt;int> arr) {\n   // Create the head node with the first element of the array\n    Node* head = new Node(arr[0]); \n   // Initialize 'prev' to the head node\n\n    Node* prev = head;             \n    for (int i = 1; i &lt; arr.size(); i++) {\n        // Create a new node with data from the array and set its 'back' pointer to the previous node\n        Node* temp = new Node(arr[i], nullptr, prev);\n        // Update the 'next' pointer of the previous node to point to the new node\n\n        prev->next = temp;    \n        // Move 'prev' to the newly created node for the next iteration\n   \n       prev = temp;         \n     }\n    // Return the head of the doubly linked list\n\n    return head;  \n}\n\n// Function to print the elements of the doubly linked list\nvoid print(Node* head) {\n    while (head != nullptr) {\n        // Print the data in the current node\n        cout &lt;&lt; head->data &lt;&lt; \" \"; \n        // Move to the next node\n        head = head->next;         \n    }\n}\n\n// Function to delete the head of the doubly linked list\n// The functionality of this has been explained in our previous\n// article, please refer to it. \nNode* deleteHead(Node* head) {\n    if (head == nullptr || head->next == nullptr) {\n      // Return NULL if the list is empty or contains only one element\n        return nullptr; \n    }\n\n   // Store the current head as 'prev'\n    Node* prev = head;      \n     // Move 'head' to the next node\n    head = head->next;    \n\n // Set 'back' pointer of the new head to nullptr\n    head->back = nullptr;   \n\n // Set 'next' pointer of 'prev' to nullptr\n    prev->next = nullptr;  \n\n   // Return the new head\n    return head;          \n}\n\n// Function to delete the tail of the doubly linked list\nNode* deleteTail(Node* head) {\n    if (head == nullptr || head->next == nullptr) {\n     // If the list is empty or has only one node, return null\n        return nullptr;  \n    }\n    \n    Node* tail = head;\n    while (tail->next != nullptr) {\n     // Traverse to the last node (tail)\n        tail = tail->next; \n    }\n    \n    Node* newTail = tail->back;\n    newTail->next = nullptr;\n    tail->back = nullptr;\n    \n    // Free memory of the deleted node\n    delete tail;  \n    \n    return head;\n}\n\nint main() {\n    vector&lt;int> arr = {12, 5, 8, 7};\n    Node* head = convertArr2DLL(arr);\n    \n    cout &lt;&lt; \"Original Doubly Linked List: \";\n    print(head);\n    \n    cout &lt;&lt; \"\\n\\nAfter deleting the tail node: \";\n    head = deleteTail(head);\n    print(head);\n\n    return 0;\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>12 5 8 7<br>After deleting tail node:\u00a0<br>12 5 8</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(1)</strong> Removing the head of a doubly linked list is a quick operation, taking constant time because it only involves updating references.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(1) </strong>Deleting the head also has minimal memory usage, using a few extra pointers without regard to the list's size.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">public class DLinkedList {\n    public static class Node {\n        public int data;      // Data stored in the node\n        public Node next;     // Reference to the next node in the list (forward direction)\n        public Node back;     // Reference to the previous node in the list (backward direction)\n\n        // Constructor for a Node with both data, a reference to the next node, and a reference to the previous node\n        public Node(int data1, Node next1, Node back1) {\n            data = data1;\n            next = next1;\n            back = back1;\n        }\n\n        // Constructor for a Node with data, and no references to the next and previous nodes (end of the list)\n        public Node(int data1) {\n            data = data1;\n            next = null;\n            back = null;\n        }\n    }\n\n    // Function to convert an array to a doubly linked list\n    private static Node convertArr2DLL(int[] arr) {\n        Node head = new Node(arr[0]); // Create the head node with the first element of the array\n        Node prev = head; // Initialize 'prev' to the head node\n\n        for (int i = 1; i &lt; arr.length; i++) {\n            // Create a new node with data from the array and set its 'back' pointer to the previous node\n            Node temp = new Node(arr[i], null, prev);\n            prev.next = temp; // Update the 'next' pointer of the previous node to point to the new node\n            prev = temp; // Move 'prev' to the newly created node for the next iteration\n        }\n        return head; // Return the head of the doubly linked list\n    }\n\n    // Function to delete the tail of the doubly linked list\n    private static Node deleteTail(Node head) {\n        if (head == null || head.next == null) {\n            return null; // Return null if the list is empty or contains only one element\n        }\n        \n        Node tail = head;\n        while (tail.next != null) {\n            tail = tail.next;\n        }\n        \n        Node newtail = tail.back;\n        \n        newtail.next = null;\n        tail.back = null;\n        \n        return head;\n    }\n\n    // Function to delete the head of the doubly linked list\n    private static Node deleteHead(Node head) {\n        if (head == null || head.next == null) {\n            return null; // Return null if the list is empty or contains only one element\n        }\n        \n        Node prev = head;\n        head = head.next;\n        \n        head.back = null; // Set 'back' pointer of the new head to null\n        prev.next = null; // Set 'next' pointer of 'prev' to null\n        \n        return head;\n    }\n\n    // Function to print the elements of the doubly linked list\n    private static void print(Node head) {\n        while (head != null) {\n            System.out.print(head.data + \" \"); // Print the data in the current node\n            head = head.next; // Move to the next node\n        }\n        System.out.println();\n    }\n\n     public static void main(String[] args) {\n        int[] arr = {12, 5, 6, 8};\n        Node head = convertArr2DLL(arr); // Convert the array to a doubly linked list\n        print(head); // Print the doubly linked list\n        \n        System.out.println(\"Doubly Linked List after deleting tail node: \");\n        head = deleteTail(head);\n        print(head);\n    }\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>12 5 8 7<br>After deleting tail node:&nbsp;<br>12 5 8</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(1)</strong> Removing the head of a doubly linked list is a quick operation, taking constant time because it only involves updating references.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(1) </strong>Deleting the head also has minimal memory usage, using a few extra pointers without regard to the list's size.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block\" data-lang=\"python\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">class Node:\n    def __init__(self, data, next_node=None, back_node=None):\n        self.data = data\n        self.next = next_node\n        self.back = back_node\n\ndef convert_arr_to_dll(arr):\n    # Create the head node with the first element of the array\n    head = Node(arr[0])\n    # Initialize 'prev' to the head node\n    prev = head\n\n    for i in range(1, len(arr)):\n        # Create a new node with data from the array and set its 'back' pointer to the previous node\n        temp = Node(arr[i], None, prev)\n        # Update the 'next' pointer of the previous node to point to the new node\n        prev.next = temp\n        # Move 'prev' to the newly created node for the next iteration\n        prev = temp\n\n    # Return the head of the doubly linked list\n    return head\n\ndef print_dll(head):\n    while head is not None:\n        # Print the data in the current node\n        print(head.data, end=\" \")\n        # Move to the next node\n        head = head.next\n\ndef delete_tail(head):\n    if head is None or head.next is None:\n        return None  # If the list is empty or has only one node, return None\n\n    tail = head\n    while tail.next is not None:\n        # Traverse to the last node (tail)\n        tail = tail.next\n\n    new_tail = tail.back\n    new_tail.next = None\n    tail.back = None\n\n    # Free memory of the deleted node\n    del tail\n\n    return head\n\nif __name__ == \"__main__\":\n    arr = [12, 5, 8, 7]\n    head = convert_arr_to_dll(arr)\n\n    print(\"Original Doubly Linked List:\", end=\" \")\n    print_dll(head)\n\n    print(\"\\n\\nAfter deleting the tail node:\", end=\" \")\n    head = delete_tail(head)\n    print_dll(head)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>12 5 8 7<br>After deleting tail node:&nbsp;<br>12 5 8</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(1)</strong> Removing the head of a doubly linked list is a quick operation, taking constant time because it only involves updating references.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(1) </strong>Deleting the head also has minimal memory usage, using a few extra pointers without regard to the list's size.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>[tabby title=\"JavaScript Code\"]</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">// Define a Node class for doubly linked list\nclass Node {\n    constructor(data, nextNode = null, backNode = null) {\n        this.data = data;\n        this.next = nextNode;\n        this.back = backNode;\n    }\n}\n\n// Function to convert an array to a doubly linked list\nfunction convertArrToDLL(arr) {\n    // Create the head node with the first element of the array\n    const head = new Node(arr[0]);\n    // Initialize 'prev' to the head node\n    let prev = head;\n\n    for (let i = 1; i &lt; arr.length; i++) {\n        // Create a new node with data from the array and set its 'back' pointer to the previous node\n        const temp = new Node(arr[i], null, prev);\n        // Update the 'next' pointer of the previous node to point to the new node\n        prev.next = temp;\n        // Move 'prev' to the newly created node for the next iteration\n        prev = temp;\n    }\n\n    // Return the head of the doubly linked list\n    return head;\n}\n\n// Function to print the elements of the doubly linked list\nfunction printDLL(head) {\n    while (head !== null) {\n        // Print the data in the current node\n        console.log(head.data + \" \");\n        // Move to the next node\n        head = head.next;\n    }\n}\n\n// Function to delete the tail node of the doubly linked list\nfunction deleteTail(head) {\n    if (head === null || head.next === null) {\n        return null;  // If list is empty or has only one node, return null\n    }\n\n    let tail = head;\n    while (tail.next !== null) {\n        // Traverse to the last node (tail)\n        tail = tail.next;\n    }\n\n    const newTail = tail.back;\n    newTail.next = null;\n    tail.back = null;\n\n    // Free memory of the deleted node\n    delete tail;\n\n    return head;\n}\n\nconst arr = [12, 5, 8, 7];\nlet head = convertArrToDLL(arr);\n\nconsole.log(\"Original Doubly Linked List:\", end=\" \");\nprintDLL(head);\n\nconsole.log(\"\\n\\nAfter deleting the tail node:\", end=\" \");\nhead = deleteTail(head);\nprintDLL(head);\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>12 5 8 7<br>After deleting tail node:&nbsp;<br>12 5 8</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(1)</strong> Removing the head of a doubly linked list is a quick operation, taking constant time because it only involves updating references.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(1) </strong>Deleting the head also has minimal memory usage, using a few extra pointers without regard to the list's size.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In case you are learning DSA, you should definitely check out our free\u00a0<a href=\"https://takeuforward.org/strivers-a2z-dsa-course/strivers-a2z-dsa-course-sheet-2/\">A2Z DSA Course</a>\u00a0with videos and blogs.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to\u00a0</em><strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268\" target=\"_blank\" rel=\"noreferrer noopener\">Gauri Tomar</a></strong><em>\u00a0for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,\u00a0</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->",
    "category_tag": "data-structure",
    "likes": 52,
    "preview": "Problem Statement: Given a Doubly Linked List. Delete the last of a Doubly Linked List. Examples Example 1: DLL: 1 <-> 3 <-> 4 <-> 1 Result: DLL: 1 <-> 3 <-> 4 Explanation: After deleting the tail..."
}