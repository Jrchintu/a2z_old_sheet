{
    "dislikes": 6,
    "video": "IFfYfonAFGc",
    "publishedOn": "Sun Mar 24 2024 22:11:29 GMT+0530 (India Standard Time)",
    "slug": "printing-longest-increasing-subsequence-dp-42",
    "aid": "2086",
    "title": "Printing Longest Increasing Subsequence | (DP-42)",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/print-longest-increasing-subsequence",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "dynamic-programming",
            "topic-title": "Dynamic Programming"
        },
        {
            "topic-id": "recursion",
            "topic-title": "Recursion"
        }
    ],
    "content": "<!-- wp:paragraph -->\n<p>This article will consist of three parts:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>First, we will discuss the tabulation dp approach in continuation of the previous article.(/** link to dp 41 *****/.</li><li>Next, we will discuss a new algorithm called the \u201cTabulation algorithm\u201d to solve the problem of finding the longest increasing subsequence.</li><li>In the last section, we will discuss the approach to printing the longest increasing subsequence.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Part 1: Writing the tabulation approach for finding LIS.</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Problem Link: </strong><a href=\"https://takeuforward.org/data-structure/longest-increasing-subsequence-dp-41/\" title=\"\"><strong>Longest Increasing Subsequence</strong></a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To convert the memoization approach to a tabulation one, create a dp array with the same size as done in memoization i.e dp[N][N+1].&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>Now the base case is if(ind==n), we return 0. We can initialize the entire dp array as 0. In this way, we need to write the base case explicitly.</li><li>The changing parameters in the recursive code are ind and prev_index. We will write them in the opposite direction of memoization.&nbsp;</li><li>We will set for a loop of ind to range from n-1 to 0.</li><li>If we look closely at the recursive tree, we will see a pattern that the second parameter, prev_index is always smaller than the first parameter ind. Therefore we will write the for loop for prev_index to start from ind-1 till -1.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https://lh3.googleusercontent.com/CKXCgPvwIOY8fvs4AWjAjVU-jirrpo2a693yxf-bZe6MCcyDnX7HaRTUDVtKg-126AwrxmGz93LDCNE3BUNnWmAdSQ8zn023JbsptHMR1zH4iuiYLwDWGpWaZwnO4IvORFaDLDk-XrgngMYGfZmBTpI\" alt=\"\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:list -->\n<ul><li>Next, we write the recursive logic inside the nested loops.</li><li>We need to keep in that mind that we are storing prev_index in the dp array by making a coordinate shift (discussed in /** link to dp - 41 ** /).</li><li>At last, we will print dp[0][0] as our answer.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    \n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint longestIncreasingSubsequence(int arr[], int n){\n    \n    vector&lt;vector&lt;int&gt;&gt; dp(n+1,vector&lt;int&gt;(n+1,0));\n    \n    for(int ind = n-1; ind&gt;=0; ind --){\n        for (int prev_index = ind-1; prev_index &gt;=-1; prev_index --){\n            \n            int notTake = 0 + dp[ind+1][prev_index +1];\n    \n            int take = 0;\n    \n            if(prev_index == -1 || arr[ind] &gt; arr[prev_index]){\n                \n                take = 1 + dp[ind+1][ind+1];\n            }\n    \n            dp[ind][prev_index+1] = max(notTake,take);\n            \n        }\n    }\n    \n    return dp[0][0];\n}\n\nint main() {\n\t\n\tint arr[] = {10,9,2,5,3,7,101,18};\n\t\n\tint n = sizeof(arr)/sizeof(arr[0]);\n\t\n\tcout&lt;&lt;\"The length of the longest increasing subsequence is \"\n        &lt;&lt;longestIncreasingSubsequence(arr,n);\n\t\n\treturn 0;\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The length of the longest increasing subsequence is 4</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(N*N)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reason: There are two nested loops</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(N*N)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reason: We are using an external array of size \u2018(N+1)*(N+1)\u2019. Stack Space is eliminated.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\n\nclass TUF{\nstatic int longestIncreasingSubsequence(int arr[], int n){\n    \n    int dp[][]=new int[n+1][n+1];\n    \n    for(int ind = n-1; ind&gt;=0; ind --){\n        for (int prev_index = ind-1; prev_index &gt;=-1; prev_index --){\n            \n            int notTake = 0 + dp[ind+1][prev_index +1];\n    \n            int take = 0;\n    \n            if(prev_index == -1 || arr[ind] &gt; arr[prev_index]){\n                \n                take = 1 + dp[ind+1][ind+1];\n            }\n    \n            dp[ind][prev_index+1] = Math.max(notTake,take);\n            \n        }\n    }\n    \n    return dp[0][0];\n}\n\npublic static void main(String args[]) {\n\t\n\tint arr[] = {10,9,2,5,3,7,101,18};\n\t\n\tint n = arr.length;\n\t\n\tSystem.out.println(\"The length of the longest increasing subsequence is \n        \"+longestIncreasingSubsequence(arr,n));\n\t\n}\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The length of the longest increasing subsequence is 4</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(N*N)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reason: There are two nested loops</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(N*N)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reason: We are using an external array of size \u2018(N+1)*(N+1)\u2019. Stack Space is eliminated.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Part 3: Space Optimization</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If we closely we are using two rows: <strong>dp[ind+1][ ], dp[ind][ ],</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So we are not required to contain an entire array, we can simply have two rows next and cur where next corresponds to dp[ind+1] and cur to dp[ind].</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>After declaring next and cur, replace dp[ind+1] to next and dp[ind] with cur and after the inner loop executes, we will set next = cur, so that the cur row can serve as next for the coming iteration.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    \n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint longestIncreasingSubsequence(int arr[], int n){\n    \n    vector&lt;int&gt; next(n+1,0);\n    \n    vector&lt;int&gt; cur(n+1,0);\n    \n    for(int ind = n-1; ind&gt;=0; ind --){\n        for (int prev_index = ind-1; prev_index &gt;=-1; prev_index --){\n            \n            int notTake = 0 + next[prev_index +1];\n    \n            int take = 0;\n    \n            if(prev_index == -1 || arr[ind] &gt; arr[prev_index]){\n                \n                take = 1 + next[ind+1];\n            }\n    \n            cur[prev_index+1] = max(notTake,take);\n        }\n        next = cur;\n    }\n    \n    return cur[0];\n}\n\nint main() {\n\t\n\tint arr[] = {10,9,2,5,3,7,101,18};\n\t\n\tint n = sizeof(arr)/sizeof(arr[0]);\n\t\n\tcout&lt;&lt;\"The length of the longest increasing subsequence is \"\n        &lt;&lt;longestIncreasingSubsequence(arr,n);\n\t\n\treturn 0;\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The length of the longest increasing subsequence is 4</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(N*N)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reason: There are two nested loops.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(N)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reason: We are only using two rows of size n.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\n\nclass TUF{\nstatic int longestIncreasingSubsequence(int arr[], int n){\n    \n    int next[]=new int[n+1];\n    int cur[]=new int[n+1];\n    \n    for(int ind = n-1; ind&gt;=0; ind --){\n        for (int prev_index = ind-1; prev_index &gt;=-1; prev_index --){\n            \n            int notTake = 0 + next[prev_index +1];\n    \n            int take = 0;\n    \n            if(prev_index == -1 || arr[ind] &gt; arr[prev_index]){\n                \n                take = 1 + next[ind+1];\n            }\n    \n            cur[prev_index+1] = Math.max(notTake,take);\n        }\n        next = cur.clone();\n    }\n    \n    return cur[0];\n}\n\npublic static void main(String args[]) {\n\t\n\tint arr[] = {10,9,2,5,3,7,101,18};\n\t\n\tint n = arr.length;\n\t\n\tSystem.out.println(\"The length of the longest increasing subsequence is \n        \"+longestIncreasingSubsequence(arr,n));\n\t\n}\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The length of the longest increasing subsequence is 4</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(N*N)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reason: There are two nested loops.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(N)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reason: We are only using two rows of size n.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Part 2: Tabulation algorithm to find the length of the longest increasing subsequence.</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Algorithm description:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We need to find the length of the longest increasing subsequence if an array of length n.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For example:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https://lh5.googleusercontent.com/FZk7ZlqBDRVyz1PGEhEKd_OOhOC5Z-Pkw-eLyjTFXBkD_ZqxCIIrF83c6_XBiliBQpXhhGx_Soz6ktIwxo_OUkfI2iHTK71cK5gPon-wzfIjtnKcLwOsFGAE9NwxnUeXf4dKPx6yBmZnldHHCmo-ywc\" alt=\"\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Now in this algorithm, we need to build logic to get an array( say dp), For this particular example, the dp array will look like this:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https://lh3.googleusercontent.com/Gi0Q_6yvYp0Z9zKxA-ShOxZEE-LQAwwQ_oPNeA8vfbp9ZoEvc0TYxi8TT8D2c6LcafDfq0OyXKqBMnVVxA7BMDmDDMkiXEKf7sCz7MReMQr8-kvtN6Q1p4JeeA1sjzcMj-rpwtLhVOMSWEShIvoHdas\" alt=\"\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Now every cell value in this dp array is defined as follows:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For every index i of the array \u2018arr\u2019;<br>dp[ i ] is the length of the longest increasing subsequence that is possible that end with index ind of the original array.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Few examples:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(i) For i = 0, dp[i] =1 , therefore LIS length with the element arr[0], i.e 5 as its last element is 1. The case :[ 5 ].</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(ii) For i = 4, dp[i] =3 , therefore LIS length with the element arr[4], i.e 16 as its last element is 3. The case :[ 5, 11, 16 ].</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Once we get this dp array our job is to simply return the maximum cell value of the entire array as the length of the longest increasing subsequence.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now, the main question arises: how do we get this dp[ ] array? The following section explains the logic and the approach.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Logic and approach for the dp array</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We know that a single element can always be considered to be included in the LIS, as it can not break any rule of forming the LIS. Therefore we can initialize the dp array by 1, it simply means that currently, LIS is having only that particular men=mber element itself ([5], [4], [11], \u2026).&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https://lh5.googleusercontent.com/ES144savd7ffK80yPI7JQ8rl96imoeC8QSSa9OJGjaWLe6_06P7wwI3EiI0yk7G0FvgU7eX7-jQybhnUAOC7FfpAxHV3OyOnE_pWqLWeIxezt-KGyIRvmpbAN83J6uF1PzMI3oWHHgTVJHnjUOPqbts\" alt=\"\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Now let us manually try to find dp[i], for some indexes in order to understand the algorithm.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(i) For i = 0, 5 can be the only element that can be in the LIS, as there is no element before it therefore the final dp[i] for i=0, will be 1 only (marked in red).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https://lh5.googleusercontent.com/AjWOjoLDmqPYU4swK9E13ibiunXXC3BOjYwxSqRttLNl8L-Frx1sTWAIsQz3TdCSnu2s8c0-C82woSgAZ3p_0rq_KIC0Q36fHDRMq5vk9T2kwz8L5Z8dQ0HZdDrrXMY8NRBihPvLal5LOW_cjNAuHzc\" alt=\"\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>(ii)&nbsp; For i = 1, 4 can be the only element that can be in the LIS, as there is only element 5 before but 5 is greater than 4 so cannot be considered in the LIS. therefore the final dp[i] for i=1, will be 1 only (marked in red).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https://lh3.googleusercontent.com/eyu56-GQ9vcitLWJXPnXGuGPy7STdQlQ3hNU0UMOlgThOcqwPOtNJHHZ1JQFFqo1dnguEiN7C5LgALrcUO7ZDeCYZlT-CVhq1vyHoHI26VWIvAr2ghNWL3codjKO1DediNcMjbsPJUlCbeTsgaH5xnE\" alt=\"\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>(iii) For i = 2, either 5 or 4 can be considered in the LIS as the last element of 11. We will run a loop that checks all <strong>prev_index </strong>and if the arr[prev_index] &lt; arr[i], we can simply say that the element should be updated to 1+dp[prev_index]. 1 means that we are adding one element to the LIS, here 11, and also the LIS of the previous indexes which are given by dp[prev_index]. Note we will update only for that prev_index, whose prev_index is the maximum. We will discuss this in the next to next case also.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https://lh6.googleusercontent.com/iCqMGnk2pxscIqr3KvzFMxxGLLTQ59X0YOYHi53HFvBkaODekYN7rO4s1MHASL0RwA7nh2Ga-nDNjMq_KMfFuBU9OxOWlQHLBojP9wIv0lDaOqskJW2oOFgF4PbEOf2YNd1YRe4FToU5qN8pvnaEknU\" alt=\"\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>(iv) For i=3, it is the similar case as (ii), so dp[3] = 1.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(v) For i=4, we will again loop for all the prev_index of 4 and we make the following observations:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>LIS ending at element 5 can be considered (dp[0] = 1)</li><li>LIS ending at element 4 can also be considered. (dp[1] = 1)</li><li>LIS ending at element 11 can also be considered. (dp[1] = 2)</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Out of all these possible choices, we will consider LIS ending at element 11 because if we consider it we will have 2 elements of that&nbsp; [ 5, 11] and element 16 itself, giving us a LIS of length 3, the maximum. All other options were giving a LIS of length 2.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This is the reason that we consider that prev_index whose dp[prev_index] is maximum.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https://lh5.googleusercontent.com/x68R6p2TdjZxeoBaAKgLd5epFgTvuKLXYs3ey90bC7bHQ2-bI5E_6xrO6yBqwD6Qlv8u5jWcrLObxwayTlj_Xg0fN0vrCoVu9zp3xB75fheEWN88gUc30gMbVq2jQf1q18eny5oxbtLAxDbPZF0TaKk\" alt=\"\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>Algorithm approach:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The algorithm approach can be stated as follows:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>Run an outer loop running from 0 to n-1. Every outer loop iteration will find the dp[i] value.</li><li>Nest another loop inside it. For particular index i, this inner loop will help us to find the maximum value of dp[prev_index].</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:image {\"width\":584,\"height\":363} -->\n<figure class=\"wp-block-image is-resized\"><img src=\"https://lh6.googleusercontent.com/7K8qDbq7_BQnw3Nwe692ul_904i81SXsUzSqeSoCR11x5QK6pnbwFloUaM90X6jPe0wtGkVjDX292Cex0VAroxaSNl05RK6_cATRXji-SUm_lEPjKAgJ4MQvqVNWFpk8aXiU4-H-kQu98O2hHu7el5M\" alt=\"\" width=\"584\" height=\"363\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:list -->\n<ul><li>Now inside the inner loop, we will first of all see that the element at the prev_index is smaller than the element at index i. If it is, we update dp[i] with the max(1+dp[prev_ind],dp[prev_index]).</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:image {\"width\":669,\"height\":363} -->\n<figure class=\"wp-block-image is-resized\"><img src=\"https://lh4.googleusercontent.com/-kr-qcpfXa79pyBxvx1He_7xuwDJiLNtJbemn_T4pY0i1TWl0BkorbAOhUGEDo_UNkbyVumlWbwRo-FHCZA17y8gxANFemIABdhScjHED_Jmer6RBAtaFod78Mok_H4ylu1cDgXiMForcMsgrJ8hR_k\" alt=\"\" width=\"669\" height=\"363\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:list -->\n<ul><li>At last, we will loop over the dp array and return its largest value as our answer.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    \n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint longestIncreasingSubsequence(int arr[], int n){\n    \n    vector&lt;int&gt; dp(n,1);\n    \n    for(int i=0; i&lt;=n-1; i++){\n        for(int prev_index = 0; prev_index &lt;=i-1; prev_index ++){\n            \n            if(arr[prev_index]&lt;arr[i]){\n                dp[i] = max(dp[i], 1 + dp[prev_index]);\n            }\n        }\n    }\n    \n    int ans = -1;\n    \n    for(int i=0; i&lt;=n-1; i++){\n        ans = max(ans, dp[i]);\n    }\n    \n    return ans;\n}\n\nint main() {\n\t\n\tint arr[] = {10,9,2,5,3,7,101,18};\n\t\n\tint n = sizeof(arr)/sizeof(arr[0]);\n\t\n\tcout&lt;&lt;\"The length of the longest increasing subsequence is \"\n        &lt;&lt;longestIncreasingSubsequence(arr,n);\n\t\n\treturn 0;\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The length of the longest increasing subsequence is 4</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(N*N)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reason: There are two nested loops.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(N)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reason: We are only using two rows of size \u2018N\u2019.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\n\nclass TUF{\nstatic int longestIncreasingSubsequence(int arr[], int n){\n    \n    int dp[]=new int[n];\n    Arrays.fill(dp,1);\n    \n    for(int i=0; i&lt;=n-1; i++){\n        for(int prev_index = 0; prev_index &lt;=i-1; prev_index ++){\n            \n            if(arr[prev_index]&lt;arr[i]){\n                dp[i] = Math.max(dp[i], 1 + dp[prev_index]);\n            }\n        }\n    }\n    \n    int ans = -1;\n    \n    for(int i=0; i&lt;=n-1; i++){\n        ans = Math.max(ans, dp[i]);\n    }\n    \n    return ans;\n}\n\npublic static void main(String args[]) {\n\t\n\tint arr[] = {10,9,2,5,3,7,101,18};\n\t\n\tint n = arr.length;\n\t\n\tSystem.out.println(\"The length of the longest increasing subsequence is \n        \"+longestIncreasingSubsequence(arr,n));\n\t\n}\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The length of the longest increasing subsequence is 4</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(N*N)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reason: There are two nested loops.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(N)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reason: We are only using two rows of size \u2018N\u2019.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Part 3: Printing the LIS</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In order to print the LIS, we maintain a separate array along with a dp array (say hash).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Whenever we update our dp[i] value in the inner loop, we know that for index i, the previous index is prev_index. Therefore we simply store prev_index to hash[ i ]. In this way, we will have a way to trace back the LIS.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Whenever we have computed the entire dp array and we find the maximum value in it. We store that maximum value\u2019s index in a variable ( say last_index). Now with this last_index, and the hash array we can trace back the LIS elements.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    \n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include &lt;bits/stdc++.h>\nusing namespace std;\n\nint longestIncreasingSubsequence(int arr[], int n){\n    \n    vector&lt;int> dp(n,1);\n    vector&lt;int> hash(n,1);\n    \n    for(int i=0; i&lt;=n-1; i++){\n        \n        hash[i] = i; // initializing with current index\n        for(int prev_index = 0; prev_index &lt;=i-1; prev_index ++){\n            \n            if(arr[prev_index]&lt;arr[i] &amp;&amp; 1 + dp[prev_index] > dp[i]){\n                dp[i] = 1 + dp[prev_index];\n                hash[i] = prev_index;\n            }\n        }\n    }\n    \n    int ans = -1;\n    int lastIndex =-1;\n    \n    for(int i=0; i&lt;=n-1; i++){\n        if(dp[i]> ans){\n            ans = dp[i];\n            lastIndex = i;\n        }\n    }\n    \n    vector&lt;int> temp;\n    temp.push_back(arr[lastIndex]);\n    \n    while(hash[lastIndex] != lastIndex){ // till not reach the initialization value\n        lastIndex = hash[lastIndex];\n        temp.push_back(arr[lastIndex]);    \n    }\n    \n    // reverse the array \n    reverse(temp.begin(),temp.end());\n    \n    cout&lt;&lt;\"The subsequence elements are \";\n    \n    for(int i=0; i&lt;temp.size(); i++){\n        cout&lt;&lt;temp[i]&lt;&lt;\" \";\n    }\n    cout&lt;&lt;endl;\n    \n    return ans;\n}\n\nint main() {\n\t\n\tint arr[] = {10,9,2,5,3,7,101,18};\n\t\n\tint n = sizeof(arr)/sizeof(arr[0]);\n\tlongestIncreasingSubsequence(arr,n);\n\treturn 0;\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The subsequence elements are 2 5 7 101&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(N*N)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reason: There are two nested loops.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(N)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reason: We are only using two rows of size \u2018N\u2019.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\n\nclass TUF{\nstatic int longestIncreasingSubsequence(int arr[], int n){\n    \n    int[] dp=new int[n];\n    Arrays.fill(dp,1);\n    int[] hash=new int[n];\n    Arrays.fill(hash,1);\n    \n    for(int i=0; i&lt;=n-1; i++){\n        \n        hash[i] = i; // initializing with current index\n        for(int prev_index = 0; prev_index &lt;=i-1; prev_index ++){\n            \n            if(arr[prev_index]&lt;arr[i] &amp;&amp; 1 + dp[prev_index] &gt; dp[i]){\n                dp[i] = 1 + dp[prev_index];\n                hash[i] = prev_index;\n            }\n        }\n    }\n    \n    int ans = -1;\n    int lastIndex =-1;\n    \n    for(int i=0; i&lt;=n-1; i++){\n        if(dp[i]&gt; ans){\n            ans = dp[i];\n            lastIndex = i;\n        }\n    }\n    \n    ArrayList&lt;Integer&gt; temp=new ArrayList&lt;&gt;();\n    temp.add(arr[lastIndex]);\n    \n    while(hash[lastIndex] != lastIndex){ // till not reach the initialization value\n        lastIndex = hash[lastIndex];\n        temp.add(arr[lastIndex]);    \n    }\n    \n    // reverse the array \n    \n    System.out.print(\"The subsequence elements are \");\n    \n    for(int i=temp.size()-1; i&gt;=0; i--){\n        System.out.print(temp.get(i)+\" \");\n    }\n    System.out.println();\n    \n    return ans;\n}\n\npublic static void main(String args[]) {\n\t\n\tint arr[] = {10,9,2,5,3,7,101,18};\n\t\n\tint n = arr.length;\n\tlongestIncreasingSubsequence(arr,n);\n\t\n}\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The subsequence elements are 2 5 7 101&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(N*N)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reason: There are two nested loops.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(N)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reason: We are only using two rows of size \u2018N\u2019.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;<strong><a href=\"https://www.linkedin.com/in/anshuman-sharma-a1b245194/\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>Anshuman Sharma</strong></a></strong>&nbsp;for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a>.&nbsp;<em>If you want to suggest any improvement/correction in this article please mail us at&nbsp;write4tuf@gmail.com</em></p></blockquote>\n<!-- /wp:quote -->",
    "category_tag": "data-structure",
    "likes": 66,
    "preview": "This article will consist of three parts: * First, we will discuss the tabulation dp approach in continuation of the previous article.(/** link to dp 41 *****/. * Next, we will discuss a new algori..."
}