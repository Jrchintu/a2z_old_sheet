{
    "dislikes": 9,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:09:57 GMT+0530 (India Standard Time)",
    "slug": "grid-unique-paths-2-dp-9",
    "aid": "1632",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/unique-paths-ii",
    "title": "Grid Unique Paths 2 (DP 9)",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "dynamic-programming",
            "topic-title": "Dynamic Programming"
        },
        {
            "topic-id": "recursion",
            "topic-title": "Recursion"
        }
    ],
    "category_tag": "data-structure",
    "likes": 55,
    "preview": "In this article, we will solve the most asked coding interview problem: Grid Unique Paths 2. Problem Link: Maze Obstacles Problem Description: We are given an \u201cN*M\u201d Maze. The maze contains some obs...",
    "content": "<!-- wp:paragraph -->\n<p>In this article, we will solve the most asked coding interview problem: Grid Unique Paths 2.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Problem Link: </strong><a href=\"https://www.codingninjas.com/codestudio/problems/maze-obstacles_977241?source=youtube&amp;campaign=striver_dp_videos&amp;utm_source=youtube&amp;utm_medium=affiliate&amp;utm_campaign=striver_dp_videos\"><strong>Maze Obstacles</strong></a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Problem Description:&nbsp;</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We are given an \u201cN*M\u201d Maze. The maze contains some obstacles. A cell is \u2018blockage\u2019 in the maze if its value is -1. 0 represents non-blockage. There is no path possible through a blocked cell.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We need to count the total number of unique paths from the top-left corner of the maze to the bottom-right corner. At every cell, we can move either down or towards the right.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n<details class=\"article_example_details\">\n<summary class=\"article_example_summary\">\n<span><strong>\nExamples\n</strong>\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"atricle_example_content\">\n<pre class=\"wp-block-preformatted\"><!-- Insert New Examples Here -->\n<pre class=\"wp-block-preformatted\"><strong>Example:</strong>\n\n<img width=\"624\" height=\"351\" src=\"https://lh6.googleusercontent.com/0DE0Aw9ic6x1B_dMqiuJah-CAgwLL4AKdE9r-1Ot1hyqBXC9YuAWf835zNh8vAbEvYu08hLQXrjIae0psqQqAYu6WVhPk6fsOzfgVaEHDRo6MweRI1Po4Q6I8a-y2qrpww4y02MA\"></pre>\n</pre>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Practice Section-->\n<div class=\"practice\">\n<span><strong>Practice: </strong></span>\n<div class=\"problem-buttons\">\n\n<!-- Add Problem Link inside href -->\n<a href=\"https://www.codingninjas.com/studio/problems/unique-paths-ii_977241?utm_source=striver&amp;utm_medium=website&amp;utm_campaign=a_zcoursetuf\" target=\"_blank\" rel=\"noopener\">\n<span>Solve Problem</span>\n<img src=\"https://static.takeuforward.org/wp/uploads/2023/04/Group-11-5.png\" alt=\"code-studio\">\n</a>\n</div>\n</div>\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\nyourself first. </em></p>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<div class=\"horizontal_navbar_dsa_article\">\n<div class=\"grid_container_three\">\n<a href=\"#brute-force-approach\" class=\"three-boxes box-a\">\nMemorization approach\n</a>\n<a href=\"#better-approach\" class=\"three-boxes box-b\">\nTabulation approach\n</a>\n<a href=\"#optimal-approach\" class=\"three-boxes box-c\">\nSpace Optimization\n</a>\n<a href=\"#dsa_article_video_explanation\" class=\"three-boxes box-d\">\n<svg width=\"26\" height=\"26\" viewBox=\"0 0 20 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M8 10L13.19 7L8 4V10ZM19.56 2.17C19.69 2.64 19.78 3.27 19.84 4.07C19.91 4.87 19.94 5.56 19.94 6.16L20 7C20 9.19 19.84 10.8 19.56 11.83C19.31 12.73 18.73 13.31 17.83 13.56C17.36 13.69 16.5 13.78 15.18 13.84C13.88 13.91 12.69 13.94 11.59 13.94L10 14C5.81 14 3.2 13.84 2.17 13.56C1.27 13.31 0.69 12.73 0.44 11.83C0.31 11.36 0.22 10.73 0.16 9.93C0.0900001 9.13 0.0599999 8.44 0.0599999 7.84L0 7C0 4.81 0.16 3.2 0.44 2.17C0.69 1.27 1.27 0.69 2.17 0.44C2.64 0.31 3.5 0.22 4.82 0.16C6.12 0.0899998 7.31 0.0599999 8.41 0.0599999L10 0C14.19 0 16.8 0.16 17.83 0.44C18.73 0.69 19.31 1.27 19.56 2.17Z\" fill=\"red\"></path>\n</svg>\n\n</a>\n<div class=\"box-e tooltip\">\n<svg viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M12.842 9.25L11.9577 10.17C11.2502 10.89 10.8081 11.5 10.8081 13H8.84297V12.5C8.84297 11.39 9.28511 10.39 9.99255 9.67L11.2109 8.41C11.5745 8.05 11.7906 7.55 11.7906 7C11.7906 6.46957 11.5836 5.96086 11.2151 5.58579C10.8465 5.21071 10.3467 5 9.82552 5C9.30434 5 8.80451 5.21071 8.43598 5.58579C8.06745 5.96086 7.86041 6.46957 7.86041 7H5.89531C5.89531 5.93913 6.30938 4.92172 7.04644 4.17157C7.7835 3.42143 8.78316 3 9.82552 3C10.8679 3 11.8675 3.42143 12.6046 4.17157C13.3417 4.92172 13.7557 5.93913 13.7557 7C13.7543 7.84324 13.4259 8.65183 12.842 9.25ZM10.8081 17H8.84297V15H10.8081M9.82552 0C8.53521 0 7.25754 0.258658 6.06545 0.761205C4.87337 1.26375 3.79021 2.00035 2.87783 2.92893C1.03519 4.8043 0 7.34784 0 10C0 12.6522 1.03519 15.1957 2.87783 17.0711C3.79021 17.9997 4.87337 18.7362 6.06545 19.2388C7.25754 19.7413 8.53521 20 9.82552 20C12.4314 20 14.9306 18.9464 16.7732 17.0711C18.6158 15.1957 19.651 12.6522 19.651 10C19.651 4.47 15.2296 0 9.82552 0Z\" fill=\"black\"></path>\n</svg>\n<div class=\"bottom\">\n<p>Expand any one approach by clicking the given options in the bar. Clicking one approach on bar,\ncloses all other expands. You can manually expand more than one approach at a time</p>\n<i></i>\n</div>\n\n</div>\n</div>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Approaches Drop-Down -->\n<div class=\"dsa_article_dropdown_approachs \">\n\n<!-- Brute Force Approach Starts from here -->\n<div id=\"brute-force-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nMemorization Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n<p>Let us look at this example:</p>\n<p><img width=\"233\" height=\"274\" src=\"https://lh3.googleusercontent.com/fW5feW3WMA5yzjhrfdHVxuCcRBkrtS6TgZTg2WEvaRivYSxyfhikjJ1ygVKcvVmwOMzlXbzDM1p6F9-Crlj5iI_xAivVKbo4KIsADRVh-9apA3fEoMATCppZMtooSNlJHeVB8353\"></p>\n<p>A path through the cell[1][1] is not possible as it is blocked, therefore we need to count every other legit path which <strong>doesn\u2019t include </strong>the cell[1][1].</p>\n<p><img width=\"669\" height=\"376\" src=\"https://lh4.googleusercontent.com/LTTzDdiDTfBfHLFO-Sab3bhUuh1HTwVYMbCWQBMWpxribl1uKNu2ORdMyuQoot1HQx4Kat2xOV20D-UPynHdsVdWGB_kHEzwjIM4SkAxTo8-P1eUFr_tOlG_puaUKdn14VaQPEHb\"></p>\n<p><strong>Steps to form the recursive solution:&nbsp;</strong></p>\n<p>We will first form the recursive solution by the three points mentioned in <a href=\"https://takeuforward.org/data-structure/dynamic-programming-introduction/\">Dynamic Programming Introduction</a>.&nbsp;</p>\n<p><strong>Step 1: </strong>Express the problem in terms of indexes.</p>\n<p>We are given two variables N and M, representing the dimensions of the maze.&nbsp;</p>\n<p>We can define the function with two parameters i and j, where i and j represent the row and column of the maze.</p>\n<p><img width=\"548\" height=\"112\" src=\"https://lh3.googleusercontent.com/DKuNSBh_k2b0GFDpO0ivwg-txhazQGqVDgEhtOk-HmYdLrYEAj9--33ovTHPpVx545c_ZsWppYMzoFlXolLK66EzTfkQIIDv2ZqSiyqLddbocUq-LFpK3KrbxKE4nELHGy5ambOT\"></p>\n<p>We will form f(i,j) in such a way that it will handle the obstacles.&nbsp;</p>\n<p>We will be doing a top-down recursion, i.e we will move from the cell[M-1][N-1] and try to find our way to the cell[0][0]. Therefore at every index, we will try to move up and towards the left.</p>\n<p><strong>Base Case:</strong></p>\n<p>There will be three base cases:</p>\n<ul><li>When i&gt;0 and j&gt;0 and mat[i][j] = -1, it means that the current cell is an obstacle, so we can\u2019t find a path from here. Therefore, we return 0.</li><li>When i=0 and j=0, that is we have reached the destination so we can count the current path that is going on, hence we return 1.</li><li>When i&lt;0 and j&lt;0, it means that we have crossed the boundary of the matrix and we couldn\u2019t find a right path, hence we return 0.</li></ul>\n<p>The pseudocode till this step will be:</p>\n<p><img width=\"388\" height=\"285\" src=\"https://lh5.googleusercontent.com/uqMEb3_5vK4pT2rC0bvQi8MP2qcO9IFgsKUlnbfYk9_Q9LfYqDQIsArxin5g2LFZCtOhu9v7wM-ayX3GPF8VH2dyBdA7t8JOSt_BlX4hDwsuu9fWsY_HwJHZ3Slu6bUyPk8uKCvi\"></p>\n<p><strong>Step 2: </strong>Try out all possible choices at a given index.</p>\n<p>As we are writing a top-down recursion, at every index we have two choices, one to go up(\u2191) and the other to go left(\u2190). To go upwards, we will reduce i by 1, and move towards left we will reduce j by 1.</p>\n<p><img width=\"392\" height=\"371\" src=\"https://lh4.googleusercontent.com/wrjpVCWXJlyLSHMCpTJtSakL3s7LjcvAV13m-muqxGmq4LpU4dU-BDRbMkGmrYJjwKo-l2PDRlMJ8X3DZDkf_bbwhmxbOG7VvwCTP8JtMQIgBA5SWCJE8183q_8wFHPAU4rC0qW3\"></p>\n<p><strong>Step 3:&nbsp; Take the maximum of all choices</strong></p>\n<p>As we have to <strong>count </strong>all the possible unique paths, we will return the <strong>sum</strong> of the choices(up and left)&nbsp;</p>\n<p>The final pseudocode after steps 1, 2, and 3:</p>\n<p><img width=\"396\" height=\"420\" src=\"https://lh5.googleusercontent.com/prNPVVob20dPEWPyVTvoulYSq2ip4IoKRYo-nPYrbxsU_K0mb4aWA6wK-HDQuBdi2nGnp35KURi56Ht-N5dXpea_zNCvpOQQ5t1InD2hdpsREhTc-6oA3MHlIw-B19HdnfLsruaO\"></p>\n<p><strong>Steps to memoize a recursive solution:</strong></p>\n<p>If we draw the recursion tree, we will see that there are overlapping subproblems. In order to convert a recursive solution the following steps will be taken:</p>\n<ol><li>Create a dp array of size [n][m]</li><li>Whenever we want to find the answer of a particular row and column (say f(i,j)), we first check whether the answer is already calculated using the dp array(i.e dp[i][j]!= -1 ). If yes, simply return the value from the dp array.</li><li>If not, then we are finding the answer for the given values for the first time, we will use the recursive relation as usual but before returning from the function, we will set dp[i][j] to the solution we get.</li></ol>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h>\nusing namespace std;\n\n// Helper function to count the number of paths from (i, j) to (0, 0)\nint mazeObstaclesUtil(int i, int j, vector&lt;vector&lt;int>> &amp;maze, vector&lt;vector&lt;int>> &amp;dp) {\n    // Base cases\n    if (i > 0 &amp;&amp; j > 0 &amp;&amp; maze[i][j] == -1) return 0; // If there's an obstacle at (i, j), return 0\n    if (i == 0 &amp;&amp; j == 0) return 1; // If we reach the destination (0, 0), return 1\n    if (i &lt; 0 || j &lt; 0) return 0; // If we go out of bounds, return 0\n    if (dp[i][j] != -1) return dp[i][j]; // If the result is already computed, return it\n\n    // Recursive calls to explore paths from (i, j) to (0, 0)\n    int up = mazeObstaclesUtil(i - 1, j, maze, dp);\n    int left = mazeObstaclesUtil(i, j - 1, maze, dp);\n\n    // Store the result in the DP table and return it\n    return dp[i][j] = up + left;\n}\n\n// Main function to count paths with obstacles in a maze\nint mazeObstacles(int n, int m, vector&lt;vector&lt;int>> &amp;maze) {\n    vector&lt;vector&lt;int>> dp(n, vector&lt;int>(m, -1)); // DP table to memoize results\n    return mazeObstaclesUtil(n - 1, m - 1, maze, dp); // Start from the bottom-right corner\n}\n\nint main() {\n    vector&lt;vector&lt;int>> maze{\n        {0, 0, 0},\n        {0, -1, 0},\n        {0, 0, 0}\n    };\n\n    int n = maze.size();\n    int m = maze[0].size();\n\n    cout &lt;&lt; \"Number of paths with obstacles: \" &lt;&lt; mazeObstacles(n, m, maze) &lt;&lt; endl;\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\nclass TUF {\n    // Helper function to calculate the number of paths through the maze\n    static int mazeObstaclesUtil(int i, int j, int[][] maze, int[][] dp) {\n        // If there's an obstacle at this cell or out of bounds, return 0\n        if (i >= 0 &amp;&amp; j >= 0 &amp;&amp; maze[i][j] == -1)\n            return 0;\n        // If we've reached the start cell, there's one valid path\n        if (i == 0 &amp;&amp; j == 0)\n            return 1;\n        // If we're out of bounds, return 0\n        if (i &lt; 0 || j &lt; 0)\n            return 0;\n        // If we've already calculated this cell, return the stored result\n        if (dp[i][j] != -1)\n            return dp[i][j];\n\n        // Calculate the number of paths by moving up and left\n        int up = mazeObstaclesUtil(i - 1, j, maze, dp);\n        int left = mazeObstaclesUtil(i, j - 1, maze, dp);\n\n        // Store the result and return it\n        return dp[i][j] = up + left;\n    }\n\n    // Main function to calculate the number of paths through the maze\n    static int mazeObstacles(int n, int m, int[][] maze) {\n        int dp[][] = new int[n][m];\n        \n        // Initialize the dp array with -1\n        for (int row[] : dp)\n            Arrays.fill(row, -1);\n        \n        // Call the helper function starting from the bottom-right cell\n        return mazeObstaclesUtil(n - 1, m - 1, maze, dp);\n    }\n\n    public static void main(String args[]) {\n        // Define the maze\n        int[][] maze = {\n            {0, 0, 0},\n            {0, -1, 0},\n            {0, 0, 0}\n        };\n\n        int n = maze.length;\n        int m = maze[0].length;\n\n        // Calculate and print the number of paths through the maze\n        System.out.println(mazeObstacles(n, m, maze));\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\ndef mazeObstaclesUtil(i, j, maze, dp):\n    # Base case: If we are out of bounds or at an obstacle, return 0.\n    if i &lt; 0 or j &lt; 0 or maze[i][j] == -1:\n        return 0\n\n    # Base case: If we reach the starting point, return 1 (we found a path).\n    if i == 0 and j == 0:\n        return 1\n\n    # If we've already computed the number of paths for this position, return it.\n    if dp[i][j] != -1:\n        return dp[i][j]\n\n    # Move up and left in the maze, and recursively calculate the number of paths.\n    up = mazeObstaclesUtil(i - 1, j, maze, dp)\n    left = mazeObstaclesUtil(i, j - 1, maze, dp)\n\n    # Store the result in the DP table and return it.\n    dp[i][j] = up + left\n    return dp[i][j]\n\ndef mazeObstacles(n, m, maze):\n    # Create a DP table initialized with -1 values.\n    dp = [[-1 for j in range(m)] for i in range(n)]\n    \n    # Call the utility function to find the number of paths.\n    return mazeObstaclesUtil(n - 1, m - 1, maze, dp)\n\ndef main():\n    # Example maze with 0s representing open paths and -1 representing obstacles.\n    maze = [[0, 0, 0], [0, -1, 0], [0, 0, 0]]\n    n = len(maze)\n    m = len(maze[0])\n\n    # Call the mazeObstacles function and print the result.\n    print(mazeObstacles(n, m, maze))\n\nif __name__ == '__main__':\n    main()\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n// Define a function to find the number of paths in a maze with obstacles\nfunction mazeObstacles(n, m, maze) {\n  // Create a 2D array to store intermediate results (memoization)\n  const dp = new Array(n).fill(null).map(() => new Array(m).fill(-1));\n\n  // Define a recursive utility function to explore the maze and count paths\n  function mazeObstaclesUtil(i, j) {\n    // If the current cell is an obstacle or out of bounds, return 0 paths\n    if (i &lt; 0 || j &lt; 0 || maze[i][j] === -1) {\n      return 0;\n    }\n\n    // If we've reached the top-left cell, return 1 path\n    if (i === 0 &amp;&amp; j === 0) {\n      return 1;\n    }\n\n    // If the result for this cell has already been calculated, return it\n    if (dp[i][j] !== -1) {\n      return dp[i][j];\n    }\n\n    // Recursively explore paths moving up and left\n    const up = mazeObstaclesUtil(i - 1, j);\n    const left = mazeObstaclesUtil(i, j - 1);\n\n    // Store the result for this cell in the memoization table and return it\n    dp[i][j] = up + left;\n    return dp[i][j];\n  }\n\n  // Start the recursive calculation from the bottom-right cell\n  return mazeObstaclesUtil(n - 1, m - 1);\n}\n\n// Define the maze as a 2D array\nconst maze = [\n  [0, 0, 0],\n  [0, -1, 0],\n  [0, 0, 0],\n];\n\n// Get the dimensions of the maze\nconst n = maze.length;\nconst m = maze[0].length;\n\n// Call the mazeObstacles function and print the result\nconsole.log(mazeObstacles(n, m, maze));\n\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Brute Force Here -->\n</p><p><strong>Output:</strong> 2\n\n</p>\n<p></p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n<!-- Insert Time and Space Complexity of Brute Force Here -->\n<p><strong>Time Complexity: O(N*M)</strong></p>\n<p>Reason: At max, there will be N*M calls of recursion.</p>\n<p><strong>Space Complexity: O((M-1)+(N-1)) + O(N*M)</strong></p>\n<p>Reason: We are using a recursion stack space:O((M-1)+(N-1)), here (M-1)+(N-1) is the path length and an external DP Array of size \u2018N*M\u2019.</p>\n</p>\n</details>\n</div>\n</details>\n</div>\n<!-- Brute Force Approach Ends here -->\n\n\n<!-- Better Approach Starts from here -->\n\n<div id=\"better-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nTabulation Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition For Better Approach Here -->\n<p><strong>Steps to convert Recursive Solution to Tabulation one.</strong></p>\n<p>Tabulation is the bottom-up approach, which means we will go from the base case to the main problem.</p>\n<p>The steps to convert to the tabular solution are given below:</p>\n<ul><li>Declare a dp[] array of size [n][m].</li><li>First initialize the base condition values, i.e dp[0][0] = 1</li><li>Our answer should get stored in dp[n-1][m-1]. We want to move from (0,0) to (n-1,m-1). But we can\u2019t move arbitrarily, we should move such that at a particular i and j, we have all the values required to compute dp[i][j].</li><li>If we see the memoized code, values required for dp[i][j] are: dp[i-1][j] and dp[i][j-1]. So we only use the previous row and column value.</li><li>We have already filled the top-left corner (i=0 and j=0), if we move in any of the two following ways(given below), at every cell we do have all the previous values required to compute its value.</li></ul>\n<p><img width=\"624\" height=\"351\" src=\"https://lh5.googleusercontent.com/kIp2FN0m8DyuChA7Kf9fd8mq_Jc0j-o6lw92pSbLpbRBVDjHMNM4qG-xKZ0ASZVswQtNIogSxOc8VMaOxxmRLHK2JFgDA8DD8nSfWjc1nAmSwGseQqV6KDT7ucVFBIKU4XbQhYVo\"></p>\n<ul><li>We can use two nested loops to have this traversal</li><li>Whenever i&gt;0 , j&gt;0 and mat[i][j]==-1, we will simply mark dp[i][j] = 0, it means that this cell is a blocked one and no path is possible through it.</li><li>At every cell we calculate up and left as we had done in the recursive solution and then assign the cell\u2019s value as (up+left)</li></ul>\n<p><strong>Note: </strong>For the first row and first column (except for the top-left cell), then up and left values will be zero respectively.</p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h>\nusing namespace std;\n\n// Helper function to count the number of paths from (0, 0) to (n-1, m-1) in the maze\nint mazeObstaclesUtil(int n, int m, vector&lt;vector&lt;int>> &amp;maze, vector&lt;vector&lt;int>> &amp;dp) {\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = 0; j &lt; m; j++) {\n            // Base conditions\n            if (i > 0 &amp;&amp; j > 0 &amp;&amp; maze[i][j] == -1) {\n                dp[i][j] = 0; // If there's an obstacle at (i, j), no paths can pass through it\n                continue;\n            }\n            if (i == 0 &amp;&amp; j == 0) {\n                dp[i][j] = 1; // If we are at the starting point, there is one path to it\n                continue;\n            }\n\n            int up = 0;\n            int left = 0;\n\n            // Check if we can move up and left (if not at the edge of the maze)\n            if (i > 0)\n                up = dp[i - 1][j]; // Number of paths from above\n            if (j > 0)\n                left = dp[i][j - 1]; // Number of paths from the left\n\n            // Total number of paths to reach (i, j) is the sum of paths from above and left\n            dp[i][j] = up + left;\n        }\n    }\n\n    // The final result is stored in dp[n-1][m-1], which represents the destination\n    return dp[n - 1][m - 1];\n}\n\n// Main function to count paths with obstacles in a maze\nint mazeObstacles(int n, int m, vector&lt;vector&lt;int>> &amp;maze) {\n    vector&lt;vector&lt;int>> dp(n, vector&lt;int>(m, -1)); // DP table to memoize results\n    return mazeObstaclesUtil(n, m, maze, dp); // Start from the top-left corner (0, 0)\n}\n\nint main() {\n    vector&lt;vector&lt;int>> maze{\n        {0, 0, 0},\n        {0, -1, 0},\n        {0, 0, 0}\n    };\n\n    int n = maze.size();\n    int m = maze[0].size();\n\n    cout &lt;&lt; \"Number of paths with obstacles: \" &lt;&lt; mazeObstacles(n, m, maze) &lt;&lt; endl;\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\nclass TUF {\n    // Function to calculate the number of paths through the maze\n    static int mazeObstaclesUtil(int n, int m, int[][] maze, int[][] dp) {\n        for (int i = 0; i &lt; n; i++) {\n            for (int j = 0; j &lt; m; j++) {\n                // Base conditions\n                if (i > 0 &amp;&amp; j > 0 &amp;&amp; maze[i][j] == -1) {\n                    dp[i][j] = 0; // If there's an obstacle, no paths can go through here.\n                    continue;\n                }\n                if (i == 0 &amp;&amp; j == 0) {\n                    dp[i][j] = 1; // There's one valid path to the start cell.\n                    continue;\n                }\n\n                int up = 0;\n                int left = 0;\n\n                // Check if moving up is possible\n                if (i > 0)\n                    up = dp[i - 1][j];\n                \n                // Check if moving left is possible\n                if (j > 0)\n                    left = dp[i][j - 1];\n\n                // Calculate the number of paths by adding paths from above and from the left\n                dp[i][j] = up + left;\n            }\n        }\n\n        // The final result is stored in the bottom-right cell of the DP matrix\n        return dp[n - 1][m - 1];\n    }\n\n    // Main function to calculate the number of paths through the maze\n    static int mazeObstacles(int n, int m, int[][] maze) {\n        int dp[][] = new int[n][m];\n        \n        // Initialize the DP matrix with -1\n        for (int row[] : dp)\n            Arrays.fill(row, -1);\n        \n        // Call the helper function starting from the top-left cell\n        return mazeObstaclesUtil(n, m, maze, dp);\n    }\n\n    public static void main(String args[]) {\n        // Define the maze\n        int[][] maze = {\n            {0, 0, 0},\n            {0, -1, 0},\n            {0, 0, 0}\n        };\n\n        int n = maze.length;\n        int m = maze[0].length;\n\n        // Calculate and print the number of paths through the maze\n        System.out.println(mazeObstacles(n, m, maze));\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\ndef mazeObstaclesUtil(n, m, maze, dp):\n    # Loop through each cell in the maze\n    for i in range(n):\n        for j in range(m):\n            # Base conditions:\n            # If we encounter an obstacle or we are out of bounds, set dp[i][j] to 0.\n            if i > 0 and j > 0 and maze[i][j] == -1:\n                dp[i][j] = 0\n                continue\n            # If we are at the starting point, set dp[i][j] to 1.\n            if i == 0 and j == 0:\n                dp[i][j] = 1\n                continue\n            \n            # Initialize variables to store the number of paths coming from up and left.\n            up = 0\n            left = 0\n            \n            # If we can move up (i > 0), update 'up' with the value from the cell above.\n            if i > 0:\n                up = dp[i - 1][j]\n            \n            # If we can move left (j > 0), update 'left' with the value from the cell to the left.\n            if j > 0:\n                left = dp[i][j - 1]\n            \n            # Calculate the total number of paths to reach this cell and store it in dp[i][j].\n            dp[i][j] = up + left\n    \n    # The result is stored in the bottom-right corner of the DP table.\n    return dp[n - 1][m - 1]\n\ndef mazeObstacles(n, m, maze):\n    # Create a DP table initialized with -1 values.\n    dp = [[-1 for j in range(m)] for i in range(n)]\n    \n    # Call the utility function to find the number of paths.\n    return mazeObstaclesUtil(n, m, maze, dp)\n\ndef main():\n    # Example maze with 0s representing open paths and -1 representing obstacles.\n    maze = [[0, 0, 0],\n            [0, -1, 0],\n            [0, 0, 0]]\n    n = len(maze)\n    m = len(maze[0])\n    \n    # Call the mazeObstacles function and print the result.\n    print(mazeObstacles(n, m, maze))\n\nif __name__ == \"__main__\":\n    main()\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n// Define a function to find the number of paths in a maze with obstacles\nfunction mazeObstacles(n, m, maze) {\n  // Create a 2D array to store intermediate results (dp table)\n  const dp = new Array(n).fill(null).map(() => new Array(m).fill(-1));\n\n  // Loop through each cell in the maze\n  for (let i = 0; i &lt; n; i++) {\n    for (let j = 0; j &lt; m; j++) {\n      // Base conditions\n      if (i > 0 &amp;&amp; j > 0 &amp;&amp; maze[i][j] === -1) {\n        dp[i][j] = 0;\n        continue;\n      }\n      if (i === 0 &amp;&amp; j === 0) {\n        dp[i][j] = 1;\n        continue;\n      }\n\n      // Initialize variables to store counts from above and left cells\n      let up = 0;\n      let left = 0;\n\n      // If we are not at the top row, get the count from the cell above\n      if (i > 0) up = dp[i - 1][j];\n\n      // If we are not at the leftmost column, get the count from the cell to the left\n      if (j > 0) left = dp[i][j - 1];\n\n      // Calculate the total count for the current cell and store it in dp\n      dp[i][j] = up + left;\n    }\n  }\n\n  // Return the count of paths to the bottom-right cell\n  return dp[n - 1][m - 1];\n}\n\n// Define the maze as a 2D array\nconst maze = [\n  [0, 0, 0],\n  [0, -1, 0],\n  [0, 0, 0],\n];\n\n// Get the dimensions of the maze\nconst n = maze.length;\nconst m = maze[0].length;\n\n// Call the mazeObstacles function and print the result\nconsole.log(mazeObstacles(n, m, maze));\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Better Approach Here -->\n<strong>Output:</strong> 2\n\n\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Better Approach Here -->\n<p><strong>Time Complexity: O(N*M)</strong></p>\n<p>Reason: There are two nested loops</p>\n<p><strong>Space Complexity: O(N*M)</strong></p>\n<p>Reason: We are using an external array of size \u2018N*M\u2019\u2019.</p>\n</p>\n</details>\n</div>\n</details>\n</div>\n<!-- Better Approach Ends from here -->\n\n\n<!-- Optimal Approach Starts from here -->\n\n<div id=\"optimal-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nSpace Optimization Approach \n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm of Better Approach Here -->\n<p>If we closely look at the relationship,</p>\n<p><strong>dp[i][j] = dp[i-1][j] + dp[i][j-1])</strong></p>\n<p>We see that we only need the previous row and column, in order to calculate dp[i][j]. Therefore we can space optimize it.</p>\n<p>Initially, we can take a dummy row ( say prev) and initialize it as 0.</p>\n<p>Now the current row(say temp) <strong>only needs the </strong>previous row value and the current row\u2019s value in order to calculate dp[i][j].</p>\n<p><img width=\"624\" height=\"351\" src=\"https://lh4.googleusercontent.com/Q2VsZAfO2CpdjBXYCq0b6zbhIcLYKPu2g2VYxLHTDEglmhEov21lfSsEH34gvrhqwN9TBU_P2y_UTOEcQU8ZhLCV8x2JZxiiVHCjJKwvLGLJMV2hnJ09nVroBAfQrCSBg_Y5yiUZ\"></p>\n<p>At the next step, the temp array becomes the prev of the next step and using its values we can still calculate the next row\u2019s values.</p>\n<p><img width=\"624\" height=\"351\" src=\"https://lh5.googleusercontent.com/xHEBpLD9RdsqU9vTf08o17cSxK0WOT4nTTSEpbDKRnhD-_JOKO651DerOUWA9u0ZuS08FgZAsKdy5DsA8JfAmUGqLb6QQ9TombOWM4YcysO-_CMZginpPIbVe9xNH-zOxDLnFvf8\"></p>\n<p>At last prev[n-1] will give us the required answer.</p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h>\nusing namespace std;\n\n// Function to count the number of paths from the top-left corner (0, 0) to the bottom-right corner (n-1, m-1)\nint mazeObstacles(int n, int m, vector&lt;vector&lt;int>> &amp;maze) {\n    vector&lt;int> prev(m, 0); // Initialize a vector to store the previous row's path counts\n\n    for (int i = 0; i &lt; n; i++) {\n        vector&lt;int> temp(m, 0); // Initialize a temporary vector for the current row\n        for (int j = 0; j &lt; m; j++) {\n            // Base conditions\n            if (i > 0 &amp;&amp; j > 0 &amp;&amp; maze[i][j] == -1) {\n                temp[j] = 0; // If there's an obstacle at (i, j), no paths can pass through it\n                continue;\n            }\n            if (i == 0 &amp;&amp; j == 0) {\n                temp[j] = 1; // If we are at the starting point, there is one path to it\n                continue;\n            }\n\n            int up = 0;\n            int left = 0;\n\n            // Check if we can move up and left (if not at the edge of the maze)\n            if (i > 0)\n                up = prev[j]; // Number of paths from above (previous row)\n            if (j > 0)\n                left = temp[j - 1]; // Number of paths from the left (current row)\n\n            // Total number of paths to reach (i, j) is the sum of paths from above and left\n            temp[j] = up + left;\n        }\n        prev = temp; // Update the previous row with the current row\n    }\n\n    // The final result is stored in prev[m-1], which represents the destination in the last row\n    return prev[m - 1];\n}\n\nint main() {\n    vector&lt;vector&lt;int>> maze{\n        {0, 0, 0},\n        {0, -1, 0},\n        {0, 0, 0}\n    };\n\n    int n = maze.size();\n    int m = maze[0].size();\n\n    cout &lt;&lt; \"Number of paths with obstacles: \" &lt;&lt; mazeObstacles(n, m, maze) &lt;&lt; endl;\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\nclass TUF {\n    // Function to calculate the number of paths through the maze\n    static int mazeObstacles(int n, int m, int[][] maze) {\n        // Initialize the previous row of the DP matrix\n        int prev[] = new int[n];\n        \n        for (int i = 0; i &lt; n; i++) {\n            // Create a temporary array for the current row\n            int temp[] = new int[m];\n            \n            for (int j = 0; j &lt; m; j++) {\n                // Base conditions\n                if (i > 0 &amp;&amp; j > 0 &amp;&amp; maze[i][j] == -1) {\n                    temp[j] = 0; // If there's an obstacle, no paths can go through here.\n                    continue;\n                }\n                if (i == 0 &amp;&amp; j == 0) {\n                    temp[j] = 1; // There's one valid path to the start cell.\n                    continue;\n                }\n\n                int up = 0;\n                int left = 0;\n\n                // Check if moving up is possible\n                if (i > 0)\n                    up = prev[j];\n                \n                // Check if moving left is possible\n                if (j > 0)\n                    left = temp[j - 1];\n\n                // Calculate the number of paths by adding paths from above and from the left\n                temp[j] = up + left;\n            }\n            \n            // Update the previous row with the values of the current row\n            prev = temp;\n        }\n\n        // The final result is stored in the last element of the previous row\n        return prev[n - 1];\n    }\n\n    public static void main(String args[]) {\n        // Define the maze\n        int[][] maze = {\n            {0, 0, 0},\n            {0, -1, 0},\n            {0, 0, 0}\n        };\n\n        int n = maze.length;\n        int m = maze[0].length;\n\n        // Calculate and print the number of paths through the maze\n        System.out.println(mazeObstacles(n, m, maze));\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\ndef mazeObstacles(n, m, maze):\n    # Initialize the 'prev' list to keep track of the number of paths in the previous row.\n    prev = [0] * m\n    \n    # Loop through each row of the maze.\n    for i in range(n):\n        # Initialize a temporary list to store the number of paths for the current row.\n        temp = [0] * m\n        \n        # Loop through each cell in the current row.\n        for j in range(m):\n            # Base conditions:\n            # If we encounter an obstacle or we are out of bounds, set 'temp[j]' to 0.\n            if i > 0 and j > 0 and maze[i][j] == -1:\n                temp[j] = 0\n                continue\n            # If we are at the starting point, set 'temp[j]' to 1.\n            if i == 0 and j == 0:\n                temp[j] = 1\n                continue\n            \n            # Initialize variables to store the number of paths coming from up and left.\n            up = 0\n            left = 0\n            \n            # If we can move up (i > 0), update 'up' with the value from the previous row.\n            if i > 0:\n                up = prev[j]\n            \n            # If we can move left (j > 0), update 'left' with the value from the current row.\n            if j > 0:\n                left = temp[j - 1]\n            \n            # Calculate the total number of paths to reach this cell and store it in 'temp[j]'.\n            temp[j] = up + left\n        \n        # Update 'prev' with the 'temp' list for the next iteration.\n        prev = temp\n    \n    # The result is stored in the last element of the 'prev' list (bottom-right corner).\n    return prev[m - 1]\n\ndef main():\n    # Example maze with 0s representing open paths and -1 representing obstacles.\n    maze = [[0, 0, 0],\n            [0, -1, 0],\n            [0, 0, 0]]\n    n = len(maze)\n    m = len(maze[0])\n    \n    # Call the mazeObstacles function and print the result.\n    print(mazeObstacles(n, m, maze))\n\nif __name__ == \"__main__\":\n    main()\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n// Define a function to find the number of paths in a maze with obstacles\nfunction mazeObstacles(n, m, maze) {\n  // Create an array 'prev' to store the counts for the previous row\n  let prev = new Array(m).fill(0);\n\n  // Loop through each row in the maze\n  for (let i = 0; i &lt; n; i++) {\n    // Create an array 'temp' to store the counts for the current row\n    let temp = new Array(m).fill(0);\n\n    // Loop through each cell in the current row\n    for (let j = 0; j &lt; m; j++) {\n      // Base conditions\n      if (i > 0 &amp;&amp; j > 0 &amp;&amp; maze[i][j] === -1) {\n        temp[j] = 0;\n        continue;\n      }\n      if (i === 0 &amp;&amp; j === 0) {\n        temp[j] = 1;\n        continue;\n      }\n\n      // Initialize variables to store counts from above and left cells\n      let up = 0;\n      let left = 0;\n\n      // If we are not at the top row, get the count from the cell above ('prev')\n      if (i > 0) up = prev[j];\n\n      // If we are not at the leftmost column, get the count from the cell to the left ('temp')\n      if (j > 0) left = temp[j - 1];\n\n      // Calculate the total count for the current cell and store it in 'temp'\n      temp[j] = up + left;\n    }\n    \n    // Update 'prev' with 'temp' for the next iteration\n    prev = temp;\n  }\n\n  // Return the count of paths to the bottom-right cell (last element in 'prev' array)\n  return prev[m - 1];\n}\n\n// Define the maze as a 2D array\nconst maze = [\n  [0, 0, 0],\n  [0, -1, 0],\n  [0, 0, 0],\n];\n\n// Get the dimensions of the maze\nconst n = maze.length;\nconst m = maze[0].length;\n\n// Call the mazeObstacles function and print the result\nconsole.log(mazeObstacles(n, m, maze));\n\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Optimal Apporach Here -->\n<strong>Output:</strong>2\n\n\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Optimal Approach-->\n<p><strong>Time Complexity: O(M*N)</strong></p>\n<p>Reason: There are two nested loops</p>\n<p><strong>Space Complexity: O(N)</strong></p>\n<p>Reason: We are using an external array of size \u2018N\u2019 to store only one row.</p>\n</p>\n</details>\n</div>\n</details>\n</div>\n<!-- Optimal Approach Starts from here -->\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n<details>\n<summary class=\"main-summary\">\n<span>\nVideo Explanation\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"yt-video-wrapper\">\n\n<!-- Insert iframe embed Link of Youtube Video-->\n<iframe class=\"lazy-loaded\" loading=\"lazy\" title=\"Unique Paths 2\" width=\"810\" height=\"456\" data-lazy-type=\"iframe\" data-src=\"https://www.youtube.com/embed/TmhpgXScLyY?si=YQwdGOpEDcpbyJZE\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\" src=\"https://www.youtube.com/embed/TmhpgXScLyY?feature=oembed\"></iframe><noscript>\n<iframe loading=\"lazy\" title=\"Unique Paths 2\" width=\"810\" height=\"456\" src=\"https://www.youtube.com/embed/TmhpgXScLyY?si=YQwdGOpEDcpbyJZE\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe></noscript>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script>\n\nconst codeSections = document.querySelectorAll('.code-section');\n\n// Get last selected language from localStorage or set default value\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\n// Update last selected language for all sections and store in localStorage\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\n// Handle copy button click event\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\n// Set initial state of the tabs\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<script>\nconst codeSections = document.querySelectorAll('.code-section');\n\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script src=\"https://takeuforward.org/UXApproachDropDowns/3ApproachJSScript.js\"></script>\n<!-- /wp:html -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to\u00a0<strong><a href=\"https://www.linkedin.com/in/anshuman-sharma-a1b245194/\" target=\"_blank\" rel=\"noreferrer noopener\">Anshuman Sharma</a></strong>\u00a0and <a href=\"https://www.linkedin.com/in/abhipsita-das-5b7069212/?originalSubdomain=in\" target=\"_blank\" rel=\"noopener\" title=\"\">Abhipsita Das</a></em> <em>for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,\u00a0</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->"
}