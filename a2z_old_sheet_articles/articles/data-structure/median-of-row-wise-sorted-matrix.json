{
    "dislikes": 9,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:09:58 GMT+0530 (India Standard Time)",
    "slug": "median-of-row-wise-sorted-matrix",
    "aid": "1636",
    "title": "Median of Row Wise Sorted Matrix",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/matrix-median",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "binary-search",
            "topic-title": "Binary Search"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        }
    ],
    "content": "<p><strong>Problem Statement:</strong> Given a row-wise sorted matrix of size MXN, where M is no. of rows and N is no.\n    of columns, find the median in the given matrix.</p>\n<p><strong>Note:</strong> MXN is odd.</p>\n\n\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n    <details class=\"article_example_details\">\n        <summary class=\"article_example_summary\">\n            <span><strong>\n                    Examples\n                </strong>\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"atricle_example_content\">\n            <pre class=\"wp-block-preformatted\">\n                    <span><strong>Example 1:</strong></span>\n                    <span><strong>Input Format:</strong>M = 3, N = 3, matrix[][] =</span>\n                    1 4 9 \n                    2 5 6\n                    3 8 7\n                    <span><strong>Result:</strong> 5</span>\n                    \n                    <span><strong>Explanation: </strong> If we find the linear sorted array, the array becomes 1 2 3 4 5 6 7 8 9. So, median = 5</span>\n                    \n                    <span><strong>Example 2:</strong></span>\n                    <span><strong>Input Format:</strong>M = 3, N = 3, matrix[][] =</span>\n                    1 3 8 \n                    2 3 4\n                    1 2 5\n                    <span><strong>Result:</strong> 3</span>\n                    \n                    <span><strong>Explanation: </strong> If we find the linear sorted array, the array becomes 1 1 2 2 3 3 4 5 7 8. So, median = 3</span>\n                    \n                </pre>\n        </div>\n    </details>\n</div>\n\n\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\n        yourself first. <strong><a\n                href=\"https://www.codingninjas.com/studio/problems/median-of-a-row-wise-sorted-matrix_1115473?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf\"\n                target=\"_blank\" rel=\"noreferrer noopener\">Problem Link</a></strong></em></p>\n\n\n<!-- This is Approaches Drop-Down -->\n<div class=\"dsa_article_dropdown_approachs \">\n\n    <!-- Approach - 1 Starts from here -->\n    <div id=\"brute-force-approach\">\n        <details>\n            <summary class=\"main-summary\">\n                <span>\n                    <!-- Change Name Here -->\n                    Brute-force Approach\n                </span>\n                <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                    <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                    </path>\n                </svg>\n            </summary>\n            <div class=\"common-drops\">\n                <details class=\"secondary-details\" open=\"\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Algorithm / Intuition\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <div class=\"approach-algorithm\">\n\n                        <p>The extremely naive approach is to use a linear array/list to store the elements of the given\n                            matrix. Now, we will sort the list and return the middle element.\n                        </p>\n\n                        <p><strong>Algorithm:</strong></p>\n                        <ol>\n                            <li>We will use a loop(say i) to select a particular row at a time.</li>\n                            <li>Next, we will use another loop(say j) for every row to traverse each column.</li>\n                            <li>Inside the loops, we will store each element, matrix[i][j] to a linear array/list.</li>\n                            <li>Finally, we will return the middle element of that linear array.</li>\n                        </ol>\n                        <p><strong>Dry-run: </strong>Please refer to the attached <em> <strong><a\n                                        href=\"https://youtu.be/Q9wXgdxJq48?si=VyUUzdNNPfdvmPGq\" target=\"_blank\"\n                                        rel=\"noreferrer noopener\">video</a></strong></em> for a detailed dry-run.</p>\n\n                    </div>\n                </details>\n                <details class=\"code-section secondary-details\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Code\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <div class=\"code-tabs\">\n                        <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n                        <button class=\"code-tab\" data-lang=\"java\">Java</button>\n                        <button class=\"code-tab\" data-lang=\"python\">Python</button>\n                        <button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n                        <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\"\n                            xmlns=\"http://www.w3.org/2000/svg\">\n                            <path\n                                d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n                            </path>\n                        </svg>\n                    </div>\n                    <div class=\"code-content\">\n                        <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n                            <pre class=\"wp-block-code\">\n                                    <code lang=\"cpp\" class=\"language-cpp\">\n#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint median(vector&lt;vector&lt;int&gt;&gt; &amp;matrix, int m, int n) {\n    vector&lt;int&gt; lst;\n\n    //traverse the matrix and\n    //copy the elements to list:\n    for (int i = 0; i &lt; m; i++) {\n        for (int j = 0; j &lt; n; j++) {\n            lst.push_back(matrix[i][j]);\n        }\n    }\n\n    //sort the list:\n    sort(lst.begin(), lst.end());\n    return lst[(m * n) / 2];\n}\n\nint main() {\n    vector&lt;vector&lt;int&gt;&gt; matrix = {\n        {1, 2, 3, 4, 5},\n        {8, 9, 11, 12, 13},\n        {21, 23, 25, 27, 29}\n    };\n    int m = matrix.size(), n = matrix[0].size();\n    int ans = median(matrix, m, n);\n    cout &lt;&lt; &quot;The median element is: &quot; &lt;&lt; ans &lt;&lt; endl;\n    return 0;\n}\n                                    </code>\n                                </pre>\n                        </div>\n                        <div class=\"code-block \" data-lang=\"java\">\n                            <pre class=\"wp-block-code\">\n                                    <code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\npublic class tUf {\n    public static int median(int matrix[][], int m, int n) {\n        List&lt;Integer&gt; lst = new ArrayList&lt;&gt;();\n\n        // Traverse the matrix and\n        // copy the elements to the list:\n        for (int i = 0; i &lt; m; i++) {\n            for (int j = 0; j &lt; n; j++) {\n                lst.add(matrix[i][j]);\n            }\n        }\n\n        // Sort the list:\n        Collections.sort(lst);\n        return lst.get((m * n) / 2);\n    }\n\n    public static void main(String[] args) {\n        int matrix[][] = {\n            {1, 2, 3, 4, 5},\n            {8, 9, 11, 12, 13},\n            {21, 23, 25, 27, 29}\n        };\n        int m = matrix.length, n = matrix[0].length;\n        int ans = median(matrix, m, n);\n        System.out.println(&quot;The median element is: &quot; + ans);\n    }\n}\n    \n                                    </code>\n                                </pre>\n                        </div>\n                        <div class=\"code-block\" data-lang=\"python\">\n                            <pre class=\"wp-block-code\">\n                                    <code lang=\"python\" class=\"language-python\">\ndef median(matrix, m, n):\n    lst = []\n\n    # Traverse the matrix and copy the elements to the list:\n    for i in range(m):\n        for j in range(n):\n            lst.append(matrix[i][j])\n\n    # Sort the list:\n    lst.sort()\n    return lst[(m * n) // 2]\n\nmatrix = [\n    [1, 2, 3, 4, 5],\n    [8, 9, 11, 12, 13],\n    [21, 23, 25, 27, 29]\n]\nm = len(matrix)\nn = len(matrix[0])\nans = median(matrix, m, n)\nprint(&quot;The median element is:&quot;, ans)\n                                    </code>\n                                </pre>\n                        </div>\n                        <div class=\"code-block\" data-lang=\"javascript\">\n                            <pre class=\"wp-block-code\">\n                                <code lang=\"javascript\" class=\"language-javascript\">\nfunction median(matrix, m, n) {\n    const lst = [];\n\n    // Traverse the matrix and\n    // copy the elements to the list:\n    for (let i = 0; i &lt; m; i++) {\n        for (let j = 0; j &lt; n; j++) {\n            lst.push(matrix[i][j]);\n        }\n    }\n\n    // Sort the list:\n    lst.sort((a, b) =&gt; a - b);\n    return lst[Math.floor((m * n) / 2)];\n}\n\n\nconst matrix = [\n    [1, 2, 3, 4, 5],\n    [8, 9, 11, 12, 13],\n    [21, 23, 25, 27, 29]\n];\nconst m = matrix.length;\nconst n = matrix[0].length;\nconst ans = median(matrix, m, n);\nconsole.log(&quot;The median element is: &quot; + ans);\n    \n                                </code>\n                            </pre>\n                        </div>\n                        <p>\n                            <strong>Output: </strong>The median element is: 11\n                        </p>\n                    </div>\n                </details>\n                <details class=\"secondary-details\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Complexity Analysis\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <p>\n                    <p><strong>Time Complexity:</strong> O(MXN) + O(MXN(log(MXN))), where M = number of row in the given\n                        matrix, N = number of columns in the given matrix</p>\n                    <p><strong>Reason:</strong> At first, we are traversing the matrix to copy the elements. This takes\n                        O(MXN) time complexity. Then we are sorting the linear array of size (MXN), that takes\n                        O(MXN(log(MXN))) time complexity</p>\n\n                    <p><strong>Space Complexity: </strong>O(MXN) as we are using a temporary list to store the elements\n                        of the matrix.</p>\n\n                    </p>\n                </details>\n            </div>\n        </details>\n    </div>\n    <!-- Approach - 1 Ends here -->\n\n\n    <!-- Approach - 2 Starts from here -->\n\n    <div id=\"optimal-approach\">\n        <details>\n            <summary class=\"main-summary\">\n                <span>\n                    Optimal Approach\n                </span>\n                <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                    <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                    </path>\n                </svg>\n            </summary>\n            <div class=\"common-drops\">\n                <details class=\"secondary-details\" open=\"\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Algorithm / Intuition\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <div class=\"approach-algorithm\">\n                        <p>Now, if we wish to further optimize the previous approach we cannot afford to check every\n                            element. So, we have to eliminate some parts to reduce the time complexity under O(MXN).\n                            This is where the binary search algorithm comes in\n                        </p>\n                        <p>The primary objective of the Binary Search algorithm is to efficiently determine the\n                            appropriate half to eliminate, thereby reducing the search space by half. It does this by\n                            determining a specific condition that ensures that the target is not present in that half.\n                        </p>\n\n                        <p><strong>Observations:</strong></p>\n                        <ol>\n                            <li>\n                                <p><strong>What is the search space where we will apply binary search?</strong></p>\n                                <span>If we carefully observe, our answer lies between the smallest and the largest\n                                    number in the given matrix. So, the search space will be <strong>[min(matrix),\n                                        max(matrix)].</strong></span>\n                            </li>\n                            <li>\n                                <p><strong>While applying binary search how to check if an element \u2018x\u2019 is a possible\n                                        median?</strong></p>\n                                <span>If \u2018x\u2019 is the median, the <strong>number of elements smaller or equal to \u2018x\u2019\n                                    </strong> will be surely <strong> greater than (MXN) // 2 (integer\n                                        division).</strong></span>\n                            </li>\n                            <li>\n                                <p><strong>How to check how many numbers are smaller or equal to an element\n                                        \u2018mid\u2019?</strong></p>\n                                <span>One of the ways is to traverse the whole matrix and count the numbers. But in that\n                                    case, the time complexity will be high. So, we have to find other ways. It is given\n                                    that the matrix is row-wise sorted. So, we can apply the concept of <strong><a\n                                            href=\"https://takeuforward.org/arrays/implement-upper-bound/\"\n                                            target=\"_blank\" rel=\"noreferrer noopener\">upper bound</a></strong>\n                                </span>\n                                <ul>\n                                    <li>\n                                        For every particular row, we will find the upper bound of the current element\n                                        \u2018mid\u2019. The index returned will be the number of smaller or equal elements in\n                                        that row.\n                                    </li>\n                                    <li>We will do it for each row and add them to get the total number for the whole\n                                        matrix.</li>\n                                    <li>Mathematically, <strong>smaller_equal_in_row = upperBound(matrix[row],\n                                            mid)</strong></li>\n                                </ul>\n                            </li>\n                        </ol>\n                        <p>We will just convert the above observation into code.</p>\n                        <p><strong>Algorithm:</strong></p>\n                        <ol>\n                            <li><strong>Calculate min(matrix) and max(matrix):</strong> As the given matrix is row-wise\n                                sorted the minimum element will be the minimum element in the first column and the\n                                maximum will be the maximum in the last column.</li>\n                            <li><strong>Place the 2 pointers low and high:</strong> Initially, we will place the\n                                pointers. The pointer low will point to min(matrix) and the high will point to\n                                max(matrix).</li>\n                            <li><strong>Calculate the \u2018mid\u2019:</strong> Now, inside a loop, we will calculate the value of\n                                \u2018mid\u2019 using the following formula: <strong>mid = (low+high) // 2 ( \u2018//\u2019 refers to\n                                    integer division)</strong></li>\n                            <li><strong>Use the calculateSmallEqual() function to get the number of elements <=\n                                        mid:</strong> Inside the function, we will use the above-mentioned upper bound\n                                        formula for each row and calculate the total number of elements <= mid. Then we\n                                            will return the total number from the function <strong>\n                                            calculateSmallEqual().</strong></li>\n                            <li><strong>If smallEqual <= (M*N) // 2:</strong> We can conclude that our median must be a\n                                        bigger number. So, we will eliminate the left i.e. the smaller half (low =\n                                        mid+1).</li>\n                            <li><strong>If smallEqual > (M*N) // 2:</strong> We can conclude that the element mid might\n                                be the median. But we have to reach the smallest number to find the actual median. So,\n                                in this case, we will remove the right half( i.e. high = mid-1).</li>\n                        </ol>\n                        <p>The steps from 3-6 will be inside a loop and the loop will continue until low crosses high\n                        </p>\n\n                        <p><strong>Note:</strong> Please make sure to refer to the <strong><a\n                                    href=\"https://youtu.be/Q9wXgdxJq48?si=5GmckDfMGdX_zbav\" target=\"_blank\"\n                                    rel=\"noreferrer noopener\">video</a></strong> and try out some test cases of your own\n                            to understand, how the pointer \u2018low\u2019 will be always pointing to the answer in this case.\n                            This is also the reason we have not used any extra variable here to store the answer.</p>\n                        <p><strong>Dry-run: </strong>Please refer to the attached <em> <strong><a\n                                        href=\"https://youtu.be/Q9wXgdxJq48?si=VyUUzdNNPfdvmPGq\" target=\"_blank\"\n                                        rel=\"noreferrer noopener\">video</a></strong></em> for a detailed dry-run.</p>\n\n                    </div>\n                </details>\n                <details class=\"code-section secondary-details\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Code\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <div class=\"code-tabs\">\n                        <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n                        <button class=\"code-tab\" data-lang=\"java\">Java</button>\n                        <button class=\"code-tab\" data-lang=\"python\">Python</button>\n                        <button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n                        <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\"\n                            xmlns=\"http://www.w3.org/2000/svg\">\n                            <path\n                                d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n                            </path>\n                        </svg>\n                    </div>\n                    <div class=\"code-content\">\n                        <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n                            <pre class=\"wp-block-code\">\n                                    <code lang=\"cpp\" class=\"language-cpp\">\n#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint upperBound(vector&lt;int&gt; &amp;arr, int x, int n) {\n    int low = 0, high = n - 1;\n    int ans = n;\n\n    while (low &lt;= high) {\n        int mid = (low + high) / 2;\n        // maybe an answer\n        if (arr[mid] &gt; x) {\n            ans = mid;\n            //look for smaller index on the left\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1; // look on the right\n        }\n    }\n    return ans;\n}\n\nint countSmallEqual(vector&lt;vector&lt;int&gt;&gt; &amp;matrix, int m, int n, int x) {\n    int cnt = 0;\n    for (int i = 0; i &lt; m; i++) {\n        cnt += upperBound(matrix[i], x, n);\n    }\n    return cnt;\n}\n\nint median(vector&lt;vector&lt;int&gt;&gt; &amp;matrix, int m, int n) {\n    int low = INT_MAX, high = INT_MIN;\n\n    //point low and high to right elements:\n    for (int i = 0; i &lt; m; i++) {\n        low = min(low, matrix[i][0]);\n        high = max(high, matrix[i][n - 1]);\n    }\n\n    int req = (n * m) / 2;\n    while (low &lt;= high) {\n        int mid = (low + high) / 2;\n        int smallEqual = countSmallEqual(matrix, m, n, mid);\n        if (smallEqual &lt;= req) low = mid + 1;\n        else high = mid - 1;\n    }\n    return low;\n}\n\nint main() {\n    vector&lt;vector&lt;int&gt;&gt; matrix = {\n        {1, 2, 3, 4, 5},\n        {8, 9, 11, 12, 13},\n        {21, 23, 25, 27, 29}\n    };\n    int m = matrix.size(), n = matrix[0].size();\n    int ans = median(matrix, m, n);\n    cout &lt;&lt; &quot;The median element is: &quot; &lt;&lt; ans &lt;&lt; endl;\n    return 0;\n}\n                                    </code>\n                                </pre>\n                        </div>\n                        <div class=\"code-block \" data-lang=\"java\">\n                            <pre class=\"wp-block-code\">\n                                    <code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\nclass tUf {\n    static int upperBound(int[] arr, int x, int n) {\n        int low = 0, high = n - 1;\n        int ans = n;\n\n        while (low &lt;= high) {\n            int mid = (low + high) / 2;\n            // maybe an answer\n            if (arr[mid] &gt; x) {\n                ans = mid;\n                // look for a smaller index on the left\n                high = mid - 1;\n            } else {\n                low = mid + 1; // look on the right\n            }\n        }\n        return ans;\n    }\n\n    static int countSmallEqual(int[][] matrix, int m, int n, int x) {\n        int cnt = 0;\n        for (int i = 0; i &lt; m; i++) {\n            cnt += upperBound(matrix[i], x, n);\n        }\n        return cnt;\n    }\n\n    static int median(int[][] matrix, int m, int n) {\n        int low = Integer.MAX_VALUE, high = Integer.MIN_VALUE;\n\n        // point low and high to right elements\n        for (int i = 0; i &lt; m; i++) {\n            low = Math.min(low, matrix[i][0]);\n            high = Math.max(high, matrix[i][n - 1]);\n        }\n\n        int req = (n * m) / 2;\n        while (low &lt;= high) {\n            int mid = (low + high) / 2;\n            int smallEqual = countSmallEqual(matrix, m, n, mid);\n            if (smallEqual &lt;= req) low = mid + 1;\n            else high = mid - 1;\n        }\n        return low;\n    }\n\n    public static void main(String[] args) {\n        int[][] matrix = {\n            {1, 2, 3, 4, 5},\n            {8, 9, 11, 12, 13},\n            {21, 23, 25, 27, 29}\n        };\n        int m = matrix.length;\n        int n = matrix[0].length;\n        int ans = median(matrix, m, n);\n        System.out.println(&quot;The median element is: &quot; + ans);\n    }\n}\n                                    </code>\n                                </pre>\n                        </div>\n                        <div class=\"code-block\" data-lang=\"python\">\n                            <pre class=\"wp-block-code\">\n                                    <code lang=\"python\" class=\"language-python\">\n                         \ndef upperBound(arr, x, n):\n    low = 0\n    high = n - 1\n    ans = n\n\n    while low &lt;= high:\n        mid = (low + high) // 2\n        # maybe an answer\n        if arr[mid] &gt; x:\n            ans = mid\n            # look for a smaller index on the left\n            high = mid - 1\n        else:\n            low = mid + 1  # look on the right\n\n    return ans\n\ndef countSmallEqual(matrix, m, n, x):\n    cnt = 0\n    for i in range(m):\n        cnt += upperBound(matrix[i], x, n)\n    return cnt\n\ndef median(matrix, m, n):\n    low = float('inf')\n    high = float('-inf')\n\n    # point low and high to the right elements\n    for i in range(m):\n        low = min(low, matrix[i][0])\n        high = max(high, matrix[i][n - 1])\n\n    req = (n * m) // 2\n    while low &lt;= high:\n        mid = (low + high) // 2\n        smallEqual = countSmallEqual(matrix, m, n, mid)\n        if smallEqual &lt;= req:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return low\n\nif __name__ == &quot;__main__&quot;:\n    matrix = [\n        [1, 2, 3, 4, 5],\n        [8, 9, 11, 12, 13],\n        [21, 23, 25, 27, 29]\n    ]\n    m = len(matrix)\n    n = len(matrix[0])\n    ans = median(matrix, m, n)\n    print(&quot;The median element is:&quot;, ans)\n                                    </code>\n                                </pre>\n                        </div>\n                        <div class=\"code-block\" data-lang=\"javascript\">\n                            <pre class=\"wp-block-code\">\n                                <code lang=\"javascript\" class=\"language-javascript\">\nfunction upperBound(arr, x, n) {\n    let low = 0, high = n - 1;\n    let ans = n;\n\n    while (low &lt;= high) {\n        let mid = Math.floor((low + high) / 2);\n        // maybe an answer\n        if (arr[mid] &gt; x) {\n            ans = mid;\n            // look for a smaller index on the left\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1; // look on the right\n        }\n    }\n    return ans;\n}\n\nfunction countSmallEqual(matrix, m, n, x) {\n    let cnt = 0;\n    for (let i = 0; i &lt; m; i++) {\n        cnt += upperBound(matrix[i], x, n);\n    }\n    return cnt;\n}\n\nfunction median(matrix, m, n) {\n    let low = Number.MAX_SAFE_INTEGER, high = Number.MIN_SAFE_INTEGER;\n\n    // point low and high to the right elements:\n    for (let i = 0; i &lt; m; i++) {\n        low = Math.min(low, matrix[i][0]);\n        high = Math.max(high, matrix[i][n - 1]);\n    }\n\n    let req = Math.floor((n * m) / 2);\n    while (low &lt;= high) {\n        let mid = Math.floor((low + high) / 2);\n        let smallEqual = countSmallEqual(matrix, m, n, mid);\n        if (smallEqual &lt;= req) low = mid + 1;\n        else high = mid - 1;\n    }\n    return low;\n}\n\n\nconst matrix = [\n    [1, 2, 3, 4, 5],\n    [8, 9, 11, 12, 13],\n    [21, 23, 25, 27, 29]\n];\nconst m = matrix.length;\nconst n = matrix[0].length;\nconst ans = median(matrix, m, n);\nconsole.log(&quot;The median element is: &quot; + ans);             \n                                </code>\n                            </pre>\n                        </div>\n                        <p>\n                            <strong>Output: </strong>The median element is: 11\n                        </p>\n\n                    </div>\n                </details>\n                <details class=\"secondary-details\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Complexity Analysis\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <p>\n                    <p><strong>Time Complexity: </strong>O(log(109)) X O(M(logN)), where M = number of rows in the given matrix, N = number of columns in the given matrix</p>\n                    <p><strong>Reason: </strong>Our search space lies between [0, 109] as the min(matrix) can be 0 and the max(matrix) can be 109. We are applying binary search in this search space and it takes O(log(109)) time complexity. Then we call countSmallEqual() function for every \u2018mid\u2019 and this function takes O(M(logN)) time complexity.</p>\n                    <p></p>\n                    <p><strong>Space Complexity :</strong> O(1) as we are not using any extra space</p>\n\n\n                    </p>\n                </details>\n            </div>\n        </details>\n    </div>\n</div>\n\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n    <details>\n        <summary class=\"main-summary\">\n            <span>\n                Video Explanation\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"yt-video-wrapper\">\n            <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/63fPPOdIr2c\"\n                title=\"YouTube video player\" frameborder=\"0\"\n                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n                referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n        </div>\n    </details>\n</div>\n\n<script src=\"https://takeuforward.org/UXApproachDropDowns/2ApproachJSScript.js\"></script>\n\n<blockquote class=\"wp-block-quote\">\n    Special thanks to <strong><a href=\"https://www.linkedin.com/in/kriti39/\">KRITIDIPTA GHOSH</a></strong> for\n    contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward\n    fam,<strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\"> please\n            check out this article</a></strong>\n</blockquote>\n\n\n<script>\n\n    const codeSections = document.querySelectorAll('.code-section');\n\n    // Get last selected language from localStorage or set default value\n    let lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp';\n\n    codeSections.forEach((section, sectionIndex) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n        const copyBtn = section.querySelector('.copy-btn');\n\n        codeTabs.forEach((tab) => {\n            tab.addEventListener('click', () => {\n                codeTabs.forEach((t) => {\n                    t.classList.remove('dsa_article_code_active');\n                });\n                tab.classList.add('dsa_article_code_active');\n\n                const lang = tab.dataset.lang;\n                const activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                codeBlocks.forEach((block) => {\n                    if (block === activeBlock) {\n                        block.classList.add('dsa_article_code_active');\n                    } else {\n                        block.classList.remove('dsa_article_code_active');\n                    }\n                });\n\n                // Update last selected language for all sections and store in localStorage\n                lastSelectedLanguage = lang;\n                localStorage.setItem('lastSelectedLanguage', lang);\n                codeSections.forEach((otherSection, otherIndex) => {\n                    if (otherIndex !== sectionIndex) {\n                        const otherTabs = otherSection.querySelectorAll('.code-tab');\n                        otherTabs.forEach((otherTab) => {\n                            if (otherTab.dataset.lang === lang) {\n                                otherTab.classList.add('dsa_article_code_active');\n                            } else {\n                                otherTab.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                        const otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                        const otherCodeBlocks = otherSection.querySelectorAll('.code-block');\n                        otherCodeBlocks.forEach((block) => {\n                            if (block === otherActiveBlock) {\n                                block.classList.add('dsa_article_code_active');\n                            } else {\n                                block.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                    }\n                });\n            });\n        });\n\n        // Handle copy button click event\n        copyBtn.addEventListener('click', () => {\n            const activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\n            navigator.clipboard.writeText(activeBlock.innerText);\n            copyBtn.classList.add('dsa_article_code_active');\n            setTimeout(() => {\n                copyBtn.classList.remove('dsa_article_code_active');\n            }, 1000);\n        });\n    });\n\n    // Set initial state of the tabs\n    codeSections.forEach((section) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n\n        codeTabs.forEach((tab) => {\n            if (tab.dataset.lang === lastSelectedLanguage) {\n                tab.classList.add('dsa_article_code_active');\n            } else {\n                tab.classList.remove('dsa_article_code_active');\n            }\n        });\n\n        codeBlocks.forEach((block) => {\n            if (block.dataset.lang === lastSelectedLanguage) {\n                block.classList.add('dsa_article_code_active');\n            } else {\n                block.classList.remove('dsa_article_code_active');\n            }\n        });\n    });\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>",
    "category_tag": "data-structure",
    "likes": 137,
    "preview": "Problem Statement: Given a row-wise sorted matrix of size MXN, where M is no. of rows and N is no. of columns, find the median in the given matrix. Note: MXN is odd. Examples Example 1: Input Forma..."
}