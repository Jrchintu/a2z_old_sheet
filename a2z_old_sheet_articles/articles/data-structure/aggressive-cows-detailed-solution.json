{
    "dislikes": 4,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:09:16 GMT+0530 (India Standard Time)",
    "slug": "aggressive-cows-detailed-solution",
    "aid": "1439",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/aggressive-cows",
    "title": "Aggressive Cows : Detailed Solution",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "binary-search",
            "topic-title": "Binary Search"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        }
    ],
    "category_tag": "data-structure",
    "likes": 289,
    "preview": "Problem Statement: You are given an array 'arr' of size 'n' which denotes the position of stalls. You are also given an integer 'k' which denotes the number of aggressive cows. You are given the ta...",
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement:</strong> You are given an array <strong>'arr'</strong> of size <strong>'n'</strong> which denotes the position of stalls.<br>You are also given an integer <strong>'k'</strong> which denotes the number of aggressive cows.<br>You are given the task of assigning stalls to <strong>'k'</strong> cows such that the minimum distance between any two of them is the maximum possible.<br>Find the maximum possible minimum distance.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n<details class=\"article_example_details\">\n<summary class=\"article_example_summary\">\n<span><strong>\nExamples\n</strong>\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"atricle_example_content\">\n<pre class=\"wp-block-preformatted\"><!-- Insert New Examples Here -->\n<pre class=\"wp-block-preformatted\"><strong>Example 1:</strong>\n<strong>Input Format:</strong> N = 6, k = 4, arr[] = {0,3,4,7,10,9}\n<strong>Result:</strong> 3\n<strong>Explanation:</strong> The maximum possible minimum distance between any two cows will be 3 when 4 cows are placed at positions {0, 3, 7, 10}. Here the distances between cows are 3, 4, and 3 respectively. We cannot make the minimum distance greater than 3 in any ways.\n\n<strong>Example 2:</strong>\n<strong>Input Format:</strong> N = 5, k = 2, arr[] = {4,2,1,3,6}\n<strong>Result:</strong> 5\n<strong>Explanation:</strong> The maximum possible minimum distance between any two cows will be 5 when 2 cows are placed at positions {1, 6}. \n\n<p><strong>Why do we need to sort the stalls?</strong></p>\n<p>To arrange the cows in a consecutive manner while ensuring a certain distance between them, the initial step is to sort the stalls based on their positions. In a sorted array, the minimum distance will always be obtained from any two consecutive cows. Arranging the cows in a consecutive manner does not necessarily mean placing them in consecutive stalls.</p>\n<p>Assume the given stalls array is: {1,2,8,4,9} and after sorting it will be {1, 2, 4, 8, 9}. The given number of cows is 3.</p>\n<p><img width=\"616\" height=\"177\" src=\"https://lh4.googleusercontent.com/Y4XemvXYuaq46_hZ8Y6-o1Ni4EyHtv-hOaJraEXCiIA-0jW-vjaKnlMr6OsN6NNnbDDbSVxoS1qEFr15NWe5Ky0XRg8fzbdNUMdBe1ynMAXya6BbupjpJnwf9Z3Wf-wDZtnlqx3B\"></p>\n<p>We have to fit three cows in these 5 stalls. Each stall can accommodate only one. Our task is to <strong>maximize </strong>the <strong>minimum </strong>distance between two stalls. Let\u2019s look at some arrangements:</p>\n<p><img width=\"614\" height=\"178\" src=\"https://lh4.googleusercontent.com/iSdD1FeeTqFz8JuulMNJkZb5Bta92aDZ5T2i4Hj9kKtrI733KdX0U33yE6h1JV6YheDS_iafRQ8U2P4Qjxgud0OQwADSa33pOdZtkrPjWwltY6uWP2F_pTiFOrWFY0TM4rVXD1DW\"></p>\n<p><img width=\"609\" height=\"200\" src=\"https://lh5.googleusercontent.com/kGBNEhuai6pj4f1zWZ8GrnbOlvsSuDreq-UnTchdS2HRRKVsNhEcsuaZbxyrEqFJVpBvWobYUNOHuliiiZl37XR8arw-WyspHHDKY-CESm_tk9EUZd-Egk2uj7nW3j4ktb5kKJWv\"></p>\n<p><img width=\"606\" height=\"191\" src=\"https://lh5.googleusercontent.com/JpQYFE4YqRwPkpeq2mAKUDJoVcesY6OmZYuMC2USB5fgFGLZyMjXaRzYEyykBz48SXMBTftQ5z7-g6X0nDiSRzQ88-tNL5c_sT7aIT46VoiKxIAxuT6_pu84daoIcp4YOy3l8vhx\"></p>\n<p>In the first arrangement, the minimum distance between the cows is 1. Now, in the later cases, we have tried to place the cows in a manner so that the minimum distance can be increased. This is done in the second and third cases. It\u2019s not possible to get a minimum distance of more than 3 in any arrangement, so we output 3.&nbsp;</p>\n<p><strong>Observation:</strong></p>\n<ul><li><strong>Minimum possible distance between 2 cows: </strong>The minimum possible distance between two cows is 1 as the minimum distance between 2 consecutive stalls is 1.</li><li><strong>Maximum possible distance between 2 cows: </strong>The maximum possible distance between two cows is = max(stalls[])-min(stalls[]). This case occurs when we place 2 cows at two ends of the sorted stalls array.</li></ul>\n<p>From the observations, <strong><em>we can conclude that our answer lies in the range </em></strong><strong><em><br></em></strong><strong><em>[1, max(stalls[])-min(stalls[])].</em></strong></p>\n<p><strong>How to place cows with maintaining a certain distance, \u2018dist\u2019, in the sorted stalls:</strong></p>\n<p>To begin, we will position the first cow in the very first stall. Next, we will iterate through the array, starting from the second stall. If the distance between the current stall and the last stall where a cow was placed is greater than or equal to the value 'dist', we will proceed to place the next cow in the current stall. Thus we will try to place the cows and finally, we will check if we have placed all the cows maintaining the distance, \u2018dist\u2019.</p>\n<p>To serve this purpose, we will write a function <strong>canWePlace() </strong>that takes the distance, \u2018dist\u2019, as a parameter and returns true if we can place all the cows maintaining a minimum distance of \u2018dist\u2019. Otherwise, it returns false.</p>\n<p><strong>canWePlace(stalls[], dist, k):</strong></p>\n<ol><li>We will declare two variables, \u2018cntCows\u2019 and \u2018last\u2019. <strong>\u2018cntCows\u2019 will store the number of cows placed</strong>, and <strong>\u2018last\u2019 will store the position of the last placed cow</strong>.</li><li>First, we will place the first cow in the very first stall. So, we will set \u2018cntCows\u2019 to 1 and \u2018last\u2019 to stall[0].</li><li>Then, using a loop we will start iterating the array from index 1. Inside the loop, we will do the following:<ol><li><strong>If stalls[i] - \u2018last\u2019 &gt;= dist: </strong>This means the current stall is at least \u2018dist\u2019 distance away from the last stall. So, we can place the next cow here. We will increase the value \u2018cntCows\u2019 by 1 and set \u2018last\u2019 to the current stall.</li><li><strong>If cntCows &gt;= k: </strong>This means we have already placed k cows with maintaining the minimum distance \u2018dist\u2019. So, we will return true from this step.</li></ol></li><li>If we are outside the loop, we cannot place k cows with a minimum distance of \u2018dist\u2019. So, we will return false.</li></ol>\n</pre>\n</pre>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Practice Section-->\n<div class=\"practice\">\n<span><strong>Practice: </strong></span>\n<div class=\"problem-buttons\">\n\n<!-- Add Problem Link inside href -->\n<a href=\"https://bit.ly/42Vqzu9\" target=\"_blank\" rel=\"noopener\">\n<span>Solve Problem</span>\n<img src=\"https://static.takeuforward.org/wp/uploads/2023/04/Group-11-5.png\" alt=\"code-studio\">\n</a>\n</div>\n</div>\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\nyourself first. </em></p>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<div class=\"horizontal_navbar_dsa_article\">\n<div class=\"grid_container_two\">\n<a href=\"#brute-force-approach\" class=\"two-boxes box-a\">\nBrute Force Approach\n</a>\n<a href=\"#optimal-approach\" class=\"two-boxes box-c\">\nOptimal Approach\n</a>\n<a href=\"#dsa_article_video_explanation\" class=\"three-boxes box-d\">\n<svg width=\"26\" height=\"26\" viewBox=\"0 0 20 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M8 10L13.19 7L8 4V10ZM19.56 2.17C19.69 2.64 19.78 3.27 19.84 4.07C19.91 4.87 19.94 5.56 19.94 6.16L20 7C20 9.19 19.84 10.8 19.56 11.83C19.31 12.73 18.73 13.31 17.83 13.56C17.36 13.69 16.5 13.78 15.18 13.84C13.88 13.91 12.69 13.94 11.59 13.94L10 14C5.81 14 3.2 13.84 2.17 13.56C1.27 13.31 0.69 12.73 0.44 11.83C0.31 11.36 0.22 10.73 0.16 9.93C0.0900001 9.13 0.0599999 8.44 0.0599999 7.84L0 7C0 4.81 0.16 3.2 0.44 2.17C0.69 1.27 1.27 0.69 2.17 0.44C2.64 0.31 3.5 0.22 4.82 0.16C6.12 0.0899998 7.31 0.0599999 8.41 0.0599999L10 0C14.19 0 16.8 0.16 17.83 0.44C18.73 0.69 19.31 1.27 19.56 2.17Z\" fill=\"red\"></path>\n</svg>\n\n</a>\n<div class=\"box-e tooltip\">\n<svg viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M12.842 9.25L11.9577 10.17C11.2502 10.89 10.8081 11.5 10.8081 13H8.84297V12.5C8.84297 11.39 9.28511 10.39 9.99255 9.67L11.2109 8.41C11.5745 8.05 11.7906 7.55 11.7906 7C11.7906 6.46957 11.5836 5.96086 11.2151 5.58579C10.8465 5.21071 10.3467 5 9.82552 5C9.30434 5 8.80451 5.21071 8.43598 5.58579C8.06745 5.96086 7.86041 6.46957 7.86041 7H5.89531C5.89531 5.93913 6.30938 4.92172 7.04644 4.17157C7.7835 3.42143 8.78316 3 9.82552 3C10.8679 3 11.8675 3.42143 12.6046 4.17157C13.3417 4.92172 13.7557 5.93913 13.7557 7C13.7543 7.84324 13.4259 8.65183 12.842 9.25ZM10.8081 17H8.84297V15H10.8081M9.82552 0C8.53521 0 7.25754 0.258658 6.06545 0.761205C4.87337 1.26375 3.79021 2.00035 2.87783 2.92893C1.03519 4.8043 0 7.34784 0 10C0 12.6522 1.03519 15.1957 2.87783 17.0711C3.79021 17.9997 4.87337 18.7362 6.06545 19.2388C7.25754 19.7413 8.53521 20 9.82552 20C12.4314 20 14.9306 18.9464 16.7732 17.0711C18.6158 15.1957 19.651 12.6522 19.651 10C19.651 4.47 15.2296 0 9.82552 0Z\" fill=\"black\"></path>\n</svg>\n<div class=\"bottom\">\n<p>Expand any one approach by clicking the given options in the bar. Clicking one approach on bar,\ncloses all other expands. You can manually expand more than one approach at a time</p>\n<i></i>\n</div>\n\n</div>\n</div>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Approaches Drop-Down -->\n<div class=\"dsa_article_dropdown_approachs \">\n\n<!-- Brute Force Approach Starts from here -->\n<div id=\"brute-force-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nBrute Force Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n<h3><strong>Naive Approach</strong>:&nbsp;</h3>\n<p>The extremely naive approach is to check all possible distances from 1 to max(stalls[])-min(stalls[]). The maximum distance for which the function <strong>canWePlace() </strong>returns true, will be our answer.</p>\n<h3><strong>Algorithm:</strong></h3>\n<ol><li>First, we will sort the given stalls[] array.</li><li>We will use a loop(say <strong>i</strong>) to check all possible distances.</li><li>Next, inside the loop, we will send each distance, i, to the function <strong>canWePlace() </strong>function to check if it is possible to place the cows.<ol><li>We will return (i-1), where i is the minimum distance for which the function <strong>canWePlace()</strong> returns false. Because (i-1) is the maximum distance for which we can place all the cows and for the distances &gt;= i, it becomes impossible.</li></ol></li><li>Finally, if we are outside the loop, we can conclude the minimum possible distance should be max(stalls[])-min(stalls[]). And we will return this value.</li></ol>\n<p><strong>Dry-run: </strong><em>Please refer to the </em><a href=\"https://youtu.be/R_Mfw4ew-Vo\"><em>video</em></a><em> for the dry-run.</em></p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n\n<!-- Insert C++ code of Brute Force Here -->\n#include &lt;bits/stdc++.h>\nusing namespace std;\n\nbool canWePlace(vector&lt;int> &amp;stalls, int dist, int cows) {\n    int n = stalls.size(); //size of array\n    int cntCows = 1; //no. of cows placed\n    int last = stalls[0]; //position of last placed cow.\n    for (int i = 1; i &lt; n; i++) {\n        if (stalls[i] - last >= dist) {\n            cntCows++; //place next cow.\n            last = stalls[i]; //update the last location.\n        }\n        if (cntCows >= cows) return true;\n    }\n    return false;\n}\nint aggressiveCows(vector&lt;int> &amp;stalls, int k) {\n    int n = stalls.size(); //size of array\n    //sort the stalls[]:\n    sort(stalls.begin(), stalls.end());\n\n    int limit = stalls[n - 1] - stalls[0];\n    for (int i = 1; i &lt;= limit; i++) {\n        if (canWePlace(stalls, i, k) == false) {\n            return (i - 1);\n        }\n    }\n    return limit;\n}\n\nint main()\n{\n    vector&lt;int> stalls = {0, 3, 4, 7, 10, 9};\n    int k = 4;\n    int ans = aggressiveCows(stalls, k);\n    cout &lt;&lt; \"The maximum possible minimum distance is: \" &lt;&lt; ans &lt;&lt; \"\\n\";\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\n<!-- Insert Java code of Brute Force Here -->\nimport java.util.*;\n\npublic class tUf {\n    public static boolean canWePlace(int[] stalls, int dist, int cows) {\n        int n = stalls.length; //size of array\n        int cntCows = 1; //no. of cows placed\n        int last = stalls[0]; //position of last placed cow.\n        for (int i = 1; i &lt; n; i++) {\n            if (stalls[i] - last >= dist) {\n                cntCows++; //place next cow.\n                last = stalls[i]; //update the last location.\n            }\n            if (cntCows >= cows) return true;\n        }\n        return false;\n    }\n    public static int aggressiveCows(int[] stalls, int k) {\n        int n = stalls.length; //size of array\n        //sort the stalls[]:\n        Arrays.sort(stalls);\n\n        int limit = stalls[n - 1] - stalls[0];\n        for (int i = 1; i &lt;= limit; i++) {\n            if (canWePlace(stalls, i, k) == false) {\n                return (i - 1);\n            }\n        }\n        return limit;\n    }\n    public static void main(String[] args) {\n        int[] stalls = {0, 3, 4, 7, 10, 9};\n        int k = 4;\n        int ans = aggressiveCows(stalls, k);\n        System.out.println(\"The maximum possible minimum distance is: \" + ans);\n    }\n}\n\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\n<!-- Insert Python code of Brute Force Here -->\ndef canWePlace(stalls, dist, cows):\n    n = len(stalls)  # size of array\n    cntCows = 1  # no. of cows placed\n    last = stalls[0]  # position of last placed cow\n    for i in range(1, n):\n        if stalls[i] - last >= dist:\n            cntCows += 1  # place next cow\n            last = stalls[i]  # update the last location\n        if cntCows >= cows:\n            return True\n    return False\n\ndef aggressiveCows(stalls, k):\n    n = len(stalls)  # size of array\n    stalls.sort()  # sort the stalls[]\n    limit = stalls[n - 1] - stalls[0]\n    for i in range(1, limit + 1):\n        if not canWePlace(stalls, i, k):\n            return i - 1\n    return limit\n\nstalls = [0, 3, 4, 7, 10, 9]\nk = 4\nans = aggressiveCows(stalls, k)\nprint(\"The maximum possible minimum distance is:\", ans)\n\n\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\n<!-- Insert javascript code of Brute Force Here -->\nfunction canWePlace(stalls, dist, cows) {\n    var n = stalls.length; // size of array\n    var cntCows = 1; // no. of cows placed\n    var last = stalls[0]; // position of last placed cow\n    for (var i = 1; i &lt; n; i++) {\n        if (stalls[i] - last >= dist) {\n            cntCows++; // place next cow\n            last = stalls[i]; // update the last location\n        }\n        if (cntCows >= cows) return true;\n    }\n    return false;\n}\n\nfunction aggressiveCows(stalls, k) {\n    var n = stalls.length; // size of array\n    // sort the stalls[]\n    stalls.sort((a, b) => a - b);\n\n    var limit = stalls[n - 1] - stalls[0];\n    for (var i = 1; i &lt;= limit; i++) {\n        if (canWePlace(stalls, i, k) === false) {\n            return i - 1;\n        }\n    }\n    return limit;\n}\n\nvar stalls = [0, 3, 4, 7, 10, 9];\nvar k = 4;\nvar ans = aggressiveCows(stalls, k);\nconsole.log(\"The maximum possible minimum distance is:\", ans);\n\n\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Brute Force Here -->\n<strong>Output:</strong>The maximum possible minimum distance is: 3.\n\n\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n<!-- Insert Time and Space Complexity of Brute Force Here -->\n<p><strong>Time Complexity: </strong>O(NlogN) + O(N *(max(stalls[])-min(stalls[]))), where N = size of the array, max(stalls[]) = maximum element in stalls[] array, min(stalls[]) = minimum element in stalls[] array.<br><strong>Reason: </strong>O(NlogN) for sorting the array.<strong> </strong>We are using a loop from 1 to max(stalls[])-min(stalls[]) to check all possible distances. Inside the loop, we are calling canWePlace() function for each distance. Now, inside the canWePlace() function, we are using a loop that runs for N times.</p>\n<p><strong>Space Complexity: </strong>O(1) as we are not using any extra space to solve this problem.</p>\n</p>\n</details>\n</div>\n</details>\n</div>\n<!-- Brute Force Approach Ends here -->\n\n\n<!-- Optimal Approach Starts from here -->\n\n<div id=\"optimal-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nOptimal Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm of Better Approach Here -->\n<h3><strong>Optimal Approach(Using Binary Search)</strong>:&nbsp;</h3>\n<p>We are going to use the Binary Search algorithm to optimize the approach.</p>\n<p><em>The primary objective of the Binary Search algorithm is to efficiently determine the appropriate half to eliminate, thereby reducing the search space by half. It does this by determining a specific condition that ensures that the target is not present in that half.</em></p>\n<p>Upon closer observation, we can recognize that our answer space, represented as [1, (max(stalls[])-min(stalls[]))], is actually sorted. Additionally, we can identify a pattern that allows us to divide this space into two halves: one consisting of potential answers and the other of non-viable options. So, we will apply binary search on the answer space.</p>\n<p>For example, the given array is {1, 2, 8, 4, 9}. The possible distances are the following:</p>\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/07/Screenshot-2023-07-10-213804.png\" alt=\"\" class=\"wp-image-11572\"/></figure>\n<h3><strong>Algorithm:</strong></h3>\n<ol><li><strong>First, </strong>we will sort the given stalls[] array.</li><li><strong>Place the 2 pointers i.e. low and high: </strong>Initially, we will place the pointers. The pointer low will point to 1 and the high will point to (stalls[n-1]-stalls[0]). As the \u2018stalls[]\u2019 is sorted, \u2018stalls[n-1]\u2019 refers to the maximum, and \u2018stalls[0]\u2019 is the minimum element.<br></li><li><strong>Calculate the \u2018mid\u2019: </strong>Now, inside the loop, we will calculate the value of \u2018mid\u2019 using the following formula:<br><strong>mid = (low+high) // 2 ( \u2018//\u2019 refers to integer division)<br></strong></li><li><strong>Eliminate the halves based on the boolean value returned by canWePlace(): <br></strong>We will pass the potential distance, represented by the variable 'mid', to the <strong>\u2018canWePlace()</strong>' function. This function will return true if it is possible to place all the cows with a minimum distance of \u2018mid\u2019.<ol><li><strong>If the returned value is true: </strong>On satisfying this condition, we can conclude that the number \u2018mid\u2019 is one of our possible answers. But we want the maximum number. So, we will eliminate the left half and consider the right half(i.e. low = mid+1).</li><li><strong>Otherwise, </strong>the value mid is greater than the distance we want. This means the numbers greater than \u2018mid\u2019 should not be considered and the right half of \u2018mid\u2019 consists of such numbers. So, we will eliminate the right half and consider the left half(i.e. high = mid-1).</li></ol></li><li>Finally, outside the loop, we will return the value of high as the pointer will be pointing to the answer.</li></ol>\n<p>The steps from 3-4 will be inside a loop and the loop will continue until low crosses high.</p>\n<p><strong>Note:</strong><strong><em> </em></strong><em>It is always the opposite polarity. Initially the pointer \u2018high\u2019 was in the \u2018not-possible\u2019 half and so it ends up in the \u2018possible\u2019 half. Similarly, \u2018low\u2019 was initially in the \u2018possible\u2019 part and it ends up in the \u2018not-possible\u2019 part.</em></p>\n<p><strong>Note: </strong><em>Please make sure to refer to the </em><a href=\"https://youtu.be/R_Mfw4ew-Vo\"><em>video</em></a><em> and try out some test cases of your own to understand, how the pointer \u2018high\u2019 will be always pointing to the answer in this case. This is also the reason we have not used any extra variable here to store the answer.</em></p>\n<p><strong>Dry-run: </strong><em>Please refer to the </em><a href=\"https://youtu.be/R_Mfw4ew-Vo\"><em>video</em></a><em> for the dry-run.</em></p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n\n<!-- Insert C++ code of Optimal Approach Here-->\n#include &lt;bits/stdc++.h>\nusing namespace std;\n\nbool canWePlace(vector&lt;int> &amp;stalls, int dist, int cows) {\n    int n = stalls.size(); //size of array\n    int cntCows = 1; //no. of cows placed\n    int last = stalls[0]; //position of last placed cow.\n    for (int i = 1; i &lt; n; i++) {\n        if (stalls[i] - last >= dist) {\n            cntCows++; //place next cow.\n            last = stalls[i]; //update the last location.\n        }\n        if (cntCows >= cows) return true;\n    }\n    return false;\n}\nint aggressiveCows(vector&lt;int> &amp;stalls, int k) {\n    int n = stalls.size(); //size of array\n    //sort the stalls[]:\n    sort(stalls.begin(), stalls.end());\n\n    int low = 1, high = stalls[n - 1] - stalls[0];\n    //apply binary search:\n    while (low &lt;= high) {\n        int mid = (low + high) / 2;\n        if (canWePlace(stalls, mid, k) == true) {\n            low = mid + 1;\n        }\n        else high = mid - 1;\n    }\n    return high;\n}\n\nint main()\n{\n    vector&lt;int> stalls = {0, 3, 4, 7, 10, 9};\n    int k = 4;\n    int ans = aggressiveCows(stalls, k);\n    cout &lt;&lt; \"The maximum possible minimum distance is: \" &lt;&lt; ans &lt;&lt; \"\\n\";\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\n<!-- Insert Java code of Optimal Approach Here -->\nimport java.util.*;\n\npublic class tUf {\n    public static boolean canWePlace(int[] stalls, int dist, int cows) {\n        int n = stalls.length; //size of array\n        int cntCows = 1; //no. of cows placed\n        int last = stalls[0]; //position of last placed cow.\n        for (int i = 1; i &lt; n; i++) {\n            if (stalls[i] - last >= dist) {\n                cntCows++; //place next cow.\n                last = stalls[i]; //update the last location.\n            }\n            if (cntCows >= cows) return true;\n        }\n        return false;\n    }\n    public static int aggressiveCows(int[] stalls, int k) {\n        int n = stalls.length; //size of array\n        //sort the stalls[]:\n        Arrays.sort(stalls);\n\n        int low = 1, high = stalls[n - 1] - stalls[0];\n        //apply binary search:\n        while (low &lt;= high) {\n            int mid = (low + high) / 2;\n            if (canWePlace(stalls, mid, k) == true) {\n                low = mid + 1;\n            } else high = mid - 1;\n        }\n        return high;\n    }\n    public static void main(String[] args) {\n        int[] stalls = {0, 3, 4, 7, 10, 9};\n        int k = 4;\n        int ans = aggressiveCows(stalls, k);\n        System.out.println(\"The maximum possible minimum distance is: \" + ans);\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\n<!-- Insert Python code of Optimal Approach Here -->\ndef canWePlace(stalls, dist, cows):\n    n = len(stalls)  # size of array\n    cntCows = 1  # no. of cows placed\n    last = stalls[0]  # position of last placed cow\n    for i in range(1, n):\n        if stalls[i] - last >= dist:\n            cntCows += 1  # place next cow\n            last = stalls[i]  # update the last location\n        if cntCows >= cows:\n            return True\n    return False\n\ndef aggressiveCows(stalls, k):\n    n = len(stalls)  # size of array\n    stalls.sort()  # sort the stalls\n\n    low = 1\n    high = stalls[n - 1] - stalls[0]\n    # apply binary search\n    while low &lt;= high:\n        mid = (low + high) // 2\n        if canWePlace(stalls, mid, k):\n            low = mid + 1\n        else:\n            high = mid - 1\n    return high\n\nstalls = [0, 3, 4, 7, 10, 9]\nk = 4\nans = aggressiveCows(stalls, k)\nprint(\"The maximum possible minimum distance is:\", ans)\n\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\n<!-- Insert javascript code of Brute Force Here -->\nfunction canWePlace(stalls, dist, cows) {\n    const n = stalls.length; // size of array\n    let cntCows = 1; // number of cows placed\n    let last = stalls[0]; // position of last placed cow\n    for (let i = 1; i &lt; n; i++) {\n        if (stalls[i] - last >= dist) {\n            cntCows++; // place next cow\n            last = stalls[i]; // update the last location\n        }\n        if (cntCows >= cows) return true;\n    }\n    return false;\n}\n\nfunction aggressiveCows(stalls, k) {\n    const n = stalls.length; // size of array\n    stalls.sort((a, b) => a - b); // sort the stalls array\n\n    let low = 1, high = stalls[n - 1] - stalls[0];\n    // apply binary search\n    while (low &lt;= high) {\n        const mid = Math.floor((low + high) / 2);\n        if (canWePlace(stalls, mid, k)) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return high;\n}\n\nconst stalls = [0, 3, 4, 7, 10, 9];\nconst k = 4;\nconst ans = aggressiveCows(stalls, k);\nconsole.log(\"The maximum possible minimum distance is:\", ans);\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Optimal Apporach Here -->\n<strong>Output:</strong>The maximum possible minimum distance is: 3.\n\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Optimal Approach-->\n<p><strong>Time Complexity: </strong>O(NlogN) + O(N * log(max(stalls[])-min(stalls[]))), where N = size of the array, max(stalls[]) = maximum element in stalls[] array, min(stalls[]) = minimum element in stalls[] array.<br><strong>Reason: </strong>O(NlogN) for sorting the array. We are applying binary search on [1, max(stalls[])-min(stalls[])]. Inside the loop, we are calling canWePlace() function for each distance, \u2018mid\u2019. Now, inside the canWePlace() function, we are using a loop that runs for N times.</p>\n<p><strong>Space Complexity: </strong>O(1) as we are not using any extra space to solve this problem.</p>\n</p>\n</details>\n</div>\n</details>\n</div>\n<!-- Optimal Approach Starts from here -->\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n<details>\n<summary class=\"main-summary\">\n<span>\nVideo Explanation\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"yt-video-wrapper\">\n\n<!-- Insert iframe embed Link of Youtube Video-->\n<iframe class=\"lazy-loaded\" loading=\"lazy\" title=\"Aggressive Cows\" width=\"810\" height=\"456\" data-lazy-type=\"iframe\" data-src=\"https://www.youtube.com/embed/R_Mfw4ew-Vo\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\" src=\"https://www.youtube.com/embed/R_Mfw4ew-Vo?feature=oembed\"></iframe><noscript>\n<iframe loading=\"lazy\" title=\"Aggressive Cows\" width=\"810\" height=\"456\" src=\"https://www.youtube.com/embed/R_Mfw4ew-Vo\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe></noscript>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script>\n\nconst codeSections = document.querySelectorAll('.code-section');\n\n// Get last selected language from localStorage or set default value\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\n// Update last selected language for all sections and store in localStorage\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\n// Handle copy button click event\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\n// Set initial state of the tabs\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<script>\nconst codeSections = document.querySelectorAll('.code-section');\n\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script src=\"https://takeuforward.org/UXApproachDropDowns/2ApproachJSScript.js\"></script>\n<!-- /wp:html -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em><em>Special thanks to\u00a0<strong><a href=\"http://linkedin.com/in/harshitgrg\" target=\"_blank\" rel=\"noreferrer noopener nofollow\"><strong>Harshit Garg</strong></a></strong>,<em><em>\u00a0<a href=\"https://www.linkedin.com/in/imsudip/\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>Sudip Ghosh</strong></a></em></em></em></em> <em><em>and <em><strong><a href=\"https://www.linkedin.com/in/kriti39/\" target=\"_blank\" rel=\"noreferrer noopener\">KRITIDIPTA GHOSH</a></strong></em></em></em> <em><em>for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,\u00a0</em><a href=\"https://takeuforward.org/contribute/help-us-grow-takeuforward/\">please check out this articl</a><em>e</em></em></p></blockquote>\n<!-- /wp:quote -->"
}