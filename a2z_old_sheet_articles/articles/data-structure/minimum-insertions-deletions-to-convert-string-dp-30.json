{
    "dislikes": 0,
    "video": "yMnH0jrir0Q",
    "publishedOn": "Sun Mar 24 2024 22:10:27 GMT+0530 (India Standard Time)",
    "slug": "minimum-insertions-deletions-to-convert-string-dp-30",
    "aid": "1782",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/minimum-insertions-or-deletions-to-convert-string-a-to-b",
    "title": "Minimum Insertions/Deletions to Convert String | (DP- 30)",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "dynamic-programming",
            "topic-title": "Dynamic Programming"
        },
        {
            "topic-id": "recursion",
            "topic-title": "Recursion"
        }
    ],
    "likes": 34,
    "category_tag": "data-structure",
    "preview": "Problem Statement: Minimum Insertions/Deletions to Convert String A to String B We are given two strings, str1 and str2. We are allowed the following operations: * Delete any number of characters f...",
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement: </strong>Minimum Insertions/Deletions to Convert String A to String B</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We are given two strings, str1 and str2. We are allowed the following operations:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>Delete any number of characters from string str1.</li><li>Insert any number of characters in string str1.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>We need to tell the minimum operations required to convert str1 to str2.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Pre-req:\u00a0 </strong><a href=\"https://takeuforward.org/data-structure/longest-common-subsequence-dp-25/\" target=\"_blank\" rel=\"noreferrer noopener\">Longest Common Subsequence</a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n<details class=\"article_example_details\">\n<summary class=\"article_example_summary\">\n<span><strong>\nExamples\n</strong>\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"atricle_example_content\">\n<pre class=\"wp-block-preformatted\"><!-- Insert New Examples Here -->\n<pre class=\"wp-block-preformatted\"><strong>Example:</strong>\n\n<img width=\"537\" height=\"263\" src=\"https://lh5.googleusercontent.com/A8n8o72QL6MTlp6mHwRPPIkAbNfSryFpp2SxQt-abKGqFhfVcbcwfdydf8gBeW-z6E1Yxumm6f6SFZdWPfWLQ41Ik_hmhZnUZs74L6RRHUbtp02g0LlcD0dTUXSEje1hi41EVJdf\">\n</pre>\n</pre>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Practice Section-->\n<div class=\"practice\">\n<span><strong>Practice: </strong></span>\n<div class=\"problem-buttons\">\n\n<!-- Add Problem Link inside href -->\n<a href=\"https://www.codingninjas.com/studio/problems/minimum-number-of-deletions-and-insertions_4244510?utm_source=striver&amp;utm_medium=website&amp;utm_campaign=a_zcoursetuf\" target=\"_blank\" rel=\"noopener\">\n<span>Solve Problem</span>\n<img src=\"https://static.takeuforward.org/wp/uploads/2023/04/Group-11-5.png\" alt=\"code-studio\">\n</a>\n</div>\n</div>\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\nyourself first. </em></p>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<div class=\"horizontal_navbar_dsa_article\">\n<div class=\"grid_container_two\">\n<a href=\"#brute-force-approach\" class=\"two-boxes box-a\">\nTabulation Approach\n</a>\n<a href=\"#optimal-approach\" class=\"two-boxes box-c\">\nSpace Optimization\n</a>\n<a href=\"#dsa_article_video_explanation\" class=\"three-boxes box-d\">\n<svg width=\"26\" height=\"26\" viewBox=\"0 0 20 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M8 10L13.19 7L8 4V10ZM19.56 2.17C19.69 2.64 19.78 3.27 19.84 4.07C19.91 4.87 19.94 5.56 19.94 6.16L20 7C20 9.19 19.84 10.8 19.56 11.83C19.31 12.73 18.73 13.31 17.83 13.56C17.36 13.69 16.5 13.78 15.18 13.84C13.88 13.91 12.69 13.94 11.59 13.94L10 14C5.81 14 3.2 13.84 2.17 13.56C1.27 13.31 0.69 12.73 0.44 11.83C0.31 11.36 0.22 10.73 0.16 9.93C0.0900001 9.13 0.0599999 8.44 0.0599999 7.84L0 7C0 4.81 0.16 3.2 0.44 2.17C0.69 1.27 1.27 0.69 2.17 0.44C2.64 0.31 3.5 0.22 4.82 0.16C6.12 0.0899998 7.31 0.0599999 8.41 0.0599999L10 0C14.19 0 16.8 0.16 17.83 0.44C18.73 0.69 19.31 1.27 19.56 2.17Z\" fill=\"red\"></path>\n</svg>\n\n</a>\n<div class=\"box-e tooltip\">\n<svg viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M12.842 9.25L11.9577 10.17C11.2502 10.89 10.8081 11.5 10.8081 13H8.84297V12.5C8.84297 11.39 9.28511 10.39 9.99255 9.67L11.2109 8.41C11.5745 8.05 11.7906 7.55 11.7906 7C11.7906 6.46957 11.5836 5.96086 11.2151 5.58579C10.8465 5.21071 10.3467 5 9.82552 5C9.30434 5 8.80451 5.21071 8.43598 5.58579C8.06745 5.96086 7.86041 6.46957 7.86041 7H5.89531C5.89531 5.93913 6.30938 4.92172 7.04644 4.17157C7.7835 3.42143 8.78316 3 9.82552 3C10.8679 3 11.8675 3.42143 12.6046 4.17157C13.3417 4.92172 13.7557 5.93913 13.7557 7C13.7543 7.84324 13.4259 8.65183 12.842 9.25ZM10.8081 17H8.84297V15H10.8081M9.82552 0C8.53521 0 7.25754 0.258658 6.06545 0.761205C4.87337 1.26375 3.79021 2.00035 2.87783 2.92893C1.03519 4.8043 0 7.34784 0 10C0 12.6522 1.03519 15.1957 2.87783 17.0711C3.79021 17.9997 4.87337 18.7362 6.06545 19.2388C7.25754 19.7413 8.53521 20 9.82552 20C12.4314 20 14.9306 18.9464 16.7732 17.0711C18.6158 15.1957 19.651 12.6522 19.651 10C19.651 4.47 15.2296 0 9.82552 0Z\" fill=\"black\"></path>\n</svg>\n<div class=\"bottom\">\n<p>Expand any one approach by clicking the given options in the bar. Clicking one approach on bar,\ncloses all other expands. You can manually expand more than one approach at a time</p>\n<i></i>\n</div>\n\n</div>\n</div>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Approaches Drop-Down -->\n<div class=\"dsa_article_dropdown_approachs \">\n\n<!-- Brute Force Approach Starts from here -->\n<div id=\"brute-force-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nTabulation Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n<h3><strong>Intuition:&nbsp;</strong></h3>\n<p>We need to find the minimum operations required to convert string str1 to str2. Let us keep the \u201cminimum\u201d criteria aside and think, what maximum operations will be required for this conversion?</p>\n<p>The easiest way is to remove all the characters of str1 and then insert all the characters of str2. In this way, we will convert str1 to str2 with \u2018n+m\u2019 operations. (Here n and m are the length of strings str1 and str2 respectively).&nbsp;</p>\n<p><img width=\"494\" height=\"267\" src=\"https://lh3.googleusercontent.com/HwmIhBK3mbCxTvrbtRcwVchPVUyu_2DcU9hrXg8TRGF4-ouraI_29_wYVcI0cg62Zg8ZiGT8ANxH8wao2h0H2EZhkYzTdXQDCKuAljfLe3M0P59jgOAc1YDIXTnKhZpti9ILTEau\"></p>\n<p>The problem states us to find the <strong>minimum </strong>of insertions. Let us try to figure it out:</p>\n<ul><li>To minimize the operations, we will first try to refrain from deleting those characters which are already present in str2. More extensively, we refrain from deleting those characters which are common and come in the same order. To minimize the operations, we would like to keep the maximum common characters coming in the same order intact. These maximum characters are the characters of the <strong>longest common subsequence</strong>.&nbsp;</li></ul>\n<ul><li>We will first keep the longest common subsequence of the str1 and str2 intact in str1 and delete all other characters from str1. </li></ul>\n<p><img width=\"574\" height=\"225\" src=\"https://lh6.googleusercontent.com/yLqDbCsK-806xxFyjHaczguMjRCz_ztzut6zUuhlkY2zR4zRXS9StzkN5mwTLoxCtJhp3YfNJ4HpCvi2ZaHB4EigX8C0H3friDdOtJ1VJymJIvM4bIUGr1kkx2ifC5Vhn2p6OwsC\"></p>\n<ul><li>Next, we will insert all the remaining characters of str2 to str1. </li></ul>\n<p><img src=\"https://lh6.googleusercontent.com/at7y7Dh7FsqzPi8PrLrmzmql46X0_VsZgVvIvz7DHApYJ43mKfSRZFViqU5KJZFFDd_wlkf3eeUwI30-_itFXWSy490iVXCikVFhTkvVUYC-siG5yKUiY8Xy06jrmkZ6cVLFqE4N\" width=\"542\" height=\"289\"></p>\n<p>In order to minimize the operations, we need to find the length of the longest common subsequence.</p>\n<p><strong>Minimum Operations required = (n - k) + (m - k)</strong></p>\n<p>Here n and m are the length of str1 and str2 respectively and k is the length of the longest common subsequence of str1 and str2.</p>\n<p><strong>Approach:</strong></p>\n<p>The algorithm is stated as follows:</p>\n<ul><li>Let n and m be the length of str1 and str2 respectively.</li><li>Find the length of the longest common subsequence ( say k) of str1 and str2 as discussed in <strong>&nbsp;</strong><a href=\"https://takeuforward.org/data-structure/longest-common-subsequence-dp-25/\">Longest Common Subsequence</a>.</li><li>Return (n-k) + (m-k) as answer.</li></ul>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h>\nusing namespace std;\n\n// Function to calculate the length of the Longest Common Subsequence\nint lcs(string s1, string s2) {\n    int n = s1.size();\n    int m = s2.size();\n\n    vector&lt;vector&lt;int>> dp(n + 1, vector&lt;int>(m + 1, -1));\n\n    // Initialize the first row and first column to 0\n    for (int i = 0; i &lt;= n; i++) {\n        dp[i][0] = 0;\n    }\n    for (int i = 0; i &lt;= m; i++) {\n        dp[0][i] = 0;\n    }\n\n    for (int ind1 = 1; ind1 &lt;= n; ind1++) {\n        for (int ind2 = 1; ind2 &lt;= m; ind2++) {\n            if (s1[ind1 - 1] == s2[ind2 - 1])\n                dp[ind1][ind2] = 1 + dp[ind1 - 1][ind2 - 1];\n            else\n                dp[ind1][ind2] = max(dp[ind1 - 1][ind2], dp[ind1][ind2 - 1]);\n        }\n    }\n\n    return dp[n][m];\n}\n\n// Function to calculate the minimum operations required to convert str1 to str2\nint canYouMake(string str1, string str2) {\n    int n = str1.size();\n    int m = str2.size();\n    \n    // Calculate the length of the longest common subsequence between str1 and str2\n    int k = lcs(str1, str2);\n    \n    // Calculate the minimum operations required to convert str1 to str2\n    return (n - k) + (m - k);\n}\n\nint main() {\n    string str1 = \"abcd\";\n    string str2 = \"anc\";\n    \n    // Call the canYouMake function and print the result\n    cout &lt;&lt; \"The Minimum operations required to convert str1 to str2: \" &lt;&lt; canYouMake(str1, str2);\n    return 0;\n}\n\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\nclass TUF {\n    // Function to find the length of the Longest Common Subsequence (LCS)\n    static int lcs(String s1, String s2) {\n        int n = s1.length();\n        int m = s2.length();\n\n        // Create a 2D array to store the LCS lengths\n        int dp[][] = new int[n + 1][m + 1];\n\n        // Initialize the dp array with -1\n        for (int rows[] : dp)\n            Arrays.fill(rows, -1);\n\n        // Initialize the first row and first column with 0\n        for (int i = 0; i &lt;= n; i++) {\n            dp[i][0] = 0;\n        }\n        for (int i = 0; i &lt;= m; i++) {\n            dp[0][i] = 0;\n        }\n\n        // Fill the dp array using a bottom-up approach\n        for (int ind1 = 1; ind1 &lt;= n; ind1++) {\n            for (int ind2 = 1; ind2 &lt;= m; ind2++) {\n                if (s1.charAt(ind1 - 1) == s2.charAt(ind2 - 1))\n                    dp[ind1][ind2] = 1 + dp[ind1 - 1][ind2 - 1];\n                else\n                    dp[ind1][ind2] = Math.max(dp[ind1 - 1][ind2], dp[ind1][ind2 - 1]);\n            }\n        }\n\n        return dp[n][m];\n    }\n\n    // Function to find the minimum operations required to convert str1 to str2\n    static int canYouMake(String str1, String str2) {\n        int n = str1.length();\n        int m = str2.length();\n\n        // Find the length of the LCS between str1 and str2\n        int k = lcs(str1, str2);\n\n        // The minimum operations required is the sum of the lengths of str1 and str2 minus twice the length of LCS\n        return (n - k) + (m - k);\n    }\n\n    public static void main(String args[]) {\n        String str1 = \"abcd\";\n        String str2 = \"anc\";\n        System.out.println(\"The Minimum operations required to convert str1 to str2: \"\n                + canYouMake(str1, str2));\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\ndef lcs(s1, s2):\n    n = len(s1)\n    m = len(s2)\n\n    # Initialize a 2D array to store the length of the LCS\n    dp = [[-1 for i in range(m + 1)] for j in range(n + 1)]\n\n    # Base cases: When one of the strings is empty, LCS length is 0.\n    for i in range(n + 1):\n        dp[i][0] = 0\n    for i in range(m + 1):\n        dp[0][i] = 0\n\n    # Fill in the dp array using dynamic programming\n    for ind1 in range(1, n + 1):\n        for ind2 in range(1, m + 1):\n            if s1[ind1 - 1] == s2[ind2 - 1]:\n                dp[ind1][ind2] = 1 + dp[ind1 - 1][ind2 - 1]\n            else:\n                dp[ind1][ind2] = max(dp[ind1 - 1][ind2], dp[ind1][ind2 - 1])\n\n    # The final value in dp will be the length of the LCS\n    return dp[n][m]\n\n# Function to calculate the minimum operations required to convert str1 to str2\ndef canYouMake(str1, str2):\n    n = len(str1)\n    m = len(str2)\n\n    # Calculate the length of the LCS between str1 and str2\n    k = lcs(str1, str2)\n\n    # The minimum operations required is the sum of the deletions needed in both strings\n    return (n - k) + (m - k)\n\ndef main():\n    str1 = \"abcd\"\n    str2 = \"anc\"\n\n    # Calculate and print the minimum operations required to convert str1 to str2\n    print(\"The Minimum operations required to convert str1 to str2:\", canYouMake(str1, str2))\n\nif __name__ == '__main__':\n    main()\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\nfunction lcs(s1, s2) {\n    // Get the lengths of the input strings\n    const n = s1.length;\n    const m = s2.length;\n\n    // Create a 2D array to store the dynamic programming values\n    const dp = new Array(n + 1).fill(null).map(() => new Array(m + 1).fill(-1));\n\n    // Initialize the first row and first column with 0\n    for (let i = 0; i &lt;= n; i++) {\n        dp[i][0] = 0;\n    }\n    for (let i = 0; i &lt;= m; i++) {\n        dp[0][i] = 0;\n    }\n\n    // Fill the dp array using dynamic programming\n    for (let ind1 = 1; ind1 &lt;= n; ind1++) {\n        for (let ind2 = 1; ind2 &lt;= m; ind2++) {\n            if (s1[ind1 - 1] === s2[ind2 - 1]) {\n                dp[ind1][ind2] = 1 + dp[ind1 - 1][ind2 - 1];\n            } else {\n                dp[ind1][ind2] = Math.max(dp[ind1 - 1][ind2], dp[ind1][ind2 - 1]);\n            }\n        }\n    }\n\n    return dp[n][m];\n}\n\n// Function to find the minimum operations required to convert one string to another\nfunction canYouMake(str1, str2) {\n    const n = str1.length;\n    const m = str2.length;\n\n    // Calculate the length of the LCS\n    const k = lcs(str1, str2);\n\n    // The minimum operations required is equal to (n - k) + (m - k)\n    return (n - k) + (m - k);\n}\n\n// Main function\nfunction main() {\n    const str1 = \"abcd\";\n    const str2 = \"anc\";\n\n    // Call the canYouMake function and print the result\n    console.log(\"The Minimum operations required to convert str1 to str2: \" + canYouMake(str1, str2));\n}\n\n// Call the main function to start the program\nmain();\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Brute Force Here -->\n<strong>Output:</strong> The Minimum operations required to convert str1 to str2: 3\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n<!-- Insert Time and Space Complexity of Brute Force Here -->\n<p><strong>Time Complexity: O(N*M)</strong></p>\n<p>Reason: There are two nested loops</p>\n<p><strong>Space Complexity: O(N*M)</strong></p>\n<p>Reason: We are using an external array of size (N*M). Stack Space is eliminated.</p>\n</p>\n</details>\n</div>\n</details>\n</div>\n<!-- Brute Force Approach Ends here -->\n\n\n<!-- Optimal Approach Starts from here -->\n\n<div id=\"optimal-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nSpace Optimization Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm of Better Approach Here -->\n<p>If we closely we are using two rows: <strong>dp[ind1-1][ ], dp[ind][ ],</strong></p>\n<p>So we are not required to contain an entire array, we can simply have two rows prev and cur where prev corresponds to dp[ind-1] and cur to dp[ind].</p>\n<p>After declaring prev and cur, replace dp[ind-1] to prev and dp[ind] with cur and after the inner loop executes, we will set prev = cur, so that the cur row can serve as prev for the next index.</p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h>\nusing namespace std;\n\n// Function to calculate the length of the Longest Common Subsequence\nint lcs(string s1, string s2) {\n    int n = s1.size();\n    int m = s2.size();\n\n    // Create two arrays to store the previous and current rows of DP values\n    vector&lt;int> prev(m + 1, 0), cur(m + 1, 0);\n\n    // Base Case is covered as we have initialized the prev and cur to 0.\n\n    for (int ind1 = 1; ind1 &lt;= n; ind1++) {\n        for (int ind2 = 1; ind2 &lt;= m; ind2++) {\n            if (s1[ind1 - 1] == s2[ind2 - 1])\n                cur[ind2] = 1 + prev[ind2 - 1];\n            else\n                cur[ind2] = max(prev[ind2], cur[ind2 - 1]);\n        }\n        // Update the prev array with the current values\n        prev = cur;\n    }\n\n    // The value at prev[m] contains the length of the LCS\n    return prev[m];\n}\n\n// Function to calculate the minimum operations required to convert str1 to str2\nint canYouMake(string str1, string str2) {\n    int n = str1.size();\n    int m = str2.size();\n    \n    // Calculate the length of the longest common subsequence between str1 and str2\n    int k = lcs(str1, str2);\n    \n    // Calculate the minimum operations required to convert str1 to str2\n    return (n - k) + (m - k);\n}\n\nint main() {\n    string str1 = \"abcd\";\n    string str2 = \"anc\";\n    \n    // Call the canYouMake function and print the result\n    cout &lt;&lt; \"The Minimum operations required to convert str1 to str2: \" &lt;&lt; canYouMake(str1, str2);\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\nclass TUF {\n    // Function to find the length of the Longest Common Subsequence (LCS)\n    static int lcs(String s1, String s2) {\n        int n = s1.length();\n        int m = s2.length();\n\n        // Create two arrays to store the LCS lengths\n        int[] prev = new int[m + 1];\n        int[] cur = new int[m + 1];\n\n        // Base Case: Initialized to 0, as no characters matched yet.\n\n        for (int ind1 = 1; ind1 &lt;= n; ind1++) {\n            for (int ind2 = 1; ind2 &lt;= m; ind2++) {\n                if (s1.charAt(ind1 - 1) == s2.charAt(ind2 - 1))\n                    cur[ind2] = 1 + prev[ind2 - 1];\n                else\n                    cur[ind2] = Math.max(prev[ind2], cur[ind2 - 1]);\n            }\n\n            // Update prev array to store the current values\n            prev = cur.clone();\n        }\n\n        return prev[m];\n    }\n\n    // Function to find the minimum operations required to convert str1 to str2\n    static int canYouMake(String str1, String str2) {\n        int n = str1.length();\n        int m = str2.length();\n\n        // Find the length of the LCS between str1 and str2\n        int k = lcs(str1, str2);\n\n        // The minimum operations required is the sum of the lengths of str1 and str2 minus twice the length of LCS\n        return (n - k) + (m - k);\n    }\n\n    public static void main(String args[]) {\n        String str1 = \"abcd\";\n        String str2 = \"anc\";\n        System.out.println(\"The Minimum operations required to convert str1 to str2: \" +\n                canYouMake(str1, str2));\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\ndef lcs(s1, s2):\n    n = len(s1)\n    m = len(s2)\n\n    # Initialize two lists, prev and cur, for dynamic programming\n    prev = [0] * (m + 1)\n    cur = [0] * (m + 1)\n\n    # Base Case is covered as we have initialized the prev and cur to 0.\n    for ind1 in range(1, n + 1):\n        for ind2 in range(1, m + 1):\n            if s1[ind1 - 1] == s2[ind2 - 1]:\n                cur[ind2] = 1 + prev[ind2 - 1]\n            else:\n                cur[ind2] = max(prev[ind2], cur[ind2 - 1])\n\n        prev = cur[:]  # Update prev to be a copy of cur for the next iteration\n\n    # The final value in prev will be the length of the LCS\n    return prev[m]\n\n# Function to calculate the minimum operations required to convert str1 to str2\ndef canYouMake(str1, str2):\n    n = len(str1)\n    m = len(str2)\n\n    # Calculate the length of the LCS between str1 and str2\n    k = lcs(str1, str2)\n\n    # The minimum operations required is the sum of the deletions needed in both strings\n    return (n - k) + (m - k)\n\ndef main():\n    str1 = \"abcd\"\n    str2 = \"anc\"\n\n    # Calculate and print the minimum operations required to convert str1 to str2\n    print(\"The Minimum operations required to convert str1 to str2:\", canYouMake(str1, str2))\n\nif __name__ == '__main__':\n    main()\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\nfunction lcs(s1, s2) {\n    // Get the lengths of the input strings\n    const n = s1.length;\n    const m = s2.length;\n\n    // Create two arrays, prev and cur, to store dynamic programming values\n    let prev = new Array(m + 1).fill(0);\n    let cur = new Array(m + 1).fill(0);\n\n    // Base case is covered as we have initialized prev and cur to 0.\n\n    // Fill the cur array using dynamic programming\n    for (let ind1 = 1; ind1 &lt;= n; ind1++) {\n        for (let ind2 = 1; ind2 &lt;= m; ind2++) {\n            if (s1[ind1 - 1] === s2[ind2 - 1]) {\n                cur[ind2] = 1 + prev[ind2 - 1];\n            } else {\n                cur[ind2] = Math.max(prev[ind2], cur[ind2 - 1]);\n            }\n        }\n        // Update prev array with the values from cur for the next iteration\n        prev = [...cur];\n    }\n\n    return prev[m];\n}\n\n// Function to find the minimum operations required to convert one string to another\nfunction canYouMake(str1, str2) {\n    const n = str1.length;\n    const m = str2.length;\n\n    // Calculate the length of the LCS\n    const k = lcs(str1, str2);\n\n    // The minimum operations required is equal to (n - k) + (m - k)\n    return (n - k) + (m - k);\n}\n\n// Main function\nfunction main() {\n    const str1 = \"abcd\";\n    const str2 = \"anc\";\n\n    // Call the canYouMake function and print the result\n    console.log(\"The Minimum operations required to convert str1 to str2: \" + canYouMake(str1, str2));\n}\n\n// Call the main function to start the program\nmain();\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Optimal Apporach Here -->\n<strong>Output:</strong> The Minimum operations required to convert str1 to str2: 3\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Optimal Approach-->\n<p><strong>Time Complexity: O(N*M)</strong></p>\n<p>Reason: There are two nested loops.</p>\n<p><strong>Space Complexity: O(M)</strong></p>\n<p>Reason: We are using an external array of size \u2018M+1\u2019 to store only two rows.</p>\n</p>\n</details>\n</div>\n</details>\n</div>\n<!-- Optimal Approach Starts from here -->\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n<details>\n<summary class=\"main-summary\">\n<span>\nVideo Explanation\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"yt-video-wrapper\">\n\n<!-- Insert iframe embed Link of Youtube Video-->\n<iframe class=\"lazy-loaded\" loading=\"lazy\" title=\"Minimum Insertions/Deletions to Convert String A to String B\" width=\"810\" height=\"456\" data-lazy-type=\"iframe\" data-src=\"https://www.youtube.com/embed/yMnH0jrir0Q?si=z1rA5uB56CYuJZUi\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\" src=\"https://www.youtube.com/embed/yMnH0jrir0Q?feature=oembed\"></iframe><noscript>\n<iframe loading=\"lazy\" title=\"Minimum Insertions/Deletions to Convert String A to String B\" width=\"810\" height=\"456\" src=\"https://www.youtube.com/embed/yMnH0jrir0Q?si=z1rA5uB56CYuJZUi\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe></noscript>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script>\n\nconst codeSections = document.querySelectorAll('.code-section');\n\n// Get last selected language from localStorage or set default value\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\n// Update last selected language for all sections and store in localStorage\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\n// Handle copy button click event\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\n// Set initial state of the tabs\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<script>\nconst codeSections = document.querySelectorAll('.code-section');\n\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script src=\"https://takeuforward.org/UXApproachDropDowns/2ApproachJSScript.js\"></script>\n<!-- /wp:html -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;<strong><a href=\"https://www.linkedin.com/in/anshuman-sharma-a1b245194/\" target=\"_blank\" rel=\"noreferrer noopener\">Anshuman Sharma</a></strong>&nbsp;<em>and&nbsp;<a href=\"https://www.linkedin.com/in/abhipsita-das-5b7069212/?originalSubdomain=in\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>Abhipsita Das</strong></a></em></em> <em>for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->"
}