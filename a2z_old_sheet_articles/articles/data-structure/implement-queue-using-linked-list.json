{
    "dislikes": 1,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:10:26 GMT+0530 (India Standard Time)",
    "slug": "implement-queue-using-linked-list",
    "aid": "1777",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/implement-queue-using-linkedlist",
    "title": "Implement Queue using Linked List",
    "topics": [
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "linked-list",
            "topic-title": "Linked List"
        },
        {
            "topic-id": "queue",
            "topic-title": "Queue"
        }
    ],
    "likes": 62,
    "category_tag": "data-structure",
    "preview": "Problem Statement: Implement Queue using Singly LinkedList Prerequisites: Queue and LinkedList Data Structure. Detailed Explanation of the Queue and LinkedList Data Structures is Discussed here * Q...",
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement:&nbsp; </strong>Implement Queue using Singly LinkedList</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Prerequisites</strong>: Queue and LinkedList Data Structure.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Detailed Explanation of the Queue and LinkedList Data Structures is Discussed here</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><a href=\"https://takeuforward.org/arrays/queue-in-data-structure/\" target=\"_blank\" rel=\"noreferrer noopener\">Queue</a>.</li><li><a href=\"https://takeuforward.org/linked-list/linkedlist-in-c/\" target=\"_blank\" rel=\"noreferrer noopener\">LinkedList</a></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Queue Can be Implemented in two ways :&nbsp;</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li>Static Implementation (Using Arrays)</li><li>Dynamic implementation (Using LinkedList) .</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>In this article, we would discuss the implementation of queue using LinkedList.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Comparison between Implementation of Queue using LinkedList and Array.</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:table -->\n<figure class=\"wp-block-table\"><table><tbody><tr><td>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <strong>Array</strong></td><td>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <strong>&nbsp;&nbsp;LinkedList</strong></td></tr><tr><td>It is Static, Needs to provide space Before implementation.&nbsp;&nbsp;<br>Overflow occurs when queue size reaches its maximum capacity<br></td><td>Nodes are allocated dynamically, so the queue can grow and shrink as much as needed.<br>Overflow is not possible until and unless the heap memory got exhausted.</td></tr></tbody></table></figure>\n<!-- /wp:table -->\n\n<!-- wp:paragraph -->\n<p><strong>Operations Associated with queue are :</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li>Enqueue &nbsp; &nbsp;  (Insert Node at Rare End )</li><li>Dequeue &nbsp; &nbsp;  (Delete Node from Front )&nbsp;</li><li>Peek&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (Return value of Front Node without Dequing)</li><li>Empty&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;(Returns True when queue is empty else False)</li><li>Size &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (Returns size of Queue)&nbsp;</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Let the Initial Queue be 10\u219220\u219230\u219240\u2192Null.</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Enqueue:</strong>&nbsp;</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Let\u2019s Enqueue Node with val 50 to Queue. Enqueue is 3 step process&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>Create a node with a value that is to be Enqueued.</li><li>Make the Rare Pointers next, point to the newly created Node.</li><li>As the newly created Node is inserted at the rear end, this is the last value in Queue.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><img width=\"479\" height=\"268\" src=\"https://lh4.googleusercontent.com/N0KDcMiut6Hh3ZUl4aYewhSPFzcB6DER7mnLYT7hEr5vrVBhlDWUz51VGaEuVLJFWvY32KYIU_G1ESOSBanIYPBdhAfLmlKfkMZsyojLEsWaPqEDy5jHel56byM4JUEXijmH4JNa\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Dequeue :</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Let\u2019s Dequeue the front value that is, 10 from Queue.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>First create a ListNode pointer temp, and make it point to the Front value of Queue.</li><li>We should delete the Front Value in Queue. So move the Front pointer to the next node after Front Node. That means Front = Front\u2192next&nbsp;</li><li>Temp is pointing to the previous Front value, temp\u2192next is pointing to the newFront value, as we are interested to delete the temp, Make the temp\u2192next point null.</li><li>We don\u2019t require temp anymore, So delete the temp.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><img width=\"553\" height=\"342\" src=\"https://lh5.googleusercontent.com/HAusTSjp3VCUQwAb1vx1FXqJ9zUMm1dZKAamL3Qkd9cooJsw_OcVL3YGfgxUkfn1kkwo5lSk0jhOK15gUu8e6AsLS9h7HYSo6pSu8jviJ9oIlJf8RWrVyfMjJ2KWjWUpLmfSn61S\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Peek:&nbsp;</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>If Queue is not empty return Front value of Queue.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Empty:&nbsp;</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>If Front is Null then Queue is empty else not.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Size:&nbsp;</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Maintain a variable size, initially set to zero. Upon Enqueue increment size and on Dequeue decrement size.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code :</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    \n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include&lt;bits/stdc++.h&gt; \nusing namespace std;\n\nclass QueueNode\n{\n public: \n    int val;\n    QueueNode *next;\n    QueueNode(int data)\n    {\n       val = data;\n       next = nullptr;\n    }\n};  \nQueueNode *Front = nullptr, *Rare = nullptr;\n\nclass Queue\n{\npublic:\n    int size = 0;\n    bool Empty();\n    void Enqueue(int value);\n    void Dequeue();\n    int Peek();\n};  \nbool Queue ::  Empty()\n{\n    return Front == nullptr;\n}  \nint Queue :: Peek()\n{\n    if(Empty())  \n     {  cout&lt;&lt;\"Queue is Empty\"&lt;&lt;endl;\n        return -1;\n     } \n    else \n      return Front-&gt;val;\n}   \nvoid Queue :: Enqueue(int value)\n{\n    QueueNode *Temp;\n    Temp = new QueueNode(value); \n    if (Temp == nullptr)  //When heap exhausted \n        cout &lt;&lt; \"Queue is Full\" &lt;&lt; endl;\n    else\n    {\n        if (Front == nullptr)\n        {\n            Front = Temp;\n            Rare = Temp;\n        } \n        else\n        {\n            Rare-&gt;next = Temp;\n            Rare = Temp;\n        }\n        cout&lt;&lt;value &lt;&lt;\" Inserted into Queue \"&lt;&lt;endl;\n        size++;\n    } \n}      \nvoid Queue :: Dequeue() \n{\n    if (Front == nullptr) \n        cout &lt;&lt; \"Queue is Empty\" &lt;&lt; endl;\n    else\n    { \n        cout&lt;&lt;Front-&gt;val &lt;&lt;\" Removed From Queue\"&lt;&lt;endl;\n        QueueNode *Temp = Front;\n        Front = Front-&gt;next;\n        delete Temp;\n        size--;\n    }  \n}   \nint main()\n\n{\n    Queue Q;\n    Q.Enqueue(10);\n    Q.Enqueue(20);\n    Q.Enqueue(30);\n    Q.Enqueue(40);\n    Q.Enqueue(50);\n    Q.Dequeue();\n    cout&lt;&lt;\"The size of the Queue is \"&lt;&lt;Q.size&lt;&lt;endl;\n    cout&lt;&lt;\"The Peek element of the Queue is \"&lt;&lt;Q.Peek()&lt;&lt;endl;\n    return 0;\n}   \n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>10 Inserted into Queue<br>20 Inserted into Queue<br>30 Inserted into Queue<br>40 Inserted into Queue<br>50 Inserted into Queue<br>10 Removed From Queue<br>The size of the Queue is 4<br>The Peek element of the Queue is 20</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time complexity:&nbsp;</strong>O(1).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(1)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\n\nclass QueueNode\n{\n    int val;\n    QueueNode next;\n    QueueNode(int data)\n    {\n       val = data;\n       next = null;\n    }\n}  \n\n\nclass Queue\n{\n    QueueNode Front = null, Rear = null;\n    int size = 0;\n\nboolean Empty()\n{\n    return Front == null;\n}  \nint Peek()\n{\n    if(Empty())  \n     {  System.out.println(\"Queue is Empty\");\n        return -1;\n     } \n    else \n      return Front.val;\n}   \nvoid Enqueue(int value)\n{\n    QueueNode Temp;\n    Temp = new QueueNode(value); \n    if (Temp == null)  //When heap exhausted \n        System.out.println(\"Queue is Full\");\n    else\n    {\n        if (Front == null)\n        {\n            Front = Temp;\n            Rear = Temp;\n        } \n        else\n        {\n            Rear.next = Temp;\n            Rear = Temp;\n        }\n        System.out.println(value+\" Inserted into Queue \");\n        size++;\n    } \n}      \nvoid Dequeue() \n{\n    if (Front == null) \n        System.out.println(\"Queue is Empty\");\n    else\n    { \n        System.out.println(Front.val+\" Removed From Queue\");\n        QueueNode Temp = Front;\n        Front = Front.next;\n        size--;\n    }  \n}  \npublic static void main(String args[])\n\n{\n    Queue Q=new Queue();\n    Q.Enqueue(10);\n    Q.Enqueue(20);\n    Q.Enqueue(30);\n    Q.Enqueue(40);\n    Q.Enqueue(50);\n    Q.Dequeue();\n    System.out.println(\"The size of the Queue is \"+Q.size);\n    System.out.println(\"The Peek element of the Queue is \"+Q.Peek());\n}\n}   \n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>10 Inserted into Queue<br>20 Inserted into Queue<br>30 Inserted into Queue<br>40 Inserted into Queue<br>50 Inserted into Queue<br>10 Removed From Queue<br>The size of the Queue is 4<br>The Peek element of the Queue is 20</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time complexity:&nbsp;</strong>O(1).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(1)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;<strong><a href=\"https://www.linkedin.com/in/saisri-angajala-818598197/\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>SaiSri Angajala</strong></a></strong>&nbsp;for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->"
}