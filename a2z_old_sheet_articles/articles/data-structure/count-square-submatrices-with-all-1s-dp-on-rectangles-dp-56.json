{
    "dislikes": 0,
    "video": "auS1fynpnjo",
    "publishedOn": "Sun Mar 24 2024 22:11:53 GMT+0530 (India Standard Time)",
    "slug": "count-square-submatrices-with-all-1s-dp-on-rectangles-dp-56",
    "aid": "2188",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/",
    "title": "Count Square Submatrices with All 1s | DP on Rectangles : DP 56",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "dynamic-programming",
            "topic-title": "Dynamic Programming"
        },
        {
            "topic-id": "recursion",
            "topic-title": "Recursion"
        }
    ],
    "category_tag": "data-structure",
    "likes": 31,
    "preview": "Problem Statement: Given an n * m matrix of ones and zeros, return how many square submatrices have all ones. Examples: Example 1: Input: matrix = [ [0,1,1,1], [1,1,1,1], [0,1,1,1]] Output: 15 Expl...",
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement:</strong> Given an n * m matrix of ones and zeros, return how many square submatrices have all ones.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Examples:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\"><strong>Example 1:</strong>\n<strong>Input:</strong> matrix = [ [0,1,1,1],\n[1,1,1,1],\n[0,1,1,1]]\n<strong>Output</strong>: 15\n<strong>Explanation:</strong> \nThere are 10 squares of size 1.\nThere are 4 squares of size 2.\nThere is  1 square of size 3.\nTotal number of squares = 10 + 4 + 1 = 15.\n\n<strong>Example 2:</strong>\n<strong>Input:</strong> matrix =  [ [1,0,1],\n[1,1,0],\n[1,1,0]]\n<strong>Output</strong>: 7\n<strong>Explanation:</strong> \nThere are 6 squares of size 1.  \nThere is 1 square of size 2. \nTotal number of squares = 6 + 1 = 7.\n</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Solution</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"textColor\":\"accent\"} -->\n<p class=\"has-accent-color has-text-color\"><strong><em>Disclaimer</em></strong>: <em>Don't jump directly to the solution, try it out yourself first. </em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https://www.codingninjas.com/codestudio/problems/count-square-submatrices-with-all-ones_3751502?source=youtube&amp;campaign=striver_dp_videos&amp;utm_source=youtube&amp;utm_medium=affiliate&amp;utm_campaign=striver_dp_videos&amp;leftPanelTab=0\"><em>Problem Link 1</em></a><em>.<br></em><a href=\"https://leetcode.com/problems/count-square-submatrices-with-all-ones/description/\"><em>Problem Link 2</em></a><em>.</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Solution:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Brute force:</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In order to solve this question, we will first try the brute force approach. In the brute force approach, we will just check for every cell(i, j)(if the cell contains 1) that if there exists a k-sized square where k can range from 1 to min(n-i, m-j)(<em>considering 0-based indexing</em>). The implementation will be very much complex. So, we will move on to the optimized approach i.e. the dynamic programming approach.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Optimized approach (dynamic programming approach):</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Until now, all the dynamic programming problems, we have solved were based on recursion. Here, in this problem, we can apply the recursion as well but that will be not much intuitive. That is why, in order to solve this type of square problem, we generally use the tabulation method. This is much more intuitive than the recursive approach.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Intuition:</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Following the tabulation method, we will first create a 2D dp array of the same size as the given 2D matrix. And in the dp array, dp[i][j] will signify, how many squares end at the cell (i, j) i.e. for how many squares the rightmost bottom cell is (i, j).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For example, consider the following matrix:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":7267,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/01/Screenshot-2023-01-10-211015.png\" alt=\"\" class=\"wp-image-7267\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>For the given matrix, the dp array will be the following:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":7268,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/01/Screenshot-2023-01-10-211124.png\" alt=\"\" class=\"wp-image-7268\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>For the above matrix, dp[0][0] stores 1, whereas dp[1][1] stores 2. For cell (0, 0), there is only 1 square(i.e. the cell itself) that ends at (0,0). But for cell (1,1), there is a square of size 1 i.e. the cell itself and there is also a square of size 2 (i.e. the whole matrix) that end at cell (1,1).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Similarly, let\u2019s try it for the following 3X3 matrix:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":7269,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/01/Screenshot-2023-01-10-211242.png\" alt=\"\" class=\"wp-image-7269\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Now, to get the final answer, we will just add all the values of the cells and the total sum will be our final answer. So, for the 2X2 matrix, the answer is (1+1+1+2) = 5 squares and for the 3X3 matrix, the answer is (1+1+1+1+2+2+1+2+3) = 14 squares.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>Now, it\u2019s time to discuss how to fill the values of the dp array:</em></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>If we carefully observe, <strong>for the first row and for the first column</strong>, each cell (i, j), itself will be the one and only square(if cell(i, j) contains 1) that ends at that particular cell i.e. (i, j). So, for the first row and first column, we will just copy the values of the matrix as it is to the dp array.&nbsp;</li><li>Now, to fill the other cells, we will check the following:<br><strong>If the cell contains 1</strong>, we will have to check its three adjacent cells i.e. (i-1, j), (i-1, j-1), and (i, j-1). We will first figure out the minimum number of squares that end at these adjacent cells. And while filling the value for cell(i, j) we will add 1 with that minimum value as the cell (i, j) itself is a square. The formula will be the following:dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i][j-1]) +1</li><li>Otherwise, <strong>if the cell(i, j) contains 0</strong>, we will also set the value of dp[i][j] as 0.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>&nbsp;Using this approach, we will fill all the cells of the dp array.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Note</strong>: <em>If you wish to see the dry run of the above approach, you can watch the video attached to this article.</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Approach</strong>:&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The algorithm steps are as follows:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li>First, we need to create a dp array of the same size as the matrix.</li><li>Then, we will copy the values of the first row and first column of the matrix as it is to the dp array.</li><li>Then, we will start iterating over the rest of the cells and we will observe two cases:<ol><li><strong>If the cell (i, j) contains 0</strong>, we will set the value 0 to the cell dp[i][j].</li><li><strong>If the cell (i, j) contains 1</strong>, we will first find the minimum value among the adjacent three cells i.e. min(dp[i-1][j], dp[i-1][j-1], dp[i][j-1]). And with that minimum value, we will add 1 and set it to the cell dp[i][j]. The formula will look like the following:<br>dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i][j-1]) +1</li></ol></li><li>After filling all the cells in this way, we will just add all the values of the dp array to get the total sum. And this total sum will be the final answer.</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Code</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    \n    \n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint countSquares(int n, int m, vector&lt;vector&lt;int&gt;&gt; &amp;arr) {\n    vector&lt;vector&lt;int&gt;&gt; dp(n, vector&lt;int&gt;(m, 0));\n\n    for (int j = 0; j &lt; m; j++) dp[0][j] = arr[0][j];\n    for (int i = 0; i &lt; n; i++) dp[i][0] = arr[i][0];\n\n    for (int i = 1; i &lt; n; i++) {\n        for (int j = 1; j &lt; m; j++) {\n            if (arr[i][j] == 0) dp[i][j] = 0;\n            else {\n                dp[i][j] = 1 + min(dp[i - 1][j],\n                                   min(dp[i - 1][j - 1], dp[i][j - 1]));\n            }\n        }\n    }\n\n    int sum = 0;\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = 0; j &lt; m; j++) {\n            sum += dp[i][j];\n        }\n    }\n    return sum;\n}\n\nint main() {\n\n    vector&lt;vector&lt;int&gt;&gt; arr = {\n        {0, 1, 1, 1}, {1, 1, 1, 1},\n        {0, 1, 1, 1}\n    };\n    int n = 3, m = 4;\n    int squares = countSquares(n, m, arr);\n    cout &lt;&lt; \"The number of squares: \" &lt;&lt; squares &lt;&lt; \"\\n\";\n    return 0;\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output: </strong>Total number of squares: 15 (<em>For example 1</em>)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O(N*M), where N = total no. of rows and M = total no. of columns<br><strong>Reason: </strong>We are basically traversing a 2D matrix with N rows and M columns.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(N*M), where N = total no. of rows and M = total no. of columns<br><strong>Reason: </strong>We are using a 2D dp array with N rows and M columns.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;<strong><a href=\"https://www.linkedin.com/in/kriti39/\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>KRITIDIPTA GHOSH</strong></a></strong>&nbsp;for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a>.&nbsp;<em>If you want to suggest any improvement/correction in this article please mail us at&nbsp;write4tuf@gmail.com</em></p></blockquote>\n<!-- /wp:quote -->"
}