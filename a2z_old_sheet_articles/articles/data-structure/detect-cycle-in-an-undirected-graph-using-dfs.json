{
    "dislikes": 2,
    "video": "zQ3zgFypzX4",
    "publishedOn": "Sun Mar 24 2024 22:11:39 GMT+0530 (India Standard Time)",
    "slug": "detect-cycle-in-an-undirected-graph-using-dfs",
    "aid": "2129",
    "title": "Detect Cycle in an Undirected Graph (using DFS)",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/detect-a-cycle-in-an-undirected-graph",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "graph",
            "topic-title": "Graph"
        }
    ],
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement: </strong>Given an undirected graph with V vertices and E edges, check whether it contains any cycle or not.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Examples:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\"><strong>Example 1:</strong>\n<strong>Input:</strong>\nV = 8, E = 7\n\n<img width=\"331\" height=\"229\" src=\"https://lh5.googleusercontent.com/nSmXPn2Ubdos2PsRM07d5Sdi15R4rXtsf10o62UEVHc6XngzuKJNuRZmsPs_Xy0GrVG8vGWIdmm8JXadb9plV-8zB1Zg9bl4cAEnPGfhjdTwfqxzl_r6kWtgUlozm8uOuouY8cBt1ASzEUBtU9lcJBA\">\n<strong>Output:</strong> No\n\n<strong>Explanation: </strong>No cycle in the given graph.\n</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\"><strong>Example 2:</strong>\n<strong>Input:</strong>\nV = 8, E = 6\n<img width=\"442\" height=\"127\" src=\"https://lh6.googleusercontent.com/uvIqli0QJE3cbu6CQndq0gfEraGI_PMFO97xVG_SyTx_vbUdZqTMtMNmKklnPX4ysrSENvtcnBwOhzkkPyDdV--HvjXs3SINxCO74k1T_x6X2TE_jHk-vnNcF3QMxJE7UtrB5mZVwzsrWc0pNNCPKFc\">\n<strong>Output:</strong> Yes \n\n<strong>Explanation:</strong> \n4-&gt;5-&gt;6-&gt;4 is a cycle.\n</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Solution</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"textColor\":\"accent\"} -->\n<p class=\"has-accent-color has-text-color\"><strong><em>Disclaimer</em></strong>: <em>Don't jump directly to the solution, try it out yourself first.</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Intuition:</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The cycle in a graph starts from a node and ends at the same node. DFS is a traversal technique that involves the idea of recursion and backtracking. DFS goes in-depth, i.e., traverses all nodes by going ahead, and when there are no further nodes to traverse in the current path, then it backtracks on the same path and traverses other unvisited nodes. The intuition is that we start from a source and go in-depth, and reach any node that has been previously visited in the past; it means there's a cycle.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Approach</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The algorithm steps are as follows:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>In the DFS function call make sure to store the parent data along with the source node, create a visited array, and initialize to 0. The parent is stored so that while checking for re-visited nodes, we don\u2019t check for parents.&nbsp;</li><li>We run through all the unvisited adjacent nodes using an adjacency list and call the recursive dfs function. Also, mark the node as visited.</li><li>If we come across a node that is already marked as visited and is <strong><em>not a parent node</em></strong><em>, </em>then keep on returning true indicating the presence of a cycle; otherwise return false after all the adjacent nodes have been checked and we did not find a cycle.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>NOTE: </strong>We can call it a cycle only if the already visited node is a non-parent node because we cannot say we came to a node that was previously the parent node.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For example, node 2 has two adjacent nodes 1 and 5. 1 is already visited but it is the parent node ( DFS(2, <strong>1</strong>) ), So this cannot be called a cycle.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"444\" height=\"208\" src=\"https://lh6.googleusercontent.com/HtOfHTlejrpaCJEai2AkMLUwLQ994OXBkd9fT_GyKJ49rom0-mvLrEuBnBynYGHppxwnBj9lQ0oCuZ4IywJrse3Fg5jE8X74VSvEj-s5gROAmXf4-txPr1AQTs-vGKIVmv8EZznDAyVlUbkq1bRwHdo\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Node 3 has three adjacent nodes, where 4 and 6 are already visited but node 1 is not visited by node 3, but it\u2019s already marked as visited and is a non-parent node ( DFS(3, <strong>6</strong>) ), indicating the presence of cycle.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"492\" height=\"375\" src=\"https://lh5.googleusercontent.com/PGX4w1JK55MRjSVolUvD6oXBCc9Iph69GjQsD_IHE1nx-WIYq9bVrY3Xob70vA7Ah7SRo-u6vVZpdDHujj3BsPNAUn29g1zGBRpeWLhPBmRPqNERAjWofZSiNoDJm1_QMlYMxfQlA6LfO3vd9rJvEgU\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Pseudocode:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><img width=\"415\" height=\"303\" src=\"https://lh5.googleusercontent.com/e1R309lsO-2zRONBu2e9BEgI1wtuU6fScR_V9vrGHvqvkfhVxm2ApOMH0HAuA9SzII4KOKKPP5XMtDUWc2vtezJE1bUhTFxiWj0WwDsFkLC-3NG-qHn2vb0HRB1snDXl0Tdv8H5nDV4xVM19AlprLQ8\"></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>A graph can have connected components as well. In such cases, if any component forms a cycle then the graph is said to have a cycle. We can follow the algorithm for the same:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><img width=\"389\" height=\"181\" src=\"https://lh3.googleusercontent.com/RTV_tvCz58AqVczXgCDuiOV_uJpM8_nvq8Xjo07YawMFevEbQ2DVILbqBD-IAqK3v5BJHZLMytoEgvfIgoLiOIQjxTL6D7drdKLlg5qXltMBq8McfCxRgjAY404KdNkG3bEu-32JqlEnL9R8dlzMeB4\"></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Consider the following graph and its adjacency list.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><img width=\"522\" height=\"252\" src=\"https://lh4.googleusercontent.com/rZyF2VEaiZcNkIMF436Z1YHFDM2K11sQ8W5uYz5ztPnNQhJv3-LZ2XaDo_oVnkqv6BTO6mH6MM3oSLeI8pTCv075EHwXaqhCe6tbp6VJxw9iqZfCvadGmN4cor7X7D0eWsBagZSv8rInrBaiBv6ftUw\"></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Consider the following illustration to understand the process of detecting a cycle using DFS traversal.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"602\" height=\"457\" src=\"https://lh6.googleusercontent.com/uFfauxe8-4OgK53o7_vXKfMOgyLChLwTmOyp0T2ldYhxDwRCT9w1rUQLM38C8-ogrxi8U5WcDXLbx6w4QbbxioKd3az0QywHSIJ_1e6lPeSi5v1JqU-Cg9NbG6bIOMzJ84LLnCzdrzRYQJpoKwbtdm4\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    \n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nclass Solution {\n  private: \n    bool dfs(int node, int parent, int vis[], vector&lt;int&gt; adj[]) {\n        vis[node] = 1; \n        // visit adjacent nodes\n        for(auto adjacentNode: adj[node]) {\n            // unvisited adjacent node\n            if(!vis[adjacentNode]) {\n                if(dfs(adjacentNode, node, vis, adj) == true) \n                    return true; \n            }\n            // visited node but not a parent node\n            else if(adjacentNode != parent) return true; \n        }\n        return false; \n    }\n  public:\n    // Function to detect cycle in an undirected graph.\n    bool isCycle(int V, vector&lt;int&gt; adj[]) {\n       int vis[V] = {0}; \n       // for graph with connected components \n       for(int i = 0;i&lt;V;i++) {\n           if(!vis[i]) {\n               if(dfs(i, -1, vis, adj) == true) return true; \n           }\n       }\n       return false; \n    }\n};\n\nint main() {\n    \n    // V = 4, E = 2\n    vector&lt;int&gt; adj[4] = {{}, {2}, {1, 3}, {2}};\n    Solution obj;\n    bool ans = obj.isCycle(4, adj);\n    if (ans)\n        cout &lt;&lt; \"1\\n\";\n    else\n        cout &lt;&lt; \"0\\n\";\n    return 0;\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:&nbsp; </strong>0</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O(N + 2E) + O(N), Where N = Nodes, 2E is for total degrees as we traverse all adjacent nodes. In the case of connected components of a graph, it will take another O(N) time.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(N) + O(N) ~ O(N), Space for recursive stack space and visited array.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\n\nclass Solution {\n    private boolean dfs(int node, int parent, int vis[], ArrayList&lt;ArrayList&lt;Integer&gt;&gt; \n    adj) {\n        vis[node] = 1; \n        // go to all adjacent nodes\n        for(int adjacentNode: adj.get(node)) {\n            if(vis[adjacentNode]==0) {\n                if(dfs(adjacentNode, node, vis, adj) == true) \n                    return true; \n            }\n            // if adjacent node is visited and is not its own parent node\n            else if(adjacentNode != parent) return true; \n        }\n        return false; \n    }\n    // Function to detect cycle in an undirected graph.\n    public boolean isCycle(int V, ArrayList&lt;ArrayList&lt;Integer&gt;&gt; adj) {\n       int vis[] = new int[V]; \n       for(int i = 0;i&lt;V;i++) {\n           if(vis[i] == 0) {\n               if(dfs(i, -1, vis, adj) == true) return true; \n           }\n       }\n       return false; \n    }\n    public static void main(String[] args)\n    {\n        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; adj = new ArrayList&lt;&gt;();\n        for (int i = 0; i &lt; 4; i++) {\n            adj.add(new ArrayList &lt; &gt; ());\n        }\n        adj.get(1).add(2);\n        adj.get(2).add(1);\n        adj.get(2).add(3);\n        adj.get(3).add(2);\n                \n        Solution obj = new Solution();\n        boolean ans = obj.isCycle(4, adj);\n        if (ans)\n            System.out.println(\"1\");    \n        else\n            System.out.println(\"0\");\n    }\n\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:&nbsp; </strong>0</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O(N + 2E) + O(N), Where N = Nodes, 2E is for total degrees as we traverse all adjacent nodes. In the case of connected components of a graph, it will take another O(N) time.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(N) + O(N) ~ O(N), Space for recursive stack space and visited array.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;<strong><a href=\"https://www.linkedin.com/in/vanshika-singh-ba6b15157\" target=\"_blank\" rel=\"noreferrer noopener\">Vanshika Singh Gour</a></strong>&nbsp;for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a>.&nbsp;<em>If you want to suggest any improvement/correction in this article please mail us at&nbsp;write4tuf@gmail.com</em></p></blockquote>\n<!-- /wp:quote -->",
    "category_tag": "data-structure",
    "likes": 82,
    "preview": "Problem Statement: Given an undirected graph with V vertices and E edges, check whether it contains any cycle or not. Examples: Example 1: Input: V = 8, E = 7 Output: No Explanation: No cycle in th..."
}