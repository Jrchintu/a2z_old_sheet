{
    "dislikes": 3,
    "video": "",
    "publishedOn": "Thu Apr 04 2024 01:12:28 GMT+0530 (India Standard Time)",
    "slug": "iterative-preorder-traversal-of-binary-tree",
    "aid": "2344",
    "tuf_plus": "",
    "title": "Iterative Preorder Traversal of Binary Tree",
    "topics": [
        {
            "topic-id": "binary-tree",
            "topic-title": "Binary Tree"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        }
    ],
    "category_tag": "data-structure",
    "likes": 70,
    "preview": "Problem Statement: Given the root of a Binary Tree, write a function that returns an array containing the preorder traversal of the tree using an iterative approach with a stack. Examples Example 1...",
    "content": "<p><strong>Problem Statement: </strong>Given the root of a Binary Tree, write a function that returns an array containing the preorder traversal of the tree using an iterative approach with a stack.</p>\n\n<div id=\"article_examples\">\n    <details class=\"article_example_details\">\n        <summary class=\"article_example_summary\">\n            <span><strong>\n                    Examples\n                </strong>\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"atricle_example_content\">\n            <pre class=\"wp-block-preformatted\">\n                <span><strong>Example 1:</strong></span>\n\t\t\t\t<span><strong>Input:</strong> Binary Tree: 4 2 5 3 -1 7 6 -1 9 -1 -1 8 -1 1</span>\n\t\t\t\t<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/iterative-preorder-image1-TErvs8Fh\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n\t\t\t\t<span><strong>Output:</strong> [4 2 3 9 1 5 7 6 8] </span>\n\t\t\t\t<span><strong>Explanation: </strong>We traverse the binary tree in the order of Root, Left then Right recursively resulting in the following traversal:</span>\n\t\t\t\t<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/preorder-binarytree-image2-eEaP4A-s\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n\t\t\t\t<span><strong>Example 2:</strong></span>\n\t\t\t\t<span><strong>Input:</strong>Binary Tree: 1 2 3 4 5 6 7 -1 -1 8 -1 -1 -1 9 10\n\t\t\t\t</span>\n\t\t\t\t<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/preorder-binarytree-image3--zWI1mNm\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n\t\t\t\t<span><strong>Output :</strong> [1 2 4 5 8 3 6 7 9 10]</span>\n\t\t\t\t<span><strong>Explanation: </strong> We traverse the binary tree in the order of Root, Left then Right recursively resulting in the following traversal:</span>\n\t\t\t\t<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/preorder-binarytree-image4-LY9q15u4\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n            </pre>\n        </div>\n    </details>\n</div>\n\n<!-- This is Practice Section-->\n<div class=\"practice\">\n    <span><strong>Practice: </strong></span>\n    <div class=\"problem-buttons\">\n\n        <!-- Add Problem Link inside href -->\n        <a href=\"https://www.codingninjas.com/studio/problems/preorder-binary-tree_5948?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf\" target=\"_blank\" rel=\"noopener\">\n            <span>Solve Problem</span>\n            <img src=\"https://takeuforward-content-images.s3.ap-south-1.amazonaws.com/content/Group-11-5-pFOq-8ga\"\n                alt=\"code-studio\">\n        </a>\n    </div>\n    <!--<div class=\"problem-buttons\">\n         Add Problem Link inside href \n        <a href=\"\" target=\"_blank\" rel=\"noopener\">\n            <span>Solve Problem</span>\n            <img src=\"https://cdn.iconscout.com/icon/free/png-256/free-leetcode-3521542-2944960.png?f=webp\"\n                alt=\"leetcode\">\n        </a>\n    </div>-->\n</div>\n\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\n        yourself first. </em></p>\n\n\n<div id=\"brute-force-approach\">\n    <details>\n        <summary class=\"main-summary\">\n            <span>\n                Optimal Approach \n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                </path>\n            </svg>\n        </summary>\n        <div class=\"common-drops\">\n            <details class=\"secondary-details\" open=\"\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Algorithm / Intuition\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <div class=\"approach-algorithm\">\n                    <!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n                    <p>As a prerequisite to this approach, please understand <strong><a href=\"https://takeuforward.org/data-structure/preorder-traversal-of-binary-tree/\">Preorder Traversal</a></strong> in detail.The preorder traversal of a Binary Tree follows the order: Root, Left then Right.An iterative approach maintains a stack structure to simulate the recursive nature of the traversal without using actual recursion. The stack follows a last-in-first-out methodology and stores the nodes yet to be processed mimicking the depth-first search characteristic of preorder traversal.Initially the root node is pushed into the stack. While the stack is not empty, we continuously pop nodes from the stack and for each popped node, we add its value to the resultant traversal vector, push its right child onto the stack followed by its left child.This sequence ensures that the left child, which should be processed first in the preorder traversal, is visited before the right child due to the Last In, First Out behaviour of the stack. This process continues until all nodes are traversed.</p>\n                               \n                    <p><strong>Algorithm:</strong></p>\n                    <p><strong>Step 1:</strong>  Initialise an empty vector \u2018preorder\u2019 to store the preorder traversal result. Create a stack to store the nodes during traversal and push the root node onto the stack.Check if the root is null, return an empty traversal result if true.</p>\n                    <p><figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/preorder-binarytree-image5-SSdgXQ46\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure></p>\n                    <p><strong>Step 2:</strong> Push the root of the binary tree into the stack.</p>\n                    <p><figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/preorder-binarytree-image6-kV6aPoPc\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure></p>\n                    <p><strong>Step 3:</strong> <p> While the stack is not empty:\n                    \t<ol><li>Get the current node from the top of the stack.</li><li>Remove the node from the stack.</li><li>Add the node\u2019s value to the preorder traversal result.</li><li>First, push the right child onto the track if it exists.</li><li>Secondly, push the left child onto the stack if it exists.</li></p>\n                    <p><figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/preorder-binarytree-image7-LoL_nauS\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure></p>\n                    <p><strong>Step 4:</strong> Return the \u2018preorder\u2019 traversal result.</p>\n                    \n                </div>\n            </details>\n            <details class=\"code-section secondary-details\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Code\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <div class=\"code-tabs\">\n                    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n                    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n                    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n                    <button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n                    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\"\n                        xmlns=\"http://www.w3.org/2000/svg\">\n                        <path\n                            d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n                        </path>\n                    </svg>\n                </div>\n                <div class=\"code-content\">\n                    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;stack&gt;\n\nusing namespace std;\n\n// Define the TreeNode structure\nstruct TreeNode {\n    int val;\n    TreeNode* left;\n    TreeNode* right;\n    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n};\n\nclass Solution {\npublic:\n    // Function to perform preorder traversal\n    // of a binary tree iteratively\n    vector&lt;int&gt; preorderTraversal(TreeNode* root) {\n        // Initialize vector to store\n        // the preorder traversal result\n        vector&lt;int&gt; preorder;\n        \n        // If the root is null, return\n        // an empty traversal result\n        if(root == nullptr) {\n            return preorder;\n        }\n        \n        // Create a stack to store\n        // nodes during traversal\n        stack&lt;TreeNode*&gt; st;\n        // Push the root node\n        // onto the stack\n        st.push(root);\n        \n        // Perform iterative preorder traversal\n        while(!st.empty()) {\n            // Get the current node\n            // from the top of the stack\n            root = st.top();\n            // Remove the node\n            // from the stack\n            st.pop();\n            \n            // Add the node's value to\n            // the preorder traversal result\n            preorder.push_back(root-&gt;val);\n            \n            // Push the right child\n            // onto the stack if exists\n            if(root-&gt;right != nullptr) {\n                st.push(root-&gt;right);\n            }\n            \n            // Push the left child onto\n            // the stack if exists\n            if(root-&gt;left != nullptr) {\n                st.push(root-&gt;left);\n            }\n        }\n        \n        // Return the preorder\n        // traversal result\n        return preorder;\n    }\n};\n\nint main() {\n    // Creating a binary tree\n    TreeNode* root = new TreeNode(1);\n    root-&gt;left = new TreeNode(2);\n    root-&gt;right = new TreeNode(3);\n    root-&gt;left-&gt;left = new TreeNode(4);\n    root-&gt;left-&gt;right = new TreeNode(5);\n\n    // Initializing the Solution class\n    Solution sol;\n\n    // Getting the preorder traversal\n    vector&lt;int&gt; result = sol.preorderTraversal(root);\n\n    // Displaying the preorder traversal result\n    cout &lt;&lt; &quot;Preorder Traversal: &quot;;\n    for (int val : result) {\n        cout &lt;&lt; val &lt;&lt; &quot; &quot;;\n    }\n    cout &lt;&lt; endl;\n\n    return 0;\n}\n                            </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block \" data-lang=\"java\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\n// Define the TreeNode structure\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    TreeNode(int x) {\n        val = x;\n        left = null;\n        right = null;\n    }\n}\n\nclass Solution {\n    // Function to perform preorder traversal\n    // of a binary tree iteratively\n    public List&lt;Integer&gt; preorderTraversal(TreeNode root) {\n        // Initialize list to store\n        // the preorder traversal result\n        List&lt;Integer&gt; preorder = new ArrayList&lt;&gt;();\n\n        // If the root is null, return\n        // an empty traversal result\n        if (root == null) {\n            return preorder;\n        }\n\n        // Create a stack to store\n        // nodes during traversal\n        Stack&lt;TreeNode&gt; st = new Stack&lt;&gt;();\n        // Push the root node\n        // onto the stack\n        st.push(root);\n\n        // Perform iterative preorder traversal\n        while (!st.empty()) {\n            // Get the current node\n            // from the top of the stack\n            root = st.pop();\n\n            // Add the node's value to\n            // the preorder traversal result\n            preorder.add(root.val);\n\n            // Push the right child\n            // onto the stack if exists\n            if (root.right != null) {\n                st.push(root.right);\n            }\n\n            // Push the left child onto\n            // the stack if exists\n            if (root.left != null) {\n                st.push(root.left);\n            }\n        }\n\n        // Return the preorder\n        // traversal result\n        return preorder;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        // Creating a binary tree\n        TreeNode root = new TreeNode(1);\n        root.left = new TreeNode(2);\n        root.right = new TreeNode(3);\n        root.left.left = new TreeNode(4);\n        root.left.right = new TreeNode(5);\n\n        // Initializing the Solution class\n        Solution sol = new Solution();\n\n        // Getting the preorder traversal\n        List&lt;Integer&gt; result = sol.preorderTraversal(root);\n\n        // Displaying the preorder traversal result\n        System.out.print(&quot;Preorder Traversal: &quot;);\n        for (int val : result) {\n            System.out.print(val + &quot; &quot;);\n        }\n        System.out.println();\n    }\n}\n                            </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block\" data-lang=\"python\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"python\" class=\"language-python\">\nfrom typing import List\n\n# Define the TreeNode structure\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    # Function to perform preorder traversal\n    # of a binary tree iteratively\n    def preorderTraversal(self, root: TreeNode) -&gt; List[int]:\n        # Initialize list to store\n        # the preorder traversal result\n        preorder = []\n        \n        # If the root is None, return\n        # an empty traversal result\n        if root is None:\n            return preorder\n        \n        # Create a stack to store\n        # nodes during traversal\n        st = []\n        # Push the root node\n        # onto the stack\n        st.append(root)\n        \n        # Perform iterative preorder traversal\n        while st:\n            # Get the current node\n            # from the top of the stack\n            root = st.pop()\n            \n            # Add the node's value to\n            # the preorder traversal result\n            preorder.append(root.val)\n            \n            # Push the right child\n            # onto the stack if exists\n            if root.right:\n                st.append(root.right)\n            \n            # Push the left child onto\n            # the stack if exists\n            if root.left:\n                st.append(root.left)\n        \n        # Return the preorder\n        # traversal result\n        return preorder\n\n# Creating a binary tree\nroot = TreeNode(1)\nroot.left = TreeNode(2)\nroot.right = TreeNode(3)\nroot.left.left = TreeNode(4)\nroot.left.right = TreeNode(5)\n\n# Initializing the Solution class\nsol = Solution()\n\n# Getting the preorder traversal\nresult = sol.preorderTraversal(root)\n\n# Displaying the preorder traversal result\nprint(&quot;Preorder Traversal:&quot;, end=&quot; &quot;)\nfor val in result:\n    print(val, end=&quot; &quot;)\nprint()\n                           </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block\" data-lang=\"javascript\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"javascript\" class=\"language-javascript\">\nclass TreeNode {\n    constructor(x) {\n        this.val = x;\n        this.left = null;\n        this.right = null;\n    }\n}\n\nclass Solution {\n    // Function to perform preorder traversal\n    // of a binary tree iteratively\n    preorderTraversal(root) {\n        // Initialize array to store\n        // the preorder traversal result\n        let preorder = [];\n        \n        // If the root is null, return\n        // an empty traversal result\n        if (root === null) {\n            return preorder;\n        }\n        \n        // Create a stack to store\n        // nodes during traversal\n        let stack = [];\n        // Push the root node\n        // onto the stack\n        stack.push(root);\n        \n        // Perform iterative preorder traversal\n        while (stack.length &gt; 0) {\n            // Get the current node\n            // from the top of the stack\n            root = stack.pop();\n            \n            // Add the node's value to\n            // the preorder traversal result\n            preorder.push(root.val);\n            \n            // Push the right child\n            // onto the stack if exists\n            if (root.right !== null) {\n                stack.push(root.right);\n            }\n            \n            // Push the left child onto\n            // the stack if exists\n            if (root.left !== null) {\n                stack.push(root.left);\n            }\n        }\n        \n        // Return the preorder\n        // traversal result\n        return preorder;\n    }\n}\n\n// Creating a binary tree\nlet root = new TreeNode(1);\nroot.left = new TreeNode(2);\nroot.right = new TreeNode(3);\nroot.left.left = new TreeNode(4);\nroot.left.right = new TreeNode(5);\n\n// Initializing the Solution class\nlet sol = new Solution();\n\n// Getting the preorder traversal\nlet result = sol.preorderTraversal(root);\n\n// Displaying the preorder traversal result\nconsole.log(&quot;Preorder Traversal: &quot; + result.join(&quot; &quot;));\n                            </code>\n                        </pre>\n                    </div>\n                    <p>\n                        <!-- Insert Output of Brute Force Here -->\n                       <strong>Output</strong> \n                       Preorder Traversal: 1 2 3 4 5\n                    </p>\n                </div>\n            </details>\n            <details class=\"secondary-details\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Complexity Analysis\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <p>\n                    <!-- Insert Time and Space Complexity  Here -->\n                    <p><strong>Time Complexity: O(N)</strong>    where N is the number of nodes in the binary tree. Every node of the binary tree is visited exactly once, and for each node, , the operations performed (pushing and popping from the stack, accessing node values, etc.) are constant time operations.</p>\n\t\t\t\t\t<p><strong>Space Complexity: O(N)</strong>  where N is the number of nodes in the binary tree. This is because the stack can potentially hold all nodes in the tree when dealing with a skewed tree (all nodes have only one child), consuming space proportional to the number of nodes.</p>\n\n                </p>\n            </details>\n        </div>\n    </details>\n</div>\n\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n    <details>\n        <summary class=\"main-summary\">\n            <span>\n                Video Explanation\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"yt-video-wrapper\">\n            <!-- Insert iframe embed Link of Youtube Video-->\n           <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Bfqd8BsPVuw?si=qPQ7aRBTYjef5Xqj\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n        </div>\n    </details>\n</div>\n\n<blockquote class=\"wp-block-quote\">\n    Special thanks to <strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268\">Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,<strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\"> please check out this article</a></strong>\n</blockquote>\n\n<script>\n\n    const codeSections = document.querySelectorAll('.code-section');\n\n    // Get last selected language from localStorage or set default value\n    let lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp';\n\n    codeSections.forEach((section, sectionIndex) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n        const copyBtn = section.querySelector('.copy-btn');\n\n        codeTabs.forEach((tab) => {\n            tab.addEventListener('click', () => {\n                codeTabs.forEach((t) => {\n                    t.classList.remove('dsa_article_code_active');\n                });\n                tab.classList.add('dsa_article_code_active');\n\n                const lang = tab.dataset.lang;\n                const activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                codeBlocks.forEach((block) => {\n                    if (block === activeBlock) {\n                        block.classList.add('dsa_article_code_active');\n                    } else {\n                        block.classList.remove('dsa_article_code_active');\n                    }\n                });\n\n                // Update last selected language for all sections and store in localStorage\n                lastSelectedLanguage = lang;\n                localStorage.setItem('lastSelectedLanguage', lang);\n                codeSections.forEach((otherSection, otherIndex) => {\n                    if (otherIndex !== sectionIndex) {\n                        const otherTabs = otherSection.querySelectorAll('.code-tab');\n                        otherTabs.forEach((otherTab) => {\n                            if (otherTab.dataset.lang === lang) {\n                                otherTab.classList.add('dsa_article_code_active');\n                            } else {\n                                otherTab.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                        const otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                        const otherCodeBlocks = otherSection.querySelectorAll('.code-block');\n                        otherCodeBlocks.forEach((block) => {\n                            if (block === otherActiveBlock) {\n                                block.classList.add('dsa_article_code_active');\n                            } else {\n                                block.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                    }\n                });\n            });\n        });\n\n        // Handle copy button click event\n        copyBtn.addEventListener('click', () => {\n            const activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\n            navigator.clipboard.writeText(activeBlock.innerText);\n            copyBtn.classList.add('dsa_article_code_active');\n            setTimeout(() => {\n                copyBtn.classList.remove('dsa_article_code_active');\n            }, 1000);\n        });\n    });\n\n    // Set initial state of the tabs\n    codeSections.forEach((section) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n\n        codeTabs.forEach((tab) => {\n            if (tab.dataset.lang === lastSelectedLanguage) {\n                tab.classList.add('dsa_article_code_active');\n            } else {\n                tab.classList.remove('dsa_article_code_active');\n            }\n        });\n\n        codeBlocks.forEach((block) => {\n            if (block.dataset.lang === lastSelectedLanguage) {\n                block.classList.add('dsa_article_code_active');\n            } else {\n                block.classList.remove('dsa_article_code_active');\n            }\n        });\n    });\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>"
}