{
    "dislikes": 2,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:09:17 GMT+0530 (India Standard Time)",
    "slug": "maximum-sum-path-in-binary-tree",
    "aid": "1441",
    "title": "Maximum Sum Path in Binary Tree",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/maximum-path-sum-",
    "topics": [
        {
            "topic-id": "binary-tree",
            "topic-title": "Binary Tree"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "recursion",
            "topic-title": "Recursion"
        }
    ],
    "content": "<p><strong>Problem Statement: </strong> Given a Binary Tree, determine the maximum sum achievable along any path within the tree.\nA path in a binary tree is defined as a sequence of nodes where each pair of adjacent nodes is connected by an edge. Nodes can only appear once in the sequence, and the path is not required to start from the root. \nIdentify and compute the maximum sum possible along any path within the given binary tree.\n\n</p>\n\n<div id=\"article_examples\">\n    <details class=\"article_example_details\">\n        <summary class=\"article_example_summary\">\n            <span><strong>\n                    Examples\n                </strong>\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"atricle_example_content\">\n            <pre class=\"wp-block-preformatted\">\n                <span><strong>Example 1:</strong></span>\n\t\t\t\t<span><strong>Input:</strong>Binary Tree: -10 9 20 -1 -1 15 7</span>\n\t\t\t\t<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/Maximum-path-sum-image1-28CrKnMo\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n\t\t\t\t<span><strong>Output:</strong> 42</span>\n\t\t\t\t<span><strong>Explanation: </strong>Out of all the paths possible in the Binary Tree, 15 -> 20 -> 7 has the greatest sum ie. 42.</span>\n\t\t\t\t<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/Maximum-path-sum-image2-YUVqI9Hq\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n\t\t\t\t<span><strong>Example 2:</strong></span>\n\t\t\t\t<span><strong>Input:</strong>Binary Tree: -2 2 1\n\t\t\t\t</span>\n\t\t\t\t<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/Maximum-path-sum-image3-BUE4Y-7t\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n\t\t\t\t<span><strong>Output :</strong> 2</span>\n\t\t\t\t<span><strong>Explanation: </strong>Out of all the paths possible in the Binary Tree, a path starting and ending at the node with value 2 has the greatest sum ie. 2.</span>\n\t\t\t\t<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/Maximum-path-sum-image4-d9m4rdz8\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n            </pre>\n        </div>\n    </details>\n</div>\n\n<!-- This is Practice Section-->\n<div class=\"practice\">\n    <span><strong>Practice: </strong></span>\n    <div class=\"problem-buttons\">\n\n        <!-- Add Problem Link inside href -->\n        <a href=\"https://www.codingninjas.com/studio/problems/maximum-sum-path-of-a-binary-tree._1214968?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf\" target=\"_blank\" rel=\"noopener\">\n            <span>Solve Problem</span>\n            <img src=\"https://takeuforward-content-images.s3.ap-south-1.amazonaws.com/content/Group-11-5-pFOq-8ga\"\n                alt=\"code-studio\">\n        </a>\n    </div>\n    <!--<div class=\"problem-buttons\">\n         Add Problem Link inside href \n        <a href=\"\" target=\"_blank\" rel=\"noopener\">\n            <span>Solve Problem</span>\n            <img src=\"https://cdn.iconscout.com/icon/free/png-256/free-leetcode-3521542-2944960.png?f=webp\"\n                alt=\"leetcode\">\n        </a>\n    </div>-->\n</div>\n\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\n        yourself first. </em></p>\n\n\n<div id=\"brute-force-approach\">\n    <details>\n        <summary class=\"main-summary\">\n            <span>\n                Optimal Approach \n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                </path>\n            </svg>\n        </summary>\n        <div class=\"common-drops\">\n            <details class=\"secondary-details\" open=\"\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Algorithm / Intuition\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <div class=\"approach-algorithm\">\n                    <!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n                    <p>To find the diameter of a binary tree, we can think of every node as a potential `Curving Point` of the path along which we find the sum.\n                    The maximum sum of a path through a turning point (like a curve) can be found by adding the maximum sum achievable in the left subtree, the right subtree, and the value of the turning point.</p>\n                    <p><figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/Maximum-path-sum-image5-oxjo7Ps5\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure></p>\n                    <p>We can recursively traverse the tree, considering each node as a potential turning point and storing the maximum value (our final answer) in a reference variable.\n                    The recursive function should be defined in such a way that we consider both the possibilities:\n                    <ol><li>When the current node is the turning point and in this scenario we calculate the maximum path sum taking into sum contributions from both the left and right subtrees along with the value of the current node.</li><li>When the current node is not the turning point, we consider only the left or the right subtree. The maximum of the two is returned as the maximum path sum of that subtree.</li></p>\n                    <p><strong>Base Case:</strong> When the current node is null which indicates the end of a path or a lead node, we return the maximum path sum as 0.</p>\n\n                    <p><strong>Recursive Function: </strong><ol><li>Calculate the maximum path sum for the left and right subtrees by making recursive calls to the left and right child of the current node.</li><li>Calculate the maximum path sum when the current node serves as the turning point: Maximum Path Sum when Current Node is Turning Point = Maximum Path Sum of Left Subtree + Maximum Path Sum of Right Subtree + Current Value of Node</li><li>Update the overall maximum path sum (maxi) by considering the sum of the current node and the left and right subtree sums.</li><li>Return the maximum sum considering only one branch (either left or right) along with the value of the current node as the maximum sum up until this node.</li></ol></p>\n                    <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/Maximum-path-sum-image6-sZEcs1r7\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n                    <p><strong>Algorithm:</strong></p>\n                    <p><strong>Step 1:</strong> Initialise the variable maxi to the minimum possible integer value. This ensures that the algorithm correctly updates maxi with the first encountered valid path sum (even if its negative) and subsequently updates it whenever a larger path sum is found.</p>\n                    \n                    <p><strong>Step 2:</strong> Call the recursive function `findMaxPathSum` with the root of the binary tree and the reference parameter maxi.</p>\n                    \n                    <p><strong>Step 3:</strong> Base case: If the current node is null, return 0.</p>\n                    \n                    <p><strong>Step 4:</strong> Calculate the maximum path sum for the left and right subtree using recursion.</p>\n                    <p><strong>Step 5:</strong> Update the overall maximum path sum (maxi) by considering the sum of the left and right subtree paths plus the current node's value.\n                    This represents the sum of the path that includes the current node. This sum is used to update the overall maximum path sum (maxi) when the current node serves as the turning point in the path.</p>\n                    <p><figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/Maximum-path-sum-image7-utP7SJmO\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure></p>\n                    <p><strong>Step 6:</strong> Return the maximum sum considering only one branch (either left or right) along with the current node.\n                    This represents the maximum sum considering only one branch (either left or right) along with the current node. This value is returned by the recursive function to contribute to the calculation of the maximum path sum in the binary tree.                Case Considering Negative Leaf Nodes:</p>\n                    <p><figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/Maximum-path-sum-image8-RMyy9Nhz\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure></p>\n                    \n                    \n                </div>\n            </details>\n            <details class=\"code-section secondary-details\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Code\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <div class=\"code-tabs\">\n                    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n                    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n                    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n                    <button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n                    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\"\n                        xmlns=\"http://www.w3.org/2000/svg\">\n                        <path\n                            d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n                        </path>\n                    </svg>\n                </div>\n                <div class=\"code-content\">\n                    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n#include &lt;climits&gt;\n\nusing namespace std;\n\n// Node structure for the binary tree\nstruct Node {\n    int data;\n    Node* left;\n    Node* right;\n    // Constructor to initialize\n    // the node with a value\n    Node(int val) : data(val), left(nullptr), right(nullptr) {}\n};\n\nclass Solution {\npublic:\n    // Recursive function to find the maximum path sum\n    // or a given subtree rooted at 'root'\n    // The variable 'maxi' is a reference parameter\n    // updated to store the maximum path sum encountered\n    int findMaxPathSum(Node* root, int &amp;maxi) {\n        // Base case: If the current node is null, return 0\n        if (root == nullptr) {\n            return 0;\n        }\n\n        // Calculate the maximum path sum\n        // for the left and right subtrees\n        int leftMaxPath = max(0, findMaxPathSum(root-&gt;left, maxi));\n        int rightMaxPath = max(0, findMaxPathSum(root-&gt;right, maxi));\n\n        // Update the overall maximum\n        // path sum including the current node\n        maxi = max(maxi, leftMaxPath + rightMaxPath + root-&gt;data);\n\n        // Return the maximum sum considering\n        // only one branch (either left or right)\n        // along with the current node\n        return max(leftMaxPath, rightMaxPath) + root-&gt;data;\n    }\n\n    // Function to find the maximum\n    // path sum for the entire binary tree\n    int maxPathSum(Node* root) {\n        // Initialize maxi to the\n        // minimum possible integer value\n        int maxi = INT_MIN; \n         // Call the recursive function to\n         // find the maximum path sum\n        findMaxPathSum(root, maxi);\n        // Return the final maximum path sum\n        return maxi; \n    }\n};\n\n\nint main() {\n    // Creating a sample binary tree\n    Node* root = new Node(1);\n    root-&gt;left = new Node(2);\n    root-&gt;right = new Node(3);\n    root-&gt;left-&gt;left = new Node(4);\n    root-&gt;left-&gt;right = new Node(5);\n    root-&gt;left-&gt;right-&gt;right = new Node(6);\n    root-&gt;left-&gt;right-&gt;right-&gt;right = new Node(7);\n\n    // Creating an instance of the Solution class\n    Solution solution;\n\n    // Finding and printing the maximum path sum\n    int maxPathSum = solution.maxPathSum(root);\n    cout &lt;&lt; &quot;Maximum Path Sum: &quot; &lt;&lt; maxPathSum &lt;&lt; endl;\n\n\n    return 0;\n}\n                            </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block \" data-lang=\"java\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"java\" class=\"language-java\">\n// Importing necessary packages\nimport java.util.*;\n\n// Node structure for the binary tree\nclass Node {\n    int data;\n    Node left;\n    Node right;\n\n    // Constructor to initialize\n    // the node with a value\n    Node(int val) {\n        data = val;\n        left = null;\n        right = null;\n    }\n}\n\npublic class Solution {\n    // Recursive function to find the maximum path sum\n    // for a given subtree rooted at 'root'\n    // The variable 'maxi' is a reference parameter\n    // updated to store the maximum path sum encountered\n    int findMaxPathSum(Node root, int[] maxi) {\n        // Base case: If the current node is null, return 0\n        if (root == null) {\n            return 0;\n        }\n\n        // Calculate the maximum path sum\n        // for the left and right subtrees\n        int leftMaxPath = Math.max(0, findMaxPathSum(root.left, maxi));\n        int rightMaxPath = Math.max(0, findMaxPathSum(root.right, maxi));\n\n        // Update the overall maximum\n        // path sum including the current node\n        maxi[0] = Math.max(maxi[0], leftMaxPath + rightMaxPath + root.data);\n\n        // Return the maximum sum considering\n        // only one branch (either left or right)\n        // along with the current node\n        return Math.max(leftMaxPath, rightMaxPath) + root.data;\n    }\n\n    // Function to find the maximum\n    // path sum for the entire binary tree\n    int maxPathSum(Node root) {\n        // Initialize maxi to the\n        // minimum possible integer value\n        int[] maxi = {Integer.MIN_VALUE};\n\n        // Call the recursive function to\n        // find the maximum path sum\n        findMaxPathSum(root, maxi);\n\n        // Return the final maximum path sum\n        return maxi[0];\n    }\n\n    public static void main(String[] args) {\n        // Creating a sample binary tree\n        Node root = new Node(1);\n        root.left = new Node(2);\n        root.right = new Node(3);\n        root.left.left = new Node(4);\n        root.left.right = new Node(5);\n        root.left.right.right = new Node(6);\n        root.left.right.right.right = new Node(7);\n\n        // Creating an instance of the Solution class\n        Solution solution = new Solution();\n\n        // Finding and printing the maximum path sum\n        int maxPathSum = solution.maxPathSum(root);\n        System.out.println(&quot;Maximum Path Sum: &quot; + maxPathSum);\n    }\n}\n                            </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block\" data-lang=\"python\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"python\" class=\"language-python\">\nclass Node:\n    def __init__(self, val):\n        # Constructor to initialize\n        # the node with a value\n        self.data = val\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def findMaxPathSum(self, root, maxi):\n        # Recursive function to find the maximum path sum\n        # for a given subtree rooted at 'root'\n        # The variable 'maxi' is a reference parameter\n        # updated to store the maximum path sum encountered\n\n        # Base case: If the current node is None, return 0\n        if root is None:\n            return 0\n\n        # Calculate the maximum path sum\n        # for the left and right subtrees\n        leftMaxPath = max(0, self.findMaxPathSum(root.left, maxi))\n        rightMaxPath = max(0, self.findMaxPathSum(root.right, maxi))\n\n        # Update the overall maximum\n        # path sum including the current node\n        maxi[0] = max(maxi[0], leftMaxPath + rightMaxPath + root.data)\n\n        # Return the maximum sum considering\n        # only one branch (either left or right)\n        # along with the current node\n        return max(leftMaxPath, rightMaxPath) + root.data\n\n    def maxPathSum(self, root):\n        # Function to find the maximum\n        # path sum for the entire binary tree\n\n        # Initialize maxi to the\n        # minimum possible integer value\n        maxi = [float('-inf')] \n        # Call the recursive function to\n        # find the maximum path sum\n        self.findMaxPathSum(root, maxi)\n        # Return the final maximum path sum\n        return maxi[0]\n\n# Creating a sample binary tree\nroot = Node(1)\nroot.left = Node(2)\nroot.right = Node(3)\nroot.left.left = Node(4)\nroot.left.right = Node(5)\nroot.left.right.right = Node(6)\nroot.left.right.right.right = Node(7)\n\n# Creating an instance of the Solution class\nsolution = Solution()\n\n# Finding and printing the maximum path sum\nmaxPathSum = solution.maxPathSum(root)\nprint(&quot;Maximum Path Sum:&quot;, maxPathSum)\n                           </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block\" data-lang=\"javascript\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"javascript\" class=\"language-javascript\">\n// Node structure for the binary tree\nclass Node {\n    constructor(val) {\n        this.data = val;\n        this.left = null;\n        this.right = null;\n    }\n}\n\nclass Solution {\n    // Recursive function to find the maximum path sum\n    // for a given subtree rooted at 'root'\n    // The variable 'maxi' is a reference parameter\n    // updated to store the maximum path sum encountered\n    findMaxPathSum(root, maxi) {\n        // Base case: If the current node is null, return 0\n        if (root === null) {\n            return 0;\n        }\n\n        // Calculate the maximum path sum\n        // for the left and right subtrees\n        const leftMaxPath = Math.max(0, this.findMaxPathSum(root.left, maxi));\n        const rightMaxPath = Math.max(0, this.findMaxPathSum(root.right, maxi));\n\n        // Update the overall maximum\n        // path sum including the current node\n        maxi[0] = Math.max(maxi[0], leftMaxPath + rightMaxPath + root.data);\n\n        // Return the maximum sum considering\n        // only one branch (either left or right)\n        // along with the current node\n        return Math.max(leftMaxPath, rightMaxPath) + root.data;\n    }\n\n    // Function to find the maximum\n    // path sum for the entire binary tree\n    maxPathSum(root) {\n        // Initialize maxi to the\n        // minimum possible integer value\n        const maxi = [Number.MIN_SAFE_INTEGER];\n\n        // Call the recursive function to\n        // find the maximum path sum\n        this.findMaxPathSum(root, maxi);\n\n        // Return the final maximum path sum\n        return maxi[0];\n    }\n}\n\n// Creating a sample binary tree\nconst root = new Node(1);\nroot.left = new Node(2);\nroot.right = new Node(3);\nroot.left.left = new Node(4);\nroot.left.right = new Node(5);\nroot.left.right.right = new Node(6);\nroot.left.right.right.right = new Node(7);\n\n// Creating an instance of the Solution class\nconst solution = new Solution();\n\n// Finding and printing the maximum path sum\nconst maxPathSum = solution.maxPathSum(root);\nconsole.log(&quot;Maximum Path Sum: &quot; + maxPathSum);\n                            </code>\n                        </pre>\n                    </div>\n                    <p>\n                        <!-- Insert Output of Brute Force Here -->\n                       <strong>Output</strong> \n                      Maximum Path Sum: 24\n                    </p>\n                </div>\n            </details>\n            <details class=\"secondary-details\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Complexity Analysis\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <p>\n                    <!-- Insert Time and Space Complexity  Here -->\n                    <p><strong>Time Complexity: O(N)</strong> where N is the number of nodes in the Binary Tree. This complexity arises from visiting each node exactly once during the recursive traversal.</p>\n\t\t\t\t\t<p><strong>Space Complexity: O(1)</strong> as no additional space or data structures is created that is proportional to the input size of the tree. O(H) Recursive Stack Auxiliary Space : The recursion stack space is determined by the maximum depth of the recursion, which is the height of the binary tree denoted as H. In the balanced case it is log2N and in the worst case its N. </p>\n\n                </p>\n            </details>\n        </div>\n    </details>\n</div>\n\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n    <details>\n        <summary class=\"main-summary\">\n            <span>\n                Video Explanation\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"yt-video-wrapper\">\n            <!-- Insert iframe embed Link of Youtube Video-->\n          <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/WszrfSwMz58?si=XGnI7s5BdtyIVNGH\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n        </div>\n    </details>\n</div>\n\n<blockquote class=\"wp-block-quote\">\n    Special thanks to <strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268\">Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,<strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\"> please check out this article</a></strong>\n</blockquote>\n\n<script>\n\n    const codeSections = document.querySelectorAll('.code-section');\n\n    // Get last selected language from localStorage or set default value\n    let lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp';\n\n    codeSections.forEach((section, sectionIndex) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n        const copyBtn = section.querySelector('.copy-btn');\n\n        codeTabs.forEach((tab) => {\n            tab.addEventListener('click', () => {\n                codeTabs.forEach((t) => {\n                    t.classList.remove('dsa_article_code_active');\n                });\n                tab.classList.add('dsa_article_code_active');\n\n                const lang = tab.dataset.lang;\n                const activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                codeBlocks.forEach((block) => {\n                    if (block === activeBlock) {\n                        block.classList.add('dsa_article_code_active');\n                    } else {\n                        block.classList.remove('dsa_article_code_active');\n                    }\n                });\n\n                // Update last selected language for all sections and store in localStorage\n                lastSelectedLanguage = lang;\n                localStorage.setItem('lastSelectedLanguage', lang);\n                codeSections.forEach((otherSection, otherIndex) => {\n                    if (otherIndex !== sectionIndex) {\n                        const otherTabs = otherSection.querySelectorAll('.code-tab');\n                        otherTabs.forEach((otherTab) => {\n                            if (otherTab.dataset.lang === lang) {\n                                otherTab.classList.add('dsa_article_code_active');\n                            } else {\n                                otherTab.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                        const otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                        const otherCodeBlocks = otherSection.querySelectorAll('.code-block');\n                        otherCodeBlocks.forEach((block) => {\n                            if (block === otherActiveBlock) {\n                                block.classList.add('dsa_article_code_active');\n                            } else {\n                                block.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                    }\n                });\n            });\n        });\n\n        // Handle copy button click event\n        copyBtn.addEventListener('click', () => {\n            const activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\n            navigator.clipboard.writeText(activeBlock.innerText);\n            copyBtn.classList.add('dsa_article_code_active');\n            setTimeout(() => {\n                copyBtn.classList.remove('dsa_article_code_active');\n            }, 1000);\n        });\n    });\n\n    // Set initial state of the tabs\n    codeSections.forEach((section) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n\n        codeTabs.forEach((tab) => {\n            if (tab.dataset.lang === lastSelectedLanguage) {\n                tab.classList.add('dsa_article_code_active');\n            } else {\n                tab.classList.remove('dsa_article_code_active');\n            }\n        });\n\n        codeBlocks.forEach((block) => {\n            if (block.dataset.lang === lastSelectedLanguage) {\n                block.classList.add('dsa_article_code_active');\n            } else {\n                block.classList.remove('dsa_article_code_active');\n            }\n        });\n    });\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>",
    "category_tag": "data-structure",
    "likes": 127,
    "preview": "Problem Statement: Given a Binary Tree, determine the maximum sum achievable along any path within the tree. A path in a binary tree is defined as a sequence of nodes where each pair of adjacent no..."
}