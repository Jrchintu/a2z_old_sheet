{
    "dislikes": 0,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:09:14 GMT+0530 (India Standard Time)",
    "slug": "check-if-two-trees-are-identical",
    "aid": "1429",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/check-if-two-trees-are-identical-or-not",
    "title": "Check if two trees are identical",
    "topics": [
        {
            "topic-id": "binary-tree",
            "topic-title": "Binary Tree"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "recursion",
            "topic-title": "Recursion"
        }
    ],
    "likes": 50,
    "category_tag": "data-structure",
    "preview": "Problem Statement: Given two Binary Trees, return if true if the two trees are identical, otherwise return false. Examples Example 1: Input:Binary Tree 1: 1 2 3 -1 -1 4 5, Binary Tree 2: 1 2 3 -1 -...",
    "content": "<p><strong>Problem Statement: </strong> Given two Binary Trees, return if true if the two trees are identical, otherwise return false.\n</p>\n\n<div id=\"article_examples\">\n    <details class=\"article_example_details\">\n        <summary class=\"article_example_summary\">\n            <span><strong>\n                    Examples\n                </strong>\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"atricle_example_content\">\n            <pre class=\"wp-block-preformatted\">\n                <span><strong>Example 1:</strong></span>\n\t\t\t\t<span><strong>Input:</strong>Binary Tree 1: 1 2 3 -1 -1 4 5, Binary Tree 2: 1 2 3 -1 -1 4 5\n\t\t\t\t</span>\n\t\t\t\t<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/identical-tree-image1-gq9ZDQuS\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n\t\t\t\t<span><strong>Output:</strong> True, these trees are identical.</span>\n\t\t\t\t<span><strong>Explanation: </strong>Two trees are said to be identical if these three conditions are met for every pair of nodes :'\n\t\t\t\t<ol><li>Value of a node in the first tree is equal to the value of the corresponding node in the second tree.</li><li>Left subtree of this node is identical to the left subtree of the corresponding node.</li><li>Right subtree of this node is identical to the right subtree of the corresponding node.</li></ol></span>\n\t\t\t\t\n\t\t\t\t<span><strong>Example 2:</strong></span>\n\t\t\t\t<span><strong>Input:</strong>Binary Tree 1: 1 2 3 -1 -1 4 5, Binary Tree 2: 1 2 3 -1 -1 4\n\t\t\t\t</span>\n\t\t\t\t<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/identical-tree-image2-XcoObt77\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n\t\t\t\t<span><strong>Output :</strong>  False, these trees are not identical.</span>\n\t\t\t\t<span><strong>Explanation: </strong>The two binary trees are not identical because they fail to satisfy the third condition for every pair of nodes. Specifically, the right subtree of the corresponding nodes in the two trees is not identical.\n\t\t\t\tIn Binary Tree 1, the node with value 3 has a right subtree with nodes 4 and 5. However, in Binary Tree 2, the corresponding node with value 3 has a right subtree with only the node 4. Since the right subtrees are not the same, the two trees are not identical according to the given conditions.</span>\n\t\t\t\t\n            </pre>\n        </div>\n    </details>\n</div>\n\n<!-- This is Practice Section-->\n<div class=\"practice\">\n    <span><strong>Practice: </strong></span>\n    <div class=\"problem-buttons\">\n\n        <!-- Add Problem Link inside href -->\n        <a href=\"https://www.codingninjas.com/studio/problems/maximum-sum-path-of-a-binary-tree._1214968?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf\" target=\"_blank\" rel=\"noopener\">\n            <span>Solve Problem</span>\n            <img src=\"https://takeuforward-content-images.s3.ap-south-1.amazonaws.com/content/Group-11-5-pFOq-8ga\"\n                alt=\"code-studio\">\n        </a>\n    </div>\n    <!--<div class=\"problem-buttons\">\n         Add Problem Link inside href \n        <a href=\"\" target=\"_blank\" rel=\"noopener\">\n            <span>Solve Problem</span>\n            <img src=\"https://cdn.iconscout.com/icon/free/png-256/free-leetcode-3521542-2944960.png?f=webp\"\n                alt=\"leetcode\">\n        </a>\n    </div>-->\n</div>\n\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\n        yourself first. </em></p>\n\n\n<div id=\"brute-force-approach\">\n    <details>\n        <summary class=\"main-summary\">\n            <span>\n                Optimal Approach \n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                </path>\n            </svg>\n        </summary>\n        <div class=\"common-drops\">\n            <details class=\"secondary-details\" open=\"\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Algorithm / Intuition\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <div class=\"approach-algorithm\">\n                    <!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n                    <p>To determine if two binary trees are identical, we can follow a recursive approach. We traverse both trees in the preorder manner, meaning that the current node's value is checked before recursively traversing its left and right subtrees.</p>\n                    <p><figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/identical-tree-image3-RFzdCRTS\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure></p>\n                    <p>The idea is to traverse both trees simultaneously, comparing the values of corresponding nodes at each step. We need to ensure that the left subtree of each node in the first tree is identical to the left subtree of the corresponding node in the second tree, and similarly for the right subtrees.</p>\n                    <p><strong>Base Case:</strong> The base case for recursion is reached when both nodes are null, indicating the end of the subtree. In this case return true.\n                    If only one of the nodes in null while the other is not or vice versa, return false since they cannot be identical.</p>\n\n                    <p><strong>Recursive Function: </strong><ol><li>Check if the values of the current nodes in both tree are equal. If not, return false otherwise check the conditions below.</li><li>Check if the left subtree of both the trees is identical or not by calling the recursive function on the left child.</li><li>Check if the right subtree of both the trees is identical or not by calling the recursive function on the right child.</li></ol></p>\n                    <p>If all recursive calls return true, indicating that the values and structures of the subtrees are identical, the function returns true, confirming that the entire trees are identical.</p>\n                    <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/identical-tree-image4-RY34TjV5\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n                    <p><strong>Algorithm:</strong></p>\n                    <p><strong>Step 1:</strong> Start at the root node of both trees (node1 and node2).</p>\n                    \n                    <p><strong>Step 2:</strong> Check if the values of the current nodes in both trees are equal. If not return false.</p>\n                    \n                    <p><strong>Step 3:</strong> Recursively check the left then right subtree of the current node in both trees is identical.</p>\n                    \n                    <p><strong>Step 4:</strong> If all the recursive checks return true, then return the trees are identical, otherwise they are not.</p>\n                    \n                    \n                    \n                </div>\n            </details>\n            <details class=\"code-section secondary-details\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Code\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <div class=\"code-tabs\">\n                    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n                    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n                    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n                    <button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n                    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\"\n                        xmlns=\"http://www.w3.org/2000/svg\">\n                        <path\n                            d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n                        </path>\n                    </svg>\n                </div>\n                <div class=\"code-content\">\n                    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n#include &lt;climits&gt;\n\nusing namespace std;\n\n// Node structure for the binary tree\nstruct Node {\n    int data;\n    Node* left;\n    Node* right;\n    // Constructor to initialize\n    // the node with a value\n    Node(int val) : data(val), left(nullptr), right(nullptr) {}\n};\n\nclass Solution {\npublic:\n    // Function to check if two\n    // binary trees are identical\n    bool isIdentical(Node* node1, Node* node2){\n        // If both nodes are NULL,\n        // they are identical\n        if(node1 == NULL &amp;&amp; node2 == NULL){\n            return true;\n        }\n        // If only one of the nodes is\n        // NULL, they are not identical\n        if( node1== NULL || node2==NULL){\n            return false;\n        }\n        // Check if the current nodes\n        // have the same data value\n        // and recursively check their\n        // left and right subtrees\n        return ((node1-&gt;data == node2-&gt;data)\n            &amp;&amp; isIdentical(node1-&gt;left, node2-&gt;left)\n                &amp;&amp; isIdentical(node1-&gt;right, node2-&gt;right));\n    }\n};\n\n\nint main() {\n    // Node1\n    Node* root1 = new Node(1);\n    root1-&gt;left = new Node(2);\n    root1-&gt;right = new Node(3);\n    root1-&gt;left-&gt;left = new Node(4);\n\n    // Node2\n    Node* root2 = new Node(1);\n    root2-&gt;left = new Node(2);\n    root2-&gt;right = new Node(3);\n    root2-&gt;left-&gt;left = new Node(4);\n\n    Solution solution;\n    \n    if (solution.isIdentical(root1, root2)) {\n        cout &lt;&lt; &quot;The binary trees are identical.&quot; &lt;&lt; endl;\n    } else {\n        cout &lt;&lt; &quot;The binary trees are not identical.&quot; &lt;&lt; endl;\n    }\n\n    return 0;\n}\n                            </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block \" data-lang=\"java\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"java\" class=\"language-java\">\n// Node structure for the binary tree\nclass Node {\n    int data;\n    Node left;\n    Node right;\n\n    // Constructor to initialize\n    // the node with a value\n    public Node(int val) {\n        data = val;\n        left = null;\n        right = null;\n    }\n}\n\npublic class Solution {\n    // Function to check if two\n    // binary trees are identical\n    public boolean isIdentical(Node node1, Node node2) {\n        // If both nodes are NULL,\n        // they are identical\n        if (node1 == null &amp;&amp; node2 == null) {\n            return true;\n        }\n        // If only one of the nodes is\n        // NULL, they are not identical\n        if (node1 == null || node2 == null) {\n            return false;\n        }\n        // Check if the current nodes\n        // have the same data value\n        // and recursively check their\n        // left and right subtrees\n        return ((node1.data == node2.data)\n                &amp;&amp; isIdentical(node1.left, node2.left)\n                &amp;&amp; isIdentical(node1.right, node2.right));\n    }\n\n    public static void main(String[] args) {\n        // Node1\n        Node root1 = new Node(1);\n        root1.left = new Node(2);\n        root1.right = new Node(3);\n        root1.left.left = new Node(4);\n\n        // Node2\n        Node root2 = new Node(1);\n        root2.left = new Node(2);\n        root2.right = new Node(3);\n        root2.left.left = new Node(4);\n\n        Solution solution = new Solution();\n\n        if (solution.isIdentical(root1, root2)) {\n            System.out.println(&quot;The binary trees are identical.&quot;);\n        } else {\n            System.out.println(&quot;The binary trees are not identical.&quot;);\n        }\n    }\n}\n                            </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block\" data-lang=\"python\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"python\" class=\"language-python\">\n# Node structure for the binary tree\nclass Node:\n    def __init__(self, val):\n        self.data = val\n        self.left = None\n        self.right = None\n\n# Solution class with a function to check if two binary trees are identical\nclass Solution:\n    def isIdentical(self, node1, node2):\n        # If both nodes are None, they are identical\n        if node1 is None and node2 is None:\n            return True\n        # If only one of the nodes is None, they are not identical\n        if node1 is None or node2 is None:\n            return False\n        # Check if the current nodes have the same data value\n        # and recursively check their left and right subtrees\n        return (node1.data == node2.data\n                and self.isIdentical(node1.left, node2.left)\n                and self.isIdentical(node1.right, node2.right))\n\n# Creating nodes for binary trees in Python\nroot1 = Node(1)\nroot1.left = Node(2)\nroot1.right = Node(3)\nroot1.left.left = Node(4)\n\nroot2 = Node(1)\nroot2.left = Node(2)\nroot2.right = Node(3)\nroot2.left.left = Node(4)\n\n# Creating an instance of the Solution class\nsolution = Solution()\n\n# Checking if the binary trees are identical\nif solution.isIdentical(root1, root2):\n    print(&quot;The binary trees are identical.&quot;)\nelse:\n    print(&quot;The binary trees are not identical.&quot;)\n                           </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block\" data-lang=\"javascript\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"javascript\" class=\"language-javascript\">\n// Node structure for the binary tree\nclass Node {\n    constructor(val) {\n        this.data = val;\n        this.left = null;\n        this.right = null;\n    }\n}\n\nclass Solution {\n    // Function to check if two binary trees are identical\n    isIdentical(node1, node2) {\n        // If both nodes are NULL, they are identical\n        if (node1 === null && node2 === null) {\n            return true;\n        }\n        // If only one of the nodes is NULL, they are not identical\n        if (node1 === null || node2 === null) {\n            return false;\n        }\n        // Check if the current nodes have the same data value\n        // and recursively check their left and right subtrees\n        return (\n            node1.data === node2.data &&\n            this.isIdentical(node1.left, node2.left) &&\n            this.isIdentical(node1.right, node2.right)\n        );\n    }\n}\n\n// Main function\nfunction main() {\n    // Node1\n    let root1 = new Node(1);\n    root1.left = new Node(2);\n    root1.right = new Node(3);\n    root1.left.left = new Node(4);\n\n    // Node2\n    let root2 = new Node(1);\n    root2.left = new Node(2);\n    root2.right = new Node(3);\n    root2.left.left = new Node(4);\n\n    let solution = new Solution();\n\n    // Check if binary trees are identical\n    if (solution.isIdentical(root1, root2)) {\n        console.log(\"The binary trees are identical.\");\n    } else {\n        console.log(\"The binary trees are not identical.\");\n    }\n}\n\n// Run the main function\nmain();\n\n                            </code>\n                        </pre>\n                    </div>\n                    <p>\n                        <!-- Insert Output of Brute Force Here -->\n                       <strong>Output</strong> \n                      The binary trees are identical.\n                    </p>\n                </div>\n            </details>\n            <details class=\"secondary-details\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Complexity Analysis\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <p>\n                    <!-- Insert Time and Space Complexity  Here -->\n                    <p><strong>Time Complexity: O(N+M)</strong> where N is the number of nodes in the first Binary Tree and M is the number of nodes in the second Binary Tree. This complexity arises from visiting each node of the two binary nodes during their comparison.</p>\n\t\t\t\t\t<p><strong>Space Complexity: O(1)</strong> as no additional space or data structures is created that is proportional to the input size of the tree. \n\t\t\t\t\tO(H) Recursive Stack Auxiliary Space : The recursion stack space is determined by the maximum depth of the recursion, which is the height of the binary tree denoted as H. In the balanced case it is log2N and in the worst case (its N).\n </p>\n\n                </p>\n            </details>\n        </div>\n    </details>\n</div>\n\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n    <details>\n        <summary class=\"main-summary\">\n            <span>\n                Video Explanation\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"yt-video-wrapper\">\n            <!-- Insert iframe embed Link of Youtube Video-->\n          <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/BhuvF_-PWS0?si=Mxt6mgy0Ytg3XrKM\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n        </div>\n    </details>\n</div>\n\n<blockquote class=\"wp-block-quote\">\n    Special thanks to <strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268\">Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,<strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\"> please check out this article</a></strong>\n</blockquote>\n\n<script>\n\n    const codeSections = document.querySelectorAll('.code-section');\n\n    // Get last selected language from localStorage or set default value\n    let lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp';\n\n    codeSections.forEach((section, sectionIndex) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n        const copyBtn = section.querySelector('.copy-btn');\n\n        codeTabs.forEach((tab) => {\n            tab.addEventListener('click', () => {\n                codeTabs.forEach((t) => {\n                    t.classList.remove('dsa_article_code_active');\n                });\n                tab.classList.add('dsa_article_code_active');\n\n                const lang = tab.dataset.lang;\n                const activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                codeBlocks.forEach((block) => {\n                    if (block === activeBlock) {\n                        block.classList.add('dsa_article_code_active');\n                    } else {\n                        block.classList.remove('dsa_article_code_active');\n                    }\n                });\n\n                // Update last selected language for all sections and store in localStorage\n                lastSelectedLanguage = lang;\n                localStorage.setItem('lastSelectedLanguage', lang);\n                codeSections.forEach((otherSection, otherIndex) => {\n                    if (otherIndex !== sectionIndex) {\n                        const otherTabs = otherSection.querySelectorAll('.code-tab');\n                        otherTabs.forEach((otherTab) => {\n                            if (otherTab.dataset.lang === lang) {\n                                otherTab.classList.add('dsa_article_code_active');\n                            } else {\n                                otherTab.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                        const otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                        const otherCodeBlocks = otherSection.querySelectorAll('.code-block');\n                        otherCodeBlocks.forEach((block) => {\n                            if (block === otherActiveBlock) {\n                                block.classList.add('dsa_article_code_active');\n                            } else {\n                                block.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                    }\n                });\n            });\n        });\n\n        // Handle copy button click event\n        copyBtn.addEventListener('click', () => {\n            const activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\n            navigator.clipboard.writeText(activeBlock.innerText);\n            copyBtn.classList.add('dsa_article_code_active');\n            setTimeout(() => {\n                copyBtn.classList.remove('dsa_article_code_active');\n            }, 1000);\n        });\n    });\n\n    // Set initial state of the tabs\n    codeSections.forEach((section) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n\n        codeTabs.forEach((tab) => {\n            if (tab.dataset.lang === lastSelectedLanguage) {\n                tab.classList.add('dsa_article_code_active');\n            } else {\n                tab.classList.remove('dsa_article_code_active');\n            }\n        });\n\n        codeBlocks.forEach((block) => {\n            if (block.dataset.lang === lastSelectedLanguage) {\n                block.classList.add('dsa_article_code_active');\n            } else {\n                block.classList.remove('dsa_article_code_active');\n            }\n        });\n    });\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>"
}