{
    "dislikes": 0,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:11:16 GMT+0530 (India Standard Time)",
    "slug": "buy-and-sell-stocks-with-cooldown-dp-39",
    "aid": "2024",
    "tuf_plus": "",
    "title": "Buy and Sell Stocks With Cooldown | (DP - 39)",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "dynamic-programming",
            "topic-title": "Dynamic Programming"
        },
        {
            "topic-id": "recursion",
            "topic-title": "Recursion"
        }
    ],
    "category_tag": "data-structure",
    "likes": 21,
    "preview": "We are given an array Arr[] of length n. It represents the price of a stock on \u2018n\u2019 days. The following guidelines need to be followed: 1. We can buy and sell the stock any number of times. 2. In or...",
    "content": "<!-- wp:paragraph -->\n<p>We are given an array Arr[] of length n. It represents the price of a stock on \u2018n\u2019 days. The following guidelines need to be followed:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li>We can <a href=\"https://takeuforward.org/data-structure/stock-buy-and-sell/\" target=\"_blank\" rel=\"noreferrer noopener\" title=\"buy and sell the stock\">buy and sell the stock</a> any number of times.</li><li>In order to sell the stock, we need to first buy it on the same or any previous day.</li><li>We can\u2019t buy a stock again after buying it once. In other words, we first buy a stock and then sell it. After selling we can buy and sell again. But we can\u2019t sell before buying and can\u2019t buy before selling any previously bought stock.</li><li>We can\u2019t buy a stock on the very next day of selling it. This is the <strong>cooldown</strong> clause.</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><img width=\"624\" height=\"356\" src=\"https://lh6.googleusercontent.com/4Zn1umvHMA2nKuNoqoh7RxjiymbzBm5KiDJnjbJT8XalxRVZpexPXPFd9ztYVMVPgBJwDv-uZ5R9C4gQVhZbHZnS0Yf7Fsgnbz_wbsyuRxIWGIqa34RZT_4x8PRtPAU44tRXg_30a1Ds90DBHw\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n<details class=\"article_example_details\">\n<summary class=\"article_example_summary\">\n<span><strong>\nExamples\n</strong>\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"atricle_example_content\">\n<pre class=\"wp-block-preformatted\"><!-- Insert New Examples Here -->\n<p><img width=\"624\" height=\"328\" src=\"https://lh3.googleusercontent.com/MrmFbdC1CIyGUrkrjNqL6hJziqJO1bRRM5jYh6K7ETDgGdyQrQLNIGmO_Mb4VMjAjs6vbt-gzqbaV8JddHQN3tQaQdXgXWwf5vBvhLzBsg-TBlX_KMfww_IxRneWWLEgDylvvs5eTQPt1LcANQ\"></p>\n</pre>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Practice Section-->\n<div class=\"practice\">\n<span><strong>Practice: </strong></span>\n<div class=\"problem-buttons\">\n\n<!-- Add Problem Link inside href -->\n<a href=\"https://www.codingninjas.com/studio/problems/best-time-to-buy-and-sell-stock-iv_1080698?utm_source=striver&amp;utm_medium=website&amp;utm_campaign=a_zcoursetuf\" target=\"_blank\" rel=\"noopener\">\n<span>Solve Problem</span>\n<img src=\"https://static.takeuforward.org/wp/uploads/2023/04/Group-11-5.png\" alt=\"code-studio\">\n</a>\n</div>\n</div>\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\nyourself first. </em></p>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<div class=\"horizontal_navbar_dsa_article\">\n<div class=\"grid_container_three\">\n<a href=\"#brute-force-approach\" class=\"three-boxes box-a\">\nMemoization approach\n</a>\n<a href=\"#better-approach\" class=\"three-boxes box-b\">\nTabulation approach\n</a>\n<a href=\"#optimal-approach\" class=\"three-boxes box-c\">\nSpace Optimization\n</a>\n<a href=\"#dsa_article_video_explanation\" class=\"three-boxes box-d\">\n<svg width=\"26\" height=\"26\" viewBox=\"0 0 20 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M8 10L13.19 7L8 4V10ZM19.56 2.17C19.69 2.64 19.78 3.27 19.84 4.07C19.91 4.87 19.94 5.56 19.94 6.16L20 7C20 9.19 19.84 10.8 19.56 11.83C19.31 12.73 18.73 13.31 17.83 13.56C17.36 13.69 16.5 13.78 15.18 13.84C13.88 13.91 12.69 13.94 11.59 13.94L10 14C5.81 14 3.2 13.84 2.17 13.56C1.27 13.31 0.69 12.73 0.44 11.83C0.31 11.36 0.22 10.73 0.16 9.93C0.0900001 9.13 0.0599999 8.44 0.0599999 7.84L0 7C0 4.81 0.16 3.2 0.44 2.17C0.69 1.27 1.27 0.69 2.17 0.44C2.64 0.31 3.5 0.22 4.82 0.16C6.12 0.0899998 7.31 0.0599999 8.41 0.0599999L10 0C14.19 0 16.8 0.16 17.83 0.44C18.73 0.69 19.31 1.27 19.56 2.17Z\" fill=\"red\"></path>\n</svg>\n\n</a>\n<div class=\"box-e tooltip\">\n<svg viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M12.842 9.25L11.9577 10.17C11.2502 10.89 10.8081 11.5 10.8081 13H8.84297V12.5C8.84297 11.39 9.28511 10.39 9.99255 9.67L11.2109 8.41C11.5745 8.05 11.7906 7.55 11.7906 7C11.7906 6.46957 11.5836 5.96086 11.2151 5.58579C10.8465 5.21071 10.3467 5 9.82552 5C9.30434 5 8.80451 5.21071 8.43598 5.58579C8.06745 5.96086 7.86041 6.46957 7.86041 7H5.89531C5.89531 5.93913 6.30938 4.92172 7.04644 4.17157C7.7835 3.42143 8.78316 3 9.82552 3C10.8679 3 11.8675 3.42143 12.6046 4.17157C13.3417 4.92172 13.7557 5.93913 13.7557 7C13.7543 7.84324 13.4259 8.65183 12.842 9.25ZM10.8081 17H8.84297V15H10.8081M9.82552 0C8.53521 0 7.25754 0.258658 6.06545 0.761205C4.87337 1.26375 3.79021 2.00035 2.87783 2.92893C1.03519 4.8043 0 7.34784 0 10C0 12.6522 1.03519 15.1957 2.87783 17.0711C3.79021 17.9997 4.87337 18.7362 6.06545 19.2388C7.25754 19.7413 8.53521 20 9.82552 20C12.4314 20 14.9306 18.9464 16.7732 17.0711C18.6158 15.1957 19.651 12.6522 19.651 10C19.651 4.47 15.2296 0 9.82552 0Z\" fill=\"black\"></path>\n</svg>\n<div class=\"bottom\">\n<p>Expand any one approach by clicking the given options in the bar. Clicking one approach on bar,\ncloses all other expands. You can manually expand more than one approach at a time</p>\n<i></i>\n</div>\n\n</div>\n</div>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Approaches Drop-Down -->\n<div class=\"dsa_article_dropdown_approachs \">\n\n<!-- Brute Force Approach Starts from here -->\n<div id=\"brute-force-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nMemoization Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n<h3><strong>Intuition:</strong></h3>\n<p>Every day, we will have two choices, either to do nothing and move to the next day or to buy/sell (based on the last transaction and whether we are on a cooldown day or not) and find out the profit. Therefore we need to generate all the choices in order to compare the profit. As we need to try out all the possible choices, we will use <strong>recursion</strong>.</p>\n<p><strong>Steps to form the recursive solution:&nbsp;</strong></p>\n<p>We will first form the recursive solution by the three points mentioned in the <a href=\"https://takeuforward.org/data-structure/dynamic-programming-introduction/\" target=\"_blank\" rel=\"noreferrer noopener\">Dynamic Programming Introduction</a>.&nbsp;</p>\n<p><strong>Step 1: </strong>Express the problem in terms of indexes.</p>\n<p>We need to think in the terms of the number of days, therefore one variable will be the array index( say ind). Next, we need to respect the condition that we can\u2019t buy a stock again, that is we need to first sell a stock, and then we can buy that again. Therefore we need a second variable \u2018buy\u2019 which tells us on a particular day whether we can buy or sell the stock. We can generalize the function as :</p>\n<p><img width=\"624\" height=\"187\" src=\"https://lh5.googleusercontent.com/PvW-5duJtGFTo7IG8oG-twXsykoTSnCiXtdzcjBhT807HmXYDah6nwl_VJZ_UouAA63CGrGSHLjLcnBJLo8VRRQHn6HD6o7zmPqGwxQRJolfQ-Uw9ij1NRB7K024zwsT47HCz-zEOdx22FZF9g\"></p>\n<p><strong>Step 2: </strong>Try out all possible choices at a given index.</p>\n<p>Every day, we have two choices:</p>\n<ul><li>To either buy/sell the stock(based on the buy variable\u2019s value).&nbsp;</li><li>To do nothing and move on to the next day.</li></ul>\n<p>We need to generate all the choices. We will use the pick/non-pick technique as discussed in this video \u201c<a href=\"https://www.youtube.com/watch?v=AxNNVECce8c\" target=\"_blank\" rel=\"noreferrer noopener\">Recursion on Subsequences</a>\u201d.</p>\n<p><strong>Case 1: </strong>When buy == 0, we can buy the stock.</p>\n<p>If we can buy the stock on a particular day, we have two options:</p>\n<ul><li><strong>Option 1: </strong>To do no transaction and move to the next day. In this case, the net profit earned will be <strong>0</strong> from the current transaction, and to calculate the maximum profit starting from the next day, we will recursively call f(ind+1,0). As we have not bought the stock, the \u2018buy\u2019 variable value will still remain 0, indicating that we can buy the stock the next day.</li></ul>\n<ul><li><strong>Option 2: </strong>The other option is to buy the stock on the current day. In this case, the net profit earned from the current transaction will be <strong>-Arr[i]</strong>. As we are buying the stock, we are giving money out of our pocket, therefore the profit we earn <strong>is negative</strong>. To calculate the maximum profit starting from the next day, we will recursively call f(ind+1,1). As we have bought the stock, the \u2018buy\u2019 variable value will change to 1, indicating that we can\u2019t buy and only sell the stock the next day.</li></ul>\n<p><strong>Case 2: </strong>When buy == 1, we can sell the stock.</p>\n<p>If we can buy the stock on a particular day, we have two options:</p>\n<ul><li><strong>Option 1: </strong>To do no transaction and move to the next day. In this case, the net profit earned will be <strong>0</strong> from the current transaction, and to calculate the maximum profit starting from the next day, we will recursively call f(ind+1,1). As we have not bought the stock, the \u2018buy\u2019 variable value will still remain at 1, indicating that we can\u2019t buy and only sell the stock the next day.</li></ul>\n<ul><li><strong>Option 2: </strong>The other option is to sell the stock on the current day. In this case, the net profit earned from the current transaction will be +<strong>Arr[i]</strong>. As we are selling the stock, we are putting the money into our pocket, therefore the profit we earn <strong>is positive</strong>. When we sell a stock on day <strong>ind</strong>, we can\u2019t buy it on day ind+1 ( according to the <strong>cooldown</strong> clause) therefore we simply skip that day and find the profit starting from day ind+2, therefore we recursively call <strong>f(ind+2,0)</strong>.</li></ul>\n<p>The figure below gives us the summary:</p>\n<p><img width=\"624\" height=\"413\" src=\"https://lh6.googleusercontent.com/0o98KV1PIKT4wuZr_qOoRND8ULjl7UtGqOwlRlgLNJXlbydYFXDpbKdfCiPiXHLBjMBqgLyapa6hXogIbjE_ANTO1OKgR_JcQ97VpvgJUC1LCvXozJzX4Q4Qlu1Rl0FpB079OADCsmCDe39wWA\"></p>\n<p><img width=\"514\" height=\"398\" src=\"https://lh5.googleusercontent.com/4zrjbnYpSP7jkGvwQV761Ob32MVHToS0-jXacln4uyEf8-oK7AQZL9-_WhNoACwCin6S8r1WIXNQYLmaOv4bx4rdkhHbh--Qr29q02CajDEaY2ZuMflrYkKx4wDG9MiXEHHN9xLkZHuuEtS_oQ\"></p>\n<p><strong>Step 3:&nbsp; Return the maximum&nbsp;</strong></p>\n<p>As we are looking to maximize the profit earned, we will return the maximum value in both cases.</p>\n<p>The final pseudocode after steps 1, 2, and 3:</p>\n<p><img width=\"499\" height=\"361\" src=\"https://lh5.googleusercontent.com/KThYZNy6x_gdeKojhVx8x1OJrqB9IUdeU7FRqNLuzjDRqomf8bhPFS4HpndMFe26iXlIg90zRywzjItFWX5Rt3DdzX4BdaLmsk7LgYmf93BDx8uuE7DsDy-srUfCmqCKS19mOcYZ-p-Na8T8kQ\"></p>\n<p><strong>Base Cases:</strong></p>\n<ul><li>If ind&gt;=n, it means we have finished trading on all days, and there is no more money that we can get, therefore we simply return 0.&nbsp; When ind=n-1, it can happen that we call f(ind+2,0), therefore we have handled this edge case by using the \u201c&gt;=\u201d sign.</li></ul>\n<p><strong>Steps to memoize a recursive solution:</strong></p>\n<p>If we draw the recursion tree, we will see that there are overlapping subproblems. In order to convert a recursive solution the following steps will be taken:</p>\n<ol><li>Create a dp array of size [n][2]. The size of the input array is \u2018n\u2019, so the index will always lie between \u20180\u2019 and \u2018n-1\u2019. The \u2018buy\u2019&nbsp; variable can take only two values: 0 and 1. Therefore we take the dp array as dp[n][2]</li><li>We initialize the dp array to -1.</li><li>Whenever we want to find the answer to particular parameters (say f(ind, buy)), we first check whether the answer is already calculated using the dp array(i.e dp[ind][buy]!= -1 ). If yes, simply return the value from the dp array.</li><li>If not, then we are finding the answer for the given value for the first time, we will use the recursive relation as usual but before returning from the function, we will set dp[ind][buy] to the solution we get.</li></ol>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h>\nusing namespace std;\n\nint getAns(vector&lt;int> Arr, int ind, int buy, int n, vector&lt;vector&lt;int>> &amp;dp) {\n    // Base case: If we've reached the end of the array, return 0 profit.\n    if (ind >= n) return 0;\n    \n    // Check if the result is already computed\n    if (dp[ind][buy] != -1)\n        return dp[ind][buy];\n        \n    int profit;\n    \n    if (buy == 0) { // We can buy the stock\n        profit = max(0 + getAns(Arr, ind + 1, 0, n, dp), -Arr[ind] + getAns(Arr, ind + 1, 1, n, dp));\n    }\n    \n    if (buy == 1) { // We can sell the stock\n        profit = max(0 + getAns(Arr, ind + 1, 1, n, dp), Arr[ind] + getAns(Arr, ind + 2, 0, n, dp));\n    }\n    \n    // Store the result in the DP array and return\n    return dp[ind][buy] = profit;\n}\n\nint stockProfit(vector&lt;int> &amp;Arr) {\n    int n = Arr.size();\n    vector&lt;vector&lt;int>> dp(n, vector&lt;int>(2, -1));\n    \n    int ans = getAns(Arr, 0, 0, n, dp);\n    return ans;\n}\n\nint main() {\n    vector&lt;int> prices {4, 9, 0, 4, 10};\n                                 \n    cout &lt;&lt; \"The maximum profit that can be generated is \" &lt;&lt; stockProfit(prices) &lt;&lt; endl;\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\nimport java.util.*;\n\nclass TUF {\n    // Recursive function to calculate the maximum profit\n    static int getAns(int[] Arr, int ind, int buy, int n, int[][] dp) {\n        // Base case\n        if (ind >= n) {\n            return 0;\n        }\n\n        // If the result is already calculated, return it\n        if (dp[ind][buy] != -1) {\n            return dp[ind][buy];\n        }\n\n        int profit = 0;\n\n        if (buy == 0) { // We can buy the stock\n            profit = Math.max(0 + getAns(Arr, ind + 1, 0, n, dp),\n                    -Arr[ind] + getAns(Arr, ind + 1, 1, n, dp));\n        }\n\n        if (buy == 1) { // We can sell the stock\n            profit = Math.max(0 + getAns(Arr, ind + 1, 1, n, dp),\n                    Arr[ind] + getAns(Arr, ind + 2, 0, n, dp));\n        }\n\n        // Store the result in dp and return it\n        dp[ind][buy] = profit;\n        return profit;\n    }\n\n    static int stockProfit(int[] Arr) {\n        int n = Arr.length;\n        int[][] dp = new int[n][2];\n        \n        // Initialize dp array with -1 to mark states as not calculated yet\n        for (int[] row : dp) {\n            Arrays.fill(row, -1);\n        }\n\n        int ans = getAns(Arr, 0, 0, n, dp);\n        return ans;\n    }\n\n    public static void main(String args[]) {\n        int prices[] = {4, 9, 0, 4, 10};\n\n        System.out.println(\"The maximum profit that can be generated is \" + stockProfit(prices));\n    }\n}\n\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\ndef get_max_profit(prices, ind, buy, n, dp):\n    # Base case: if we reach the end of the array\n    if ind &gt;= n:\n        return 0\n\n    # Check if the result is already calculated\n    if dp[ind][buy] != -1:\n        return dp[ind][buy]\n\n    # Initialize profit\n    profit = 0\n\n    if buy == 0:  # We can buy the stock\n        profit = max(\n            0 + get_max_profit(prices, ind + 1, 0, n, dp),\n            -prices[ind] + get_max_profit(prices, ind + 1, 1, n, dp)\n        )\n\n    if buy == 1:  # We can sell the stock\n        profit = max(\n            0 + get_max_profit(prices, ind + 1, 1, n, dp),\n            prices[ind] + get_max_profit(prices, ind + 2, 0, n, dp)\n        )\n\n    # Memoize the result and return\n    dp[ind][buy] = profit\n    return profit\n\n\ndef stock_profit(prices):\n    n = len(prices)\n    dp = [[-1 for _ in range(2)] for _ in range(n)]\n\n    ans = get_max_profit(prices, 0, 0, n, dp)\n    return ans\n\n\nif __name__ == \"__main__\":\n    prices = [4, 9, 0, 4, 10]\n\n    result = stock_profit(prices)\n    print(f\"The maximum profit that can be generated is {result}\")\n\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\nfunction getAns(Arr, ind, buy, n, dp) {\n    // Base case: if the index is greater than or equal to n, return 0\n    if (ind >= n) return 0;\n\n    // Check if the result is already computed and stored in dp\n    if (dp[ind][buy] !== -1) return dp[ind][buy];\n\n    let profit;\n\n    if (buy === 0) { // We can buy the stock\n        profit = Math.max(\n            0 + getAns(Arr, ind + 1, 0, n, dp),\n            -Arr[ind] + getAns(Arr, ind + 1, 1, n, dp)\n        );\n    }\n\n    if (buy === 1) { // We can sell the stock\n        profit = Math.max(\n            0 + getAns(Arr, ind + 1, 1, n, dp),\n            Arr[ind] + getAns(Arr, ind + 2, 0, n, dp)\n        );\n    }\n\n    // Store the result in dp and return it\n    dp[ind][buy] = profit;\n    return profit;\n}\n\nfunction stockProfit(Arr) {\n    const n = Arr.length;\n    // Create a 2D dp array filled with -1 to store computed results\n    const dp = new Array(n).fill().map(() => new Array(2).fill(-1));\n\n    // Call the recursive function to compute the maximum profit\n    const ans = getAns(Arr, 0, 0, n, dp);\n    return ans;\n}\n\n// Main function\nfunction main() {\n    const prices = [4, 9, 0, 4, 10];\n\n    const result = stockProfit(prices);\n    console.log(\"The maximum profit that can be generated is\", result);\n}\n\n// Call the main function\nmain();\n</code>\n</pre>\n</div>\n\n<p>\n<!-- Insert Output of Brute Force Here -->\nThe maximum profit that can be generated is 11\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n<!-- Insert Time and Space Complexity of Brute Force Here -->\n<p><strong>Time Complexity: O(N*2)&nbsp;</strong></p>\n<p>Reason: There are N*2 states therefore at max \u2018N*2\u2019 new problems will be solved and we are running a for loop for \u2018N\u2019 times to calculate the total sum</p>\n<p><strong>Space Complexity: O(N*2) + O(N)</strong></p>\n<p>Reason: We are using a recursion stack space(O(N)) and a 2D array ( O(N*2)).</p>\n</p>\n</details>\n</div>\n</details>\n</div>\n<!-- Brute Force Approach Ends here -->\n\n\n<!-- Better Approach Starts from here -->\n\n<div id=\"better-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nTabulation Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition For Better Approach Here -->\n<p>To convert the memoization approach to a tabulation one, create a dp array with the same size as done in memoization. We can set its type as bool and initialize it as false.</p>\n<ul><li>First, we declare the dp array of size [n+1][2] as zero.</li><li>Next, we set the base condition, we set dp[n][0] = dp[n][1] = 0(the case when we had exhausted the number of days of the stock market).</li></ul>\n<figure class=\"wp-block-image\"><img src=\"https://lh3.googleusercontent.com/-svcuQniiZu5sZK5eBL0gT2otF9BK5Pop0Ds07zf4q420wRrZ--9JRawJDxeVEpBP4zp9EVr98LdnCkuTVNmrH0Q9RmPhVOTlD03h8gf3_2z1X4F6zJqaxx1r3w1wUvmIlV5kquCrRkyw_XRlg\" alt=\"\"/></figure>\n<ul><li>Next, we set two nested for loops, the outer loop (for variable ind) moves from&nbsp; n-1 to 0 and the inner loop (for variable buy) moves from 0 to 1.</li></ul>\n<figure class=\"wp-block-image\"><img src=\"https://lh4.googleusercontent.com/4-AGF2N-6PW8aBOh65yhQiqjeyyK2d_lZBqSesh-X6ig6oJctvqq10j2TsOwDaQrDbiexYl1CJXEGB0ZkC5TPb94ANfFWQCn-q8WC7oJP-EwcQBr6Gya_Zv2z24PfyCjYBxW6l-F4RhJ7J1eIA\" alt=\"\"/></figure>\n<ul><li>In every iteration, we calculate the value according to the memoization logic.</li><li>At last, we will print dp[0][0] as our answer.</li></ul>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n\n#include &lt;bits/stdc++.h>\nusing namespace std;\n\nint stockProfit(vector&lt;int> &amp;Arr) {\n    int n = Arr.size();\n    // Create a 2D DP array with dimensions (n+2) x 2, initialized to 0\n    vector&lt;vector&lt;int>> dp(n + 2, vector&lt;int>(2, 0));\n    \n    // Loop through the stock prices from the end to the beginning\n    for (int ind = n - 1; ind >= 0; ind--) {\n        for (int buy = 0; buy &lt;= 1; buy++) {\n            int profit;\n\n            if (buy == 0) { // We can buy the stock\n                profit = max(0 + dp[ind + 1][0], -Arr[ind] + dp[ind + 1][1]);\n            }\n\n            if (buy == 1) { // We can sell the stock\n                profit = max(0 + dp[ind + 1][1], Arr[ind] + dp[ind + 2][0]);\n            }\n\n            // Store the computed profit in the DP array\n            dp[ind][buy] = profit;\n        }\n    }\n\n    return dp[0][0];\n}\n\nint main() {\n    vector&lt;int> prices {4, 9, 0, 4, 10};\n                                 \n    cout &lt;&lt; \"The maximum profit that can be generated is \" &lt;&lt; stockProfit(prices) &lt;&lt; endl;\n    return 0;\n}\n\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\nimport java.util.*;\n\nclass TUF {\n    // Function to calculate the maximum profit from stock trading\n    static int stockProfit(int[] Arr) {\n        int n = Arr.length;\n        int dp[][] = new int[n + 2][2];\n        \n        // Iterate through the array backwards\n        for (int ind = n - 1; ind >= 0; ind--) {\n            for (int buy = 0; buy &lt;= 1; buy++) {\n                int profit = 0;\n\n                if (buy == 0) { // We can buy the stock\n                    profit = Math.max(0 + dp[ind + 1][0], -Arr[ind] + dp[ind + 1][1]);\n                }\n\n                if (buy == 1) { // We can sell the stock\n                    profit = Math.max(0 + dp[ind + 1][1], Arr[ind] + dp[ind + 2][0]);\n                }\n\n                dp[ind][buy] = profit;\n            }\n        }\n\n        // The maximum profit is stored in dp[0][0]\n        return dp[0][0];\n    }\n\n    public static void main(String args[]) {\n        int prices[] = {4, 9, 0, 4, 10};\n\n        System.out.println(\"The maximum profit that can be generated is \" + stockProfit(prices));\n    }\n}\n\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\ndef stock_profit(prices):\n    n = len(prices)\n    \n    # Create a 2D dp array of size [n+2][2] initialized to 0\n    dp = [[0 for _ in range(2)] for _ in range(n + 2)]\n\n    for ind in range(n - 1, -1, -1):\n        for buy in range(2):\n            profit = 0\n\n            if buy == 0:  # We can buy the stock\n                profit = max(\n                    0 + dp[ind + 1][0],\n                    -prices[ind] + dp[ind + 1][1]\n                )\n\n            if buy == 1:  # We can sell the stock\n                profit = max(\n                    0 + dp[ind + 1][1],\n                    prices[ind] + dp[ind + 2][0]\n                )\n\n            dp[ind][buy] = profit\n\n    return dp[0][0]\n\n\nif __name__ == \"__main__\":\n    prices = [4, 9, 0, 4, 10]\n\n    result = stock_profit(prices)\n    print(f\"The maximum profit that can be generated is {result}\")\n\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\nfunction stockProfit(Arr) {\n    const n = Arr.length;\n    // Create a 2D dp array of size (n+2) x 2 filled with 0s\n    const dp = new Array(n + 2).fill().map(() => new Array(2).fill(0));\n\n    // Loop through the prices in reverse order\n    for (let ind = n - 1; ind >= 0; ind--) {\n        for (let buy = 0; buy &lt;= 1; buy++) {\n            let profit;\n\n            if (buy === 0) { // We can buy the stock\n                profit = Math.max(\n                    0 + dp[ind + 1][0],\n                    -Arr[ind] + dp[ind + 1][1]\n                );\n            }\n\n            if (buy === 1) { // We can sell the stock\n                profit = Math.max(\n                    0 + dp[ind + 1][1],\n                    Arr[ind] + dp[ind + 2][0]\n                );\n            }\n\n            dp[ind][buy] = profit;\n        }\n    }\n\n    // Return the maximum profit that can be generated\n    return dp[0][0];\n}\n\n// Main function\nfunction main() {\n    const prices = [4, 9, 0, 4, 10];\n\n    const result = stockProfit(prices);\n    console.log(\"The maximum profit that can be generated is\", result);\n}\n\n// Call the main function\nmain();\n\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Better Approach Here -->\nThe maximum profit that can be generated is 11\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Better Approach Here -->\n<p><strong>Time Complexity: O(N*2)&nbsp;</strong></p>\n<p>Reason: There are two nested loops that account for O(N*2) complexity.</p>\n<p><strong>Space Complexity: O(N*2)</strong></p>\n<p>Reason: We are using an external array of size \u2018N*2\u2019. Stack Space is eliminated.</p>\n</p>\n</details>\n</div>\n</details>\n</div>\n<!-- Better Approach Ends from here -->\n\n\n<!-- Optimal Approach Starts from here -->\n\n<div id=\"optimal-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nSpace Optimization Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm of Optimal Approach Here -->\n<p>If we closely look the relation,</p>\n<p><strong>dp[ind][buy] = max( dp[ind+1][buy] , max( dp[ind+2][!buy])</strong></p>\n<p>We see that to calculate a value of a cell of the dp array, we need only the next two column values(say front1 and front2). So, we don\u2019t need to store an entire 2-D array. Hence we can space optimize it.</p>\n<figure class=\"wp-block-image\"><img src=\"https://lh6.googleusercontent.com/Sxq-dvuNXgbaIpa9rBj09hmALGw3kqFWM8RwQ8kRxaV-p_gHcdv-0F36-YmRp0ZA80sSBVw4zu-ydoYN4fxXZ-quvhAvHzuJ2vtKrHedf7jl5w_4oXMcM_92330_8HzZRbZM-KsYUJDazq1lSg\" alt=\"\"/></figure>\n<ul><li>We set the front1 and front2 columns as 0 (base condition)</li><li>Then we set the nested loops to calculate the cur column values.</li><li>We replace dp[ind] with cur and dp[ind+1] with front1 and dp[ind+2] with front2 in our memoization code.</li><li>After the inner loop execution, we set ahead as cur for the next outer loop iteration.</li><li>At last, we return cur[0] as our answer.</li></ul>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h>\nusing namespace std;\n\nint stockProfit(vector&lt;int> &amp;Arr) {\n    int n = Arr.size();\n    \n    // Initialize three arrays to track the maximum profit for buying and selling\n    vector&lt;int> cur(2, 0);       // Current maximum profit\n    vector&lt;int> front1(2, 0);    // Maximum profit one step ahead\n    vector&lt;int> front2(2, 0);    // Maximum profit two steps ahead\n    \n    for (int ind = n - 1; ind >= 0; ind--) {\n        for (int buy = 0; buy &lt;= 1; buy++) {\n            int profit;\n\n            if (buy == 0) { // We can buy the stock\n                profit = max(0 + front1[0], -Arr[ind] + front1[1]);\n            }\n\n            if (buy == 1) { // We can sell the stock\n                profit = max(0 + front1[1], Arr[ind] + front2[0]);\n            }\n            \n            cur[buy] = profit;\n        }\n        \n        // Update the 'front1' and 'front2' arrays with current values\n        front2 = front1;\n        front1 = cur;\n    }\n    \n    return cur[0]; // Return the maximum profit for buying.\n}\n\nint main() {\n    vector&lt;int> prices {4, 9, 0, 4, 10};\n                                 \n    cout &lt;&lt; \"The maximum profit that can be generated is \" &lt;&lt; stockProfit(prices) &lt;&lt; endl;\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\nimport java.util.*;\n\nclass TUF {\n    // Function to calculate the maximum profit from stock trading\n    static int stockProfit(int[] Arr) {\n        int n = Arr.length;\n        int[] cur = new int[2];\n        int[] front1 = new int[2];\n        int[] front2 = new int[2];\n        \n        // Iterate through the array backwards\n        for (int ind = n - 1; ind >= 0; ind--) {\n            for (int buy = 0; buy &lt;= 1; buy++) {\n                int profit = 0;\n\n                if (buy == 0) { // We can buy the stock\n                    profit = Math.max(0 + front1[0], -Arr[ind] + front1[1]);\n                }\n\n                if (buy == 1) { // We can sell the stock\n                    profit = Math.max(0 + front1[1], Arr[ind] + front2[0]);\n                }\n\n                cur[buy] = profit;\n            }\n\n            // Update front1 and front2 arrays\n            System.arraycopy(front1, 0, front2, 0, 2);\n            System.arraycopy(cur, 0, front1, 0, 2);\n        }\n\n        // The maximum profit is stored in cur[0]\n        return cur[0];\n    }\n\n    public static void main(String args[]) {\n        int prices[] = {4, 9, 0, 4, 10};\n\n        System.out.println(\"The maximum profit that can be generated is \" + stockProfit(prices));\n    }\n}\n\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\ndef stock_profit(prices):\n    n = len(prices)\n    \n    # Initialize three lists to track the profit states\n    cur = [0, 0]\n    front1 = [0, 0]\n    front2 = [0, 0]\n\n    for ind in range(n - 1, -1, -1):\n        for buy in range(2):\n            profit = 0\n\n            if buy == 0:  # We can buy the stock\n                profit = max(\n                    0 + front1[0],\n                    -prices[ind] + front1[1]\n                )\n\n            if buy == 1:  # We can sell the stock\n                profit = max(\n                    0 + front1[1],\n                    prices[ind] + front2[0]\n                )\n\n            cur[buy] = profit\n\n        # Update the 'front' lists for the next iteration\n        front2 = front1.copy()\n        front1 = cur.copy()\n\n    return cur[0]\n\n\nif __name__ == \"__main__\":\n    prices = [4, 9, 0, 4, 10]\n\n    result = stock_profit(prices)\n    print(f\"The maximum profit that can be generated is {result}\")\n\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\nfunction stockProfit(Arr) {\n    const n = Arr.length;\n    // Create arrays to represent the current and two front state arrays, each initialized to [0, 0]\n    let cur = [0, 0];\n    let front1 = [0, 0];\n    let front2 = [0, 0];\n\n    // Loop through the prices in reverse order\n    for (let ind = n - 1; ind >= 0; ind--) {\n        for (let buy = 0; buy &lt;= 1; buy++) {\n            let profit;\n\n            if (buy === 0) { // We can buy the stock\n                profit = Math.max(\n                    0 + front1[0],\n                    -Arr[ind] + front1[1]\n                );\n            }\n\n            if (buy === 1) { // We can sell the stock\n                profit = Math.max(\n                    0 + front1[1],\n                    Arr[ind] + front2[0]\n                );\n            }\n\n            cur[buy] = profit;\n        }\n\n        // Update front2 and front1 arrays for the next iteration\n        front2 = [...front1];\n        front1 = [...cur];\n    }\n\n    // Return the maximum profit that can be generated\n    return cur[0];\n}\n\n// Main function\nfunction main() {\n    const prices = [4, 9, 0, 4, 10];\n\n    const result = stockProfit(prices);\n    console.log(\"The maximum profit that can be generated is\", result);\n}\n\n// Call the main function\nmain();\n\n</code>\n</pre>\n<p>\n<!-- Insert Output of Optimal Apporach Here -->\nThe maximum profit that can be generated is 11\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Optimal Approach-->\n<p><strong>Time Complexity: O(N*2)</strong></p>\n<p>Reason: There are two nested loops that account for O(N*2) complexity</p>\n<p><strong>Space Complexity: O(1)</strong></p>\n<p>Reason: We are using three external arrays of size \u20182\u2019.</p>\n</p>\n</details>\n</div>\n</details>\n</div>\n<!-- Optimal Approach Starts from here -->\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n<details>\n<summary class=\"main-summary\">\n<span>\nVideo Explanation\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"yt-video-wrapper\">\n\n<!-- Insert iframe embed Link of Youtube Video-->\n<iframe class=\"lazy-loaded\" loading=\"lazy\" title=\"Buy and Sell Stocks With Cooldown\" width=\"810\" height=\"456\" data-lazy-type=\"iframe\" data-src=\"https://www.youtube.com/embed/IGIe46xw3YY?si=BuTKhlKM2U9j9Bde\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\" src=\"https://www.youtube.com/embed/IGIe46xw3YY?feature=oembed\"></iframe><noscript>\n<iframe loading=\"lazy\" title=\"Buy and Sell Stocks With Cooldown\" width=\"810\" height=\"456\" src=\"https://www.youtube.com/embed/IGIe46xw3YY?si=BuTKhlKM2U9j9Bde\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe></noscript>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script>\n\nconst codeSections = document.querySelectorAll('.code-section');\n\n// Get last selected language from localStorage or set default value\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\n// Update last selected language for all sections and store in localStorage\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\n// Handle copy button click event\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\n// Set initial state of the tabs\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<script>\nconst codeSections = document.querySelectorAll('.code-section');\n\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script src=\"https://takeuforward.org/UXApproachDropDowns/3ApproachJSScript.js\"></script>\n<!-- /wp:html -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;<strong><a href=\"https://www.linkedin.com/in/anshuman-sharma-a1b245194/\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>Anshuman Sharma</strong></a></strong>&nbsp;for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a>.&nbsp;<em>If you want to suggest any improvement/correction in this article please mail us at&nbsp;write4tuf@gmail.com</em></p></blockquote>\n<!-- /wp:quote -->"
}