{
    "dislikes": 3,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:09:12 GMT+0530 (India Standard Time)",
    "slug": "k-th-element-of-two-sorted-arrays",
    "aid": "1420",
    "title": "K-th Element of two sorted arrays",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/kth-element-of-2-sorted-arrays",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "sorting",
            "topic-title": "Sorting"
        }
    ],
    "content": "<p>Pre-requisite: <strong><a\n    href=\"https://takeuforward.org/data-structure/median-of-two-sorted-arrays-of-different-sizes/\"\n    target=\"_blank\" rel=\"noreferrer noopener\">Median of 2 sorted arrays</a></strong></p>\n\n<!-- wp:paragraph -->\n<p><strong>Problem Statement: </strong>Given <strong>two sorted arrays</strong> of size <strong>m</strong> and\n<strong>n</strong> respectively, you are tasked with finding the element that would be at the<strong> kth\nposition</strong> of the <strong>final sorted array</strong>.\n</p>\n\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\nyourself first. <strong><a\n        href=\"https://www.codingninjas.com/studio/problems/k-th-element-of-2-sorted-array_1164159?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf&leftPanelTab=0\"\n        target=\"_blank\" rel=\"noreferrer noopener\">Problem Link</a></strong></em></p>\n\n<div class=\"dsa_article_dropdown_approachs \">\n<!-- Brute Force Approach Starts from here -->\n<div id=\"brute-force-approach\">\n<details>\n    <summary class=\"main-summary\">\n        <span>\n            Naive Approach (Brute-force)\n        </span>\n        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n            <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n            </path>\n        </svg>\n    </summary>\n    <div class=\"common-drops\">\n        <details class=\"secondary-details\" open=\"\">\n\n            <summary class=\"secondary-summary\">\n                <span>\n                    Algorithm / Intuition\n                </span>\n                <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                    <path\n                        d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                    </path>\n                </svg>\n            </summary>\n            <div class=\"approach-algorithm\">\n                <p>The extremely naive approach is to merge the two sorted arrays and then find the K-th element\n                    in\n                    that merged array.</p>\n                <p><strong>How to merge two sorted arrays:</strong></p>\n                <p>The word \u201cmerge\u201d suggests applying the merge step of the <a\n        href=\"https://takeuforward.org/data-structure/merge-sort-algorithm/\"\n        target=\"_blank\" rel=\"noreferrer noopener\">merge sort algorithm</a> . In that step,\n                    we\n                    essentially perform the same actions as required by this solution. By using two pointers on\n                    two\n                    given arrays, we fill up the elements into a third array.</p>\n                <!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n                <h3><strong>Approach:</strong></h3>\n                <ol>\n                    <li>We will use a third array i.e. arr3[] of size (m+n) to store the elements of the two\n                        sorted arrays.</li>\n                    <li>Now, we will take two pointers i and j, where i points to the first element of arr1[]\n                        and j points to the first element of arr2[].</li>\n                    <li>Next, using a while loop( while(i < m && j < n)), we will select two elements i.e.\n                            arr1[i] and arr2[j], and consider the smallest one among the two. Then, we will\n                            insert the smallest element in the third array and increase that specific pointer by\n                            1.</li>\n                            <ul>\n                                <li>If <strong>arr1[i] < arr2[j]</strong> : Insert arr1[i] into the third array\n                                            and increase i by 1.</li>\n                                <li> <strong>Otherwise</strong> : Insert arr2[j] into the third array and\n                                    increase j by 1.</li>\n                            </ul>\n                    <li>After that, the left-out elements from both arrays will be copied as it is into the\n                        third array.</li>\n                    <li>Now, the third array i.e. arr3[] will be the sorted merged array. Now the k-th will be\n                        the arr3[k-1].</li>\n                    <li>Finally, we will return the value of arr3[k-1].</li>\n                </ol>\n                <p><strong>Dry-run</strong>: Please refer to the attached video for a detailed dry-run.</p>\n                <figure class=\"wp-block-image size-large is-resized\"><img\n                        src=\"https://takeuforward-content-images.s3.ap-south-1.amazonaws.com/content/image3.gif\"\n                        alt=\"\" class=\"wp-image-12761\" width=\"512\" height=\"284\"></figure>\n            </div>\n        </details>\n        <details class=\"code-section secondary-details\">\n            <summary class=\"secondary-summary\">\n                <span>\n                    Code\n                </span>\n                <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                    <path\n                        d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                    </path>\n                </svg>\n            </summary>\n            <div class=\"code-tabs\">\n                <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n                <button class=\"code-tab\" data-lang=\"java\">Java</button>\n                <button class=\"code-tab\" data-lang=\"python\">Python</button>\n                <button class=\"code-tab\" data-lang=\"javascript\">Javascript</button>\n\n                <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\"\n                    xmlns=\"http://www.w3.org/2000/svg\">\n                    <path\n                        d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n                    </path>\n                </svg>\n            </div>\n            <div class=\"code-content\">\n                <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n                    <pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n            #include &lt;bits/stdc++.h&gt;\n            using namespace std;\n            \n            int kthElement(vector&lt;int&gt; &amp;a, vector&lt;int&gt;&amp; b, int m, int n, int k) {\n                vector&lt;int&gt; arr3;\n            \n                //apply the merge step:\n                int i = 0, j = 0;\n                while (i &lt; m &amp;&amp; j &lt; n) {\n                    if (a[i] &lt; b[j]) arr3.push_back(a[i++]);\n                    else arr3.push_back(b[j++]);\n                }\n            \n                //copy the left-out elements:\n                while (i &lt; m) arr3.push_back(a[i++]);\n                while (j &lt; n) arr3.push_back(b[j++]);\n                return arr3[k - 1];\n            }\n            \n            int main()\n            {\n                vector&lt;int&gt; a = {2, 3, 6, 7, 9};\n                vector&lt;int&gt; b = {1, 4, 8, 10};\n                cout &lt;&lt; &quot;The k-ht element of two sorted array is: &quot; &lt;&lt;\n                        kthElement(a, b, a.size(), b.size(), 5) &lt;&lt; '\\n';\n            }\n        </code>\n        </pre>\n                    <p>\n                        <!-- Insert Output of Brute Force Here -->\n                    </p>\n                    <p>\n                        Output: The k-th element of two sorted arrays is: 6\n                    </p>\n                    <p></p>\n                </div>\n                <div class=\"code-block \" data-lang=\"java\">\n                    <pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n            import java.util.*;\n\n            public class tUf {\n                public static int kthElement(ArrayList&lt;Integer&gt; a, ArrayList&lt;Integer&gt; b, int m, int n, int k) {\n                    ArrayList&lt;Integer&gt; arr3 = new ArrayList&lt;&gt;();\n            \n                    // apply the merge step:\n                    int i = 0, j = 0;\n                    while (i &lt; m &amp;&amp; j &lt; n) {\n                        if (a.get(i) &lt; b.get(j)) arr3.add(a.get(i++));\n                        else arr3.add(b.get(j++));\n                    }\n            \n                    // copy the left-out elements:\n                    while (i &lt; m) arr3.add(a.get(i++));\n                    while (j &lt; n) arr3.add(b.get(j++));\n            \n                    return arr3.get(k - 1);\n                }\n            \n                public static void main(String[] args) {\n                    ArrayList&lt;Integer&gt; a = new ArrayList&lt;&gt;();\n                    a.add(2); a.add(3); a.add(6); a.add(7); a.add(9);\n            \n                    ArrayList&lt;Integer&gt; b = new ArrayList&lt;&gt;();\n                    b.add(1); b.add(4); b.add(8); b.add(10);\n            \n                    System.out.println(&quot;The k-th element of two sorted arrays is: &quot; +\n                                        kthElement(a, b, a.size(), b.size(), 5));\n                }\n            }\n        </code>\n        </pre>\n                    <p>\n                        Output: The k-th element of two sorted arrays is: 6\n                    </p>\n                </div>\n                <div class=\"code-block\" data-lang=\"python\">\n                    <pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n            def kthElement(a, b, m, n, k):\n                arr3 = []\n            \n                # Apply the merge step:\n                i, j = 0, 0\n                while i &lt; m and j &lt; n:\n                    if a[i] &lt; b[j]:\n                        arr3.append(a[i])\n                        i += 1\n                    else:\n                        arr3.append(b[j])\n                        j += 1\n            \n                # Copy the left-out elements:\n                arr3.extend(a[i:])\n                arr3.extend(b[j:])\n                return arr3[k - 1]\n        \n            if __name__ == &quot;__main__&quot;:\n                a = [2, 3, 6, 7, 9]\n                b = [1, 4, 8, 10]\n                print(&quot;The k-th element of two sorted arrays is:&quot;, kthElement(a, b, len(a), len(b), 5))\n        </code>\n        </pre>\n                    <p>\n                        Output: The k-th element of two sorted arrays is: 6\n                    </p>\n                </div>\n                <div class=\"code-block\" data-lang=\"javascript\">\n                    <pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n            function kthElement(a, b, m, n, k) {\n                let arr3 = [];\n            \n                // apply the merge step:\n                let i = 0, j = 0;\n                while (i &lt; m &amp;&amp; j &lt; n) {\n                    if (a[i] &lt; b[j]) arr3.push(a[i++]);\n                    else arr3.push(b[j++]);\n                }\n            \n                // copy the left-out elements:\n                while (i &lt; m) arr3.push(a[i++]);\n                while (j &lt; n) arr3.push(b[j++]);\n                return arr3[k - 1];\n            }\n            \n            let a = [2, 3, 6, 7, 9];\n            let b = [1, 4, 8, 10];\n            console.log(&quot;The k-th element of two sorted arrays is: &quot; +\n                kthElement(a, b, a.length, b.length, 5));\n        </code>\n        </pre>\n                    <p>\n                        Output: The k-th element of two sorted arrays is: 6\n                    </p>\n                </div>\n            </div>\n        </details>\n        <details class=\"secondary-details\">\n            <summary class=\"secondary-summary\">\n                <span>\n                    Complexity Analysis\n                </span>\n                <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                    <path\n                        d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                    </path>\n                </svg>\n            </summary>\n            <p><strong>Time Complexity: </strong>O(m+n), where m and n are the sizes of the given\n                arrays.<br><strong>Reason: </strong> We traverse through both arrays linearly.</p>\n            <p><strong>Space Complexity: </strong> O(m+n), where m and n are the sizes of the given arrays. <br>\n            <p><strong>Reason: </strong>We are using an extra array of size (m+n) to solve this problem.\n            </p>\n            </p>\n        </details>\n    </div>\n</details>\n</div>\n<!-- Brute Force Approach Ends here -->\n\n\n<!-- Better Approach Starts from here -->\n<div id=\"better-approach\">\n<details>\n    <summary class=\"main-summary\">\n        <span>\n            Better Approach (Optimized space)\n        </span>\n        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n            <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n            </path>\n        </svg>\n    </summary>\n    <div class=\"common-drops\">\n        <details class=\"secondary-details\" open=\"\">\n            <summary class=\"secondary-summary\">\n                <span>\n                    Algorithm / Intuition\n                </span>\n                <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                    <path\n                        d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                    </path>\n                </svg>\n            </summary>\n            <div class=\"approach-algorithm\">\n                <p>To optimize the space used in the previous approach, we can eliminate the third array used to\n                    store the final merged result. After closer examination, we realize that we only need the\n                    k-th element at index (k-1), rather than the entire merged array, to solve the problem\n                    effectively.</p>\n                <p>We will stick to the same basic approach, but instead of storing elements in a separate\n                    array, we will use a counter called 'cnt' to represent the imaginary third array's index. As\n                    we traverse through the arrays, when 'cnt' reaches the index (k-1), we will store that\n                    particular element. This way, we can achieve the same goal without using any extra space.\n                </p>\n                <h3><strong>Approach:</strong></h3>\n                <ol>\n                    <li>We will declare the counter called \u2018cnt\u2019 and initialize it with 0.</li>\n                    <li>Now, as usual, we will take two pointers i and j, where i points to the first element of\n                        arr1[] and j points to the first element of arr2[].\n                    </li>\n                    <li>Next, using a while loop( while(i < m && j < n)), we will select two elements i.e.\n                            arr1[i] and arr2[j], and consider the smallest one among the two. Then, we will\n                            increase that specific pointer by 1. In addition to that, in each iteration, we will\n                            check if the counter \u2018cnt\u2019 hits the indicex (k-1). when 'cnt' reaches that index, we\n                            will store that particular element. We will also increase the \u2018cnt\u2019 by 1 every time\n                            regardless of matching the conditions. </li>\n                            <ul>\n                                <li>If <strong>arr1[i] < arr2[j]</strong> : Check \u2018cnt\u2019 to perform necessary\n                                            operations and increase i and \u2018cnt\u2019 by 1</li>\n                                <li> <strong>Otherwise</strong> : Check \u2018cnt\u2019 to perform necessary operations\n                                    and increase j and \u2018cnt\u2019 by 1.\n                                </li>\n                            </ul>\n                    <li>After that, the left-out elements from both arrays will be copied as it is into the\n                        third array. While copying we will again check the above-said conditions for the\n                        counter, \u2018cnt\u2019 and increase it by 1.</li>\n                    <li>Finally, we will return the value of the k-th element stored in the variable.</li>\n                </ol>\n                <p><strong>Dry-run</strong>: Please refer to the attached video for a detailed dry-run.</p>\n            </div>\n        </details>\n        <details class=\"code-section secondary-details\">\n            <summary class=\"secondary-summary\">\n                <span>\n                    Code\n                </span>\n                <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                    <path\n                        d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                    </path>\n                </svg>\n            </summary>\n            <div class=\"code-tabs\">\n                <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n                <button class=\"code-tab\" data-lang=\"java\">Java</button>\n                <button class=\"code-tab\" data-lang=\"python\">Python</button>\n                <button class=\"code-tab\" data-lang=\"javascript\">Javascript</button>\n                <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\"\n                    xmlns=\"http://www.w3.org/2000/svg\">\n                    <path\n                        d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n                    </path>\n                </svg>\n            </div>\n            <div class=\"code-content\">\n                <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n                    <pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint kthElement(vector&lt;int&gt; &amp;a, vector&lt;int&gt;&amp; b, int m, int n, int k) {\n    int ele = -1;\n    int cnt = 0; //counter\n    //apply the merge step:\n    int i = 0, j = 0;\n    while (i &lt; m &amp;&amp; j &lt; n) {\n        if (a[i] &lt; b[j]) {\n            if (cnt == k - 1) ele = a[i];\n            cnt++;\n            i++;\n        }\n        else {\n            if (cnt == k - 1) ele = b[j];\n            cnt++;\n            j++;\n        }\n    }\n\n    //copy the left-out elements:\n    while (i &lt; m) {\n        if (cnt == k - 1) ele = a[i];\n        cnt++;\n        i++;\n    }\n    while (j &lt; n) {\n        if (cnt == k - 1) ele = b[j];\n        cnt++;\n        j++;\n    }\n    return ele;\n}\n\nint main()\n{\n    vector&lt;int&gt; a = {2, 3, 6, 7, 9};\n    vector&lt;int&gt; b = {1, 4, 8, 10};\n    cout &lt;&lt; &quot;The k-ht element of two sorted array is: &quot; &lt;&lt;\n            kthElement(a, b, a.size(), b.size(), 5) &lt;&lt; '\\n';\n}\n        </code>\n        </pre>\n                    <p>\n                        Output: The k-th element of two sorted arrays is: 6\n                    </p>\n\n                </div>\n                <div class=\"code-block \" data-lang=\"java\">\n                    <pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\npublic class Main {\n    public static int kthElement(ArrayList&lt;Integer&gt; a, ArrayList&lt;Integer&gt; b, int m, int n, int k) {\n        int ele = -1;\n        int cnt = 0; //counter\n        // apply the merge step:\n        int i = 0, j = 0;\n        while (i &lt; m &amp;&amp; j &lt; n) {\n            if (a.get(i) &lt; b.get(j)) {\n                if (cnt == k - 1) ele = a.get(i);\n                cnt++;\n                i++;\n            } else {\n                if (cnt == k - 1) ele = b.get(j);\n                cnt++;\n                j++;\n            }\n        }\n\n        // copy the left-out elements:\n        while (i &lt; m) {\n            if (cnt == k - 1) ele = a.get(i);\n            cnt++;\n            i++;\n        }\n        while (j &lt; n) {\n            if (cnt == k - 1) ele = b.get(j);\n            cnt++;\n            j++;\n        }\n\n        return ele;\n    }\n\n    public static void main(String[] args) {\n        ArrayList&lt;Integer&gt; a = new ArrayList&lt;&gt;();\n        a.add(2); a.add(3); a.add(6); a.add(7); a.add(9);\n\n        ArrayList&lt;Integer&gt; b = new ArrayList&lt;&gt;();\n        b.add(1); b.add(4); b.add(8); b.add(10);\n\n        System.out.println(&quot;The k-th element of two sorted arrays is: &quot; +\n                            kthElement(a, b, a.size(), b.size(), 5));\n    }\n}\n        </code>\n        </pre>\n                    <p>\n                        Output: The k-th element of two sorted arrays is: 6\n                    </p>\n                </div>\n                <div class=\"code-block\" data-lang=\"python\">\n                    <pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\ndef kthElement(a, b, m, n, k):\n    ele = -1\n    cnt = 0  # counter\n    # apply the merge step:\n    i, j = 0, 0\n    while i &lt; m and j &lt; n:\n        if a[i] &lt; b[j]:\n            if cnt == k - 1:\n                ele = a[i]\n            cnt += 1\n            i += 1\n        else:\n            if cnt == k - 1:\n                ele = b[j]\n            cnt += 1\n            j += 1\n\n    # copy the left-out elements:\n    while i &lt; m:\n        if cnt == k - 1:\n            ele = a[i]\n        cnt += 1\n        i += 1\n    while j &lt; n:\n        if cnt == k - 1:\n            ele = b[j]\n        cnt += 1\n        j += 1\n    return ele\n            \na = [2, 3, 6, 7, 9]\nb = [1, 4, 8, 10]\nprint(&quot;The k-th element of two sorted arrays is:&quot;, kthElement(a, b, len(a), len(b), 5))\n        </code>\n        </pre>\n                    <p>\n                        Output: The k-th element of two sorted arrays is: 6\n                    </p>\n                </div>\n                <div class=\"code-block\" data-lang=\"javascript\">\n                    <pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\nfunction kthElement(a, b, m, n, k) {\n    let ele = -1;\n    let cnt = 0; // counter\n    // apply the merge step:\n    let i = 0, j = 0;\n    while (i &lt; m &amp;&amp; j &lt; n) {\n        if (a[i] &lt; b[j]) {\n            if (cnt === k - 1) ele = a[i];\n            cnt++;\n            i++;\n        } else {\n            if (cnt === k - 1) ele = b[j];\n            cnt++;\n            j++;\n        }\n    }\n\n    // copy the left-out elements:\n    while (i &lt; m) {\n        if (cnt === k - 1) ele = a[i];\n        cnt++;\n        i++;\n    }\n    while (j &lt; n) {\n        if (cnt === k - 1) ele = b[j];\n        cnt++;\n        j++;\n    }\n    return ele;\n}\n\nlet a = [2, 3, 6, 7, 9];\nlet b = [1, 4, 8, 10];\nconsole.log(&quot;The k-th element of two sorted arrays is: &quot; + kthElement(a, b, a.length, b.length, 5));\n        </code>\n        </pre>\n                    <p>\n                        Output: The k-th element of two sorted arrays is: 6\n                    </p>\n                </div>\n            </div>\n        </details>\n        <details class=\"secondary-details\">\n            <summary class=\"secondary-summary\">\n                <span>\n                    Complexity Analysis\n                </span>\n                <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                    <path\n                        d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                    </path>\n                </svg>\n            </summary>\n            <p><strong>Time Complexity: </strong> O(m+n), where m and n are the sizes of the given\n                arrays.<br><strong>Reason: </strong>We traverse through both arrays linearly.</p>\n            <p><strong>Space Complexity: </strong>O(1), as we are not using any extra space to solve this\n                problem.</p>\n        </details>\n    </div>\n</details>\n</div>\n<!-- Better Approach Ends from here -->\n\n\n<!-- Optimal Approach Starts from here -->\n\n<div id=\"optimal-approach\">\n<details>\n    <summary class=\"main-summary\">\n        <span>\n            Optimal Approach (Using Binary Search)\n        </span>\n        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n            <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n            </path>\n        </svg>\n    </summary>\n    <div class=\"common-drops\">\n        <details class=\"secondary-details\" open=\"\">\n            <summary class=\"secondary-summary\">\n                <span>\n                    Algorithm / Intuition\n                </span>\n                <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                    <path\n                        d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                    </path>\n                </svg>\n            </summary>\n            <div class=\"approach-algorithm\">\n                <!-- Insert Algorithm of Better Approach Here -->\n                <p>We are going to use the Binary Search algorithm to optimize the approach.</p>\n                <p>The primary objective of the Binary Search algorithm is to efficiently determine the\n                    appropriate half to eliminate, thereby reducing the search space by half. It does this by\n                    determining a specific condition that ensures that the target is not present in that half.\n                </p>\n\n                <p><strong>Note:</strong> Please refer to the article <strong><a\n                            href=\"https://takeuforward.org/data-structure/median-of-two-sorted-arrays-of-different-sizes/\"\n                            target=\"_blank\" rel=\"noreferrer noopener\">Median of 2 sorted arrays</a></strong> to\n                    get a detailed overview of this optimal approach.</p>\n\n                <p>The optimal approach will be exactly similar to the one of the problem <strong><a\n                            href=\"https://takeuforward.org/data-structure/median-of-two-sorted-arrays-of-different-sizes/\"\n                            target=\"_blank\" rel=\"noreferrer noopener\">Median of 2 sorted arrays</a></strong> In\n                    that problem, the approach is the following:</p>\n                <p>Assume, m = size of arr1[] and n = size of arr2[].</p>\n                <ol>\n                    <li>We know the median creates a partition on the final merged array. So, the array can be\n                        divided into two halves that contain almost equal elements. So, the size of the left and\n                        right halves is approx. (m+n) / 2.</li>\n                    <li>We also discussed that for a valid merged array, the left and the right half will be\n                        unique.</li>\n                    <li>So, our approach was to form the unique left half correctly assuming that it contains x\n                        elements from arr1[] and ((m+n)/2)-x elements from arr2[]. Now the possible range of the\n                        variable x is [0, min(m, n)].</li>\n                    <li>\n                        <p>For all possible values of that range, we checked the configuration of the left half.\n                            Now, to validate the left half configuration, we used the condition l1 <= r2 && l2\n                                <=r1. These four variables refer to as follows:</p>\n                                <p>For example,</p>\n                                <figure class=\"wp-block-image size-large is-resized\"><img\n                                        src=\"https://takeuforward-content-images.s3.ap-south-1.amazonaws.com/content/image1.png\"\n                                        alt=\"\" class=\"wp-image-12761\" width=\"512\" height=\"284\"></figure>\n                                <p>Here, l1 = arr1[1], l2 = arr2[2], r1 = arr1[2], r2 = arr2[3].</p>\n                    </li>\n                </ol>\n                <p>We are going to use the same approach with some minor changes in the values. The changes will\n                    be as follows:</p>\n                <ol>\n                    <li><strong>The size of the left half will be k:</strong> Here, we don\u2019t need to find the\n                        median and instead, we want the k-th element. So, the partition will be after the k-th\n                        element. So, the size of the left half will be k instead of (m+n)/2. For example,\n                    </li>\n                    <figure class=\"wp-block-image size-large is-resized\"><img\n                            src=\"https://takeuforward-content-images.s3.ap-south-1.amazonaws.com/content/image2.png\"\n                            alt=\"\" class=\"wp-image-12761\" width=\"512\" height=\"284\"></figure>\n                    <li>\n                        <p>Range of x:</p>\n                        <ul>\n                            <li><strong>The maximum possible value of x:</strong> We want to build the left\n                                subarray of size k. So, the maximum possible value should be k. But if we are\n                                considering arr1[] of size n1 and n1 < k, in that case, the maximum possible\n                                    value will be n1. So, after generalization, the maximum value will be\n                                    <strong>min(k, n1), where n1 = the size of the smaller array. Here n1 =\n                                    min(m, n).</strong></li>\n                            <li>\n                                <p><strong>The minimum possible value of x:</strong> Let\u2019s understand this using\n                                    an example, given arr1[] size i.e. m = 6, and arr2[] size i.e. n = 5 and k =\n                                    7. Now, the lowest value of x(i.e. The no. of elements we should take from\n                                    arr1[]) should be 2. If we have to build an array of size, 7, and the\n                                    maximum element we can take from arr2[] is 5, so, we have to take a minimum\n                                    of 2 elements from arr1[].\n                                </p>\n                                <p>So, the minimum possible value should be k-n2, where n2 = the size of the\n                                    not-considered array i.e. the bigger array.\n                                </p>\n                                <p>But if k < n2, the k-n2, will be negative. So, to handle this case, we will\n                                        consider the <strong> minimum value as max(0, k-n2), where n2 = the size\n                                        of the bigger array, and here, n2 = max(m, n).\n                                        </strong>\n                                </p>\n                            </li>\n                        </ul>\n                        <p>The new range of x will be [max(0, k-n2), min(k, n1)], where n1 = the size of the\n                            smaller array, and n2 = the size of the bigger array. Here n1 = min(m, n) as we want\n                            to optimize the time complexity we will consider the array with a smaller length.\n                            And we will apply binary search in this new range.\n                        </p>\n                    </li>\n                </ol>\n                <p><strong>Note:</strong> The answer will always be max(l1, l2) as the kth element will be the\n                    maximum element of the left half.</p>\n                <p>The rest of the process will be as similar to the one used in the problem, <strong><a\n                            href=\"https://takeuforward.org/data-structure/median-of-two-sorted-arrays-of-different-sizes/\"\n                            target=\"_blank\" rel=\"noreferrer noopener\">Median of 2 sorted arrays</a></strong>.\n                </p>\n\n                <h3><strong>Algorithm:</strong></h3>\n                <ol>\n                    <li>\n                        First, we have to make sure that the arr1[] is the smaller array. If not by default, we\n                        will just swap the arrays. Our main goal is to consider the smaller array as arr1[].\n                    </li>\n                    <li><strong>Calculate the length of the left half:</strong> left = k.</li>\n                    <li><strong>Place the 2 pointers i.e. low and high:</strong> Initially, we will place the\n                        pointers. The pointer low will point to <strong>max(0, k-n2),</strong> and the high will\n                        point to <strong>min(k, n1)</strong> (i.e. n1 = The size of the smaller array, n2 = the\n                        size of the bigger array).</li>\n                    <li>\n                        <p><strong>Calculate the \u2018mid1\u2019 i.e. x and \u2018mid2\u2019 i.e. left-x:</strong> Now, inside the\n                            loop, we will calculate the value of \u2018mid1\u2019 using the following formula:</p>\n                        <p><strong>mid1 = (low+high) // 2 ( \u2018//\u2019 refers to integer division)\n                            </strong></p>\n                        <p><strong>mid2 = left-mid1</strong></p>\n                    </li>\n                    <li>\n                        <p><strong>Calculate l1, l2, r1, and r2:</strong> Generally,</p>\n                        <ul>\n                            <li>l1 = arr1[mid1-1]</li>\n                            <li>l2 = arr1[mid2-1]</li>\n                            <li>r1 = arr1[mid1]</li>\n                            <li>r1 = arr1[mid2]</li>\n                            <p>The possible values of \u2018mid1\u2019 and \u2018mid2\u2019 might be 0 and n1 and n2 respectively.\n                                So, to handle these cases, we need to store some default values for these four\n                                variables. The default value for l1 and l2 will be <strong>INT_MIN</strong> and\n                                for r1 and r2, it will be <strong>INT_MAX</strong>.\n                            </p>\n                        </ul>\n                    </li>\n                    <li>\n                        <p><strong>Eliminate the halves based on the following conditions:</strong></p>\n                        <ul>\n                            <li><strong>If l1 <= r2 && l2 <=r1: </strong>We have found the answer. Return\n                                        max(l1, l2).</li>\n                            <li><strong>If l1 > r2:\n                                </strong>This implies that we have considered more elements from arr1[] than\n                                necessary. So, we have to take less elements from arr1[] and more from arr2[].\n                                In such a scenario, we should try smaller values of x. To achieve this, we will\n                                eliminate the right half (high = mid1-1).</li>\n                            <li><strong>If l2 > r1: </strong>This implies that we have considered more elements\n                                from arr2[] than necessary. So, we have to take less elements from arr2[] and\n                                more from arr1[]. In such a scenario, we should try bigger values of x. To\n                                achieve this, we will eliminate the left half (low = mid1+1).\n                            </li>\n                        </ul>\n                    </li>\n                    <li>Finally, outside the loop, we will include a dummy return statement just to avoid\n                        warnings or errors.</li>\n                </ol>\n                <p>The steps from 4-6 will be inside a loop and the loop will continue until low crosses high.\n                </p>\n            </div>\n        </details>\n        <details class=\"code-section secondary-details\">\n            <summary class=\"secondary-summary\">\n                <span>\n                    Code\n                </span>\n                <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                    <path\n                        d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                    </path>\n                </svg>\n            </summary>\n            <div class=\"code-tabs\">\n                <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n                <button class=\"code-tab\" data-lang=\"java\">Java</button>\n                <button class=\"code-tab\" data-lang=\"python\">Python</button>\n                <button class=\"code-tab\" data-lang=\"javascript\">Javascript</button>\n                <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\"\n                    xmlns=\"http://www.w3.org/2000/svg\">\n                    <path\n                        d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n                    </path>\n                </svg>\n            </div>\n            <div class=\"code-content\">\n                <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n                    <pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint kthElement(vector&lt;int&gt; &amp;a, vector&lt;int&gt;&amp; b, int m, int n, int k) {\n    if (m &gt; n) return kthElement(b, a, n, m, k);\n\n    int left = k; //length of left half\n\n    //apply binary search:\n    int low = max(0, k - n), high = min(k, m);\n    while (low &lt;= high) {\n        int mid1 = (low + high) &gt;&gt; 1;\n        int mid2 = left - mid1;\n        //calculate l1, l2, r1 and r2;\n        int l1 = INT_MIN, l2 = INT_MIN;\n        int r1 = INT_MAX, r2 = INT_MAX;\n        if (mid1 &lt; m) r1 = a[mid1];\n        if (mid2 &lt; n) r2 = b[mid2];\n        if (mid1 - 1 &gt;= 0) l1 = a[mid1 - 1];\n        if (mid2 - 1 &gt;= 0) l2 = b[mid2 - 1];\n\n        if (l1 &lt;= r2 &amp;&amp; l2 &lt;= r1) {\n            return max(l1, l2);\n        }\n\n        //eliminate the halves:\n        else if (l1 &gt; r2) high = mid1 - 1;\n        else low = mid1 + 1;\n    }\n    return 0; //dummy statement\n\n}\n\nint main()\n{\n    vector&lt;int&gt; a = {2, 3, 6, 7, 9};\n    vector&lt;int&gt; b = {1, 4, 8, 10};\n    cout &lt;&lt; &quot;The k-th element of two sorted array is: &quot; &lt;&lt;\n            kthElement(a, b, a.size(), b.size(), 5) &lt;&lt; '\\n';\n}\n        </code>\n        </pre>\n                    <p>\n                        Output: The k-th element of two sorted arrays is: 6\n                    </p>\n                </div>\n                <div class=\"code-block \" data-lang=\"java\">\n                    <pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\npublic class tUf {\n    public static int kthElement(ArrayList&lt;Integer&gt; a, ArrayList&lt;Integer&gt; b, int m, int n, int k) {\n        if (m &gt; n) return kthElement(b, a, n, m, k);\n\n        int left = k; // length of left half\n\n        // apply binary search:\n        int low = Math.max(0, k - n), high = Math.min(k, m);\n        while (low &lt;= high) {\n            int mid1 = (low + high) &gt;&gt; 1;\n            int mid2 = left - mid1;\n            // calculate l1, l2, r1, and r2\n            int l1 = Integer.MIN_VALUE, l2 = Integer.MIN_VALUE;\n            int r1 = Integer.MAX_VALUE, r2 = Integer.MAX_VALUE;\n            if (mid1 &lt; m) r1 = a.get(mid1);\n            if (mid2 &lt; n) r2 = b.get(mid2);\n            if (mid1 - 1 &gt;= 0) l1 = a.get(mid1 - 1);\n            if (mid2 - 1 &gt;= 0) l2 = b.get(mid2 - 1);\n\n            if (l1 &lt;= r2 &amp;&amp; l2 &lt;= r1) {\n                return Math.max(l1, l2);\n            }\n\n            // eliminate the halves:\n            else if (l1 &gt; r2) high = mid1 - 1;\n            else low = mid1 + 1;\n        }\n        return 0; // dummy statement\n    }\n\n    public static void main(String[] args) {\n        ArrayList&lt;Integer&gt; a = new ArrayList&lt;&gt;();\n        a.add(2); a.add(3); a.add(6); a.add(7); a.add(9);\n\n        ArrayList&lt;Integer&gt; b = new ArrayList&lt;&gt;();\n        b.add(1); b.add(4); b.add(8); b.add(10);\n\n        System.out.println(&quot;The k-th element of two sorted arrays is: &quot; +\n                            kthElement(a, b, a.size(), b.size(), 5));\n    }\n}\n        </code>\n        </pre>\n                    <p>\n                        Output: The k-th element of two sorted arrays is: 6\n                    </p>\n                </div>\n                <div class=\"code-block\" data-lang=\"python\">\n                    <pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\ndef kthElement(a, b, m, n, k):\n    if m &gt; n:\n        return kthElement(b, a, n, m, k)\n\n    left = k  # length of left half\n\n    # apply binary search:\n    low = max(0, k - n)\n    high = min(k, m)\n    while low &lt;= high:\n        mid1 = (low + high) // 2\n        mid2 = left - mid1\n        # calculate l1, l2, r1, and r2\n        l1 = float('-inf')\n        l2 = float('-inf')\n        r1 = float('inf')\n        r2 = float('inf')\n        if mid1 &lt; m:\n            r1 = a[mid1]\n        if mid2 &lt; n:\n            r2 = b[mid2]\n        if mid1 - 1 &gt;= 0:\n            l1 = a[mid1 - 1]\n        if mid2 - 1 &gt;= 0:\n            l2 = b[mid2 - 1]\n\n        if l1 &lt;= r2 and l2 &lt;= r1:\n            return max(l1, l2)\n\n        # eliminate the halves:\n        elif l1 &gt; r2:\n            high = mid1 - 1\n        else:\n            low = mid1 + 1\n\n    return 0  # dummy statement\n            \n            \na = [2, 3, 6, 7, 9]\nb = [1, 4, 8, 10]\nprint(&quot;The k-th element of two sorted arrays is:&quot;, kthElement(a, b, len(a), len(b), 5))\n        </code>\n        </pre>\n                    <p>\n                        Output: The k-th element of two sorted arrays is: 6\n                    </p>\n                </div>\n                <div class=\"code-block\" data-lang=\"javascript\">\n                    <pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\nfunction kthElement(a, b, m, n, k) {\n    if (m &gt; n) return kthElement(b, a, n, m, k);\n\n    let left = k; // length of left half\n\n    // apply binary search:\n    let low = Math.max(0, k - n), high = Math.min(k, m);\n    while (low &lt;= high) {\n        let mid1 = Math.floor((low + high) / 2);\n        let mid2 = left - mid1;\n        // calculate l1, l2, r1, and r2\n        let l1 = Number.MIN_SAFE_INTEGER, l2 = Number.MIN_SAFE_INTEGER;\n        let r1 = Number.MAX_SAFE_INTEGER, r2 = Number.MAX_SAFE_INTEGER;\n        if (mid1 &lt; m) r1 = a[mid1];\n        if (mid2 &lt; n) r2 = b[mid2];\n        if (mid1 - 1 &gt;= 0) l1 = a[mid1 - 1];\n        if (mid2 - 1 &gt;= 0) l2 = b[mid2 - 1];\n\n        if (l1 &lt;= r2 &amp;&amp; l2 &lt;= r1) {\n            return Math.max(l1, l2);\n        }\n\n        // eliminate the halves:\n        else if (l1 &gt; r2) high = mid1 - 1;\n        else low = mid1 + 1;\n    }\n    return 0; // dummy statement\n}\n\nlet a = [2, 3, 6, 7, 9];\nlet b = [1, 4, 8, 10];\nconsole.log(&quot;The k-th element of two sorted arrays is: &quot; + kthElement(a, b, a.length, b.length, 5));    \n        </code>\n        </pre>\n                    <p>\n                        Output: The k-th element of two sorted arrays is: 6\n                    </p>\n                </div>\n            </div>\n        </details>\n        <details class=\"secondary-details\">\n            <summary class=\"secondary-summary\">\n                <span>\n                    Complexity Analysis\n                </span>\n                <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                    <path\n                        d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                    </path>\n                </svg>\n            </summary>\n            <p>\n            </p>\n            <p><strong>Time Complexity: </strong>O(log(min(m, n))), where m and n are the sizes of two given\n                arrays.<br><strong>Reason: </strong>We are applying binary search on the range [max(0, k-n2),\n                min(k, n1)]. The range length <= min(m, n).</p>\n                    <p><strong>Space Complexity: </strong>O(1), as we are not using any extra space to solve\n                        this problem.</p>\n                    <!-- Insert Time and Space Complexity of Optimal Approach-->\n                    <p></p>\n        </details>\n    </div>\n</details>\n</div>\n<!-- Optimal Approach Starts from here -->\n</div>\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n<details>\n<summary class=\"main-summary\">\n    <span>\n        Video Explanation\n    </span>\n    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n        <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n    </svg>\n</summary>\n<div class=\"yt-video-wrapper\">\n    <!-- Insert iframe embed Link of Youtube Video-->\n    <iframe width=\"810\" height=\"456\" src=\"https://www.youtube.com/embed/nv7F4PiLUzo\"\n        title=\"YouTube video player\" frameborder=\"0\"\n        allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n        allowfullscreen=\"\"></iframe>\n</div>\n</details>\n</div>\n<script src=\"https://takeuforward.org/UXApproachDropDowns/3ApproachJSScript.js\"></script>\n<script>\nconst codeSections = document.querySelectorAll('.code-section');\n\n// Get last selected language from localStorage or set default value\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp';\n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\n    tab.addEventListener('click', () => {\n        codeTabs.forEach((t) => {\n            t.classList.remove('dsa_article_code_active');\n        });\n        tab.classList.add('dsa_article_code_active');\n\n        const lang = tab.dataset.lang;\n        const activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n        codeBlocks.forEach((block) => {\n            if (block === activeBlock) {\n                block.classList.add('dsa_article_code_active');\n            } else {\n                block.classList.remove('dsa_article_code_active');\n            }\n        });\n\n        // Update last selected language for all sections and store in localStorage\n        lastSelectedLanguage = lang;\n        localStorage.setItem('lastSelectedLanguage', lang);\n        codeSections.forEach((otherSection, otherIndex) => {\n            if (otherIndex !== sectionIndex) {\n                const otherTabs = otherSection.querySelectorAll('.code-tab');\n                otherTabs.forEach((otherTab) => {\n                    if (otherTab.dataset.lang === lang) {\n                        otherTab.classList.add('dsa_article_code_active');\n                    } else {\n                        otherTab.classList.remove('dsa_article_code_active');\n                    }\n                });\n                const otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                const otherCodeBlocks = otherSection.querySelectorAll('.code-block');\n                otherCodeBlocks.forEach((block) => {\n                    if (block === otherActiveBlock) {\n                        block.classList.add('dsa_article_code_active');\n                    } else {\n                        block.classList.remove('dsa_article_code_active');\n                    }\n                });\n            }\n        });\n    });\n});\n\n// Handle copy button click event\ncopyBtn.addEventListener('click', () => {\n    const activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\n    navigator.clipboard.writeText(activeBlock.innerText);\n    copyBtn.classList.add('dsa_article_code_active');\n    setTimeout(() => {\n        copyBtn.classList.remove('dsa_article_code_active');\n    }, 1000);\n});\n});\n\n// Set initial state of the tabs\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\n    if (tab.dataset.lang === lastSelectedLanguage) {\n        tab.classList.add('dsa_article_code_active');\n    } else {\n        tab.classList.remove('dsa_article_code_active');\n    }\n});\n\ncodeBlocks.forEach((block) => {\n    if (block.dataset.lang === lastSelectedLanguage) {\n        block.classList.add('dsa_article_code_active');\n    } else {\n        block.classList.remove('dsa_article_code_active');\n    }\n});\n});\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>\n<blockquote class=\"wp-block-quote\">\n<p><em>Special thanks to\u00a0<strong>\n        <a href=\"https://www.linkedin.com/in/kriti39/\" target=\"_blank\" rel=\"noreferrer noopener\">KRITIDIPTA\n            GHOSH</a></strong>\n</em> for contributing\nto this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,\u00a0</em><a\n    href=\"https://takeuforward.org/contribute/help-us-grow-takeuforward/\">please check out this\n    articlr</a><em></em></p>\n</blockquote>",
    "category_tag": "data-structure",
    "likes": 96,
    "preview": "Pre-requisite: Median of 2 sorted arrays Problem Statement: Given two sorted arrays of size m and n respectively, you are tasked with finding the element that would be at the kth position of the fi..."
}