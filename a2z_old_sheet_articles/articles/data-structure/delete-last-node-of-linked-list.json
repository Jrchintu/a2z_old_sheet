{
    "dislikes": 20,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:10:22 GMT+0530 (India Standard Time)",
    "slug": "delete-last-node-of-linked-list",
    "aid": "1757",
    "title": "Delete Last Node of Linked List",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/deletion-of-the-tail-of-ll",
    "topics": [
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "linked-list",
            "topic-title": "Linked List"
        }
    ],
    "content": "<!-- wp:paragraph -->\n<p><strong><strong>Problem Statement</strong>: </strong>Given a linked list, delete the tail of the linked list and print the updated linked list.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n<details class=\"article_example_details\">\n<summary class=\"article_example_summary\">\n<span><strong>\nExamples\n</strong>\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"atricle_example_content\">\n<pre class=\"wp-block-preformatted\"><!-- Insert New Examples Here -->\n<p><strong>Example 1:</strong></p>\n<p><strong>Examples</strong>:</p>\n<p><strong>Input Format:</strong> 0-&gt;1-&gt;2</p>\n<p><strong>Result</strong>: 0-&gt;1</p>\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/10/Deletetail1.jpg\" alt=\"\" class=\"wp-image-12887\"></figure>\n<p><strong>Explanation:</strong> The tail of the list is the last node. After removing the tail, and updating the linked list, this result is what we get.</p>\n<p><strong>Example 2:</strong></p>\n<p><strong>Input Format:</strong> 12-&gt;5-&gt;8-&gt;7</p>\n<p><strong>Result</strong>: 12-&gt;5-&gt;8</p>\n<p><strong>Explanation:</strong> Again, after deleting the tail and updating the linked list, the list ends at the second last node, which is the new tail.</p>\n</pre>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Solution</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"textColor\":\"accent\"} -->\n<p class=\"has-accent-color has-text-color\"><strong><em>Disclaimer</em></strong>: <em>Don't jump directly to the solution, try it out yourself first.</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Approach</strong>: </h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The main intuition is to point the <strong>second last node to null</strong> to get the updated linked list. Hence, we will iterate till the second last node and make it point to NULL. This will effectively skip the last node of the list therefore, we will free up the memory being occupied by this node (Only in the case of C++).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Two <strong>edge</strong> cases to consider are:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li>If the input linked list is empty, we return null.</li><li>If there is only one node in the list, that node itself will be the tail, therefore we return null after deleting that node.</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Algorithm:</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><li>Start by initializing a<strong> pointer to the head</strong> of the list that will be used to iterate through the linked list. Iterate up to the<strong> second last node</strong>, this node will be our <strong>new tail</strong> of the list.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:image {\"id\":12888,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/10/Deletetail2.jpg\" alt=\"\" class=\"wp-image-12888\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:list -->\n<ul><li>After reaching the second-to-last node, free up the memory occupied by the former tail or the last node of the list.<br><strong>Note</strong>: In the case of languages like Java, Python, and Javascript, there is no need for the deletion of objects or nodes because these have an<strong> automatic garbage collection mechanism</strong> that automatically<strong> identifies </strong>and <strong>reclaims</strong> memory that is no longer in use.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:image {\"id\":12889,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/10/Deletetail3.jpg\" alt=\"\" class=\"wp-image-12889\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:list -->\n<ul><li>Finally, point the <strong>second last node</strong> or the new tail to NULL to obtain the updated linked list.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:image {\"id\":12890,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/10/Deletetail4.jpg\" alt=\"\" class=\"wp-image-12890\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">// Node class for a linked list\nclass Node {\npublic:\n    int data;         // Data of the node\n    Node* next;       // Pointer to the next node in the list\n    // Constructor for a node with both data and next node provided\n    Node(int data1, Node* next1) {\n        data = data1;\n        next = next1;\n    }\n    // Constructor for a node with only data provided, next initialized to nullptr\n    Node(int data1) {\n        data = data1;\n        next = nullptr;\n    }\n};\n// Function to print the linked list starting from the given head\nvoid printLL(Node* head) {\n    while (head != NULL) {\n        cout &lt;&lt; head->data &lt;&lt; \" \";\n        head = head->next;\n    }\n}\n// Function to delete the tail node of a linked list and return the new head\nNode* deleteTail(Node* head) {\n    // If the list is empty or has only one node, return NULL\n    if (head == NULL || head->next == NULL)\n        return NULL;\n    // Initialize a temporary pointer to traverse the list\n    Node* temp = head;\n    // Traverse to the second last node in the list\n    while (temp->next->next != NULL) {\n        temp = temp->next;\n    }\n    // Delete the last node\n    delete temp->next;\n    // Set the next of the second last node to nullptr, effectively removing the last node\n    temp->next = nullptr;\n    // Return the head of the modified list\n    return head;\n}\nint main() {\n    // Initialize a vector with values for the linked list\n    vector&lt;int> arr = {12, 5, 8, 7};\n    // Create a linked list with the values from the vector\n    Node* head = new Node(arr[0]);\n    head->next = new Node(arr[1]);\n    head->next->next = new Node(arr[2]);\n    head->next->next->next = new Node(arr[3]);\n    // Call the deleteTail function to delete the last node\n    head = deleteTail(head);\n    // Print the linked list after deletion\n    printLL(head);\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> 12 5 8</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity</strong>: <strong>O(N) </strong>for traversing the linked list and updating the tail.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity</strong>: <strong>O(1)</strong>, as we have not used any extra space.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">// Node class definition\nclass Node {\n    int data;\n    Node next;\n    // Constructor with both data and next pointer\n    Node(int data1, Node next1) {\n        this.data = data1;\n        this.next = next1;\n    }\n    // Constructor with only data (next pointer set to null)\n    Node(int data1) {\n        this.data = data1;\n        this.next = null;\n    }\n}\n// LinkedList class\npublic class LinkedList {\n    // Function to delete the tail of the linked list\n    private static Node deleteTail(Node head) {\n        // Check if the linked list is empty or has only one node\n        if (head == null || head.next == null)\n            return null;\n        // Create a temporary pointer for traversal\n        Node temp = head;\n        // Traverse the list until the second-to-last node\n        while (temp.next.next != null) {\n            temp = temp.next;\n        }\n        // Nullify the connection from the second-to-last node to delete the last node\n        temp.next = null;\n        // Return the updated head of the linked list\n        return head;\n    }\n    // Function to print the linked list\n    private static void printLL(Node head) {\n        while (head != null) {\n            System.out.print(head.data + \" \");\n            head = head.next;\n        }\n    }\n    // Main method\n    public static void main(String[] args) {\n        // Initialize an array with integer values\n        int[] arr = {2, 5, 8, 7};\n        // Create the linked list with nodes initialized with array values\n        Node head = new Node(arr[0]);\n        head.next = new Node(arr[1]);\n        head.next.next = new Node(arr[2]);\n        head.next.next.next = new Node(arr[3]);\n        // Delete the tail of the linked list\n        head = deleteTail(head);\n        // Print the modified linked list\n        printLL(head);\n    }\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> 12 5 8</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity</strong>: <strong>O(N) </strong>for traversing the linked list and updating the tail.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity</strong>: <strong>O(1)</strong>, as we have not used any extra space.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block\" data-lang=\"python\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">class Node:\n    def __init__(self, data, next_node=None):\n        self.data = data\n        self.next = next_node\n\n# Function to delete the tail of the linked list\ndef delete_tail(head):\n    # Check if the linked list is empty or has only one node\n    if head is None or head.next is None:\n        return None\n\n    # Create a temporary pointer for traversal\n    temp = head\n\n    # Traverse the list until the second-to-last node\n    while temp.next.next is not None:\n        temp = temp.next\n\n    # Nullify the connection from the second-to-last node to delete the last node\n    temp.next = None\n\n    # Return the updated head of the linked list\n    return head\n\n# Function to print the linked list\ndef print_ll(head):\n    while head is not None:\n        print(head.data, end=\" \")\n        head = head.next\n\n# Main function\nif __name__ == \"__main__\":\n    # Initialize an array with integer values\n    arr = [2, 5, 8, 7]\n\n    # Create the linked list with nodes initialized with array values\n    head = Node(arr[0])\n    head.next = Node(arr[1])\n    head.next.next = Node(arr[2])\n    head.next.next.next = Node(arr[3])\n\n    # Delete the tail of the linked list\n    head = delete_tail(head)\n\n    # Print the modified linked list\n    print_ll(head)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> 12 5 8</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity</strong>: <strong>O(N) </strong>for traversing the linked list and updating the tail.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity</strong>: <strong>O(1)</strong>, as we have not used any extra space.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>[tabby title=\"JavaScript Code\"]</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">// Node class definition\nclass Node {\n    constructor(data, nextNode = null) {\n        this.data = data;\n        this.next = nextNode;\n}\n\n// Function to delete the tail of the linked list\nfunction deleteTail(head) {\n    // Check if the linked list is empty or has only one node\n    if (head === null || head.next === null) {\n        return null;\n    }\n\n    // Create a temporary pointer for traversal\n    let temp = head;\n\n    // Traverse the list until the second-to-last node\n    while (temp.next.next !== null) {\n        temp = temp.next;\n    }\n\n    // Nullify the connection from the second-to-last node to delete the last node\n    temp.next = null;\n\n    // Return the updated head of the linked list\n    return head;\n}\n\n// Function to print the linked list\nfunction printLL(head) {\n    while (head !== null) {\n        console.log(head.data + \" \");\n        head = head.next;\n    }\n}\n\n// Main function\nfunction main() {\n    // Initialize an array with integer values\n    const arr = [2, 5, 8, 7];\n\n    // Create the linked list with nodes initialized with array values\n    let head = new Node(arr[0]);\n    head.next = new Node(arr[1]);\n    head.next.next = new Node(arr[2]);\n    head.next.next.next = new Node(arr[3]);\n\n    // Delete the tail of the linked list\n    head = deleteTail(head);\n\n    // Print the modified linked list\n    printLL(head);\n}\n\n// Call the main function\nmain();\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> 12 5 8</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity</strong>: <strong>O(N) </strong>for traversing the linked list and updating the tail.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity</strong>: <strong>O(1)</strong>, as we have not used any extra space.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In case you are learning DSA, you should definitely check out our free\u00a0<a href=\"https://takeuforward.org/strivers-a2z-dsa-course/strivers-a2z-dsa-course-sheet-2/\">A2Z DSA Course</a>\u00a0with videos and blogs.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to\u00a0</em><strong><a href=\"https://www.linkedin.com/in/neerav-sethi-0b6047103\" target=\"_blank\" rel=\"noreferrer noopener\">Neerav Sethi</a></strong><em>\u00a0for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,\u00a0</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->",
    "category_tag": "data-structure",
    "likes": 150,
    "preview": "Problem Statement: Given a linked list, delete the tail of the linked list and print the updated linked list. Examples Example 1: Examples: Input Format: 0->1->2 Result: 0->1 Explanation: The tail..."
}