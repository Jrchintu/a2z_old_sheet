{
    "dislikes": 53,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:09:53 GMT+0530 (India Standard Time)",
    "slug": "rotate-array-by-k-elements",
    "aid": "1613",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/left-rotate-array",
    "title": "Rotate array by K elements",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        }
    ],
    "category_tag": "data-structure",
    "likes": 769,
    "preview": "Rotate array by K elements Problem Statement: Given an array of integers, rotating array of elements by k elements either left or right. Examples: Example 1: Input: N = 7, array[] = {1,2,3,4,5,6,7}...",
    "content": "<!-- wp:paragraph -->\n<p><strong>Rotate array by K elements</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Problem Statement:</strong> Given an array of integers, rotating array of elements by k elements either left or right.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Examples:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\"><strong>Example 1:</strong>\n<strong>Input:</strong> N = 7, array[] = {1,2,3,4,5,6,7} , k=2 , right\n<strong>Output:</strong> 6 7 1 2 3 4 5\n<strong>Explanation:</strong> array is rotated to right by 2 position .\n\n<strong>Example 2:</strong>\n<strong>Input:</strong> N = 6, array[] = {3,7,8,9,10,11} , k=3 , left \n<strong>Output:</strong> 9 10 11 3 7 8\n<strong>Explanation:</strong> Array is rotated to right by 3 position.</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Solution</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"textColor\":\"accent\"} -->\n<p class=\"has-accent-color has-text-color\"><strong><em>Disclaimer</em></strong>: <em>Don't jump directly to the solution, try it out yourself first.</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Solution :</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Approach 1</strong>: Using a temp array&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>For Rotating the Elements to right</strong></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Step 1: </strong>Copy the last k elements into the temp array.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Step 2: </strong>Shift n-k elements from the beginning by k position to the right</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Step 3:</strong> Copy the elements into the main array from the temp array.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    \n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include &lt;iostream>\nusing namespace std;\nvoid Rotatetoright(int arr[], int n, int k)\n{\n  if (n == 0)\n    return;\n  k = k % n;\n  if (k > n)\n    return;\n  int temp[k];\n  for (int i = n - k; i &lt; n; i++)\n  {\n    temp[i - n + k] = arr[i];\n  }\n  for (int i = n - k - 1; i >= 0; i--)\n  {\n    arr[i + k] = arr[i];\n  }\n  for (int i = 0; i &lt; k; i++)\n  {\n    arr[i] = temp[i];\n  }\n}\nint main()\n{\n  int n = 7;\n  int arr[] = {1, 2, 3, 4, 5, 6, 7};\n  int k = 2;\n  Rotatetoright(arr, n, k);\n  cout &lt;&lt; \"After Rotating the elements to right \" &lt;&lt; endl;\n  for (int i = 0; i &lt; n; i++)\n  {\n    cout &lt;&lt; arr[i] &lt;&lt; \" \";\n  }\n  return 0;\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>After Rotating the elements to right<br>6 7 1 2 3 4 5</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O(n)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(k) since k array element needs to be stored in temp array</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\npublic class Main {\n  public static void Rotatetoright(int[] arr, int n, int k) {\n    if (n == 0)\n      return;\n    k = k % n;\n    if (k > n)\n      return;\n    int[] temp = new int[k];\n    for (int i = n - k; i &lt; n; i++) {\n      temp[i - n + k] = arr[i];\n    }\n    for (int i = n - k - 1; i >= 0; i--) {\n      arr[i + k] = arr[i];\n    }\n    for (int i = 0; i &lt; k; i++) {\n      arr[i] = temp[i];\n    }\n  }\n  public static void main(String args[]) {\n    int n = 7;\n    int[] arr = {1,2,3,4,5,6,7};\n    int k = 2;\n    Rotatetoright(arr, n, k);\n    System.out.println(\"After Rotating the elements to right \");\n    for (int i = 0; i &lt; n; i++) {\n      System.out.print(arr[i] + \" \");\n    }\n  }\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>After Rotating the elements to right<br>6 7 1 2 3 4 5</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O(n)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(k) since k array element needs to be stored in temp array</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>For Rotating the Elements to left</strong></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Step 1: </strong>Copy the first k elements into the temp array.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Step 2: </strong>Shift n-k elements from last by k position to the left</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Step 3:</strong> Copy the elements into the main array from the temp array.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    \n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include &lt;iostream>\nusing namespace std;\nvoid Rotatetoleft(int arr[], int n, int k)\n{\n  if (n == 0)\n    return;\n  k = k % n;\n  if (k > n)\n    return;\n  int temp[k];\n  for (int i = 0; i &lt; k; i++)\n  {\n    temp[i] = arr[i];\n  }\n  for (int i = 0; i &lt; n - k; i++)\n  {\n    arr[i] = arr[i + k];\n  }\n  for (int i = n - k; i &lt; n; i++)\n  {\n    arr[i] = temp[i - n + k];\n  }\n}\nint main()\n{\n  int n = 7;\n  int arr[] = {1, 2, 3, 4, 5, 6, 7};\n  int k = 2;\n  Rotatetoleft(arr, n, k);\n  cout &lt;&lt; \"After Rotating the elements to left \" &lt;&lt; endl;\n  for (int i = 0; i &lt; n; i++)\n  {\n    cout &lt;&lt; arr[i] &lt;&lt; \" \";\n  }\n  return 0;\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p id=\"output\">After Rotating the elements to left  3 4 5 6 7 1 2 </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O(n)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(k) since k array element needs to be stored in temp array</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\npublic class Main {\n  public static void Rotatetoleft(int[] arr, int n, int k) {\n    if (n == 0)\n      return;\n    k = k % n;\n    if (k > n)\n      return;\n    int[] temp = new int[k];\n    for (int i = 0; i &lt; k; i++) {\n      temp[i] = arr[i];\n    }\n    for (int i = 0; i &lt; n - k; i++) {\n      arr[i] = arr[i + k];\n    }\n    for (int i = n - k; i &lt; n; i++) {\n      arr[i] = temp[i - n + k];\n    }\n  }\n  public static void main(String args[]) {\n    int n = 7;\n    int[] arr = {1,2,3,4,5,6,7};\n    int k = 2;\n    Rotatetoleft(arr, n, k);\n    System.out.println(\"After Rotating the elements to left \");\n    for (int i = 0; i &lt; n; i++) {\n      System.out.print(arr[i] + \" \");\n    }\n  }\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p id=\"output\">After Rotating the elements to left 3 4 5 6 7 1 2 </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O(n)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(k) since k array element needs to be stored in temp array</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Approach 2:</strong> Using <strong>\u201d</strong> <strong>Reversal Algorithm \u201c</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Approach:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>For Rotating Elements to </strong>right</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Step 1:</strong> Reverse the last k elements of the array</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Step 2:</strong> Reverse the first n-k elements of the array.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Step 3:</strong> Reverse the whole array.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For Eg , arr[]={1,2,3,4,5,6,7} , k=2</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    \n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include &lt;iostream>\nusing namespace std;\n// Function to Reverse the array\nvoid Reverse(int arr[], int start, int end)\n{\n  while (start &lt;= end)\n  {\n    int temp = arr[start];\n    arr[start] = arr[end];\n    arr[end] = temp;\n    start++;\n    end--;\n  }\n}\n// Function to Rotate k elements to right\nvoid Rotateeletoright(int arr[], int n, int k)\n{\n  // Reverse first n-k elements\n  Reverse(arr, 0, n - k - 1);\n  // Reverse last k elements\n  Reverse(arr, n - k, n - 1);\n  // Reverse whole array\n  Reverse(arr, 0, n - 1);\n}\nint main()\n{\n  int arr[] = {1, 2, 3, 4, 5, 6, 7};\n  int n = 7;\n  int k = 2;\n  Rotateeletoright(arr, n, k);\n  cout &lt;&lt; \"After Rotating the k elements to right \";\n  for (int i = 0; i &lt; n; i++)\n    cout &lt;&lt; arr[i] &lt;&lt; \" \";\n  cout &lt;&lt; endl;\n  return 0;\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>After Rotating the k elements to right 6 7 1 2 3 4 5</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity - </strong>O(N) where N is the number of elements in an array</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity - </strong>O(1) since no extra space is required</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\npublic class Main {\n  // Function to Reverse the array\n  public static void Reverse(int[] arr, int start, int end) {\n    while (start &lt;= end) {\n      int temp = arr[start];\n      arr[start] = arr[end];\n      arr[end] = temp;\n      start++;\n      end--;\n    }\n  }\n  // Function to Rotate k elements to right\n  public static void Rotateeletoright(int[] arr, int n, int k) {\n    // Reverse first n-k elements\n    Reverse(arr, 0, n - k - 1);\n    // Reverse last k elements\n    Reverse(arr, n - k, n - 1);\n    // Reverse whole array\n    Reverse(arr, 0, n - 1);\n  }\n  public static void main(String args[]) {\n    int[] arr = {1,2,3,4,5,6,7};\n    int n = 7;\n    int k = 2;\n    Rotateeletoright(arr, n, k);\n    System.out.print(\"After Rotating the k elements to right \");\n    for (int i = 0; i &lt; n; i++)\n      System.out.print(arr[i] + \" \");\n    System.out.println();\n  }\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>After Rotating the k elements to right 6 7 1 2 3 4 5</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity - </strong>O(N) where N is the number of elements in an array</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity - </strong>O(1) since no extra space is required</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>For Rotating Elements to left</strong></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Step 1:</strong> Reverse the first k elements of the array</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Step 2:</strong> Reverse the last n-k elements of the array.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Step 3:</strong> Reverse the whole array.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For Eg , arr[]={1,2,3,4,5,6,7} , k=2</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    \n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include &lt;iostream>\nusing namespace std;\n// Function to Reverse the array\nvoid Reverse(int arr[], int start, int end)\n{\n  while (start &lt;= end)\n  {\n    int temp = arr[start];\n    arr[start] = arr[end];\n    arr[end] = temp;\n    start++;\n    end--;\n  }\n}\n// Function to Rotate k elements to left\nvoid Rotateeletoleft(int arr[], int n, int k)\n{\n  // Reverse first k elements\n  Reverse(arr, 0, k - 1);\n  // Reverse last n-k elements\n  Reverse(arr, k, n - 1);\n  // Reverse whole array\n  Reverse(arr, 0, n - 1);\n}\nint main()\n{\n  int arr[] = {1, 2, 3, 4, 5, 6, 7};\n  int n = 7;\n  int k = 2;\n  Rotateeletoleft(arr, n, k);\n  cout &lt;&lt; \"After Rotating the k elements to left \";\n  for (int i = 0; i &lt; n; i++)\n    cout &lt;&lt; arr[i] &lt;&lt; \" \";\n  cout &lt;&lt; endl;\n  return 0;\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>After Rotating the k elements to left 3 4 5 6 7 1 2</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity - </strong>O(N) where N is the number of elements in an array</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity - </strong>O(1) since no extra space is required</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\npublic class Main {\n  // Function to Reverse the array\n  public static void Reverse(int[] arr, int start, int end) {\n    while (start &lt;= end) {\n      int temp = arr[start];\n      arr[start] = arr[end];\n      arr[end] = temp;\n      start++;\n      end--;\n    }\n  }\n  // Function to Rotate k elements to left\n  public static void Rotateeletoleft(int[] arr, int n, int k) {\n    // Reverse first k elements\n    Reverse(arr, 0, k - 1);\n    // Reverse last n-k elements\n    Reverse(arr, k , n - 1);\n    // Reverse whole array\n    Reverse(arr, 0, n - 1);\n  }\n  public static void main(String args[]) {\n    int[] arr = {1,2,3,4,5,6,7};\n    int n = 7;\n    int k = 2;\n    Rotateeletoleft(arr, n, k);\n    System.out.print(\"After Rotating the k elements to left \");\n    for (int i = 0; i &lt; n; i++)\n      System.out.print(arr[i] + \" \");\n    System.out.println();\n  }\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>After Rotating the k elements to left 3 4 5 6 7 1 2</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity - </strong>O(N) where N is the number of elements in an array</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity - </strong>O(1) since no extra space is required</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to<strong><a href=\"https://www.linkedin.com/in/gurmeet-singh-630002201/\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>&nbsp;Gurmeet Singh</strong></a></strong>&nbsp;for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->"
}