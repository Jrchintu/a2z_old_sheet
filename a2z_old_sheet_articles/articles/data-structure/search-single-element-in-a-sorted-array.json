{
    "dislikes": 7,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:09:10 GMT+0530 (India Standard Time)",
    "slug": "search-single-element-in-a-sorted-array",
    "aid": "1409",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/single-element-in-sorted-array",
    "title": "Search Single Element in a sorted array",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "binary-search",
            "topic-title": "Binary Search"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        }
    ],
    "likes": 203,
    "category_tag": "data-structure",
    "preview": "Problem Statement: Given an array of N integers. Every number in the array except one appears twice. Find the single number in the array. Pre-requisite: Binary Search Algorithm Examples Example 1:...",
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement:</strong> Given an array of N integers. Every number in the array except one appears twice. Find the single number in the array.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Pre-requisite: </strong><a href=\"https://takeuforward.org/data-structure/binary-search-explained/\">Binary Search Algorithm</a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n<details class=\"article_example_details\">\n<summary class=\"article_example_summary\">\n<span><strong>\nExamples\n</strong>\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"atricle_example_content\">\n<pre class=\"wp-block-preformatted\"><!-- Insert New Examples Here -->\n<pre class=\"wp-block-preformatted\"><strong>Example 1:</strong>\n<strong>Input Format:</strong> arr[] = {1,1,2,2,3,3,4,5,5,6,6}\n<strong>Result:</strong> 4\n<strong>Explanation:</strong> Only the number 4 appears once in the array.\n\n<strong>Example 2:\n</strong>\n<strong>Input Format:</strong> arr[] = {1,1,3,5,5}\n<strong>Result:</strong> 3\n<strong>Explanation:</strong> Only the number 3 appears once in the array.\n</pre>\n</pre>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Practice Section-->\n<div class=\"practice\">\n<span><strong>Practice: </strong></span>\n<div class=\"problem-buttons\">\n\n<!-- Add Problem Link inside href -->\n<a href=\"https://bit.ly/3pBahrX\" target=\"_blank\" rel=\"noopener\">\n<span>Solve Problem</span>\n<img src=\"https://static.takeuforward.org/wp/uploads/2023/04/Group-11-5.png\" alt=\"code-studio\">\n</a>\n</div>\n</div>\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\nyourself first. </em></p>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<div class=\"horizontal_navbar_dsa_article\">\n<div class=\"grid_container_three\">\n<a href=\"#brute-force-approach\" class=\"three-boxes box-a\">\nBrute Force Approach 1:\n</a>\n<a href=\"#better-approach\" class=\"three-boxes box-b\">\nBrute Force Approach 2:\n</a>\n<a href=\"#optimal-approach\" class=\"three-boxes box-c\">\nOptimal Approach:\n</a>\n<a href=\"#dsa_article_video_explanation\" class=\"three-boxes box-d\">\n<svg width=\"26\" height=\"26\" viewBox=\"0 0 20 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M8 10L13.19 7L8 4V10ZM19.56 2.17C19.69 2.64 19.78 3.27 19.84 4.07C19.91 4.87 19.94 5.56 19.94 6.16L20 7C20 9.19 19.84 10.8 19.56 11.83C19.31 12.73 18.73 13.31 17.83 13.56C17.36 13.69 16.5 13.78 15.18 13.84C13.88 13.91 12.69 13.94 11.59 13.94L10 14C5.81 14 3.2 13.84 2.17 13.56C1.27 13.31 0.69 12.73 0.44 11.83C0.31 11.36 0.22 10.73 0.16 9.93C0.0900001 9.13 0.0599999 8.44 0.0599999 7.84L0 7C0 4.81 0.16 3.2 0.44 2.17C0.69 1.27 1.27 0.69 2.17 0.44C2.64 0.31 3.5 0.22 4.82 0.16C6.12 0.0899998 7.31 0.0599999 8.41 0.0599999L10 0C14.19 0 16.8 0.16 17.83 0.44C18.73 0.69 19.31 1.27 19.56 2.17Z\" fill=\"red\"></path>\n</svg>\n\n</a>\n<div class=\"box-e tooltip\">\n<svg viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M12.842 9.25L11.9577 10.17C11.2502 10.89 10.8081 11.5 10.8081 13H8.84297V12.5C8.84297 11.39 9.28511 10.39 9.99255 9.67L11.2109 8.41C11.5745 8.05 11.7906 7.55 11.7906 7C11.7906 6.46957 11.5836 5.96086 11.2151 5.58579C10.8465 5.21071 10.3467 5 9.82552 5C9.30434 5 8.80451 5.21071 8.43598 5.58579C8.06745 5.96086 7.86041 6.46957 7.86041 7H5.89531C5.89531 5.93913 6.30938 4.92172 7.04644 4.17157C7.7835 3.42143 8.78316 3 9.82552 3C10.8679 3 11.8675 3.42143 12.6046 4.17157C13.3417 4.92172 13.7557 5.93913 13.7557 7C13.7543 7.84324 13.4259 8.65183 12.842 9.25ZM10.8081 17H8.84297V15H10.8081M9.82552 0C8.53521 0 7.25754 0.258658 6.06545 0.761205C4.87337 1.26375 3.79021 2.00035 2.87783 2.92893C1.03519 4.8043 0 7.34784 0 10C0 12.6522 1.03519 15.1957 2.87783 17.0711C3.79021 17.9997 4.87337 18.7362 6.06545 19.2388C7.25754 19.7413 8.53521 20 9.82552 20C12.4314 20 14.9306 18.9464 16.7732 17.0711C18.6158 15.1957 19.651 12.6522 19.651 10C19.651 4.47 15.2296 0 9.82552 0Z\" fill=\"black\"></path>\n</svg>\n<div class=\"bottom\">\n<p>Expand any one approach by clicking the given options in the bar. Clicking one approach on bar,\ncloses all other expands. You can manually expand more than one approach at a time</p>\n<i></i>\n</div>\n\n</div>\n</div>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Approaches Drop-Down -->\n<div class=\"dsa_article_dropdown_approachs \">\n\n<!-- Brute Force Approach Starts from here -->\n<div id=\"brute-force-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nBrute Force Approach 1:\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n<h3><strong>Naive Approach(Brute force)</strong>:&nbsp;</h3>\n<p>A crucial observation to note is that if an element appears twice in a sequence, either the preceding or the subsequent element will also be the same. But only for the single element, this condition will not be satisfied. So, to check this the condition will be the following:</p>\n<ul><li><strong>If arr[i] != arr[i-1] and arr[i] != arr[i+1]: </strong>If this condition is true for any element, arr[i], we can conclude this is the single element.</li></ul>\n<p><strong>Edge Cases:</strong></p>\n<ol><li><strong>If n == 1: </strong>This means the array size is 1<em>.</em> If the array contains only one element, we will return that element only.</li><li><strong>If i == 0: </strong>This means this is the very first element of the array. The only condition, we need to check is: <strong>arr[i] != arr[i+1].</strong></li><li><strong>If i == n-1: </strong>This means this is the last element of the array. The only condition, we need to check is: <strong>arr[i] != arr[i-1].</strong></li></ol>\n<p>So, we will traverse the array and we will check for the above conditions.</p>\n<h3><strong>Algorithm:</strong></h3>\n<p>The steps are as follows:</p>\n<ol><li>At first, we will check if the array contains only 1 element. If it is, we will simply return that element.</li><li>We will start traversing the array. Then for every element, we will check the following.</li><li><strong>If i == 0: </strong>If we are at the first index, we will check if the next element is equal.<ol><li><strong>If arr[i] != arr[i+1]: </strong>This means arr[i] is the single element and so we will return arr[i].</li></ol></li><li><strong>If i == n-1: </strong>If we are at the last index, we will check if the previous element is equal.<ol><li><strong>If arr[i] != arr[i-1]: </strong>This means arr[i] is the single element and so we will return arr[i].</li></ol></li><li>For the elements other than the first and last, we will check: <strong><br>If arr[i] != arr[i-1] and arr[i] != arr[i+1]: </strong>If this condition is true for any element, arr[i], we can conclude this is the single element. And we should return arr[i].</li></ol>\n<p><strong>Dry-run: </strong><em>Please refer to the </em><a href=\"https://youtu.be/AZOmHuHadxQ\"><em>video</em></a><em> for the dry-run.</em></p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n\n<!-- Insert C++ code of Brute Force Here -->\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint singleNonDuplicate(vector&lt;int&gt;&amp; arr) {\n    int n = arr.size(); //size of the array.\n    if (n == 1) return arr[0];\n\n    for (int i = 0; i &lt; n; i++) {\n\n        //Check for first index:\n        if (i == 0) {\n            if (arr[i] != arr[i + 1])\n                return arr[i];\n        }\n        //Check for last index:\n        else if (i == n - 1) {\n            if (arr[i] != arr[i - 1])\n                return arr[i];\n        }\n        else {\n            if (arr[i] != arr[i - 1] &amp;&amp; arr[i] != arr[i + 1])\n                return arr[i];\n        }\n    }\n\n    // dummy return statement:\n    return -1;\n}\n\nint main()\n{\n    vector&lt;int&gt; arr = {1, 1, 2, 2, 3, 3, 4, 5, 5, 6, 6};\n    int ans = singleNonDuplicate(arr);\n    cout &lt;&lt; \"The single element is: \" &lt;&lt; ans &lt;&lt; \"\\n\";\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\n<!-- Insert Java code of Brute Force Here -->\nimport java.util.*;\n\npublic class tUf {\n    public static int singleNonDuplicate(ArrayList&lt;Integer&gt; arr) {\n        int n = arr.size(); // Size of the array.\n        if (n == 1)\n            return arr.get(0);\n\n        for (int i = 0; i &lt; n; i++) {\n            // Check for first index:\n            if (i == 0) {\n                if (!arr.get(i).equals(arr.get(i + 1)))\n                    return arr.get(i);\n            }\n            // Check for last index:\n            else if (i == n - 1) {\n                if (!arr.get(i).equals(arr.get(i - 1)))\n                    return arr.get(i);\n            } else {\n                if (!arr.get(i).equals(arr.get(i - 1)) &amp;&amp; !arr.get(i).equals(arr.get(i + 1)))\n                    return arr.get(i);\n            }\n        }\n\n        // Dummy return statement:\n        return -1;\n    }\n\n    public static void main(String[] args) {\n        ArrayList&lt;Integer&gt; arr =\n            new ArrayList&lt;&gt;(Arrays.asList(1, 1, 2, 2, 3, 3, 4, 5, 5, 6, 6));\n        int ans = singleNonDuplicate(arr);\n        System.out.println(\"The single element is: \" + ans);\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\n<!-- Insert Python code of Brute Force Here -->\ndef singleNonDuplicate(arr):\n    n = len(arr)  # Size of the array\n    if n == 1:\n        return arr[0]\n\n    for i in range(n):\n        # Check for first index\n        if i == 0:\n            if arr[i] != arr[i + 1]:\n                return arr[i]\n        # Check for last index\n        elif i == n - 1:\n            if arr[i] != arr[i - 1]:\n                return arr[i]\n        else:\n            if arr[i] != arr[i - 1] and arr[i] != arr[i + 1]:\n                return arr[i]\n\n    # Dummy return statement\n    return -1\n\narr = [1, 1, 2, 2, 3, 3, 4, 5, 5, 6, 6]\nans = singleNonDuplicate(arr)\nprint(\"The single element is:\", ans)\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\n<!-- Insert JavaScript code of Brute Force Here -->\nfunction singleNonDuplicate(arr) {\n    var n = arr.length; // Size of the array\n    if (n === 1) return arr[0];\n\n    for (var i = 0; i &lt; n; i++) {\n        // Check for first index\n        if (i === 0) {\n            if (arr[i] !== arr[i + 1])\n                return arr[i];\n        }\n        // Check for last index\n        else if (i === n - 1) {\n            if (arr[i] !== arr[i - 1])\n                return arr[i];\n        }\n        else {\n            if (arr[i] !== arr[i - 1] &amp;&amp; arr[i] !== arr[i + 1])\n                return arr[i];\n        }\n    }\n\n    // Dummy return statement\n    return -1;\n}\n\nvar arr = [1, 1, 2, 2, 3, 3, 4, 5, 5, 6, 6];\nvar ans = singleNonDuplicate(arr);\nconsole.log(\"The single element is: \" + ans);\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Brute Force Here -->\n</p><p><strong>Output: </strong>The single element is: 4</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n<!-- Insert Time and Space Complexity of Brute Force Here -->\n</p><p><strong>Time Complexity: </strong>O(N), N = size of the given array.<br><strong>Reason: </strong>We are traversing the entire array.</p>\n<p><strong>Space Complexity: </strong>O(1) as we are not using any extra space.</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Brute Force Approach Ends here -->\n\n\n<!-- Better Approach Starts from here -->\n\n<div id=\"better-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nBrute Force Approach 2:\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition For Better Approach Here -->\n<h3><strong>Naive Approach(Using XOR)</strong>:&nbsp;</h3>\n<p>We can simplify the above approach using the XOR operation. We need to remember 2 important properties of XOR:</p>\n<ul><li>a ^ a = 0, XOR of two same numbers results in 0.</li><li>a ^ 0 = a, XOR of a number with 0 always results in that number.</li></ul>\n<p>Now, if we XOR all the array elements, all the duplicates will result in 0 and we will be left with a single element.</p>\n<h3><strong>Algorithm:</strong></h3>\n<ol><li>We will declare an \u2018ans\u2019 variable initialized with 0.</li><li>We will traverse the array and XOR each element with the variable \u2018ans\u2019.</li><li>After complete traversal, the \u2018ans\u2019 variable will store the single element and we will return it.</li></ol>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n\n<!-- Insert C++ Code of Better Approach Here -->\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint singleNonDuplicate(vector&lt;int&gt;&amp; arr) {\n    int n = arr.size(); //size of the array.\n    int ans = 0;\n    // XOR all the elements:\n    for (int i = 0; i &lt; n; i++) {\n        ans = ans ^ arr[i];\n    }\n    return ans;\n}\n\nint main()\n{\n    vector&lt;int&gt; arr = {1, 1, 2, 2, 3, 3, 4, 5, 5, 6, 6};\n    int ans = singleNonDuplicate(arr);\n    cout &lt;&lt; \"The single element is: \" &lt;&lt; ans &lt;&lt; \"\\n\";\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\n<!-- Insert Java Code of Better Approach Here -->\nimport java.util.*;\n\npublic class tUf {\n    public static int singleNonDuplicate(ArrayList&lt;Integer&gt; arr) {\n        int n = arr.size(); //size of the array.\n        int ans = 0;\n        // XOR all the elements:\n        for (int i = 0; i &lt; n; i++) {\n            ans = ans ^ arr.get(i);\n        }\n        return ans;\n    }\n\n    public static void main(String[] args) {\n        ArrayList&lt;Integer&gt; arr =\n            new ArrayList&lt;&gt;(Arrays.asList(1, 1, 2, 2, 3, 3, 4, 5, 5, 6, 6));\n        int ans = singleNonDuplicate(arr);\n        System.out.println(\"The single element is: \" + ans);\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\n<!-- Insert Python Code of Better Approach Here -->\ndef singleNonDuplicate(arr):\n    n = len(arr)  # Size of the array\n    ans = 0\n    # XOR all the elements\n    for i in range(n):\n        ans = ans ^ arr[i]\n    return ans\n\narr = [1, 1, 2, 2, 3, 3, 4, 5, 5, 6, 6]\nans = singleNonDuplicate(arr)\nprint(\"The single element is:\", ans)\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\n<!-- Insert javascript Code of Better Approach Here -->\nfunction singleNonDuplicate(arr) {\n    let n = arr.length; // Size of the array\n    let ans = 0;\n    // XOR all the elements\n    for (let i = 0; i &lt; n; i++) {\n        ans = ans ^ arr[i];\n    }\n    return ans;\n}\n\nlet arr = [1, 1, 2, 2, 3, 3, 4, 5, 5, 6, 6];\nlet ans = singleNonDuplicate(arr);\nconsole.log(\"The single element is:\", ans);\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Better Approach Here -->\n<strong>Output:</strong>  The single element is: 4\n\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Better Approach Here -->\n</p><p><strong>Time Complexity: </strong>O(N), N = size of the given array.<br><strong>Reason: </strong>We are traversing the entire array.</p>\n<p><strong>Space Complexity: </strong>O(1) as we are not using any extra space.</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Better Approach Ends from here -->\n\n\n<!-- Optimal Approach Starts from here -->\n\n<div id=\"optimal-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nOptimal Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm of Better Approach Here -->\n<h3><strong>Optimal Approach(Using Binary Search)</strong>:&nbsp;</h3>\n<p>We are going to use the Binary Search algorithm to optimize the approach.</p>\n<p><em>The primary objective of the Binary Search algorithm is to efficiently determine the appropriate half to eliminate, thereby reducing the search space by half. It does this by determining a specific condition that ensures that the target is not present in that half.</em></p>\n<p>We need to consider 2 different cases while using Binary Search in this problem. Binary Search works by reducing the search space by half. So, at first,<strong> we need to identify the halves and then eliminate them accordingly</strong>. In addition to that, <strong>we need to check if the current element i.e. arr[mid] is the \u2018single element\u2019</strong>.</p>\n<p>If we can resolve these two cases, we can easily apply Binary Search in this algorithm.</p>\n<p><strong>How to check if arr[mid] i.e. the current element is the single element:</strong></p>\n<p>A crucial observation to note is that if an element appears twice in a sequence, either the preceding or the subsequent element will also be the same. But only for the single element, this condition will not be satisfied. So, to check this, the condition will be the following:</p>\n<ul><li><strong>If arr[mid] != arr[mid-1] and arr[mid] != arr[mid+1]: </strong>If this condition is true for arr[mid], we can conclude arr[mid] is the single element.</li></ul>\n<p>The above condition will throw errors in the following 3 cases:</p>\n<ul><li><strong>If the array size is 1.</strong></li><li><strong>If \u2018mid\u2019 points to 0 i.e. the first index.</strong></li><li><strong>If \u2018mid\u2019 points to n-1 i.e. the last index.</strong></li></ul>\n<p><strong>Note: </strong><em>At the start of the algorithm, we address the above edge cases without requiring separate conditions during the check for arr[mid] inside the loop. And the search space will be from index 1 to n-2 as indices 0 and n-1 have already been checked.</em></p>\n<p><strong>Resolving edge cases:</strong></p>\n<ol><li><strong>If n == 1: </strong>This means the array size is 1<em>.</em> If the array contains only one element, we will return that element only.</li><li><strong>If arr[0] != arr[1]: </strong>This means the very first element of the array is the single element. So, we will return arr[0].</li><li><strong>If arr[n-1] != arr[n-2]: </strong>This means the last element of the array is the single element. So, we will return arr[n-1].</li></ol>\n<p><strong>How to identify the halves:</strong></p>\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/06/Screenshot-2023-06-28-013418.png\" alt=\"\" class=\"wp-image-11476\"></figure>\n<p>By observing the above image, we can clearly notice a striking distinction between the index sequences of the left and right halves of the single element in the array.&nbsp;</p>\n<ol><li>The index sequence of the duplicate numbers in the left half is always (even, odd). That means one of the following conditions will be satisfied if we are in the left half:<ol><li><strong>If the current index is even, the element at the next odd index will be the same as the current element.</strong></li><li><strong>Similarly, If the current index is odd, the element at the preceding even index will be the same as the current element.</strong></li></ol></li><li>The index sequence of the duplicate numbers in the right half is always (odd, even). That means one of the following conditions will be satisfied if we are in the right half:<ol><li><strong>If the current index is even, the element at the preceding odd index will be the same as the current element.</strong></li><li><strong>Similarly, If the current index is odd, the element at the next even index will be the same as the current element.</strong></li></ol></li></ol>\n<p>Now, we can easily identify the left and right halves, just by checking the sequence of the current index, i, like the following:</p>\n<ul><li><strong>If (i % 2 == 0 and arr[i] == arr[i+1]) or (i%2 == 1 and arr[i] == arr[i-1]), </strong>we are in the left half.</li><li><strong>If (i % 2 == 0 and arr[i] == arr[i-1]) or (i%2 == 1 and arr[i] == arr[i+1]), </strong>we are in the right half.</li></ul>\n<p><strong>Note:</strong><strong><em> </em></strong><em>In our case, the index i refers to the index \u2018mid\u2019.</em></p>\n<p><strong>How to eliminate the halves:</strong></p>\n<ul><li>If we are in the left half of the single element, we have to eliminate this left half (i.e. low = mid+1). Because our single element appears somewhere on the right side.</li><li>If we are in the right half of the single element, we have to eliminate this right half (i.e. high = mid-1). Because our single element appears somewhere on the left side.</li></ul>\n<p>Now, we have resolved the problems and we can use the binary search accordingly.</p>\n<h3><strong>Algorithm:</strong></h3>\n<p>The steps are as follows:</p>\n<ol><li><strong>If n == 1: </strong>This means the array size is 1<em>.</em> If the array contains only one element, we will return that element only.</li><li><strong>If arr[0] != arr[1]: </strong>This means the very first element of the array is the single element. So, we will return arr[0].</li><li><strong>If arr[n-1] != arr[n-2]: </strong>This means the last element of the array is the single element. So, we will return arr[n-1].<br></li><li><strong>Place the 2 pointers i.e. low and high: </strong>Initially, we will place the pointers excluding index 0 and n-1 like this: low will point to index 1, and high will point to index n-2 i.e. the second last index.<br></li><li><strong>Calculate the \u2018mid\u2019: </strong>Now, inside a loop, we will calculate the value of \u2018mid\u2019 using the following formula:<br><strong>mid = (low+high) // 2 ( \u2018//\u2019 refers to integer division)</strong><strong><br></strong></li><li><strong>Check if arr[mid] is the single element:</strong><strong><br></strong><strong>If arr[mid] != arr[mid-1] and arr[mid] != arr[mid+1]: </strong>If this condition is true for arr[mid], we can conclude arr[mid] is the single element. We will return arr[mid].<br></li><li><strong>If (mid % 2 == 0 and arr[mid] == arr[mid+1]) </strong><strong><br></strong><strong>or (mid%2 == 1 and arr[mid] == arr[mid-1]): </strong>This means<strong> </strong>we are in the left half and we should eliminate it as our single element appears on the right. So, we will do this:<br>low = mid+1.</li><li><strong>Otherwise, </strong>we are in the right half and we should eliminate it as our single element appears on the left. So, we will do this: high = mid-1.</li></ol>\n<p>The steps from 5 to 8 will be inside a loop and the loop will continue until low crosses high.<strong>Dry-run: </strong><em>Please refer to the </em><a href=\"https://youtu.be/AZOmHuHadxQ\"><em>video</em></a><em> for a detailed explanation.</em></p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n\n<!-- Insert C++ code of Optimal Approach Here-->\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint singleNonDuplicate(vector&lt;int&gt;&amp; arr) {\n    int n = arr.size(); //size of the array.\n\n    //Edge cases:\n    if (n == 1) return arr[0];\n    if (arr[0] != arr[1]) return arr[0];\n    if (arr[n - 1] != arr[n - 2]) return arr[n - 1];\n\n    int low = 1, high = n - 2;\n    while (low &lt;= high) {\n        int mid = (low + high) / 2;\n\n        //if arr[mid] is the single element:\n        if (arr[mid] != arr[mid + 1] &amp;&amp; arr[mid] != arr[mid - 1]) {\n            return arr[mid];\n        }\n\n        //we are in the left:\n        if ((mid % 2 == 1 &amp;&amp; arr[mid] == arr[mid - 1])\n                || (mid % 2 == 0 &amp;&amp; arr[mid] == arr[mid + 1])) {\n            //eliminate the left half:\n            low = mid + 1;\n        }\n        //we are in the right:\n        else {\n            //eliminate the right half:\n            high = mid - 1;\n        }\n    }\n\n    // dummy return statement:\n    return -1;\n}\n\nint main()\n{\n    vector&lt;int&gt; arr = {1, 1, 2, 2, 3, 3, 4, 5, 5, 6, 6};\n    int ans = singleNonDuplicate(arr);\n    cout &lt;&lt; \"The single element is: \" &lt;&lt; ans &lt;&lt; \"\\n\";\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\n<!-- Insert Java code of Optimal Approach Here -->\nimport java.util.*;\n\npublic class tUf {\n    public static int singleNonDuplicate(ArrayList&lt;Integer&gt; arr) {\n        int n = arr.size(); // Size of the array.\n\n        // Edge cases:\n        if (n == 1)\n            return arr.get(0);\n        if (!arr.get(0).equals(arr.get(1)))\n            return arr.get(0);\n        if (!arr.get(n - 1).equals(arr.get(n - 2)))\n            return arr.get(n - 1);\n\n        int low = 1, high = n - 2;\n        while (low &lt;= high) {\n            int mid = (low + high) / 2;\n\n            // If arr[mid] is the single element:\n            if (!arr.get(mid).equals(arr.get(mid + 1)) &amp;&amp; !arr.get(mid).equals(arr.get(mid - 1))) {\n                return arr.get(mid);\n            }\n\n            // We are in the left:\n            if ((mid % 2 == 1 &amp;&amp; arr.get(mid).equals(arr.get(mid - 1)))\n                    || (mid % 2 == 0 &amp;&amp; arr.get(mid).equals(arr.get(mid + 1)))) {\n                // Eliminate the left half:\n                low = mid + 1;\n            }\n            // We are in the right:\n            else {\n                // Eliminate the right half:\n                high = mid - 1;\n            }\n        }\n\n        // Dummy return statement:\n        return -1;\n    }\n\n    public static void main(String[] args) {\n        ArrayList&lt;Integer&gt; arr = new ArrayList&lt;&gt;(Arrays.asList(1, 1, 2, 2, 3, 3, 4, 5, 5, 6, 6));\n        int ans = singleNonDuplicate(arr);\n        System.out.println(\"The single element is: \" + ans);\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\n<!-- Insert Python code of Optimal Approach Here -->\ndef singleNonDuplicate(arr):\n    n = len(arr)  # Size of the array\n\n    # Edge cases:\n    if n == 1:\n        return arr[0]\n    if arr[0] != arr[1]:\n        return arr[0]\n    if arr[n - 1] != arr[n - 2]:\n        return arr[n - 1]\n\n    low = 1\n    high = n - 2\n    while low &lt;= high:\n        mid = (low + high) // 2\n\n        # If arr[mid] is the single element:\n        if arr[mid] != arr[mid + 1] and arr[mid] != arr[mid - 1]:\n            return arr[mid]\n\n        # We are in the left:\n        if (mid % 2 == 1 and arr[mid] == arr[mid - 1]) or (mid % 2 == 0 and arr[mid] == arr[mid + 1]):\n            # Eliminate the left half:\n            low = mid + 1\n        # We are in the right:\n        else:\n            # Eliminate the right half:\n            high = mid - 1\n\n    # Dummy return statement:\n    return -1\n\narr = [1, 1, 2, 2, 3, 3, 4, 5, 5, 6, 6]\nans = singleNonDuplicate(arr)\nprint(\"The single element is:\", ans)\n\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\n<!-- Insert Python code of Optimal Approach Here -->\nfunction singleNonDuplicate(arr) {\n    let n = arr.length; // Size of the array\n\n    // Edge cases:\n    if (n === 1) return arr[0];\n    if (arr[0] !== arr[1]) return arr[0];\n    if (arr[n - 1] !== arr[n - 2]) return arr[n - 1];\n\n    let low = 1, high = n - 2;\n    while (low &lt;= high) {\n        let mid = Math.floor((low + high) / 2);\n\n        // If arr[mid] is the single element:\n        if (arr[mid] !== arr[mid + 1] &amp;&amp; arr[mid] !== arr[mid - 1]) {\n            return arr[mid];\n        }\n\n        // We are in the left:\n        if ((mid % 2 === 1 &amp;&amp; arr[mid] === arr[mid - 1])\n                || (mid % 2 === 0 &amp;&amp; arr[mid] === arr[mid + 1])) {\n            // Eliminate the left half:\n            low = mid + 1;\n        }\n        // We are in the right:\n        else {\n            // Eliminate the right half:\n            high = mid - 1;\n        }\n    }\n\n    // Dummy return statement:\n    return -1;\n}\n\nlet arr = [1, 1, 2, 2, 3, 3, 4, 5, 5, 6, 6];\nlet ans = singleNonDuplicate(arr);\nconsole.log(\"The single element is:\", ans);\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Optimal Apporach Here -->\n<strong>Output:</strong> The single element is: 4\n\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Optimal Approach-->\n</p><p><strong>Time Complexity: </strong>O(logN), N = size of the given array.<br><strong>Reason: </strong>We are basically using the Binary Search algorithm.</p>\n<p><strong>Space Complexity: </strong>O(1) as we are not using any extra space.</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Optimal Approach Starts from here -->\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n<details>\n<summary class=\"main-summary\">\n<span>\nVideo Explanation\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"yt-video-wrapper\">\n\n<!-- Insert iframe embed Link of Youtube Video-->\n<iframe class=\"lazy-loaded\" loading=\"lazy\" title=\"Single Element in Sorted Array\" width=\"810\" height=\"456\" data-lazy-type=\"iframe\" data-src=\"https://www.youtube.com/embed/AZOmHuHadxQ\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\" src=\"https://www.youtube.com/embed/AZOmHuHadxQ?feature=oembed\"></iframe><noscript>\n<iframe loading=\"lazy\" title=\"Single Element in Sorted Array\" width=\"810\" height=\"456\" src=\"https://www.youtube.com/embed/AZOmHuHadxQ\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe></noscript>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script>\n\nconst codeSections = document.querySelectorAll('.code-section');\n\n// Get last selected language from localStorage or set default value\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\n// Update last selected language for all sections and store in localStorage\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\n// Handle copy button click event\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\n// Set initial state of the tabs\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<script>\nconst codeSections = document.querySelectorAll('.code-section');\n\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script src=\"https://takeuforward.org/UXApproachDropDowns/3ApproachJSScript.js\"></script>\n<!-- /wp:html -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to <strong><a href=\"https://www.linkedin.com/in/kriti39/\" target=\"_blank\" rel=\"noreferrer noopener\">KRITIDIPTA GHOSH</a></strong></em> <em>for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->"
}