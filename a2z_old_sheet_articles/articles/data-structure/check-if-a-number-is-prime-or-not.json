{
    "dislikes": 8,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:09:43 GMT+0530 (India Standard Time)",
    "slug": "check-if-a-number-is-prime-or-not",
    "aid": "1565",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/check-for-prime-number",
    "title": "Check if a number is prime or not",
    "topics": [
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "maths",
            "topic-title": "Maths"
        }
    ],
    "likes": 244,
    "category_tag": "data-structure",
    "preview": "Problem Statement: Given an integer N, check whether it is prime or not. A prime number is a number that is only divisible by 1 and itself and the total number of divisors is 2. Examples Example 1:...",
    "content": "<p><strong>Problem Statement: </strong>Given an integer N, check whether it is prime or not. A prime number is a number that is only divisible by 1 and itself and the total number of divisors is 2.\n</p>\n\n\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n    <details class=\"article_example_details\">\n        <summary class=\"article_example_summary\">\n            <span><strong>\n                    Examples\n                </strong>\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"atricle_example_content\">\n            <pre class=\"wp-block-preformatted\">\n                <span><strong>Example 1:</strong></span>\n                <span><strong>Input:</strong>N = 2</span>\n               \n                <span><strong>Output:</strong>True</span>\n                \n                <span><strong>Explanation: </strong>2 is a prime number because it has two divisors: 1 and 2 (the number itself).</span>\n                                        \n                <span><strong>Example 2:</strong></span>\n                <span><strong>Input:</strong>N =10</span>                \n                \n                <span><strong>Output: </strong>False</span>\n                \n                <span><strong>Explanation: </strong>10 is not prime, it is a composite number because it has 4 divisors: 1, 2, 5 and 10.</span>                            \n\n            </pre>\n        </div>\n    </details>\n</div>\n\n\n<!-- This is Practice Section-->\n<div class=\"practice\">\n    <span><strong>Practice: </strong></span>\n    <div class=\"problem-buttons\">\n\n         \n        <a href=\"https://www.codingninjas.com/studio/problems/check-prime_624934?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf\" target=\"_blank\" rel=\"noopener\">\n            <span>Solve Problem</span>\n            <img src=\"https://takeuforward-content-images.s3.ap-south-1.amazonaws.com/content/Group-11-5-pFOq-8ga\" alt=\"code-studio\">\n        </a>\n    </div>\n    \n</div>\n\n\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out yourself first. </em></p>\n\n\n<!-- This is Approaches Drop-Down -->\n<div class=\"dsa_article_dropdown_approachs \">\n\n    <!-- Approach - 1 Starts from here -->\n    <div id=\"brute-force-approach\">\n        <details>\n            <summary class=\"main-summary\">\n                <span>\n                    <!-- Change Name Here -->\n                   Brute Force Approach \n                </span>\n                <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                    <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                    </path>\n                </svg>\n            </summary>\n            <div class=\"common-drops\">\n                <details class=\"secondary-details\" open=\"\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Algorithm / Intuition\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <div class=\"approach-algorithm\">\n                        \n                        <p>We can iterate through numbers from 1 to n, counting how many of these numbers divide n without a remainder. If exactly two numbers do, so n is prime otherwise it is not prime. </p>\n                        \n                        <p><strong>Algorithm:</strong></p>\n                        <p><strong>Step 1:</strong>Initialise a variable cnt to count the number of factors and set it to 0.</p>\n                        \n                        <p><strong>Step 2:</strong>Start a loop from 1 to n, iterating through each number i. Inside the loop:\n                        <ol><li>Check if n is divisible by i without any remainder.</li><li>If it is, increment the counter variable by 1.</li></ol></p>\n                                                                    \n                        <p><strong>Step 3:</strong>After the loop if the number of divisors is equal to 2, return true indicating the number is prime.\n                        <ol><li>If the number of divisors is not equal to 2 (but greater), return false indicating that the number is not prime.</li></ol></p>\n                        \n                    </div>\n                </details>\n                <details class=\"code-section secondary-details\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Code\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <div class=\"code-tabs\">\n                        <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n                        <button class=\"code-tab\" data-lang=\"java\">Java</button>\n                        <button class=\"code-tab\" data-lang=\"python\">Python</button>\n                        <button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n                        <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\"\n                            xmlns=\"http://www.w3.org/2000/svg\">\n                            <path\n                                d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n                            </path>\n                        </svg>\n                    </div>\n                    <div class=\"code-content\">\n                        <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n                            <pre class=\"wp-block-code\">\n                                <code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h&gt; \n#include &lt;iostream&gt;\nusing namespace std;\n\n// Function to check if a\n// given number is prime.\nbool checkPrime(int n){ \n     // Initialize a counter variable to\n    // count the number of factors.\n    int cnt = 0;\n    // Loop through numbers from 1 to n.\n    for(int i = 1; i&lt;=n; i++){ \n        // If n is divisible by i\n        // without any remainder.\n        if(n%i ==0){ \n             // Increment the counter.\n            cnt = cnt+1;\n        }\n    }\n\n     // If the number of\n     // factors is exactly 2\n    if(cnt==2){\n         // Return true, indicating\n         // that the number is prime.\n        return true;\n    }\n    // If the number of\n    // factors is not 2.\n    else{ \n        // Return false, indicating\n        // that the number is not prime.\n        return false; \n    }\n}\n\nint main() {\n    int n = 1483;\n    bool isPrime = checkPrime(n);\n    if(isPrime){\n        cout &lt;&lt; n &lt;&lt; &quot; is a prime number.&quot; &lt;&lt; endl;\n    } else {\n        cout &lt;&lt; n &lt;&lt; &quot; is not a prime number.&quot; &lt;&lt; endl;\n    }\n\n    return 0;\n}\n                                </code>\n                            </pre>\n                        </div>\n                        <div class=\"code-block \" data-lang=\"java\">\n                            <pre class=\"wp-block-code\">\n                                <code lang=\"java\" class=\"language-java\">\npublic class Main {\n    // Function to check if a\n    // given number is prime.\n    static boolean checkPrime(int n) {\n        // Initialize a counter variable to\n        // count the number of factors.\n        int cnt = 0;\n        // Loop through numbers from 1 to n.\n        for (int i = 1; i &lt;= n; i++) {\n            // If n is divisible by i\n            // without any remainder.\n            if (n % i == 0) {\n                // Increment the counter.\n                cnt = cnt + 1;\n            }\n        }\n\n        // If the number of\n        // factors is exactly 2\n        if (cnt == 2) {\n            // Return true, indicating\n            // that the number is prime.\n            return true;\n        }\n        // If the number of\n        // factors is not 2.\n        else {\n            // Return false, indicating\n            // that the number is not prime.\n            return false;\n        }\n    }\n\n    public static void main(String[] args) {\n        int n = 1483;\n        boolean isPrime = checkPrime(n);\n        if (isPrime) {\n            System.out.println(n + &quot; is a prime number.&quot;);\n        } else {\n            System.out.println(n + &quot; is not a prime number.&quot;);\n        }\n    }\n}\n                                </code>\n                            </pre>\n                        </div>\n                        <div class=\"code-block\" data-lang=\"python\">\n                            <pre class=\"wp-block-code\">\n                                <code lang=\"python\" class=\"language-python\">\n# Function to check if a\n# given number is prime.\ndef checkPrime(n):\n    # Initialize a counter variable to\n    # count the number of factors.\n    cnt = 0\n    # Loop through numbers from 1 to n.\n    for i in range(1, n+1):\n        # If n is divisible by i\n        # without any remainder.\n        if n % i == 0:\n            # Increment the counter.\n            cnt = cnt + 1\n\n    # If the number of\n    # factors is exactly 2\n    if cnt == 2:\n        # Return True, indicating\n        # that the number is prime.\n        return True\n    # If the number of\n    # factors is not 2.\n    else:\n        # Return False, indicating\n        # that the number is not prime.\n        return False\n\nif __name__ == &quot;__main__&quot;:\n    n = 1483\n    isPrime = checkPrime(n)\n    if isPrime:\n        print(n, &quot;is a prime number.&quot;)\n    else:\n        print(n, &quot;is not a prime number.&quot;)\n                                </code>\n                            </pre>\n                        </div>\n                         <div class=\"code-block\" data-lang=\"javascript\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"javascript\" class=\"language-javascript\">\n// Function to check if a\n// given number is prime.\nfunction checkPrime(n) {\n    // Initialize a counter variable to\n    // count the number of factors.\n    let cnt = 0;\n    // Loop through numbers from 1 to n.\n    for (let i = 1; i &lt;= n; i++) {\n        // If n is divisible by i\n        // without any remainder.\n        if (n % i === 0) {\n            // Increment the counter.\n            cnt = cnt + 1;\n        }\n    }\n\n    // If the number of\n    // factors is exactly 2.\n    if (cnt === 2) {\n        // Return true, indicating\n        // that the number is prime.\n        return true;\n    }\n    // If the number of\n    // factors is not 2.\n    else {\n        // Return false, indicating\n        // that the number is not prime.\n        return false;\n    }\n}\n\n// Main function\nfunction main() {\n    let n = 1483;\n    let isPrime = checkPrime(n);\n    if (isPrime) {\n        console.log(n + &quot; is a prime number.&quot;);\n    } else {\n        console.log(n + &quot; is not a prime number.&quot;);\n    }\n}\n\n// Calling the main function\nmain();\n\n                            </code>\n                        </pre>\n                        </div>\n                        <p>\n                           <strong>Output: </strong>1483 is a prime number. </p>\n\n\n                    </div>\n                </details>\n                <details class=\"secondary-details\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Complexity Analysis\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <p>\n                        <p><strong>Time Complexity: O(N)</strong> where N is the input number as we iterate from 1 to N performing constant-time operation for each iteration.</p>\n\n                        <p><strong>Space Complexity : O(1)</strong> as the space used by the algorithm does not increase with the size of the input.</p>\n\n                    </p>\n                </details>\n            </div>\n        </details>\n    </div>\n    <!-- Approach - 1 Ends here -->\n\n\n    <!-- Approach - 2 Starts from here -->\n\n    <div id=\"optimal-approach\">\n        <details>\n            <summary class=\"main-summary\">\n                <span>\n                    Optimal Approach \n                </span>\n                <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                    <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                    </path>\n                </svg>\n            </summary>\n            <div class=\"common-drops\">\n                <details class=\"secondary-details\" open=\"\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Algorithm / Intuition\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <div class=\"approach-algorithm\">\n                        \n                        <p>We can optimise the algorithm by only iterating up to the square root of n when checking for factors. This is because if n has a factor greater than its square root, it must also have a factor smaller than its square root.</p>\n                        <p>This property is symmetric about the square root of n by traversing just the first half we can avoid redundant iteration and computations improving the efficiency of the algorithm. Discusses in detail here:<a href=\"https://takeuforward.org/data-structure/print-all-divisors-of-a-given-number/\">Print All Divisiors</a></p>\n                        <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/prime-image1-VXvmlqqE\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n                        \n                        <p><strong>Algorithm</strong></p>\n                        <p><strong>Step 1: </strong>\n                        Initialise a counter variable cnt to count the number of factors to 0.</p>\n                                                                     \n                        <p><strong>Step 2: </strong>Begin a loop from 1 to the square root of n. This loop iterates through possible factors of n. For each value of i within the loop:\n                        <ol><li>Check if n is divisible by i without any remainder.</li><li>If n is divisible by i, it means i is a factor of n, so increment the counter variable cnt by 1. </li><li>Check if the reciprocal factor of i ie. n/i is not equal to i. If they are not equal, it means there is a distinct factor so increment cnt by 1 again.</li></ol></p>                              \n                        <p><strong>Step 3: </strong>After the loop, cnt will contain the total numbers of factors of n.</p>\n\n                        <p><strong>Step 4: </strong>Check if the value of cnt is exactly 2, it means that n has exactly two distinct factors (1 and itself), indicating that it is a prime number. \n                        <ol><li>If the the number of factors is greater than 2 then it is a composite number, return false. </li></ol></p>\n                        \n                        \n                    </div>\n                </details>\n                <details class=\"code-section secondary-details\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Code\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <div class=\"code-tabs\">\n                        <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n                        <button class=\"code-tab\" data-lang=\"java\">Java</button>\n                        <button class=\"code-tab\" data-lang=\"python\">Python</button>\n                        <button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n                        <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\"\n                            xmlns=\"http://www.w3.org/2000/svg\">\n                            <path\n                                d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n                            </path>\n                        </svg>\n                    </div>\n                    <div class=\"code-content\">\n                        <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n                            <pre class=\"wp-block-code\">\n                                <code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h&gt; \n#include &lt;iostream&gt;\nusing namespace std;\n\n// Function to check if a\n// given number is prime.\nbool checkPrime(int n){ \n\n    // Initialize a counter variable to\n    // count the number of factors.\n    int cnt = 0;\n\n    // Loop through numbers from 1\n    // to the square root of n.\n    for(int i = 1; i &lt;= sqrt(n); i++){ \n\n        // If n is divisible by i\n        // without any remainder.\n        if(n % i == 0){ \n\n            // Increment the counter.\n            cnt = cnt + 1;\n\n            // If n is not a perfect square,\n            // count its reciprocal factor.\n            if(n / i != i){\n                cnt = cnt + 1;\n            }\n        }\n    }\n\n    // If the number of\n    // factors is exactly 2.\n    if(cnt == 2){\n         // Return true, indicating\n         // that the number is prime.\n        return true;\n    }\n    // If the number of\n    // factors is not 2.\n    else{ \n        // Return false, indicating\n        // that the number is not prime.\n        return false; \n    }\n}\n\n\nint main() {\n    int n = 1483;\n    bool isPrime = checkPrime(n);\n    if(isPrime){\n        cout &lt;&lt; n &lt;&lt; &quot; is a prime number.&quot; &lt;&lt; endl;\n    } else {\n        cout &lt;&lt; n &lt;&lt; &quot; is not a prime number.&quot; &lt;&lt; endl;\n    }\n\n    return 0;\n}\n                                </code>\n                            </pre>\n                        </div>\n                        <div class=\"code-block \" data-lang=\"java\">\n                            <pre class=\"wp-block-code\">\n                                <code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\npublic class Main {\n\n    // Function to check if a\n    // given number is prime.\n    static boolean checkPrime(int n){ \n\n        // Initialize a counter variable to\n        // count the number of factors.\n        int cnt = 0;\n\n        // Loop through numbers from 1\n        // to the square root of n.\n        for(int i = 1; i &lt;= Math.sqrt(n); i++){ \n\n            // If n is divisible by i\n            // without any remainder.\n            if(n % i == 0){ \n\n                // Increment the counter.\n                cnt = cnt + 1;\n\n                // If n is not a perfect square,\n                // count its reciprocal factor.\n                if(n / i != i){\n                    cnt = cnt + 1;\n                }\n            }\n        }\n\n        // If the number of\n        // factors is exactly 2.\n        if(cnt == 2){\n             // Return true, indicating\n             // that the number is prime.\n            return true;\n        }\n        // If the number of\n        // factors is not 2.\n        else{ \n            // Return false, indicating\n            // that the number is not prime.\n            return false; \n        }\n    }\n\n    public static void main(String[] args) {\n        int n = 1483;\n        boolean isPrime = checkPrime(n);\n        if(isPrime){\n            System.out.println(n + &quot; is a prime number.&quot;);\n        } else {\n            System.out.println(n + &quot; is not a prime number.&quot;);\n        }\n    }\n}\n                                </code>\n                            </pre>\n                        </div>\n                        <div class=\"code-block\" data-lang=\"python\">\n                            <pre class=\"wp-block-code\">\n                                <code lang=\"python\" class=\"language-python\">\n                     \nimport math\n\n# Function to check if a\n# given number is prime.\ndef checkPrime(n):\n    # Initialize a counter variable to\n    # count the number of factors.\n    cnt = 0\n\n    # Loop through numbers from 1\n    # to the square root of n.\n    for i in range(1, int(math.sqrt(n)) + 1):\n        # If n is divisible by i\n        # without any remainder.\n        if n % i == 0:\n            # Increment the counter.\n            cnt = cnt + 1\n\n            # If n is not a perfect square,\n            # count its reciprocal factor.\n            if n // i != i:\n                cnt = cnt + 1\n\n    # If the number of\n    # factors is exactly 2.\n    if cnt == 2:\n         # Return true, indicating\n         # that the number is prime.\n        return True\n    # If the number of\n    # factors is not 2.\n    else: \n        # Return false, indicating\n        # that the number is not prime.\n        return False\n\n# Main function\ndef main():\n    n = 1483\n    isPrime = checkPrime(n)\n    if isPrime:\n        print(n, &quot;is a prime number.&quot;)\n    else:\n        print(n, &quot;is not a prime number.&quot;)\n\nif __name__ == &quot;__main__&quot;:\n    main()\n\n                                </code>\n                            </pre>\n                        </div>\n                         <div class=\"code-block\" data-lang=\"javascript\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"javascript\" class=\"language-javascript\">\n// Function to check if a\n// given number is prime.\nfunction checkPrime(n) { \n\n    // Initialize a counter variable to\n    // count the number of factors.\n    let cnt = 0;\n\n    // Loop through numbers from 1\n    // to the square root of n.\n    for(let i = 1; i &lt;= Math.sqrt(n); i++) { \n\n        // If n is divisible by i\n        // without any remainder.\n        if(n % i === 0) { \n\n            // Increment the counter.\n            cnt = cnt + 1;\n\n            // If n is not a perfect square,\n            // count its reciprocal factor.\n            if(n / i !== i) {\n                cnt = cnt + 1;\n            }\n        }\n    }\n\n    // If the number of\n    // factors is exactly 2.\n    if(cnt === 2) {\n         // Return true, indicating\n         // that the number is prime.\n        return true;\n    }\n    // If the number of\n    // factors is not 2.\n    else { \n        // Return false, indicating\n        // that the number is not prime.\n        return false; \n    }\n}\n\n// Test the function with a sample number.\nlet n = 1483;\nlet isPrime = checkPrime(n);\nif(isPrime) {\n    console.log(n + &quot; is a prime number.&quot;);\n} else {\n    console.log(n + &quot; is not a prime number.&quot;);\n}\n\n                            </code>\n                        </pre>\n                        </div>\n                        <p>\n                             <strong>Output: </strong>1483 is a prime number. </p>\n\n                                               \n                    </div>\n                </details>\n                <details class=\"secondary-details\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Complexity Analysis\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <p>\n                        <p><strong>Time Complexity: O(sqrt(N))</strong>where N is the input number. The loop iterates up to the square root of n performing constant time operations at each step.</p>\n                        <p><strong>Space Complexity : O(1)</strong> as the space complexity remains constant and independent of the input size. Only a fixed amount of memory is required to store the integer variables.\n\n</p>\n\n\n                    </p>\n                </details>\n            </div>\n        </details>\n    </div>\n</div>\n\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n    <details>\n        <summary class=\"main-summary\">\n            <span>\n                Video Explanation\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"yt-video-wrapper\">\n          <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/MJcckSfoYdI?si=FEk-lYAI-6ZYtOMc\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n        </div>\n    </details>\n</div>\n\n<script src=\"https://takeuforward.org/UXApproachDropDowns/2ApproachJSScript.js\"></script>\n\n<blockquote class=\"wp-block-quote\">\n    Special thanks to <strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268\">Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,<strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\"> please check out this article</a></strong>\n</blockquote>\n\n\n<script>\n\n    const codeSections = document.querySelectorAll('.code-section');\n\n    // Get last selected language from localStorage or set default value\n    let lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp';\n\n    codeSections.forEach((section, sectionIndex) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n        const copyBtn = section.querySelector('.copy-btn');\n\n        codeTabs.forEach((tab) => {\n            tab.addEventListener('click', () => {\n                codeTabs.forEach((t) => {\n                    t.classList.remove('dsa_article_code_active');\n                });\n                tab.classList.add('dsa_article_code_active');\n\n                const lang = tab.dataset.lang;\n                const activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                codeBlocks.forEach((block) => {\n                    if (block === activeBlock) {\n                        block.classList.add('dsa_article_code_active');\n                    } else {\n                        block.classList.remove('dsa_article_code_active');\n                    }\n                });\n\n                // Update last selected language for all sections and store in localStorage\n                lastSelectedLanguage = lang;\n                localStorage.setItem('lastSelectedLanguage', lang);\n                codeSections.forEach((otherSection, otherIndex) => {\n                    if (otherIndex !== sectionIndex) {\n                        const otherTabs = otherSection.querySelectorAll('.code-tab');\n                        otherTabs.forEach((otherTab) => {\n                            if (otherTab.dataset.lang === lang) {\n                                otherTab.classList.add('dsa_article_code_active');\n                            } else {\n                                otherTab.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                        const otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                        const otherCodeBlocks = otherSection.querySelectorAll('.code-block');\n                        otherCodeBlocks.forEach((block) => {\n                            if (block === otherActiveBlock) {\n                                block.classList.add('dsa_article_code_active');\n                            } else {\n                                block.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                    }\n                });\n            });\n        });\n\n        // Handle copy button click event\n        copyBtn.addEventListener('click', () => {\n            const activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\n            navigator.clipboard.writeText(activeBlock.innerText);\n            copyBtn.classList.add('dsa_article_code_active');\n            setTimeout(() => {\n                copyBtn.classList.remove('dsa_article_code_active');\n            }, 1000);\n        });\n    });\n\n    // Set initial state of the tabs\n    codeSections.forEach((section) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n\n        codeTabs.forEach((tab) => {\n            if (tab.dataset.lang === lastSelectedLanguage) {\n                tab.classList.add('dsa_article_code_active');\n            } else {\n                tab.classList.remove('dsa_article_code_active');\n            }\n        });\n\n        codeBlocks.forEach((block) => {\n            if (block.dataset.lang === lastSelectedLanguage) {\n                block.classList.add('dsa_article_code_active');\n            } else {\n                block.classList.remove('dsa_article_code_active');\n            }\n        });\n    });\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>"
}