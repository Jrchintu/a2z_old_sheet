{
    "dislikes": 7,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:09:03 GMT+0530 (India Standard Time)",
    "slug": "reverse-a-linked-list",
    "aid": "1377",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/reverse-a-ll",
    "title": "Reverse a Linked List",
    "topics": [
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "linked-list",
            "topic-title": "Linked List"
        },
        {
            "topic-id": "recursion",
            "topic-title": "Recursion"
        }
    ],
    "category_tag": "data-structure",
    "likes": 258,
    "preview": "Problem Statement: Problem Statement: Given the head of a singly linked list, write a program to reverse the linked list, and return the head pointer to the reversed list. Examples Example 1: Input...",
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement:</strong>  <strong>Problem Statement: </strong>Given the <strong>head</strong> of a singly linked list, write a program to reverse the linked list, and return the <strong>head</strong> pointer to the <strong>reversed</strong> <strong>list</strong>. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n<details class=\"article_example_details\">\n<summary class=\"article_example_summary\">\n<span><strong>\nExamples\n</strong>\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"atricle_example_content\">\n<pre class=\"wp-block-preformatted\"><!-- Insert New Examples Here -->\n<p><strong>Example 1:</strong></p>\n<p><strong>Input Format</strong>:</p>\n<p>LL: 1 &nbsp; 3 &nbsp; 2 &nbsp; 4&nbsp;</p>\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/12/reversell-1024x222.jpg\" alt=\"\" class=\"wp-image-13014\" width=\"768\" height=\"167\"></figure>\n<p><strong>Output</strong>: 3</p>\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/12/reversell3-1024x231.jpg\" alt=\"\" class=\"wp-image-13015\" width=\"768\" height=\"173\"></figure>\n<p><strong>Explanation</strong>: After reversing the linked list, the new head will point to the tail of the old linked list.</p>\n<p><strong>Example 2:</strong></p>\n<p><strong>Input Format:</strong></p>\n<p>LL: 4</p>\n<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/12/Screenshot-2023-12-17-at-7.41.42-PM.png\" alt=\"\" class=\"wp-image-13029\" width=\"766\" height=\"170\"></figure>\n<p><strong>Output: </strong>4</p>\n<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/12/Screenshot-2023-12-17-at-7.41.42-PM-1.png\" alt=\"\" class=\"wp-image-13030\" width=\"766\" height=\"170\"></figure>\n<p><strong>Explanation</strong>: In this example, the linked list contains only one node hence reversing this linked list will result in the same list as the original.</p>\n</pre>\n\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Practice Section-->\n<div class=\"practice\">\n<span><strong>Practice: </strong></span>\n<div class=\"problem-buttons\">\n\n<!-- Add Problem Link inside href -->\n<a href=\"https://tinyurl.com/2ajt9262\" target=\"_blank\" rel=\"noopener\">\n<span>Solve Problem</span>\n<img src=\"https://static.takeuforward.org/wp/uploads/2023/04/Group-11-5.png\" alt=\"code-studio\">\n</a>\n</div>\n</div>\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\nyourself first. </em></p>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<div class=\"horizontal_navbar_dsa_article\">\n<div class=\"grid_container_three\">\n<a href=\"#brute-force-approach\" class=\"three-boxes box-a\">\nBrute Force approach\n</a>\n<a href=\"#better-approach\" class=\"three-boxes box-b\">\nOptimal Solution 1\n</a>\n<a href=\"#optimal-approach\" class=\"three-boxes box-c\">\nOptimal Solution 2\n</a>\n<a href=\"#dsa_article_video_explanation\" class=\"three-boxes box-d\">\n<svg width=\"26\" height=\"26\" viewBox=\"0 0 20 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M8 10L13.19 7L8 4V10ZM19.56 2.17C19.69 2.64 19.78 3.27 19.84 4.07C19.91 4.87 19.94 5.56 19.94 6.16L20 7C20 9.19 19.84 10.8 19.56 11.83C19.31 12.73 18.73 13.31 17.83 13.56C17.36 13.69 16.5 13.78 15.18 13.84C13.88 13.91 12.69 13.94 11.59 13.94L10 14C5.81 14 3.2 13.84 2.17 13.56C1.27 13.31 0.69 12.73 0.44 11.83C0.31 11.36 0.22 10.73 0.16 9.93C0.0900001 9.13 0.0599999 8.44 0.0599999 7.84L0 7C0 4.81 0.16 3.2 0.44 2.17C0.69 1.27 1.27 0.69 2.17 0.44C2.64 0.31 3.5 0.22 4.82 0.16C6.12 0.0899998 7.31 0.0599999 8.41 0.0599999L10 0C14.19 0 16.8 0.16 17.83 0.44C18.73 0.69 19.31 1.27 19.56 2.17Z\" fill=\"red\"></path>\n</svg>\n\n</a>\n<div class=\"box-e tooltip\">\n<svg viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M12.842 9.25L11.9577 10.17C11.2502 10.89 10.8081 11.5 10.8081 13H8.84297V12.5C8.84297 11.39 9.28511 10.39 9.99255 9.67L11.2109 8.41C11.5745 8.05 11.7906 7.55 11.7906 7C11.7906 6.46957 11.5836 5.96086 11.2151 5.58579C10.8465 5.21071 10.3467 5 9.82552 5C9.30434 5 8.80451 5.21071 8.43598 5.58579C8.06745 5.96086 7.86041 6.46957 7.86041 7H5.89531C5.89531 5.93913 6.30938 4.92172 7.04644 4.17157C7.7835 3.42143 8.78316 3 9.82552 3C10.8679 3 11.8675 3.42143 12.6046 4.17157C13.3417 4.92172 13.7557 5.93913 13.7557 7C13.7543 7.84324 13.4259 8.65183 12.842 9.25ZM10.8081 17H8.84297V15H10.8081M9.82552 0C8.53521 0 7.25754 0.258658 6.06545 0.761205C4.87337 1.26375 3.79021 2.00035 2.87783 2.92893C1.03519 4.8043 0 7.34784 0 10C0 12.6522 1.03519 15.1957 2.87783 17.0711C3.79021 17.9997 4.87337 18.7362 6.06545 19.2388C7.25754 19.7413 8.53521 20 9.82552 20C12.4314 20 14.9306 18.9464 16.7732 17.0711C18.6158 15.1957 19.651 12.6522 19.651 10C19.651 4.47 15.2296 0 9.82552 0Z\" fill=\"black\"></path>\n</svg>\n<div class=\"bottom\">\n<p>Expand any one approach by clicking the given options in the bar. Clicking one approach on bar,\ncloses all other expands. You can manually expand more than one approach at a time</p>\n<i></i>\n</div>\n\n</div>\n</div>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Approaches Drop-Down -->\n<div class=\"dsa_article_dropdown_approachs \">\n\n<!-- Brute Force Approach Starts from here -->\n<div id=\"brute-force-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nBrute Force Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n<h3><strong>Approach 1 : Brute Force&nbsp;</strong></h3>\n<p>A straightforward approach to reversing a singly linked list requires an <strong>additional</strong> <strong>data</strong> <strong>structure</strong> to temporarily store the values. We can use a <strong>stack</strong> for this. By pushing each node onto the stack as we move through the list, we effectively <strong>reverse</strong> <strong>the</strong> <strong>order</strong> of the nodes. Once all the nodes are stored in the <strong>stack</strong>, we rebuild the reversed linked list by <strong>popping nodes</strong> from the stack and <strong>assigning</strong> them to the nodes. The result is a new linked list with the elements in the <strong>opposite</strong> <strong>order</strong> of the original list.</p>\n<h3><strong>Algorithm:</strong></h3>\n<p><strong>Step 1:</strong> Create an empty stack. This stack will be used to temporarily store the nodes from the original linked list as we traverse it.</p>\n<p><strong>Step 2: </strong>Traverse the linked list using a temporary variable <strong>`temp`</strong> till it reaches null. At each node, push the value at the current node onto the stack.&nbsp;</p>\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/12/reverse-ll-a1-s2-1024x927.jpg\" alt=\"\" class=\"wp-image-13016\" width=\"768\" height=\"695\"></figure>\n<p><strong>Step 3: </strong>Set variable <strong>`temp`</strong> back to the head of the linked list. While the stack is not empty, set the <strong>value</strong> at the <strong>temp</strong> node to the value at the<strong> top</strong> of the stack. <strong>Pop</strong> the stack and move <strong>temp</strong> to the <strong>next</strong> <strong>node</strong> till it reaches null.</p>\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/12/reverse-ll-a1-s3-1024x927.jpg\" alt=\"\" class=\"wp-image-13017\" width=\"768\" height=\"695\"></figure>\n<p><strong>Step 4: </strong>Return the <strong>head</strong> as the new head of the <strong>reversed</strong> linked list.</p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;iostream&gt;\n#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\n// Node class represents a\n// node in a linked list\nclass Node {\npublic:\n    // Data stored in the node\n    int data;   \n    \n    // Pointer to the next node in the list\n    Node* next;      \n\n    // Constructor with both data and\n    // next node as parameters\n    Node(int data1, Node* next1) {\n        data = data1;\n        next = next1;\n    }\n\n    // Constructor with only data as a\n    // parameter, sets next to nullptr\n    Node(int data1) {\n        data = data1;\n        next = nullptr;\n    }\n};\n\n// Function to reverse the\n// linked list using a stack\nNode* reverseLinkedList(Node* head) {\n    // Create a temporary pointer\n    // to traverse the linked list\n    Node* temp = head;  \n    \n    // Create a stack to temporarily\n    // store the data values\n    stack&lt;int&gt; st;     \n\n    // Step 1: Push the values of the\n    // linked list onto the stack\n    while (temp != nullptr) {\n        // Push the current node's\n        // data onto the stack\n        st.push(temp-&gt;data); \n        \n        // Move to the next node\n        // in the linked list\n        temp = temp-&gt;next;    \n    }\n    \n    // Reset the temporary pointer to\n    // the head of the linked list\n    temp = head; \n    \n    // Step 2: Pop values from the stack\n    // and update the linked list\n    while (temp != nullptr) {\n        // Set the current node's data to\n        // the value at the top of the stack\n        temp-&gt;data = st.top();  \n        \n        // Pop the top element from the stack\n        st.pop();              \n        \n        // Move to the next node\n        // in the linked list\n        temp = temp-&gt;next;     \n    }\n    \n    // Return the new head of\n    // the reversed linked list\n    return head;  \n}\n\n// Function to print the linked list\nvoid printLinkedList(Node* head) {\n    Node* temp = head;\n    while (temp != nullptr) {\n        cout &lt;&lt; temp-&gt;data &lt;&lt; \" \";\n        temp = temp-&gt;next;\n    }\n    cout &lt;&lt; endl;\n}\n\nint main() {\n    // Create a linked list with\n    // values 1, 3, 2, and 4\n    Node* head = new Node(1);\n    head-&gt;next = new Node(3);\n    head-&gt;next-&gt;next = new Node(2);\n    head-&gt;next-&gt;next-&gt;next = new Node(4);\n\n    // Print the original linked list\n    cout &lt;&lt; \"Original Linked List: \";\n    printLinkedList(head);\n\n    // Reverse the linked list\n    head = reverseLinkedList(head);\n\n    // Print the reversed linked list\n    cout &lt;&lt; \"Reversed Linked List: \";\n    printLinkedList(head);\n\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.Stack;\n\n// Node class represents a\n// node in a linked list\nclass Node {\n    // Data stored in the node\n    int data;      \n    // Pointer to the next\n    // node in the list\n    Node next;     \n\n    // Constructor with both data\n    // and next node as parameters\n    Node(int data, Node next) {\n        this.data = data;\n        this.next = next;\n    }\n\n    // Constructor with only data as\n    // a parameter, sets next to null\n    Node(int data) {\n        this.data = data;\n        this.next = null;\n    }\n}\n\npublic class ReverseLinkedListUsingStack {\n\n    // Function to reverse the\n    // linked list using a stack\n    public static Node reverseLinkedList(Node head) {\n        // Create a temporary pointer to\n        // traverse the linked list\n        Node temp = head;       \n        \n        // Create a stack to temporarily\n        //store the data values\n        Stack&lt;Integer&gt; stack = new Stack&lt;&gt;();  \n\n        // Step 1: Push the values of the\n        // linked list onto the stack\n        while (temp != null) {\n             // Push the current node's\n             // data onto the stack\n            stack.push(temp.data); \n             // Move to the next node\n             // in the linked list\n            temp = temp.next;      \n        }\n         // Reset the temporary pointer\n         // to the head of the linked list\n        temp = head;  \n\n        // Step 2: Pop values from the stack\n        // and update the linked list\n        while (temp != null) {\n            // Set the current node's data\n            // to the value at the top of the stack\n            temp.data = stack.pop();  \n            // Move to the next node\n            // in the linked list\n            temp = temp.next;         \n        }\n        // Return the new head of\n        // the reversed linked list\n        return head;  \n    }\n\n    // Function to print the linked list\n    public static void printLinkedList(Node head) {\n        Node temp = head;\n        while (temp != null) {\n            System.out.print(temp.data + \" \");\n            temp = temp.next;\n        }\n        System.out.println();\n    }\n\n    public static void main(String[] args) {\n        // Create a linked list with values 1, 3, 2, and 4\n        Node head = new Node(1);\n        head.next = new Node(3);\n        head.next.next = new Node(2);\n        head.next.next.next = new Node(4);\n\n        // Print the original linked list\n        System.out.print(\"Original Linked List: \");\n        printLinkedList(head);\n\n        // Reverse the linked list\n        head = reverseLinkedList(head);\n\n        // Print the reversed linked list\n        System.out.print(\"Reversed Linked List: \");\n        printLinkedList(head);\n    }\n}\n\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\nclass Node:\n    def __init__(self, data, next_node=None):\n        self.data = data\n        self.next = next_node\n\n# Function to reverse the\n# linked list using a stack\ndef reverse_linked_list(head):\n    # Create a temporary pointer\n    # to traverse the linked list\n    temp = head  \n    \n    # Create a stack to temporarily\n    # store the data values\n    stack = []   \n\n    # Step 1: Push the values of the\n    # linked list onto the stack\n    while temp is not None:\n        # Push the current node's\n        # data onto the stack\n        stack.append(temp.data) \n        # Move to the next node\n        # in the linked list\n        temp = temp.next        \n\n    # Reset the temporary pointer\n    # to the head of the linked list\n    temp = head  \n\n    # Step 2: Pop values from the stack\n    # and update the linked list\n    while temp is not None:\n        \n        # Set the current node's data to\n        # the value at the top of the stack\n        temp.data = stack.pop()  \n        \n         # Move to the next node in\n         # the linked list\n        temp = temp.next        \n\n    # Return the new head of\n    # the reversed linked list\n    return head  \n\n# Function to print the linked list\ndef print_linked_list(head):\n    temp = head\n    while temp is not None:\n        print(temp.data, end=\" \")\n        temp = temp.next\n    print()\n\n# Create a linked list with\n# values 1, 3, 2, and 4\nhead = Node(1)\nhead.next = Node(3)\nhead.next.next = Node(2)\nhead.next.next.next = Node(4)\n\n# Print the original linked list\nprint(\"Original Linked List:\", end=\" \")\nprint_linked_list(head)\n\n# Reverse the linked list\nhead = reverse_linked_list(head)\n\n# Print the reversed linked list\nprint(\"Reversed Linked List:\", end=\" \")\nprint_linked_list(head)\n\n\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\nclass Node:\n    def __init__(self, data, next_node=None):\n        self.data = data\n        self.next = next_node\n\n# Function to reverse the\n# linked list using a stack\ndef reverse_linked_list(head):\n    # Create a temporary pointer\n    # to traverse the linked list\n    temp = head  \n    \n    # Create a stack to temporarily\n    # store the data values\n    stack = []   \n\n    # Step 1: Push the values of the\n    # linked list onto the stack\n    while temp is not None:\n        # Push the current node's\n        # data onto the stack\n        stack.append(temp.data) \n        # Move to the next node\n        # in the linked list\n        temp = temp.next        \n\n    # Reset the temporary pointer\n    # to the head of the linked list\n    temp = head  \n\n    # Step 2: Pop values from the stack\n    # and update the linked list\n    while temp is not None:\n        \n        # Set the current node's data to\n        # the value at the top of the stack\n        temp.data = stack.pop()  \n        \n         # Move to the next node in\n         # the linked list\n        temp = temp.next        \n\n    # Return the new head of\n    # the reversed linked list\n    return head  \n\n# Function to print the linked list\ndef print_linked_list(head):\n    temp = head\n    while temp is not None:\n        print(temp.data, end=\" \")\n        temp = temp.next\n    print()\n\n# Create a linked list with\n# values 1, 3, 2, and 4\nhead = Node(1)\nhead.next = Node(3)\nhead.next.next = Node(2)\nhead.next.next.next = Node(4)\n\n# Print the original linked list\nprint(\"Original Linked List:\", end=\" \")\nprint_linked_list(head)\n\n# Reverse the linked list\nhead = reverse_linked_list(head)\n\n# Print the reversed linked list\nprint(\"Reversed Linked List:\", end=\" \")\nprint_linked_list(head)\n\n</code>\n</pre>\n</div>\n\n<p>\n<!-- Insert Output of Brute Force Here -->\n<strong>Output:</strong> Original Linked List: 1 3 2 4&nbsp;Reversed Linked List: 4 2 3 1&nbsp;\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n<!-- Insert Time and Space Complexity of Brute Force Here -->\n</p><p><strong>Time Complexity: O(2N)</strong> This is because we <strong>traverse</strong> the linked list <strong>twice</strong>: once to push the values onto the stack, and once to pop the values and update the linked list. Both traversals take O(N) time, hence time complexity&nbsp; O(2N) ~ O(N).</p>\n<p><strong>Space Complexity: O(N) </strong>We use a <strong>stack</strong> to store the values of the linked list, and in the worst case, the stack will have all <strong>N</strong> <strong>values, </strong>&nbsp;ie. storing the complete linked list.&nbsp;</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Brute Force Approach Ends here -->\n\n\n<!-- Better Approach Starts from here -->\n\n<div id=\"better-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nOptimal Approach 1\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition For Better Approach Here -->\n<p><strong>Approach 2: Reverse Links in place (Iterative)</strong></p>\n<p>The previous approach uses O(N) addition space which can be avoided by interchanging the connecting links of the nodes of the linked list in place.</p>\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/12/reversell-inplace-1024x375.png\" alt=\"\" class=\"wp-image-13018\" width=\"768\" height=\"281\"></figure>\n<p>The main idea is to <strong>flip</strong> the order of connections in the linked list, which changes the <strong>direction</strong> of the <strong>arrows</strong>. When this happens, the <strong>last</strong> <strong>element</strong> becomes the <strong>new</strong> <strong>first</strong> <strong>element</strong> of the list. This <strong>in-place reversal</strong> allows us to efficiently transform the original list <strong>without using extra space.</strong></p>\n<p><strong>Algorithm:</strong></p>\n<p><strong>Step 1: </strong>Initialise a \u2018<strong>temp\u2019 </strong>pointer at the head of the linked list. This pointer will be used to traverse the linked list. And initialize the pointer <strong>\u2018prev\u2019</strong> to <strong>\u2018NULL\u2019 </strong>to keep track of the previous node. This will be used to reverse the direction of the <strong>\u2018next\u2019</strong> pointers.</p>\n<figure class=\"wp-block-image size-large\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/12/reversell-a2-s1-1024x251.png\" alt=\"\" class=\"wp-image-13019\"></figure>\n<p><strong>Step 2: Traverse</strong> the entire linked list by moving through each node using the <strong>'temp'</strong> pointer until it reaches the end (marked as <strong>'NULL'</strong>).</p>\n<p>At each iteration within the traversal,</p>\n<ol><li>Save the reference to the next node that <strong>'temp'</strong> is pointing to in a variable called <strong>'front'</strong>. This helps retain the link to the subsequent node before altering the <strong>'next'</strong> pointer.</li></ol>\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/12/Copy-of-Screenshot-2023-12-01-at-12.07.02-AM-1024x323.png\" alt=\"\" class=\"wp-image-13020\" width=\"768\" height=\"242\"></figure>\n<ol start=\"2\"><li>Reverse the direction of the <strong>\u2018next\u2019 </strong>pointer of the current node (pointed to by <strong>\u2018temp\u2019</strong>) to point to the <strong>\u2018prev\u2019</strong> node. This effectively reversed the direction of the linked list, making the current node point to the previous node.&nbsp;</li></ol>\n<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/12/Screenshot-2023-12-17-at-7.39.34-PM.png\" alt=\"\" class=\"wp-image-13028\" width=\"748\" height=\"232\"></figure>\n<ol start=\"3\"><li>Move the <strong>\u2018prev\u2019</strong> pointer to the current node. This sets up the <strong>\u2018prev\u2019</strong> pointer for the next iteration of the loop.</li><li>Move the <strong>\u2018temp\u2019</strong> pointer to the <strong>\u2018front\u2019</strong> node. This advances the traversal to the next node in the original order.</li></ol>\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/12/Screenshot-2023-12-01-at-12.10.47-AM-1024x323.png\" alt=\"\" class=\"wp-image-13021\" width=\"768\" height=\"242\"></figure>\n<p>In summary:</p>\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/12/ll-reverse-a2-s2-897x1024.jpg\" alt=\"\" class=\"wp-image-13022\" width=\"673\" height=\"768\"></figure>\n<p><strong>Step 3: </strong>Keep traversing through the linked list using the <strong>'temp'</strong> pointer until it reaches the <strong>end</strong>, thereby reversing the entire list. Once the <strong>'temp'</strong> pointer reaches the end, return the <strong>new</strong> <strong>head</strong> of the reversed linked list, which is now indicated by the <strong>'prev'</strong> pointer. This <strong>'prev'</strong> pointer becomes the first node in the newly reversed list.</p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n\n#include &lt;iostream&gt;\n#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\n// Node class represents a\n// node in a linked list\nclass Node {\npublic:\n    // Data stored in the node\n    int data;   \n    \n    // Pointer to the next node in the list\n    Node* next;      \n\n    // Constructor with both data and\n    // next node as parameters\n    Node(int data1, Node* next1) {\n        data = data1;\n        next = next1;\n    }\n\n    // Constructor with only data as a\n    // parameter, sets next to nullptr\n    Node(int data1) {\n        data = data1;\n        next = nullptr;\n    }\n};\n\n// Function to reverse a linked list\n// using the 3-pointer approach\nNode* reverseLinkedList(Node *head)\n{\n   // Initialize'temp' at\n   // head of linked list\n   Node* temp = head;  \n   \n   // Initialize pointer 'prev' to NULL,\n   // representing the previous node\n   Node* prev = NULL;  \n   \n   // Traverse the list, continue till\n   // 'temp' reaches the end (NULL)\n   while(temp != NULL){  \n       // Store the next node in\n       // 'front' to preserve the reference\n       Node* front = temp-&gt;next;  \n       \n       // Reverse the direction of the\n       // current node's 'next' pointer\n       // to point to 'prev'\n       temp-&gt;next = prev;  \n       \n        // Move 'prev' to the current\n        // node for the next iteration\n       prev = temp;  \n       \n        // Move 'temp' to the 'front' node\n        // advancing the traversal\n       temp = front; \n   }\n   \n   // Return the new head of\n   // the reversed linked list\n   return prev;  \n}\n\n// Function to print the linked list\nvoid printLinkedList(Node* head) {\n    Node* temp = head;\n    while (temp != nullptr) {\n        cout &lt;&lt; temp-&gt;data &lt;&lt; \" \";\n        temp = temp-&gt;next;\n    }\n    cout &lt;&lt; endl;\n}\n\nint main() {\n    // Create a linked list with\n    // values 1, 3, 2, and 4\n    Node* head = new Node(1);\n    head-&gt;next = new Node(3);\n    head-&gt;next-&gt;next = new Node(2);\n    head-&gt;next-&gt;next-&gt;next = new Node(4);\n\n    // Print the original linked list\n    cout &lt;&lt; \"Original Linked List: \";\n    printLinkedList(head);\n\n    // Reverse the linked list\n    head = reverseLinkedList(head);\n\n    // Print the reversed linked list\n    cout &lt;&lt; \"Reversed Linked List: \";\n    printLinkedList(head);\n\n    return 0;\n}\n\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\nimport java.util.Stack;\n\n// Node class represents a\n// node in a linked list\nclass Node {\n    // Data stored in the node\n    int data;      \n    // Pointer to the next\n    // node in the list\n    Node next;     \n\n    // Constructor with both data\n    // and next node as parameters\n    Node(int data, Node next) {\n        this.data = data;\n        this.next = next;\n    }\n\n    // Constructor with only data as\n    // a parameter, sets next to null\n    Node(int data) {\n        this.data = data;\n        this.next = null;\n    }\n}\n// Function to reverse a linked list\n// using the 3-pointer approach\npublic class ReverseLinkedListUsingStack(Node head) {\n\n   // Initialize'temp' at\n   // head of linked list\n   Node temp = head;  \n   \n   // Initialize pointer 'prev' to NULL,\n   // representing the previous node\n   Node prev = null;  \n   \n   // Traverse the list, continue till\n   // 'temp' reaches the end (NULL)\n   while(temp != null){  \n       // Store the next node in\n       // 'front' to preserve the reference\n       Node front = temp.next;  \n       \n       // Reverse the direction of the\n       // current node's 'next' pointer\n       // to point to 'prev'\n       temp.next = prev;  \n       \n        // Move 'prev' to the current\n        // node for the next iteration\n       prev = temp;  \n       \n        // Move 'temp' to the 'front' node\n        // advancing the traversal\n       temp = front; \n   }\n   \n   // Return the new head of\n   // the reversed linked list\n   return prev;  \n\n    }\n\n    // Function to print the linked list\n    public static void printLinkedList(Node head) {\n        Node temp = head;\n        while (temp != null) {\n            System.out.print(temp.data + \" \");\n            temp = temp.next;\n        }\n        System.out.println();\n    }\n\n    public static void main(String[] args) {\n        // Create a linked list with values 1, 3, 2, and 4\n        Node head = new Node(1);\n        head.next = new Node(3);\n        head.next.next = new Node(2);\n        head.next.next.next = new Node(4);\n\n        // Print the original linked list\n        System.out.print(\"Original Linked List: \");\n        printLinkedList(head);\n\n        // Reverse the linked list\n        head = reverseLinkedList(head);\n\n        // Print the reversed linked list\n        System.out.print(\"Reversed Linked List: \");\n        printLinkedList(head);\n    }\n}\n\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\nclass Node:\n    def __init__(self, data, next_node=None):\n        self.data = data\n        self.next = next_node\n\n# Function to reverse linked list\n# using 3 pointer approach\ndef reverseLinkedList(head):\n    \n    # Initialize 'temp' at the\n    # head of the linked list\n    temp = head\n    \n    # Initialize 'prev' to None,\n    # representing the previous node \n    prev = None\n    \n    while temp is not None:\n        # Store the next node in 'front'\n        # to preserve the reference\n        front = temp.next\n        # Reverse the direction of the current\n        # node's 'next' pointer to point to 'prev'\n        temp.next = prev\n        # Move 'prev' to the current \n        # node, for the next iteration\n        prev = temp\n        # Move 'temp' to 'front' node\n        # advancing traversal\n        temp = front\n\n    # Return the new head\n    # of the reversed linked list\n    return prev\n    \n# Function to print the linked list\ndef print_linked_list(head):\n    temp = head\n    while temp is not None:\n        print(temp.data, end=\" \")\n        temp = temp.next\n    print()\n\n# Create a linked list with\n# values 1, 3, 2, and 4\nhead = Node(1)\nhead.next = Node(3)\nhead.next.next = Node(2)\nhead.next.next.next = Node(4)\n\n# Print the original linked list\nprint(\"Original Linked List:\", end=\" \")\nprint_linked_list(head)\n\n# Reverse the linked list\nhead = reverse_linked_list(head)\n\n# Print the reversed linked list\nprint(\"Reversed Linked List:\", end=\" \")\nprint_linked_list(head)\n\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\nclass Node {\n  constructor(data, next = null) {\n    this.data = data;\n    this.next = next;\n  }\n}\n\n// Function to reverse a linked list\n// using the 3-pointer approach\nfunction reverseLinkedList(head) {\n    \n    // Initialize pointer 'temp' at\n    // head of the linked list\n    let temp = head;  \n    \n    // Initialize a pointer 'prev' to null\n    // representing the previous node\n    // (initially none)\n    let prev = null;  \n\n    // Traversing the list, continue until\n    // 'temp' reaches the end (null)\n    while (temp !== null) {  \n        // Store the next node in\n        // 'front' to preserve the reference\n        let front = temp.next;  \n        \n        // Reverse direction of current node's\n        // 'next' pointer to point to 'prev'\n        temp.next = prev;  \n        \n        // Move 'prev' to the current node,\n        // preparing it for the next iteration\n        prev = temp;\n        \n        // Move 'temp' to the 'front' node\n        // (the next node), advancing traversal\n        temp = front;  \n    }\n\n    // Return the new head of\n    // the reversed linked list\n    return prev;  \n}\n\n// Function to print the linked list\nfunction printLinkedList(head) {\n  let temp = head;\n  while (temp !== null) {\n    process.stdout.write(temp.data + ' ');\n    temp = temp.next;\n  }\n  console.log();\n}\n\n// Create a linked list with\n// values 1, 3, 2, and 4\nconst head = new Node(1);\nhead.next = new Node(3);\nhead.next.next = new Node(2);\nhead.next.next.next = new Node(4);\n\n// Print the original linked list\nprocess.stdout.write('Original Linked List: ');\nprintLinkedList(head);\n\n// Reverse the linked list\nreverseLinkedList(head);\n\n// Print the reversed linked list\nprocess.stdout.write('Reversed Linked List: ');\nprintLinkedList(head);\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Better Approach Here -->\n<strong>Output:</strong> Original Linked List: 1 3 2 4&nbsp;Reversed Linked List: 4 2 3 1\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Better Approach Here -->\n</p><p><strong>Time Complexity: O(N) </strong>The code <strong>traverses</strong> the <strong>entire</strong> <strong>linked</strong> <strong>list</strong> once, where 'n' is the number of nodes in the list. This traversal has a <strong>linear</strong> <strong>time</strong> <strong>complexity</strong>, O(n).</p>\n<p><strong>Space Complexity: O(1)</strong> The code uses only a <strong>constant</strong> <strong>amount</strong> of <strong>additional</strong> <strong>space</strong>, regardless of the linked list's length. This is achieved by using three pointers (<strong>prev, temp</strong> and <strong>front</strong>) to reverse the list without any significant extra memory usage, resulting in <strong>constant</strong> <strong>space</strong> complexity, O(1).</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Better Approach Ends from here -->\n\n\n<!-- Optimal Approach Starts from here -->\n\n<div id=\"optimal-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nOptimal Approach II\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm of Optimal Approach Here -->\n<h3><strong>Approach 3: Recursive&nbsp;</strong></h3>\n<p>Before moving on to this approach, make sure your concepts on the basics of Recursion are crystal clear. Refer to <a href=\"https://takeuforward.org/recursion/introduction-to-recursion-understand-recursion-by-printing-something-n-times/\">Introduction to Recursion</a><strong> </strong>to brush up.</p>\n<p>Recursion gives the ability to<strong> break</strong> <strong>down</strong> a problem statement into <strong>small</strong> <strong>problems</strong> that can be solved <strong>incrementally</strong>. It keeps solving these smaller problems until it reaches the smallest possible solution, often referred to as the base case, from where it can start combining the results of those smaller solutions to ultimately solve the original, larger problem.</p>\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/12/Screenshot-2023-12-01-at-12.22.31-AM-1024x644.png\" alt=\"\" class=\"wp-image-13023\" width=\"768\" height=\"483\"></figure>\n<p>In this case, tackling the <strong>larger</strong> <strong>problem</strong> involves reversing a linked list with N = 4 nodes. <strong>Recursion</strong> allows us to break this task down into <strong>progressively</strong> <strong>smaller</strong> <strong>subproblems</strong>, starting with the case of 3 nodes, then the last 2 nodes, and ultimately reaching the base case where only 1 node remains. In the <strong>base</strong> <strong>case</strong>, reversing the linked list is straightforward, as a list with just one node is already in its reversed form, and we can simply return it as is.</p>\n<p><strong>Algorithm</strong>:</p>\n<p><strong>Base Case</strong>:<br>Check if the linked list is empty or contains only one node. Return the head as it's already reversed in these cases.</p>\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/12/Screenshot-2023-12-01-at-8.51.55-PM-1024x402.png\" alt=\"\" class=\"wp-image-13024\" width=\"768\" height=\"302\"></figure>\n<p><strong>Recursive Function:</strong><strong><br></strong>The core of the algorithm lies in implementing a recursive function responsible for reversing the linked list. This function operates based on the following principle:</p>\n<p>If the base case conditions are not met, the function <strong>invokes</strong> <strong>itself</strong> <strong>recursively</strong>. This <strong>recursion</strong> continues until it reaches the base case, gradually reversing the linked list starting from the <strong>second</strong> <strong>node </strong>(node after it) onward.</p>\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/12/Screenshot-2023-12-01-at-9.06.55-PM-1024x655.png\" alt=\"\" class=\"wp-image-13025\" width=\"768\" height=\"491\"></figure>\n<p><strong>Return<br><br></strong>Following the recursion, the function <strong>returns</strong> the <strong>new</strong> <strong>head</strong> of the reversed linked list. This head marks the <strong>last</strong> <strong>node</strong> of the original list before reversal, now the <strong>first</strong> <strong>node</strong> in the <strong>reversed</strong> <strong>sequence</strong>.</p>\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/12/Screenshot-2023-12-01-at-9.08.54-PM-1024x511.png\" alt=\"\" class=\"wp-image-13026\" width=\"768\" height=\"383\"></figure>\n<p><strong>Steps:</strong></p>\n<p><strong>Step 1: Establish Base Case Conditions: </strong>Check if the linked list is either empty or contains only one node. If so, the list is already reversed; hence, return the head as is.</p>\n<p><strong>Step 2: Recursively Reverse the List: </strong>Begin the recursive step by reversing the linked list, starting from the second node. Utilise a recursive call to the reverse linked list function, passing the next node as an argument.</p>\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/12/Screenshot-2023-12-01-at-10.18.26-PM-1024x421.png\" alt=\"\" class=\"wp-image-13027\" width=\"768\" height=\"316\"></figure>\n<p><strong>Step 3: Preserve Access to Remaining Nodes: </strong>To maintain access to the rest of the linked list while reversing the order, store a reference to the node following the current 'head' node. This step ensures continuity in the link sequence during reversal.</p>\n<p><strong>Step 4: Reverse Link Direction: </strong>Adjust the 'front' node to point to the current 'head' node in the reversed order. This action effectively reverses the link between the 'head' node and the 'front' node.</p>\n<p><strong>Step 5: Prevent Cyclic References: </strong>Break the link from the current 'head' node to the 'front' node to prevent any cyclic formations. Set 'head-&gt;next' to 'NULL' to ensure the reversed segment of the list does not create a loop.</p>\n<p><strong>Step 6: Return the New Head: </strong>Finally, return the 'newHead,' which signifies the new head of the reversed linked list. This 'newHead' was initially the last node in the list before the reversal commenced.</p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;iostream&gt;\n#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\n// Node class represents a\n// node in a linked list\nclass Node {\npublic:\n    // Data stored in the node\n    int data;   \n    \n    // Pointer to the next node in the list\n    Node* next;      \n\n    // Constructor with both data and\n    // next node as parameters\n    Node(int data1, Node* next1) {\n        data = data1;\n        next = next1;\n    }\n\n    // Constructor with only data as a\n    // parameter, sets next to nullptr\n    Node(int data1) {\n        data = data1;\n        next = nullptr;\n    }\n};\n\n// Function to reverse a singly\n// linked list using a recursion\n\nNode* reverseLinkedList(Node* head) {\n    // Base case:\n    // If the linked list is empty or has only one node,\n    // return the head as it is already reversed.\n    if (head == NULL || head-&gt;next == NULL) {\n        return head;\n    }\n    \n    // Recursive step:\n    // Reverse the linked list starting \n    // from the second node (head-&gt;next).\n    Node* newHead = reverseLinkedList(head-&gt;next);\n    \n    // Save a reference to the node following\n    // the current 'head' node.\n    Node* front = head-&gt;next;\n    \n    // Make the 'front' node point to the current\n    // 'head' node in the reversed order.\n    front-&gt;next = head;\n    \n    // Break the link from the current 'head' node\n    // to the 'front' node to avoid cycles.\n    head-&gt;next = NULL;\n    \n    // Return the 'newHead,' which is the new\n    // head of the reversed linked list.\n    return newHead;\n}\n\n\n// Function to print the linked list\nvoid printLinkedList(Node* head) {\n    Node* temp = head;\n    while (temp != nullptr) {\n        cout &lt;&lt; temp-&gt;data &lt;&lt; \" \";\n        temp = temp-&gt;next;\n    }\n    cout &lt;&lt; endl;\n}\n\nint main() {\n    // Create a linked list with\n    // values 1, 3, 2, and 4\n    Node* head = new Node(1);\n    head-&gt;next = new Node(3);\n    head-&gt;next-&gt;next = new Node(2);\n    head-&gt;next-&gt;next-&gt;next = new Node(4);\n\n    // Print the original linked list\n    cout &lt;&lt; \"Original Linked List: \";\n    printLinkedList(head);\n\n    // Reverse the linked list\n    head = reverseLinkedList(head);\n\n    // Print the reversed linked list\n    cout &lt;&lt; \"Reversed Linked List: \";\n    printLinkedList(head);\n\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\nimport java.util.Stack;\n\n// Node class represents a\n// node in a linked list\nclass Node {\n    // Data stored in the node\n    int data;      \n    // Pointer to the next\n    // node in the list\n    Node next;     \n\n    // Constructor with both data\n    // and next node as parameters\n    Node(int data, Node next) {\n        this.data = data;\n        this.next = next;\n    }\n\n    // Constructor with only data as\n    // a parameter, sets next to null\n    Node(int data) {\n        this.data = data;\n        this.next = null;\n    }\n}\n\npublic class ReverseLinkedListUsingStack {\n\n\n    // Function to reverse a singly\n    // linked list using a recursion\n    public static Node reverseLinkedList(Node head) {\n        // Base case:\n        // If the linked list is empty or has only one node,\n        // return the head as it is already reversed.\n        if (head == null || head.next == null) {\n            return head;\n        }\n        \n        // Recursive step:\n        // Reverse the linked list starting\n        // from the second node (head.next).\n        Node newHead = reverseLinkedList(head.next);\n        \n        // Save a reference to the node following\n        // the current 'head' node.\n        Node front = head.next;\n        \n        // Make the 'front' node point to the current\n        // 'head' node in the reversed order.\n        front.next = head;\n        \n        // Break the link from the current 'head' node\n        // to the 'front' node to avoid cycles.\n        head.next = null;\n        \n        // Return the 'newHead,' which is the new\n        // head of the reversed linked list.\n        return newHead;\n    }\n\n\n    // Function to print the linked list\n    public static void printLinkedList(Node head) {\n        Node temp = head;\n        while (temp != null) {\n            System.out.print(temp.data + \" \");\n            temp = temp.next;\n        }\n        System.out.println();\n    }\n\n    public static void main(String[] args) {\n        // Create a linked list with values 1, 3, 2, and 4\n        Node head = new Node(1);\n        head.next = new Node(3);\n        head.next.next = new Node(2);\n        head.next.next.next = new Node(4);\n\n        // Print the original linked list\n        System.out.print(\"Original Linked List: \");\n        printLinkedList(head);\n\n        // Reverse the linked list\n        head = reverseLinkedList(head);\n\n        // Print the reversed linked list\n        System.out.print(\"Reversed Linked List: \");\n        printLinkedList(head);\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\nclass Node:\n    def __init__(self, data, next_node=None):\n        self.data = data\n        self.next = next_node\n\n# Function to reverse a singly\n# linked list using a recursion\ndef reverse_linked_list(head):\n    # Base case:\n    # If the linked list is empty or has only one node,\n    # return the head as it is already reversed.\n    if head is None or head.next is None:\n        return head\n    \n    # Recursive step:\n    # Reverse the linked list starting from the second node (head.next).\n    new_head = reverse_linked_list(head.next)\n    \n    # Save a reference to the node following\n    # the current 'head' node.\n    front = head.next\n    \n    # Make the 'front' node point to the current\n    # 'head' node in the reversed order.\n    front.next = head\n    \n    # Break the link from the current 'head' node\n    # to the 'front' node to avoid cycles.\n    head.next = None\n    \n    # Return the 'new_head,' which is the new\n    # head of the reversed linked list.\n    return new_head\n\n\n# Function to print the linked list\ndef print_linked_list(head):\n    temp = head\n    while temp is not None:\n        print(temp.data, end=\" \")\n        temp = temp.next\n    print()\n\n# Create a linked list with\n# values 1, 3, 2, and 4\nhead = Node(1)\nhead.next = Node(3)\nhead.next.next = Node(2)\nhead.next.next.next = Node(4)\n\n# Print the original linked list\nprint(\"Original Linked List:\", end=\" \")\nprint_linked_list(head)\n\n# Reverse the linked list\nhead = reverse_linked_list(head)\n\n# Print the reversed linked list\nprint(\"Reversed Linked List:\", end=\" \")\nprint_linked_list(head)\n\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\nclass Node {\n  constructor(data, next = null) {\n    this.data = data;\n    this.next = next;\n  }\n}\n\n// Function to reverse a singly\n// linked list using a recursion\nfunction reverseLinkedList(head) {\n    // Base case:\n    // If the linked list is empty or has only one node,\n    // return the head as it is already reversed.\n    if (head === null || head.next === null) {\n        return head;\n    }\n    \n    // Recursive step:\n    // Reverse the linked list starting\n    // from the second node (head.next).\n    var newHead = reverseLinkedList(head.next);\n    \n    // Save a reference to the node following\n    // the current 'head' node.\n    var front = head.next;\n    \n    // Make the 'front' node point to the current\n    // 'head' node in the reversed order.\n    front.next = head;\n    \n    // Break the link from the current 'head' node\n    // to the 'front' node to avoid cycles.\n    head.next = null;\n    \n    // Return the 'newHead,' which is the new\n    // head of the reversed linked list.\n    return newHead;\n}\n\n\n// Function to print the linked list\nfunction printLinkedList(head) {\n  let temp = head;\n  while (temp !== null) {\n    process.stdout.write(temp.data + ' ');\n    temp = temp.next;\n  }\n  console.log();\n}\n\n// Create a linked list with\n// values 1, 3, 2, and 4\nconst head = new Node(1);\nhead.next = new Node(3);\nhead.next.next = new Node(2);\nhead.next.next.next = new Node(4);\n\n// Print the original linked list\nprocess.stdout.write('Original Linked List: ');\nprintLinkedList(head);\n\n// Reverse the linked list\nreverseLinkedList(head);\n\n// Print the reversed linked list\nprocess.stdout.write('Reversed Linked List: ');\nprintLinkedList(head);\n\n</code>\n</pre>\n<p>\n<!-- Insert Output of Optimal Apporach Here -->\n<strong>Output:</strong> Original Linked List: 1 3 2 4&nbsp;Reversed Linked List: 4 2 3 1\n</p>\n</div>\n</div></details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Optimal Approach-->\n</p><p><strong>Time Complexity: O(N)</strong> This is because we <strong>traverse</strong> the linked list <strong>twice</strong>: once to push the values onto the stack, and once to pop the values and update the linked list. Both traversals take O(N) time.</p>\n<p><strong>Space Complexity : O(1) </strong>No additional space is used explicitly for <strong>data</strong> <strong>structures</strong> or <strong>allocations</strong> during the linked list reversal process. However, it's important to note that there is an implicit use of <strong>stack</strong> <strong>space</strong> due to <strong>recursion</strong>. This recursive stack space <strong>stores</strong> <strong>function</strong> <strong>calls</strong> and <strong>associated</strong> <strong>variables</strong> during the recursive traversal and reversal of the linked list. Despite this, no extra memory beyond the program's existing execution space is allocated, hence maintaining a space complexity of <strong>O(1)</strong>.</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Optimal Approach Starts from here -->\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n<details>\n<summary class=\"main-summary\">\n<span>\nVideo Explanation\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"yt-video-wrapper\">\n\n<!-- Insert iframe embed Link of Youtube Video-->\n<iframe class=\"lazy-loaded\" loading=\"lazy\" title=\"Reverse a Linked List\" width=\"810\" height=\"456\" data-lazy-type=\"iframe\" data-src=\"https://www.youtube.com/embed/D2vI2DNJGd8?si=vWLN5TnyYBWKskL3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\" src=\"https://www.youtube.com/embed/D2vI2DNJGd8?feature=oembed\"></iframe><noscript>\n<iframe loading=\"lazy\" title=\"Reverse a Linked List \" width=\"810\" height=\"456\" src=\"https://www.youtube.com/embed/D2vI2DNJGd8?si=vWLN5TnyYBWKskL3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe></noscript>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script>\n\nconst codeSections = document.querySelectorAll('.code-section');\n\n// Get last selected language from localStorage or set default value\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\n// Update last selected language for all sections and store in localStorage\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\n// Handle copy button click event\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\n// Set initial state of the tabs\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<script>\nconst codeSections = document.querySelectorAll('.code-section');\n\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script src=\"https://takeuforward.org/UXApproachDropDowns/3ApproachJSScript.js\"></script>\n<!-- /wp:html -->\n\n<!-- wp:paragraph -->\n<p>In case you are learning DSA, you should definitely check out our free&nbsp;<a href=\"https://takeuforward.org/strivers-a2z-dsa-course/strivers-a2z-dsa-course-sheet-2/\" target=\"_blank\" rel=\"noreferrer noopener\">A2Z DSA Course</a>&nbsp;with videos and blogs.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;</em><strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268\" target=\"_blank\" rel=\"noreferrer noopener\">Gauri Tomar</a></strong><em>&nbsp;for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\" target=\"_blank\" rel=\"noreferrer noopener\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->"
}