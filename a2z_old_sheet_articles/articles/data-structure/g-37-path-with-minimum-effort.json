{
    "dislikes": 1,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:11:51 GMT+0530 (India Standard Time)",
    "slug": "g-37-path-with-minimum-effort",
    "aid": "2179",
    "title": "G-37: Path With Minimum Effort",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/path-with-minimum-effort",
    "topics": [
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "graph",
            "topic-title": "Graph"
        }
    ],
    "content": "<!-- wp:paragraph -->\n<p>You are a hiker preparing for an upcoming hike. You are given heights, a 2D array of size rows x columns, where heights[row][col] represents the height of the cell (row, col). You are situated in the top-left cell, (0, 0), and you hope to travel to the bottom-right cell, (rows-1, columns-1) (i.e.,<strong>0-indexed</strong>). You can move<strong> up</strong>, <strong>down</strong>, <strong>left</strong>, or<strong> right</strong>, and you wish to find a route that requires the <strong>minimum effort</strong>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>A route's <strong>effort</strong> is the <strong>maximum absolute difference</strong> in heights between two consecutive cells of the route.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Examples:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\"><strong>Example 1:</strong>\n<strong>Input:</strong>\nheights = [[1,2,2],[3,8,2],[5,3,5]]\n<strong>Output:</strong>\n2\n<strong>Explanation:</strong> \n\nThe route of [1,3,5,3,5] has a maximum absolute difference of 2 in consecutive cells.This is better than the route of [1,2,2,2,5], where the maximum absolute difference is 3.\n\n<strong>Example 2:</strong>\n\n<strong>Input:\n</strong>\nheights = [[1,2,1,1,1],[1,2,1,2,1],[1,2,1,2,1],[1,1,1,2,1]]\n<strong>Output:</strong>\n0\n<strong>Explanation:</strong> \nThe route of [1,1,1,1,1,1,1,1,1,1,1,1,1,1] has a maximum absolute difference of 0 in consecutive cells.This is better than the route of [1,1,1,1,1,1,2,1], where the maximum absolute difference is 1.\n</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Solution</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"textColor\":\"accent\"} -->\n<p class=\"has-accent-color has-text-color\"><strong><em>Disclaimer</em></strong><strong>: </strong><strong><em>Don\u2019t jump directly to the solution, try it out yourself first.</em></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https://practice.geeksforgeeks.org/problems/path-with-minimum-effort/1?utm_source=youtube&amp;utm_medium=collab_striver_ytdescription&amp;utm_campaign=path-with-minimum-effort\" target=\"_blank\" rel=\"noopener\" title=\"\"><strong><em>Problem Link</em></strong></a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Note: If any image/dry run is unclear, please refer to the video attached at the bottom.&nbsp;</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Approach:</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Brute Force: </strong>We can figure out the effort for all the paths and return the minimum effort among them.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Optimised (Using Dijkstra) :&nbsp;</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In this particular problem, since there is no adjacency list we can say that the adjacent cell for a coordinate is that cell which is either on the top, bottom, left, or right of the current cell i.e, a cell can have a maximum of 4 cells adjacent to it and can only move in these directions.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":7163,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2022/12/Screenshot-2022-12-28-190259.png\" alt=\"\" class=\"wp-image-7163\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>Initial configuration:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>Queue: </strong>Define a Queue which would contain pairs of the type {diff, (row, col) }, where \u2018dist\u2019 indicates the currently updated value of difference from source to the cell.</li><li><strong>Distance Matrix: </strong>Define a distance matrix that would contain the minimum difference from the source cell to that particular cell. If a cell is marked as \u2018infinity\u2019 then it is treated as unreachable/unvisited.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>The Algorithm consists of the following steps :</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>Start by creating a queue that stores the distance-node pairs in the form {dist,(row, col)} and a dist matrix with each cell initialized with a very large number ( to indicate that they\u2019re unvisited initially) and the source cell marked as \u20180\u2019.</li><li>We push the source cell to the queue along with its distance which is also 0.</li><li>Pop the element at the front of the queue and look out for its adjacent nodes (left, right, bottom, and top cell). Also, for each cell, check the validity of the cell if it lies within the limits of the matrix or not.</li><li>If the current difference value of a cell from its parent is better than the previous difference indicated by the distance matrix, we update the difference in the matrix and push it into the queue along with cell coordinates.</li><li>A cell with a lower difference value would be at the front of the queue as opposed to a node with a higher difference. The only difference between this problem and Dijkstra\u2019s Standard problem is that there we used to update the value of the distance of a node from the source and here we update the absolute <strong>difference</strong> of a node from its parent.</li><li>We repeat the above three steps until the queue becomes empty or until we encounter the destination node.</li><li>Return the calculated difference and stop the algorithm from reaching the destination node. If the queue becomes empty and we don\u2019t encounter the destination node, return \u20180\u2019 indicating there\u2019s no path from source to destination.</li><li>Here\u2019s a quick demonstration of the Algorithm\u2019s 1st iteration ( all the further iterations would be done in a similar way ) :</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:image {\"id\":7164,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2022/12/Screenshot-2022-12-28-190539.png\" alt=\"\" class=\"wp-image-7164\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>Note: </strong>Updating the value of difference will only yield us the <strong>effort</strong> for the path traversed.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>Note: If you wish to see the dry run of the above approach, you can watch the video attached to this article.</em></strong>&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Intuition:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In this problem, we need to minimize the <strong>effort </strong>of moving from the source cell (0,0) to the<strong> </strong>destination cell (n - 1,m - 1). The effort can be calculated as the maximum value of the difference between the node and its next node in the path from the source to the destination. Among all the possible paths, we have to <strong>minimize </strong>this effort. So, for these types of minimum path problems, there\u2019s one standard algorithm that always comes to our mind and that is Dijkstra\u2019s Algorithm which would be used in solving this problem also. We update the distance every time we encounter a value of difference less than the previous value. This way, whenever we reach the destination we finally return the value of difference which is also the <strong>minimum effort.</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    \n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nclass Solution\n{\npublic:\n    int MinimumEffort(vector&lt;vector&lt;int&gt;&gt; &amp;heights)\n    {\n\n        // Create a priority queue containing pairs of cells \n        // and their respective distance from the source cell in the \n        // form {diff, {row of cell, col of cell}}.\n        priority_queue&lt;pair&lt;int, pair&lt;int, int&gt;&gt;,\n                       vector&lt;pair&lt;int, pair&lt;int, int&gt;&gt;&gt;,\n                       greater&lt;pair&lt;int, pair&lt;int, int&gt;&gt;&gt;&gt;\n            pq;\n\n        int n = heights.size();\n        int m = heights[0].size();\n\n        // Create a distance matrix with initially all the cells marked as\n        // unvisited and the dist for source cell (0,0) as 0.\n        vector&lt;vector&lt;int&gt;&gt; dist(n, vector&lt;int&gt;(m, 1e9));\n        dist[0][0] = 0;\n        pq.push({0, {0, 0}});\n\n        // The following delta rows and delts columns array are created such that\n        // each index represents each adjacent node that a cell may have \n        // in a direction.\n        int dr[] = {-1, 0, 1, 0};\n        int dc[] = {0, 1, 0, -1};\n\n        // Iterate through the matrix by popping the elements out of the queue\n        // and pushing whenever a shorter distance to a cell is found.\n        while (!pq.empty())\n        {\n            auto it = pq.top();\n            pq.pop();\n            int diff = it.first;\n            int row = it.second.first;\n            int col = it.second.second;\n\n            // Check if we have reached the destination cell,\n            // return the current value of difference (which will be min).\n            if (row == n - 1 &amp;&amp; col == m - 1)\n                return diff;\n           \n            for (int i = 0; i &lt; 4; i++)\n            {\n                // row - 1, col\n                // row, col + 1\n                // row - 1, col\n                // row, col - 1\n                int newr = row + dr[i];\n                int newc = col + dc[i];\n\n                // Checking validity of the cell.\n                if (newr &gt;= 0 &amp;&amp; newc &gt;= 0 &amp;&amp; newr &lt; n &amp;&amp; newc &lt; m)\n                {\n                    // Effort can be calculated as the max value of differences \n                    // between the heights of the node and its adjacent nodes.\n                    int newEffort = max(abs(heights[row][col] - heights[newr][newc]), diff);\n\n                    // If the calculated effort is less than the prev value\n                    // we update as we need the min effort.\n                    if (newEffort &lt; dist[newr][newc])\n                    {\n                        dist[newr][newc] = newEffort;\n                        pq.push({newEffort, {newr, newc}});\n                    }\n                }\n            }\n        }\n        return 0; // if unreachable\n    }\n};\n\nint main()\n{\n    // Driver Code.\n\n    vector&lt;vector&lt;int&gt;&gt; heights = {{1, 2, 2}, {3, 8, 2}, {5, 3, 5}};\n\n    Solution obj;\n\n    int ans = obj.MinimumEffort(heights);\n\n    cout &lt;&lt; ans;\n    cout &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output</strong> <strong>:&nbsp;</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>2</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity:</strong> O( 4*N*M * log( N*M) ) { N*M are the total cells, for each of which we also check 4 adjacent nodes for the minimum effort and additional log(N*M) for insertion-deletion operations in a priority queue }&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Where, N = No. of rows of the binary maze and M = No. of columns of the binary maze.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity:</strong> O( N*M ) { Distance matrix containing N*M cells + priority queue in the worst case containing all the nodes ( N*M) }.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Where, N = No. of rows of the binary maze and M = No. of columns of the binary maze.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\n\nclass Tuple{\n    int distance;\n    int row;\n    int col;\n    public Tuple(int distance,int row, int col){\n        this.row = row;\n        this.distance = distance;\n        this.col = col; \n    }\n}\nclass Solution {\n    \n    int MinimumEffort(int heights[][]) {\n\n        // Create a priority queue containing pairs of cells \n        // and their respective distance from the source cell in the \n        // form {diff, {row of cell, col of cell}}.\n        PriorityQueue&lt;Tuple&gt; pq = \n        new PriorityQueue&lt;Tuple&gt;((x,y) -&gt; x.distance - y.distance);\n       \n      \n        int n = heights.length; \n        int m = heights[0].length; \n\n        // Create a distance matrix with initially all the cells marked as\n        // unvisited and the dist for source cell (0,0) as 0.\n        int[][] dist = new int[n][m]; \n        for(int i = 0;i&lt;n;i++) {\n            for(int j = 0;j&lt;m;j++) {\n                dist[i][j] = (int)(1e9); \n            }\n        }\n        \n        dist[0][0] = 0; \n        pq.add(new Tuple(0, 0, 0)); \n\n         // The following delta rows and delts columns array are created such that\n        // each index represents each adjacent node that a cell may have \n        // in a direction.\n        int dr[] = {-1, 0, 1, 0}; \n        int dc[] = {0, 1, 0, -1}; \n        \n        // Iterate through the matrix by popping the elements out of the queue\n        // and pushing whenever a shorter distance to a cell is found.\n        while(pq.size() != 0) {\n            Tuple it = pq.peek(); \n            pq.remove(); \n            int diff = it.distance; \n            int row = it.row; \n            int col = it.col; \n            \n            // Check if we have reached the destination cell,\n            // return the current value of difference (which will be min).\n            if(row == n-1 &amp;&amp; col == m-1) return diff; \n            // row - 1, col\n            // row, col + 1 \n            // row - 1, col \n            // row, col - 1\n            for(int i = 0;i&lt;4;i++) {\n                int newr = row + dr[i]; \n                int newc = col + dc[i];\n\n                // Checking validity of the cell.\n                if(newr&gt;=0 &amp;&amp; newc &gt;=0 &amp;&amp; newr &lt; n &amp;&amp; newc &lt; m) {\n\n                    // Effort can be calculated as the max value of differences \n                    // between the heights of the node and its adjacent nodes.\n                    int newEffort = \n                    Math.max(\n                        Math.abs(heights[row][col] - heights[newr][newc]), diff); \n\n                    // If the calculated effort is less than the prev value\n                    // we update as we need the min effort.\n                    if(newEffort &lt; dist[newr][newc]) {\n                        dist[newr][newc] = newEffort; \n                        pq.add(new Tuple(newEffort, newr, newc)); \n                    }\n                }\n            }\n        }\n        // If the destination is unreachable.\n        return 0;\n    }\n}\n\nclass tuf {\n\n    public static void main(String[] args) {\n       \n        int[][] heights={{1, 2, 2}, {3, 8, 2}, {5, 3, 5}};\n\n        Solution obj = new Solution();\n        int ans = obj.MinimumEffort(heights);\n        \n        System.out.print(ans);\n        System.out.println();\n    }\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output</strong> <strong>:&nbsp;</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>2</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity:</strong> O( 4*N*M * log( N*M) ) { N*M are the total cells, for each of which we also check 4 adjacent nodes for the minimum effort and additional log(N*M) for insertion-deletion operations in a priority queue }&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Where, N = No. of rows of the binary maze and M = No. of columns of the binary maze.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity:</strong> O( N*M ) { Distance matrix containing N*M cells + priority queue in the worst case containing all the nodes ( N*M) }.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Where, N = No. of rows of the binary maze and M = No. of columns of the binary maze.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;<strong><a href=\"https://www.linkedin.com/in/priyanshi-goel-7b6a42210/\" target=\"_blank\" rel=\"noreferrer noopener\">Priyanshi Goel</a></strong>&nbsp;for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\" target=\"_blank\" rel=\"noreferrer noopener\">please check out this article</a>.&nbsp;<em>If you want to suggest any improvement/correction in this article please mail us at&nbsp;write4tuf@gmail.com</em></p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:embed {\"url\":\"https://www.youtube.com/watch?v=0ytpZyiZFhA\\u0026list=PLgUwDviBIf0oE3gA41TKO2H5bHpPd7fzn\\u0026index=36\",\"type\":\"video\",\"providerNameSlug\":\"youtube\",\"responsive\":true,\"className\":\"wp-embed-aspect-16-9 wp-has-aspect-ratio\"} -->\n<figure class=\"wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio\"><div class=\"wp-block-embed__wrapper\">\nhttps://www.youtube.com/watch?v=0ytpZyiZFhA&amp;list=PLgUwDviBIf0oE3gA41TKO2H5bHpPd7fzn&amp;index=36\n</div></figure>\n<!-- /wp:embed -->",
    "category_tag": "data-structure",
    "likes": 49,
    "preview": "You are a hiker preparing for an upcoming hike. You are given heights, a 2D array of size rows x columns, where heights[row][col] represents the height of the cell (row, col). You are situated in t..."
}