{
    "dislikes": 13,
    "video": "DhFh8Kw7ymk",
    "publishedOn": "Sun Mar 24 2024 22:09:15 GMT+0530 (India Standard Time)",
    "slug": "3-sum-find-triplets-that-add-up-to-a-zero",
    "aid": "1433",
    "title": "3 Sum : Find triplets that add up to a zero",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/3-sum",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "hashing",
            "topic-title": "Hashing"
        },
        {
            "topic-id": "sorting",
            "topic-title": "Sorting"
        }
    ],
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement:</strong>\u00a0Given an array of N integers, your task is to find unique triplets that add up to give a sum of zero. In short, you need to return\u00a0<em>an array of all the unique</em> triplets\u00a0[arr[a], arr[b], arr[c]] such that i!=j, j!=k, k!=i, and their sum is equal to zero.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Pre-requisite: </strong><a href=\"https://takeuforward.org/data-structure/two-sum-check-if-a-pair-with-given-sum-exists-in-array/\">2 Sum Problem</a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n<details class=\"article_example_details\">\n<summary class=\"article_example_summary\">\n<span><strong>\nExamples\n</strong>\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"atricle_example_content\">\n<pre class=\"wp-block-preformatted\"><!-- Insert New Examples Here -->\n<pre class=\"wp-block-preformatted\"><strong>Example 1:</strong> \n\n<strong>Input:</strong> nums = [-1,0,1,2,-1,-4]\n\n<strong>Output:</strong> [[-1,-1,2],[-1,0,1]]\n\n<strong>Explanation:</strong> Out of all possible unique triplets possible, [-1,-1,2] and [-1,0,1] satisfy the condition of summing up to zero with i!=j!=k\n\n<strong>Example 2:</strong>\n\n<strong>Input:</strong> nums=[-1,0,1,0]\n<strong>Output:</strong> Output: [[-1,0,1],[-1,1,0]]\n<strong>Explanation:</strong> Out of all possible unique triplets possible, [-1,0,1] and [-1,1,0] satisfy the condition of summing up to zero with i!=j!=k\n</pre>\n</pre>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Practice Section-->\n<div class=\"practice\">\n<span><strong>Practice: </strong></span>\n<div class=\"problem-buttons\">\n\n<!-- Add Problem Link inside href -->\n<a href=\"https://bit.ly/42XamEU\" target=\"_blank\" rel=\"noopener\">\n<span>Solve Problem</span>\n<img src=\"https://static.takeuforward.org/wp/uploads/2023/04/Group-11-5.png\" alt=\"code-studio\">\n</a>\n</div>\n</div>\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\nyourself first. </em></p>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<div class=\"horizontal_navbar_dsa_article\">\n<div class=\"grid_container_three\">\n<a href=\"#brute-force-approach\" class=\"three-boxes box-a\">\nBrute Force Approach\n</a>\n<a href=\"#better-approach\" class=\"three-boxes box-b\">\nBetter Approach\n</a>\n<a href=\"#optimal-approach\" class=\"three-boxes box-c\">\nOptimal Approach \n</a>\n<a href=\"#dsa_article_video_explanation\" class=\"three-boxes box-d\">\n<svg width=\"26\" height=\"26\" viewBox=\"0 0 20 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M8 10L13.19 7L8 4V10ZM19.56 2.17C19.69 2.64 19.78 3.27 19.84 4.07C19.91 4.87 19.94 5.56 19.94 6.16L20 7C20 9.19 19.84 10.8 19.56 11.83C19.31 12.73 18.73 13.31 17.83 13.56C17.36 13.69 16.5 13.78 15.18 13.84C13.88 13.91 12.69 13.94 11.59 13.94L10 14C5.81 14 3.2 13.84 2.17 13.56C1.27 13.31 0.69 12.73 0.44 11.83C0.31 11.36 0.22 10.73 0.16 9.93C0.0900001 9.13 0.0599999 8.44 0.0599999 7.84L0 7C0 4.81 0.16 3.2 0.44 2.17C0.69 1.27 1.27 0.69 2.17 0.44C2.64 0.31 3.5 0.22 4.82 0.16C6.12 0.0899998 7.31 0.0599999 8.41 0.0599999L10 0C14.19 0 16.8 0.16 17.83 0.44C18.73 0.69 19.31 1.27 19.56 2.17Z\" fill=\"red\"></path>\n</svg>\n\n</a>\n<div class=\"box-e tooltip\">\n<svg viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M12.842 9.25L11.9577 10.17C11.2502 10.89 10.8081 11.5 10.8081 13H8.84297V12.5C8.84297 11.39 9.28511 10.39 9.99255 9.67L11.2109 8.41C11.5745 8.05 11.7906 7.55 11.7906 7C11.7906 6.46957 11.5836 5.96086 11.2151 5.58579C10.8465 5.21071 10.3467 5 9.82552 5C9.30434 5 8.80451 5.21071 8.43598 5.58579C8.06745 5.96086 7.86041 6.46957 7.86041 7H5.89531C5.89531 5.93913 6.30938 4.92172 7.04644 4.17157C7.7835 3.42143 8.78316 3 9.82552 3C10.8679 3 11.8675 3.42143 12.6046 4.17157C13.3417 4.92172 13.7557 5.93913 13.7557 7C13.7543 7.84324 13.4259 8.65183 12.842 9.25ZM10.8081 17H8.84297V15H10.8081M9.82552 0C8.53521 0 7.25754 0.258658 6.06545 0.761205C4.87337 1.26375 3.79021 2.00035 2.87783 2.92893C1.03519 4.8043 0 7.34784 0 10C0 12.6522 1.03519 15.1957 2.87783 17.0711C3.79021 17.9997 4.87337 18.7362 6.06545 19.2388C7.25754 19.7413 8.53521 20 9.82552 20C12.4314 20 14.9306 18.9464 16.7732 17.0711C18.6158 15.1957 19.651 12.6522 19.651 10C19.651 4.47 15.2296 0 9.82552 0Z\" fill=\"black\"></path>\n</svg>\n<div class=\"bottom\">\n<p>Expand any one approach by clicking the given options in the bar. Clicking one approach on bar,\ncloses all other expands. You can manually expand more than one approach at a time</p>\n<i></i>\n</div>\n\n</div>\n</div>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Approaches Drop-Down -->\n<div class=\"dsa_article_dropdown_approachs \">\n\n<!-- Brute Force Approach Starts from here -->\n<div id=\"brute-force-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nBrute Force Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n<p>In the question, it is clearly stated that for each case the picked indices i.e. i, j, and k must be distinct. This means [arr[1], arr[1], arr[2]] is not a valid triplet and also remember [arr[1], arr[0], arr[2]] and [arr[0], arr[1], arr[2]] will be considered the same.</p>\n<h3><strong>Intuition: </strong></h3>\n<p>This approach is pretty straightforward. Here, we will check all possible triplets using 3 loops and among them, we will consider the ones whose sum is equal to the given target i.e. 0. And before considering them as our answer we need to sort the triplets in ascending order so that we can consider only the unique ones.</p>\n<h3><strong>Algorithm:</strong></h3>\n<p>The steps are as follows:</p>\n<ol><li>First, we will declare a set data structure as we want unique triplets.</li><li>Then we will use the first loop(say i) that will run from 0 to n-1.</li><li>Inside it, there will be the second loop(say j) that will run from i+1 to n-1.</li><li>Then there will be the third loop(say k) that runs from j+1 to n-1.</li><li>Now, inside these 3 nested loops, we will check the sum i.e. arr[i]+arr[j]+arr[k], and if it is equal to the target i.e. 0 we will sort this triplet and insert it in the set data structure.</li><li>Finally, we will return the list of triplets stored in the set data structure.</li></ol>\n<p><strong>Note: </strong><em>For a better understanding of intuition, please watch the </em><a href=\"https://youtu.be/DhFh8Kw7ymk\"><em>video</em></a><em> at the bottom of the page.</em></p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n\n<!-- Insert C++ code of Brute Force Here -->\n#include &lt;bits/stdc++.h>\nusing namespace std;\n\nvector&lt;vector&lt;int>> triplet(int n, vector&lt;int> &amp;arr) {\n    set&lt;vector&lt;int>> st;\n\n    // check all possible triplets:\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = i + 1; j &lt; n; j++) {\n            for (int k = j + 1; k &lt; n; k++) {\n                if (arr[i] + arr[j] + arr[k] == 0) {\n                    vector&lt;int> temp = {arr[i], arr[j], arr[k]};\n                    sort(temp.begin(), temp.end());\n                    st.insert(temp);\n                }\n            }\n        }\n    }\n\n    //store the set elements in the answer:\n    vector&lt;vector&lt;int>> ans(st.begin(), st.end());\n    return ans;\n}\n\n\nint main()\n{\n    vector&lt;int> arr = { -1, 0, 1, 2, -1, -4};\n    int n = arr.size();\n    vector&lt;vector&lt;int>> ans = triplet(n, arr);\n    for (auto it : ans) {\n        cout &lt;&lt; \"[\";\n        for (auto i : it) {\n            cout &lt;&lt; i &lt;&lt; \" \";\n        }\n        cout &lt;&lt; \"] \";\n    }\n    cout &lt;&lt; \"\\n\";\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\n<!-- Insert Java code of Brute Force Here -->\nimport java.util.*;\n\npublic class tUf {\n    public static List&lt;List&lt;Integer>> triplet(int n, int[] arr) {\n        Set&lt;List&lt;Integer>> st = new HashSet&lt;>();\n\n        // check all possible triplets:\n        for (int i = 0; i &lt; n; i++) {\n            for (int j = i + 1; j &lt; n; j++) {\n                for (int k = j + 1; k &lt; n; k++) {\n                    if (arr[i] + arr[j] + arr[k] == 0) {\n                        List&lt;Integer> temp = Arrays.asList(arr[i], arr[j], arr[k]);\n                        temp.sort(null);\n                        st.add(temp);\n                    }\n                }\n            }\n        }\n\n        // store the set elements in the answer:\n        List&lt;List&lt;Integer>> ans = new ArrayList&lt;>(st);\n        return ans;\n    }\n\n    public static void main(String[] args) {\n        int[] arr = { -1, 0, 1, 2, -1, -4};\n        int n = arr.length;\n        List&lt;List&lt;Integer>> ans = triplet(n, arr);\n        for (List&lt;Integer> it : ans) {\n            System.out.print(\"[\");\n            for (Integer i : it) {\n                System.out.print(i + \" \");\n            }\n            System.out.print(\"] \");\n        }\n        System.out.println();\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\n<!-- Insert Python code of Brute Force Here -->\ndef triplet(n, arr):\n    st = set()\n\n    # check all possible triplets:\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if arr[i] + arr[j] + arr[k] == 0:\n                    temp = [arr[i], arr[j], arr[k]]\n                    temp.sort()\n                    st.add(tuple(temp))\n\n    # store the set elements in the answer:\n    ans = [list(item) for item in st]\n    return ans\n\n\nif __name__ == \"__main__\":\n    arr = [-1, 0, 1, 2, -1, -4]\n    n = len(arr)\n    ans = triplet(n, arr)\n    for it in ans:\n        print(\"[\", end=\"\")\n        for i in it:\n            print(i, end=\" \")\n        print(\"]\", end=\" \")\n    print(\"\\n\")\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\n<!-- Insert JavaScript code of Brute Force Here -->\nfunction triplet(n, arr) {\n    let st = new Set();\n    let ans = []\n\n    // check all possible triplets:\n    for (let i = 0; i &lt; n; i++) {\n        for (let j = i + 1; j &lt; n; j++) {\n            for (let k = j + 1; k &lt; n; k++) {\n                if (arr[i] + arr[j] + arr[k] === 0) {\n                    let temp = [arr[i], arr[j], arr[k]];\n                    temp.sort((a, b) => a - b);\n                    ans.push(temp);\n                }\n            }\n        }\n    }\n\n    //store the set in the answer:\n    let set  = new Set(ans.map(JSON.stringify));\n    ans = Array.from(set).map(JSON.parse);\n    return ans;\n}\n\nlet arr = [-1, 0, 1, 2, -1, -4];\nlet n = arr.length;\nlet ans = triplet(n, arr);\nfor (let it of ans) {\n    process.stdout.write(\"[\");\n    for (let i of it) {\n        process.stdout.write(i + \" \");\n    }\n    process.stdout.write(\"] \");\n}\nconsole.log();\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Brute Force Here -->\n<p><strong>Output:</strong> [-1 -1 2 ] [-1 0 1 ] \n\n</p>\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n<!-- Insert Time and Space Complexity of Brute Force Here -->\n<p><strong>Time Complexity: </strong>O(N<sup>3</sup> * log(no. of unique triplets)), where N = size of the array.<br><strong>Reason: </strong>Here, we are mainly using 3 nested loops. And inserting triplets into the set takes O(log(no. of unique triplets)) time complexity. But we are not considering the time complexity of sorting as we are just sorting 3 elements every time.</p>\n<p><strong>Space Complexity: </strong>O(2 * no. of the unique triplets) as we are using a set data structure and a list to store the triplets.</p>\n</p>\n</details>\n</div>\n</details>\n</div>\n<!-- Brute Force Approach Ends here -->\n\n\n<!-- Better Approach Starts from here -->\n\n<div id=\"better-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nBetter Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition For Better Approach Here -->\n<h3><strong>Intuition: </strong></h3>\n<p>In the previous approach, we utilized 3 loops, but now our goal is to reduce it to 2 loops. To achieve this, we need to find a way to calculate arr[k] since we intend to eliminate the third loop (k loop). To calculate arr[k], we can derive a formula as follows:\u00a0</p>\n<p>arr[k] = target - (arr[i]+arr[j]+arr[k]) = 0-(arr[i]+arr[j]+arr[k]) = -(arr[i]+arr[j]+arr[k])&nbsp;</p>\n<p>So, we will first calculate arr[i] and arr[j] using 2 loops and for the third one i.e. arr[k] we will not use another loop and instead we will look up the value 0-(arr[i]+arr[j]+arr[k]) in the set data structure. Thus we can remove the third loop from the algorithm.</p>\n<p>For implementing the search operation of the third element,&nbsp; we will store all the elements between the indices i and j in a HashSet and then we will search for the third element in the HashSet.</p>\n<p><strong>Why we are not inserting all the array elements in the HashSet and then searching for the third element:</strong></p>\n<p>Let\u2019s understand this intuition using an example. Assume the given array is {1, 2, -1, -2, 4, 0, -1} and the target = 0. Now, we will notice a situation like the following:</p>\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/07/Screenshot-2023-07-26-214246.png\" alt=\"\" class=\"wp-image-11681\"/></figure>\n<p>Here, arr[i] = -2 and arr[j] = 4.<br>Therefore, arr[k] = -(arr[i]+arr[j]) = -(-2+4) = -2</p>\n<ul><li>If all the elements were in the set data structure while searching for -2, we would again pick the element at index 3, that is currently pointed by i.</li><li>Hence, the triplet will be [arr[i], arr[j], arr[i]]. And this is an invalid triplet. That is why we cannot insert all the elements into the set data structure.</li></ul>\n<h3><strong>Algorithm:</strong></h3>\n<p>The steps are as follows:</p>\n<ol><li>First, we will declare a set data structure as we want unique triplets.</li><li>Then we will use the first loop(say i) that will run from 0 to n-1.</li><li>Inside it, there will be the second loop(say j) that will run from i+1 to n-1.</li><li>Before the second loop, we will declare another HashSet to store the array elements as we intend to search for the third element using this HashSet.</li><li>Inside the second loop, we will calculate the value of the third element i.e. -(arr[i]+arr[j]).</li><li>If the third element exists in the HashSet, we will sort these 3 values i.e. arr[i], arr[j], and the third element, and insert it in the set data structure declared in step 1.</li><li>After that, we will insert the j-th element i.e. arr[j] in the HashSet as we only want to insert those array elements that are in between indices i and j.</li><li>Finally, we will return a list of triplets stored in the set data structure.</li></ol>\n<p><strong>Note: </strong><em>For a better understanding of intuition, please watch the </em><a href=\"https://youtu.be/DhFh8Kw7ymk\"><em>video</em></a><em> at the bottom of the page.</em></p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n\n<!-- Insert C++ Code of Better Approach Here -->\n#include &lt;bits/stdc++.h>\nusing namespace std;\n\nvector&lt;vector&lt;int>> triplet(int n, vector&lt;int> &amp;arr) {\n    set&lt;vector&lt;int>> st;\n\n    for (int i = 0; i &lt; n; i++) {\n        set&lt;int> hashset;\n        for (int j = i + 1; j &lt; n; j++) {\n            //Calculate the 3rd element:\n            int third = -(arr[i] + arr[j]);\n\n            //Find the element in the set:\n            if (hashset.find(third) != hashset.end()) {\n                vector&lt;int> temp = {arr[i], arr[j], third};\n                sort(temp.begin(), temp.end());\n                st.insert(temp);\n            }\n            hashset.insert(arr[j]);\n        }\n    }\n\n    //store the set in the answer:\n    vector&lt;vector&lt;int>> ans(st.begin(), st.end());\n    return ans;\n}\n\n\nint main()\n{\n    vector&lt;int> arr = { -1, 0, 1, 2, -1, -4};\n    int n = arr.size();\n    vector&lt;vector&lt;int>> ans = triplet(n, arr);\n    for (auto it : ans) {\n        cout &lt;&lt; \"[\";\n        for (auto i : it) {\n            cout &lt;&lt; i &lt;&lt; \" \";\n        }\n        cout &lt;&lt; \"] \";\n    }\n    cout &lt;&lt; \"\\n\";\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\n<!-- Insert Java Code of Better Approach Here -->\nimport java.util.*;\n\npublic class tUf {\n    public static List&lt;List&lt;Integer>> triplet(int n, int[] arr) {\n        Set&lt;List&lt;Integer>> st = new HashSet&lt;>();\n\n        for (int i = 0; i &lt; n; i++) {\n            Set&lt;Integer> hashset = new HashSet&lt;>();\n            for (int j = i + 1; j &lt; n; j++) {\n                //Calculate the 3rd element:\n                int third = -(arr[i] + arr[j]);\n\n                //Find the element in the set:\n                if (hashset.contains(third)) {\n                    List&lt;Integer> temp = Arrays.asList(arr[i], arr[j], third);\n                    temp.sort(null);\n                    st.add(temp);\n                }\n                hashset.add(arr[j]);\n            }\n        }\n\n        // store the set elements in the answer:\n        List&lt;List&lt;Integer>> ans = new ArrayList&lt;>(st);\n        return ans;\n    }\n\n    public static void main(String[] args) {\n        int[] arr = { -1, 0, 1, 2, -1, -4};\n        int n = arr.length;\n        List&lt;List&lt;Integer>> ans = triplet(n, arr);\n        for (List&lt;Integer> it : ans) {\n            System.out.print(\"[\");\n            for (Integer i : it) {\n                System.out.print(i + \" \");\n            }\n            System.out.print(\"] \");\n        }\n        System.out.println();\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\n<!-- Insert Python Code of Better Approach Here -->\ndef triplet(n, arr):\n    st = set()\n\n    for i in range(n):\n        hashset = set()\n        for j in range(i + 1, n):\n            # Calculate the 3rd element:\n            third = -(arr[i] + arr[j])\n\n            # Find the element in the set:\n            if third in hashset:\n                temp = [arr[i], arr[j], third]\n                temp.sort()\n                st.add(tuple(temp))\n            hashset.add(arr[j])\n\n    # store the set in the answer:\n    ans = list(st)\n    return ans\n\n\narr = [-1, 0, 1, 2, -1, -4]\nn = len(arr)\nans = triplet(n, arr)\nfor it in ans:\n    print(\"[\", end=\"\")\n    for i in it:\n        print(i, end=\" \")\n    print(\"]\", end=\" \")\nprint()\n\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\n<!-- Insert javascript Code of Better Approach Here -->\nfunction triplet(n, arr) {\n    let st = new Set();\n    let ans = [];\n    for (let i = 0; i &lt; n; i++) {\n        let hashset = new Set();\n        for (let j = i + 1; j &lt; n; j++) {\n            //Calculate the 3rd element:\n            let third = -(arr[i] + arr[j]);\n\n            //Find the element in the set:\n            if (hashset.has(third)) {\n                let temp = [arr[i], arr[j], third];\n                temp.sort((a, b) => a - b);\n                ans.push(temp);\n            }\n            hashset.add(arr[j]);\n        }\n    }\n\n    //store the set in the answer:\n    let set  = new Set(ans.map(JSON.stringify));\n    ans = Array.from(set).map(JSON.parse);\n    return ans;\n}\n\nlet arr = [-1, 0, 1, 2, -1, -4];\nlet n = arr.length;\nlet ans = triplet(n, arr);\nfor (let it of ans) {\n    process.stdout.write(\"[\");\n    for (let i of it) {\n        process.stdout.write(i + \" \");\n    }\n    process.stdout.write(\"] \");\n}\nconsole.log();\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Better Approach Here -->\n<strong>Output:</strong>  [-1 -1 2 ] [-1 0 1 ]\n\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Better Approach Here -->\n<p><strong>Time Complexity: </strong>O(N<sup>2</sup> * log(no. of unique triplets)), where N = size of the array.<br><strong>Reason: </strong>Here, we are mainly using 3 nested loops. And inserting triplets into the set takes O(log(no. of unique triplets)) time complexity. But we are not considering the time complexity of sorting as we are just sorting 3 elements every time.</p>\n<p><strong>Space Complexity: </strong>O(2 * no. of the unique triplets) + O(N) as we are using a set data structure and a list to store the triplets and extra O(N) for storing the array elements in another set.</p>\n</p>\n</details>\n</div>\n</details>\n</div>\n<!-- Better Approach Ends from here -->\n\n\n<!-- Optimal Approach Starts from here -->\n\n<div id=\"optimal-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nOptimal Approach \n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm of Better Approach Here -->\n<p>In this approach, we intend to get rid of two things i.e. the HashSet we were using for the look-up operation and the set data structure used to store the unique triplets.</p>\n<p>So, We will first sort the array. Then, we will fix a pointer i, and the rest 2 pointers j and k will be moving.&nbsp;</p>\n<p>Now, we need to first understand what the HashSet and the set were doing to make our algorithm work without them. So, the set data structure was basically storing the unique triplets in sorted order and the HashSet was used to search for the third element.</p>\n<p><strong>That is why, </strong>we will first sort the entire array, and then <strong>to get the unique triplets, </strong>we will simply skip the duplicate numbers while moving the pointers.</p>\n<p><strong>How to skip duplicate numbers:</strong><strong><br></strong>As the entire array is sorted, the duplicate numbers will be in consecutive places. So, while moving a pointer, we will check the current element and the adjacent element. Until they become different, we will move the pointer by 1 place. We will follow this process for all 3 pointers. Thus, we can easily skip the duplicate elements while moving the pointers.</p>\n<p>Now, we can also remove the HashSet as we have two moving pointers i.e. j and k that will find the appropriate value of arr[j] and arr[k]. So, we do not need that HashSet anymore for the look-up operations.</p>\n<p>The process will look like the following:</p>\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/07/Screenshot-2023-07-27-001839.png\" alt=\"\" class=\"wp-image-11682\"/></figure>\n<p>Among the 3 pointers, 1 will be fixed and 2 will be moving. In each iteration, we will check if the sum i.e.arr[i]+arr[j]+arr[k] is equal to the target i.e. 0.&nbsp;</p>\n<ul><li><strong>If the sum is greater</strong>, then we need lesser elements and so we will decrease the value of k(i.e. k--).&nbsp;</li><li><strong>If the sum is lesser than the target</strong>, we need a bigger value and so we will increase the value of j (i.e. j++).&nbsp;</li><li><strong>If the sum is equal to the target,</strong> we will simply insert the triplet i.e. arr[i], arr[j], arr[k], into our answer and move the pointers j and k skipping the duplicate elements.</li></ul>\n<h3><strong>Approach:</strong></h3>\n<p>The steps are as follows:</p>\n<ol><li>First, we will sort the entire array.</li><li>We will use a loop(say i) that will run from 0 to n-1. This i will represent the fixed pointer. In each iteration, this value will be fixed for all different values of the rest of the 2 pointers. Inside the loop, we will first check if the current and the previous element is the same and if it is we will do nothing and continue to the next value of i.</li><li>After that, there will be 2 moving pointers i.e. j(starts from i+1) and k(starts from the last index). The pointer j will move forward and the pointer k will move backward until they cross each other while the value of i will be fixed.<ol><li>Now we will check the sum i.e. arr[i]+arr[j]+arr[k].</li><li><strong>If the sum is greater</strong>, then we need lesser elements and so we will decrease the value of k(i.e. k--).&nbsp;</li><li><strong>If the sum is lesser than the target</strong>, we need a bigger value and so we will increase the value of j (i.e. j++).&nbsp;</li><li><strong>If the sum is equal to the target,</strong> we will simply insert the triplet i.e. arr[i], arr[j], arr[k] into our answer and move the pointers j and k skipping the duplicate elements(<em>i.e. by checking the adjacent elements while moving the pointers</em>).</li></ol></li><li>Finally, we will have a list of unique triplets.</li></ol>\n<p><strong>Note: </strong><em>For a better understanding of intuition, please watch the </em><a href=\"https://youtu.be/DhFh8Kw7ymk\"><em>video</em></a><em> at the bottom of the page.</em></p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n\n<!-- Insert C++ code of Optimal Approach Here-->\n#include &lt;bits/stdc++.h>\nusing namespace std;\n\nvector&lt;vector&lt;int>> triplet(int n, vector&lt;int> &amp;arr) {\n    vector&lt;vector&lt;int>> ans;\n    sort(arr.begin(), arr.end());\n    for (int i = 0; i &lt; n; i++) {\n        //remove duplicates:\n        if (i != 0 &amp;&amp; arr[i] == arr[i - 1]) continue;\n\n        //moving 2 pointers:\n        int j = i + 1;\n        int k = n - 1;\n        while (j &lt; k) {\n            int sum = arr[i] + arr[j] + arr[k];\n            if (sum &lt; 0) {\n                j++;\n            }\n            else if (sum > 0) {\n                k--;\n            }\n            else {\n                vector&lt;int> temp = {arr[i], arr[j], arr[k]};\n                ans.push_back(temp);\n                j++;\n                k--;\n                //skip the duplicates:\n                while (j &lt; k &amp;&amp; arr[j] == arr[j - 1]) j++;\n                while (j &lt; k &amp;&amp; arr[k] == arr[k + 1]) k--;\n            }\n        }\n    }\n    return ans;\n}\n\n\nint main()\n{\n    vector&lt;int> arr = { -1, 0, 1, 2, -1, -4};\n    int n = arr.size();\n    vector&lt;vector&lt;int>> ans = triplet(n, arr);\n    for (auto it : ans) {\n        cout &lt;&lt; \"[\";\n        for (auto i : it) {\n            cout &lt;&lt; i &lt;&lt; \" \";\n        }\n        cout &lt;&lt; \"] \";\n    }\n    cout &lt;&lt; \"\\n\";\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\n<!-- Insert Java code of Optimal Approach Here -->\nimport java.util.*;\n\npublic class tUf {\n    public static List&lt;List&lt;Integer>> triplet(int n, int[] arr) {\n        List&lt;List&lt;Integer>> ans = new ArrayList&lt;>();\n        Arrays.sort(arr);\n\n        for (int i = 0; i &lt; n; i++) {\n            //remove duplicates:\n            if (i != 0 &amp;&amp; arr[i] == arr[i - 1]) continue;\n\n            //moving 2 pointers:\n            int j = i + 1;\n            int k = n - 1;\n            while (j &lt; k) {\n                int sum = arr[i] + arr[j] + arr[k];\n                if (sum &lt; 0) {\n                    j++;\n                } else if (sum > 0) {\n                    k--;\n                } else {\n                    List&lt;Integer> temp = Arrays.asList(arr[i], arr[j], arr[k]);\n                    ans.add(temp);\n                    j++;\n                    k--;\n                    //skip the duplicates:\n                    while (j &lt; k &amp;&amp; arr[j] == arr[j - 1]) j++;\n                    while (j &lt; k &amp;&amp; arr[k] == arr[k + 1]) k--;\n                }\n            }\n        }\n\n        return ans;\n    }\n\n    public static void main(String[] args) {\n        int[] arr = { -1, 0, 1, 2, -1, -4};\n        int n = arr.length;\n        List&lt;List&lt;Integer>> ans = triplet(n, arr);\n        for (List&lt;Integer> it : ans) {\n            System.out.print(\"[\");\n            for (Integer i : it) {\n                System.out.print(i + \" \");\n            }\n            System.out.print(\"] \");\n        }\n        System.out.println();\n    }\n}\n\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\n<!-- Insert Python code of Optimal Approach Here -->\ndef triplet(n, arr):\n    ans = []\n    arr.sort()\n    for i in range(n):\n        # remove duplicates:\n        if i != 0 and arr[i] == arr[i - 1]:\n            continue\n\n        # moving 2 pointers:\n        j = i + 1\n        k = n - 1\n        while j &lt; k:\n            total_sum = arr[i] + arr[j] + arr[k]\n            if total_sum &lt; 0:\n                j += 1\n            elif total_sum > 0:\n                k -= 1\n            else:\n                temp = [arr[i], arr[j], arr[k]]\n                ans.append(temp)\n                j += 1\n                k -= 1\n                # skip the duplicates:\n                while j &lt; k and arr[j] == arr[j - 1]:\n                    j += 1\n                while j &lt; k and arr[k] == arr[k + 1]:\n                    k -= 1\n\n    return ans\n\n\narr = [-1, 0, 1, 2, -1, -4]\nn = len(arr)\nans = triplet(n, arr)\nfor it in ans:\n    print(\"[\", end=\"\")\n    for i in it:\n        print(i, end=\" \")\n    print(\"]\", end=\" \")\nprint()\n\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\n<!-- Insert Python code of Optimal Approach Here -->\nfunction triplet(n, arr) {\n    let ans = [];\n    arr.sort((a, b) => a - b);\n    for (let i = 0; i &lt; n; i++) {\n        // remove duplicates:\n        if (i !== 0 &amp;&amp; arr[i] === arr[i - 1]) continue;\n\n        // moving 2 pointers:\n        let j = i + 1;\n        let k = n - 1;\n        while (j &lt; k) {\n            let sum = arr[i] + arr[j] + arr[k];\n            if (sum &lt; 0) {\n                j++;\n            } else if (sum > 0) {\n                k--;\n            } else {\n                let temp = [arr[i], arr[j], arr[k]];\n                ans.push(temp);\n                j++;\n                k--;\n                // skip the duplicates:\n                while (j &lt; k &amp;&amp; arr[j] === arr[j - 1]) j++;\n                while (j &lt; k &amp;&amp; arr[k] === arr[k + 1]) k--;\n            }\n        }\n    }\n    return ans;\n}\n\nlet arr = [-1, 0, 1, 2, -1, -4];\nlet n = arr.length;\nlet ans = triplet(n, arr);\nfor (let it of ans) {\n    process.stdout.write(\"[\");\n    for (let i of it) {\n        process.stdout.write(i + \" \");\n    }\n    process.stdout.write(\"] \");\n}\nconsole.log();\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Optimal Apporach Here -->\n<strong>Output:</strong> [-1 -1 2 ] [-1 0 1 ] \n\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Optimal Approach-->\n<p><strong>Time Complexity: </strong>O(NlogN)+O(N<sup>2</sup>), where N = size of the array.<br><strong>Reason: </strong>The pointer i, is running for approximately N times. And both the pointers j and k combined can run for approximately N times including the operation of skipping duplicates. So the total time complexity will be O(N<sup>2</sup>).&nbsp;</p>\n<p><strong>Space Complexity: </strong>O(no. of quadruplets), <strong><em>This space is only used to store the answer. We are not using any extra space to solve this problem.</em></strong> So, from that perspective, space complexity can be written as O(1).</p>\n</p>\n</details>\n</div>\n</details>\n</div>\n<!-- Optimal Approach Starts from here -->\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n<details>\n<summary class=\"main-summary\">\n<span>\nVideo Explanation\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"yt-video-wrapper\">\n\n<!-- Insert iframe embed Link of Youtube Video-->\n<iframe class=\"lazy-loaded\" loading=\"lazy\" title=\"3 Sum Problem\" width=\"810\" height=\"456\" data-lazy-type=\"iframe\" data-src=\"https://www.youtube.com/embed/DhFh8Kw7ymk\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\" src=\"https://www.youtube.com/embed/DhFh8Kw7ymk?feature=oembed\"></iframe><noscript>\n<iframe loading=\"lazy\" title=\"3 Sum Problem\" width=\"810\" height=\"456\" src=\"https://www.youtube.com/embed/DhFh8Kw7ymk\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe></noscript>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script>\n\nconst codeSections = document.querySelectorAll('.code-section');\n\n// Get last selected language from localStorage or set default value\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\n// Update last selected language for all sections and store in localStorage\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\n// Handle copy button click event\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\n// Set initial state of the tabs\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<script>\nconst codeSections = document.querySelectorAll('.code-section');\n\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script src=\"https://takeuforward.org/UXApproachDropDowns/3ApproachJSScript.js\"></script>\n<!-- /wp:html -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to\u00a0<a style=\"font-weight: bold;\" href=\"https://www.linkedin.com/in/naman-daga-04071/\" target=\"_blank\" rel=\"noreferrer noopener nofollow\">Naman Daga</a><em><em><strong>,\u00a0<em><a href=\"https://www.linkedin.com/in/imsudip/\" target=\"_blank\" rel=\"noreferrer noopener\">Sudip Ghosh</a></em></strong></em></em></em> <em>and <strong><a href=\"https://www.linkedin.com/in/kriti39/\" title=\"\">KRITIDIPTA GHOSH</a></strong></em> <em>for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,\u00a0</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->",
    "category_tag": "data-structure",
    "likes": 353,
    "preview": "Problem Statement: Given an array of N integers, your task is to find unique triplets that add up to give a sum of zero. In short, you need to return an array of all the unique triplets [arr[a], ar..."
}