{
    "dislikes": 4,
    "video": "WBgsABoClE0",
    "publishedOn": "Sun Mar 24 2024 22:09:21 GMT+0530 (India Standard Time)",
    "slug": "palindrome-partitioning",
    "aid": "1461",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/palindrome-partitioning",
    "title": "Palindrome Partitioning",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "recursion",
            "topic-title": "Recursion"
        }
    ],
    "likes": 113,
    "category_tag": "data-structure",
    "preview": "Problem Statement: You are given a string s, partition it in such a way that every substring is a palindrome. Return all such palindromic partitions of s. Note: A palindrome string is a string that...",
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement:</strong> You are given a string s, partition it in such a way that every substring is a palindrome. Return all such palindromic partitions of s.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Note: </strong>A palindrome string is a string that reads the same backward as forward.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Examples:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\"><strong>Example 1:</strong>\n\n<strong>Input:</strong> s = \u201caab\u201d\n\n<strong>Output:</strong> [ [\"a\",\"a\",\"b\"], [\"aa\",\"b\"] ]\t\n\n<strong>Explanation:</strong> The first  answer is generated by  making three partitions. The second answer is generated by making two partitions.\n \n\n<img width=\"195\" height=\"92\" src=\"https://lh5.googleusercontent.com/WN8D2p5w0OtGffSbDjDfho0A6f_-Hdz_i687Pr7IksStKWkalVy8tS8tttZryvEroiBa0fJFywDXXjKajQxhThXz5YhRqTXAk1ogDEc_59AG8iiDLt9XSk-Z9GECqLX52lcpI4Zp\"></pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\"><strong>Example 2:</strong>\n\n<strong>Input:</strong> s = \u201caabb\u201d\n\n<strong>Output:</strong> [ [\u201ca\u201d,\u201da\u201d,\u201db\u201d,\u201db\u201d], [\u201caa\u201d,\u201dbb\u201d], [\u201ca\u201d,\u201da\u201d,\u201dbb\u201d], [\u201caa\u201d,\u201db\u201d,\u201db\u201d] ] \n\n<strong>Explanation:</strong> See Figure\n\n\n<img width=\"370.0537905693054\" height=\"89\" src=\"https://lh3.googleusercontent.com/JwIUbK7A0C6xVPJXJcEAnIuFpmwv4YWqJ6VA3fW9rP2GoLDyNGXYug4fOdJev72jKEj5tzWMhQbhuq0pxvx2gun1dlqmRGFuoaDjfoYi1Dg--1tzun8Qcml7786AAR-4GyodD3pv\"></pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Solution</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"textColor\":\"vivid-red\"} -->\n<p class=\"has-vivid-red-color has-text-color\"><strong><em>Disclaimer</em></strong>: <em>Don't jump directly to the solution, try it out yourself&nbsp;</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Approach</strong>: The initial idea will be to make partitions to generate substring and check if the substring generated out of the partition will be a palindrome. Partitioning means we would end up generating every substring and checking for palindrome at every step. Since this is a repetitive task being done again and again, at this point we should think of recursion. The recursion continues until the entire string is exhausted. After partitioning, every palindromic substring is inserted in a data structure When the base case has reached the list of palindromes generated during that recursion call is inserted in a vector of vectors/list of list.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We have already discussed the initial thought process and the basic outline of the solution. The approach will get clearer with an example.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Say s = \u201caabb\u201d and assume indexes of string characters to be 0-based. For a better understanding, we have divided recursion into some steps.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>STEP 1</strong>: We consider substrings starting from the 0th index.[0,0] is a palindrome, so partition right after the 0th index.[0,1] is another palindrome, make a partition after 1st index. Beyond this point, other substrings starting from index 0 are \u201caab\u201d&nbsp; and \u201caabb\u201d. These are not palindromes, hence no more. partitions are possible. The strings remaining on the right side of the partition are used as input to make recursive calls.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":888,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2021/12/image-6.png\" alt=\"\" class=\"wp-image-888\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p> <strong>STEP 2</strong>: Consider the recursive call on the left(<em>refer to image)</em>&nbsp; where \u201cabb\u201d is the input.<strong>[1,1] </strong>is a palindrome, make a partition after it.[1,2] and [1,3] are not palindromes.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":889,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2021/12/image-7.png\" alt=\"\" class=\"wp-image-889\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>STEP 3</strong>: Here \u201cbb\u201d is the input.<strong>[2,2] </strong>as well as <strong>[2,3]</strong>&nbsp; are palindromes. Make one partition after the 2nd index and one after the 3rd index The entire string is exhausted after the 3rd index, so the right recursion ends here. Palindromes generated from the right recursion are inserted in our answer.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Our answer at this point :[ [\u201ca\u201d,\u201d </strong>a\u201d,\u201d <strong>bb\u201d] ]</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":890,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2021/12/image-8.png\" alt=\"\" class=\"wp-image-890\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>The left recursion will continue with&nbsp; \"b\" as its input.<strong>[3,3]</strong> is a palindrome so one last partition for the left recursion is made after the 3rd index. Insert the palindromes.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>ans = [&nbsp; [\u201ca\u201d,\u201da\u201d,\u201dbb\u201d], [ \u201ca\u201d,\u201da\u201d,\u201db\u201d,\u201db\u201d] ]&nbsp;</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>STEP 4: After the list of palindromic substrings are returned from the left recursive call, continue the same process for the call on the right that was left to recur. The right recursion is having \u201cbb\u201d as input, something we have already encountered in step 3. Hence we will repeat the same task which was done in step 3 onwards.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":891,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2021/12/image-9.png\" alt=\"\" class=\"wp-image-891\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>Final answer : [&nbsp; [\u201ca\u201d,\u201da\u201d,\u201dbb\u201d], [ \u201ca\u201d,\u201da\u201d,\u201db\u201d,\u201db\u201d] ,[\u201caa\u201d,\u201db\u201d,\u201db\u201d], [\u201caa\u201d,\u201dbb\u201d] ]</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\nclass Solution {\n  public:\n    vector &lt; vector &lt; string &gt;&gt; partition(string s) {\n      vector &lt; vector &lt; string &gt; &gt; res;\n      vector &lt; string &gt; path;\n      partitionHelper(0, s, path, res);\n      return res;\n    }\n\n  void partitionHelper(int index, string s, vector &lt; string &gt; &amp; path,\n    vector &lt; vector &lt; string &gt; &gt; &amp; res) {\n    if (index == s.size()) {\n      res.push_back(path);\n      return;\n    }\n    for (int i = index; i &lt; s.size(); ++i) {\n      if (isPalindrome(s, index, i)) {\n        path.push_back(s.substr(index, i - index + 1));\n        partitionHelper(i + 1, s, path, res);\n        path.pop_back();\n      }\n    }\n  }\n\n  bool isPalindrome(string s, int start, int end) {\n    while (start &lt;= end) {\n      if (s[start++] != s[end--])\n        return false;\n    }\n    return true;\n  }\n};\nint main() {\n  string s = \"aabb\";\n  Solution obj;\n  vector &lt; vector &lt; string &gt;&gt; ans = obj.partition(s);\n  int n = ans.size();\n  cout &lt;&lt; \"The Palindromic partitions are :-\" &lt;&lt; endl;\n  cout &lt;&lt; \" [ \";\n  for (auto i: ans) {\n    cout &lt;&lt; \"[ \";\n    for (auto j: i) {\n      cout &lt;&lt; j &lt;&lt; \" \";\n    }\n    cout &lt;&lt; \"] \";\n  }\n  cout &lt;&lt; \"]\";\n\n  return 0;\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The Palindromic partitions are :-<br>[ [ a a b b ] [ a a bb ] [ aa b b ] [ aa bb ] ]</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: <strong>O( (2^n) *k*(n/2) )</strong></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Reason: O(2^n) </strong>to generate every substring and<strong> O(n/2) </strong>&nbsp;to check if the substring generated is a palindrome. O(k) is for inserting the palindromes in another data structure, where k&nbsp; is the average length of the palindrome list.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(k * x)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Reason: </strong>The space complexity can vary depending upon the length of the<strong> </strong>answer. k is the average length of the list of palindromes and if we have x such list of palindromes in our final answer. The depth of the recursion tree is n, so the auxiliary space required is equal to the O(n).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\nclass TUF {\n    public static List &lt; List &lt; String &gt;&gt; partition(String s) {\n        List &lt; List &lt; String &gt;&gt; res = new ArrayList &lt; &gt; ();\n        List &lt; String &gt; path = new ArrayList &lt; &gt; ();\n        partitionHelper(0, s, path, res);\n        return res;\n    }\n\n    static void partitionHelper(int index, String s, List &lt; String &gt; path, List &lt; List &lt; String &gt;&gt; res) {\n        if (index == s.length()) {\n            res.add(new ArrayList &lt; &gt; (path));\n            return;\n        }\n        for (int i = index; i &lt; s.length(); ++i) {\n            if (isPalindrome(s, index, i)) {\n                path.add(s.substring(index, i + 1));\n                partitionHelper(i + 1, s, path, res);\n                path.remove(path.size() - 1);\n            }\n        }\n    }\n\n    static boolean isPalindrome(String s, int start, int end) {\n        while (start &lt;= end) {\n            if (s.charAt(start++) != s.charAt(end--))\n                return false;\n        }\n        return true;\n    }\n\n    public static void main(String args[]) {\n        String s = \"aabb\";\n        List &lt; List &lt; String &gt;&gt; ans = partition(s);\n        int n = ans.size();\n        System.out.println(\"The Palindromic partitions are :-\");\n        System.out.print(\" [ \");\n        for (int i = 0; i &lt; ans.size(); i++) {\n            System.out.print(\"[ \");\n            for (int j = 0; j &lt; ans.get(i).size(); j++) {\n                System.out.print(ans.get(i).get(j) + \" \");\n            }\n            System.out.print(\"] \");\n        }\n        System.out.print(\"]\");\n\n\n    }\n\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The Palindromic partitions are :-<br>[ [ a a b b ] [ a a bb ] [ aa b b ] [ aa bb ] ]</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: <strong>O( (2^n) *k*(n/2) )</strong></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Reason: O(2^n) </strong>to generate every substring and<strong> O(n/2) </strong>&nbsp;to check if the substring generated is a palindrome. O(k) is for inserting the palindromes in another data structure, where k&nbsp; is the average length of the palindrome list.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(k * x)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Reason: </strong>The space complexity can vary depending upon the length of the<strong> </strong>answer. k is the average length of the list of palindromes and if we have x such list of palindromes in our final answer. The depth of the recursion tree is n, so the auxiliary space required is equal to the O(n).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block\" data-lang=\"python\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code class=\"\">from typing import List\n\n\n\n\nclass Solution:\n    def partition(self, s: str) -> List[List[str]]:\n        res = []\n        path = []\n\n\n        def partitionHelper(index: int):\n            if index == len(s):\n                res.append(path[:])\n                return\n            for i in range(index, len(s)):\n                if isPalindrome(s, index, i):\n                    path.append(s[index:i + 1])\n                    partitionHelper(i + 1)\n                    path.pop()\n\n\n        def isPalindrome(s: str, start: int, end: int) -> bool:\n            while start &lt;= end:\n                if s[start] != s[end]:\n                    return False\n                start += 1\n                end -= 1\n            return True\n\n\n        partitionHelper(0)\n        return res\n\n\n\n\nif __name__ == \"__main__\":\n    s = \"aabb\"\n    obj = Solution()\n    ans = obj.partition(s)\n    print(\"The Palindromic partitions are :-\")\n    print(\" [ \", end=\"\")\n    for i in ans:\n        print(\"[ \", end=\"\")\n        for j in i:\n            print(j, end=\" \")\n        print(\"] \", end=\"\")\n    print(\"]\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The Palindromic partitions are :-<br>[ [ a a b b ] [ a a bb ] [ aa b b ] [ aa bb ] ]</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: <strong>O( (2^n) *k*(n/2) )</strong></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Reason: O(2^n) </strong>to generate every substring and<strong> O(n/2) </strong>&nbsp;to check if the substring generated is a palindrome. O(k) is for inserting the palindromes in another data structure, where k&nbsp; is the average length of the palindrome list.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(k * x)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Reason: </strong>The space complexity can vary depending on the length of the<strong> </strong>answer. k is the average length of the list of palindromes and if we have x such list of palindromes in our final answer. The depth of the recursion tree is n, so the auxiliary space required is equal to the O(n).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to\u00a0<strong><strong><a href=\"https://www.linkedin.com/in/somparna-c-a724a5121/\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>Somparna Chakrabarti</strong></a></strong></strong>\u00a0<em><strong><em><strong>and\u00a0<em><a href=\"https://www.linkedin.com/in/imsudip/\" target=\"_blank\" rel=\"noreferrer noopener\">Sudip Ghosh</a></em></strong></em></strong></em></em> <em>for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,\u00a0</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->"
}