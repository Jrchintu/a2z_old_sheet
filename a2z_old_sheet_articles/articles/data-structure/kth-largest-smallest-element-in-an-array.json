{
    "dislikes": 8,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:10:30 GMT+0530 (India Standard Time)",
    "slug": "kth-largest-smallest-element-in-an-array",
    "aid": "1796",
    "title": "Kth largest/smallest element in an array",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/k-th-largest-element-in-an-array",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "queue",
            "topic-title": "Queue"
        },
        {
            "topic-id": "sorting",
            "topic-title": "Sorting"
        }
    ],
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement</strong>: Given an unsorted array, print Kth Largest and Smallest Element from an unsorted array.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Examples:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\"><strong>Example 1:</strong>\n<strong>Input:</strong> Array = [1,2,6,4,5,3] , K = 3 \n<strong>Output:</strong> kth largest element = 4, kth smallest element = 3\n\n<strong>Example 2:</strong>\n<strong>Input:</strong> Array = [1,2,6,4,5] , k = 3\nOutput : kth largest element = 4,  kth smallest element = 4\n</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Solution</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"textColor\":\"accent\"} -->\n<p class=\"has-accent-color has-text-color\"><strong><em>Disclaimer</em></strong>: <em>Don't jump directly to the solution, try it out yourself first.&nbsp;&nbsp;&nbsp;</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3>Solution 1: Sorting the Array</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><li>The most naive approach is to sort the given array in descending order.</li><li>The index of kth Largest element = k-1 ( zero-based indexing )&nbsp;</li><li>The index of kth Smallest element = n-k&nbsp;</li><li>The array can also be sorted in ascending order.</li><li>The index of kth Largest element = n-k&nbsp;</li><li>The index of kth Smallest element = k-1 ( zero based indexing )</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><img width=\"751\" height=\"305\" src=\"https://lh4.googleusercontent.com/X_GAQYkwz-qKMsl-IJqelph8HJ7jL1A9bcmn6C_Vy-9mjPHFJlkj5IBhpd1tVwVYTy341yW5tBqqGv57EAFf11PbKljobol664_D8_ikxEpZXQcuJYwl4bHlnLbwOxsE5nbDNVs8\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>[tabby title=\"C++ Code\"]  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include &lt;bits/stdc++.h&gt;\nusing namespace std ;\n\nclass Solution {\n\npublic:\n\nvoid kth_Largest_And_Smallest_By_AscendingOrder(vector&lt;int&gt;&amp;arr, int k) {\n\n        sort(arr.begin(), arr.end())  ;\n        int n = arr.size()  ;\n\n        cout &lt;&lt; \"kth Largest element \" &lt;&lt; arr[n - k] &lt;&lt; \", \" &lt;&lt; \n        \"kth Smallest element \" &lt;&lt; arr[k - 1];\n    }\n} ;\nint main() {\n\n    vector&lt;int&gt;arr = {1, 2, 6, 4, 5, 3}  ;\n\n    Solution obj ;\n    \n    obj.kth_Largest_And_Smallest_By_AscendingOrder(arr, 3) ;\n\n    return 0 ;\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> kth Largest element 4, kth Smallest element 3</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time complexity</strong>: O(nlogn)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space complexity:</strong> O(1)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>[tabby title=\"Java Code\"] </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\n\nclass Solution {\n\nstatic void kth_Largest_And_Smallest_By_AscendingOrder(int[] arr, int k) {\n\n        Arrays.sort(arr);\n        int n = arr.length;\n\n        System.out.println(\"kth Largest element \"+arr[n - k]+\", \"+\n        \"kth Smallest element \"+arr[k - 1]);\n    }\n    \npublic static void main(String args[]) {\n\n    int arr[] = {1, 2, 6, 4, 5, 3}  ;\n    \n    kth_Largest_And_Smallest_By_AscendingOrder(arr, 3) ;\n\n}\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> kth Largest element 4, kth Smallest element 3</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time complexity</strong>: O(nlogn)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space complexity:</strong> O(1)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p> [tabby title=\"Python Code\"]</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">from typing import List\n\n\n\n\nclass Solution:\n    def kth_Largest_And_Smallest_By_AscendingOrder(self, arr: List[int], k: int) -> None:\n        arr.sort()\n        n = len(arr)\n\n\n        print(\n            f\"kth Largest element {arr[n - k]}, kth Smallest element {arr[k - 1]}\")\n\n\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 6, 4, 5, 3]\n    Solution().kth_Largest_And_Smallest_By_AscendingOrder(arr, 3)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> kth Largest element 4, kth Smallest element 3</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time complexity</strong>: O(nlogn)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space complexity:</strong> O(1)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>[tabbyending] </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3>Solution 2: Using Heap</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><li>The idea is to construct a max-heap of elements. Since the top element of the max heap is the largest element of the heap, we will remove the top K-1 elements from the heap.\u00a0 The top element will be Kth's Largest element.</li><li>To get the Kth Smallest element, we will use a min-heap. After the removal of the top k-1 elements, the Kth Smallest element is top of the Priority queue.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">Let the array be\n[17,7,2,30,21] and k = 3\n</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p><img width=\"699\" height=\"480\" src=\"https://lh5.googleusercontent.com/U7kPu_tm4V87y60CiSgOls7kvNebw7f4LHrrVGg_3bYHLainNCqMNCJzaDI92rdbnkr7RY-gK3HVLRbKcIcoPW6ttTwDUnaT58LdNg_QsZq9Kz7TF-2kvZxvOfKf2aCL_4kZAMGm\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"714\" height=\"301\" src=\"https://lh5.googleusercontent.com/sIDuukBR3NL-XCNGpdYEdqFb9c19ECiIfQ1IWfFNIrNQIvIUMvZ_eZogXQeA9ahDMmaYPUYpZpewZWMSe0j1RtmWVWCb9GJ87G6UkuSKoWIfJeDloS1nnBBlD4DUmCVa___yhmYG\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Similarly, for the smallest kth element we will be using Min-Heap. After, extracting the top k-1 values will be having Kth Smallest element.</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include &lt;bits/stdc++.h&gt;\nusing namespace std ;\n\nclass Solution {\n\npublic:\n\n    void kth_Largest_MaxHeap(vector&lt;int&gt;&amp;arr, int k) {\n\n        priority_queue&lt;int&gt;pq ;\n        int n = arr.size()  ;\n\n        for (int i = 0; i &lt; arr.size(); i++) {\n            pq.push(arr[i])  ;\n        }\n\n        int f = k - 1 ;\n\n        while (f &gt; 0) {\n            pq.pop()  ;\n            f-- ;\n        }\n\n        cout &lt;&lt; \"Kth Largest element \" &lt;&lt; pq.top() &lt;&lt; \"\\n\"  ;\n    }\n\n    void kth_Smallest_MinHeap(vector&lt;int&gt;&amp;arr, int k) {\n\n        priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt;pq ;\n        int n = arr.size()  ;\n\n        for (int i = 0; i &lt; arr.size(); i++) {\n            pq.push(arr[i])  ;\n        }\n\n        int f = k - 1 ;\n\n        while (f &gt; 0) {\n            pq.pop()  ;\n            f-- ;\n        }\n\n        cout &lt;&lt; \"Kth Smallest element \" &lt;&lt; pq.top() &lt;&lt; \"\\n\"  ;\n    }\n} ;\nint main() {\n\n    vector&lt;int&gt;arr = {1, 2, 6, 4, 5, 3}  ;\n\n    Solution obj ;\n    obj.kth_Largest_MaxHeap(arr, 3)  ;\n    obj.kth_Smallest_MinHeap(arr, 3)  ;\n\n    return 0 ;\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Kth Largest element 4<br>Kth Smallest element 3</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time complexity:</strong> O(k+(n-k)*log(k))&nbsp; , n = size of array</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space complexity:</strong> O(k)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\nclass Solution {\n\n    static void kth_Largest_MaxHeap(int[] arr, int k) {\n\n        PriorityQueue&lt;Integer&gt;pq= new PriorityQueue&lt;&gt;((a,b)-&gt;b-a);\n        \n        int n = arr.length  ;\n\n        for (int i = 0; i &lt; arr.length; i++) {\n            pq.add(arr[i])  ;\n        }\n\n        int f = k - 1 ;\n\n        while (f &gt; 0) {\n            pq.remove()  ;\n            f-- ;\n        }\n\n        System.out.println(\"Kth Largest element \"+pq.peek())  ;\n    }\n\n    static void kth_Smallest_MinHeap(int[] arr, int k) {\n\n        PriorityQueue&lt;Integer&gt;pq= new PriorityQueue&lt;&gt;();\n        int n = arr.length  ;\n\n        for (int i = 0; i &lt; n; i++) {\n            pq.add(arr[i])  ;\n        }\n\n        int f = k - 1 ;\n\n        while (f &gt; 0) {\n            pq.remove()  ;\n            f-- ;\n        }\n\n        System.out.println(\"Kth Smallest element \"+pq.peek())  ;\n    }\n \npublic static void main(String args[]) {\n\n    int arr[] = {1, 2, 6, 4, 5, 3}  ;\n\n    kth_Largest_MaxHeap(arr, 3)  ;\n    kth_Smallest_MinHeap(arr, 3)  ;\n}\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Kth Largest element 4<br>Kth Smallest element 3</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time complexity:</strong> O(k+(n-k)*log(k))&nbsp; , n = size of array</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space complexity:</strong> O(k)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block\" data-lang=\"python\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">import heapq\n\n\n\n\nclass Solution:\n    def kth_Largest_MaxHeap(self, arr, k):\n        pq = []\n        n = len(arr)\n        for i in range(n):\n            heapq.heappush(pq, -arr[i])\n\n\n        f = k - 1\n\n\n        while f > 0:\n            heapq.heappop(pq)\n            f -= 1\n\n\n        print(\"Kth Largest element\", -pq[0])\n\n\n    def kth_Smallest_MinHeap(self, arr, k):\n        pq = []\n        n = len(arr)\n\n\n        for i in range(n):\n            heapq.heappush(pq, arr[i])\n\n\n        f = k - 1\n\n\n        while f > 0:\n            heapq.heappop(pq)\n            f -= 1\n\n\n        print(\"Kth Smallest element\", pq[0])\n\n\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 6, 4, 5, 3]\n\n\n    obj = Solution()\n    obj.kth_Largest_MaxHeap(arr, 3)\n    obj.kth_Smallest_MinHeap(arr, 3)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Kth Largest element 4<br>Kth Smallest element 3</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time complexity:</strong> O(k+(n-k)*log(k))&nbsp; , n = size of array</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space complexity:</strong> O(k)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3>Solution 3: Using Quickselect Algorithm</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><li>Choose any random element as PIVOT.</li><li>Use<strong> Partition Algorithm </strong>to partition the given array into 2 parts and place the PIVOT at its correct position ( called as index ).</li><li><strong>Partition Algorithm: </strong>All the elements are compared to the PIVOT, and the elements less than the PIVOT are shifted toward the left side of the array and greater ones are shifted toward the right side of the array.</li><li>Now since all elements right to the PIVOT are greater and left to the PIVOT are smaller, compare the index with N-k ( where N = size of the array )\u00a0 and recursively find the part to find the Kth largest element.</li><li>The worst-case time complexity of this method is O(n^2) but its Average time complexity is O(n).</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><img width=\"760\" height=\"418\" src=\"https://lh3.googleusercontent.com/S6eZ5Najzjp8wt0IfHQOwCjcpT8rE2kXHd2rsOZP6VCO54890G0FLyMy-GoGWZAUyp5rVlEvWQczL6Ozk3tXSZ5Vom-B5hlJEvQfqGKMKS7kIejT_ILTqiE183cA4cE5xI1-nDpT\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code for kth largest element:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include &lt;bits/stdc++.h&gt;\nusing namespace std ;\n\nint partition(vector&lt;int&gt;&amp; arr, int left, int right) {\n    int pivot = arr[left] ;\n    int l = left + 1 ;\n    int r = right;\n    while (l &lt;= r) {\n        if (arr[l] &lt; pivot &amp;&amp; arr[r] &gt; pivot) {\n            swap(arr[l], arr[r]);\n            l++ ;\n            r-- ;\n        }\n        if (arr[l] &gt;= pivot) {\n            l++;\n        }\n        if (arr[r] &lt;= pivot) {\n            r--;\n        }\n    }\n    swap(arr[left], arr[r]);\n    return r;\n}\n\nint kth_Largest_Element(vector&lt;int&gt;&amp; arr, int k) {\n    int left = 0, right = arr.size() - 1, kth;\n    while (1) {\n        int idx = partition(arr, left, right);\n        if (idx == k - 1) {\n            kth = arr[idx];\n            break;\n        }\n        if (idx &lt; k - 1) {\n            left = idx + 1;\n        } else {\n            right = idx - 1;\n        }\n    }\n    return kth;\n}\n\n\n\nint main() {\n\n    vector&lt;int&gt;arr ;\n    arr.push_back(12) ;\n    arr.push_back(3)  ;\n    arr.push_back(5) ;\n    arr.push_back(7)  ;\n    arr.push_back(4) ;\n    arr.push_back(19)  ;\n    arr.push_back(26) ;\n\n    int n = arr.size(), k = 1;\n    cout &lt;&lt; \"Kth Largest element is \" &lt;&lt; kth_Largest_Element(arr, k);\n    return 0 ;\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> Kth Largest element is 26</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time complexity:</strong> O(n) , where n = size of the array</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space complexity:</strong> O(1)&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\n\nclass TUF{\nstatic int partition(int[] arr, int left, int right) {\n    int pivot = arr[left] ;\n    int l = left + 1 ;\n    int r = right;\n    while (l &lt;= r) {\n        if (arr[l] &lt; pivot &amp;&amp; arr[r] &gt; pivot) {\n            int temp=arr[l];\n            arr[l]=arr[r];\n            arr[r]=temp;\n            l++ ;\n            r-- ;\n        }\n        if (arr[l] &gt;= pivot) {\n            l++;\n        }\n        if (arr[r] &lt;= pivot) {\n            r--;\n        }\n    }\n    int temp2=arr[left];\n            arr[left]=arr[r];\n            arr[r]=temp2;\n    return r;\n}\n\nstatic int kth_Largest_Element(int[] arr, int k) {\n    int left = 0, right = arr.length - 1, kth;\n    while (true) {\n        int idx = partition(arr, left, right);\n        if (idx == k - 1) {\n            kth = arr[idx];\n            break;\n        }\n        if (idx &lt; k - 1) {\n            left = idx + 1;\n        } else {\n            right = idx - 1;\n        }\n    }\n    return kth;\n}\n\npublic static void main(String args[]) {\n\n    int arr[]={12,3,5,7,4,19,26};\n\n    int n = arr.length, k = 1;\n    System.out.println(\"Kth Largest element is \"+kth_Largest_Element(arr, k));\n    }\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> Kth Largest element is 26</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time complexity:</strong> O(n) , where n = size of the array</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space complexity:</strong> O(1)&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block\" data-lang=\"python\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">from typing import List\n\n\n\n\ndef partition(arr: List[int], left: int, right: int) -> int:\n    pivot = arr[left]\n    l = left + 1\n    r = right\n    while l &lt;= r:\n        if arr[l] &lt; pivot and arr[r] > pivot:\n            arr[l], arr[r] = arr[r], arr[l]\n            l += 1\n            r -= 1\n        if arr[l] >= pivot:\n            l += 1\n        if arr[r] &lt;= pivot:\n            r -= 1\n\n\n    arr[left], arr[r] = arr[r], arr[left]\n    return r\n\n\n\n\ndef kth_Largest_Element(arr: List[int], k: int) -> int:\n    left = 0\n    right = len(arr) - 1\n    kth = 0\n    while 1:\n        idx = partition(arr, left, right)\n        if idx == k - 1:\n            kth = arr[idx]\n            break\n        if idx &lt; k - 1:\n            left = idx + 1\n        else:\n            right = idx - 1\n\n\n    return kth\n\n\n\n\nif __name__ == \"__main__\":\n    arr = [12, 3, 5, 7, 4, 19, 26]\n    n = len(arr)\n    k = 1\n    print(f\"Kth Largest element is {kth_Largest_Element(arr, k)}\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> Kth Largest element is 26</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time complexity:</strong> O(n) , where n = size of the array</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space complexity:</strong> O(1)&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>code for Kth Smallest element:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint partition(vector&lt;int&gt;&amp;arr, int l, int r)\n{\n\tint f = arr[r] ;\n\tint i = l;\n\n\tfor (int j = l; j &lt;= r - 1; j++) {\n\t\tif (arr[j] &lt;= f) {\n\t\t\tswap(arr[i], arr[j]) ;\n\t\t\ti++;\n\t\t}\n\t}\n\tswap(arr[i], arr[r]);\n\treturn i;\n}\n\n\nint kth_Smallest_Element(vector&lt;int&gt;&amp;arr, int l, int r, int k)\n{\n\tif (k &lt;= r - l + 1 &amp;&amp; k &gt; 0) {\n\n\t\tint ind = partition(arr, l, r);\n\n\n\t\tif (ind - l == k - 1) {\n\t\t\treturn arr[ind];\n\t\t}\n\t\tif (ind - l &gt; k - 1) {\n\t\t\treturn kth_Smallest_Element(arr, l, ind - 1, k);\n\t\t}\n\n\n\t\treturn kth_Smallest_Element(arr, ind + 1, r, k - ind + l - 1);\n\t}\n\treturn INT_MAX;\n}\n\nint main()\n{\n\n\tvector&lt;int&gt;arr ;\n\tarr.push_back(12) ;\n\tarr.push_back(3)  ;\n\tarr.push_back(5) ;\n\tarr.push_back(7)  ;\n\tarr.push_back(4) ;\n\tarr.push_back(19)  ;\n\tarr.push_back(26) ;\n\n\tint n = arr.size(), k = 1;\n\tcout &lt;&lt; \"Kth smallest element is \" &lt;&lt; kth_Smallest_Element(arr, 0, n - 1, k);\n\treturn 0;\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> Kth smallest element is 3</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time complexity:</strong> O(n) ,where n = size of the array</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space complexity:</strong> O(1)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\n\nclass TUF{\nstatic int partition(int[] arr, int l, int r) {\n    \n    int f = arr[r] ;\n\tint i = l;\n\n\tfor (int j = l; j &lt;= r - 1; j++) {\n\t\tif (arr[j] &lt;= f) {\n\t\t    int temp=arr[i];\n\t\t    arr[i]=arr[j];\n\t\t    arr[j]=temp;\n\t\t\ti++;\n\t\t}\n\t}\n\tint temp=arr[i];\n        arr[i]=arr[r];\n        arr[r]=temp;\n\treturn i;\n}\n\nstatic int kth_Smallest_Element(int[] arr,int l,int r, int k) {\n    if (k &lt;= r - l + 1 &amp;&amp; k &gt; 0) {\n\n\t\tint ind = partition(arr, l, r);\n\n\n\t\tif (ind - l == k - 1) {\n\t\t\treturn arr[ind];\n\t\t}\n\t\tif (ind - l &gt; k - 1) {\n\t\t\treturn kth_Smallest_Element(arr, l, ind - 1, k);\n\t\t}\n\n\n\t\treturn kth_Smallest_Element(arr, ind + 1, r, k - ind + l - 1);\n\t}\n\treturn Integer.MAX_VALUE;\n}\n\npublic static void main(String args[]) {\n\n    int arr[]={12,3,5,7,4,19,26};\n\n    int n = arr.length, k = 1;\n    System.out.println(\"Kth Smallest element is \"+kth_Smallest_Element(arr, 0,n-1,k));\n    }\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> Kth smallest element is 3</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time complexity:</strong> O(n) ,where n = size of the array</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space complexity:</strong> O(1)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block\" data-lang=\"python\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">from typing import List\n\n\n\n\ndef partition(arr: List[int], l: int, r: int) -> int:\n    f = arr[r]\n    i = l\n    for j in range(l, r):\n        if arr[j] &lt;= f:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n    arr[i], arr[r] = arr[r], arr[i]\n    return i\n\n\n\n\ndef kth_Smallest_Element(arr: List[int], l: int, r: int, k: int) -> int:\n    if k &lt;= r - l + 1 and k > 0:\n        ind = partition(arr, l, r)\n        if ind - l == k - 1:\n            return arr[ind]\n        if ind - l > k - 1:\n            return kth_Smallest_Element(arr, l, ind - 1, k)\n        return kth_Smallest_Element(arr, ind + 1, r, k - ind + l - 1)\n    return float(\"inf\")\n\n\n\n\nif __name__ == \"__main__\":\n    arr = [12, 3, 5, 7, 4, 19, 26]\n    n = len(arr)\n    k = 1\n    print(f\"Kth smallest element is {kth_Smallest_Element(arr, 0, n - 1, k)}\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> Kth smallest element is 3</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time complexity:</strong> O(n) ,where n = size of the array</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space complexity:</strong> O(1)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to\u00a0<strong><a href=\"https://www.linkedin.com/in/shreyas-vishwakarma-06517b190/\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>Shreyas Vishwakarma</strong></a></strong>\u00a0<em><em>and\u00a0<a href=\"https://www.linkedin.com/in/imsudip/\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>Sudip Ghosh</strong></a></em></em></em> <em>for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,\u00a0</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->",
    "category_tag": "data-structure",
    "likes": 74,
    "preview": "Problem Statement: Given an unsorted array, print Kth Largest and Smallest Element from an unsorted array. Examples: Example 1: Input: Array = [1,2,6,4,5,3] , K = 3 Output: kth largest element = 4,..."
}