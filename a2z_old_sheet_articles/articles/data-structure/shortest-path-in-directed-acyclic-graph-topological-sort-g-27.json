{
    "dislikes": 2,
    "video": "ZUFQfFaU-8U",
    "publishedOn": "Sun Mar 24 2024 22:11:42 GMT+0530 (India Standard Time)",
    "slug": "shortest-path-in-directed-acyclic-graph-topological-sort-g-27",
    "aid": "2145",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/shortest-path-in-dag",
    "title": "Shortest Path in Directed Acyclic Graph Topological Sort: G-27",
    "topics": [
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "graph",
            "topic-title": "Graph"
        }
    ],
    "category_tag": "data-structure",
    "likes": 135,
    "preview": "Given a DAG, find the shortest path from the source to all other nodes in this DAG. In this problem statement, we have assumed the source vertex to be \u20180\u2019. You will be given the weighted edges of t...",
    "content": "<!-- wp:paragraph -->\n<p>Given a DAG, find the shortest path from the source to all other nodes in this DAG. In this problem statement, we have assumed the source vertex to be \u20180\u2019. You will be given the weighted edges of the graph.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Note: </strong>What is a DAG ( Directed Acyclic Graph)?</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>A Directed Graph (containing one-sided edges) having no cycles is said to be a Directed Acyclic Graph.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Examples:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<pre><p><strong>Example 1:</strong></p>\n\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2022/10/image-7.png\" alt=\"\" class=\"wp-image-6724\"></figure>\n<p><strong>Input:</strong> n = 6, m= 7\nedges =[[0,1,2],[0,4,1],[4,5,4],[4,2,2],[1,2,3],[2,3,6],[5,3,1]]</p>\n<p><strong>Output:</strong> 0 2 3 6 1 5</p>\n<p><strong>Explanation:&nbsp;</strong> The above output list shows the <strong>shortest path</strong> \nto all the nodes from the source vertex (0),&nbsp;</p>\n<p>Dist[0] = 0&nbsp;</p>\n<p>Dist[1] = 2&nbsp;</p>\n<p>Dist[2] = 3&nbsp;</p>\n<p>Dist[3] = 6</p>\n<p>Dist[4] = 1</p>\n<p>Dist[5] = 5</p>\n</pre>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<pre>\n<p><strong>Example 2:</strong></p>\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2022/10/image-8.png\" alt=\"\" class=\"wp-image-6725\"/></figure>\n<p><strong>Input:</strong> n = 7, m= 8\nEdges =[[0,4,2],[0,5,3],[5,4,1],[4,6,3],[4,2,1],[6,1,2],[2,3,3],[1,3,1]]</p>\n<p><strong>Output:</strong> 0 7 3 6 2 3 5</p>\n<p><strong>Explanation:&nbsp;</strong></p>\n<p>The above output list shows the <strong>shortest path</strong> to all the nodes \nfrom the source vertex (0),&nbsp;</p>\n<p>Dist[0] = 0&nbsp;</p>\n<p>Dist[1] = 7&nbsp;</p>\n<p>Dist[2] = 3&nbsp;</p>\n<p>Dist[3] = 6</p>\n<p>Dist[4] = 2</p>\n<p>Dist[5] = 3</p>\n<p>Dist[6] = 5</p>\n</pre>\n<!-- /wp:html -->\n\n<!-- wp:paragraph -->\n<p><strong>Solution</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph {\"textColor\":\"accent\"} -->\n<p class=\"has-accent-color has-text-color\"><strong><em>Disclaimer</em></strong><strong>: </strong><strong><em>Don\u2019t jump directly to the solution, try it out yourself first.</em></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Intuition:</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Finding the shortest path to a vertex is easy if you already know the shortest paths to all the vertices that can precede it. Processing the vertices in topological order ensures that by the time you get to a vertex, you've already processed all the vertices that can precede it which reduces the computation time significantly. In this approach, we traverse the nodes sequentially according to their reachability from the source.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Dijkstra's algorithm is necessary for graphs that can contain cycles because they can't be topologically sorted. In other cases, the topological sort would work fine as we start from the first node, and then move on to the others in a directed manner.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Approach:</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>We will calculate the shortest path in a directed acyclic graph by using topological sort. Topological sort can be implemented in two ways- BFS and DFS. Here, we will be implementing using the DFS technique. Depth First Search, DFS is a traversal technique where we visit a node and then continue visiting its adjacent nodes until we reach the end point, i.e., it keeps on moving in the depth of a particular node and then backtracks when no further adjacent nodes are available.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Initial configuration:</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><li><strong>Adjacency List:</strong> Create an adjacency list of the formed vector of pairs of size \u2018N\u2019, where each index denotes a node \u2018u\u2019 and contains a vector that consists of pairs denoting the adjacent nodes \u2018v\u2019 and the distance to that adjacent node from initial node \u2018u\u2019.</li><li>Visited Array: Create a visited array and mark all the indices as unvisited (0) initially.</li><li>Stack: Define a stack data structure to store the topological sort.</li><li>Distance Array: Initialise this array by Max integer value and then update the value for each node successively while calculating the shortest distance between the source and the current node.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>The shortest path in a directed acyclic graph can be calculated by the following steps:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>Perform topological sort on the graph using BFS/DFS and store it in a stack. In order to get a hang of how the <strong>Topological Sort</strong> works, you can refer to <a href=\"https://takeuforward.org/data-structure/topological-sort-using-dfs/\">this article</a> for the same.&nbsp;</li><li>Now, iterate on the topo sort. We can keep the generated topo sort in the stack only, and do an iteration on it, it reduces the extra space which would have been required to store it. Make sure for the source node, we will assign dist[src] = 0.&nbsp;</li><li>For every node that comes out of the stack which contains our topo sort, we can traverse for all its adjacent nodes, and relax them.&nbsp;</li><li>In order to relax them, we simply do a simple comparison of dist[node] + wt and dist[adjNode]. Here dist[node] means the distance taken to reach the current node, and it is the edge weight between the node and the adjNode.&nbsp;</li><li>If (dist[node] + wt &lt; dist[adjNode]), then we will go ahead and update the distance of the dist[adjNode] to the new found better path.&nbsp;</li><li>Once all the nodes have been iterated, the dist[] array will store the shortest paths and we can then return it.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Note:</strong> If you wish to see the dry run of the above approach, you can watch the video attached to this article.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    \n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include&lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\nclass Solution {\n  private:\n    void topoSort(int node, vector &lt; pair &lt; int, int &gt;&gt; adj[],\n      int vis[], stack &lt; int &gt; &amp; st) {\n      //This is the function to implement Topological sort. \n      vis[node] = 1;\n      for (auto it: adj[node]) {\n        int v = it.first;\n        if (!vis[v]) {\n          topoSort(v, adj, vis, st);\n        }\n      }\n      st.push(node);\n    }\n  public:\n    vector &lt; int &gt; shortestPath(int N, int M, vector &lt; vector &lt; int &gt;&gt; &amp; edges) {\n\n      //We create a graph first in the form of an adjacency list.\n      vector &lt; pair &lt; int, int &gt;&gt; adj[N];\n      for (int i = 0; i &lt; M; i++) {\n        int u = edges[i][0];\n        int v = edges[i][1];\n        int wt = edges[i][2];\n        adj[u].push_back({v, wt}); \n      }\n      // A visited array is created with initially \n      // all the nodes marked as unvisited (0).\n      int vis[N] = {\n        0\n      };\n      //Now, we perform topo sort using DFS technique \n      //and store the result in the stack st.\n      stack &lt; int &gt; st;\n      for (int i = 0; i &lt; N; i++) {\n        if (!vis[i]) {\n          topoSort(i, adj, vis, st);\n        }\n      }\n      //Further, we declare a vector \u2018dist\u2019 in which we update the value of the nodes\u2019\n      //distance from the source vertex after relaxation of a particular node.\n\n      vector &lt; int &gt; dist(N);\n      for (int i = 0; i &lt; N; i++) {\n        dist[i] = 1e9;\n      }\n\n      dist[0] = 0;\n      while (!st.empty()) {\n        int node = st.top();\n        st.pop();\n\n        for (auto it: adj[node]) {\n          int v = it.first;\n          int wt = it.second;\n\n          if (dist[node] + wt &lt; dist[v]) {\n            dist[v] = wt + dist[node];\n          }\n        }\n      }\n\n      for (int i = 0; i &lt; N; i++) {\n        if (dist[i] == 1e9) dist[i] = -1;\n      }\n      return dist;\n    }\n};\n\nint main() {\n\n  int N = 6, M = 7;\n  \n  vector&lt;vector&lt;int&gt;&gt; edges= {{0,1,2},{0,4,1},{4,5,4},{4,2,2},{1,2,3},{2,3,6},{5,3,1}};\n  Solution obj;\n  vector &lt; int &gt; ans = obj.shortestPath(N, M, edges);\n\n  for (int i = 0; i &lt; ans.size(); i++) {\n\n    cout &lt;&lt; ans[i] &lt;&lt; \" \";\n  }\n\n  return 0;\n\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output</strong>:&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>0 2 3 6 1 5&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O(N+M) {for the topological sort} + O(N+M) {for relaxation of vertices, each node and its adjacent nodes get traversed} ~ O(N+M).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Where N= number of vertices and M= number of edges.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity:&nbsp; </strong>O( N) {for the stack storing the topological sort} + O(N) {for storing the shortest distance for each node} + O(N) {for the visited array} + O( N+2M) {for the adjacency list} ~ O(N+M) .</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Where N= number of vertices and M= number of edges.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\nimport java.lang.*;\nimport java.io.*;\n\nclass Main {\n\n  public static void main(String[] args) throws IOException {\n    int n = 6, m = 7;\n    int[][] edge = {{0,1,2},{0,4,1},{4,5,4},{4,2,2},{1,2,3},{2,3,6},{5,3,1}};\n    Solution obj = new Solution();\n    int res[] = obj.shortestPath(n, m, edge);\n    for (int i = 0; i &lt; n; i++) {\n      System.out.print(res[i] + \" \");\n    }\n    System.out.println();\n  }\n}\n\nclass Pair {\n  int first, second;\n  Pair(int _first, int _second) {\n    this.first = _first;\n    this.second = _second;\n  }\n}\n//User function Template for Java\nclass Solution {\n  private void topoSort(int node, ArrayList &lt; ArrayList &lt; Pair &gt;&gt; adj,\n    int vis[], Stack &lt; Integer &gt; st) {\n    //This is the function to implement Topological sort. \n\n    vis[node] = 1;\n    for (int i = 0; i &lt; adj.get(node).size(); i++) {\n      int v = adj.get(node).get(i).first;\n      if (vis[v] == 0) {\n        topoSort(v, adj, vis, st);\n      }\n    }\n    st.add(node);\n  }\n  public int[] shortestPath(int N, int M, int[][] edges) {\n    ArrayList &lt; ArrayList &lt; Pair &gt;&gt; adj = new ArrayList &lt; &gt; ();\n    for (int i = 0; i &lt; N; i++) {\n      ArrayList &lt; Pair &gt; temp = new ArrayList &lt; Pair &gt; ();\n      adj.add(temp);\n    }\n    //We create a graph first in the form of an adjacency list.\n\n    for (int i = 0; i &lt; M; i++) {\n      int u = edges[i][0];\n      int v = edges[i][1];\n      int wt = edges[i][2];\n      adj.get(u).add(new Pair(v, wt));\n    }\n    int vis[] = new int[N];\n    //Now, we perform topo sort using DFS technique \n    //and store the result in the stack st.\n\n    Stack &lt; Integer &gt; st = new Stack &lt; &gt; ();\n    for (int i = 0; i &lt; N; i++) {\n      if (vis[i] == 0) {\n        topoSort(i, adj, vis, st);\n      }\n    }\n    //Further, we declare a vector \u2018dist\u2019 in which we update the value of the nodes\u2019\n    //distance from the source vertex after relaxation of a particular node.\n    int dist[] = new int[N];\n    for (int i = 0; i &lt; N; i++) {\n      dist[i] = (int)(1e9);\n    }\n\n    dist[0] = 0;\n    while (!st.isEmpty()) {\n      int node = st.peek();\n      st.pop();\n\n      for (int i = 0; i &lt; adj.get(node).size(); i++) {\n        int v = adj.get(node).get(i).first;\n        int wt = adj.get(node).get(i).second;\n\n        if (dist[node] + wt &lt; dist[v]) {\n          dist[v] = wt + dist[node];\n        }\n      }\n    }\n\n    for (int i = 0; i &lt; N; i++) {\n      if (dist[i] == 1e9) dist[i] = -1;\n    }\n    return dist;\n  }\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output</strong>:&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>0 2 3 6 1 5&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O(N+M) {for the topological sort} + O(N+M) {for relaxation of vertices, each node and its adjacent nodes get traversed} ~ O(N+M).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Where N= number of vertices and M= number of edges.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity:&nbsp; </strong>O( N) {for the stack storing the topological sort} + O(N) {for storing the shortest distance for each node} + O(N) {for the visited array} + O( N+2M) {for the adjacency list} ~ O(N+M) .</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Where N= number of vertices and M= number of edges.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;<strong><strong>Priyanshi Goel</strong></strong>&nbsp;for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a>.&nbsp;<em>If you want to suggest any improvement/correction in this article please mail us at&nbsp;write4tuf@gmail.com</em></p></blockquote>\n<!-- /wp:quote -->"
}