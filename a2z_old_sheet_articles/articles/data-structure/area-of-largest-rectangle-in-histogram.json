{
    "dislikes": 4,
    "video": "X0X6G-eWgQ8",
    "publishedOn": "Sun Mar 24 2024 22:09:19 GMT+0530 (India Standard Time)",
    "slug": "area-of-largest-rectangle-in-histogram",
    "aid": "1452",
    "title": "Area of largest rectangle in Histogram",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/largest-rectangle-in-a-histogram",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "stack",
            "topic-title": "Stack"
        }
    ],
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement:</strong> Given an array of integers heights representing the histogram's bar height where the width of each bar is 1&nbsp; return the area of the largest rectangle in histogram.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Example:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\"><strong>Input:</strong> N =6, heights[] = {2,1,5,6,2,3}\n\n<strong>Output:</strong> 10\n\n<strong>Explanation:</strong>\n\n<img width=\"418\" height=\"286\" src=\"https://lh3.googleusercontent.com/0HBN1kCWyRdgeNIlyx7qYR5sQM6qQaqFDTFO_0BeolTyHuWTD9xmawkqhxmrKwcBjLDcd3p73JfhNTZr0JxGtYv5fw3gDU1ccJa7JJZiO4VM32QA92VFIob1YTFaVEN3r4UVUzm3\"></pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Solution</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"textColor\":\"vivid-red\"} -->\n<p class=\"has-vivid-red-color has-text-color\"><strong><em>Disclaimer</em></strong>: <em>Don't jump directly to the solution, try it out yourself first.</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Solution 1: Brute Force Approach</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Intuition: </strong>The intuition behind the approach is taking different bars and finding the maximum width possible using the bar.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"624\" height=\"433\" src=\"https://lh6.googleusercontent.com/mtY-u_8iJAB7WJGUpGx1ym68g-NR3FIYeXNBTxbdlF10lIPgbuf5FFQWbvkUz7TQoPxcvb56N43eWoqed8JO3YutuQaWLv28l8An-V7MtC4j8y6JXYPWwfgY3qA5yAGsmQXdZpfJ\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Similarly for other bars, we will find the areas possible:-</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Considering the width of each bar as 1 unit.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For first bar, area possible = 2* 1 =2 sq . units</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For second&nbsp; bar, area possible = 1 * 6 =6 sq . units</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For third bar , area possible = 5 *2 = 10 sq . units</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For fourth bar , area possible = 6 * 1 = 6 sq . units</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For Fifth bar , area possible = 2 * 4 = 8 sq . units</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For Sixth bar , area possible = 3 * 1 =3 sq . units</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So, the maximum area possible = 10 sq units.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Approach</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The approach is to find the right smaller and left smaller element and find the largest Rectangle area in Histogram.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"624\" height=\"433\" src=\"https://lh4.googleusercontent.com/8Q0bhb_4RHvAvSoj87-hPwb7jnizYRJL2hQT9lbYfUmPCBTyPamVHGuAxieRt3ncz7t_LkNweISmfuK3O4IfTbhWIAz3pnXSXe9r7alJGonM5-x0sUdZQCCa5hu_Li1QEXR4HUK9\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    \n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\n// Brute Force Approach to find largest rectangle area in Histogram\nint largestarea(int arr[], int n) {\n  int maxArea = 0;\n  for (int i = 0; i &lt; n; i++) {\n    int minHeight = INT_MAX;\n    for (int j = i; j &lt; n; j++) {\n      minHeight = min(minHeight, arr[j]);\n      maxArea = max(maxArea, minHeight * (j - i + 1));\n    }\n  }\n  return maxArea;\n}\nint main() {\n  int arr[] = {2, 1, 5, 6, 2, 3, 1};\n  int n = 7;\n  cout &lt;&lt; \"The largest area in the histogram is \" &lt;&lt; largestarea(arr, n); // Printing the largest rectangle area\n  return 0;\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> The largest area in the histogram is 10</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O(N*N<sup> </sup>)&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(1)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\n// Brute Force Approach to find largest rectangle area in Histogram\npublic class Main {\n    static int largestarea(int arr[], int n) {\n        int maxArea = 0;\n        for (int i = 0; i &lt; n; i++) {\n            int minHeight = Integer.MAX_VALUE;\n            for (int j = i; j &lt; n; j++) {\n                minHeight = Math.min(minHeight, arr[j]);\n                maxArea = Math.max(maxArea, minHeight * (j - i + 1));\n            }\n        }\n        return maxArea;\n    }\n    public static void main(String args[]) {\n        int arr[] = {2, 1, 5, 6, 2, 3, 1};\n        int n = 7;\n        System.out.println(\"The largest area in the histogram is \" + largestarea(arr, n)); // Printing the largest rectangle area\n\n    }\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> The largest area in the histogram is 10</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O(N*N<sup> </sup>)&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(1)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Solution 2: Optimised Approach\u00a0</strong>1</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Intuition: </strong>The intuition behind the approach is the same as finding the smaller element on both sides but in an optimized way using the concept of the next greater element and the next smaller element.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Approach:&nbsp;</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Steps to be done for finding Left smaller element</strong></li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><img width=\"624\" height=\"419\" src=\"https://lh6.googleusercontent.com/cQLh0hM7sclFtHQTujGwAFwUAxuCtbj99wgpUbnd5Q5C1Ayxg8IcgkNzd0jf4P8sQp2OOKV2b50QZW3CzF9DpBXkC2wVfZmouaQjvaRYPm5P8FZvm_7ZC54nMU2uOEZ4XZmhA9EY\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><img width=\"628\" height=\"451\" src=\"https://lh4.googleusercontent.com/VtMOFZHAec91ds7zEVBJ0j7uATA_FlWX83u9MKwCsKKzWC5rvJ3bZyvXm3Ypxyr4u6BxkHHyb2FKDddxzoFdn5-K_eXyyWgLzCszz9B163CW6PdmOJoIuzUvMuUhFNGQLj5uil0I\"></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"624\" height=\"351\" src=\"https://lh4.googleusercontent.com/92_VovdjPiWSxwxIul6Qj0lT5CEdyo7OO4QLiAkTdVL3OMbdMG0xpBIDQRYUWbuNLDzXZNwhClyTCQhBs0YkElYl-LVmVate3UJWqUi-LJRtKzVdSrsqB0CcaofTC2V7Ptza0Gb0\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>2. <strong>Steps to be done for finding the Right smaller element</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"624\" height=\"357\" src=\"https://lh3.googleusercontent.com/hGbhB9FRIZd_HPNNapmrx4C7ydWUVUZZG3fo9ROlc0nJgA9fci4If4HfBHQ9z9cmBGa2fUvc_-XoWwxI9gEuU98lQ5MHXQr76TJLaTetsHD_e7V4SYYrbM1B3dF0yqzqMq83g2WN\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>After finding the right smaller and left smaller of each subsequent array elements, we</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"624\" height=\"363\" src=\"https://lh5.googleusercontent.com/oaeAuE8CGysBUJ3ZKkuYAhFsafVxhRaqDLkyQ1FmuLEPJDt3GfxELltO5ges15F79WYzyMEDErnEpV_FDwyECQMeW6-QiBEogB_dlpe9-rxFXInd4xnf7akUIBHPIxmfaTrBg4uk\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Area for first index - ( 0 - 0 +1 ) * 2 = 2</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Area for second index - (6 - 0 + 1) * 1 = 6</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Area for third index - (3 - 2 +1 ) * 5 = 10</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Area for fourth index - (3 - 3 + 1 ) * 6 = 6</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Area for fifth index - (5 - 2 +1 ) * 2 = 8</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Area for sixth index - (5 - 5&nbsp; + 1) * 3 = 3</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Area for seventh index - (6 - 0 +1) * 1&nbsp; = 7</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So, the maximum area out of these is 10 sq units.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    \n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\nclass Solution {\n  public:\n    int largestRectangleArea(vector &lt; int &gt; &amp; heights) {\n      int n = heights.size();\n      stack &lt; int &gt; st;\n      int leftsmall[n], rightsmall[n];\n      for (int i = 0; i &lt; n; i++) {\n        while (!st.empty() &amp;&amp; heights[st.top()] &gt;= heights[i]) {\n          st.pop();\n        }\n        if (st.empty())\n          leftsmall[i] = 0;\n        else\n          leftsmall[i] = st.top() + 1;\n        st.push(i);\n      }\n      // clear the stack to be re-used\n      while (!st.empty())\n        st.pop();\n\n      for (int i = n - 1; i &gt;= 0; i--) {\n        while (!st.empty() &amp;&amp; heights[st.top()] &gt;= heights[i])\n          st.pop();\n\n        if (st.empty())\n          rightsmall[i] = n - 1;\n        else\n          rightsmall[i] = st.top() - 1;\n\n        st.push(i);\n      }\n      int maxA = 0;\n      for (int i = 0; i &lt; n; i++) {\n        maxA = max(maxA, heights[i] * (rightsmall[i] - leftsmall[i] + 1));\n      }\n      return maxA;\n    }\n};\nint main() {\n  vector&lt;int&gt; heights = {2, 1, 5, 6, 2, 3, 1};\n  Solution obj;\n  cout &lt;&lt; \"The largest area in the histogram is \" &lt;&lt; obj.largestRectangleArea(heights); \n  return 0;\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> The largest area in the histogram is 10 </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O( N<sup> </sup>)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(3N) where 3 is for the stack, left small array and a right small array</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\n// Brute Force Approach to find largest rectangle area in Histogram\npublic class Main {\n    public static int largestRectangleArea(int[] heights) {\n        int n = heights.length;\n        Stack &lt; Integer &gt; st = new Stack &lt; &gt; ();\n        int leftSmall[] = new int[n];\n        int rightSmall[] = new int[n];\n        for (int i = 0; i &lt; n; i++) {\n            while (!st.isEmpty() &amp;&amp; heights[st.peek()] &gt;= heights[i]) {\n                st.pop();\n            }\n\n            if (st.isEmpty()) leftSmall[i] = 0;\n            else leftSmall[i] = st.peek() + 1;\n            st.push(i);\n        }\n\n        // clear the stack to be re-used\n        while (!st.isEmpty()) st.pop();\n\n        for (int i = n - 1; i &gt;= 0; i--) {\n            while (!st.isEmpty() &amp;&amp; heights[st.peek()] &gt;= heights[i]) {\n                st.pop();\n            }\n\n            if (st.isEmpty()) rightSmall[i] = n - 1;\n            else rightSmall[i] = st.peek() - 1;\n\n            st.push(i);\n        }\n\n        int maxA = 0;\n        for (int i = 0; i &lt; n; i++) {\n            maxA = Math.max(maxA, heights[i] * (rightSmall[i] - leftSmall[i] + 1));\n        }\n        return maxA;\n\n    }\n    public static void main(String args[]) {\n        int arr[] = {2, 1, 5, 6, 2, 3, 1};\n        int n = 7;\n        System.out.println(\"The largest area in the histogram is \" + \n        largestRectangleArea(arr)); \n\n    }\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> The largest area in the histogram is 10 </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O( N<sup> </sup>)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(3N) where 3 is for the stack, left small array and a right small array</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Solution 3:</strong> <strong>Optimised approach 2</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Intuition:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This approach is a single pass approach instead of a two-pass approach. When we traverse the array by finding the next greater element, we found that some elements were inserted into the stack which signifies that after them the smallest element is themselves</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So we can find the area of the rectangle by using <strong>arr[i] * (right smaller - left smaller -1 )</strong>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><img width=\"624\" height=\"381\" src=\"https://lh4.googleusercontent.com/YCGMUB334w-JcUObNoL2nFYxHt6KeoGArYJLYs6ae8I_xpII4ItK-vlcwmqm7EeqWqUx7j7Wko_yKHd6hwUmqnGoeuUCDntcPCDHGSvLPPPMGauOqEtRs8LBWZyssGrHHWfy4APw\"></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Approach</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><img width=\"624\" height=\"500\" src=\"https://lh6.googleusercontent.com/Pn-neTfRgTGf3acETenXEqyuNtq1QvKMLfN8_wj5_Q_5w7VJIFTeb9JzFp2CA49OxMDXsxWl8ATgeZSmtx5-lURsWkJWM7mao7ge01ZO3Cf3TjlSNOXseePpE6_XM5oGouq-Dd78\"></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><img width=\"624\" height=\"495\" src=\"https://lh5.googleusercontent.com/Y5QOSDDJEjuI_kAyuUb3fu-hASVVPGewM_EvcoTQiqnYRz7JstxewieaCsT057hqANlpPA98I2mEcSFRyFMSm5iFNQxMeTL4-tN1gOEMafBQhj0vE38yx3VKMarNxoqx4IUtQUU9\"></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><img width=\"624\" height=\"299\" src=\"https://lh4.googleusercontent.com/S6kwn33-xirM7u9gO8_HVEt8gcRMh60wuiJCo6NFa-KkoUGCzZQpTyNRtzz-tQjSenbA_jfnisaA36COtA1UpRTC2M2vvobaeYSZFdl4khncxXqMru8j45ivxVq-LZvzUWxtIHl3\"></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    \n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\nclass Solution {\n  public:\n    int largestRectangleArea(vector &lt; int &gt; &amp; histo) {\n      stack &lt; int &gt; st;\n      int maxA = 0;\n      int n = histo.size();\n      for (int i = 0; i &lt;= n; i++) {\n        while (!st.empty() &amp;&amp; (i == n || histo[st.top()] &gt;= histo[i])) {\n          int height = histo[st.top()];\n          st.pop();\n          int width;\n          if (st.empty())\n            width = i;\n          else\n            width = i - st.top() - 1;\n          maxA = max(maxA, width * height);\n        }\n        st.push(i);\n      }\n      return maxA;\n    }\n};\nint main() {\n  vector &lt; int &gt; histo = {2, 1, 5, 6, 2, 3, 1};\n  Solution obj;\n  cout &lt;&lt; \"The largest area in the histogram is \" &lt;&lt; obj.largestRectangleArea(histo) &lt;&lt; endl;\n  return 0;\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> The largest area in the histogram is 10</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O( N<sup> </sup>) + O (N)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(N)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\npublic class TUF {\n    static int largestRectangleArea(int histo[]) {\n        Stack &lt; Integer &gt; st = new Stack &lt; &gt; ();\n        int maxA = 0;\n        int n = histo.length;\n        for (int i = 0; i &lt;= n; i++) {\n            while (!st.empty() &amp;&amp; (i == n || histo[st.peek()] &gt;= histo[i])) {\n                int height = histo[st.peek()];\n                st.pop();\n                int width;\n                if (st.empty())\n                    width = i;\n                else\n                    width = i - st.peek() - 1;\n                maxA = Math.max(maxA, width * height);\n            }\n            st.push(i);\n        }\n        return maxA;\n    }\n\n    public static void main(String args[]) {\n        int histo[] = {3, 1, 5, 6, 2, 3};\n        System.out.println(\"The largest area in the histogram is \" + largestRectangleArea(histo));\n    }\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> The largest area in the histogram is 10</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O( N<sup> </sup>) + O (N)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(N)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to\u00a0<strong><a href=\"https://www.linkedin.com/in/gurmeet-singh-630002201/\" target=\"_blank\" rel=\"noreferrer noopener nofollow\"><strong>Gurmeet Singh</strong></a></strong>\u00a0for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,\u00a0</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->",
    "category_tag": "data-structure",
    "likes": 132,
    "preview": "Problem Statement: Given an array of integers heights representing the histogram's bar height where the width of each bar is 1 return the area of the largest rectangle in histogram. Example: Input:..."
}