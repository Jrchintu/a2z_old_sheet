{
    "dislikes": 5,
    "video": "b7AYbpM5YrE",
    "publishedOn": "Sun Mar 24 2024 22:09:29 GMT+0530 (India Standard Time)",
    "slug": "power-set-print-all-the-possible-subsequences-of-the-string",
    "aid": "1502",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/power-set",
    "title": "Power Set: Print all the possible subsequences of the String",
    "topics": [
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "recursion",
            "topic-title": "Recursion"
        },
        {
            "topic-id": "string",
            "topic-title": "String"
        }
    ],
    "category_tag": "data-structure",
    "likes": 151,
    "preview": "Problem Statement: Given a string, find all the possible subsequences of the string. Examples: Example 1: Input: str = \"abc\" Output: a ab abc ac b bc c Explanation: Printing all the 7 subsequence f...",
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement:</strong> Given a string, find all the possible subsequences of the string.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Examples:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\"><strong>Example 1:</strong>\n<strong>Input:</strong> str = \"abc\"\n<strong>Output:</strong> a ab abc ac b bc c\n<strong>Explanation:</strong> Printing all the 7 subsequence for the string \"abc\".\n\n<strong>Example 2:</strong>\n<strong>Input:</strong> str = \"aa\"\n<strong>Output:</strong> a a aa \n<strong>Explanation:</strong> Printing all the 3 subsequences for the string \"aa\"</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Solution</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"textColor\":\"accent\"} -->\n<p class=\"has-accent-color has-text-color\"><strong><em>Disclaimer</em></strong>: <em>Don't jump directly to the solution, try it out yourself first.</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Solution 1: Using bit manipulation</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Approach</strong>:&nbsp;Prerequisites: To check whether the ith bit is set or not.If n&amp;(1&lt;&lt;i) != 0,then the ith bit is set.<br>First, write down all the numbers from 0 to 2^(n)-1 and their bit representation.0 means I am not picking the character in my subsequence, and 1 means I am picking the character.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"602\" height=\"377\" src=\"https://lh6.googleusercontent.com/7I1xEQcX0mTLJOEAgKCI8UUJNNZ6ppLSxZhUXIyeMlx8fB_pvAZ4iKBBFwVc-iH-bYYsjVFAhYF4cLPlij6f8n82QeK14fdAiMfHEnfWWtKgsnGPGlqB7uPvRuCAiBZONualC-uI\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Basically, we traverse from 0 to 2^(n)-1 and check for every number if their bit is set or not. If the bit is set add that character to your subsequence.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    \n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nvector&lt;string&gt; AllPossibleStrings(string s) {\n\tint n = s.length();\n\tvector&lt;string&gt;ans;\n\tfor (int num = 0; num &lt; (1 &lt;&lt; n); num++) {\n\t\tstring sub = \"\";\n\t\tfor (int i = 0; i &lt; n; i++) {\n\t\t\t//check if the ith bit is set or not\n\t\t\tif (num &amp; (1 &lt;&lt; i)) {\n\t\t\t\tsub += s[i];\n\t\t\t}\n\t\t}\n\t\tif (sub.length() &gt; 0) {\n\t\t\tans.push_back(sub);\n\t\t}\n\t}\n\tsort(ans.begin(), ans.end());\n\treturn ans;\n}\nint main()\n{\n\n\n\tstring s=\"abc\";\n\tvector&lt;string&gt;ans = AllPossibleStrings(s);\n\t//printint all the subsequence.\n\tcout&lt;&lt;\"All possible subsequences are \"&lt;&lt;endl;\n\tfor (auto it : ans) {\n\t\tcout &lt;&lt; it &lt;&lt; \" \";\n\t}\n\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>All possible subsequences are<br>a ab abc ac b bc c</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity</strong>: O(2^n * n)<strong> </strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Reason:</strong> O(2^n) for the outer for loop and O(n) for the inner for loop.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity:</strong> O(1)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\nclass TUF{\nstatic ArrayList&lt;String&gt; AllPossibleStrings(String s) {\n\tint n = s.length();\n\tArrayList&lt;String&gt;ans=new ArrayList&lt;&gt;();\n\tfor (int num = 0; num &lt; (1 &lt;&lt; n); num++) {\n\t\tString sub = \"\";\n\t\tfor (int i = 0; i &lt; n; i++) {\n\t\t\t//check if the ith bit is set or not\n\t\t\tif ((num &amp; (1 &lt;&lt; i))!=0) {\n\t\t\t\tsub += s.charAt(i);\n\t\t\t}\n\t\t}\n\t\tif (sub.length() &gt; 0) {\n\t\t\tans.add(sub);\n\t\t}\n\t}\n\tCollections.sort(ans);\n\treturn ans;\n}\npublic static void main(String args[])\n{\n\n\n\tString s=\"abc\";\n\tArrayList&lt;String&gt;ans = AllPossibleStrings(s);\n\t//printint all the subsequence.\n\tSystem.out.println(\"All possible subsequences are \");\n\tfor (String it : ans) {\n\t\tSystem.out.print( it+\" \");\n\t}\n\n}\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>All possible subsequences are<br>a ab abc ac b bc c</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity</strong>: O(2^n * n)<strong> </strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Reason:</strong> O(2^n) for the outer for loop and O(n) for the inner for loop.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity:</strong> O(1)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Solution 2: Using recursion(Backtracking)</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Intuition: </strong>Since we are generating subsets two cases will be possible, either you can pick the character or you cannot pick the character and move to the next character.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Approach:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><img width=\"602\" height=\"235\" src=\"https://lh6.googleusercontent.com/CEieqI0YHVpWwUmFlQ8crhsoba-FxZ-gAYSdXctbvTqEXjJ0NMwU6zhWvaIb0r6bxfMNakuaS_gEfUkg6OhG92kK5kunT8aMC66FvqVwS79qVNbzfhr5tKZXztuRix8C9qMo4RXG\"></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>Maintain a temp string (say f),which is empty initally.</li><li>Now you have two options,either you can pick the character or not pick the character and move to the next index.</li><li>Firstly we pick the character at ith index and then move to the next index.(f + s[i])</li><li>If the base condition is hit,i.e i==s.length() ,then we print the temp string and return.</li><li>Now while backtracking we have to pop the last character since now we have to implement the non-pick condition and then move to next index.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    \n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n\n#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nvoid solve(int i, string s, string &amp;f) {\n\tif (i == s.length()) {\n\t\tcout &lt;&lt; f &lt;&lt; \" \";\n\t\treturn;\n\t}\n\t//picking \n\tf = f + s[i];\n\tsolve(i + 1, s,  f);\n\t//poping out while backtracking\n\tf.pop_back();\n\tsolve(i + 1, s,  f);\n}\nint main() {\n\tstring s = \"abc\";\n\tstring f = \"\";\n\tcout&lt;&lt;\"All possible subsequences are: \"&lt;&lt;endl;\n\tsolve(0, s, f);\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>All possible subsequences are:<br>abc ab ac a bc b c</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity:</strong> O(2^n)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(n), recursion stack.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\nclass TUF{\nstatic void solve(int i, String s, String f) {\n\tif (i == s.length()) {\n\t\tSystem.out.print(f+\" \");\n\t\treturn;\n\t}\n\t//picking \n\t//f = f + s.charAt(i);\n\tsolve(i + 1, s,  f+s.charAt(i));\n\t//poping out while backtracking\n\t//f.pop_back();\n\tsolve(i + 1, s,  f);\n}\npublic static void main(String args[]) {\n\tString s = \"abc\";\n\tString f = \"\";\n\tSystem.out.println(\"All possible subsequences are: \");\n\tsolve(0, s, f);\n}\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>All possible subsequences are:<br>abc ab ac a bc b c</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity:</strong> O(2^n)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(n), recursion stack.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;<a href=\"https://www.linkedin.com/in/pranav-padawe-9486241ba/\" target=\"_blank\" rel=\"noreferrer noopener\">Pranav Padawe</a>&nbsp;for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->"
}