{
    "dislikes": 15,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:09:54 GMT+0530 (India Standard Time)",
    "slug": "flattening-a-linked-list",
    "aid": "1616",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/flattening-of-ll",
    "title": "Flattening a Linked List",
    "topics": [
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "linked-list",
            "topic-title": "Linked List"
        }
    ],
    "category_tag": "data-structure",
    "likes": 126,
    "preview": "Problem Statement: Given a linked list containing \u2018N\u2019 head nodes where every node in the linked list contains two pointers: 1. \u2018Next\u2019 points to the next node in the list 2. \u2018Child\u2019 pointer to a lin...",
    "content": "<p><strong>Problem Statement: </strong>Given a linked list containing \u2018N\u2019 head nodes where every node in the linked list contains two pointers:\n<ol><li>\u2018Next\u2019 points to the next node in the list</li><li>\u2018Child\u2019 pointer to a linked list where the current node is the head</li></ol></p>\n<P>\nEach of these child linked lists is in sorted order and connected by a 'child' pointer.\nYour task is to flatten this linked list such that all nodes appear in a single layer or level in a 'sorted order'.\n\n</p>\n\n\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n    <details class=\"article_example_details\">\n        <summary class=\"article_example_summary\">\n            <span><strong>\n                    Examples\n                </strong>\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"atricle_example_content\">\n            <pre class=\"wp-block-preformatted\">\n                <span><strong>Example 1:</strong></span>\n\n                <span><strong>Input:</strong></span>\n                <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/flattening-ll-image1-2HJRV5Yy\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n               \n                <span><strong>Output:</strong>1 2 3 4 5 6 7 8 9 10 11 12</span>\n                <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/flattening-ll-example-1-25ObBOJU\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n                <span><strong>Explanation: </strong>Flatten the linked list into a single level sorted order and traverse the nodes in such a manner that the child linked lists are merged into the main list in the sorted order.</span>\n                <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/flattening-ll-image2-3ftPBgGi\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n                <br>\n                <span><strong>Example 2:</strong></span>\n                <span><strong>Input:</strong></span>\n                <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/flattening-ll-image3-bC0YjqP9\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>                \n                \n                <span><strong>Output: </strong>2 4 5 10 12 13 16 17 20</span>\n                <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/flattening-ll-image4-pbKZ2Bre\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n                <span><strong>Explanation: </strong> </span>\n                <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/flattening-ll-image5-qMjMrHYP\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>                            \n\n            </pre>\n        </div>\n    </details>\n</div>\n\n\n<!-- This is Practice Section\n<div class=\"practice\">\n    <span><strong>Practice: </strong></span>\n    <div class=\"problem-buttons\">\n\n         \n        <a href=\"https://www.codingninjas.com/studio/problems/power-of-numbers_8157729?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf\" target=\"_blank\" rel=\"noopener\">\n            <span>Solve Problem</span>\n            <img src=\"https://takeuforward-content-images.s3.ap-south-1.amazonaws.com/content/Group-11-5-pFOq-8ga\" alt=\"code-studio\">\n        </a>\n    </div>\n    \n</div>-->\n\n\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out yourself first. </em></p>\n\n\n<!-- This is Approaches Drop-Down -->\n<div class=\"dsa_article_dropdown_approachs \">\n\n    <!-- Approach - 1 Starts from here -->\n    <div id=\"brute-force-approach\">\n        <details>\n            <summary class=\"main-summary\">\n                <span>\n                    <!-- Change Name Here -->\n                   Brute Force Approach \n                </span>\n                <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                    <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                    </path>\n                </svg>\n            </summary>\n            <div class=\"common-drops\">\n                <details class=\"secondary-details\" open=\"\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Algorithm / Intuition\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <div class=\"approach-algorithm\">\n                        \n                        <p>To transform the given linked list into a single level sorted list ensuring that the nodes are arranged in an ascending order, we initialise an array to temporarily hold the extracted nodes during the traversal.</p>\n                        <p>We iterate over the array by first going over the top-level next pointers of the linked list then accessing each node within its child pointers adding all to the array. Then the array is sorted to arrange all values sequentially and a new linked list from that array is created and returned. </p>\n\n                        <h4>Algorithm </h4>\n                        <p><strong>Step 1:</strong>Initialise an empty array to store the data extracted during the traversal.</p>\n                        <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/flattening-ll-image6-JkChcG0Y\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n                        <p><strong>Step 2: </strong> Start traversing through the top-level \u2018next\u2019 pointers of the linked list and for each node accessed by the \u2018next\u2019 pointer, traverse its \u2018child\u2019 nodes.\n                        <ol><li>Iterate all the nodes until reaching the end of the child pointer list appending each node\u2019s value to the array. Move to the next primary node and repeat the process of traversing the child nodes.</li></ol></p> \n                        <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/flattening-ll-image7-ZAVui35A\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n                        <p><strong>Step 3: </strong>\n                        Sort the array to arrange its collected node data in ascending order.</p>\n                        <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/flattening-ll-image8-n_U3kYVu\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n\n                        <p><strong>Step 4: </strong> Create a new linked list from the sorted array and return the flattened linked list.</p>\n                        \n                    </div>\n                </details>\n                <details class=\"code-section secondary-details\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Code\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <div class=\"code-tabs\">\n                        <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n                        <button class=\"code-tab\" data-lang=\"java\">Java</button>\n                        <button class=\"code-tab\" data-lang=\"python\">Python</button>\n                        <button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n                        <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\"\n                            xmlns=\"http://www.w3.org/2000/svg\">\n                            <path\n                                d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n                            </path>\n                        </svg>\n                    </div>\n                    <div class=\"code-content\">\n                        <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n                            <pre class=\"wp-block-code\">\n                                <code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nclass Node {\npublic:\n    int data;\n    Node *next;\n    Node *child;\n\n    // Constructors to initialize the\n    // data, next, and child pointers\n    Node() : data(0), next(nullptr), child(nullptr) {};\n    Node(int x) : data(x), next(nullptr), child(nullptr) {}\n    Node(int x, Node *nextNode, Node *childNode) :\n                    data(x), next(nextNode), child(childNode) {}\n};\n\n// Function to convert a vector to a linked list\nNode* convertArrToLinkedList(vector&lt;int&gt;&amp; arr){\n    // Create a dummy node to serve as\n    // the head of the linked list\n    Node* dummyNode = new Node(-1);\n    Node* temp = dummyNode;\n\n    // Iterate through the vector and\n    // create nodes with vector elements\n    for(int i = 0; i &lt; arr.size(); i++){\n        // Create a new node\n        // with the vector element\n        temp-&gt;child = new Node(arr[i]); \n        // Move the temporary pointer\n        // to the newly created node\n        temp = temp-&gt;child; \n    }\n    // Return the linked list starting\n    // from the next of the dummy node\n    return dummyNode-&gt;child; \n}\n\n// Function to flatten a\n// linked list with child pointers\nNode* flattenLinkedList(Node* head) {\n    vector&lt;int&gt; arr;\n\n    // Traverse through the linked list\n    while (head != nullptr) {\n        // Traverse through the child\n        // nodes of each head node\n        Node* t2 = head;\n        while (t2 != nullptr) {\n            // Store each node's data in the array\n            arr.push_back(t2-&gt;data);\n            // Move to the next child node\n            t2 = t2-&gt;child;\n        }\n        // Move to the next head node\n        head = head-&gt;next;\n    }\n\n    // Sort the array containing\n    // node values in ascending order\n    sort(arr.begin(), arr.end());\n\n    // Convert the sorted array\n    // back to a linked list\n    return convertArrToLinkedList(arr);\n}\n\n// Print the linked list by\n// traversing through child pointers\nvoid printLinkedList(Node* head) {\n    while (head != nullptr) {\n        cout &lt;&lt; head-&gt;data &lt;&lt; &quot; &quot;;\n        head = head-&gt;child;\n    }\n    cout &lt;&lt; endl;\n}\n\n// Print the linked list\n// in a grid-like structure\nvoid printOriginalLinkedList(Node* head, int depth) {\n    while (head != nullptr) {\n        cout &lt;&lt; head-&gt;data;\n\n        // If child exists, recursively\n        // print it with indentation\n        if (head-&gt;child) {\n            cout &lt;&lt; &quot; -&gt; &quot;;\n            printOriginalLinkedList(head-&gt;child, depth + 1);\n        }\n\n        // Add vertical bars\n        // for each level in the grid\n        if (head-&gt;next) {\n            cout &lt;&lt; endl;\n            for (int i = 0; i &lt; depth; ++i) {\n                cout &lt;&lt; &quot;| &quot;;\n            }\n        }\n        head = head-&gt;next;\n    }\n}\n\nint main() {\n    // Create a linked list with child pointers\n    Node* head = new Node(5);\n    head-&gt;child = new Node(14);\n    \n    head-&gt;next = new Node(10);\n    head-&gt;next-&gt;child = new Node(4);\n    \n    head-&gt;next-&gt;next = new Node(12);\n    head-&gt;next-&gt;next-&gt;child = new Node(20);\n    head-&gt;next-&gt;next-&gt;child-&gt;child = new Node(13);\n    \n    head-&gt;next-&gt;next-&gt;next = new Node(7);\n    head-&gt;next-&gt;next-&gt;next-&gt;child = new Node(17);\n\n    // Print the original\n    // linked list structure\n    cout &lt;&lt; &quot;Original linked list:&quot; &lt;&lt; endl;\n    printOriginalLinkedList(head, 0);\n\n    // Flatten the linked list\n    // and print the flattened list\n    Node* flattened = flattenLinkedList(head);\n    cout &lt;&lt; &quot;\\nFlattened linked list: &quot;;\n    printLinkedList(flattened);\n\n    return 0;\n}\n                                </code>\n                            </pre>\n                        </div>\n                        <div class=\"code-block \" data-lang=\"java\">\n                            <pre class=\"wp-block-code\">\n                                <code lang=\"java\" class=\"language-java\">\nimport java.util.ArrayList;\nimport java.util.Collections;\n\nclass Node {\n    int data;\n    Node next;\n    Node child;\n\n    // Constructors to initialize the\n    // data, next, and child pointers\n    Node() {\n        data = 0;\n        next = null;\n        child = null;\n    }\n\n    Node(int x) {\n        data = x;\n        next = null;\n        child = null;\n    }\n\n    Node(int x, Node nextNode, Node childNode) {\n        data = x;\n        next = nextNode;\n        child = childNode;\n    }\n}\n\npublic class FlattenLinkedList {\n\n    // Function to convert an ArrayList to a linked list\n    static Node convertArrToLinkedList(ArrayList&lt;Integer&gt; arr) {\n        // Create a dummy node to serve as\n        // the head of the linked list\n        Node dummyNode = new Node(-1);\n        Node temp = dummyNode;\n\n        // Iterate through the ArrayList and\n        // create nodes with elements\n        for (int i = 0; i &lt; arr.size(); i++) {\n            // Create a new node with the element\n            temp.child = new Node(arr.get(i));\n            // Move the temporary pointer\n            // to the newly created node\n            temp = temp.child;\n        }\n        // Return the linked list starting\n        // from the next of the dummy node\n        return dummyNode.child;\n    }\n\n    // Function to flatten a linked list with child pointers\n    static Node flattenLinkedList(Node head) {\n        ArrayList&lt;Integer&gt; arr = new ArrayList&lt;&gt;();\n\n        // Traverse through the linked list\n        while (head != null) {\n            // Traverse through the child\n            // nodes of each head node\n            Node t2 = head;\n            while (t2 != null) {\n                // Store each node's data in the ArrayList\n                arr.add(t2.data);\n                // Move to the next child node\n                t2 = t2.child;\n            }\n            // Move to the next head node\n            head = head.next;\n        }\n\n        // Sort the ArrayList containing\n        // node values in ascending order\n        Collections.sort(arr);\n\n        // Convert the sorted ArrayList\n        // back to a linked list\n        return convertArrToLinkedList(arr);\n    }\n\n    // Print the linked list by\n    // traversing through child pointers\n    static void printLinkedList(Node head) {\n        while (head != null) {\n            System.out.print(head.data + &quot; &quot;);\n            head = head.child;\n        }\n        System.out.println();\n    }\n\n    // Print the linked list\n    // in a grid-like structure\n    static void printOriginalLinkedList(Node head, int depth) {\n        while (head != null) {\n            System.out.print(head.data);\n\n            // If child exists, recursively\n            // print it with indentation\n            if (head.child != null) {\n                System.out.print(&quot; -&gt; &quot;);\n                printOriginalLinkedList(head.child, depth + 1);\n            }\n\n            // Add vertical bars\n            // for each level in the grid\n            if (head.next != null) {\n                System.out.println();\n                for (int i = 0; i &lt; depth; ++i) {\n                    System.out.print(&quot;| &quot;);\n                }\n            }\n            head = head.next;\n        }\n    }\n\n    public static void main(String[] args) {\n        // Create a linked list with child pointers\n        Node head = new Node(5);\n        head.child = new Node(14);\n\n        head.next = new Node(10);\n        head.next.child = new Node(4);\n\n        head.next.next = new Node(12);\n        head.next.next.child = new Node(20);\n        head.next.next.child.child = new Node(13);\n\n        head.next.next.next = new Node(7);\n        head.next.next.next.child = new Node(17);\n\n        // Print the original\n        // linked list structure\n        System.out.println(&quot;Original linked list:&quot;);\n        printOriginalLinkedList(head, 0);\n\n        // Flatten the linked list\n        // and print the flattened list\n        Node flattened = flattenLinkedList(head);\n        System.out.println(&quot;\\nFlattened linked list: &quot;);\n        printLinkedList(flattened);\n    }\n}\n                                </code>\n                            </pre>\n                        </div>\n                        <div class=\"code-block\" data-lang=\"python\">\n                            <pre class=\"wp-block-code\">\n                                <code lang=\"python\" class=\"language-python\">\nclass Node:\n    def __init__(self, x=None, nextNode=None, childNode=None):\n        self.data = x\n        self.next = nextNode\n        self.child = childNode\n\n# Function to convert a list to a linked list\ndef convertArrToLinkedList(arr):\n    # Create a dummy node to serve as\n    # the head of the linked list\n    dummyNode = Node(-1)\n    temp = dummyNode\n\n    # Iterate through the list and\n    # create nodes with list elements\n    for val in arr:\n        # Create a new node with the list element\n        temp.child = Node(val)\n        # Move the temporary pointer\n        # to the newly created node\n        temp = temp.child\n\n    # Return the linked list starting\n    # from the next of the dummy node\n    return dummyNode.child\n\n# Function to flatten a linked list with child pointers\ndef flattenLinkedList(head):\n    arr = []\n\n    # Traverse through the linked list\n    while head:\n        # Traverse through the child\n        # nodes of each head node\n        t2 = head\n        while t2:\n            # Store each node's data in the list\n            arr.append(t2.data)\n            # Move to the next child node\n            t2 = t2.child\n        # Move to the next head node\n        head = head.next\n\n    # Sort the list containing\n    # node values in ascending order\n    arr.sort()\n\n    # Convert the sorted list\n    # back to a linked list\n    return convertArrToLinkedList(arr)\n\n# Print the linked list by\n# traversing through child pointers\ndef printLinkedList(head):\n    while head:\n        print(head.data, end=&quot; &quot;)\n        head = head.child\n    print()\n\n# Print the linked list\n# in a grid-like structure\ndef printOriginalLinkedList(head, depth=0):\n    while head:\n        print(head.data, end=&quot;&quot;)\n\n        # If child exists, recursively\n        # print it with indentation\n        if head.child:\n            print(&quot; -&gt; &quot;, end=&quot;&quot;)\n            printOriginalLinkedList(head.child, depth + 1)\n\n        # Add vertical bars\n        # for each level in the grid\n        if head.next:\n            print()\n            print(&quot;| &quot; * depth, end=&quot;&quot;)\n\n        head = head.next\n\n# Create a linked list with child pointers\nhead = Node(5)\nhead.child = Node(14)\n\nhead.next = Node(10)\nhead.next.child = Node(4)\n\nhead.next.next = Node(12)\nhead.next.next.child = Node(20)\nhead.next.next.child.child = Node(13)\n\nhead.next.next.next = Node(7)\nhead.next.next.next.child = Node(17)\n\n# Print the original\n# linked list structure\nprint(&quot;Original linked list:&quot;)\nprintOriginalLinkedList(head)\n\n# Flatten the linked list\n# and print the flattened list\nflattened = flattenLinkedList(head)\nprint(&quot;\\nFlattened linked list: &quot;)\nprintLinkedList(flattened)\n                                </code>\n                            </pre>\n                        </div>\n                         <div class=\"code-block\" data-lang=\"javascript\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"javascript\" class=\"language-javascript\">\nclass Node {\n    constructor(x = null, nextNode = null, childNode = null) {\n        this.data = x;\n        this.next = nextNode;\n        this.child = childNode;\n    }\n}\n\n// Function to convert an array to a linked list\nfunction convertArrToLinkedList(arr) {\n    // Create a dummy node to serve as\n    // the head of the linked list\n    let dummyNode = new Node(-1);\n    let temp = dummyNode;\n\n    // Iterate through the array and\n    // create nodes with array elements\n    for (let val of arr) {\n        // Create a new node with the array element\n        temp.child = new Node(val);\n        // Move the temporary pointer\n        // to the newly created node\n        temp = temp.child;\n    }\n\n    // Return the linked list starting\n    // from the next of the dummy node\n    return dummyNode.child;\n}\n\n// Function to flatten a linked list with child pointers\nfunction flattenLinkedList(head) {\n    let arr = [];\n\n    // Traverse through the linked list\n    while (head) {\n        // Traverse through the child\n        // nodes of each head node\n        let t2 = head;\n        while (t2) {\n            // Store each node's data in the array\n            arr.push(t2.data);\n            // Move to the next child node\n            t2 = t2.child;\n        }\n        // Move to the next head node\n        head = head.next;\n    }\n\n    // Sort the array containing\n    // node values in ascending order\n    arr.sort((a, b) =&gt; a - b);\n\n    // Convert the sorted array\n    // back to a linked list\n    return convertArrToLinkedList(arr);\n}\n\n// Print the linked list by\n// traversing through child pointers\nfunction printLinkedList(head) {\n    while (head) {\n        console.log(head.data + &quot; &quot;);\n        head = head.child;\n    }\n    console.log();\n}\n\n// Print the linked list\n// in a grid-like structure\nfunction printOriginalLinkedList(head, depth = 0) {\n    while (head) {\n        console.log(head.data);\n\n        // If child exists, recursively\n        // print it with indentation\n        if (head.child) {\n            process.stdout.write(&quot; -&gt; &quot;);\n            printOriginalLinkedList(head.child, depth + 1);\n        }\n\n        // Add vertical bars\n        // for each level in the grid\n        if (head.next) {\n            console.log(&quot;| &quot;.repeat(depth));\n        }\n        head = head.next;\n    }\n}\n\n// Create a linked list with child pointers\nlet head = new Node(5);\nhead.child = new Node(14);\n\nhead.next = new Node(10);\nhead.next.child = new Node(4);\n\nhead.next.next = new Node(12);\nhead.next.next.child = new Node(20);\nhead.next.next.child.child = new Node(13);\n\nhead.next.next.next = new Node(7);\nhead.next.next.next.child = new Node(17);\n\n// Print the original\n// linked list structure\nconsole.log(&quot;Original linked list:&quot;);\nprintOriginalLinkedList(head);\n\n// Flatten the linked list\n// and print the flattened list\nlet flattened = flattenLinkedList(head);\nconsole.log(&quot;\\nFlattened linked list: &quot;);\nprintLinkedList(flattened);\n\n                            </code>\n                        </pre>\n                        </div>\n                        <p><strong>Output: </strong>Original linked list:</p>\n                        <p>5 -> 14</p>\n                        <p>10 -> 4</p>\n                        <p>12 -> 20 -> 13</p>\n                        <p>7 -> 17</p>\n                        <p>Flattened linked list: 5 7 10 4 12 14 17 20 13 </p>\n\n\n                    </div>\n                </details>\n                <details class=\"secondary-details\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Complexity Analysis\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <p>\n                        <p><strong>Time Complexity:  O(N*M) + O(N*M log(N*M)) + O(N*M)</strong>where N is the length of the linked list along the next pointer and M is the length of the linked list along the child pointer.\n                        <ol><li>O(N*M) as we traverse through all the elements, iterating through \u2018N\u2019 nodes along the next pointer and \u2018M\u2019 nodes along the child pointer.</li><li>O(N*M log(N*M)) as we sort the array containing N*M (total) elements.</li><li>O(N*M) as we reconstruct the linked list from the sorted array by iterating over the N*M elements of the array.</li></ol></p>\n\n                        <p><strong>Space Complexity : O(N*M) + O(N*M)</strong>where N is the length of the linked list along the next pointer and M is the length of the linked list along the child pointer.\n                        <ol><li>O(N*M) for storing all the elements in an additional array for sorting.</li><li>O(N*M) to reconstruct the linked list from the array after sorting</li></ol></p>\n\n                    </p>\n                </details>\n            </div>\n        </details>\n    </div>\n    <!-- Approach - 1 Ends here -->\n\n\n    <!-- Approach - 2 Starts from here -->\n\n    <div id=\"optimal-approach\">\n        <details>\n            <summary class=\"main-summary\">\n                <span>\n                    Optimal Approach \n                </span>\n                <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                    <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                    </path>\n                </svg>\n            </summary>\n            <div class=\"common-drops\">\n                <details class=\"secondary-details\" open=\"\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Algorithm / Intuition\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <div class=\"approach-algorithm\">\n                        \n                        <p>The time and space complexity of the previous approach can be optimised as we have not yet leveraged the given property that the child linked lists are sorted. We can eliminate the additional space and time complexity generated by sorting by using these sorted vertical linked lists.</p>\n                        <p>Instead of collecting all node values into an array and then sorting them, we can merge these pre-sorted lists directly during the traversal, eliminating the need for additional sorting steps. This merge operation can be performed efficiently in place without allocating extra space for the combined linked list.</p>\n                        <p>Read more about <a href=\"https://takeuforward.org/data-structure/merge-two-sorted-linked-lists/\"> Merging Sorted Linked Lists</a>. The base case ensures the termination of the recursion when there's either no list or only a single node remaining. The recursive function then handles the merging of the remaining lists after recursive flattening, creating a sorted flattened linked list.</p>\n                        \n                        \n                        <p><strong>Algorithm</strong></p>\n                        <p><strong>Base Case:</strong>\n                        <ol><li>If the head is null, indicating the end of the list, it is already flattened or there are no further nodes. Return the head as it is.</li>\n                        <li>Similarly, if there's no next node, meaning there's only one node left in the list, return the head as it is since it's already flattened.</li></ol></p>\n                        <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/flattening-ll-image9-Mb0zAvwW\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n                        <p><strong>Recursive Function:</strong>\n                        The core of the algorithm lies in implementing a recursive function responsible for flattening the linked list. The function operates based on the principle that:\n                        <ol><li>If the base conditions are not met, the function invokes itself recursively. This recursion continues until it reaches the base case, gradually flattening the linked list and merging the resultant with the previous node.</li></ol></p>\n                        <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/flattening-ll-image10-VcIK-4bM\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n                        <p><strong>Return:</strong>Following the recursion, the function returns the merged head of the new flattened linked list. This head marks the new head of the merged list starting from the end, which will now be merged with the present head.</p>\n                        <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/flattening-ll-image11-aT1qmn8f\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n                        <p><strong>Step 1: Establish Base Case Conditions</strong>\n                        Check if the base case conditions are met, return the head if it is null or has no next pointer to head as there\u2019s no further flattening or merging required.</p>\n                                                                     \n                        <p><strong>Step 2: Recursively Merge the List:</strong><ol><li>Initiate the recursive flattening process by calling `flattenLinkedList` on the next node (`head -> next`).</li><li>The result of this recursive call is the head of the flattened and merged linked list.</li></ol></p>                              \n                        <p><strong>Step 3: Merge Operations:</strong><ol><li>Inside the recursive call, call the merge function which takes care of the merging of these two lists based on their data values.</li><li>Read more about <a href=\"https://takeuforward.org/data-structure/merge-two-sorted-linked-lists/\">merging two linked lists</a> here.</li><li>The merged list is updated in the head, which is then returned as the result of the flattening process.</li></ol></p>                \n                        \n                        \n                    </div>\n                </details>\n                <details class=\"code-section secondary-details\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Code\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <div class=\"code-tabs\">\n                        <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n                        <button class=\"code-tab\" data-lang=\"java\">Java</button>\n                        <button class=\"code-tab\" data-lang=\"python\">Python</button>\n                        <button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n                        <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\"\n                            xmlns=\"http://www.w3.org/2000/svg\">\n                            <path\n                                d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n                            </path>\n                        </svg>\n                    </div>\n                    <div class=\"code-content\">\n                        <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n                            <pre class=\"wp-block-code\">\n                                <code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;iostream&gt;\nusing namespace std;\n\nclass Node {\npublic:\n    int data;\n    Node *next;\n    Node *child;\n\n    // Constructors to initialize the\n    // data, next, and child pointers\n    Node() : data(0), next(nullptr), child(nullptr) {};\n    Node(int x) : data(x), next(nullptr), child(nullptr) {}\n    Node(int x, Node *nextNode, Node *childNode) : data(x), next(nextNode), child(childNode) {}\n};\n\n// Merges two linked lists in a particular\n// order based on the data value\nNode* merge(Node* list1, Node* list2){\n    // Create a dummy node as a\n    // placeholder for the result\n    Node* dummyNode = new Node(-1);\n    Node* res = dummyNode;\n\n    // Merge the lists based on data values\n    while(list1 != NULL &amp;&amp; list2 != NULL){\n        if(list1-&gt;data &lt; list2-&gt;data){\n            res-&gt;child = list1;\n            res = list1;\n            list1 = list1-&gt;child;\n        }\n        else{\n            res-&gt;child = list2;\n            res = list2;\n            list2 = list2-&gt;child;\n        }\n        res-&gt;next = NULL;\n    }\n\n    // Connect the remaining\n    // elements if any\n    if(list1){\n        res-&gt;child = list1;\n    } else {\n        res-&gt;child = list2;\n    }\n\n    // Break the last node's\n    // link to prevent cycles\n    if(dummyNode-&gt;child){\n        dummyNode-&gt;child-&gt;next = NULL;\n    }\n\n    return dummyNode-&gt;child;\n}\n\n// Flattens a linked list with child pointers\nNode* flattenLinkedList(Node* head){\n    // If head is null or there \n    // is no next node, return head\n    if(head == NULL || head-&gt;next == NULL){\n        return head;\n    }\n\n    // Recursively flatten the\n    // rest of the linked list\n    Node* mergedHead = flattenLinkedList(head-&gt;next);\n    head = merge(head, mergedHead);\n    return head;\n}\n\n// Print the linked list by\n// traversing through child pointers\nvoid printLinkedList(Node* head) {\n    while (head != nullptr) {\n        cout &lt;&lt; head-&gt;data &lt;&lt; &quot; &quot;;\n        head = head-&gt;child;\n    }\n    cout &lt;&lt; endl;\n}\n\n// Print the linked list\n// in a grid-like structure\nvoid printOriginalLinkedList(Node* head, int depth) {\n    while (head != nullptr) {\n        cout &lt;&lt; head-&gt;data;\n\n        // If child exists, recursively\n        // print it with indentation\n        if (head-&gt;child) {\n            cout &lt;&lt; &quot; -&gt; &quot;;\n            printOriginalLinkedList(head-&gt;child, depth + 1);\n        }\n\n        // Add vertical bars\n        // for each level in the grid\n        if (head-&gt;next) {\n            cout &lt;&lt; endl;\n            for (int i = 0; i &lt; depth; ++i) {\n                cout &lt;&lt; &quot;| &quot;;\n            }\n        }\n        head = head-&gt;next;\n    }\n}\n\nint main() {\n    // Create a linked list with child pointers\n    Node* head = new Node(5);\n    head-&gt;child = new Node(14);\n    \n    head-&gt;next = new Node(10);\n    head-&gt;next-&gt;child = new Node(4);\n    \n    head-&gt;next-&gt;next = new Node(12);\n    head-&gt;next-&gt;next-&gt;child = new Node(20);\n    head-&gt;next-&gt;next-&gt;child-&gt;child = new Node(13);\n    \n    head-&gt;next-&gt;next-&gt;next = new Node(7);\n    head-&gt;next-&gt;next-&gt;next-&gt;child = new Node(17);\n\n    // Print the original\n    // linked list structure\n    cout &lt;&lt; &quot;Original linked list:&quot; &lt;&lt; endl;\n    printOriginalLinkedList(head, 0);\n\n    // Flatten the linked list\n    // and print the flattened list\n    Node* flattened = flattenLinkedList(head);\n    cout &lt;&lt; &quot;\\nFlattened linked list: &quot;;\n    printLinkedList(flattened);\n\n    return 0;\n}\n\n                                </code>\n                            </pre>\n                        </div>\n                        <div class=\"code-block \" data-lang=\"java\">\n                            <pre class=\"wp-block-code\">\n                                <code lang=\"java\" class=\"language-java\">\nclass Node {\n    int data;\n    Node next;\n    Node child;\n\n    // Constructors to initialize the\n    // data, next, and child pointers\n    Node() {\n        this.data = 0;\n        this.next = null;\n        this.child = null;\n    }\n\n    Node(int x) {\n        this.data = x;\n        this.next = null;\n        this.child = null;\n    }\n\n    Node(int x, Node nextNode, Node childNode) {\n        this.data = x;\n        this.next = nextNode;\n        this.child = childNode;\n    }\n}\n\npublic class FlattenLinkedList {\n    // Merges two linked lists in a particular\n    // order based on the data value\n    public static Node merge(Node list1, Node list2) {\n        // Create a dummy node as a\n        // placeholder for the result\n        Node dummyNode = new Node(-1);\n        Node res = dummyNode;\n\n        // Merge the lists based on data values\n        while (list1 != null &amp;&amp; list2 != null) {\n            if (list1.data &lt; list2.data) {\n                res.child = list1;\n                res = list1;\n                list1 = list1.child;\n            } else {\n                res.child = list2;\n                res = list2;\n                list2 = list2.child;\n            }\n            res.next = null;\n        }\n\n        // Connect the remaining\n        // elements if any\n        if (list1 != null) {\n            res.child = list1;\n        } else {\n            res.child = list2;\n        }\n\n        // Break the last node's\n        // link to prevent cycles\n        if (dummyNode.child != null) {\n            dummyNode.child.next = null;\n        }\n\n        return dummyNode.child;\n    }\n\n    // Flattens a linked list with child pointers\n    public static Node flattenLinkedList(Node head) {\n        // If head is null or there\n        // is no next node, return head\n        if (head == null || head.next == null) {\n            return head;\n        }\n\n        // Recursively flatten the\n        // rest of the linked list\n        Node mergedHead = flattenLinkedList(head.next);\n        head = merge(head, mergedHead);\n        return head;\n    }\n\n    // Print the linked list by\n    // traversing through child pointers\n    public static void printLinkedList(Node head) {\n        while (head != null) {\n            System.out.print(head.data + &quot; &quot;);\n            head = head.child;\n        }\n        System.out.println();\n    }\n\n    // Print the linked list\n    // in a grid-like structure\n    public static void printOriginalLinkedList(Node head, int depth) {\n        while (head != null) {\n            System.out.print(head.data);\n\n            // If child exists, recursively\n            // print it with indentation\n            if (head.child != null) {\n                System.out.print(&quot; -&gt; &quot;);\n                printOriginalLinkedList(head.child, depth + 1);\n            }\n\n            // Add vertical bars\n            // for each level in the grid\n            if (head.next != null) {\n                System.out.println();\n                for (int i = 0; i &lt; depth; ++i) {\n                    System.out.print(&quot;| &quot;);\n                }\n            }\n            head = head.next;\n        }\n    }\n\n    public static void main(String[] args) {\n        // Create a linked list with child pointers\n        Node head = new Node(5);\n        head.child = new Node(14);\n\n        head.next = new Node(10);\n        head.next.child = new Node(4);\n\n        head.next.next = new Node(12);\n        head.next.next.child = new Node(20);\n        head.next.next.child.child = new Node(13);\n\n        head.next.next.next = new Node(7);\n        head.next.next.next.child = new Node(17);\n\n        // Print the original\n        // linked list structure\n        System.out.println(&quot;Original linked list:&quot;);\n        printOriginalLinkedList(head, 0);\n\n        // Flatten the linked list\n        // and print the flattened list\n        Node flattened = flattenLinkedList(head);\n        System.out.print(&quot;\\nFlattened linked list: &quot;);\n        printLinkedList(flattened);\n    }\n}\n\n\n                                </code>\n                            </pre>\n                        </div>\n                        <div class=\"code-block\" data-lang=\"python\">\n                            <pre class=\"wp-block-code\">\n                                <code lang=\"python\" class=\"language-python\">\n                     \nclass Node:\n    def __init__(self, x=0, nextNode=None, childNode=None):\n        self.data = x\n        self.next = nextNode\n        self.child = childNode\n\n# Merges two linked lists in a particular\n# order based on the data value\ndef merge(list1, list2):\n    # Create a dummy node as a\n    # placeholder for the result\n    dummyNode = Node(-1)\n    res = dummyNode\n\n    # Merge the lists based on data values\n    while list1 and list2:\n        if list1.data &lt; list2.data:\n            res.child = list1\n            res = list1\n            list1 = list1.child\n        else:\n            res.child = list2\n            res = list2\n            list2 = list2.child\n        res.next = None\n\n    # Connect the remaining\n    # elements if any\n    if list1:\n        res.child = list1\n    else:\n        res.child = list2\n\n    # Break the last node's\n    # link to prevent cycles\n    if dummyNode.child:\n        dummyNode.child.next = None\n\n    return dummyNode.child\n\n# Flattens a linked list with child pointers\ndef flattenLinkedList(head):\n    # If head is null or there \n    # is no next node, return head\n    if not head or not head.next:\n        return head\n\n    # Recursively flatten the\n    # rest of the linked list\n    mergedHead = flattenLinkedList(head.next)\n    head = merge(head, mergedHead)\n    return head\n\n# Print the linked list by\n# traversing through child pointers\ndef printLinkedList(head):\n    while head:\n        print(head.data, end=&quot; &quot;)\n        head = head.child\n    print()\n\n# Print the linked list\n# in a grid-like structure\ndef printOriginalLinkedList(head, depth):\n    while head:\n        print(head.data, end=&quot;&quot;)\n\n        # If child exists, recursively\n        # print it with indentation\n        if head.child:\n            print(&quot; -&gt; &quot;, end=&quot;&quot;)\n            printOriginalLinkedList(head.child, depth + 1)\n\n        # Add vertical bars\n        # for each level in the grid\n        if head.next:\n            print()\n            print(&quot;| &quot; * depth, end=&quot;&quot;)\n        head = head.next\n\n# Create a linked list with child pointers\nhead = Node(5)\nhead.child = Node(14)\nhead.next = Node(10)\nhead.next.child = Node(4)\nhead.next.next = Node(12)\nhead.next.next.child = Node(20)\nhead.next.next.child.child = Node(13)\nhead.next.next.next = Node(7)\nhead.next.next.next.child = Node(17)\n\n# Print the original\n# linked list structure\nprint(&quot;Original linked list:&quot;)\nprintOriginalLinkedList(head, 0)\n\n# Flatten the linked list\n# and print the flattened list\nflattened = flattenLinkedList(head)\nprint(&quot;\\nFlattened linked list: &quot;, end=&quot;&quot;)\nprintLinkedList(flattened)\n\n                                </code>\n                            </pre>\n                        </div>\n                         <div class=\"code-block\" data-lang=\"javascript\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"javascript\" class=\"language-javascript\">\nclass Node {\n    // Constructors to initialize the\n    // data, next, and child pointers\n    constructor() {\n        this.data = 0;\n        this.next = null;\n        this.child = null;\n    }\n\n    constructor(x) {\n        this.data = x;\n        this.next = null;\n        this.child = null;\n    }\n\n    constructor(x, nextNode, childNode) {\n        this.data = x;\n        this.next = nextNode;\n        this.child = childNode;\n    }\n}\n\n// Merges two linked lists in a\n// particular order based on the data value\nfunction merge(list1, list2) {\n    // Create a dummy node as\n    // a placeholder for the result\n    let dummyNode = new Node(-1);\n    let res = dummyNode;\n\n    // Merge the lists based on data values\n    while (list1 !== null &amp;&amp; list2 !== null) {\n        if (list1.data &lt; list2.data) {\n            res.child = list1;\n            res = list1;\n            list1 = list1.child;\n        } else {\n            res.child = list2;\n            res = list2;\n            list2 = list2.child;\n        }\n        res.next = null;\n    }\n\n    // Connect the remaining\n    // elements if any\n    if (list1) {\n        res.child = list1;\n    } else {\n        res.child = list2;\n    }\n\n    // Break the last node's\n    // link to prevent cycles\n    if (dummyNode.child) {\n        dummyNode.child.next = null;\n    }\n\n    return dummyNode.child;\n}\n\n// Flattens a linked list\n// with child pointers\nfunction flattenLinkedList(head) {\n    // If head is null or there\n    // is no next node, return head\n    if (head === null || head.next === null) {\n        return head;\n    }\n\n    // Recursively flatten the\n    // rest of the linked list\n    let mergedHead = flattenLinkedList(head.next);\n    head = merge(head, mergedHead);\n    return head;\n}\n\n// Print the linked list by\n// traversing through child pointers\nfunction printLinkedList(head) {\n    while (head !== null) {\n        console.log(head.data + &quot; &quot;);\n        head = head.child;\n    }\n    console.log();\n}\n\n// Print the linked list\n// in a grid-like structure\nfunction printOriginalLinkedList(head, depth) {\n    while (head !== null) {\n        console.log(head.data);\n\n        // If child exists, recursively\n        // print it with indentation\n        if (head.child) {\n            console.log(&quot; -&gt; &quot;);\n            printOriginalLinkedList(head.child, depth + 1);\n        }\n\n        // Add vertical bars for\n        // each level in the grid\n        if (head.next) {\n            console.log();\n            for (let i = 0; i &lt; depth; ++i) {\n                console.log(&quot;| &quot;);\n            }\n        }\n        head = head.next;\n    }\n}\n\n// Create a linked list\n// with child pointers\nlet head = new Node(5);\nhead.child = new Node(14);\nhead.next = new Node(10);\nhead.next.child = new Node(4);\nhead.next.next = new Node(12);\nhead.next.next.child = new Node(20);\nhead.next.next.child.child = new Node(13);\nhead.next.next.next = new Node(7);\nhead.next.next.next.child = new Node(17);\n\n// Print the original linked list structure\nconsole.log(&quot;Original linked list:&quot;);\nprintOriginalLinkedList(head, 0);\n\n// Flatten the linked list\n// and print the flattened list\nlet flattened = flattenLinkedList(head);\nconsole.log(&quot;\\nFlattened linked list: &quot;);\nprintLinkedList(flattened);\n\n                            </code>\n                        </pre>\n                        </div>\n                        <p>\n                             <strong>Output: </strong>Original linked list:</p>\n                             <p>5 -> 14</p>\n                             <p>10 -> 4</p>\n                             <p>12 -> 20 -> 13</p>\n                             <p>7 -> 17</p>\n                             <p>Flattened linked list: 5 7 10 4 12 14 17 20 13</p>\n\n                                               \n                    </div>\n                </details>\n                <details class=\"secondary-details\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Complexity Analysis\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <p>\n                        <p><strong>Time Complexity: O( N*(2M) ) ~ O(2 N*M)</strong>where N is the length of the linked list along the next pointer and M is the length of the linked list along the child pointers.\n                        <ol><li>The merge operation in each recursive call takes time complexity proportional to the length of the linked lists being merged as they have to iterate over the entire lists. Since the vertical depth of the linked lists is assume to be M, the time complexity for a single merge operation is proportional to O(2*M).</li><li>This operation operation is performed N number of times (to each and every node along the next pointer list) hence the resultant time complexity becomes: O(N* 2M).</li></ol></p>\n                        <p><strong>Space Complexity : O(1)</strong> as this algorithm uses no external space or additional data structures to store values. But a recursive stack uses O(N) space to build the recursive calls for each node along the next pointer list.</p>\n\n\n                    </p>\n                </details>\n            </div>\n        </details>\n    </div>\n</div>\n\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n    <details>\n        <summary class=\"main-summary\">\n            <span>\n                Video Explanation\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"yt-video-wrapper\">\n          <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ykelywHJWLg?si=d1iCOH9d7HhC7_qx\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n        </div>\n    </details>\n</div>\n\n<script src=\"https://takeuforward.org/UXApproachDropDowns/2ApproachJSScript.js\"></script>\n\n<blockquote class=\"wp-block-quote\">\n    Special thanks to <strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268\">Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,<strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\"> please check out this article</a></strong>\n</blockquote>\n\n\n<script>\n\n    const codeSections = document.querySelectorAll('.code-section');\n\n    // Get last selected language from localStorage or set default value\n    let lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp';\n\n    codeSections.forEach((section, sectionIndex) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n        const copyBtn = section.querySelector('.copy-btn');\n\n        codeTabs.forEach((tab) => {\n            tab.addEventListener('click', () => {\n                codeTabs.forEach((t) => {\n                    t.classList.remove('dsa_article_code_active');\n                });\n                tab.classList.add('dsa_article_code_active');\n\n                const lang = tab.dataset.lang;\n                const activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                codeBlocks.forEach((block) => {\n                    if (block === activeBlock) {\n                        block.classList.add('dsa_article_code_active');\n                    } else {\n                        block.classList.remove('dsa_article_code_active');\n                    }\n                });\n\n                // Update last selected language for all sections and store in localStorage\n                lastSelectedLanguage = lang;\n                localStorage.setItem('lastSelectedLanguage', lang);\n                codeSections.forEach((otherSection, otherIndex) => {\n                    if (otherIndex !== sectionIndex) {\n                        const otherTabs = otherSection.querySelectorAll('.code-tab');\n                        otherTabs.forEach((otherTab) => {\n                            if (otherTab.dataset.lang === lang) {\n                                otherTab.classList.add('dsa_article_code_active');\n                            } else {\n                                otherTab.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                        const otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                        const otherCodeBlocks = otherSection.querySelectorAll('.code-block');\n                        otherCodeBlocks.forEach((block) => {\n                            if (block === otherActiveBlock) {\n                                block.classList.add('dsa_article_code_active');\n                            } else {\n                                block.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                    }\n                });\n            });\n        });\n\n        // Handle copy button click event\n        copyBtn.addEventListener('click', () => {\n            const activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\n            navigator.clipboard.writeText(activeBlock.innerText);\n            copyBtn.classList.add('dsa_article_code_active');\n            setTimeout(() => {\n                copyBtn.classList.remove('dsa_article_code_active');\n            }, 1000);\n        });\n    });\n\n    // Set initial state of the tabs\n    codeSections.forEach((section) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n\n        codeTabs.forEach((tab) => {\n            if (tab.dataset.lang === lastSelectedLanguage) {\n                tab.classList.add('dsa_article_code_active');\n            } else {\n                tab.classList.remove('dsa_article_code_active');\n            }\n        });\n\n        codeBlocks.forEach((block) => {\n            if (block.dataset.lang === lastSelectedLanguage) {\n                block.classList.add('dsa_article_code_active');\n            } else {\n                block.classList.remove('dsa_article_code_active');\n            }\n        });\n    });\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>"
}