{
    "dislikes": 25,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:10:24 GMT+0530 (India Standard Time)",
    "slug": "union-of-two-sorted-arrays",
    "aid": "1764",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/union-of-two-sorted-arrays",
    "title": "Union of Two Sorted Arrays",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "hashing",
            "topic-title": "Hashing"
        }
    ],
    "likes": 520,
    "category_tag": "data-structure",
    "preview": "Problem Statement: Given two sorted arrays, arr1, and arr2 of size n and m. Find the union of two sorted arrays. The union of two arrays can be defined as the common and distinct elements in the tw...",
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement:</strong> Given two sorted arrays, <strong>arr1,</strong> and <strong>arr2 </strong>of size <strong>n </strong>and<strong> m</strong>. Find the union of two sorted arrays.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The union of two arrays can be defined as the common and distinct elements in the two arrays.<strong>NOTE:</strong> Elements in the union should be in ascending order.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n<details class=\"article_example_details\">\n<summary class=\"article_example_summary\">\n<span><strong>\nExamples\n</strong>\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"atricle_example_content\">\n<pre class=\"wp-block-preformatted\"><!-- Insert New Examples Here -->\n<pre class=\"wp-block-preformatted\"><strong>Example 1:</strong>\n<strong>Input:</strong>\nn = 5,m = 5.\narr1[] = {1,2,3,4,5}  \narr2[] = {2,3,4,4,5}\n<strong>Output:</strong>\n {1,2,3,4,5}\n\n<strong>Explanation: </strong>\nCommon Elements in arr1 and arr2  are:  2,3,4,5\nDistnict Elements in arr1 are : 1\nDistnict Elemennts in arr2 are : No distinct elements.\nUnion of arr1 and arr2 is {1,2,3,4,5} \n\n<strong>Example 2:</strong>\n<strong>Input:</strong>\nn = 10,m = 7.\narr1[] = {1,2,3,4,5,6,7,8,9,10}\narr2[] = {2,3,4,4,5,11,12}\n<strong>Output:</strong> {1,2,3,4,5,6,7,8,9,10,11,12}\n<strong>Explanation:</strong> \nCommon Elements in arr1 and arr2  are:  2,3,4,5\nDistnict Elements in arr1 are : 1,6,7,8,9,10\nDistnict Elemennts in arr2 are : 11,12\nUnion of arr1 and arr2 is {1,2,3,4,5,6,7,8,9,10,11,12} </pre>\n</pre>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Practice Section-->\n<div class=\"practice\">\n<span><strong>Practice: </strong></span>\n<div class=\"problem-buttons\">\n\n<!-- Add Problem Link inside href -->\n<a href=\"https://bit.ly/42SxAfe\" target=\"_blank\" rel=\"noopener\">\n<span>Solve Problem</span>\n<img src=\"https://static.takeuforward.org/wp/uploads/2023/04/Group-11-5.png\" alt=\"code-studio\">\n</a>\n</div>\n</div>\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\nyourself first. </em></p>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<div class=\"horizontal_navbar_dsa_article\">\n<div class=\"grid_container_three\">\n<a href=\"#brute-force-approach\" class=\"three-boxes box-a\">\nSolution 1:\n</a>\n<a href=\"#better-approach\" class=\"three-boxes box-b\">\nSolution 2:\n</a>\n<a href=\"#optimal-approach\" class=\"three-boxes box-c\">\nSolution 3:\n</a>\n<a href=\"#dsa_article_video_explanation\" class=\"three-boxes box-d\">\n<svg width=\"26\" height=\"26\" viewBox=\"0 0 20 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M8 10L13.19 7L8 4V10ZM19.56 2.17C19.69 2.64 19.78 3.27 19.84 4.07C19.91 4.87 19.94 5.56 19.94 6.16L20 7C20 9.19 19.84 10.8 19.56 11.83C19.31 12.73 18.73 13.31 17.83 13.56C17.36 13.69 16.5 13.78 15.18 13.84C13.88 13.91 12.69 13.94 11.59 13.94L10 14C5.81 14 3.2 13.84 2.17 13.56C1.27 13.31 0.69 12.73 0.44 11.83C0.31 11.36 0.22 10.73 0.16 9.93C0.0900001 9.13 0.0599999 8.44 0.0599999 7.84L0 7C0 4.81 0.16 3.2 0.44 2.17C0.69 1.27 1.27 0.69 2.17 0.44C2.64 0.31 3.5 0.22 4.82 0.16C6.12 0.0899998 7.31 0.0599999 8.41 0.0599999L10 0C14.19 0 16.8 0.16 17.83 0.44C18.73 0.69 19.31 1.27 19.56 2.17Z\" fill=\"red\"></path>\n</svg>\n\n</a>\n<div class=\"box-e tooltip\">\n<svg viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M12.842 9.25L11.9577 10.17C11.2502 10.89 10.8081 11.5 10.8081 13H8.84297V12.5C8.84297 11.39 9.28511 10.39 9.99255 9.67L11.2109 8.41C11.5745 8.05 11.7906 7.55 11.7906 7C11.7906 6.46957 11.5836 5.96086 11.2151 5.58579C10.8465 5.21071 10.3467 5 9.82552 5C9.30434 5 8.80451 5.21071 8.43598 5.58579C8.06745 5.96086 7.86041 6.46957 7.86041 7H5.89531C5.89531 5.93913 6.30938 4.92172 7.04644 4.17157C7.7835 3.42143 8.78316 3 9.82552 3C10.8679 3 11.8675 3.42143 12.6046 4.17157C13.3417 4.92172 13.7557 5.93913 13.7557 7C13.7543 7.84324 13.4259 8.65183 12.842 9.25ZM10.8081 17H8.84297V15H10.8081M9.82552 0C8.53521 0 7.25754 0.258658 6.06545 0.761205C4.87337 1.26375 3.79021 2.00035 2.87783 2.92893C1.03519 4.8043 0 7.34784 0 10C0 12.6522 1.03519 15.1957 2.87783 17.0711C3.79021 17.9997 4.87337 18.7362 6.06545 19.2388C7.25754 19.7413 8.53521 20 9.82552 20C12.4314 20 14.9306 18.9464 16.7732 17.0711C18.6158 15.1957 19.651 12.6522 19.651 10C19.651 4.47 15.2296 0 9.82552 0Z\" fill=\"black\"></path>\n</svg>\n<div class=\"bottom\">\n<p>Expand any one approach by clicking the given options in the bar. Clicking one approach on bar,\ncloses all other expands. You can manually expand more than one approach at a time</p>\n<i></i>\n</div>\n\n</div>\n</div>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Approaches Drop-Down -->\n<div class=\"dsa_article_dropdown_approachs \">\n\n<!-- Brute Force Approach Starts from here -->\n<div id=\"brute-force-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nSolution 1:\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<h3><strong>Solution 1:</strong> Using Map</h3>\n<p>Our aim is to find the common elements in arr1 and arr2, and the distinct elements of arr1,arr2. Use a Single map to find the frequencies of elements in arr1 and arr2.</p>\n<p>As we are using only a single map the common element in arr1 and arr2 are treated as a single element for finding frequency, so there would be no duplicates.</p>\n<h3><strong>Why not unordered_map?</strong></h3>\n<p>In unordered_map the keys are stored in random order, while in the map the keys are stored in sorted order (ascending order by default). As we require elements of the union to be in ascending order, using a map is preferable.</p>\n<p>We can also use unordered_map, but after finding the union of arr1 and arr2, we need to sort the union vector to get the elements of the union in sorted order.</p>\n\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\nvector &lt; int &gt; FindUnion(int arr1[], int arr2[], int n, int m) {\n  map &lt; int, int &gt; freq;\n  vector &lt; int &gt; Union;\n  for (int i = 0; i &lt; n; i++)\n    freq[arr1[i]]++;\n  for (int i = 0; i &lt; m; i++)\n    freq[arr2[i]]++;\n  for (auto &amp; it: freq)\n    Union.push_back(it.first);\n  return Union;\n}\n\nint main() {\n  int n = 10, m = 7;\n  int arr1[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n  int arr2[] = {2, 3, 4, 4, 5, 11, 12};\n  vector &lt; int &gt; Union = FindUnion(arr1, arr2, n, m);\n  cout &lt;&lt; \"Union of arr1 and arr2 is \" &lt;&lt; endl;\n  for (auto &amp; val: Union)\n    cout &lt;&lt; val &lt;&lt; \" \";\n  return 0;\n}\n\n</code>\n</pre>\n<p>\n<p><strong>Output:</strong></p>\n<p>Union of arr1 and arr2 is&nbsp;</p>\n<p>1 2 3 4 5 6 7 8 9 10 11 12.</p>\n\n\n</p>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\nclass TUF{\nstatic ArrayList&lt;Integer&gt; FindUnion(int arr1[], int arr2[], int n, int m) {\n  HashMap &lt;Integer,Integer &gt; freq=new HashMap&lt;&gt;();\n  ArrayList&lt;Integer&gt; Union=new ArrayList&lt;&gt;();\n  for (int i = 0; i &lt; n; i++)\n    freq.put(arr1[i],freq.getOrDefault(arr1[i],0)+1);\n    \n  for (int i = 0; i &lt; m; i++)\n    freq.put(arr2[i],freq.getOrDefault(arr2[i],0)+1);\n  for (int it: freq.keySet())\n    Union.add(it);\n  return Union;\n}\n\npublic static void main(String args[]) {\n  int n = 10, m = 7;\n  int arr1[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n  int arr2[] = {2, 3, 4, 4, 5, 11, 12};\n  ArrayList&lt;Integer&gt; Union = FindUnion(arr1, arr2, n, m);\n  System.out.println(\"Union of arr1 and arr2 is \");\n  for (int val: Union)\n    System.out.print(val+\" \");\n}\n}\n</code>\n</pre>\n<p>\n<p><strong>Output:</strong></p>\n<p>Union of arr1 and arr2 is&nbsp;</p>\n<p>1 2 3 4 5 6 7 8 9 10 11 12.</p>\n\n\n</p>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\ndef find_union(arr1, arr2):\n    freq = {}\n    union = []\n    \n    for num in arr1:\n        freq[num] = freq.get(num, 0) + 1\n    \n    for num in arr2:\n        freq[num] = freq.get(num, 0) + 1\n    \n    for num in freq:\n        union.append(num)\n    \n    return union\n\narr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\narr2 = [2, 3, 4, 4, 5, 11, 12]\n\nunion = find_union(arr1, arr2)\n\nprint(\"Union of arr1 and arr2 is:\")\nfor num in union:\n    print(num, end=\" \")\n</code>\n</pre>\n<p>\n<p><strong>Output:</strong></p>\n<p>Union of arr1 and arr2 is&nbsp;</p>\n<p>1 2 3 4 5 6 7 8 9 10 11 12.</p>\n\n\n\n</p>\n</div>\n<div class=\"code-block \" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\nfunction findUnion(arr1, arr2) {\n  let freq = new Map();\n  let union = [];\n  \n  for (let num of arr1) {\n    freq.set(num, (freq.get(num) || 0) + 1);\n  }\n  \n  for (let num of arr2) {\n    freq.set(num, (freq.get(num) || 0) + 1);\n  }\n  \n  for (let [num, count] of freq) {\n    union.push(num);\n  }\n  \n  return union;\n}\n\nlet arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet arr2 = [2, 3, 4, 4, 5, 11, 12];\n\nlet union = findUnion(arr1, arr2);\n\nconsole.log(\"Union of arr1 and arr2 is:\");\nconsole.log(union.join(\" \"));\n\n</code>\n</pre>\n<p>\n<p><strong>Output:</strong></p>\n<p>Union of arr1 and arr2 is&nbsp;</p>\n<p>1 2 3 4 5 6 7 8 9 10 11 12.</p>\n\n</p>\n</div>\n\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n<p><strong>Time Compleixty : O( (m+n)log(m+n) </strong>) . Inserting a key in map takes logN times, where N is no of elements in map. At max map can store m+n elements <strong>{when there are no common elements and elements in arr,arr2 are distntict}</strong>. So Inserting m+n th element takes log(m+n) time. Upon approximation across insertion of all elements in worst it would take O((m+n)log(m+n) time.</p>\n<p>Using <strong>HashMap </strong>also takes the same time, On average insertion in unordered_map takes O(1) time but sorting the union vector takes O((m+n)log(m+n))&nbsp; time. Because at max union vector can have m+n elements.</p>\n<p><strong>Space Complexity : O(m+n)</strong> {If Space of Union ArrayList is considered}&nbsp;</p>\n<p><strong>O(1)</strong> {If Space of union ArrayList is not considered}</p>\n</p>\n</details>\n</div>\n</details>\n</div>\n<!-- Brute Force Approach Ends here -->\n\n\n<!-- Better Approach Starts from here -->\n\n<div id=\"better-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nSolution 2:\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<h3><strong>Solution 2:</strong> <strong>Using Set</strong></h3>\n<p>Suppose we consider arr1 and arr2 as a single array say arr,\u00a0 then the union of arr1 and arr2 is the distinct elements in arr.</p>\n<h3><strong>Example:</strong></h3>\n<pre class=\"wp-block-preformatted\">arr1[] = {1,2,3,4,5,6,7,8,9,10}\narr2[] = {2,3,4,4,5,11,12}&nbsp;\narr = arr1 + arr2 = {1,2,3,4,5,67,8,9,\n                     10,2,3,4,4,5,11,12}\n\nDistinct element in \narr&nbsp;= {1,2,3,4,5,6,7,8,9,10,11,12} \n    = Union of arr1 ,arr2.</pre>\n<p>So using a set we can find the distinct elements because the set does not hold any duplicates. Hence we can find the union of arr1 and arr2.</p>\n<h3><strong>Why not unordered_set?</strong></h3>\n<p>In unordered_set the elements are stored in random order, while in a set the keys are stored in sorted order (ascending order by default). As we require elements of the union to be in ascending order, using a set is preferable.</p>\n<p>We can also use unordered_set, but after finding the union of arr1 and arr2, we need to sort the union vector to get the elements of the union in sorted order.</p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\nvector &lt; int &gt; FindUnion(int arr1[], int arr2[], int n, int m) {\n  set &lt; int &gt; s;\n  vector &lt; int &gt; Union;\n  for (int i = 0; i &lt; n; i++)\n    s.insert(arr1[i]);\n  for (int i = 0; i &lt; m; i++)\n    s.insert(arr2[i]);\n  for (auto &amp; it: s)\n    Union.push_back(it);\n  return Union;\n}\n\nint main()\n\n{\n  int n = 10, m = 7;\n  int arr1[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n  int arr2[] = {2, 3, 4, 4, 5, 11, 12};\n  vector &lt; int &gt; Union = FindUnion(arr1, arr2, n, m);\n  cout &lt;&lt; \"Union of arr1 and arr2 is  \" &lt;&lt; endl;\n  for (auto &amp; val: Union)\n    cout &lt;&lt; val &lt;&lt; \" \";\n  return 0;\n}\n</code>\n</pre>\n<p>\n<p><strong>Output:</strong></p>\n<p>Union of arr1 and arr2 is&nbsp;</p>\n<p>1 2 3 4 5 6 7 8 9 10 11 12.&nbsp;</p>\n\n\n</p>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\nclass TUF{\nstatic ArrayList&lt;Integer&gt; FindUnion(int arr1[], int arr2[], int n, int m) {\n  HashSet &lt;Integer&gt; s=new HashSet&lt;&gt;();\n  ArrayList &lt; Integer &gt; Union=new ArrayList&lt;&gt;();\n  for (int i = 0; i &lt; n; i++)\n    s.add(arr1[i]);\n  for (int i = 0; i &lt; m; i++)\n    s.add(arr2[i]);\n  for (int it: s)\n    Union.add(it);\n  return Union;\n}\npublic static void main(String args[]) {\n  int n = 10, m = 7;\n  int arr1[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n  int arr2[] = {2, 3, 4, 4, 5, 11, 12};\n  ArrayList&lt;Integer&gt; Union = FindUnion(arr1, arr2, n, m);\n  System.out.println(\"Union of arr1 and arr2 is \");\n  for (int val: Union)\n    System.out.print(val+\" \");\n}\n}\n</code>\n</pre>\n<p>\n<p><strong>Output:</strong></p>\n<p>Union of arr1 and arr2 is&nbsp;</p>\n<p>1 2 3 4 5 6 7 8 9 10 11 12.&nbsp;</p>\n\n</p>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\ndef find_union(arr1, arr2):\n    s = set()\n    union = []\n    \n    for num in arr1:\n        s.add(num)\n    \n    for num in arr2:\n        s.add(num)\n    \n    for num in s:\n        union.append(num)\n    \n    return union\n\narr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\narr2 = [2, 3, 4, 4, 5, 11, 12]\n\nunion = find_union(arr1, arr2)\n\nprint(\"Union of arr1 and arr2 is:\")\nprint(*union)\n\n\n</code>\n</pre>\n<p>\n<p><strong>Output:</strong></p>\n<p>Union of arr1 and arr2 is&nbsp;</p>\n<p>1 2 3 4 5 6 7 8 9 10 11 12.&nbsp;</p>\n\n</p>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\nfunction findUnion(arr1, arr2) {\n  const set = new Set();\n  const union = [];\n\n  for (let num of arr1) {\n    set.add(num);\n  }\n\n  for (let num of arr2) {\n    set.add(num);\n  }\n\n  for (let num of set) {\n    union.push(num);\n  }\n\n  return union;\n}\n\nconst arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst arr2 = [2, 3, 4, 4, 5, 11, 12];\n\nconst union = findUnion(arr1, arr2);\n\nconsole.log(\"Union of arr1 and arr2 is:\");\nconsole.log(...union);\n</code>\n</pre>\n<p>\n<p><strong>Output:</strong></p>\n<p>Union of arr1 and arr2 is&nbsp;</p>\n<p>1 2 3 4 5 6 7 8 9 10 11 12.&nbsp;</p>\n\n\n</p>\n</div>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n<p><strong>Time Compleixty : O( (m+n)log(m+n) </strong>) . Inserting an element in a set takes logN time, where N is no of elements in the set. At max set can store m+n elements <strong>{when there are no common elements and elements in arr,arr2 are distntict}.</strong> So Inserting m+n th element takes log(m+n) time. Upon approximation across inserting all elements in worst, it would take O((m+n)log(m+n) time.</p>\n<p>Using <strong>HashSet</strong> also takes the same time, On average insertion in unordered_set takes O(1) time but sorting the union vector takes O((m+n)log(m+n))&nbsp; time. Because at max union vector can have m+n elements.</p>\n<p><strong>Space Complexity : O(m+n)</strong> {If Space of Union ArrayList is considered}&nbsp;</p>\n<p><strong>O(1)</strong> {If Space of union ArrayList is not considered}</p>\n</p>\n</details>\n</div>\n</details>\n</div>\n<!-- Better Approach Ends from here -->\n\n\n<!-- Optimal Approach Starts from here -->\n\n<div id=\"optimal-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nSolution 3:\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n<h3><strong>Solution 3:</strong> Two Pointers</h3>\n<p>Solution 1 and 2 work for the unsorted arrays also, The arrays arr1 and arr2 are sorted, can we use this property to reduce the time Complexity?</p>\n<p>Using the property that the arrays are sorted we can bring down the time complexity from</p>\n<pre class=\"wp-block-preformatted\">O((m+n)log(m+n))    <strong>TO</strong>    O(m+n).</pre>\n<h3><strong>Approach:</strong></h3>\n<ul><li>Take two pointers let\u2019s say i,j pointing to the 0th index of arr1 and arr2.</li><li>Create an empty vector for storing the union of arr1 and arr2.</li><li>From solution 2 we know that the union is nothing but the distinct elements in arr1 + arr2\u00a0</li><li>Let\u2019s traverse the arr1 and arr2 using pointers i and j and insert the distinct elements found into the union vector.</li></ul>\n<p>While traversing we may encounter three cases.</p>\n<ul><li><strong>arr1[ i ] == arr2[ j ]&nbsp;</strong><br>Here we found a common element, so insert only one element in the union. Let\u2019s insert arr[i] in&nbsp;union and increment i.<br><br><strong>NOTE:&nbsp;</strong>There may be cases like the element to be inserted is already present in the union, in that&nbsp;case, we are inserting duplicates which is not desired. So while inserting always check&nbsp;whether the last element in the union vector is equal or not to the element to be inserted. If&nbsp;equal we are trying to insert duplicates, so don\u2019t insert the element, else insert the&nbsp;element in the union. This makes sure that we are not inserting any duplicates in the union&nbsp;because we are inserting elements in sorted order.</li><li><strong>arr1[ i ]&nbsp; &lt; arr2[ j ]</strong><br>arr1[ i ] &lt; arr2[ j ] so we need to insert arr1[ i ] in union.IF last element in&nbsp; union vector is not equal to arr1[ i ],then insert in union else don\u2019t insert. After checking Increment i.</li><li><strong>arr1[ i ] &gt; arr2[ j ]</strong><br>arr1[ i ] &gt; arr2[ j ] so we need to insert arr2[ j ] in union. IF the last element in the union vector is not equal to arr2[ j ], then insert in the union, else don\u2019t insert. After checking Increment j. After traversing if any elements are left in arr1 or arr2 check for condition and insert in the union.</li></ul>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n\n<!-- Insert C++ code of Optimal Approach Here-->\n#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\nvector &lt; int &gt; FindUnion(int arr1[], int arr2[], int n, int m) {\n  int i = 0, j = 0; // pointers\n  vector &lt; int &gt; Union; // Uninon vector\n  while (i &lt; n &amp;&amp; j &lt; m) {\n    if (arr1[i] &lt;= arr2[j]) // Case 1 and 2\n    {\n      if (Union.size() == 0 || Union.back() != arr1[i])\n        Union.push_back(arr1[i]);\n      i++;\n    } else // case 3\n    {\n      if (Union.size() == 0 || Union.back() != arr2[j])\n        Union.push_back(arr2[j]);\n      j++;\n    }\n  }\n  while (i &lt; n) // IF any element left in arr1\n  {\n    if (Union.back() != arr1[i])\n      Union.push_back(arr1[i]);\n    i++;\n  }\n  while (j &lt; m) // If any elements left in arr2\n  {\n    if (Union.back() != arr2[j])\n      Union.push_back(arr2[j]);\n    j++;\n  }\n  return Union;\n}\n\nint main()\n\n{\n  int n = 10, m = 7;\n  int arr1[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n  int arr2[] = {2, 3, 4, 4, 5, 11, 12}; \n  vector &lt; int &gt; Union = FindUnion(arr1, arr2, n, m);\n  cout &lt;&lt; \"Union of arr1 and arr2 is  \" &lt;&lt; endl;\n  for (auto &amp; val: Union)\n    cout &lt;&lt; val &lt;&lt; \" \";\n  return 0;\n}\n</code>\n</pre>\n<p>\n<!-- Insert Output of Optimal Apporach Here -->\n<p><strong>Output:</strong></p>\n<p>Union of arr1 and arr2 is&nbsp;</p>\n<p>1 2 3 4 5 6 7 8 9 10 11 12.&nbsp;</p>\n</p>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\n<!-- Insert Java code of Optimal Approach Here -->\nimport java.util.*;\n\nclass TUF{\nstatic ArrayList&lt;Integer&gt; FindUnion(int arr1[], int arr2[], int n, int m) {\n   int i = 0, j = 0; // pointers\n  ArrayList&lt;Integer &gt; Union=new ArrayList&lt;&gt;(); // Uninon vector\n  while (i &lt; n &amp;&amp; j &lt; m) {\n    if (arr1[i] &lt;= arr2[j]) // Case 1 and 2\n    {\n      if (Union.size() == 0 || Union.get(Union.size()-1) != arr1[i])\n        Union.add(arr1[i]);\n      i++;\n    } else // case 3\n    {\n      if (Union.size() == 0 || Union.get(Union.size()-1) != arr2[j])\n        Union.add(arr2[j]);\n      j++;\n    }\n  }\n  while (i &lt; n) // IF any element left in arr1\n  {\n    if (Union.get(Union.size()-1) != arr1[i])\n      Union.add(arr1[i]);\n    i++;\n  }\n  while (j &lt; m) // If any elements left in arr2\n  {\n    if (Union.get(Union.size()-1) != arr2[j])\n      Union.add(arr2[j]);\n    j++;\n  }\n  return Union;\n}\npublic static void main(String args[]) {\n  int n = 10, m = 7;\n  int arr1[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n  int arr2[] = {2, 3, 4, 4, 5, 11, 12};\n  ArrayList&lt;Integer&gt; Union = FindUnion(arr1, arr2, n, m);\n  System.out.println(\"Union of arr1 and arr2 is \");\n  for (int val: Union)\n    System.out.print(val+\" \");\n}\n}\n\n</code>\n</pre>\n<p>\n<!-- Insert Output of Optimal Apporach Here -->\n<p><strong>Output:</strong></p>\n<p>Union of arr1 and arr2 is&nbsp;</p>\n<p>1 2 3 4 5 6 7 8 9 10 11 12.&nbsp;</p>\n</p>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\n<!-- Insert Python code of Optimal Approach Here -->\ndef find_union(arr1, arr2):\n    i, j = 0, 0  # Pointers\n    union = []  # Union list\n\n    while i &lt; len(arr1) and j &lt; len(arr2):\n        if arr1[i] &lt;= arr2[j]:  # Case 1 and 2\n            if len(union) == 0 or union[-1] != arr1[i]:\n                union.append(arr1[i])\n            i += 1\n        else:  # Case 3\n            if len(union) == 0 or union[-1] != arr2[j]:\n                union.append(arr2[j])\n            j += 1\n\n    while i &lt; len(arr1):  # If any elements left in arr1\n        if union[-1] != arr1[i]:\n            union.append(arr1[i])\n        i += 1\n\n    while j &lt; len(arr2):  # If any elements left in arr2\n        if union[-1] != arr2[j]:\n            union.append(arr2[j])\n        j += 1\n\n    return union\n\n\narr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\narr2 = [2, 3, 4, 4, 5, 11, 12]\n\nunion = find_union(arr1, arr2)\n\nprint(\"Union of arr1 and arr2 is:\")\nprint(*union)\n</code>\n</pre>\n<p>\n<!-- Insert Output of Optimal Apporach Here -->\n<p><strong>Output:</strong></p>\n<p>Union of arr1 and arr2 is&nbsp;</p>\n<p>1 2 3 4 5 6 7 8 9 10 11 12.&nbsp;</p>\n</p>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\n<!-- Insert Python Code of Better Approach Here -->\nfunction findUnion(arr1, arr2) {\n  let i = 0, j = 0; // Pointers\n  let union = []; // Union array\n\n  while (i &lt; arr1.length &amp;&amp; j &lt; arr2.length) {\n    if (arr1[i] &lt;= arr2[j]) { // Case 1 and 2\n      if (union.length === 0 || union[union.length - 1] !== arr1[i])\n        union.push(arr1[i]);\n      i++;\n    } else { // Case 3\n      if (union.length === 0 || union[union.length - 1] !== arr2[j])\n        union.push(arr2[j]);\n      j++;\n    }\n  }\n\n  while (i &lt; arr1.length) { // If any elements left in arr1\n    if (union[union.length - 1] !== arr1[i])\n      union.push(arr1[i]);\n    i++;\n  }\n\n  while (j &lt; arr2.length) { // If any elements left in arr2\n    if (union[union.length - 1] !== arr2[j])\n      union.push(arr2[j]);\n    j++;\n  }\n\n  return union;\n}\n\nconst arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst arr2 = [2, 3, 4, 4, 5, 11, 12];\n\nconst union = findUnion(arr1, arr2);\n\nconsole.log(\"Union of arr1 and arr2 is:\");\nconsole.log(union.join(\" \"));\n\n</code>\n</pre>\n<p>\n<!-- Insert Output of Better Approach Here -->\n<p><strong>Output:</strong></p>\n<p>Union of arr1 and arr2 is&nbsp;</p>\n<p>1 2 3 4 5 6 7 8 9 10 11 12.&nbsp;</p>\n</p>\n</div>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Optimal Approach-->\n<p><strong>Time Complexity</strong>: O(m+n), Because at max i runs for n times and j runs for m times. When there are no common elements in arr1 and arr2 and all elements in arr1, arr2 are distinct.&nbsp;</p>\n<p><strong>Space Complexity : O(m+n)</strong> {If Space of Union ArrayList is considered}&nbsp;</p>\n<p><strong>O(1)</strong> {If Space of union ArrayList is not considered}</p>\n</p>\n</details>\n</div>\n</details>\n</div>\n<!-- Optimal Approach Starts from here -->\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n<details>\n<summary class=\"main-summary\">\n<span>\nVideo Explanation\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"yt-video-wrapper\">\n\n<!-- Insert iframe embed Link of Youtube Video-->\n<iframe class=\"lazy-loaded\" loading=\"lazy\" title=\"Union of Two Sorted Arrays\" width=\"810\" height=\"456\" data-lazy-type=\"iframe\" data-src=\"https://www.youtube.com/embed/wvcQg43_V8U?start=2584\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\" src=\"https://www.youtube.com/embed/wvcQg43_V8U?feature=oembed\"></iframe><noscript>\n<iframe loading=\"lazy\" title=\"Union of Two Sorted Arrays\" width=\"810\" height=\"456\" src=\"https://www.youtube.com/embed/wvcQg43_V8U?start=2584\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe></noscript>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script>\n\nconst codeSections = document.querySelectorAll('.code-section');\n\n// Get last selected language from localStorage or set default value\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\n// Update last selected language for all sections and store in localStorage\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\n// Handle copy button click event\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\n// Set initial state of the tabs\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<script>\nconst codeSections = document.querySelectorAll('.code-section');\n\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script src=\"https://takeuforward.org/UXApproachDropDowns/3ApproachJSScript.js\"></script>\n<!-- /wp:html -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;<strong><a href=\"https://www.linkedin.com/in/saisri-angajala-818598197/\" target=\"_blank\" rel=\"noreferrer noopener\">SaiSri Angajala</a></strong>&nbsp;for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->"
}