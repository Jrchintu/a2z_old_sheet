{
    "dislikes": 4,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:10:09 GMT+0530 (India Standard Time)",
    "slug": "insert-at-end-of-doubly-linked-list",
    "aid": "1691",
    "tuf_plus": "",
    "title": "Insert at end of Doubly Linked List",
    "topics": [
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "linked-list",
            "topic-title": "Linked List"
        }
    ],
    "category_tag": "data-structure",
    "likes": 77,
    "preview": "Problem Statement: Given a doubly linked list, and a value \u2018k\u2019, insert a node having value \u2018k\u2019 at the end of the doubly linked list. Examples Example 1: Input Format: DLL: 1 <-> 2 <-> 3 <-> 4 Value...",
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement:</strong> Given a doubly linked list, and a value <strong>\u2018k\u2019</strong>, insert a node having value <strong>\u2018k\u2019</strong> at the end of the doubly linked list.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n<details class=\"article_example_details\">\n<summary class=\"article_example_summary\">\n<span><strong>\nExamples\n</strong>\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"atricle_example_content\">\n<pre class=\"wp-block-preformatted\"><!-- Insert New Examples Here -->\n<p><strong>Example 1:</strong></p>\n<p><strong>Input Format</strong>:</p>\n<p>DLL: 1 &lt;-&gt; 2 &lt;-&gt; 3 &lt;-&gt; 4</p>\n<p>Value to be Inserted: 6</p>\n<figure class=\"wp-block-image size-large\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/11/dll-insertatend-ex-1-1024x238.png\" alt=\"\" class=\"wp-image-12943\"></figure>\n<p><strong>Result</strong>: DLL: 1 &lt;-&gt; 2 &lt;-&gt; 3 &lt;-&gt; 4 &lt;-&gt; 6</p>\n<figure class=\"wp-block-image size-large\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/11/dll-insertatend-res1-1024x187.png\" alt=\"\" class=\"wp-image-12944\"></figure>\n<p><strong>Explanation</strong>: A new node with value 6 has been inserted at the end of the doubly linked list after the tail node.</p>\n<p><strong>Example 2:</strong></p>\n<p><strong>Input Format:</strong></p>\n<p>DLL: 10 &lt;-&gt; 20 &lt;-&gt; 30</p>\n<p>Value to be Inserted: 40</p>\n<figure class=\"wp-block-image size-large\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/11/dll-insertatend-ex1-1024x244.png\" alt=\"\" class=\"wp-image-12945\"></figure>\n<p><strong>Result</strong>: DLL: 10 &lt;-&gt; 20 &lt;-&gt; 30 &lt;-&gt; 40</p>\n<figure class=\"wp-block-image size-large\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/11/dll-insertatend-res-2-1024x218.png\" alt=\"\" class=\"wp-image-12946\"></figure>\n<p><strong>Explanation</strong>: In this case, a new node with value 40 is inserted after 30 which is at the end of the doubly linked list.</p>\n</pre>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Solution</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"textColor\":\"accent\"} -->\n<p class=\"has-accent-color has-text-color\"><strong><em>Disclaimer</em></strong>: <em>Don't jump directly to the solution, try it out yourself first.</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Approach</strong>:&nbsp;</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>To insert before a given node, begin by identifying its <strong>previous</strong> <strong>node</strong>. This step is assured since the provided node is never the head. Create a <strong>new</strong> <strong>node</strong> with the specified value and set its <strong>back</strong> and <strong>next</strong> pointers to the <strong>previous</strong> <strong>node</strong> and the <strong>given</strong> <strong>node</strong>, respectively. To seamlessly integrate the new node into the doubly linked list, set the previous node's <strong>next</strong> pointer and the given node's <strong>back</strong> pointer to the <strong>new</strong> <strong>node</strong>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Step 1: </strong>Traverse through the list, and reach the tail of the DLL. Let\u2019s use a node <strong>tail</strong> traverse from the head.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":12947,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/11/dll-insertAfterTail-step1-1024x227.png\" alt=\"\" class=\"wp-image-12947\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>Step 2: </strong>Create a<strong> new node</strong> with its <strong>data as k </strong>and back <strong>pointer pointing to tail</strong> and next pointer pointing to null as the new tail will point to null<strong>.</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":12948,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/11/dll-insertAfterTail-ste2-1024x260.png\" alt=\"\" class=\"wp-image-12948\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>Step 3:</strong> Update the <strong>next</strong> <strong>pointer</strong> of the current <strong>tail</strong> <strong>node</strong> to point to the newly created node which will be our new tail post this. Then, <strong>return the head</strong> of the updated doubly linked list.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":12949,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/11/dll-insertAftertail-stpep3-1024x207.png\" alt=\"\" class=\"wp-image-12949\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include &lt;iostream>\n#include &lt;bits/stdc++.h>\n\nusing namespace std;\n\n// Define a Node class for doubly linked list\nclass Node {\npublic:\n    // Data stored in the node\n    int data;   \n    // Pointer to the next node in the list (forward direction)\n    Node* next;     \n    // Pointer to the previous node in the list (backward direction)\n    Node* back;     \n\n    // Constructor for a Node with both data, a reference to the next node, and a reference to the previous node\n    Node(int data1, Node* next1, Node* back1) {\n        data = data1;\n        next = next1;\n        back = back1;\n    }\n\n    // Constructor for a Node with data, and no references to the next and previous nodes (end of the list)\n    Node(int data1) {\n        data = data1;\n        next = nullptr;\n        back = nullptr;\n    }\n};\n\n// Function to convert an array to a doubly linked list\nNode* convertArr2DLL(vector&lt;int> arr) {\n    // Create the head node with the first element of the array\n    Node* head = new Node(arr[0]);\n    // Initialize 'prev' to the head node\n    Node* prev = head;            \n\n    for (int i = 1; i &lt; arr.size(); i++) {\n        // Create a new node with data from the array and set its 'back' pointer to the previous node\n        Node* temp = new Node(arr[i], nullptr, prev);\n        // Update the 'next' pointer of the previous node to point to the new node\n        prev->next = temp; \n         // Move 'prev' to the newly created node for the next iteration\n        prev = temp;       \n    }\n    // Return the head of the doubly linked list\n    return head;  \n}\n\n// Function to print the elements of the doubly linked list\nvoid print(Node* head) {\n    while (head != nullptr) {\n        // Print the data in the tail node\n        cout &lt;&lt; head->data &lt;&lt; \" \";  \n         // Move to the next node\n        head = head->next;         \n    }\n}\n\n \n\n\n// Function to insert a new node with value 'k' at the end of the doubly linked list\nNode* insertAtTail(Node* head, int k) {\n    // Create a new node with data 'k'\n    Node* newNode = new Node(k);\n\n    // If the doubly linked list is empty, set 'head' to the new node\n    if (head == nullptr) {\n        return newNode;\n    }\n\n    // Traverse to the end of the doubly linked list\n    Node* tail = head;\n    while (tail->next != nullptr) {\n        tail = tail->next;\n    }\n\n    // Connect the new node to the last node in the list\n    tail->next = newNode;\n    newNode->back = tail;\n\n    return head;\n}\n\n\n\nint main() {\n    vector&lt;int> arr = {12, 5, 8, 7, 4};\n    Node* head = convertArr2DLL(arr);\n\ncout &lt;&lt; \"Doubly Linked List Initially: \" &lt;&lt; endl;\n    print(head);\n\n\n    cout &lt;&lt; endl &lt;&lt; \"Doubly Linked List After Inserting at the tail with value 10: \" &lt;&lt; endl;\n     // Insert a node with value 10 at the end\n    head = insertAtTail(head, 10);\n    print(head);\n\n    return 0;\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Doubly Linked List Initially:<br>12 5 8 7 4\u00a0<br>Doubly Linked List After Inserting at the tail with value 10:\u00a0<br>12 5 8 7 4 10</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(N) </strong>The time complexity of this insertion operation is O(N) because we have to <strong>traverse</strong> the entire list to reach its tail. The complexity would be O(1) if we were given the tail node directly.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(1)\u00a0 </strong>The space complexity is also O(1) because we are <strong>notusing</strong> any <strong>extradatastructures</strong> to do the operations apart from creating a single new node.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\"> public class DLinkedList {\n    public static class Node {\n        // Data stored in the node\n        public int data;\n        // Reference to the next node in the list (forward direction)\n        public Node next;\n        // Reference to the previous node in the list (backward direction)\n        public Node back;\n\n        // Constructor for a Node with both data, a reference to the next node, and a reference to the previous node\n        public Node(int data1, Node next1, Node back1) {\n            data = data1;\n            next = next1;\n            back = back1;\n        }\n\n        // Constructor for a Node with data, and no references to the next and previous nodes (end of the list)\n        public Node(int data1) {\n            data = data1;\n            next = null;\n            back = null;\n        }\n    }\n\n    private static Node convertArr2DLL(int[] arr) {\n        // Create the head node with the first element of the array\n        Node head = new Node(arr[0]);\n        // Initialize 'prev' to the head node\n        Node prev = head;\n\n        for (int i = 1; i &lt; arr.length; i++) {\n            // Create a new node with data from the array and set its 'back' pointer to the previous node\n            Node temp = new Node(arr[i], null, prev);\n            // Update the 'next' pointer of the previous node to point to the new node\n            prev.next = temp;\n            // Move 'prev' to the newly created node for the next iteration\n            prev = temp;\n        }\n        // Return the head of the doubly linked list\n        return head;\n    }\n\n    private static void print(Node head) {\n        while (head != null) {\n            // Print the data in the current node\n            System.out.print(head.data + \" \");\n            // Move to the next node\n            head = head.next; // Move to the next node\n        }\n        System.out.println();\n    }\n    \n    // Function to insert a new node with value 'k' at the end of the doubly linked list\n    private static Node insertAtTail(Node head, int k) {\n        // Create a new node with data 'k'\n        Node newNode = new Node(k);\n    \n        // If the doubly linked list is empty, set 'head' to the new node\n        if (head == null) {\n            return newNode;\n        }\n    \n        // Traverse to the end of the doubly linked list\n        Node current = head;\n        while (current.next != null) {\n            current = current.next;\n        }\n    \n        // Connect the new node to the last node in the list\n        current.next = newNode;\n        newNode.back = current;\n    \n        return head;\n        }\n\n\n    \n\n    public static void main(String[] args) {\n        int[] arr = {12, 5, 6, 8, 4};\n        // Convert the array to a doubly linked list\n        Node head = convertArr2DLL(arr);\n        \n        // Print the doubly linked list\n         System.out.println(\"Doubly Linked List Initially: \");\n        print(head);\n\n        System.out.println(\"Doubly Linked List After Inserting before the node with value 8:\");\n\n        head = insertAtTail(head, 10); // Insert a node with value 10 at the end\n        print(head);\n\n    }\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Doubly Linked List Initially:<br>12 5 8 7 4&nbsp;<br>Doubly Linked List After Inserting at the tail with value 10:&nbsp;<br>12 5 8 7 4 10</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(N) </strong>The time complexity of this insertion operation is O(N) because we have to <strong>traverse</strong> the entire list to reach its tail. The complexity would be O(1) if we were given the tail node directly.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(1)\u00a0 </strong>The space complexity is also O(1) because we are <strong>notusing</strong> any <strong>extradatastructures</strong> to do the operations apart from creating a single new node.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block\" data-lang=\"python\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">class Node:\n    def __init__(self, data, next_node=None, back_node=None):\n        \"\"\"\n        Constructor for a Node with data, a reference to the next node, and a reference to the previous node.\n        \"\"\"\n        self.data = data\n        self.next = next_node\n        self.back = back_node\n\ndef convertArr2DLL(arr):\n    \"\"\"\n    Function to convert an array to a doubly linked list.\n    \"\"\"\n    # Create the head node with the first element of the array\n    head = Node(arr[0])\n    # Initialize 'prev' to the head node\n    prev = head\n\n    for i in range(1, len(arr)):\n        # Create a new node with data from the array and set its 'back' pointer to the previous node\n        temp = Node(arr[i], None, prev)\n        # Update the 'next' pointer of the previous node to point to the new node\n        prev.next = temp\n        # Move 'prev' to the newly created node for the next iteration\n        prev = temp\n\n    # Return the head of the doubly linked list\n    return head\n\ndef print_list(head):\n    \"\"\"\n    Function to print the elements of the doubly linked list.\n    \"\"\"\n    while head is not None:\n        # Print the data in the current node\n        print(head.data, end=\" \")\n        # Move to the next node\n        head = head.next\n\ndef insert_at_tail(head, k):\n    \"\"\"\n    Function to insert a new node with value 'k' at the end of the doubly linked list.\n    \"\"\"\n    # Create a new node with data 'k'\n    new_node = Node(k)\n\n    # If the doubly linked list is empty, set 'head' to the new node\n    if head is None:\n        return new_node\n\n    # Traverse to the end of the doubly linked list\n    tail = head\n    while tail.next is not None:\n        tail = tail.next\n\n    # Connect the new node to the last node in the list\n    tail.next = new_node\n    new_node.back = tail\n\n    return head\n\n# Main program\narr = [12, 5, 8, 7, 4]\nhead = convertArr2DLL(arr)\nprint(\u201c\\nDoubly Linked List Initially:\u201d)\nprint_list(head)\nprint(\"\\nDoubly Linked List After Inserting at the tail with value 10:\")\n# Insert a node with value 10 at the end\nhead = insert_at_tail(head, 10)\nprint_list(head)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Doubly Linked List Initially:<br>12 5 8 7 4&nbsp;<br>Doubly Linked List After Inserting at the tail with value 10:&nbsp;<br>12 5 8 7 4 10</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(N) </strong>The time complexity of this insertion operation is O(N) because we have to <strong>traverse</strong> the entire list to reach its tail. The complexity would be O(1) if we were given the tail node directly.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(1)\u00a0 </strong>The space complexity is also O(1) because we are <strong>notusing</strong> any <strong>extradatastructures</strong> to do the operations apart from creating a single new node.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>[tabby title=\"JavaScript Code\"]</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">// Define a Node class for doubly linked list\nclass Node {\n    constructor(data) {\n        this.data = data;    // Data stored in the node\n        this.next = null;    // Pointer to the next node in the list (forward direction)\n        this.back = null;    // Pointer to the previous node in the list (backward direction)\n    }\n}\n\n// Function to convert an array to a doubly linked list\nfunction convertArr2DLL(arr) {\n    // Create the head node with the first element of the array\n    let head = new Node(arr[0]);\n    // Initialize 'prev' to the head node\n    let prev = head;\n\n    for (let i = 1; i &lt; arr.length; i++) {\n        // Create a new node with data from the array and set its 'back' pointer to the previous node\n        let temp = new Node(arr[i]);\n        temp.back = prev;\n        // Update the 'next' pointer of the previous node to point to the new node\n        prev.next = temp;\n        // Move 'prev' to the newly created node for the next iteration\n        prev = temp;\n    }\n    // Return the head of the doubly linked list\n    return head;\n}\n\n// Function to print the elements of the doubly linked list\nfunction print(head) {\n    while (head !== null) {\n        // Print the data in the current node\n        console.log(head.data + ' ');\n        // Move to the next node\n        head = head.next;\n    }\n}\n\n// Function to insert a new node with value 'k' at the end of the doubly linked list\nfunction insertAtTail(head, k) {\n    // Create a new node with data 'k'\n    let newNode = new Node(k);\n\n    // If the doubly linked list is empty, set 'head' to the new node\n    if (head === null) {\n        return newNode;\n    }\n\n    // Traverse to the end of the doubly linked list\n    let tail = head;\n    while (tail.next !== null) {\n        tail = tail.next;\n    }\n\n    // Connect the new node to the last node in the list\n    tail.next = newNode;\n    newNode.back = tail;\n\n    return head;\n}\n\n// Main function\nfunction main() {\n    let arr = [12, 5, 8, 7, 4];\n    let head = convertArr2DLL(arr);\n\n    console.log(\u2018\\nDoubly Linked List Initially: \u2018);\n    print(head);\n    console.log('\\nDoubly Linked List After Inserting at the tail with value 10: ');\n    // Insert a node with value 10 at the end\n    head = insertAtTail(head, 10);\n    print(head);\n}\n\nmain();\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Doubly Linked List Initially:<br>12 5 8 7 4&nbsp;<br>Doubly Linked List After Inserting at the tail with value 10:&nbsp;<br>12 5 8 7 4 10</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(N) </strong>The time complexity of this insertion operation is O(N) because we have to <strong>traverse</strong> the entire list to reach its tail. The complexity would be O(1) if we were given the tail node directly.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(1)\u00a0 </strong>The space complexity is also O(1) because we are <strong>notusing</strong> any <strong>extradatastructures</strong> to do the operations apart from creating a single new node.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In case you are learning DSA, you should definitely check out our free&nbsp;<a href=\"https://takeuforward.org/strivers-a2z-dsa-course/strivers-a2z-dsa-course-sheet-2/\">A2Z DSA Course</a>&nbsp;with videos and blogs.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;</em><strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268\" target=\"_blank\" rel=\"noreferrer noopener\">Gauri Tomar</a></strong><em>&nbsp;for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->"
}