{
    "dislikes": 1,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:09:30 GMT+0530 (India Standard Time)",
    "slug": "flatten-binary-tree-to-linked-list",
    "aid": "1505",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/flattening-of-ll",
    "title": "Flatten Binary Tree to Linked List",
    "topics": [
        {
            "topic-id": "binary-tree",
            "topic-title": "Binary Tree"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        }
    ],
    "category_tag": "data-structure",
    "likes": 61,
    "preview": "Problem Statement: Given a Binary Tree, convert it to a Linked List where the linked list nodes follow the same order as the pre-order traversal of the binary tree. Use the right pointer of the Bin...",
    "content": "<p><strong>Problem Statement: </strong> Given a Binary Tree, convert it to a Linked List where the linked list nodes follow the same order as the pre-order traversal of the binary tree.</p>\n<p>Use the right pointer of the Binary Tree as the \u2018next\u2019 pointer for the linked list and set the left pointer to null. Do this in place and do not create extra nodes.\n</p>\n\n\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n    <details class=\"article_example_details\">\n        <summary class=\"article_example_summary\">\n            <span><strong>\n                    Examples\n                </strong>\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"atricle_example_content\">\n            <pre class=\"wp-block-preformatted\">\n                 <span><strong>Example 1:</strong></span>\n\n                <span><strong>Input:</strong>Binary Tree: 1 2 5 3 4 -1 6 -1 -1 -1 -1 7</span>\n                <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/flattening-binary-tree-image1-oq5jjy84\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>    \n                <span><strong>Output:</strong> 1 -1 2 -1 3 -1 4 -1 5 -1 6 -1 7</span>\n                <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/flattening-binary-tree-image2-wBF0LLPL\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n                <span><strong>Explanation:</strong> The given binary tree has a preorder traversal order of [1, 2, 3, 4, 5, 6, 7]. To flatten the tree, we convert it into a linked list. In this linked list, the nodes follow the same order as the preorder traversal. The right pointer of each node in the linked list serves the function of the 'next' pointer. Additionally, we set the left pointer of each node to null. This process is done in place, meaning we modify the existing binary tree structure to achieve the desired linked list representation.</span>\n                \n                <br>\n                <span><strong>Input:</strong> Binary Tree: 15 40 62 -1 -1 10 20</span>\n                <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/flattening-binary-tree-image3-NtLzM5g_\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>        \n                <span><strong>Output:</strong> 15 -1 40 -1 62 -1 10 -1 20</span>\n                <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/flattening-binary-tree-image4-N3ql4QcT\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n                \n                <span><strong>Explanation:</strong> The given binary tree has a preorder traversal order of [15, 40, 62, 10, 20]. To flatten the tree, we convert it into a linked list. In this linked list, the nodes follow the same order as the preorder traversal. The right pointer of each node in the linked list serves the function of the 'next' pointer. Additionally, we set the left pointer of each node to null. This process is done in place, meaning we modify the existing binary tree structure to achieve the desired linked list representation.</span>\n                \n                \n\n            </pre>\n        </div>\n    </details>\n</div>\n\n\n<!-- This is Practice Section\n<div class=\"practice\">\n    <span><strong>Practice: </strong></span>\n    <div class=\"problem-buttons\">\n\n        \n        <a href=\"https://www.codingninjas.com/studio/problems/predecessor-and-successor-in-bst_893049?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf\" target=\"_blank\" rel=\"noopener\">\n            <span>Solve Problem</span>\n            <img src=\"https://takeuforward-content-images.s3.ap-south-1.amazonaws.com/content/Group-11-5-pFOq-8ga\" alt=\"code-studio\">\n        </a>\n    </div>\n    \n</div>-->\n\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\n        yourself first. </em></p>\n\n\n<!-- This is Approaches Drop-Down -->\n<div class=\"dsa_article_dropdown_approachs \">\n    <!-- Approach - 1 Starts from here -->\n    <div id=\"brute-force-approach\">\n        <details>\n            <summary class=\"main-summary\">\n                <span>\n                    Brute Force Approach\n                </span>\n                <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                    <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                    </path>\n                </svg>\n            </summary>\n            <div class=\"common-drops\">\n                <details class=\"secondary-details\" open=\"\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Algorithm / Intuition\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <div class=\"approach-algorithm\">\n                    <p>The intuition behind this approach is to perform a reverse pre-order traversal where, instead of simply visiting nodes, we flatten the tree into a linked list as we traverse it.</p>\n                    <p>We start at the root of the tree and recursively do the following for each node, we first ensure that the right subtree is flattened into a linked list. This means that all nodes in the right subtree are processed and attached to the linked list in the correct order.</p>\n                    <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/flattening-binary-tree-image5-yo-F9mXY\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n\n                    <p>Next, we do the same for the left subtree. This ensures that all nodes in the left subtree are processed and attached to the linked list in the correct order. Once both subtrees are flattened, we attach the flattened left subtree as the right child of the current node. Since we're using the right pointer of the binary tree as the next pointer for the linked list, this effectively attaches the left subtree to the current node in the linked list. Finally, we attach the flattened right subtree to the rightmost node of the flattened left subtree. This ensures that the right subtree is properly attached to the end of the linked list.</p>\n\n                        <h4>Algorithm </h4>\n                        <p><strong>Step 1:</strong>Initialise a global variable `prev` to keep track of the previously processed node. Initially set it to null.</p>\n                        \n                        <p><strong>Step 2: </strong> Base Case: If the current node is null, return null.</p>\n                        \n                        <p><strong>Step 3: </strong>Flatten the Right and Left Subtree: Recursively flatten the right and left subtree of the current node by calling the flatten function on the current node's right and left child.</p>\n\n                        <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/flattening-binary-tree-image6-qiGOGhPk\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n                        \n                        <p><strong>Step 4: </strong>Attach the Right Subtree to the Flattened Left Subtree: Set the right child of the current node to the value of `prev` since `prev` points to the rightmost node in the flattened left subtree. This effectively attaches the right subtree to the right of the rightmost node of the left subtree. </p>\n                        <p><strong>Step 5:</strong>Attach the Left Subtree as Right Child: Set the right child of the current node to the left subtree.\n                        <ol><li>Set the left child of the current node to null since we are flattening the binary tree to a linked list and there should be no left child.</li></ol></p>\n\n                        <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/flattening-binary-tree-image7-I_oVJ17q\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n\n                        <p><strong>Step 6:</strong>Update `prev` to the current node for the next iteration and recursion step.</p>\n\n                    </div>\n                </details>\n                <details class=\"code-section secondary-details\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Code\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <div class=\"code-tabs\">\n                        <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n                        <button class=\"code-tab\" data-lang=\"java\">Java</button>\n                        <button class=\"code-tab\" data-lang=\"python\">Python</button>\n                        <button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n\n                        <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\"\n                            xmlns=\"http://www.w3.org/2000/svg\">\n                            <path\n                                d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n                            </path>\n                        </svg>\n                    </div>\n                    <div class=\"code-content\">\n                        <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n                            <pre class=\"wp-block-code\">\n                                <code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;iostream&gt;\n#include &lt;sstream&gt;\n#include &lt;unordered_map&gt;\n#include &lt;vector&gt;\n#include &lt;queue&gt;\n#include &lt;map&gt;\n#include &lt;stack&gt;\n\nusing namespace std;\n\n// TreeNode structure\nstruct TreeNode {\n    int val;\n    TreeNode *left;\n    TreeNode *right;\n    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n};\n\nclass Solution {\npublic:\n    // Initialize a global variable\n    // 'prev' to keep track of the\n    // previously processed node.\n    TreeNode* prev = NULL;\n\n    // Function to flatten a binary tree\n    // to a right next Linked List structure\n    void flatten(TreeNode* root) {\n       // Base case: If the current\n       // node is NULL, return.\n       if(root==NULL){\n           return;\n       }\n\n       // Recursive call to\n       // flatten the right subtree\n       flatten(root-&gt;right);\n       \n       // Recursive call to\n       // flatten the left subtree\n       flatten(root-&gt;left);\n       \n       // At this point, both left and right\n       // subtrees are flattened, and 'prev'\n       // is pointing to the rightmost node\n       // in the flattened right subtree.\n\n       // Set the right child of\n       // the current node to 'prev'.\n       root-&gt;right = prev;\n\n       // Set the left child of the\n       // current node to NULL.\n       root-&gt;left = NULL;\n\n       // Update 'prev' to the current\n       // node for the next iteration.\n       prev = root;\n    }\n};\n\n\n\n\n// Print the preorder traversal of the\n// Orignal Binary Tree\nvoid printPreorder(TreeNode* root){\n    if(!root){\n        return;\n    }\n    cout &lt;&lt; root-&gt;val &lt;&lt; &quot; &quot;;\n    printPreorder(root-&gt;left);\n    printPreorder(root-&gt;right);\n}\n\n// Print the Binary Tree along the \n// Right Pointers after Flattening\nvoid printFlattenTree(TreeNode* root){\n    if(!root){\n        return;\n    }\n    cout &lt;&lt; root-&gt;val &lt;&lt; &quot; &quot;;\n    printFlattenTree(root-&gt;right);\n}\n\n\nint main() {\n\n    TreeNode* root = new TreeNode(1);\n    root-&gt;left = new TreeNode(2);\n    root-&gt;right = new TreeNode(3);\n    root-&gt;left-&gt;left = new TreeNode(4);\n    root-&gt;left-&gt;right = new TreeNode(5);\n    root-&gt;left-&gt;right-&gt;right = new TreeNode(6);\n    root-&gt;right-&gt;right = new TreeNode(7);\n    root-&gt;right-&gt;left = new TreeNode(8);\n\n    Solution sol;\n    \n    cout &lt;&lt; &quot;Binary Tree Preorder: &quot;;\n    printPreorder(root);\n    cout &lt;&lt; endl;\n    \n    sol.flatten(root);\n    \n    cout &lt;&lt; &quot;Binary Tree After Flatten: &quot;;\n    printFlattenTree(root);\n    cout &lt;&lt; endl;\n    \n\n    return 0;\n}\n                                </code>\n                            </pre>\n                        </div>\n                        <div class=\"code-block \" data-lang=\"java\">\n                            <pre class=\"wp-block-code\">\n                                <code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\n// TreeNode structure\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    public TreeNode(int x) {\n        val = x;\n        left = null;\n        right = null;\n    }\n}\n\nclass Solution {\n    // Initialize a global variable\n    // 'prev' to keep track of the\n    // previously processed node.\n    TreeNode prev = null;\n\n    // Function to flatten a binary tree\n    // to a right next Linked List structure\n    public void flatten(TreeNode root) {\n        // Base case: If the current\n        // node is null, return.\n        if (root == null) {\n            return;\n        }\n\n        // Recursive call to\n        // flatten the right subtree\n        flatten(root.right);\n\n        // Recursive call to\n        // flatten the left subtree\n        flatten(root.left);\n\n        // At this point, both left and right\n        // subtrees are flattened, and 'prev'\n        // is pointing to the rightmost node\n        // in the flattened right subtree.\n\n        // Set the right child of\n        // the current node to 'prev'.\n        root.right = prev;\n\n        // Set the left child of the\n        // current node to null.\n        root.left = null;\n\n        // Update 'prev' to the current\n        // node for the next iteration.\n        prev = root;\n    }\n}\n\npublic class Main {\n    // Print the preorder traversal of the\n    // Original Binary Tree\n    public static void printPreorder(TreeNode root) {\n        if (root == null) {\n            return;\n        }\n        System.out.print(root.val + &quot; &quot;);\n        printPreorder(root.left);\n        printPreorder(root.right);\n    }\n\n    // Print the Binary Tree along the\n    // Right Pointers after Flattening\n    public static void printFlattenTree(TreeNode root) {\n        if (root == null) {\n            return;\n        }\n        System.out.print(root.val + &quot; &quot;);\n        printFlattenTree(root.right);\n    }\n\n    public static void main(String[] args) {\n        TreeNode root = new TreeNode(1);\n        root.left = new TreeNode(2);\n        root.right = new TreeNode(3);\n        root.left.left = new TreeNode(4);\n        root.left.right = new TreeNode(5);\n        root.left.right.right = new TreeNode(6);\n        root.right.right = new TreeNode(7);\n        root.right.left = new TreeNode(8);\n\n        Solution sol = new Solution();\n\n        System.out.print(&quot;Binary Tree Preorder: &quot;);\n        printPreorder(root);\n        System.out.println();\n\n        sol.flatten(root);\n\n        System.out.print(&quot;Binary Tree After Flatten: &quot;);\n        printFlattenTree(root);\n        System.out.println();\n    }\n}\n\n                                </code>\n                            </pre>\n                        </div>\n                        <div class=\"code-block\" data-lang=\"python\">\n                            <pre class=\"wp-block-code\">\n                                <code lang=\"python\" class=\"language-python\">\n# TreeNode structure\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def __init__(self):\n        # Initialize a global variable\n        # 'prev' to keep track of the\n        # previously processed node.\n        self.prev = None\n\n    # Function to flatten a binary tree\n    # to a right next Linked List structure\n    def flatten(self, root):\n        # Base case: If the current\n        # node is None, return.\n        if root is None:\n            return\n\n        # Recursive call to\n        # flatten the right subtree\n        self.flatten(root.right)\n\n        # Recursive call to\n        # flatten the left subtree\n        self.flatten(root.left)\n\n        # At this point, both left and right\n        # subtrees are flattened, and 'prev'\n        # is pointing to the rightmost node\n        # in the flattened right subtree.\n\n        # Set the right child of\n        # the current node to 'prev'.\n        root.right = self.prev\n\n        # Set the left child of the\n        # current node to None.\n        root.left = None\n\n        # Update 'prev' to the current\n        # node for the next iteration.\n        self.prev = root\n\n# Print the preorder traversal of the\n# Original Binary Tree\ndef print_preorder(root):\n    if not root:\n        return\n    print(root.val, end=&quot; &quot;)\n    print_preorder(root.left)\n    print_preorder(root.right)\n\n# Print the Binary Tree along the\n# Right Pointers after Flattening\ndef print_flatten_tree(root):\n    if not root:\n        return\n    print(root.val, end=&quot; &quot;)\n    print_flatten_tree(root.right)\n\nif __name__ == &quot;__main__&quot;:\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    root.left.right.right = TreeNode(6)\n    root.right.right = TreeNode(7)\n    root.right.left = TreeNode(8)\n\n    sol = Solution()\n\n    print(&quot;Binary Tree Preorder: &quot;, end=&quot;&quot;)\n    print_preorder(root)\n    print()\n\n    sol.flatten(root)\n\n    print(&quot;Binary Tree After Flatten: &quot;, end=&quot;&quot;)\n    print_flatten_tree(root)\n    print()\n    \n                                </code>\n                            </pre>\n                        </div>\n                        <div class=\"code-block\" data-lang=\"javascript\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"javascript\" class=\"language-javascript\">\n// TreeNode structure\nclass TreeNode {\n    constructor(x) {\n        this.val = x;\n        this.left = null;\n        this.right = null;\n    }\n}\n\nclass Solution {\n    constructor() {\n        // Initialize a global variable\n        // 'prev' to keep track of the\n        // previously processed node.\n        this.prev = null;\n    }\n\n    // Function to flatten a binary tree\n    // to a right next Linked List structure\n    flatten(root) {\n        // Base case: If the current\n        // node is NULL, return.\n        if (root === null) {\n            return;\n        }\n\n        // Recursive call to\n        // flatten the right subtree\n        this.flatten(root.right);\n\n        // Recursive call to\n        // flatten the left subtree\n        this.flatten(root.left);\n\n        // At this point, both left and right\n        // subtrees are flattened, and 'prev'\n        // is pointing to the rightmost node\n        // in the flattened right subtree.\n\n        // Set the right child of\n        // the current node to 'prev'.\n        root.right = this.prev;\n\n        // Set the left child of the\n        // current node to NULL.\n        root.left = null;\n\n        // Update 'prev' to the current\n        // node for the next iteration.\n        this.prev = root;\n    }\n}\n\n// Print the preorder traversal of the\n// Original Binary Tree\nfunction printPreorder(root) {\n    if (!root) {\n        return;\n    }\n    console.log(root.val + &quot; &quot;);\n    printPreorder(root.left);\n    printPreorder(root.right);\n}\n\n// Print the Binary Tree along the \n// Right Pointers after Flattening\nfunction printFlattenTree(root) {\n    if (!root) {\n        return;\n    }\n    console.log(root.val + &quot; &quot;);\n    printFlattenTree(root.right);\n}\n\n// Main function\nfunction main() {\n    const root = new TreeNode(1);\n    root.left = new TreeNode(2);\n    root.right = new TreeNode(3);\n    root.left.left = new TreeNode(4);\n    root.left.right = new TreeNode(5);\n    root.left.right.right = new TreeNode(6);\n    root.right.right = new TreeNode(7);\n    root.right.left = new TreeNode(8);\n\n    const sol = new Solution();\n\n    console.log(&quot;Binary Tree Preorder: &quot;);\n    printPreorder(root);\n    console.log(&quot;\\n&quot;);\n\n    sol.flatten(root);\n\n    console.log(&quot;Binary Tree After Flatten: &quot;);\n    printFlattenTree(root);\n    console.log(&quot;\\n&quot;);\n}\n\n// Run the main function\nmain();\n\n                            </code>\n                        </pre>\n                      </div>\n                        <p><strong>Output: </strong>Binary Tree Preorder: 1 2 4 5 6 3 8 7, Binary Tree After Flatten: 1 2 4 5 6 3 8 7</p>\n                    </div>\n                </details>\n                <details class=\"secondary-details\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Complexity Analysis\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <p>\n                        <p><strong>Time Complexity: O(N)</strong>  where N is the number of nodes in the Binary Tree. Each node of the binary node is visited exactly once. At each node, constant-time operations are performed. Hence the time complexity is O(N).</p>\n\n                        <p><strong>Space Complexity : O(log<sub>2</sub>N)</strong>where N is the number of nodes in the Binary Tree. There are no additional data structures or space used but the auxiliary stack space is used during recursion. Since the recursion depth can be at most equal to the height to the Binary Tree, the space complexity is O(H) where H is the height of the Binary Tree. In the ideal case, H = log<sub>2</sub>N and in the worst case H = N (skewed tree).</p>\n                    </p>\n                </details>\n            </div>\n        </details>\n    </div>\n    <!-- Approach -1 Ends here -->\n\n\n    <!-- Approach - 2 Starts from here -->\n\n    <div id=\"better-approach\">\n        <details>\n            <summary class=\"main-summary\">\n                <span>\n                    Better Approach\n                </span>\n                <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                    <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                    </path>\n                </svg>\n            </summary>\n            <div class=\"common-drops\">\n                <details class=\"secondary-details\" open=\"\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Algorithm / Intuition\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <div class=\"approach-algorithm\">\n                    <p>This approach is an extension of the previous approach where we use a stack to simulate recursion.</p>\n\n                        <p><strong>Algorithm</strong></p>\n                        \n                        <p><strong>Step 1: </strong>\n                        Base Case: If the root node is null, we return as there is no tree to flatten.</p>\n                                                                    \n                        <p><strong>Step 2: </strong> Initialise Stack: Create a stack to perform an iterative traversal of the binary tree. Push the root node onto the sack to start the traversal.</p>\n                                                      \n                        <p><strong>Step 3: </strong>Iterative Traversal with Stack: While the stack is not empty, repeat the following steps:\n                        <ol><li>Pop the top node from the stack.</li><li>If the popped node has a right child, push it onto the stack. This ensures that the right child is processed after the left child nodes.</li><li>If the popped node has a left child, push it onto the stack.</li></ol></p>\n                        <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/flattening-binary-tree-image8-go1BFZXL\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n                        <p><ol><li>If the stack is not empty after pushing the left child, connect the right pointer of the current node (popped from the stack) to the top node of the stack. This creates the linked list structure by setting the next pointer.</li><li>Set the left pointer of the current node to null as we have to form a right skewed linked list.</li></ol></p>\n                        <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/flattening-binary-tree-image9-1nbkGFWq\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n\n\n                        <p><strong>Step 4: </strong>Once the stack becomes empty, the traversal is complete and the binary tree is flattened into a right next linked list structure.</p> \n                    </div>\n                </details>\n                <details class=\"code-section secondary-details\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Code\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <div class=\"code-tabs\">\n                        <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n                        <button class=\"code-tab\" data-lang=\"java\">Java</button>\n                        <button class=\"code-tab\" data-lang=\"python\">Python</button>\n                        <button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n\n                        <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\"\n                            xmlns=\"http://www.w3.org/2000/svg\">\n                            <path\n                                d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n                            </path>\n                        </svg>\n                    </div>\n                    <div class=\"code-content\">\n                        <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n                            <pre class=\"wp-block-code\">\n                                <code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;iostream&gt;\n#include &lt;sstream&gt;\n#include &lt;unordered_map&gt;\n#include &lt;vector&gt;\n#include &lt;queue&gt;\n#include &lt;map&gt;\n#include &lt;stack&gt;\n\nusing namespace std;\n\n// TreeNode structure\nstruct TreeNode {\n    int val;\n    TreeNode *left;\n    TreeNode *right;\n    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n};\n\nclass Solution {\npublic:\n    // Initialize a global variable\n    // 'prev' to keep track of the\n    // previously processed node.\n    TreeNode* prev = NULL;\n\n    // Function to flatten a binary tree\n    // to a right next Linked List structure\n    void flatten(TreeNode* root) {\n        // Base case: If the current\n        // node is NULL, return.\n        if(root == NULL){\n            return;\n        }\n        // Use a stack for\n        // iterative traversal.\n        stack&lt;TreeNode*&gt; st;\n        // Push the root node\n        // onto the stack.\n        st.push(root);  \n        \n        // Continue the loop until\n        // the stack is empty.\n        while (!st.empty()) {  \n            // Get the top node from the stack.\n            TreeNode* cur = st.top(); \n            // Pop the top node.\n            st.pop();  \n\n            if (cur-&gt;right != NULL) {\n                 // Push the right child\n                 // onto the stack.\n                st.push(cur-&gt;right); \n            }\n            \n            if (cur-&gt;left != NULL) {\n                 // Push the left child\n                 // onto the stack.\n                st.push(cur-&gt;left); \n            }\n\n            if (!st.empty()) {\n                // Connect the right child to\n                // the next node in the stack.\n                cur-&gt;right = st.top();  \n            }\n            \n            // Set the left child to NULL to\n            // form a right-oriented linked list.\n            cur-&gt;left = NULL;  \n        }\n    }\n};\n\n\n\n\n\n// Print the preorder traversal of the\n// Orignal Binary Tree\nvoid printPreorder(TreeNode* root){\n    if(!root){\n        return;\n    }\n    cout &lt;&lt; root-&gt;val &lt;&lt; &quot; &quot;;\n    printPreorder(root-&gt;left);\n    printPreorder(root-&gt;right);\n}\n\n// Print the Binary Tree along the \n// Right Pointers after Flattening\nvoid printFlattenTree(TreeNode* root){\n    if(!root){\n        return;\n    }\n    cout &lt;&lt; root-&gt;val &lt;&lt; &quot; &quot;;\n    printFlattenTree(root-&gt;right);\n}\n\n\nint main() {\n\n    TreeNode* root = new TreeNode(1);\n    root-&gt;left = new TreeNode(2);\n    root-&gt;right = new TreeNode(3);\n    root-&gt;left-&gt;left = new TreeNode(4);\n    root-&gt;left-&gt;right = new TreeNode(5);\n    root-&gt;left-&gt;right-&gt;right = new TreeNode(6);\n    root-&gt;right-&gt;right = new TreeNode(7);\n    root-&gt;right-&gt;left = new TreeNode(8);\n\n    Solution sol;\n    \n    cout &lt;&lt; &quot;Binary Tree Preorder: &quot;;\n    printPreorder(root);\n    cout &lt;&lt; endl;\n    \n    sol.flatten(root);\n    \n    cout &lt;&lt; &quot;Binary Tree After Flatten: &quot;;\n    printFlattenTree(root);\n    cout &lt;&lt; endl;\n    \n\n    return 0;\n}\n                                </code>\n                            </pre>\n                        </div>\n                        <div class=\"code-block \" data-lang=\"java\">\n                            <pre class=\"wp-block-code\">\n                                <code lang=\"java\" class=\"language-java\">\nimport java.util.Stack;\n\n// TreeNode structure\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n    \n    public TreeNode(int x) {\n        val = x;\n        left = null;\n        right = null;\n    }\n}\n\nclass Solution {\n    // Initialize a global variable\n    // 'prev' to keep track of the\n    // previously processed node.\n    TreeNode prev = null;\n\n    // Function to flatten a binary tree\n    // to a right next Linked List structure\n    public void flatten(TreeNode root) {\n        // Base case: If the current\n        // node is null, return.\n        if (root == null) {\n            return;\n        }\n        // Use a stack for\n        // iterative traversal.\n        Stack&lt;TreeNode&gt; st = new Stack&lt;&gt;();\n        // Push the root node\n        // onto the stack.\n        st.push(root);\n        \n        // Continue the loop until\n        // the stack is empty.\n        while (!st.empty()) {\n            // Get the top node from the stack.\n            TreeNode cur = st.pop();\n\n            if (cur.right != null) {\n                // Push the right child\n                // onto the stack.\n                st.push(cur.right);\n            }\n\n            if (cur.left != null) {\n                // Push the left child\n                // onto the stack.\n                st.push(cur.left);\n            }\n\n            if (!st.empty()) {\n                // Connect the right child to\n                // the next node in the stack.\n                cur.right = st.peek();\n            }\n\n            // Set the left child to null to\n            // form a right-oriented linked list.\n            cur.left = null;\n        }\n    }\n}\n\n// Print the preorder traversal of the\n// Original Binary Tree\nclass BinaryTreePrinter {\n    public static void printPreorder(TreeNode root) {\n        if (root == null) {\n            return;\n        }\n        System.out.print(root.val + &quot; &quot;);\n        printPreorder(root.left);\n        printPreorder(root.right);\n    }\n\n    // Print the Binary Tree along the \n    // Right Pointers after Flattening\n    public static void printFlattenTree(TreeNode root) {\n        if (root == null) {\n            return;\n        }\n        System.out.print(root.val + &quot; &quot;);\n        printFlattenTree(root.right);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        TreeNode root = new TreeNode(1);\n        root.left = new TreeNode(2);\n        root.right = new TreeNode(3);\n        root.left.left = new TreeNode(4);\n        root.left.right = new TreeNode(5);\n        root.left.right.right = new TreeNode(6);\n        root.right.right = new TreeNode(7);\n        root.right.left = new TreeNode(8);\n\n        Solution sol = new Solution();\n        \n        System.out.print(&quot;Binary Tree Preorder: &quot;);\n        BinaryTreePrinter.printPreorder(root);\n        System.out.println();\n        \n        sol.flatten(root);\n        \n        System.out.print(&quot;Binary Tree After Flatten: &quot;);\n        BinaryTreePrinter.printFlattenTree(root);\n        System.out.println();\n    }\n}\n\n    \n                                </code>\n                            </pre>\n                        </div>\n                        <div class=\"code-block\" data-lang=\"python\">\n                            <pre class=\"wp-block-code\">\n                                <code lang=\"python\" class=\"language-python\">\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def __init__(self):\n        # Initialize a global variable\n        # 'prev' to keep track of the\n        # previously processed node.\n        self.prev = None\n\n    # Function to flatten a binary tree\n    # to a right next Linked List structure\n    def flatten(self, root):\n        # Base case: If the current\n        # node is None, return.\n        if not root:\n            return\n        \n        # Use a stack for\n        # iterative traversal.\n        stack = [root]\n\n        # Continue the loop until\n        # the stack is empty.\n        while stack:\n            # Get the top node from the stack.\n            cur = stack.pop()\n\n            if cur.right:\n                # Push the right child\n                # onto the stack.\n                stack.append(cur.right)\n\n            if cur.left:\n                # Push the left child\n                # onto the stack.\n                stack.append(cur.left)\n\n            if stack:\n                # Connect the right child to\n                # the next node in the stack.\n                cur.right = stack[-1]\n\n            # Set the left child to None to\n            # form a right-oriented linked list.\n            cur.left = None\n\n# Print the preorder traversal of the\n# Original Binary Tree\ndef print_preorder(root):\n    if not root:\n        return\n    print(root.val, end=&quot; &quot;)\n    print_preorder(root.left)\n    print_preorder(root.right)\n\n# Print the Binary Tree along the \n# Right Pointers after Flattening\ndef print_flatten_tree(root):\n    if not root:\n        return\n    print(root.val, end=&quot; &quot;)\n    print_flatten_tree(root.right)\n\nif __name__ == &quot;__main__&quot;:\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    root.left.right.right = TreeNode(6)\n    root.right.right = TreeNode(7)\n    root.right.left = TreeNode(8)\n\n    sol = Solution()\n\n    print(&quot;Binary Tree Preorder: &quot;, end=&quot;&quot;)\n    print_preorder(root)\n    print()\n\n    sol.flatten(root)\n\n    print(&quot;Binary Tree After Flatten: &quot;, end=&quot;&quot;)\n    print_flatten_tree(root)\n    print()\n                                </code>\n                            </pre>\n                        </div>\n                        <div class=\"code-block\" data-lang=\"javascript\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"javascript\" class=\"language-javascript\">\n// TreeNode structure\nclass TreeNode {\n    constructor(x) {\n        this.val = x;\n        this.left = null;\n        this.right = null;\n    }\n}\n\nclass Solution {\n    constructor() {\n        // Initialize a global variable\n        // 'prev' to keep track of the\n        // previously processed node.\n        this.prev = null;\n    }\n\n    // Function to flatten a binary tree\n    // to a right next Linked List structure\n    flatten(root) {\n        // Base case: If the current\n        // node is null, return.\n        if (root === null) {\n            return;\n        }\n\n        // Use a stack for\n        // iterative traversal.\n        const stack = [];\n        // Push the root node\n        // onto the stack.\n        stack.push(root);\n\n        // Continue the loop until\n        // the stack is empty.\n        while (stack.length &gt; 0) {\n            // Get the top node from the stack.\n            const cur = stack.pop();\n\n            if (cur.right !== null) {\n                // Push the right child\n                // onto the stack.\n                stack.push(cur.right);\n            }\n\n            if (cur.left !== null) {\n                // Push the left child\n                // onto the stack.\n                stack.push(cur.left);\n            }\n\n            if (stack.length &gt; 0) {\n                // Connect the right child to\n                // the next node in the stack.\n                cur.right = stack[stack.length - 1];\n            }\n\n            // Set the left child to null to\n            // form a right-oriented linked list.\n            cur.left = null;\n        }\n    }\n}\n\n// Print the preorder traversal of the\n// Original Binary Tree\nfunction printPreorder(root) {\n    if (!root) {\n        return;\n    }\n    console.log(root.val + &quot; &quot;);\n    printPreorder(root.left);\n    printPreorder(root.right);\n}\n\n// Print the Binary Tree along the\n// Right Pointers after Flattening\nfunction printFlattenTree(root) {\n    if (!root) {\n        return;\n    }\n    console.log(root.val + &quot; &quot;);\n    printFlattenTree(root.right);\n}\n\n// Main function\nfunction main() {\n    const root = new TreeNode(1);\n    root.left = new TreeNode(2);\n    root.right = new TreeNode(3);\n    root.left.left = new TreeNode(4);\n    root.left.right = new TreeNode(5);\n    root.left.right.right = new TreeNode(6);\n    root.right.right = new TreeNode(7);\n    root.right.left = new TreeNode(8);\n\n    const sol = new Solution();\n\n    console.log(&quot;Binary Tree Preorder: &quot;);\n    printPreorder(root);\n    console.log(&quot;\\n&quot;);\n\n    sol.flatten(root);\n\n    console.log(&quot;Binary Tree After Flatten: &quot;);\n    printFlattenTree(root);\n    console.log(&quot;\\n&quot;);\n}\n\n// Run the main function\nmain();\n\n                            </code>\n                        </pre>\n                        </div>\n                        <p>\n                             <strong>Output: </strong>Binary Tree Preorder: 1 2 4 5 6 3 8 7, Binary Tree After Flatten: 1 2 4 5 6 3 8 7\n</p>\n                    </div>\n                </details>\n                 <details class=\"secondary-details\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Complexity Analysis\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <p>\n                        <p><strong>Time Complexity: O(N)</strong> where N is the number of nodes in the Binary Tree. Each node of the binary node is visited exactly once. At each node, constant-time operations are performed. Hence the time complexity is O(N).</p>\n\n                        <p><strong>Space Complexity : O(log<sub>2</sub>N)</strong> where N is the number of nodes in the Binary Tree. There are no additional data structures or space used but the auxiliary stack space is used during recursion. Since the recursion depth can be at most equal to the height to the Binary Tree, the space complexity is O(H) where H is the height of the Binary Tree. In the ideal case, H = log<sub>2</sub>N and in the worst case H = N (skewed tree).</p>\n\n\n                    </p>\n                </details>\n            </div>\n        </details>\n    </div>\n    <!-- Approach - 2 Ends from here -->\n\n\n    <!-- Approach - 3 Starts from here -->\n\n    <div id=\"optimal-approach\">\n        <details>\n            <summary class=\"main-summary\">\n                <span>\n                    Optimal Approach\n                </span>\n                <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                    <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                    </path>\n                </svg>\n            </summary>\n            <div class=\"common-drops\">\n                <details class=\"secondary-details\" open=\"\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Algorithm / Intuition\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <div class=\"approach-algorithm\">\n                    \n                    <p>Morris Traversal is an algorithm that allows preorder/inorder tree traversal without using any extra space for stack or recursion. It utilises threaded binary trees to traverse the tree without requiring a stack for saving the path. Read more about <a href=\"https://takeuforward.org/data-structure/morris-preorder-traversal-of-a-binary-tree/\">Morris Preorder Traversal here</a></p>\n                    <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/flattening-binary-tree-image10-0C32mrMb\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n\n                    <h4>Algorithm </h4>\n                    <p><strong>Step 1: </strong>Start with the current node as the root of the tree.</p>\n                   \t \n                    <p><strong>Step 2: </strong> While the current node is not null we traverse the tree in a while loop:\n                    <ol><li>If the current node has a left child:\n                    <ol><li>Find the rightmost node in the left subtree.</li><li>Connect the rightmost node of the left subtree to the current node\u2019s right child.</li><li>Update the current node\u2019s right child to be its left child.</li><li>Set the current node\u2019s left child to null.</li></ol></li><li>Move to the current node\u2019s right child.</li><li>If the current node has no right child:<ol><li>Move to the current node\u2019s left child (if it exists) or null.</li></ol></li></ol></p> \n                   \t\n                    <p><strong>Step 3: </strong>Repeat until all nodes are processed.</p>\n\n                   \t\n                    </div>\n                </details>\n                <details class=\"code-section secondary-details\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Code\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <div class=\"code-tabs\">\n                        <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n                        <button class=\"code-tab\" data-lang=\"java\">Java</button>\n                        <button class=\"code-tab\" data-lang=\"python\">Python</button>\n                        <button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n                        <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\"\n                            xmlns=\"http://www.w3.org/2000/svg\">\n                            <path\n                                d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n                            </path>\n                        </svg>\n                    </div>\n                    <div class=\"code-content\">\n                        <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n                            <pre class=\"wp-block-code\">\n                                <code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;iostream&gt;\n#include &lt;sstream&gt;\n#include &lt;unordered_map&gt;\n#include &lt;vector&gt;\n#include &lt;queue&gt;\n#include &lt;map&gt;\n#include &lt;stack&gt;\n\nusing namespace std;\n\n// TreeNode structure\nstruct TreeNode {\n    int val;\n    TreeNode *left;\n    TreeNode *right;\n    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n};\n\nclass Solution {\npublic:\n    // Function to flatten a binary tree\n    // to a right next Linked List structure\n    void flatten(TreeNode* root) {\n        // Initialize a pointer\n        // 'curr' to the root of the tree\n        TreeNode* curr = root;\n\n        // Iterate until 'curr'\n        // becomes NULL\n        while (curr) {\n            // Check if the current\n            // node has a left child\n            if (curr-&gt;left) {\n                // If yes, find the rightmost\n                // node in the left subtree\n                TreeNode* pre = curr-&gt;left;\n                while (pre-&gt;right) {\n                    pre = pre-&gt;right;\n                }\n\n                // Connect the rightmost node in\n                // the left subtree to the current\n               //  node's right child\n                pre-&gt;right = curr-&gt;right;\n\n                // Move the entire left subtree to the\n                // right child of the current node\n                curr-&gt;right = curr-&gt;left;\n\n                // Set the left child of\n                // the current node to NULL\n                curr-&gt;left = NULL;\n            }\n\n            // Move to the next node\n            // on the right side\n            curr = curr-&gt;right;\n        }\n    }\n};\n\n\n\n// Print the preorder traversal of the\n// Orignal Binary Tree\nvoid printPreorder(TreeNode* root){\n    if(!root){\n        return;\n    }\n    cout &lt;&lt; root-&gt;val &lt;&lt; &quot; &quot;;\n    printPreorder(root-&gt;left);\n    printPreorder(root-&gt;right);\n}\n\n// Print the Binary Tree along the \n// Right Pointers after Flattening\nvoid printFlattenTree(TreeNode* root){\n    if(!root){\n        return;\n    }\n    cout &lt;&lt; root-&gt;val &lt;&lt; &quot; &quot;;\n    printFlattenTree(root-&gt;right);\n}\n\n\nint main() {\n\n    TreeNode* root = new TreeNode(1);\n    root-&gt;left = new TreeNode(2);\n    root-&gt;right = new TreeNode(3);\n    root-&gt;left-&gt;left = new TreeNode(4);\n    root-&gt;left-&gt;right = new TreeNode(5);\n    root-&gt;left-&gt;right-&gt;right = new TreeNode(6);\n    root-&gt;right-&gt;right = new TreeNode(7);\n    root-&gt;right-&gt;left = new TreeNode(8);\n\n    Solution sol;\n    \n    cout &lt;&lt; &quot;Binary Tree Preorder: &quot;;\n    printPreorder(root);\n    cout &lt;&lt; endl;\n    \n    sol.flatten(root);\n    \n    cout &lt;&lt; &quot;Binary Tree After Flatten: &quot;;\n    printFlattenTree(root);\n    cout &lt;&lt; endl;\n    \n\n    return 0;\n}\n  \n                                </code>\n                            </pre>\n                        </div>\n                        <div class=\"code-block \" data-lang=\"java\">\n                            <pre class=\"wp-block-code\">\n                                <code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\n// TreeNode structure\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    public TreeNode(int x) {\n        val = x;\n        left = null;\n        right = null;\n    }\n}\n\nclass Solution {\n    // Function to flatten a binary tree\n    // to a right next Linked List structure\n    public void flatten(TreeNode root) {\n        // Initialize a pointer\n        // 'curr' to the root of the tree\n        TreeNode curr = root;\n\n        // Iterate until 'curr'\n        // becomes NULL\n        while (curr != null) {\n            // Check if the current\n            // node has a left child\n            if (curr.left != null) {\n                // If yes, find the rightmost\n                // node in the left subtree\n                TreeNode pre = curr.left;\n                while (pre.right != null) {\n                    pre = pre.right;\n                }\n\n                // Connect the rightmost node in\n                // the left subtree to the current\n                // node's right child\n                pre.right = curr.right;\n\n                // Move the entire left subtree to the\n                // right child of the current node\n                curr.right = curr.left;\n\n                // Set the left child of\n                // the current node to NULL\n                curr.left = null;\n            }\n\n            // Move to the next node\n            // on the right side\n            curr = curr.right;\n        }\n    }\n}\n\n// Print the preorder traversal of the\n// Original Binary Tree\nclass Main {\n    public static void printPreorder(TreeNode root) {\n        if (root == null) {\n            return;\n        }\n        System.out.print(root.val + &quot; &quot;);\n        printPreorder(root.left);\n        printPreorder(root.right);\n    }\n\n    // Print the Binary Tree along the\n    // Right Pointers after Flattening\n    public static void printFlattenTree(TreeNode root) {\n        if (root == null) {\n            return;\n        }\n        System.out.print(root.val + &quot; &quot;);\n        printFlattenTree(root.right);\n    }\n\n    public static void main(String[] args) {\n        TreeNode root = new TreeNode(1);\n        root.left = new TreeNode(2);\n        root.right = new TreeNode(3);\n        root.left.left = new TreeNode(4);\n        root.left.right = new TreeNode(5);\n        root.left.right.right = new TreeNode(6);\n        root.right.right = new TreeNode(7);\n        root.right.left = new TreeNode(8);\n\n        Solution sol = new Solution();\n\n        System.out.print(&quot;Binary Tree Preorder: &quot;);\n        printPreorder(root);\n        System.out.println();\n\n        sol.flatten(root);\n\n        System.out.print(&quot;Binary Tree After Flatten: &quot;);\n        printFlattenTree(root);\n        System.out.println();\n    }\n}\n                                </code>\n                            </pre>\n                        </div>\n                        <div class=\"code-block\" data-lang=\"python\">\n                            <pre class=\"wp-block-code\">\n                                <code lang=\"python\" class=\"language-python\">\n# TreeNode structure\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    # Function to flatten a binary tree\n    # to a right next Linked List structure\n    def flatten(self, root):\n        # Initialize a pointer\n        # 'curr' to the root of the tree\n        curr = root\n\n        # Iterate until 'curr'\n        # becomes None\n        while curr:\n            # Check if the current\n            # node has a left child\n            if curr.left:\n                # If yes, find the rightmost\n                # node in the left subtree\n                pre = curr.left\n                while pre.right:\n                    pre = pre.right\n\n                # Connect the rightmost node in\n                # the left subtree to the current\n                # node's right child\n                pre.right = curr.right\n\n                # Move the entire left subtree to the\n                # right child of the current node\n                curr.right = curr.left\n\n                # Set the left child of\n                # the current node to None\n                curr.left = None\n\n            # Move to the next node\n            # on the right side\n            curr = curr.right\n\n# Print the preorder traversal of the\n# Original Binary Tree\ndef print_preorder(root):\n    if not root:\n        return\n    print(root.val, end=&quot; &quot;)\n    print_preorder(root.left)\n    print_preorder(root.right)\n\n# Print the Binary Tree along the\n# Right Pointers after Flattening\ndef print_flatten_tree(root):\n    if not root:\n        return\n    print(root.val, end=&quot; &quot;)\n    print_flatten_tree(root.right)\n\nif __name__ == &quot;__main__&quot;:\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    root.left.right.right = TreeNode(6)\n    root.right.right = TreeNode(7)\n    root.right.left = TreeNode(8)\n\n    sol = Solution()\n\n    print(&quot;Binary Tree Preorder: &quot;, end=&quot;&quot;)\n    print_preorder(root)\n    print()\n\n    sol.flatten(root)\n\n    print(&quot;Binary Tree After Flatten: &quot;, end=&quot;&quot;)\n    print_flatten_tree(root)\n    print()\n\n\n                                </code>\n                            </pre>\n                        </div>\n                        <div class=\"code-block\" data-lang=\"javascript\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"javascript\" class=\"language-javascript\">\n// TreeNode structure\nclass TreeNode {\n    constructor(x) {\n        this.val = x;\n        this.left = null;\n        this.right = null;\n    }\n}\n\nclass Solution {\n    // Function to flatten a binary tree\n    // to a right next Linked List structure\n    flatten(root) {\n        // Initialize a pointer\n        // 'curr' to the root of the tree\n        let curr = root;\n\n        // Iterate until 'curr'\n        // becomes null\n        while (curr) {\n            // Check if the current\n            // node has a left child\n            if (curr.left) {\n                // If yes, find the rightmost\n                // node in the left subtree\n                let pre = curr.left;\n                while (pre.right) {\n                    pre = pre.right;\n                }\n\n                // Connect the rightmost node in\n                // the left subtree to the current\n                // node's right child\n                pre.right = curr.right;\n\n                // Move the entire left subtree to the\n                // right child of the current node\n                curr.right = curr.left;\n\n                // Set the left child of\n                // the current node to null\n                curr.left = null;\n            }\n\n            // Move to the next node\n            // on the right side\n            curr = curr.right;\n        }\n    }\n}\n\n// Print the preorder traversal of the\n// Original Binary Tree\nfunction printPreorder(root) {\n    if (!root) {\n        return;\n    }\n    console.log(root.val + &quot; &quot;);\n    printPreorder(root.left);\n    printPreorder(root.right);\n}\n\n// Print the Binary Tree along the \n// Right Pointers after Flattening\nfunction printFlattenTree(root) {\n    if (!root) {\n        return;\n    }\n    console.log(root.val + &quot; &quot;);\n    printFlattenTree(root.right);\n}\n\n// Main function\nfunction main() {\n    let root = new TreeNode(1);\n    root.left = new TreeNode(2);\n    root.right = new TreeNode(3);\n    root.left.left = new TreeNode(4);\n    root.left.right = new TreeNode(5);\n    root.left.right.right = new TreeNode(6);\n    root.right.right = new TreeNode(7);\n    root.right.left = new TreeNode(8);\n\n    let sol = new Solution();\n\n    console.log(&quot;Binary Tree Preorder: &quot;);\n    printPreorder(root);\n    console.log(&quot;\\n&quot;);\n\n    sol.flatten(root);\n\n    console.log(&quot;Binary Tree After Flatten: &quot;);\n    printFlattenTree(root);\n    console.log(&quot;\\n&quot;);\n}\n\n// Run the main function\nmain();\n                            </code>\n                        </pre>\n                    </div>\n                        <p>\n                            <strong>Output: </strong>Binary Tree Preorder: 1 2 4 5 6 3 8 7, Binary Tree After Flatten: 1 2 4 5 6 3 8 7\n</p>\n                    </div>\n                </details>\n                <details class=\"secondary-details\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Complexity Analysis\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <p>\n                        <p><strong>Time Complexity: O(2N)</strong>  where N is the number of nodes in the Binary Tree.\n                        <ol><li>The time complexity is linear, as each node is visited at most twice (once for establishing the temporary link and once for reverting it).</li><li>In each step, we perform constant-time operations, such as moving to the left or right child and updating pointers.</li></ol></p>\n\n                        <p><strong>Space Complexity: O(1)</strong> The space complexity is constant, as the algorithm uses only a constant amount of extra space irrespective of the input size.\n                        <ol><li>Morris Traversal does not use any additional data structures like stacks or recursion, making it an in-place algorithm.</li><li>The only space utilised is for a few auxiliary variables, such as pointers to current and in-order predecessor nodes.</li></ol></p>\n                    \n                </details>\n            </div>\n        </details>\n    </div>\n</div>\n\n\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n    <details>\n        <summary class=\"main-summary\">\n            <span>\n                Video Explanation\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"yt-video-wrapper\">\n           <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/sWf7k1x9XR4?si=8cCzGMw7mObz3OEm\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n        </div>\n    </details>\n</div>\n\n<script src=\"https://takeuforward.org/UXApproachDropDowns/3ApproachJSScript.js\"></script>\n\n<blockquote class=\"wp-block-quote\">\n    Special thanks to <strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268\">Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,<strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\"> please check out this article</a></strong>\n</blockquote>\n\n\n<script>\n\n    const codeSections = document.querySelectorAll('.code-section');\n\n    // Get last selected language from localStorage or set default value\n    let lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp';\n\n    codeSections.forEach((section, sectionIndex) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n        const copyBtn = section.querySelector('.copy-btn');\n\n        codeTabs.forEach((tab) => {\n            tab.addEventListener('click', () => {\n                codeTabs.forEach((t) => {\n                    t.classList.remove('dsa_article_code_active');\n                });\n                tab.classList.add('dsa_article_code_active');\n\n                const lang = tab.dataset.lang;\n                const activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                codeBlocks.forEach((block) => {\n                    if (block === activeBlock) {\n                        block.classList.add('dsa_article_code_active');\n                    } else {\n                        block.classList.remove('dsa_article_code_active');\n                    }\n                });\n\n                // Update last selected language for all sections and store in localStorage\n                lastSelectedLanguage = lang;\n                localStorage.setItem('lastSelectedLanguage', lang);\n                codeSections.forEach((otherSection, otherIndex) => {\n                    if (otherIndex !== sectionIndex) {\n                        const otherTabs = otherSection.querySelectorAll('.code-tab');\n                        otherTabs.forEach((otherTab) => {\n                            if (otherTab.dataset.lang === lang) {\n                                otherTab.classList.add('dsa_article_code_active');\n                            } else {\n                                otherTab.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                        const otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                        const otherCodeBlocks = otherSection.querySelectorAll('.code-block');\n                        otherCodeBlocks.forEach((block) => {\n                            if (block === otherActiveBlock) {\n                                block.classList.add('dsa_article_code_active');\n                            } else {\n                                block.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                    }\n                });\n            });\n        });\n\n        // Handle copy button click event\n        copyBtn.addEventListener('click', () => {\n            const activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\n            navigator.clipboard.writeText(activeBlock.innerText);\n            copyBtn.classList.add('dsa_article_code_active');\n            setTimeout(() => {\n                copyBtn.classList.remove('dsa_article_code_active');\n            }, 1000);\n        });\n    });\n\n    // Set initial state of the tabs\n    codeSections.forEach((section) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n\n        codeTabs.forEach((tab) => {\n            if (tab.dataset.lang === lastSelectedLanguage) {\n                tab.classList.add('dsa_article_code_active');\n            } else {\n                tab.classList.remove('dsa_article_code_active');\n            }\n        });\n\n        codeBlocks.forEach((block) => {\n            if (block.dataset.lang === lastSelectedLanguage) {\n                block.classList.add('dsa_article_code_active');\n            } else {\n                block.classList.remove('dsa_article_code_active');\n            }\n        });\n    });\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>"
}