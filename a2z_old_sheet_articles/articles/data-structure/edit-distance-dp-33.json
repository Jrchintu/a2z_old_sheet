{
    "dislikes": 4,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:10:35 GMT+0530 (India Standard Time)",
    "slug": "edit-distance-dp-33",
    "aid": "1820",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/edit-distance",
    "title": "Edit Distance | (DP-33)",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "dynamic-programming",
            "topic-title": "Dynamic Programming"
        },
        {
            "topic-id": "recursion",
            "topic-title": "Recursion"
        },
        {
            "topic-id": "string",
            "topic-title": "String"
        }
    ],
    "category_tag": "data-structure",
    "likes": 64,
    "preview": "Problem Statement: Edit Distance We are given two strings \u2018S1\u2019 and \u2018S2\u2019. We need to convert S1 to S2. The following three operations are allowed: 1. Deletion of a character. 2. Replacement of a cha...",
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement</strong>:&nbsp;Edit Distance</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We are given two strings \u2018S1\u2019 and \u2018S2\u2019. We need to convert S1 to S2. The following three operations are allowed:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li>Deletion of a character. </li><li>Replacement of a character with another one. </li><li>Insertion of a character. </li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>We have to return the <strong>minimum </strong>number of operations required to convert S1 to S2 as our answer.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n<details class=\"article_example_details\">\n<summary class=\"article_example_summary\">\n<span><strong>\nExamples\n</strong>\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"atricle_example_content\">\n<pre class=\"wp-block-preformatted\"><!-- Insert New Examples Here -->\n<pre class=\"wp-block-preformatted\"><strong>Example:</strong>\n\n<img width=\"624\" height=\"309\" src=\"https://lh6.googleusercontent.com/Dxn0cvswqpu9nszd6gMXThvxbSwlyz_lLBUwzYmyNhvV9LcGNYWUjC9D8T9iP0pUlaf1WRtpYz061ttrSe8cvo-DvUeknkKX8MuDrBy4_JhsSqj4TVKoEoePOauIEpvN-UaeSZ5N\"></pre>\n</pre>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Practice Section-->\n<div class=\"practice\">\n<span><strong>Practice: </strong></span>\n<div class=\"problem-buttons\">\n\n<!-- Add Problem Link inside href -->\n<a href=\"https://www.codingninjas.com/studio/problems/shortest-common-supersequence_4244493?utm_source=striver&amp;utm_medium=website&amp;utm_campaign=a_zcoursetuf\" target=\"_blank\" rel=\"noopener\">\n<span>Solve Problem</span>\n<img src=\"https://static.takeuforward.org/wp/uploads/2023/04/Group-11-5.png\" alt=\"code-studio\">\n</a>\n</div>\n</div>\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\nyourself first. </em></p>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<div class=\"horizontal_navbar_dsa_article\">\n<div class=\"grid_container_three\">\n<a href=\"#brute-force-approach\" class=\"three-boxes box-a\">\nMemoization approach\n</a>\n<a href=\"#better-approach\" class=\"three-boxes box-b\">\nTabulation approach\n</a>\n<a href=\"#optimal-approach\" class=\"three-boxes box-c\">\nSpace Optimization\n</a>\n<a href=\"#dsa_article_video_explanation\" class=\"three-boxes box-d\">\n<svg width=\"26\" height=\"26\" viewBox=\"0 0 20 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M8 10L13.19 7L8 4V10ZM19.56 2.17C19.69 2.64 19.78 3.27 19.84 4.07C19.91 4.87 19.94 5.56 19.94 6.16L20 7C20 9.19 19.84 10.8 19.56 11.83C19.31 12.73 18.73 13.31 17.83 13.56C17.36 13.69 16.5 13.78 15.18 13.84C13.88 13.91 12.69 13.94 11.59 13.94L10 14C5.81 14 3.2 13.84 2.17 13.56C1.27 13.31 0.69 12.73 0.44 11.83C0.31 11.36 0.22 10.73 0.16 9.93C0.0900001 9.13 0.0599999 8.44 0.0599999 7.84L0 7C0 4.81 0.16 3.2 0.44 2.17C0.69 1.27 1.27 0.69 2.17 0.44C2.64 0.31 3.5 0.22 4.82 0.16C6.12 0.0899998 7.31 0.0599999 8.41 0.0599999L10 0C14.19 0 16.8 0.16 17.83 0.44C18.73 0.69 19.31 1.27 19.56 2.17Z\" fill=\"red\"></path>\n</svg>\n\n</a>\n<div class=\"box-e tooltip\">\n<svg viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M12.842 9.25L11.9577 10.17C11.2502 10.89 10.8081 11.5 10.8081 13H8.84297V12.5C8.84297 11.39 9.28511 10.39 9.99255 9.67L11.2109 8.41C11.5745 8.05 11.7906 7.55 11.7906 7C11.7906 6.46957 11.5836 5.96086 11.2151 5.58579C10.8465 5.21071 10.3467 5 9.82552 5C9.30434 5 8.80451 5.21071 8.43598 5.58579C8.06745 5.96086 7.86041 6.46957 7.86041 7H5.89531C5.89531 5.93913 6.30938 4.92172 7.04644 4.17157C7.7835 3.42143 8.78316 3 9.82552 3C10.8679 3 11.8675 3.42143 12.6046 4.17157C13.3417 4.92172 13.7557 5.93913 13.7557 7C13.7543 7.84324 13.4259 8.65183 12.842 9.25ZM10.8081 17H8.84297V15H10.8081M9.82552 0C8.53521 0 7.25754 0.258658 6.06545 0.761205C4.87337 1.26375 3.79021 2.00035 2.87783 2.92893C1.03519 4.8043 0 7.34784 0 10C0 12.6522 1.03519 15.1957 2.87783 17.0711C3.79021 17.9997 4.87337 18.7362 6.06545 19.2388C7.25754 19.7413 8.53521 20 9.82552 20C12.4314 20 14.9306 18.9464 16.7732 17.0711C18.6158 15.1957 19.651 12.6522 19.651 10C19.651 4.47 15.2296 0 9.82552 0Z\" fill=\"black\"></path>\n</svg>\n<div class=\"bottom\">\n<p>Expand any one approach by clicking the given options in the bar. Clicking one approach on bar,\ncloses all other expands. You can manually expand more than one approach at a time</p>\n<i></i>\n</div>\n\n</div>\n</div>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Approaches Drop-Down -->\n<div class=\"dsa_article_dropdown_approachs \">\n\n<!-- Brute Force Approach Starts from here -->\n<div id=\"brute-force-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nMemoization Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n<h3><strong>Intuition:&nbsp;</strong></h3>\n<p>For every index of string S1, we have three options to match that index with string S2, i.e replace the character, remove the character or insert some character at that index. Therefore, we can think in terms of string matching path as we have done already in previous questions.</p>\n<p>As there is no uniformity in data, there is no other way to find out than to <strong>try out all possible ways</strong>. To do so we will need to use <strong>recursion</strong>.</p>\n<p><strong>Steps to form the recursive solution:&nbsp;</strong></p>\n<p>We will first form the recursive solution by the three points mentioned in the <a href=\"https://takeuforward.org/data-structure/dynamic-programming-introduction/\" target=\"_blank\" rel=\"noreferrer noopener\">Dynamic Programming Introduction</a>.&nbsp;</p>\n<h5><strong>Step 1: </strong>Express the problem in terms of indexes.</h5>\n<p>We are given two strings. We can represent them with the help of two indexes i and j. Initially, i=n-1 and j=m-1, where n and m are lengths of strings S1 and S2. Initially, we will call f(n-1,m-1), which means the minimum number of operations required to convert string S1[0\u2026n-1] to string S2[0\u2026m-1].</p>\n<p>We can generalize this as follows:</p>\n<p><img width=\"624\" height=\"76\" src=\"https://lh5.googleusercontent.com/Kno6G93PnKKaUmU7TLQwLTdxjfW9FEDj7zPymkpah7ULJ2m3Z3DFf6BWBklUEcKCTjYMXVbXH5by_kcCHnFKViLum5QgQqln9bMltJEjagNRNfaofNTCt_-FaGUZkwHDfWaXDTfj\"></p>\n<h5><strong>Step 2: </strong>Try out all possible choices at a given index.</h5>\n<p>Now, i and j represent two characters from strings S1 and S2 respectively. There are only two options that make sense: either the characters represented by i and j match or they don\u2019t.</p>\n<p><strong>(i) When the characters match</strong></p>\n<p><strong>if(S1[i]==S2[j])</strong>,&nbsp;</p>\n<p>If this is true, now as the characters at i and j match, we would not want to do any operations to make them match, so we will just decrement both i and j by 1 and recursively find the answer for the remaining string portion. We return<strong> 0+f(i-1,j-1)</strong>. The following figure makes it clear.</p>\n<p><img width=\"466\" height=\"407\" src=\"https://lh5.googleusercontent.com/Epf_SZWCc6h3rZsWMdbA3uiqDPvWcYi52chZekrnF_l3tM7_PQLUwp467pduI90-ZVw416BOZAZnnX3L2vKKRv7RsUcjV99ne70sr-gifXQMKWUszmYsmawrtUJs2VWI9qjOlukV\"></p>\n<p><strong>(ii) When the characters don\u2019t match</strong></p>\n<p><strong>if(S1[i] != S2[j]) </strong>is true, then we have to do any of three operations to match the characters. We have three options, we will analyze each of them one by one.</p>\n<p><strong>Case 1: Inserting a character</strong></p>\n<p>Consider this example,</p>\n<p><img width=\"219\" height=\"286\" src=\"https://lh3.googleusercontent.com/Xs3jsd4QqgXiB71EyA8nQB4WXehdF1IYyd1d8c_tbSHPnuZR68YehLYxOaNyLdA_AueF0dDbMqH9AXra0MDao4ErftxY37rlFYL9Pb20iD_WC9osY5z62Peu59qDd6ft4q0aIzeC\"></p>\n<p>Now if we have to match the strings by insertions, what would we do?:&nbsp;</p>\n<ul><li>We would have placed an \u2018s\u2019 at index 5 of S1.</li><li>Suppose i now point to s at index 5 of S1 and j points are already pointing to s at index j of S2.</li><li>Now, we hit the condition, where characters do match. (as mentioned in case 1).</li><li>Therefore, we will decrement i and j by 1. They will now point to index 4 and 1 respectively.</li></ul>\n<p><img width=\"694\" height=\"325\" src=\"https://lh4.googleusercontent.com/ejLwOeAWWWTnuG0Ab9MeOnlpCvTsafB_L_GRF2SAedtIuNwkOhjX5ZXKcIaFWpPtDv-bdSfhlqStLLpDjKpIBWPrUjiKvuYf92FQGegjrlbVM1Fz3f0A8lLwK1VI7b_uj0c-cFVR\"></p>\n<p>Now, the number of operations we did were only 1 (inserting <strong>s</strong> at index 5) but do we need to really insert the \u2018s\u2019 at index 5 and modify the string? The answer is simply <strong>NO</strong>. As we see that inserting a character (here \u2018s\u2019 at index 5), we will eventually get to the third step. So we can just <strong>return</strong> <strong>1+ f(i,j-1)</strong> as i remains there only after insertion and j decrements by 1. We can say that we have <strong>hypothetically</strong> inserted character <strong>s</strong>.</p>\n<p><strong>Case 2: Deleting a character&nbsp;</strong></p>\n<p>Consider the same example,</p>\n<p><img width=\"219\" height=\"286\" src=\"https://lh3.googleusercontent.com/Xs3jsd4QqgXiB71EyA8nQB4WXehdF1IYyd1d8c_tbSHPnuZR68YehLYxOaNyLdA_AueF0dDbMqH9AXra0MDao4ErftxY37rlFYL9Pb20iD_WC9osY5z62Peu59qDd6ft4q0aIzeC\"></p>\n<p>We can simply delete the character at index 4 and check from the next index.</p>\n<p><img width=\"204\" height=\"248\" src=\"https://lh6.googleusercontent.com/VeT4Yxyf3HZSAq9tvH3FyhstIf-RDHqXIEtO7-o9V4hJIQeBcCi8schGxrIfhvXNza7DNSrAxAc49hUN5cH-kvKt8AhnrxK7llwKLtCBLg2WalRsgNBbWLlZz8MZsDaLCV_2MQ-Z\"></p>\n<p>Now, j remains at its original index and we decrement i by 1. We perform 1 operation, therefore we will recursively call <strong>1+f(i-1,j).</strong></p>\n<p><strong>Case 3: Replacing a character&nbsp;</strong></p>\n<p>Consider the same example,</p>\n<p><img width=\"219\" height=\"286\" src=\"https://lh3.googleusercontent.com/Xs3jsd4QqgXiB71EyA8nQB4WXehdF1IYyd1d8c_tbSHPnuZR68YehLYxOaNyLdA_AueF0dDbMqH9AXra0MDao4ErftxY37rlFYL9Pb20iD_WC9osY5z62Peu59qDd6ft4q0aIzeC\"></p>\n<p>If we replace the character \u2018e\u2019 at index 4 of S1 with \u2018s\u2019, we have matched both the characters ourselves. We again hit the case of character matching, therefore we decrement <strong>both </strong>i and j by 1. As the number of operations performed is 1, we will return<strong> 1+f(i-1,j-1).</strong></p>\n<p>To summarise, these are the three choices we have in case characters don\u2019t match:</p>\n<ul><li>return 1+f(i-1,j) // Insertion of character.</li><li>return 1+f(i,j-1) // Deletion of character.</li><li>return 1+f(i-1,j-1) // Replacement of character.</li></ul>\n<h5><strong>Step 3: Return the minimum of all choices.</strong></h5>\n<p>As we have to return the minimum number of operations, we will return the minimum of all operations.</p>\n<p><strong>Base Cases:</strong></p>\n<p>We are reducing i and j in our recursive relation, there can be two possibilities, either i becomes -1 or j becomes -1., i,e we exhaust either S1 or S2 respectively.</p>\n<p><img width=\"624\" height=\"339\" src=\"https://lh5.googleusercontent.com/piKCMIPRqgoMNLRHz0-q7QQqUWjuBeDjQGLK44gAaZDVmCkaV9vBXu-w8gjiNY8sdGsGtgx1Ytuzn5dSDnhT0auaopJt_bA9LF3Q_MhSrFARMcEUCU77OD8kw7x7tUQRUgkKz3kK\"></p>\n<p>The final pseudocode after steps 1, 2, and 3:</p>\n<p><img width=\"500\" height=\"533\" src=\"https://lh5.googleusercontent.com/7JW-OFiEzoysZNOOG3hUO2i3Qkss58AvQFvNIHWgPWjFL31HzGLL1cPMMIDJABCId4P5BGU12z28oUrahg7Tu3ekmpymKVLQ-Gudm8HlY7PGWMWn4j_mKx-hT550w_yZwptQDkNj\"></p>\n<p><strong>Steps to memoize a recursive solution:</strong></p>\n<p>If we draw the recursion tree, we will see that there are overlapping subproblems. In order to convert a recursive solution the following steps will be taken:</p>\n<ol><li>Create a dp array of size [n][m]. The size of S1 and S2 are n and m respectively, so the variable i will always lie between \u20180\u2019 and \u2018n-1\u2019 and the variable j between \u20180\u2019 and \u2018m-1\u2019.</li><li>We initialize the dp array to -1.</li><li>Whenever we want to find the answer to particular parameters (say f(i,j)), we first check whether the answer is already calculated using the dp array(i.e dp[i][j]!= -1 ). If yes, simply return the value from the dp array.</li><li>If not, then we are finding the answer for the given value for the first time, we will use the recursive relation as usual but before returning from the function, we will set dp[i][j] to the solution we get.</li></ol>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\n// Function to calculate the edit distance between two strings\nint editDistanceUtil(string&amp; S1, string&amp; S2, int i, int j, vector&lt;vector&lt;int&gt;&gt;&amp; dp) {\n    // Base cases\n    if (i &lt; 0)\n        return j + 1;\n    if (j &lt; 0)\n        return i + 1;\n\n    // If the result for this state has already been calculated, return it\n    if (dp[i][j] != -1)\n        return dp[i][j];\n\n    // If the characters at the current positions match, no operation is needed\n    if (S1[i] == S2[j])\n        return dp[i][j] = 0 + editDistanceUtil(S1, S2, i - 1, j - 1, dp);\n\n    // Minimum of three choices:\n    // 1. Replace the character at S1[i] with the character at S2[j]\n    // 2. Delete the character at S1[i]\n    // 3. Insert the character at S2[j] into S1\n    else\n        return dp[i][j] = 1 + min(editDistanceUtil(S1, S2, i - 1, j - 1, dp),\n                                  min(editDistanceUtil(S1, S2, i - 1, j, dp),\n                                      editDistanceUtil(S1, S2, i, j - 1, dp)));\n}\n\n// Function to calculate the minimum number of operations required to transform S1 into S2\nint editDistance(string&amp; S1, string&amp; S2) {\n    int n = S1.size();\n    int m = S2.size();\n\n    // Create a DP table to memoize results\n    vector&lt;vector&lt;int&gt;&gt; dp(n, vector&lt;int&gt;(m, -1));\n\n    // Call the utility function with the last indices of both strings\n    return editDistanceUtil(S1, S2, n - 1, m - 1, dp);\n}\n\nint main() {\n    string s1 = \"horse\";\n    string s2 = \"ros\";\n\n    // Call the editDistance function and print the result\n    cout &lt;&lt; \"The minimum number of operations required is: \" &lt;&lt; editDistance(s1, s2);\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\nclass TUF {\n    // Function to calculate the minimum edit distance between two strings\n    static int editDistanceUtil(String S1, String S2, int i, int j, int[][] dp) {\n        // Base cases\n        if (i &lt; 0)\n            return j + 1;\n        if (j &lt; 0)\n            return i + 1;\n\n        // If the result is already computed, return it\n        if (dp[i][j] != -1)\n            return dp[i][j];\n\n        // If the characters at the current positions match, no edit is needed\n        if (S1.charAt(i) == S2.charAt(j))\n            return dp[i][j] = editDistanceUtil(S1, S2, i - 1, j - 1, dp);\n\n        // Minimum of three choices:\n        // 1. Replace the character in S1 with the character in S2.\n        // 2. Delete the character in S1.\n        // 3. Insert the character from S2 into S1.\n        else\n            return dp[i][j] = 1 + Math.min(editDistanceUtil(S1, S2, i - 1, j - 1, dp),\n                    Math.min(editDistanceUtil(S1, S2, i - 1, j, dp), editDistanceUtil(S1, S2, i, j - 1, dp)));\n    }\n\n    static int editDistance(String S1, String S2) {\n        int n = S1.length();\n        int m = S2.length();\n\n        int[][] dp = new int[n][m];\n        for (int row[] : dp)\n            Arrays.fill(row, -1);\n\n        // Call the recursive helper function\n        return editDistanceUtil(S1, S2, n - 1, m - 1, dp);\n    }\n\n    public static void main(String args[]) {\n        String s1 = \"horse\";\n        String s2 = \"ros\";\n\n        System.out.println(\"The minimum number of operations required is: \" +\n                editDistance(s1, s2));\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\ndef editDistanceUtil(S1, S2, i, j, dp):\n    # Base cases\n    if i &lt; 0:\n        return j + 1\n    if j &lt; 0:\n        return i + 1\n\n    # If the result for this subproblem is already computed, return it\n    if dp[i][j] != -1:\n        return dp[i][j]\n\n    # If the characters at the current positions match, no operation is needed\n    if S1[i] == S2[j]:\n        dp[i][j] = editDistanceUtil(S1, S2, i - 1, j - 1, dp)\n    else:\n        # Calculate the minimum of three choices:\n        # 1. Replace the current character (diagonal move)\n        # 2. Insert a character into S1 (move up)\n        # 3. Delete a character from S1 (move left)\n        dp[i][j] = 1 + min(\n            editDistanceUtil(S1, S2, i - 1, j - 1, dp),\n            min(editDistanceUtil(S1, S2, i - 1, j, dp), editDistanceUtil(S1, S2, i, j - 1, dp))\n        )\n\n    return dp[i][j]\n\ndef editDistance(S1, S2):\n    n = len(S1)\n    m = len(S2)\n\n    # Initialize a 2D DP array with -1 values\n    dp = [[-1 for _ in range(m)] for _ in range(n)]\n\n    # Calculate and return the edit distance\n    return editDistanceUtil(S1, S2, n - 1, m - 1, dp)\n\ndef main():\n    s1 = \"horse\"\n    s2 = \"ros\"\n\n    # Calculate and print the minimum number of operations required\n    print(\"The minimum number of operations required is:\", editDistance(s1, s2))\n\nif __name__ == \"__main__\":\n    main()\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\nfunction editDistanceUtil(S1, S2, i, j, dp) {\n    // If the first string is empty, the only option is to insert all characters from the second string\n    if (i &lt; 0) {\n        return j + 1;\n    }\n    // If the second string is empty, the only option is to delete all characters from the first string\n    if (j &lt; 0) {\n        return i + 1;\n    }\n\n    // Check if the result for the current indices is already calculated\n    if (dp[i][j] !== -1) {\n        return dp[i][j];\n    }\n\n    // If the characters at the current positions are the same, no operation is needed\n    if (S1[i] === S2[j]) {\n        return dp[i][j] = editDistanceUtil(S1, S2, i - 1, j - 1, dp);\n    }\n\n    // Minimum of three choices:\n    // 1. Substitute a character in the first string with a character in the second string\n    // 2. Delete a character from the first string\n    // 3. Insert a character into the first string\n    return (dp[i][j] = 1 + Math.min(\n        editDistanceUtil(S1, S2, i - 1, j - 1, dp),\n        Math.min(\n            editDistanceUtil(S1, S2, i - 1, j, dp),\n            editDistanceUtil(S1, S2, i, j - 1, dp)\n        )\n    ));\n}\n\n// Function to calculate the minimum edit distance between two strings\nfunction editDistance(S1, S2) {\n    const n = S1.length;\n    const m = S2.length;\n\n    // Create a 2D array to store dynamic programming values\n    const dp = new Array(n).fill(null).map(() =&gt; new Array(m).fill(-1));\n\n    // Call the recursive utility function\n    return editDistanceUtil(S1, S2, n - 1, m - 1, dp);\n}\n\n// Main function\nfunction main() {\n    const s1 = \"horse\";\n    const s2 = \"ros\";\n\n    // Call the editDistance function and print the result\n    console.log(\"The minimum number of operations required is: \" + editDistance(s1, s2));\n}\n\n// Call the main function to start the program\nmain();\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Brute Force Here -->\n</p><p><strong>Output:</strong> The minimum number of operations required is: 3\n\n\n</p>\n<p></p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n<!-- Insert Time and Space Complexity of Brute Force Here -->\n</p><p><strong>Time Complexity: O(N*M)</strong></p>\n<p>Reason: There are N*M states therefore at max \u2018N*M\u2019 new problems will be solved.</p>\n<p><strong>Space Complexity: O(N*M) + O(N+M)</strong></p>\n<p>Reason: We are using a recursion stack space(O(N+M)) and a 2D array ( O(N*M)).</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Brute Force Approach Ends here -->\n\n\n<!-- Better Approach Starts from here -->\n\n<div id=\"better-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nTabulation Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition For Better Approach Here -->\n<p>In the recursive logic, we set the base case too if(i&lt;0 ) and if(j&lt;0) but we can\u2019t set the dp array\u2019s index to -1. Therefore a hack for this issue is to shift every index by 1 towards the right.</p>\n<p><img width=\"454\" height=\"109\" src=\"https://lh4.googleusercontent.com/ztJjQ0JyyegCArEaPxRdbCLkMIc9EtrGxDHowYa9a44Wr8BA-bu4HDADHJ0GZWHEgYlhkMO7wze9OZMUK_ZZkx6tZ6pyKeNgg57isVqSyK6g9-y9tMHqmKismKcgTOlgxBdt0vZO\"></p>\n<ul><li>First we initialise the dp array of size [n+1][m+1] as zero.</li><li>Next, we set the base condition (keep in mind 1-based indexing), we set the first column\u2019s value as i and the first row as j( 1-based indexing).</li><li>Similarly, we will implement the recursive code by keeping in mind the shifting of indexes, therefore S1[i] will be converted to S1[i-1]. Same for S2.</li><li>At last, we will print dp[N][M] as our answer.</li></ul>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\n// Function to calculate the edit distance between two strings\nint editDistance(string&amp; S1, string&amp; S2) {\n    int n = S1.size();\n    int m = S2.size();\n\n    // Create a DP table to store edit distances\n    vector&lt;vector&lt;int&gt;&gt; dp(n + 1, vector&lt;int&gt;(m + 1, 0));\n\n    // Initialize the first row and column\n    for (int i = 0; i &lt;= n; i++) {\n        dp[i][0] = i;\n    }\n    for (int j = 0; j &lt;= m; j++) {\n        dp[0][j] = j;\n    }\n\n    // Fill in the DP table\n    for (int i = 1; i &lt;= n; i++) {\n        for (int j = 1; j &lt;= m; j++) {\n            if (S1[i - 1] == S2[j - 1]) {\n                // If the characters match, no additional cost\n                dp[i][j] = dp[i - 1][j - 1];\n            } else {\n                // Minimum of three choices:\n                // 1. Replace the character at S1[i-1] with S2[j-1]\n                // 2. Delete the character at S1[i-1]\n                // 3. Insert the character at S2[j-1] into S1\n                dp[i][j] = 1 + min(dp[i - 1][j - 1], min(dp[i - 1][j], dp[i][j - 1]));\n            }\n        }\n    }\n\n    // The value at dp[n][m] contains the edit distance\n    return dp[n][m];\n}\n\nint main() {\n    string s1 = \"horse\";\n    string s2 = \"ros\";\n\n    // Call the editDistance function and print the result\n    cout &lt;&lt; \"The minimum number of operations required is: \" &lt;&lt; editDistance(s1, s2);\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\nclass TUF {\n    // Function to calculate the minimum edit distance between two strings\n    static int editDistance(String S1, String S2) {\n        int n = S1.length();\n        int m = S2.length();\n\n        // Create a 2D array to store the minimum edit distances\n        int[][] dp = new int[n + 1][m + 1];\n\n        // Initialize the first row and column with their respective indices\n        for (int i = 0; i &lt;= n; i++) {\n            dp[i][0] = i;\n        }\n        for (int j = 0; j &lt;= m; j++) {\n            dp[0][j] = j;\n        }\n\n        // Fill the dp array using a bottom-up approach\n        for (int i = 1; i &lt;= n; i++) {\n            for (int j = 1; j &lt;= m; j++) {\n                if (S1.charAt(i - 1) == S2.charAt(j - 1)) {\n                    // If the characters match, no edit is needed, so take the value from the diagonal.\n                    dp[i][j] = dp[i - 1][j - 1];\n                } else {\n                    // If the characters don't match, take the minimum of three possibilities:\n                    // 1. Replace the character in S1 with the character in S2 (diagonal).\n                    // 2. Delete the character in S1 (left).\n                    // 3. Insert the character from S2 into S1 (up).\n                    dp[i][j] = 1 + Math.min(dp[i - 1][j - 1], Math.min(dp[i - 1][j], dp[i][j - 1]));\n                }\n            }\n        }\n\n        return dp[n][m];\n    }\n\n    public static void main(String args[]) {\n        String s1 = \"horse\";\n        String s2 = \"ros\";\n\n        System.out.println(\"The minimum number of operations required is: \" +\n                editDistance(s1, s2));\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\ndef editDistance(S1, S2):\n    n = len(S1)\n    m = len(S2)\n\n    # Initialize a 2D DP array of size (n+1) x (m+1) with all elements set to 0\n    dp = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n\n    # Initialize the first row and first column of the DP array\n    for i in range(n + 1):\n        dp[i][0] = i\n    for j in range(m + 1):\n        dp[0][j] = j\n\n    # Fill in the DP array using dynamic programming\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            # If the characters at the current positions match, no operation is needed\n            if S1[i - 1] == S2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                # Calculate the minimum of three choices:\n                # 1. Replace the current character (diagonal move)\n                # 2. Insert a character into S1 (move up)\n                # 3. Delete a character from S1 (move left)\n                dp[i][j] = 1 + min(dp[i - 1][j - 1], min(dp[i - 1][j], dp[i][j - 1]))\n\n    # The final value in dp[n][m] is the minimum number of operations required\n    return dp[n][m]\n\ndef main():\n    s1 = \"horse\"\n    s2 = \"ros\"\n\n    # Calculate and print the minimum number of operations required\n    print(\"The minimum number of operations required is:\", editDistance(s1, s2))\n\nif __name__ == \"__main__\":\n    main()\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\nfunction editDistance(S1, S2) {\n    const n = S1.length;\n    const m = S2.length;\n\n    // Create a 2D array to store dynamic programming values\n    const dp = new Array(n + 1).fill(null).map(() =&gt; new Array(m + 1).fill(0));\n\n    // Initialize the first row and first column\n    for (let i = 0; i &lt;= n; i++) {\n        dp[i][0] = i;\n    }\n    for (let j = 0; j &lt;= m; j++) {\n        dp[0][j] = j;\n    }\n\n    // Fill the dp array using dynamic programming\n    for (let i = 1; i &lt;= n; i++) {\n        for (let j = 1; j &lt;= m; j++) {\n            if (S1[i - 1] === S2[j - 1]) {\n                // If the characters at the current positions are the same, no operation is needed\n                dp[i][j] = dp[i - 1][j - 1];\n            } else {\n                // Minimum of three choices:\n                // 1. Substitute a character in the first string with a character in the second string\n                // 2. Delete a character from the first string\n                // 3. Insert a character into the first string\n                dp[i][j] = 1 + Math.min(\n                    dp[i - 1][j - 1],\n                    Math.min(\n                        dp[i - 1][j],\n                        dp[i][j - 1]\n                    )\n                );\n            }\n        }\n    }\n\n    // The result is stored in the bottom-right cell of the dp array\n    return dp[n][m];\n}\n\n// Main function\nfunction main() {\n    const s1 = \"horse\";\n    const s2 = \"ros\";\n\n    // Call the editDistance function and print the result\n    console.log(\"The minimum number of operations required is: \" + editDistance(s1, s2));\n}\n\n// Call the main function to start the program\nmain();\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Better Approach Here -->\n<strong>Output:</strong> The minimum number of operations required is: 3\n\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Better Approach Here -->\n</p><p><strong>Time Complexity: O(N*M)</strong></p>\n<p>Reason: There are two nested loops</p>\n<p><strong>Space Complexity: O(N*M)</strong></p>\n<p>Reason: We are using an external array of size \u2018N*M\u2019. Stack Space is eliminated.</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Better Approach Ends from here -->\n\n\n<!-- Optimal Approach Starts from here -->\n\n<div id=\"optimal-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nSpace Optimization Approach \n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm of Better Approach Here -->\n<p>If we closely look the relation,</p>\n<p><strong>dp[i][j] =&nbsp; min(dp[i-1][j-1],dp[i-1][j],dp[i][j-1])</strong></p>\n<p>We see that to calculate a value of a cell of the dp array, we need only the previous row values (say prev). So, we don\u2019t need to store an entire array. Hence we can space optimize it.</p>\n<h3><strong>Approach:</strong></h3>\n<p>We will space optimize in the following way:</p>\n<ul><li>We take two rows \u2018prev\u2019 and \u2018cur\u2019.</li><li>We initialize it to the base condition. Now, at starting the prev row needs to be initialized with its column value. Moreover, the cur variable whenever declared should have its first cell as a row value. (See the code).</li><li>Next, we implement the memoization logic. We replace dp[i-1] with prev and dp[i] by cur.</li><li>After every inner loop execution, we set prev=cur, for the next iteration.</li><li>At last, we return prev[m] as our answer.</li></ul>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\n// Function to calculate the edit distance between two strings\nint editDistance(string&amp; S1, string&amp; S2) {\n    int n = S1.size();\n    int m = S2.size();\n\n    // Create two arrays to store previous and current row of edit distances\n    vector&lt;int&gt; prev(m + 1, 0);\n    vector&lt;int&gt; cur(m + 1, 0);\n\n    // Initialize the first row\n    for (int j = 0; j &lt;= m; j++) {\n        prev[j] = j;\n    }\n\n    // Calculate edit distances row by row\n    for (int i = 1; i &lt;= n; i++) {\n        cur[0] = i; // Initialize the first column of the current row\n        for (int j = 1; j &lt;= m; j++) {\n            if (S1[i - 1] == S2[j - 1]) {\n                // If the characters match, no additional cost\n                cur[j] = prev[j - 1];\n            } else {\n                // Minimum of three choices:\n                // 1. Replace the character at S1[i-1] with S2[j-1]\n                // 2. Delete the character at S1[i-1]\n                // 3. Insert the character at S2[j-1] into S1\n                cur[j] = 1 + min(prev[j - 1], min(prev[j], cur[j - 1]));\n            }\n        }\n        prev = cur; // Update the previous row with the current row\n    }\n\n    // The value at cur[m] contains the edit distance\n    return cur[m];\n}\n\nint main() {\n    string s1 = \"horse\";\n    string s2 = \"ros\";\n\n    // Call the editDistance function and print the result\n    cout &lt;&lt; \"The minimum number of operations required is: \" &lt;&lt; editDistance(s1, s2);\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\nclass TUF {\n    // Function to calculate the minimum edit distance between two strings\n    static int editDistance(String S1, String S2) {\n        int n = S1.length();\n        int m = S2.length();\n\n        // Create two arrays to store the previous and current rows of minimum edit distances\n        int[] prev = new int[m + 1];\n        int[] cur = new int[m + 1];\n\n        // Initialize the first row with their respective indices\n        for (int j = 0; j &lt;= m; j++) {\n            prev[j] = j;\n        }\n\n        // Fill the cur array using a bottom-up approach\n        for (int i = 1; i &lt;= n; i++) {\n            cur[0] = i;\n            for (int j = 1; j &lt;= m; j++) {\n                if (S1.charAt(i - 1) == S2.charAt(j - 1)) {\n                    // If the characters match, no edit is needed, so take the value from the diagonal.\n                    cur[j] = prev[j - 1];\n                } else {\n                    // If the characters don't match, take the minimum of three possibilities:\n                    // 1. Replace the character in S1 with the character in S2 (diagonal).\n                    // 2. Delete the character in S1 (left).\n                    // 3. Insert the character from S2 into S1 (up).\n                    cur[j] = 1 + Math.min(prev[j - 1], Math.min(prev[j], cur[j - 1]));\n                }\n            }\n            // Update prev array to store the current values\n            prev = cur.clone();\n        }\n\n        return cur[m];\n    }\n\n    public static void main(String args[]) {\n        String s1 = \"horse\";\n        String s2 = \"ros\";\n\n        System.out.println(\"The minimum number of operations required is: \" +\n                editDistance(s1, s2));\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\ndef editDistance(S1, S2):\n    n = len(S1)\n    m = len(S2)\n\n    # Initialize two lists, prev and cur, to store the previous and current rows of the DP array\n    prev = [j for j in range(m + 1)]\n    cur = [0 for _ in range(m + 1)]\n\n    # Loop through the characters of S1 and S2\n    for i in range(1, n + 1):\n        cur[0] = i  # Initialize the first element of the current row\n\n        for j in range(1, m + 1):\n            # If the characters at the current positions match, no operation is needed\n            if S1[i - 1] == S2[j - 1]:\n                cur[j] = prev[j - 1]\n            else:\n                # Calculate the minimum of three choices:\n                # 1. Replace the current character (diagonal move)\n                # 2. Insert a character into S1 (move up)\n                # 3. Delete a character from S1 (move left)\n                cur[j] = 1 + min(prev[j - 1], min(prev[j], cur[j - 1]))\n\n        prev, cur = cur, prev  # Update prev to be the current row, and cur to be the new empty row\n\n    # The final value in prev[m] is the minimum number of operations required\n    return prev[m]\n\ndef main():\n    s1 = \"horse\"\n    s2 = \"ros\"\n\n    # Calculate and print the minimum number of operations required\n    print(\"The minimum number of operations required is:\", editDistance(s1, s2))\n\nif __name__ == \"__main__\":\n    main()\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\nfunction editDistance(S1, S2) {\n    const n = S1.length;\n    const m = S2.length;\n\n    // Create two arrays, prev and cur, to store dynamic programming values\n    const prev = new Array(m + 1).fill(0);\n    const cur = new Array(m + 1).fill(0);\n\n    // Initialize the first row\n    for (let j = 0; j &lt;= m; j++) {\n        prev[j] = j;\n    }\n\n    for (let i = 1; i &lt;= n; i++) {\n        cur[0] = i;\n        for (let j = 1; j &lt;= m; j++) {\n            if (S1[i - 1] === S2[j - 1]) {\n                // If the characters at the current positions are the same, no operation is needed\n                cur[j] = prev[j - 1];\n            } else {\n                // Minimum of three choices:\n                // 1. Substitute a character in the first string with a character in the second string\n                // 2. Delete a character from the first string\n                // 3. Insert a character into the first string\n                cur[j] = 1 + Math.min(\n                    prev[j - 1],\n                    Math.min(\n                        prev[j],\n                        cur[j - 1]\n                    )\n                );\n            }\n        }\n        // Update the prev array with the values from the cur array for the next iteration\n        for (let j = 0; j &lt;= m; j++) {\n            prev[j] = cur[j];\n        }\n    }\n\n    // The result is stored in the last element of the cur array\n    return cur[m];\n}\n\n// Main function\nfunction main() {\n    const s1 = \"horse\";\n    const s2 = \"ros\";\n\n    // Call the editDistance function and print the result\n    console.log(\"The minimum number of operations required is: \" + editDistance(s1, s2));\n}\n\n// Call the main function to start the program\nmain();\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Optimal Apporach Here -->\n<strong>Output:</strong>The minimum number of operations required is: 3\n\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Optimal Approach-->\n</p><p><strong>Time Complexity: O(N*M)</strong></p>\n<p>Reason: There are two nested loops.</p>\n<p><strong>Space Complexity: O(M)</strong></p>\n<p>Reason: We are using an external array of size \u2018M+1\u2019 to store two rows.</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Optimal Approach Starts from here -->\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n<details>\n<summary class=\"main-summary\">\n<span>\nVideo Explanation\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"yt-video-wrapper\">\n\n<!-- Insert iframe embed Link of Youtube Video-->\n<iframe class=\"lazy-loaded\" loading=\"lazy\" title=\"Edit Distance\" width=\"810\" height=\"456\" data-lazy-type=\"iframe\" data-src=\"https://www.youtube.com/embed/fJaKO8FbDdo?si=myUCA2EoC8FTe-aq\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\" src=\"https://www.youtube.com/embed/fJaKO8FbDdo?feature=oembed\"></iframe><noscript>\n<iframe loading=\"lazy\" title=\"Edit Distance \" width=\"810\" height=\"456\" src=\"https://www.youtube.com/embed/fJaKO8FbDdo?si=myUCA2EoC8FTe-aq\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe></noscript>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script>\n\nconst codeSections = document.querySelectorAll('.code-section');\n\n// Get last selected language from localStorage or set default value\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\n// Update last selected language for all sections and store in localStorage\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\n// Handle copy button click event\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\n// Set initial state of the tabs\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<script>\nconst codeSections = document.querySelectorAll('.code-section');\n\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script src=\"https://takeuforward.org/UXApproachDropDowns/3ApproachJSScript.js\"></script>\n<!-- /wp:html -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;<strong><a href=\"https://www.linkedin.com/in/anshuman-sharma-a1b245194/\" target=\"_blank\" rel=\"noreferrer noopener\">Anshuman Sharma</a></strong>&nbsp;for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\" target=\"_blank\" rel=\"noreferrer noopener\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->"
}