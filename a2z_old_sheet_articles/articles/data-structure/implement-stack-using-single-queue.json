{
    "dislikes": 9,
    "video": "jDZQKzEtbYQ",
    "publishedOn": "Sun Mar 24 2024 22:09:15 GMT+0530 (India Standard Time)",
    "slug": "implement-stack-using-single-queue",
    "aid": "1432",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/implement-stack-using-queue",
    "title": "Implement Stack using single Queue",
    "topics": [
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "queue",
            "topic-title": "Queue"
        },
        {
            "topic-id": "stack",
            "topic-title": "Stack"
        }
    ],
    "likes": 161,
    "category_tag": "data-structure",
    "preview": "Problem Statement: Implement a Stack using a single Queue. Note: Stack is a data structure that follows the Last In First Out (LIFO) rule. Note: Queue is a data structure that follows the First In...",
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement:</strong> Implement a <strong>Stack</strong> using a single <strong>Queue</strong>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Note:</strong> Stack is a data structure that follows the Last In First Out (LIFO) rule.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Note: </strong>Queue is a data structure that follows the First In First Out (FIFO) rule.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Example:</strong> </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\"><img width=\"512\" height=\"360\" src=\"https://lh6.googleusercontent.com/PTWddK6HFOLjdbqarLVQBneesOOO-OGmJrOEZPyORsvCYkGOraWdM3j1MjGTa9Nm23iKBJOVS_GO4bVJeEC66MNv6s-DbQ2e7i-w56eW0tVo2pQimeGFBcYNM9ojNcy5pRAxY-BX\">\n\nExplanation: \npush(): Insert the element in the stack.\npop(): Remove and return the topmost element of the stack.\ntop(): Return the topmost element of the stack\nsize(): Return the size of the stack\n</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p><strong>Solution</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph {\"textColor\":\"vivid-red\"} -->\n<p class=\"has-vivid-red-color has-text-color\"><em>Disclaimer</em>: <em>Don\u2019t jump directly to the solution, try it out yourself first.</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Intuition:</strong> As we know stack follows <strong>last in first out</strong>, which means we get the most recently inserted element whenever we remove an element from the stack. But queue follows first in first out, it means we get that element which we inserted in the starting at each deletion, it means if we want to use the queue like a stack we have to arrange elements in the queue such that we get the most recent element at each deletion.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Approach:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>Take a single queue.</li><li>push(x): Push the element in the queue.</li><li>Use a for loop of size()-1, remove element from queue and again push back to the queue, hence the most recent element becomes the most former element and vice versa.</li><li>pop(): remove the element from the queue.</li><li>top(): show the element at the top of the queue.</li><li>size(): size of the current queue.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Repeat <strong>step3</strong> at every insertion of the element.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"491\" height=\"459\" src=\"https://lh5.googleusercontent.com/bHa6y4rgjYtKhet0ITJMOq4RghUuSmM2FgthDT7h0ue2yeEGuePiQiweOb3kuzJ41WoXDCUZfbV7-AwTHHXG3xyL4ZtkGlzZhcTAdG2lRVmgFN2WFmIVPl7VVYEBjI7FN1gricKz\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include&lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\nclass Stack {\n  queue &lt; int &gt; q;\n  public:\n    void Push(int x) {\n      int s = q.size();\n      q.push(x);\n      for (int i = 0; i &lt; s; i++) {\n\n        q.push(q.front());\n        q.pop();\n      }\n    }\n  int Pop() {\n    int n = q.front();\n    q.pop();\n    return n;\n  }\n  int Top() {\n    return q.front();\n  }\n  int Size() {\n    return q.size();\n  }\n};\n\nint main() {\n  Stack s;\n  s.Push(3);\n  s.Push(2);\n  s.Push(4);\n  s.Push(1);\n  cout &lt;&lt; \"Top of the stack: \" &lt;&lt; s.Top() &lt;&lt; endl;\n  cout &lt;&lt; \"Size of the stack before removing element: \" &lt;&lt; s.Size() &lt;&lt; endl;\n  cout &lt;&lt; \"The deleted element is: \" &lt;&lt; s.Pop() &lt;&lt; endl;\n  cout &lt;&lt; \"Top of the stack after removing element: \" &lt;&lt; s.Top() &lt;&lt; endl;\n  cout &lt;&lt; \"Size of the stack after removing element: \" &lt;&lt; s.Size();\n\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Top of the stack: 1<br>Size of the stack before removing element: 4<br>The deleted element is: 1<br>Top of the stack after removing element: 4<br>Size of the stack after removing element: 3</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity:</strong> O(N)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity:</strong> O(N)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\n\npublic class tuf {\n\n    public static void main(String[] args) {\n        stack s = new stack();\n        s.push(3);\n        s.push(2);\n        s.push(4);\n        s.push(1);\n        System.out.println(\"Top of the stack: \" + s.top());\n        System.out.println(\"Size of the stack before removing element: \" + s.size());\n        System.out.println(\"The deleted element is: \" + s.pop());\n        System.out.println(\"Top of the stack after removing element: \" + s.top());\n        System.out.println(\"Size of the stack after removing element: \" + s.size());\n    }\n\n}\nclass stack {\n    Queue &lt; Integer &gt; q = new LinkedList &lt; &gt; ();\n    void push(int x) {\n        q.add(x);\n        for (int i = 0; i &lt; q.size() - 1; i++) {\n            q.add(q.remove());\n        }\n    }\n    int pop() {\n        return q.remove();\n    }\n    int top() {\n        return q.peek();\n    }\n    int size() {\n        return q.size();\n    }\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Top of the stack: 1<br>Size of the stack before removing element: 4<br>The deleted element is: 1<br>Top of the stack after removing element: 4<br>Size of the stack after removing element: 3</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity:</strong> O(N)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity:</strong> O(N)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block\" data-lang=\"python\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">from queue import Queue\n\n\n\n\nclass Stack:\n    def __init__(self):\n        self.q = Queue()\n\n\n    def push(self, x):\n        s = self.q.qsize()\n        self.q.put(x)\n        for i in range(s):\n            self.q.put(self.q.get())\n\n\n    def pop(self):\n        n = self.q.get()\n        return n\n\n\n    def top(self):\n        return self.q.queue[0]\n\n\n    def size(self):\n        return self.q.qsize()\n\n\n\n\nif __name__ == \"__main__\":\n    s = Stack()\n    s.push(3)\n    s.push(2)\n    s.push(4)\n    s.push(1)\n    print(\"Top of the stack: \", s.top())\n    print(\"Size of the stack before removing element: \", s.size())\n    print(\"The deleted element is: \", s.pop())\n    print(\"Top of the stack after removing element: \", s.top())\n    print(\"Size of the stack after removing element: \", s.size())</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Top of the stack: 1<br>Size of the stack before removing element: 4<br>The deleted element is: 1<br>Top of the stack after removing element: 4<br>Size of the stack after removing element: 3</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity:</strong> O(N)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity:</strong> O(N)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to\u00a0<strong><strong><a href=\"https://www.linkedin.com/in/prashant-sahu-2691a719a\" target=\"_blank\" rel=\"noreferrer noopener nofollow\">PRASHANT SAHU</a></strong></strong> <em><em>and\u00a0<a href=\"https://www.linkedin.com/in/imsudip/\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>Sudip Ghosh</strong></a></em></em>\u00a0for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,\u00a0</em><a href=\"https://takeuforward.org/contribute/help-us-grow-takeuforward/\">please check out this articl</a><em>e</em></p></blockquote>\n<!-- /wp:quote -->"
}