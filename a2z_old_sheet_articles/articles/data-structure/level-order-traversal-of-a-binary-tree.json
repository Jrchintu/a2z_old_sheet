{
    "dislikes": 7,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:09:17 GMT+0530 (India Standard Time)",
    "slug": "level-order-traversal-of-a-binary-tree",
    "aid": "1443",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/level-order-traversal",
    "title": "Level Order Traversal of a Binary Tree",
    "topics": [
        {
            "topic-id": "binary-tree",
            "topic-title": "Binary Tree"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "recursion",
            "topic-title": "Recursion"
        }
    ],
    "category_tag": "data-structure",
    "likes": 147,
    "preview": "Problem Statement: Given the root of a Binary Tree, returns an array containing the level order traversal of the tree. Examples Example 1: Input: Binary Tree: 4 2 5 3 -1 7 6 -1 9 -1 -1 8 -1 1 Outpu...",
    "content": "<p><strong>Problem Statement: </strong>Given the root of a Binary Tree, returns an array containing the level order traversal of the tree. </p>\n\n<div id=\"article_examples\">\n    <details class=\"article_example_details\">\n        <summary class=\"article_example_summary\">\n            <span><strong>\n                    Examples\n                </strong>\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"atricle_example_content\">\n            <pre class=\"wp-block-preformatted\">\n                <span><strong>Example 1:</strong></span>\n\t\t\t\t<span><strong>Input:</strong> Binary Tree: 4 2 5 3 -1 7 6 -1 9 -1 -1 8 -1 1</span>\n\t\t\t\t<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/level-order-image1-WIlJ93jZ\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n\t\t\t\t<span><strong>Output:</strong>[ [4],[ 2, 5 ],[ 3, 7, 6],[ 9, 8],[ 1 ]] </span>\n\t\t\t\t<span><strong>Explanation: </strong>We traverse the binary tree level by level using the following traversal:</span>\n\t\t\t\t<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/level-order-image2-KUQPEVEj\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n\t\t\t\t<span><strong>Example 2:</strong></span>\n\t\t\t\t<span><strong>Input:</strong>Binary Tree: 1 2 3 4 5 6 7 -1 -1 8 -1 -1 -1 9 10\n\t\t\t\t</span>\n\t\t\t\t<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/level-order-image3-1-518ID6\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n\t\t\t\t<span><strong>Output :</strong> [ [1],[2, 3],[4, 5, 6, 7],[8, 9, 10]]</span>\n\t\t\t\t<span><strong>Explanation: </strong>We traverse the binary tree in the order of Root, Left then Right recursively resulting in the following traversal:</span>\n\t\t\t\t<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/level-order-image4-1NR4Z1W5\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n            </pre>\n        </div>\n    </details>\n</div>\n\n<!-- This is Practice Section-->\n<div class=\"practice\">\n    <span><strong>Practice: </strong></span>\n    <div class=\"problem-buttons\">\n\n        <!-- Add Problem Link inside href -->\n        <a href=\"https://www.codingninjas.com/studio/problems/zigzag-binary-tree-traversal_920532?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf\" target=\"_blank\" rel=\"noopener\">\n            <span>Solve Problem</span>\n            <img src=\"https://takeuforward-content-images.s3.ap-south-1.amazonaws.com/content/Group-11-5-pFOq-8ga\"\n                alt=\"code-studio\">\n        </a>\n    </div>\n    <!--<div class=\"problem-buttons\">\n         Add Problem Link inside href \n        <a href=\"\" target=\"_blank\" rel=\"noopener\">\n            <span>Solve Problem</span>\n            <img src=\"https://cdn.iconscout.com/icon/free/png-256/free-leetcode-3521542-2944960.png?f=webp\"\n                alt=\"leetcode\">\n        </a>\n    </div>-->\n</div>\n\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\n        yourself first. </em></p>\n\n\n<div id=\"brute-force-approach\">\n    <details>\n        <summary class=\"main-summary\">\n            <span>\n                Optimal Approach \n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                </path>\n            </svg>\n        </summary>\n        <div class=\"common-drops\">\n            <details class=\"secondary-details\" open=\"\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Algorithm / Intuition\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <div class=\"approach-algorithm\">\n                    <!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n                    <p>To perform a level-order traversal on a binary tree and store the nodes\u2019 values in a 2D vector representing each level, start by initialising an empty queue to hold the level by level nodes.Enqueue the root node into the queue and traverse until the queue is empty. For each level, track the number of nodes in that level, creating a temporary vector to deque and store them. At each node, store its value in the temporary vector and enqueue its left and right children if they exist.Once all the nodes at a level are processed add this 1D temporary vector to the final 2D vector, representing that level. This process repeats until all levels are traversed. Finally, return this 2D vector containing the level order traversal of the binary tree.</p>\n                               \n                    \n                    <p><strong>Algorithm:</strong></p>\n                    <p><strong>Step 1:</strong> nitialise an empty queue data structure to store the nodes during traversal. Create a 2D array or a vector of a vector to store the level order traversal. If the tree is empty, return this empty 2D vector.</p>\n                    <p><figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/level-order-image5-hAlfLDWh\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure></p>\n                    <p><strong>Step 2:</strong> Enqueue the root node ie. Add the root node of the binary tree to the queue.</p>\n                    <p><figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/level-order-image6-elxiCgwB\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure></p>\n                    <p><strong>Step 3:</strong> <p>Iterate until the queue is empty:<ol><li>Get the current size of the queue. This size indicates the number of nodes at the current level.</li><li>Create a vector \u2018level\u2019 to store the nodes at the current level.</li><li>Iterate through \u2018size\u2019 number of nodes at the current level:<ol><li>Pop the front node from the queue.</li><li>Store the node\u2019s value in the level vector.</li><li>Enqueue the left and right child nodes of the current node (if they exist) into the queue.</li></ol><li>After processing all the nodes at the current level, add the \u2018level\u2019 vector to the \u2018ans\u2019 2D vector, representing the current level.</li></ol></p> </p>\n                    <p><figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/level-order-image7-RtoPWzLj\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure></p>\n                    <p><strong>Step 4:</strong> Once the traversal loop completes ie. all levels have been processed, return the \u2018ans\u2019 2D vector containing the level-order traversal.</p>\n                    \n                </div>\n            </details>\n            <details class=\"code-section secondary-details\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Code\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <div class=\"code-tabs\">\n                    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n                    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n                    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n                    <button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n                    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\"\n                        xmlns=\"http://www.w3.org/2000/svg\">\n                        <path\n                            d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n                        </path>\n                    </svg>\n                </div>\n                <div class=\"code-content\">\n                    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;queue&gt; \n\nusing namespace std;\n\n// TreeNode struct represents\n// a node in a binary tree\nstruct TreeNode {\n    int val; \n    TreeNode* left; \n    TreeNode* right;\n\n    // Default constructor for TreeNode\n    TreeNode() : val(0), left(nullptr), right(nullptr) {}\n\n    // Constructor with a value\n    // parameter for TreeNode\n    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n\n    // Constructor with value, left\n    // child, and right child\n    // parameters for TreeNode\n    TreeNode(int x, TreeNode* left, TreeNode* right) : val(x), left(left), right(right) {}\n};\n\n\nclass Solution {\npublic:\n    // Function to perform level-order\n    // traversal of a binary tree\n    vector&lt;vector&lt;int&gt;&gt; levelOrder(TreeNode* root) {\n        // Create a 2D vector to store levels\n        vector&lt;vector&lt;int&gt;&gt; ans; \n        if (root == nullptr) {\n            // If the tree is empty,\n            // return an empty vector\n            return ans; \n        }\n        \n        // Create a queue to store nodes\n        // for level-order traversal\n        queue&lt;TreeNode*&gt; q; \n        // Push the root node to the queue\n        q.push(root); \n\n        while (!q.empty()) {\n            // Get the size of the current level\n            int size = q.size(); \n            // Create a vector to store\n            // nodes at the current level\n            vector&lt;int&gt; level; \n\n            for (int i = 0; i &lt; size; i++) {\n                // Get the front node in the queue\n                TreeNode* node = q.front(); \n                // Remove the front node from the queue\n                q.pop(); \n                // Store the node value\n                // in the current level vector\n                level.push_back(node-&gt;val); \n\n                // Enqueue the child nodes if they exist\n                if (node-&gt;left != nullptr) {\n                    q.push(node-&gt;left);\n                }\n                if (node-&gt;right != nullptr) {\n                    q.push(node-&gt;right);\n                }\n            }\n            // Store the current level\n            // in the answer vector\n            ans.push_back(level); \n        }\n        // Return the level-order\n        // traversal of the tree\n        return ans; \n    }\n};\n\n// Function to print\n// the elements of a vector\nvoid printVector(const vector&lt;int&gt;&amp; vec) {\n    // Iterate through the\n    // vector and print each element\n    for (int num : vec) {\n        cout &lt;&lt; num &lt;&lt; &quot; &quot;;\n    }\n    cout &lt;&lt; endl;\n}\n\n// Main function\nint main() {\n    // Creating a sample binary tree\n    TreeNode* root = new TreeNode(1);\n    root-&gt;left = new TreeNode(2);\n    root-&gt;right = new TreeNode(3);\n    root-&gt;left-&gt;left = new TreeNode(4);\n    root-&gt;left-&gt;right = new TreeNode(5);\n\n    // Create an instance\n    // of the Solution class\n    Solution solution; \n    // Perform level-order traversal\n    vector&lt;vector&lt;int&gt;&gt; result = solution.levelOrder(root); \n\n    cout &lt;&lt; &quot;Level Order Traversal of Tree: &quot;&lt;&lt; endl;\n\n    // Printing the level order traversal result\n    for (const vector&lt;int&gt;&amp; level : result) {\n        printVector(level);\n    }\n\n    return 0;\n}\n                            </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block \" data-lang=\"java\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\n// TreeNode class represents\n// a node in a binary tree\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    // Default constructor for TreeNode\n    TreeNode() {\n        this.val = 0;\n        this.left = null;\n        this.right = null;\n    }\n\n    // Constructor with a value\n    // parameter for TreeNode\n    TreeNode(int x) {\n        this.val = x;\n        this.left = null;\n        this.right = null;\n    }\n\n    // Constructor with value, left\n    // child, and right child\n    // parameters for TreeNode\n    TreeNode(int x, TreeNode left, TreeNode right) {\n        this.val = x;\n        this.left = left;\n        this.right = right;\n    }\n}\n\nclass Solution {\n    // Function to perform level-order\n    // traversal of a binary tree\n    public List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) {\n        // Create a list of lists to store levels\n        List&lt;List&lt;Integer&gt;&gt; ans = new ArrayList&lt;&gt;();\n        if (root == null) {\n            // If the tree is empty,\n            // return an empty list\n            return ans;\n        }\n\n        // Create a queue to store nodes\n        // for level-order traversal\n        Queue&lt;TreeNode&gt; q = new LinkedList&lt;&gt;();\n        // Push the root node to the queue\n        q.add(root);\n\n        while (!q.isEmpty()) {\n            // Get the size of the current level\n            int size = q.size();\n            // Create a list to store\n            // nodes at the current level\n            List&lt;Integer&gt; level = new ArrayList&lt;&gt;();\n\n            for (int i = 0; i &lt; size; i++) {\n                // Get the front node in the queue\n                TreeNode node = q.poll();\n                // Store the node value\n                // in the current level list\n                level.add(node.val);\n\n                // Enqueue the child nodes if they exist\n                if (node.left != null) {\n                    q.add(node.left);\n                }\n                if (node.right != null) {\n                    q.add(node.right);\n                }\n            }\n            // Store the current level\n            // in the answer list\n            ans.add(level);\n        }\n        // Return the level-order\n        // traversal of the tree\n        return ans;\n    }\n}\n\npublic class Main {\n    // Function to print\n    // the elements of a list\n    static void printList(List&lt;Integer&gt; list) {\n        // Iterate through the\n        // list and print each element\n        for (int num : list) {\n            System.out.print(num + &quot; &quot;);\n        }\n        System.out.println();\n    }\n\n    // Main function\n    public static void main(String[] args) {\n        // Creating a sample binary tree\n        TreeNode root = new TreeNode(1);\n        root.left = new TreeNode(2);\n        root.right = new TreeNode(3);\n        root.left.left = new TreeNode(4);\n        root.left.right = new TreeNode(5);\n\n        // Create an instance\n        // of the Solution class\n        Solution solution = new Solution();\n        // Perform level-order traversal\n        List&lt;List&lt;Integer&gt;&gt; result = solution.levelOrder(root);\n\n        System.out.println(&quot;Level Order Traversal of Tree:&quot;);\n\n        // Printing the level order traversal result\n        for (List&lt;Integer&gt; level : result) {\n            printList(level);\n        }\n    }\n}\n                            </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block\" data-lang=\"python\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"python\" class=\"language-python\">\nfrom collections import deque\n\n# TreeNode class represents\n# a node in a binary tree\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def levelOrder(self, root):\n        # Create a list to store levels\n        ans = []\n        if not root:\n            # If the tree is empty,\n            # return an empty list\n            return ans\n\n        # Create a queue to store nodes\n        # for level-order traversal\n        q = deque()\n        # Enqueue the root node\n        q.append(root)\n\n        while q:\n            # Get the size of the current level\n            size = len(q)\n            # Create a list to store\n            # nodes at the current level\n            level = []\n\n            for i in range(size):\n                # Get the front node in the queue\n                node = q.popleft()\n                # Store the node value\n                # in the current level list\n                level.append(node.val)\n\n                # Enqueue the child nodes if they exist\n                if node.left:\n                    q.append(node.left)\n                if node.right:\n                    q.append(node.right)\n\n            # Store the current level\n            # in the answer list\n            ans.append(level)\n        # Return the level-order\n        # traversal of the tree\n        return ans\n\n# Function to print\n# the elements of a list\ndef printList(lst):\n    # Iterate through the\n    # list and print each element\n    for num in lst:\n        print(num, end=&quot; &quot;)\n    print()\n\n# Main function\nif __name__ == &quot;__main__&quot;:\n    # Creating a sample binary tree\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n\n    # Create an instance\n    # of the Solution class\n    solution = Solution()\n    # Perform level-order traversal\n    result = solution.levelOrder(root)\n\n    print(&quot;Level Order Traversal of Tree:&quot;)\n\n    # Printing the level order traversal result\n    for level in result:\n        printList(level)\n                           </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block\" data-lang=\"javascript\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"javascript\" class=\"language-javascript\">\n// TreeNode class represents\n// a node in a binary tree\nclass TreeNode {\n    constructor(val = 0, left = null, right = null) {\n        this.val = val;\n        this.left = left;\n        this.right = right;\n    }\n}\n\nclass Solution {\n    // Function to perform level-order\n    // traversal of a binary tree\n    levelOrder(root) {\n        // Create an array to store levels\n        let ans = [];\n        if (!root) {\n            // If the tree is empty,\n            // return an empty array\n            return ans;\n        }\n\n        // Create a queue to store\n        // nodes for level-order traversal\n        let q = [];\n        // Push the root node to the queue\n        q.push(root);\n\n        while (q.length &gt; 0) {\n            // Get the size of the current level\n            let size = q.length;\n            // Create an array to store \n            // nodes at the current level\n            let level = [];\n\n            for (let i = 0; i &lt; size; i++) {\n                // Get the front node in the queue\n                let node = q.shift();\n                // Store the node value\n                // in the current level array\n                level.push(node.val);\n\n                // Enqueue the child\n                // nodes if they exist\n                if (node.left !== null) {\n                    q.push(node.left);\n                }\n                if (node.right !== null) {\n                    q.push(node.right);\n                }\n            }\n            // Store the current level\n            // in the answer array\n            ans.push(level);\n        }\n        // Return the level-order\n        // traversal of the tree\n        return ans;\n    }\n}\n\n// Function to print the\n// elements of an array\nfunction printArray(arr) {\n    // Iterate through the\n    // array and print each element\n    for (let num of arr) {\n        console.log(num + &quot; &quot;);\n    }\n    console.log(&quot;\\n&quot;);\n}\n\n// Creating a sample binary tree\nlet root = new TreeNode(1);\nroot.left = new TreeNode(2);\nroot.right = new TreeNode(3);\nroot.left.left = new TreeNode(4);\nroot.left.right = new TreeNode(5);\n\n// Create an instance of the Solution class\nlet solution = new Solution();\n// Perform level-order traversal\nlet result = solution.levelOrder(root);\n\nconsole.log(&quot;Level Order Traversal of Tree: \\n&quot;);\n\n// Printing the level order traversal result\nfor (let level of result) {\n    printArray(level);\n}\n                            </code>\n                        </pre>\n                    </div>\n                    <p>\n                        <!-- Insert Output of Brute Force Here -->\n                       <strong>Output</strong> Level Order Traversal of Tree: \n                       <p>1</p>\n                       <p>2 3</p>\n                       <p>4 5</p>\n\n                    </p>\n                </div>\n            </details>\n            <details class=\"secondary-details\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Complexity Analysis\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <p>\n                    <!-- Insert Time and Space Complexity  Here -->\n                    <p><strong>Time Complexity: O(N)</strong>  where N is the number of nodes in the binary tree. Each node of the binary tree is enqueued and dequeued exactly once, hence all nodes need to be processed and visited. Processing each node takes constant time operations which contributes to the overall linear time complexity.</p>\n\t\t\t\t\t<p><strong>Space Complexity: O(N)</strong> where N is the number of nodes in the binary tree. In the worst case, the queue has to hold all the nodes of the last level of the binary tree, the last level could at most hold N/2 nodes hence the space complexity of the queue is proportional to O(N).The resultant vector answer also stores the values of the nodes level by level and hence contains all the nodes of the tree contributing to O(N) space as well.</p>\n\n                </p>\n            </details>\n        </div>\n    </details>\n</div>\n\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n    <details>\n        <summary class=\"main-summary\">\n            <span>\n                Video Explanation\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"yt-video-wrapper\">\n            <!-- Insert iframe embed Link of Youtube Video-->\n            <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/EoAsWbO7sqg?si=Mo-bvtiE0zyqc2SU\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n        </div>\n    </details>\n</div>\n\n<blockquote class=\"wp-block-quote\">\n    Special thanks to <strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268\">Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,<strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\"> please check out this article</a></strong>\n</blockquote>\n\n<script>\n\n    const codeSections = document.querySelectorAll('.code-section');\n\n    // Get last selected language from localStorage or set default value\n    let lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp';\n\n    codeSections.forEach((section, sectionIndex) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n        const copyBtn = section.querySelector('.copy-btn');\n\n        codeTabs.forEach((tab) => {\n            tab.addEventListener('click', () => {\n                codeTabs.forEach((t) => {\n                    t.classList.remove('dsa_article_code_active');\n                });\n                tab.classList.add('dsa_article_code_active');\n\n                const lang = tab.dataset.lang;\n                const activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                codeBlocks.forEach((block) => {\n                    if (block === activeBlock) {\n                        block.classList.add('dsa_article_code_active');\n                    } else {\n                        block.classList.remove('dsa_article_code_active');\n                    }\n                });\n\n                // Update last selected language for all sections and store in localStorage\n                lastSelectedLanguage = lang;\n                localStorage.setItem('lastSelectedLanguage', lang);\n                codeSections.forEach((otherSection, otherIndex) => {\n                    if (otherIndex !== sectionIndex) {\n                        const otherTabs = otherSection.querySelectorAll('.code-tab');\n                        otherTabs.forEach((otherTab) => {\n                            if (otherTab.dataset.lang === lang) {\n                                otherTab.classList.add('dsa_article_code_active');\n                            } else {\n                                otherTab.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                        const otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                        const otherCodeBlocks = otherSection.querySelectorAll('.code-block');\n                        otherCodeBlocks.forEach((block) => {\n                            if (block === otherActiveBlock) {\n                                block.classList.add('dsa_article_code_active');\n                            } else {\n                                block.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                    }\n                });\n            });\n        });\n\n        // Handle copy button click event\n        copyBtn.addEventListener('click', () => {\n            const activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\n            navigator.clipboard.writeText(activeBlock.innerText);\n            copyBtn.classList.add('dsa_article_code_active');\n            setTimeout(() => {\n                copyBtn.classList.remove('dsa_article_code_active');\n            }, 1000);\n        });\n    });\n\n    // Set initial state of the tabs\n    codeSections.forEach((section) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n\n        codeTabs.forEach((tab) => {\n            if (tab.dataset.lang === lastSelectedLanguage) {\n                tab.classList.add('dsa_article_code_active');\n            } else {\n                tab.classList.remove('dsa_article_code_active');\n            }\n        });\n\n        codeBlocks.forEach((block) => {\n            if (block.dataset.lang === lastSelectedLanguage) {\n                block.classList.add('dsa_article_code_active');\n            } else {\n                block.classList.remove('dsa_article_code_active');\n            }\n        });\n    });\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>"
}