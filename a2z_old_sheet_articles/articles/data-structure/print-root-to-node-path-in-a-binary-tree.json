{
    "dislikes": 16,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:09:23 GMT+0530 (India Standard Time)",
    "slug": "print-root-to-node-path-in-a-binary-tree",
    "aid": "1473",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/print-root-to-note-path-in-bt",
    "title": "Print Root to Node Path in a Binary Tree",
    "topics": [
        {
            "topic-id": "binary-tree",
            "topic-title": "Binary Tree"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "recursion",
            "topic-title": "Recursion"
        }
    ],
    "likes": 123,
    "category_tag": "data-structure",
    "preview": "Problem Statement: Given a Binary Tree and a reference to a root belonging to it. Return the path from the root node to the given leaf node. 1. No two nodes in the tree have the same data value. 2....",
    "content": "<p><strong>Problem Statement: </strong> Given a Binary Tree and a reference to a root belonging to it. Return the path from the root node to the given leaf node.\n<ol><li>No two nodes in the tree have the same data value.</li><li>It is assured that the given node is present and a path always exists.</li></ol></p>\n\n<div id=\"article_examples\">\n    <details class=\"article_example_details\">\n        <summary class=\"article_example_summary\">\n            <span><strong>\n                    Examples\n                </strong>\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"atricle_example_content\">\n            <pre class=\"wp-block-preformatted\">\n                <span><strong>Example 1:</strong></span>\n\t\t\t\t<span><strong>Input:</strong>Binary Tree: 1 2 3 4 5 -1 -1 -1 -1, Node: 7\n\t\t\t\t</span>\n\t\t\t\t<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/root-node-path-image1-cRRwTYJZ\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n\t\t\t\t<span><strong>Output:</strong>[1, 2, 5, 7]</span>\n\t\t\t\t<span><strong>Explanation: </strong></span>\n\t\t\t\t<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/root-node-path-image2-7QEc3YSW\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n\t\t\t\t<span><strong>Example 2:</strong></span>\n\t\t\t\t<span><strong>Input:</strong>Binary Tree: [1, 2, 3, -1, -1, 4, 5, -1, -1, 6]\n\t\t\t\t</span>\n\t\t\t\t<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/root-node-path-image3-Z63URoIs\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n\t\t\t\t<span><strong>Output :</strong> [1, 3, 5, 6]</span>\n\t\t\t\t<span><strong>Explanation: </strong></span>\n\t\t\t\t<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/root-node-path-image4-US2i_mcA\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n\t\t\t\t\n            </pre>\n        </div>\n    </details>\n</div>\n\n<!-- This is Practice Section-->\n<div class=\"practice\">\n    <span><strong>Practice: </strong></span>\n    <div class=\"problem-buttons\">\n\n        <!-- Add Problem Link inside href -->\n        <a href=\"https://www.codingninjas.com/studio/problems/all-root-to-leaf-paths-in-binary-tree._983599?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf\" target=\"_blank\" rel=\"noopener\">\n            <span>Solve Problem</span>\n            <img src=\"https://takeuforward-content-images.s3.ap-south-1.amazonaws.com/content/Group-11-5-pFOq-8ga\"\n                alt=\"code-studio\">\n        </a>\n    </div>\n    <!--<div class=\"problem-buttons\">\n         Add Problem Link inside href \n        <a href=\"\" target=\"_blank\" rel=\"noopener\">\n            <span>Solve Problem</span>\n            <img src=\"https://cdn.iconscout.com/icon/free/png-256/free-leetcode-3521542-2944960.png?f=webp\"\n                alt=\"leetcode\">\n        </a>\n    </div>-->\n</div>\n\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\n        yourself first. </em></p>\n\n\n<div id=\"brute-force-approach\">\n    <details>\n        <summary class=\"main-summary\">\n            <span>\n                Optimal Approach \n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                </path>\n            </svg>\n        </summary>\n        <div class=\"common-drops\">\n            <details class=\"secondary-details\" open=\"\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Algorithm / Intuition\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <div class=\"approach-algorithm\">\n                    <!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n                    <p>To find the path from the root to the given node in the tree we use a Depth-First Traversal. We initialise a vector to store the current path and recursively travel to each node in the tree. At each step, we check if the current node is null, if it is we return false and if the data value of the current node is equal to the given node, we return true signifying the end of the traversal search.</p>\n                    <p><figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/root-node-path-image5-lAiyYynH\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure></p>\n                    <p>During the recursive calls, we append the current node\u2019s data value to the vector and explore the left and right children. We backtrack if the target value is not found as the children return \u2018false\u2019 and remove the last node from the path vector. In the end, we return the vector containing the path from the root to the given node.</p>\n                    \n                    \n                    <p><strong>Algorithm:</strong></p>\n                    <p><strong>Step 1:</strong>Initialise an empty vector to store the current path.</p>\n                    \n                    <p><strong>Step 2:</strong> Initialise a recursive function to explore the Binary Tree using Depth First Search. Starting from the root node, we traverse the tree using the inorder sequence. </p>\n                    \n                    <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/root-node-path-image6-g_IsNRQJ\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n                    <p><strong>Base Case:</strong> If the current node is null then we return false, indicating the end of the path.\n                    If the current node\u2019s data value is equal to the given node then we return the true, signifying the completion of the path.</p>\n                   \n\n                    <p><strong>Step 3: Recursive Calls: </strong>\n                    <ol><li>During the recursive exploration, the recursive function appends the current node's data value to the vector arr.</li><li>It checks if the current node's value matches the target value x. If it does, the function returns true, indicating the completion of the path to the target node.</li><li>We then call the function on the left and right children of the current node.</li></ol></p>\n                    <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/root-node-path-image7-iZphU4c6\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n                                                       \n                    <p><strong>Step 4: Backtracking: </strong>\n                    <ol><li>If the target value x is not found in the current path, the function backtracks by removing the last node from the path vector arr.</li><li>This means the current node is not part of the valid path from the root to the given node ensuring that the algorithm explores all possible paths and doesn't miss any valid routes to the target node.</li></ol></p>\n                    <p><strong>Step 5:</strong> In the end, we return the vector containing the path from the root to the given node.</p>\n                    \n                </div>\n            </details>\n            <details class=\"code-section secondary-details\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Code\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <div class=\"code-tabs\">\n                    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n                    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n                    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n                    <button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n                    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\"\n                        xmlns=\"http://www.w3.org/2000/svg\">\n                        <path\n                            d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n                        </path>\n                    </svg>\n                </div>\n                <div class=\"code-content\">\n                    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;iostream&gt;\n#include &lt;unordered_map&gt;\n#include &lt;vector&gt;\n#include &lt;queue&gt;\n\nusing namespace std;\n\n// TreeNode structure\nstruct TreeNode {\n    int val;\n    TreeNode *left;\n    TreeNode *right;\n    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n};\n\n\nclass Solution {\npublic:\n    // Function to find the path from the\n    // root to a given node with value 'x'\n    bool getPath(TreeNode* root, vector&lt;int&gt;&amp; arr, int x) {\n        // Base case: If the current\n        // node is null, return false\n        if (!root) {\n            return false;\n        }\n\n        // Add the current node's\n        // value to the path vector\n        arr.push_back(root-&gt;val);\n\n        // If the current node's value is equal\n        // to the target value 'x', return true\n        if (root-&gt;val == x) {\n            return true;\n        }\n\n        // Recursively search for the target value\n        // 'x' in the left and right subtrees\n        if (getPath(root-&gt;left, arr, x)\n            || getPath(root-&gt;right, arr, x)) {\n            return true;\n        }\n\n        // If the target value 'x' is not found\n        // in the current path, backtrack\n        arr.pop_back();\n        return false;\n    }\n\n    // Function to find and return the path from\n    // the root to a given node with value 'B'\n    vector&lt;int&gt; solve(TreeNode* A, int B) {\n        // Initialize an empty\n        // vector to store the path\n        vector&lt;int&gt; arr;\n\n        // If the root node is null,\n        // return the empty path vector\n        if (A == NULL) {\n            return arr;\n        }\n\n        // Call the getPath function to find\n        // the path to the node with value 'B'\n        getPath(A, arr, B);\n\n        // Return the path vector\n        return arr;\n    }\n};\n\nint main() {\n    TreeNode* root = new TreeNode(3);\n    root-&gt;left = new TreeNode(5);\n    root-&gt;right = new TreeNode(1);\n    root-&gt;left-&gt;left = new TreeNode(6);\n    root-&gt;left-&gt;right = new TreeNode(2);\n    root-&gt;right-&gt;left = new TreeNode(0);\n    root-&gt;right-&gt;right = new TreeNode(8);\n    root-&gt;left-&gt;right-&gt;left = new TreeNode(7);\n    root-&gt;left-&gt;right-&gt;right = new TreeNode(4);\n\n    Solution sol;\n\n    int targetLeafValue = 7;\n\n    vector&lt;int&gt; path = sol.solve(root, targetLeafValue);\n\n    cout &lt;&lt; &quot;Path from root to leaf with value &quot; &lt;&lt;\n        targetLeafValue &lt;&lt; &quot;: &quot;;\n    for (int i = 0; i &lt; path.size(); ++i) {\n        cout &lt;&lt; path[i];\n        if (i &lt; path.size() - 1) {\n            cout &lt;&lt; &quot; -&gt; &quot;;\n        }\n    }\n\n    return 0;\n}\n                            </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block \" data-lang=\"java\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"java\" class=\"language-java\">\nimport java.util.ArrayList;\nimport java.util.List;\n\n// TreeNode structure\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    public TreeNode(int x) {\n        val = x;\n        left = null;\n        right = null;\n    }\n}\n\npublic class Solution {\n    // Function to find the path from the\n    // root to a given node with value 'x'\n    public boolean getPath(TreeNode root, List&lt;Integer&gt; arr, int x) {\n        // Base case: If the current\n        // node is null, return false\n        if (root == null) {\n            return false;\n        }\n\n        // Add the current node's\n        // value to the path list\n        arr.add(root.val);\n\n        // If the current node's value is equal\n        // to the target value 'x', return true\n        if (root.val == x) {\n            return true;\n        }\n\n        // Recursively search for the target value\n        // 'x' in the left and right subtrees\n        if (getPath(root.left, arr, x) || getPath(root.right, arr, x)) {\n            return true;\n        }\n\n        // If the target value 'x' is not found\n        // in the current path, backtrack\n        arr.remove(arr.size() - 1);\n        return false;\n    }\n\n    // Function to find and return the path from\n    // the root to a given node with value 'B'\n    public List&lt;Integer&gt; solve(TreeNode A, int B) {\n        // Initialize an empty\n        // list to store the path\n        List&lt;Integer&gt; arr = new ArrayList&lt;&gt;();\n\n        // If the root node is null,\n        // return the empty path list\n        if (A == null) {\n            return arr;\n        }\n\n        // Call the getPath function to find\n        // the path to the node with value 'B'\n        getPath(A, arr, B);\n\n        // Return the path list\n        return arr;\n    }\n\n    public static void main(String[] args) {\n        TreeNode root = new TreeNode(3);\n        root.left = new TreeNode(5);\n        root.right = new TreeNode(1);\n        root.left.left = new TreeNode(6);\n        root.left.right = new TreeNode(2);\n        root.right.left = new TreeNode(0);\n        root.right.right = new TreeNode(8);\n        root.left.right.left = new TreeNode(7);\n        root.left.right.right = new TreeNode(4);\n\n        Solution sol = new Solution();\n\n        int targetLeafValue = 7;\n\n        List&lt;Integer&gt; path = sol.solve(root, targetLeafValue);\n\n        System.out.print(&quot;Path from root to leaf with value &quot; +\n                targetLeafValue + &quot;: &quot;);\n        for (int i = 0; i &lt; path.size(); ++i) {\n            System.out.print(path.get(i));\n            if (i &lt; path.size() - 1) {\n                System.out.print(&quot; -&gt; &quot;);\n            }\n        }\n    }\n}\n                            </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block\" data-lang=\"python\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"python\" class=\"language-python\">\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def getPath(self, root, arr, x):\n        &quot;&quot;&quot;\n        Function to find the path from the\n        root to a given node with value 'x'\n        &quot;&quot;&quot;\n        # Base case: If the current\n        # node is None, return False\n        if not root:\n            return False\n\n        # Add the current node's\n        # value to the path list\n        arr.append(root.val)\n\n        # If the current node's value is equal\n        # to the target value 'x', return True\n        if root.val == x:\n            return True\n\n        # Recursively search for the target value\n        # 'x' in the left and right subtrees\n        if self.getPath(root.left, arr, x) or self.getPath(root.right, arr, x):\n            return True\n\n        # If the target value 'x' is not found\n        # in the current path, backtrack\n        arr.pop()\n        return False\n\n    def solve(self, A, B):\n        &quot;&quot;&quot;\n        Function to find and return the path from\n        the root to a given node with value 'B'\n        &quot;&quot;&quot;\n        # Initialize an empty\n        # list to store the path\n        arr = []\n\n        # If the root node is None,\n        # return the empty path list\n        if not A:\n            return arr\n\n        # Call the getPath function to find\n        # the path to the node with value 'B'\n        self.getPath(A, arr, B)\n\n        # Return the path list\n        return arr\n\nif __name__ == &quot;__main__&quot;:\n    root = TreeNode(3)\n    root.left = TreeNode(5)\n    root.right = TreeNode(1)\n    root.left.left = TreeNode(6)\n    root.left.right = TreeNode(2)\n    root.right.left = TreeNode(0)\n    root.right.right = TreeNode(8)\n    root.left.right.left = TreeNode(7)\n    root.left.right.right = TreeNode(4)\n\n    sol = Solution()\n\n    target_leaf_value = 7\n\n    path = sol.solve(root, target_leaf_value)\n\n    print(f&quot;Path from root to leaf with value {target_leaf_value}: &quot;, end=&quot;&quot;)\n    for i in range(len(path)):\n        print(path[i], end=&quot;&quot;)\n        if i &lt; len(path) - 1:\n            print(&quot; -&gt; &quot;, end=&quot;&quot;)\n                           </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block\" data-lang=\"javascript\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"javascript\" class=\"language-javascript\">\n// TreeNode structure\nclass TreeNode {\n    constructor(x) {\n        this.val = x;\n        this.left = null;\n        this.right = null;\n    }\n}\n\nclass Solution {\n    // Function to find the path from the\n    // root to a given node with value 'x'\n    getPath(root, arr, x) {\n        // Base case: If the current\n        // node is null, return false\n        if (!root) {\n            return false;\n        }\n\n        // Add the current node's\n        // value to the path array\n        arr.push(root.val);\n\n        // If the current node's value is equal\n        // to the target value 'x', return true\n        if (root.val === x) {\n            return true;\n        }\n\n        // Recursively search for the target value\n        // 'x' in the left and right subtrees\n        if (this.getPath(root.left, arr, x) ||\n            this.getPath(root.right, arr, x)) {\n            return true;\n        }\n\n        // If the target value 'x' is not found\n        // in the current path, backtrack\n        arr.pop();\n        return false;\n    }\n\n    // Function to find and return the path from\n    // the root to a given node with value 'B'\n    solve(A, B) {\n        // Initialize an empty\n        // array to store the path\n        const arr = [];\n\n        // If the root node is null,\n        // return the empty path array\n        if (A === null) {\n            return arr;\n        }\n\n        // Call the getPath function to find\n        // the path to the node with value 'B'\n        this.getPath(A, arr, B);\n\n        // Return the path array\n        return arr;\n    }\n}\n\n// Main function\nfunction main() {\n    const root = new TreeNode(3);\n    root.left = new TreeNode(5);\n    root.right = new TreeNode(1);\n    root.left.left = new TreeNode(6);\n    root.left.right = new TreeNode(2);\n    root.right.left = new TreeNode(0);\n    root.right.right = new TreeNode(8);\n    root.left.right.left = new TreeNode(7);\n    root.left.right.right = new TreeNode(4);\n\n    const sol = new Solution();\n\n    const targetLeafValue = 7;\n\n    const path = sol.solve(root, targetLeafValue);\n\n    console.log(&quot;Path from root to leaf with value &quot; +\n        targetLeafValue + &quot;: &quot; + path.join(&quot; -&gt; &quot;));\n}\n\n// Run the main function\nmain();\n\n                            </code>\n                        </pre>\n                    </div>\n                    <p>\n                       <strong>Output</strong> \n                      \tPath from root to leaf with value 7: 3 -> 5 -> 2 -> 7\n                    </p>\n                </div>\n            </details>\n            <details class=\"secondary-details\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Complexity Analysis\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <p>\n                    <!-- Insert Time and Space Complexity  Here -->\n                    <p><strong>Time Complexity: O(N)</strong>  where N is the number of nodes in the binary tree as each node of the binary tree is visited exactly once in the inorder traversal.</p>\n\n\t\t\t\t\t<p><strong>Space Complexity: O(N)</strong>  awhere N is the number of nodes in the binary tree. This is because the stack can potentially hold all nodes in the tree when dealing with a skewed tree (all nodes have only one child), consuming space proportional to the number of nodes.\n\t\t\t\t\t<ol><li>O(H): In the average case or for a balanced tree, the maximum number of nodes that could be in the stack at any given time would be roughly the height of the tree hence O(log2N).</li></ol> </p>\n\n                </p>\n            </details>\n        </div>\n    </details>\n</div>\n\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n    <details>\n        <summary class=\"main-summary\">\n            <span>\n                Video Explanation\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"yt-video-wrapper\">\n            <!-- Insert iframe embed Link of Youtube Video-->\n          <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fmflMqVOC7k?si=ixQFFUT4nmBsiOU_\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n        </div>\n    </details>\n</div>\n\n<blockquote class=\"wp-block-quote\">\n    Special thanks to <strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268\">Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,<strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\"> please check out this article</a></strong>\n</blockquote>\n\n<script>\n\n    const codeSections = document.querySelectorAll('.code-section');\n\n    // Get last selected language from localStorage or set default value\n    let lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp';\n\n    codeSections.forEach((section, sectionIndex) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n        const copyBtn = section.querySelector('.copy-btn');\n\n        codeTabs.forEach((tab) => {\n            tab.addEventListener('click', () => {\n                codeTabs.forEach((t) => {\n                    t.classList.remove('dsa_article_code_active');\n                });\n                tab.classList.add('dsa_article_code_active');\n\n                const lang = tab.dataset.lang;\n                const activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                codeBlocks.forEach((block) => {\n                    if (block === activeBlock) {\n                        block.classList.add('dsa_article_code_active');\n                    } else {\n                        block.classList.remove('dsa_article_code_active');\n                    }\n                });\n\n                // Update last selected language for all sections and store in localStorage\n                lastSelectedLanguage = lang;\n                localStorage.setItem('lastSelectedLanguage', lang);\n                codeSections.forEach((otherSection, otherIndex) => {\n                    if (otherIndex !== sectionIndex) {\n                        const otherTabs = otherSection.querySelectorAll('.code-tab');\n                        otherTabs.forEach((otherTab) => {\n                            if (otherTab.dataset.lang === lang) {\n                                otherTab.classList.add('dsa_article_code_active');\n                            } else {\n                                otherTab.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                        const otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                        const otherCodeBlocks = otherSection.querySelectorAll('.code-block');\n                        otherCodeBlocks.forEach((block) => {\n                            if (block === otherActiveBlock) {\n                                block.classList.add('dsa_article_code_active');\n                            } else {\n                                block.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                    }\n                });\n            });\n        });\n\n        // Handle copy button click event\n        copyBtn.addEventListener('click', () => {\n            const activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\n            navigator.clipboard.writeText(activeBlock.innerText);\n            copyBtn.classList.add('dsa_article_code_active');\n            setTimeout(() => {\n                copyBtn.classList.remove('dsa_article_code_active');\n            }, 1000);\n        });\n    });\n\n    // Set initial state of the tabs\n    codeSections.forEach((section) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n\n        codeTabs.forEach((tab) => {\n            if (tab.dataset.lang === lastSelectedLanguage) {\n                tab.classList.add('dsa_article_code_active');\n            } else {\n                tab.classList.remove('dsa_article_code_active');\n            }\n        });\n\n        codeBlocks.forEach((block) => {\n            if (block.dataset.lang === lastSelectedLanguage) {\n                block.classList.add('dsa_article_code_active');\n            } else {\n                block.classList.remove('dsa_article_code_active');\n            }\n        });\n    });\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>"
}