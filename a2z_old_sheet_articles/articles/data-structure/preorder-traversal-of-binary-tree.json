{
    "dislikes": 4,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:09:14 GMT+0530 (India Standard Time)",
    "slug": "preorder-traversal-of-binary-tree",
    "aid": "1428",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/preorder-traversal",
    "title": "Preorder Traversal of Binary Tree",
    "topics": [
        {
            "topic-id": "binary-tree",
            "topic-title": "Binary Tree"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "recursion",
            "topic-title": "Recursion"
        }
    ],
    "category_tag": "data-structure",
    "likes": 117,
    "preview": "Problem Statement: Given the root of a Binary Tree, write a recursive function that returns an array containing the preorder traversal of the tree. Examples Example 1: Input:Binary Tree: 4 2 5 3 -1...",
    "content": "<p><strong>Problem Statement: </strong>Given the root of a Binary Tree, write a recursive function that returns an array containing the preorder traversal of the tree. </p>\n\n\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n    <details class=\"article_example_details\">\n        <summary class=\"article_example_summary\">\n            <span><strong>\n                    Examples\n                </strong>\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"atricle_example_content\">\n            <pre class=\"wp-block-preformatted\">\n                <!-- Insert New Examples Here -->\n                <p><strong>Example 1:</strong></p>\n                <p><strong>Input:</strong>Binary Tree: 4 2 5 3 -1 7 6 -1 9 -1 -1 8 -1 1</p>\n                <p><figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/preorder-binarytree-image1-aZjIGpQh\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure></p>\n                <p><strong>Output:</strong> [4 2 3 9 1 5 7 6 8]</p>\n                <p><strong>Explanation: </strong>We traverse the binary tree in the order of Root, Left then Right recursively resulting in the following traversal:</p>\n                <p><figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/preorder-binarytree-image2-tOnoQoXJ\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure></p>\n\n                <p><strong>Example 2:</strong></p>\n                <p><strong>Input:</strong>Binary Tree: 1 2 3 4 5 6 7 -1 -1 8 -1 -1 -1 9 10</p>\n                <p><figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/preorder-binarytree-image3-MqLSMbnv\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure></p>\n                <p><strong>Output:</strong> [1 2 4 5 8 3 6 7 9 10]</p>\n                <p><strong>Explanation: </strong> We traverse the binary tree in the order of Root, Left then Right recursively resulting in the following traversal:</p>\n                <p><figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/preorder-binarytree-image4-ahzMSNKK\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure></p>\n\n            </pre>\n        </div>\n    </details>\n</div>\n\n\n<!-- This is Practice Section-->\n<div class=\"practice\">\n    <span><strong>Practice: </strong></span>\n    <div class=\"problem-buttons\">\n\n        <!-- Add Problem Link inside href -->\n        <a href=\"https://www.codingninjas.com/studio/problems/preorder-binary-tree_5948?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf\" target=\"_blank\" rel=\"noopener\">\n            <span>Solve Problem</span>\n            <img src=\"https://takeuforward-content-images.s3.ap-south-1.amazonaws.com/content/Group-11-5-pFOq-8ga\"\n                alt=\"code-studio\">\n        </a>\n    </div>\n    <!--<div class=\"problem-buttons\">\n         Add Problem Link inside href \n        <a href=\"\" target=\"_blank\" rel=\"noopener\">\n            <span>Solve Problem</span>\n            <img src=\"https://cdn.iconscout.com/icon/free/png-256/free-leetcode-3521542-2944960.png?f=webp\"\n                alt=\"leetcode\">\n        </a>\n    </div>-->\n</div>\n\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\n        yourself first. </em></p>\n\n\n<div id=\"brute-force-approach\">\n    <details>\n        <summary class=\"main-summary\">\n            <span>\n                Optimal Approach \n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                </path>\n            </svg>\n        </summary>\n        <div class=\"common-drops\">\n            <details class=\"secondary-details\" open=\"\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Algorithm / Intuition\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <div class=\"approach-algorithm\">\n                    <!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n                    <p>Preorder traversal is one of the depth-first traversal methods used to explore nodes in a binary tree. The algorithm first visits the root node then in the preorder traversal, we visit (ie. add to the array) the current node by accessing its value then we recursively traverse the left subtree in the same manner. We repeat these steps for the left subtree then when we return to the current node, we recursively travel to the right subtree in a preorder manner as well.The sequence of steps in preorder traversal follows: Root, Left, Right.</p>\n                    <p><figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/preorder-binarytree-image5-C75VJARA\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure></p>\n\n                    <p>\n                    \t<p><strong>Base Case:</strong> If the current node is null, it means we have reached the end of a subtree and there are no further nodes to explore. Hence the recursive function stops and we return from that particular recursive call.</p>\n                    \t<p><strong>Recursive Function:</strong></p>\n                    \t<p>\n                    \t<ol><li><strong>Process Current Node:</strong> The recursive function begins by processing ie. adding to the array or printing the current node.</li>\n                    \t<li><strong>Traverse Left Subtree:</strong> Recursively traverse the left subtree by invoking the preorder function on the left child of the current node. This step continues the exploration of nodes in a depth first manner.</li>\n                    \t<li><strong>Traverse Right Subtree:</strong> After traversing the entire left subtree,we traverse the right subtree recursively. We once again invoke the preorder function, but this time on the right child of the current node.</li></ol>\n                    \t</p>\n                    </p>\n                    <p><figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/preorder-binarytree-image6-z5NdJrra\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure></p>\n                    <p><strong>Algorithm:</strong></p>\n                    <p><strong>Step 1:</strong> Check for base case that if the current node is null, exit the void function.</p>\n                    <p><figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/preorder-binarytree-image7-DWwCi3rf\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure></p>\n                    <p><strong>Step 2:</strong> Push the value of the current node into the preorder traversal array.</p>\n                    <p><figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/preorder-binarytree-image8-WZuB4oql\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure></p>\n                    <p><strong>Step 3:</strong> Invoke the preorder function on the left child then right child to traverse the left and right subtrees in the preorder manner respectively.</p>\n                    <p><figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/preorder-binarytree-image9-FInfa4h3\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure></p>\n                </div>\n            </details>\n            <details class=\"code-section secondary-details\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Code\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <div class=\"code-tabs\">\n                    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n                    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n                    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n                    <button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n                    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\"\n                        xmlns=\"http://www.w3.org/2000/svg\">\n                        <path\n                            d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n                        </path>\n                    </svg>\n                </div>\n                <div class=\"code-content\">\n                    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nusing namespace std;\n\n// Node structure for\n// the binary tree\nstruct Node {\n    int data;\n    Node* left;\n    Node* right;\n    // Constructor to initialize\n    // the node with a value\n    Node(int val) : data(val), left(nullptr), right(nullptr) {}\n};\n\n// Function to perform preorder traversal\n// of the tree and store values in 'arr'\nvoid preorder(Node* root, vector&lt;int&gt; &amp;arr){\n    // If the current node is NULL\n    // (base case for recursion), return\n    if(root == nullptr){\n        return;\n    }\n    // Push the current node's\n    // value into the vector\n    arr.push_back(root-&gt;data);\n    // Recursively traverse\n    // the left subtree\n    preorder(root-&gt;left, arr);\n    // Recursively traverse \n    // the right subtree\n    preorder(root-&gt;right, arr);\n}\n\n// Function to initiate preorder traversal\n// and return the resulting vector\nvector&lt;int&gt; preOrder(Node* root){\n    // Create an empty vector to\n    // store preorder traversal values\n    vector&lt;int&gt; arr;\n    // Call the preorder traversal function\n    preorder(root, arr);\n    // Return the resulting vector\n    // containing preorder traversal values\n    return arr;\n}\n\n// Main function\nint main()\n{\n    // Creating a sample binary tree\n    Node* root = new Node(1);\n    root-&gt;left = new Node(2);\n    root-&gt;right = new Node(3);\n    root-&gt;left-&gt;left = new Node(4);\n    root-&gt;left-&gt;right = new Node(5);\n\n    // Getting preorder traversal\n    vector&lt;int&gt; result = preOrder(root);\n\n    // Displaying the preorder traversal result\n    cout &lt;&lt; &quot;Preorder Traversal: &quot;;\n    // Output each value in the\n    // preorder traversal result\n    for(int val : result) {\n        cout &lt;&lt; val &lt;&lt; &quot; &quot;;\n    }\n    cout &lt;&lt; endl;\n\n\n    return 0;\n}\n\n                            </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block \" data-lang=\"java\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"java\" class=\"language-java\">\nimport java.util.ArrayList;\nimport java.util.List;\n\n// Node class for\n// the binary tree\nclass Node {\n    int data;\n    Node left;\n    Node right;\n    \n    // Constructor to initialize\n    // the node with a value\n    Node(int val) {\n        data = val;\n        left = null;\n        right = null;\n    }\n}\n\npublic class BinaryTreeTraversal {\n    // Function to perform preorder traversal\n    // of the tree and store values in 'arr'\n    static void preorder(Node root, List&lt;Integer&gt; arr) {\n        // If the current node is NULL\n        // (base case for recursion), return\n        if (root == null) {\n            return;\n        }\n        // Push the current node's\n        // value into the list\n        arr.add(root.data);\n        // Recursively traverse\n        // the left subtree\n        preorder(root.left, arr);\n        // Recursively traverse\n        // the right subtree\n        preorder(root.right, arr);\n    }\n\n    // Function to initiate preorder traversal\n    // and return the resulting list\n    static List&lt;Integer&gt; preOrder(Node root) {\n        // Create an empty list to\n        // store preorder traversal values\n        List&lt;Integer&gt; arr = new ArrayList&lt;&gt;();\n        // Call the preorder traversal function\n        preorder(root, arr);\n        // Return the resulting list\n        // containing preorder traversal values\n        return arr;\n    }\n\n    // Main function\n    public static void main(String[] args) {\n        // Creating a sample binary tree\n        Node root = new Node(1);\n        root.left = new Node(2);\n        root.right = new Node(3);\n        root.left.left = new Node(4);\n        root.left.right = new Node(5);\n\n        // Getting preorder traversal\n        List&lt;Integer&gt; result = preOrder(root);\n\n        // Displaying the preorder traversal result\n        System.out.print(&quot;Preorder Traversal: &quot;);\n        // Output each value in the\n        // preorder traversal result\n        for (int val : result) {\n            System.out.print(val + &quot; &quot;);\n        }\n        System.out.println();\n    }\n}\n                            </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block\" data-lang=\"python\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"python\" class=\"language-python\">\n# Node class for\n# the binary tree\nclass Node:\n    def __init__(self, val):\n        self.data = val\n        self.left = None\n        self.right = None\n\n# Function to perform preorder traversal\n# of the tree and store values in 'arr'\ndef preorder(root, arr):\n    # If the current node is None\n    # (base case for recursion), return\n    if not root:\n        return\n    # Append the current node's\n    # value into the list\n    arr.append(root.data)\n    # Recursively traverse\n    # the left subtree\n    preorder(root.left, arr)\n    # Recursively traverse\n    # the right subtree\n    preorder(root.right, arr)\n\n# Function to initiate preorder traversal\n# and return the resulting list\ndef preOrder(root):\n    # Create an empty list to\n    # store preorder traversal values\n    arr = []\n    # Call the preorder traversal function\n    preorder(root, arr)\n    # Return the resulting list\n    # containing preorder traversal values\n    return arr\n\n# Main function\nif __name__ == &quot;__main__&quot;:\n    # Creating a sample binary tree\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    root.left.left = Node(4)\n    root.left.right = Node(5)\n\n    # Getting preorder traversal\n    result = preOrder(root)\n\n    # Displaying the preorder traversal result\n    print(&quot;Preorder Traversal:&quot;, end=&quot; &quot;)\n    # Output each value in the\n    # preorder traversal result\n    for val in result:\n        print(val, end=&quot; &quot;)\n    print()\n                            </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block\" data-lang=\"javascript\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"javascript\" class=\"language-javascript\">\n// Node structure for\n// the binary tree\nclass Node {\n    constructor(val) {\n        this.data = val;\n        this.left = null;\n        this.right = null;\n    }\n}\n\n// Function to perform preorder traversal\n// of the tree and store values in 'arr'\nfunction preorder(root, arr) {\n    // If the current node is NULL\n    // (base case for recursion), return\n    if (root === null) {\n        return;\n    }\n    // Push the current node's\n    // value into the array\n    arr.push(root.data);\n    // Recursively traverse\n    // the left subtree\n    preorder(root.left, arr);\n    // Recursively traverse \n    // the right subtree\n    preorder(root.right, arr);\n}\n\n// Function to initiate preorder traversal\n// and return the resulting array\nfunction preOrder(root) {\n    // Create an empty array to\n    // store preorder traversal values\n    const arr = [];\n    // Call the preorder traversal function\n    preorder(root, arr);\n    // Return the resulting array\n    // containing preorder traversal values\n    return arr;\n}\n\n// Creating a sample binary tree\nconst root = new Node(1);\nroot.left = new Node(2);\nroot.right = new Node(3);\nroot.left.left = new Node(4);\nroot.left.right = new Node(5);\n\n// Getting preorder traversal\nconst result = preOrder(root);\n\n// Displaying the preorder traversal result\nconsole.log(&quot;Preorder Traversal: &quot; + result.join(&quot; &quot;));\n                            </code>\n                        </pre>\n                    </div>\n                    <p>\n                        <!-- Insert Output of Brute Force Here -->\n                       <strong>Output</strong> Preorder Traversal: 1 2 4 5 3 \n                    </p>\n                </div>\n            </details>\n            <details class=\"secondary-details\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Complexity Analysis\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <p>\n                    <!-- Insert Time and Space Complexity  Here -->\n                    <p><strong>Time Complexity: O(N)</strong> where N is the number of nodes in the binary tree as each node of the binary tree is visited exactly once.</p>\n\t\t\t\t\t<p><strong>Space Complexity: O(N)</strong> where N is the number of nodes in the binary tree as an additional space for array is allocated to store the values of all \u2018N\u2019 nodes of the binary tree.</p>\n\n                </p>\n            </details>\n        </div>\n    </details>\n</div>\n\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n    <details>\n        <summary class=\"main-summary\">\n            <span>\n                Video Explanation\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"yt-video-wrapper\">\n            <!-- Insert iframe embed Link of Youtube Video-->\n            <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/RlUu72JrOCQ?si=adVlchuiiDbNBfMs\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n        </div>\n    </details>\n</div>\n\n<blockquote class=\"wp-block-quote\">\n    \n</blockquote>\n\n<script>\n\n    const codeSections = document.querySelectorAll('.code-section');\n\n    // Get last selected language from localStorage or set default value\n    let lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp';\n\n    codeSections.forEach((section, sectionIndex) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n        const copyBtn = section.querySelector('.copy-btn');\n\n        codeTabs.forEach((tab) => {\n            tab.addEventListener('click', () => {\n                codeTabs.forEach((t) => {\n                    t.classList.remove('dsa_article_code_active');\n                });\n                tab.classList.add('dsa_article_code_active');\n\n                const lang = tab.dataset.lang;\n                const activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                codeBlocks.forEach((block) => {\n                    if (block === activeBlock) {\n                        block.classList.add('dsa_article_code_active');\n                    } else {\n                        block.classList.remove('dsa_article_code_active');\n                    }\n                });\n\n                // Update last selected language for all sections and store in localStorage\n                lastSelectedLanguage = lang;\n                localStorage.setItem('lastSelectedLanguage', lang);\n                codeSections.forEach((otherSection, otherIndex) => {\n                    if (otherIndex !== sectionIndex) {\n                        const otherTabs = otherSection.querySelectorAll('.code-tab');\n                        otherTabs.forEach((otherTab) => {\n                            if (otherTab.dataset.lang === lang) {\n                                otherTab.classList.add('dsa_article_code_active');\n                            } else {\n                                otherTab.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                        const otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                        const otherCodeBlocks = otherSection.querySelectorAll('.code-block');\n                        otherCodeBlocks.forEach((block) => {\n                            if (block === otherActiveBlock) {\n                                block.classList.add('dsa_article_code_active');\n                            } else {\n                                block.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                    }\n                });\n            });\n        });\n\n        // Handle copy button click event\n        copyBtn.addEventListener('click', () => {\n            const activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\n            navigator.clipboard.writeText(activeBlock.innerText);\n            copyBtn.classList.add('dsa_article_code_active');\n            setTimeout(() => {\n                copyBtn.classList.remove('dsa_article_code_active');\n            }, 1000);\n        });\n    });\n\n    // Set initial state of the tabs\n    codeSections.forEach((section) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n\n        codeTabs.forEach((tab) => {\n            if (tab.dataset.lang === lastSelectedLanguage) {\n                tab.classList.add('dsa_article_code_active');\n            } else {\n                tab.classList.remove('dsa_article_code_active');\n            }\n        });\n\n        codeBlocks.forEach((block) => {\n            if (block.dataset.lang === lastSelectedLanguage) {\n                block.classList.add('dsa_article_code_active');\n            } else {\n                block.classList.remove('dsa_article_code_active');\n            }\n        });\n    });\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>"
}