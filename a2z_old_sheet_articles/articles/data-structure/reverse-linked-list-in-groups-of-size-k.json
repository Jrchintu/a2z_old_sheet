{
    "dislikes": 1,
    "video": "lIar1skcQYI",
    "publishedOn": "Sun Mar 24 2024 22:09:50 GMT+0530 (India Standard Time)",
    "slug": "reverse-linked-list-in-groups-of-size-k",
    "aid": "1598",
    "title": "Reverse Linked List in groups of Size K",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/reverse-ll-in-group-of-given-size-k",
    "topics": [
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "linked-list",
            "topic-title": "Linked List"
        },
        {
            "topic-id": "recursion",
            "topic-title": "Recursion"
        }
    ],
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement: </strong>Given the <strong>head</strong> of a singly linked list of <strong>`n` nodes</strong> and an integer <strong>`k`</strong>, where <strong>k</strong> is less than or equal to <strong>`n`</strong>. Your task is to <strong>reverse</strong> the order of <strong>each</strong> <strong>group</strong> of <strong>`k`</strong> <strong>consecutive</strong> <strong>nodes</strong>, if <strong>`n`</strong> is not divisible by <strong>`k`</strong>, then the <strong>last</strong> <strong>group</strong> of <strong>remaining</strong> <strong>nodes</strong> should remain <strong>unchanged</strong>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n<details class=\"article_example_details\">\n<summary class=\"article_example_summary\">\n<span><strong>\nExamples\n</strong>\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"atricle_example_content\">\n<pre class=\"wp-block-preformatted\"><p><strong>Example 1:</strong></p>\n<p><strong>Input Format</strong>:</p>\n<p>LL: 1&nbsp; 2&nbsp; 3&nbsp; 4&nbsp; 5&nbsp; 6&nbsp; 7&nbsp; 8&nbsp; 9&nbsp; 10<br>K = 3</p>\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/12/Screenshot-2023-12-02-at-10.43.37-PM-1024x120.png\" alt=\"\" class=\"wp-image-13087\" width=\"768\" height=\"90\"></figure>\n<p><strong>Output</strong>: 3&nbsp; 2&nbsp; 1&nbsp; 6&nbsp; 5&nbsp; 4&nbsp; 9&nbsp; 8&nbsp; 7&nbsp; 10</p>\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/12/Screenshot-2023-12-02-at-10.43.44-PM-1024x224.png\" alt=\"\" class=\"wp-image-13088\" width=\"768\" height=\"168\"></figure>\n<p><strong>Explanation</strong>:</p>\n<ul><li>Group 1: Reverse nodes 1 -&gt; 2 -&gt; 3 to become 3 -&gt; 2 -&gt; 1.</li><li>Group 2: Reverse nodes 4 -&gt; 5 -&gt; 6 to become 6 -&gt; 5 -&gt; 4.</li><li>Group 3: Reverse nodes 7 -&gt; 8 -&gt; 9 to become 9 -&gt; 8 -&gt; 7.</li><li>Node 10 remains as is since there are no more groups of size K remaining.</li></ul>\n<p><strong>Example 2:</strong></p>\n<p><strong>Input Format:</strong></p>\n<p>LL: 5&nbsp; 4&nbsp; 3&nbsp; 7&nbsp; 9&nbsp; 2</p>\n<p>K = 4</p>\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/12/Screenshot-2023-12-02-at-11.01.09-PM-1024x191.png\" alt=\"\" class=\"wp-image-13089\" width=\"768\" height=\"143\"></figure>\n<p><strong>Output: </strong>7 3 4 5 9 2</p>\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/12/Screenshot-2023-12-02-at-11.01.22-PM-1024x318.png\" alt=\"\" class=\"wp-image-13090\" width=\"768\" height=\"239\"></figure>\n<p><strong>Explanation</strong>:&nbsp;</p>\n<ul><li>Group 1: Reversed nodes 5 -&gt; 4 -&gt; 3 -&gt; 7 to become 7 -&gt; 3 -&gt; 4 -&gt; 5.</li><li>Group 2: Nodes 9 -&gt; 2 remain unchanged as they are not a complete group of size K.</li></ul>\n</pre>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Practice Section-->\n<div class=\"practice\">\n<span><strong>Practice: </strong></span>\n<div class=\"problem-buttons\">\n\n<!-- Add Problem Link inside href -->\n<a href=\"https://www.codingninjas.com/studio/problems/reverse-list-in-k-groups_983644?utm_source=striver&amp;utm_medium=website&amp;utm_campaign=a_zcoursetuf\" target=\"_blank\" rel=\"noopener\">\n<span>Solve Problem</span>\n<img src=\"https://static.takeuforward.org/wp/uploads/2023/04/Group-11-5.png\" alt=\"code-studio\">\n</a>\n</div>\n</div>\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\nyourself first. </em></p>\n<!-- /wp:html -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3>Solution:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https://docs.google.com/document/d/1Eos1iUvU8K8hrpX_-pRjyy7IQAQFeJifO5U2gJk55y8/edit?usp=sharing\">Reverse Linked L</a><a href=\"https://takeuforward.org/data-structure/reverse-a-linked-list/\" title=\"\">i</a><a href=\"https://docs.google.com/document/d/1Eos1iUvU8K8hrpX_-pRjyy7IQAQFeJifO5U2gJk55y8/edit?usp=sharing\">st</a> is a prerequisite to this question. Make sure you are thorough with the fundamentals and procedures that go into reversing a linked list.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Approach:&nbsp;</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The approach simplifies reversing linked list nodes by <strong>breaking</strong> the list into <strong>segments</strong> of <strong>K nodes</strong> and <strong>reversing</strong> <strong>each</strong> <strong>segment</strong> <strong>individually</strong>. Starting from the head, the algorithm traverses the list to <strong>identify segments of K nodes</strong>. Upon finding a segment, it <strong>reverses</strong> <strong>it</strong>, returning the modified list. If a segment has less than K nodes left (ie. <strong>remaining</strong> <strong>nodes</strong> at the end), they are left <strong>unaltered</strong>.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To implement this (<strong>complex</strong>) <strong>algorithm</strong> we can break down the process into <strong>three</strong> <strong>parts</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>`reverseLinkedList`: </strong>This function takes the <strong>head</strong> of a segment as <strong>input</strong> and reverses the linked list formed by that segment. It operates by utilizing the <strong>classic iterative</strong> <strong>3-pointer method</strong> to reverse the direction of pointers within the segment. Read about this algorithm in detail here <a href=\"https://takeuforward.org/data-structure/reverse-a-linked-list/\" target=\"_blank\" rel=\"noopener\" title=\"\">Reverse Linked List</a>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>`getKthNode`: </strong>The purpose of this function is to <strong>identify</strong> <strong>the</strong> <strong>end</strong> of a segment of <strong>K nodes</strong> in the linked list. Given a starting node, it traverses K nodes in the list and <strong>returns</strong> <strong>the</strong> <strong>Kth node</strong>, allowing the segmentation of the list into <strong>smaller</strong> <strong>parts</strong> for reversal.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>`kReverse`: </strong>The <strong>main</strong> <strong>function</strong> orchestrates the <strong>reversal</strong> <strong>process</strong>. It iterates through the linked list and identifies segments of K nodes using <strong>getKthNode</strong>. For each identified segment, it utilizes <strong>reverseLinkedList</strong> to reverse the nodes within that segment. This <strong>iterative</strong> <strong>approach</strong> efficiently reverses the linked list nodes in <strong>groups of K.</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Algorithm:</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Step 1:</strong> Initialise a pointer <strong>`temp` </strong>to the head of the linked list. Using <strong>`temp`</strong>, traverse to the <strong>Kth Node</strong> iteratively.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Step 2:</strong> On reaching the <strong>Kth Node, </strong>preserve the <strong>Kth Node\u2019s next</strong> node as <strong>`nextNode` </strong>and set the <strong>Kth Node\u2019s next</strong> pointer to <strong>`null`</strong>. This effectively <strong>breaks</strong> the linked list in a <strong>smaller</strong> <strong>list</strong> of size <strong>K</strong> that can be <strong>reversed</strong> and <strong>attached</strong> <strong>back</strong>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":13092,\"width\":768,\"height\":196,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/12/Screenshot-2023-12-03-at-1.19.12-PM-1024x261.png\" alt=\"\" class=\"wp-image-13092\" width=\"768\" height=\"196\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>Step 3: </strong>Treat this <strong>segment</strong> from <strong>`temp`</strong> to <strong>Kth Node</strong> as an individual linked list and <strong>reverse it.</strong> This can be done via the <strong>help</strong> of a helper function <strong>`reverseLinkedList`</strong> which has been discussed in detail in this article <a href=\"https://takeuforward.org/data-structure/reverse-a-linked-list/\" target=\"_blank\" rel=\"noopener\" title=\"\"><strong>Reverse Linked List</strong>.</a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Step 4: </strong>The reversed linked list segment returns a modified list with <strong>`temp`</strong> now at its <strong>tail </strong>&nbsp;and the <strong>`KthNode`</strong> pointing to its head. Update the <strong>`temp`s `next` </strong>pointer to <strong>`nextNode`</strong>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If we are at the <strong>first</strong> <strong>segment</strong> of K nodes, <strong>update </strong>the <strong>head </strong>to <strong>`Kth Node`</strong>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":13093,\"width\":768,\"height\":356,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/12/Screenshot-2023-12-03-at-1.36.59-PM-1024x474.png\" alt=\"\" class=\"wp-image-13093\" width=\"768\" height=\"356\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>Step 5: Continue</strong> this reversal for <strong>further groups. </strong>If a segment has fewer than <strong>K Nodes</strong>, leave them unmodified and return the <strong>new head</strong>. Use the <strong>prevLast</strong> <strong>pointer</strong> to maintain the <strong>link</strong> between the end of the <strong>previous</strong> <strong>reversed</strong> <strong>segment</strong> and the <strong>current</strong> <strong>segment</strong>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":13094,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/12/Screenshot-2023-12-03-at-2.08.33-PM.png\" alt=\"\" class=\"wp-image-13094\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n    <button class=\"code-tab\" data-lang=\"javascript\">Javascript</button>\n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include &lt;iostream&gt;\n#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\n// Node class represents a\n// node in a linked list\nclass Node {\npublic:\n    // Data stored in the node\n    int data;   \n    \n    // Pointer to the next node in the list\n    Node* next;      \n\n    // Constructor with both data and\n    // next node as parameters\n    Node(int data1, Node* next1) {\n        data = data1;\n        next = next1;\n    }\n\n    // Constructor with only data as a\n    // parameter, sets next to nullptr\n    Node(int data1) {\n        data = data1;\n        next = nullptr;\n    }\n};\n\n// This function has been explained\n// in previous videos/articles\n\n// Function to reverse a linked list\n// using the 3-pointer approach\nNode* reverseLinkedList(Node *head)\n{\n   // Initialize'temp' at\n   // head of linked list\n   Node* temp = head;  \n   \n   // Initialize pointer 'prev' to NULL,\n   // representing the previous node\n   Node* prev = NULL;  \n   \n   // Traverse the list, continue till\n   // 'temp' reaches the end (NULL)\n   while(temp != NULL){  \n       // Store the next node in\n       // 'front' to preserve the reference\n       Node* front = temp-&gt;next;  \n       \n       // Reverse the direction of the\n       // current node's 'next' pointer\n       // to point to 'prev'\n       temp-&gt;next = prev;  \n       \n        // Move 'prev' to the current\n        // node for the next iteration\n       prev = temp;  \n       \n        // Move 'temp' to the 'front' node\n        // advancing the traversal\n       temp = front; \n   }\n   \n   // Return the new head of\n   // the reversed linked list\n   return prev;  \n}\n\n// Function to get the Kth node from\n// a given position in the linked list\nNode* getKthNode(Node* temp, int k){\n    // Decrement K as we already\n    // start from the 1st node\n    k -= 1; \n\n    // Decrement K until it reaches\n    // the desired position\n    while(temp != NULL &amp;&amp; k &gt; 0){\n        // Decrement k as temp progresses\n        k--; \n        \n        // Move to the next node\n        temp = temp -&gt; next; \n    }\n    \n    // Return the Kth node\n    return temp; \n}\n\n// Function to reverse nodes in groups of K\nNode* kReverse(Node* head, int k){\n    // Initialize a temporary\n    // node to traverse the list\n    Node* temp = head; \n\n    // Initialize a pointer to track the\n    // ;ast node of the previous group\n    Node* prevLast = NULL; \n    \n    // Traverse through the linked list\n    while(temp != NULL){\n        // Get the Kth node of the current group\n        Node* kThNode = getKthNode(temp, k); \n\n        // If the Kth node is NULL\n        // (not a complete group)\n        if(kThNode == NULL){\n            // If there was a previous group,\n            // link the last node to the current node\n            if(prevLast){\n                prevLast -&gt; next = temp; \n            }\n            \n            // Exit the loop\n            break; \n        }\n        \n        // Store the next node\n        // after the Kth node\n        Node* nextNode = kThNode -&gt; next; \n\n        // Disconnect the Kth node\n        // to prepare for reversal\n        kThNode -&gt; next = NULL; \n\n        // Reverse the nodes from\n        // temp to the Kth node\n        reverseLinkedList(temp); \n        \n        // Adjust the head if the reversal\n        // starts from the head\n        if(temp == head){\n            head = kThNode;\n        }else{\n            // Link the last node of the previous\n            // group to the reversed group\n            prevLast -&gt; next = kThNode; \n        }\n\n        // Update the pointer to the\n        // last node of the previous group\n        prevLast = temp; \n\n        // Move to the next group\n        temp = nextNode; \n    }\n    \n    // Return the head of the\n    // modified linked list\n    return head; \n}\n\n// Function to print the linked list\nvoid printLinkedList(Node* head) {\n    Node* temp = head;\n    while (temp != nullptr) {\n        cout &lt;&lt; temp-&gt;data &lt;&lt; \" \";\n        temp = temp-&gt;next;\n    }\n    cout &lt;&lt; endl;\n}\n\nint main() {\n    // Create a linked list with\n    // values 5, 4, 3, 7, 9 and 2\n    Node* head = new Node(5);\n    head-&gt;next = new Node(4);\n    head-&gt;next-&gt;next = new Node(3);\n    head-&gt;next-&gt;next-&gt;next = new Node(7);\n    head-&gt;next-&gt;next-&gt;next-&gt;next = new Node(9);\n    head-&gt;next-&gt;next-&gt;next-&gt;next-&gt;next = new Node(2);\n\n    // Print the original linked list\n    cout &lt;&lt; \"Original Linked List: \";\n    printLinkedList(head);\n\n    // Reverse the linked list\n    head = kReverse(head, 4);\n\n    // Print the reversed linked list\n    cout &lt;&lt; \"Reversed Linked List: \";\n    printLinkedList(head);\n\n    return 0;\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong><br>Original Linked List: 5 4 3 7 9 2&nbsp;K = 4<br>Linked List Reversed in groups of 4: 7 3 4 5 9 2&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(2N)</strong> The time complexity consists of actions of <strong>reversing</strong> <strong>segments</strong> <strong>of K</strong> and <strong>finding</strong> <strong>the</strong> <strong>Kth</strong> <strong>node</strong> which operates in linear time. Thus, <strong>O(N) + O(N) = O(2N)</strong>, which simplifies to O(N).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(1) </strong>The space complexity is O(1) as the algorithm <strong>operates</strong> <span style=\"background-color: rgba(48, 48, 48, 0.2);\"><b>in </b></span><strong>place</strong> without any additional space requirements.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\n\n// Node class represents a\n// node in a linked list\nclass Node {\n    // Data stored in the node\n    int data;      \n    // Pointer to the next\n    // node in the list\n    Node next;     \n\n    // Constructor with both data\n    // and next node as parameters\n    Node(int data, Node next) {\n        this.data = data;\n        this.next = next;\n    }\n\n    // Constructor with only data as\n    // a parameter, sets next to null\n    Node(int data) {\n        this.data = data;\n        this.next = null;\n    }\n}\npublic class Main {\n\n    // Function to reverse a linked list\n    // using the 3-pointer approach\n    static Node reverseLinkedList(Node head) {\n        // Initialize'temp' at\n        // head of linked list\n        Node temp = head;  \n   \n       // Initialize pointer 'prev' to NULL,\n       // representing the previous node\n       Node prev = null;  \n       \n       // Traverse the list, continue till\n       // 'temp' reaches the end (NULL)\n       while(temp != null){  \n           // Store the next node in\n           // 'front' to preserve the reference\n           Node front = temp.next;  \n           \n           // Reverse the direction of the\n           // current node's 'next' pointer\n           // to point to 'prev'\n           temp.next = prev;  \n           \n            // Move 'prev' to the current\n            // node for the next iteration\n           prev = temp;  \n           \n            // Move 'temp' to the 'front' node\n            // advancing the traversal\n           temp = front; \n       }\n       \n       // Return the new head of\n       // the reversed linked list\n       return prev;  \n\n    }\n\n    // Function to get the Kth node from\n    // a given position in the linked list\n    static Node getKthNode(Node temp, int k) {\n        // Decrement K as we already\n        // start from the 1st node\n        k -= 1;\n        \n        // Decrement K until it reaches\n        // the desired position\n        while (temp != null &amp;&amp; k &gt; 0) {\n            // Decrement k as temp progresses\n            k--;\n            \n            // Move to the next node\n            temp = temp.next;\n        }\n        \n        // Return the Kth node\n        return temp;\n    }\n\n    // Function to reverse nodes in groups of K\n    static Node kReverse(Node head, int k) {\n        // Initialize a temporary\n        // node to traverse the list\n        Node temp = head;\n        \n        // Initialize a pointer to track the\n        // last node of the previous group\n        Node prevLast = null;\n        \n        // Traverse through the linked list\n        while (temp != null) {\n            \n            // Get the Kth node of the current group\n            Node kThNode = getKthNode(temp, k);\n            \n            // If the Kth node is NULL\n            // (not a complete group)\n            if (kThNode == null) {\n               \n                // If there was a previous group,\n                // link the last node to the current node\n                if (prevLast != null) {\n                    prevLast.next = temp;\n                }\n                \n                // Exit the loop\n                break;\n            }\n            \n            // Store the next node\n            // after the Kth node\n            Node nextNode = kThNode.next;\n            \n            // Disconnect the Kth node\n            // to prepare for reversal\n            kThNode.next = null;\n            \n            // Reverse the nodes from\n            // temp to the Kth node\n            reverseLinkedList(temp);\n            \n             // Adjust the head if the reversal\n            // starts from the head\n            if (temp == head) {\n                head = kThNode;\n            } else {\n                // Link the last node of the previous\n                // group to the reversed group\n                prevLast.next = kThNode;\n            }\n            \n            // Update the pointer to the\n            // last node of the previous group\n            prevLast = temp;\n            \n            // Move to the next group\n            temp = nextNode;\n        }\n        \n        // Return the head of the\n        // modified linked list\n        return head;\n    }\n\n    // Function to print the linked list\n    static void printLinkedList(Node head) {\n        Node temp = head;\n        while (temp != null) {\n            System.out.print(temp.data + \" \");\n            temp = temp.next;\n        }\n        System.out.println();\n    }\n\n    public static void main(String[] args) {\n        // Create a linked list with\n        // values 5, 4, 3, 7, 9 and 2\n        Node head = new Node(5);\n        head.next = new Node(4);\n        head.next.next = new Node(3);\n        head.next.next.next = new Node(7);\n        head.next.next.next.next = new Node(9);\n        head.next.next.next.next.next = new Node(2);\n\n        // Print the original linked list\n        System.out.print(\"Original Linked List: \");\n        printLinkedList(head);\n\n        // Reverse the linked list\n        head = kReverse(head, 4);\n\n        // Print the reversed linked list\n        System.out.print(\"Reversed Linked List: \");\n        printLinkedList(head);\n    }\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong><br>Original Linked List: 5 4 3 7 9 2&nbsp;K = 4<br>Linked List Reversed in groups of 4: 7 3 4 5 9 2&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(2N)</strong> The time complexity consists of actions of <strong>reversing</strong> <strong>segments</strong> <strong>of K</strong> and <strong>finding</strong> <strong>the</strong> <strong>Kth</strong> <strong>node</strong> which operates in linear time. Thus, <strong>O(N) + O(N) = O(2N)</strong>, which simplifies to O(N).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(1) </strong>The space complexity is O(1) as the algorithm <strong>operates</strong> <span style=\"background-color: rgba(48, 48, 48, 0.2);\"><b>in</b></span><strong> place</strong> without any additional space requirements.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block\" data-lang=\"python\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">class Node:\n    def __init__(self, data, next_node=None):\n        self.data = data\n        self.next = next_node\n\n# Function to reverse linked list\n# using 3 pointer approach\ndef reverseLinkedList(head):\n    \n    # Initialize 'temp' at the\n    # head of the linked list\n    temp = head\n    \n    # Initialize 'prev' to None,\n    # representing the previous node \n    prev = None\n    \n    while temp is not None:\n        # Store the next node in 'front'\n        # to preserve the reference\n        front = temp.next\n        # Reverse the direction of the current\n        # node's 'next' pointer to point to 'prev'\n        temp.next = prev\n        # Move 'prev' to the current \n        # node, for the next iteration\n        prev = temp\n        # Move 'temp' to 'front' node\n        # advancing traversal\n        temp = front\n\n    # Return the new head\n    # of the reversed linked list\n    return prev\n    \n# Function to get the Kth node from\n# a given position in the linked list\ndef getKthNode(temp, k):\n    # Decrement K as we already\n    # start from the 1st node\n    k -= 1\n\n    # Decrement K until it reaches\n    # the desired position\n    while temp is not None and k &gt; 0:\n        # Decrement k as temp progresses\n        k -= 1\n\n        # Move to the next node\n        temp = temp.next\n\n    # Return the Kth node\n    return temp\n\n\n# Function to reverse nodes in groups of K\ndef kReverse(head, k):\n    # Initialize a temporary\n    # node to traverse the list\n    temp = head\n\n    # Initialize a pointer to track the\n    # last node of the previous group\n    prevLast = None\n\n    # Traverse through the linked list\n    while temp is not None:\n        # Get the Kth node of the current group\n        kThNode = getKthNode(temp, k)\n\n        # If the Kth node is NULL\n        # (not a complete group)\n        if kThNode is None:\n            # If there was a previous group,\n            # link the last node to the current node\n            if prevLast:\n                prevLast.next = temp\n\n            # Exit the loop\n            break\n\n        # Store the next node\n        # after the Kth node\n        nextNode = kThNode.next\n\n        # Disconnect the Kth node\n        # to prepare for reversal\n        kThNode.next = None\n\n        # Reverse the nodes from\n        # temp to the Kth node\n        reverseLinkedList(temp)\n\n        # Adjust the head if the reversal\n        # starts from the head\n        if temp == head:\n            head = kThNode\n        else:\n            # Link the last node of the previous\n            # group to the reversed group\n            prevLast.next = kThNode\n\n        # Update the pointer to the\n        # last node of the previous group\n        prevLast = temp\n\n        # Move to the next group\n        temp = nextNode\n\n    # Return the head of the\n    # modified linked list\n    return head\n\n\n# Function to print the linked list\ndef printLinkedList(head):\n    temp = head\n    while temp is not None:\n        print(temp.data, end=\" \")\n        temp = temp.next\n    print()\n\n\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\n\n# Create a linked list with\n# values 5, 4, 3, 7, 9 and 2\nhead = Node(5)\nhead.next = Node(4)\nhead.next.next = Node(3)\nhead.next.next.next = Node(7)\nhead.next.next.next.next = Node(9)\nhead.next.next.next.next.next = Node(2)\n\n# Print the original linked list\nprint(\"Original Linked List: \", end=\"\")\nprintLinkedList(head)\n\n# Reverse the linked list\nhead = kReverse(head, 4)\n\n# Print the reversed linked list\nprint(\"Reversed Linked List: \", end=\"\")\nprintLinkedList(head)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong><br>Original Linked List: 5 4 3 7 9 2&nbsp;K = 4<br>Linked List Reversed in groups of 4: 7 3 4 5 9 2&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(2N)</strong> The time complexity consists of actions of <strong>reversing</strong> <strong>segments</strong> <strong>of K</strong> and <strong>finding</strong> <strong>the</strong> <strong>Kth</strong> <strong>node</strong> which operates in linear time. Thus, <strong>O(N) + O(N) = O(2N)</strong>, which simplifies to O(N).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(1) </strong>The space complexity is O(1) as the algorithm <strong>operates</strong> <span style=\"background-color: rgba(48, 48, 48, 0.2);\"><b>in p</b></span><strong>lace</strong> without any additional space requirements.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block\" data-lang=\"javascript\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">class Node {\n  constructor(data, next = null) {\n    this.data = data;\n    this.next = next;\n  }\n}\n\n// Function to reverse a linked list\n// using the 3-pointer approach\nfunction reverseLinkedList(head) {\n    \n    // Initialize pointer 'temp' at\n    // head of the linked list\n    let temp = head;  \n    \n    // Initialize a pointer 'prev' to null\n    // representing the previous node\n    // (initially none)\n    let prev = null;  \n\n    // Traversing the list, continue until\n    // 'temp' reaches the end (null)\n    while (temp !== null) {  \n        // Store the next node in\n        // 'front' to preserve the reference\n        let front = temp.next;  \n        \n        // Reverse direction of current node's\n        // 'next' pointer to point to 'prev'\n        temp.next = prev;  \n        \n        // Move 'prev' to the current node,\n        // preparing it for the next iteration\n        prev = temp;\n        \n        // Move 'temp' to the 'front' node\n        // (the next node), advancing traversal\n        temp = front;  \n    }\n\n    // Return the new head of\n    // the reversed linked list\n    return prev;  \n}\n\n// Function to get the Kth node from\n// a given position in the linked list\nfunction getKthNode(temp, k) {\n    // Decrement K as we already\n    // start from the 1st node\n    k -= 1;\n\n    // Decrement K until it reaches\n    // the desired position\n    while (temp !== null &amp;&amp; k &gt; 0) {\n        // Decrement k as temp progresses\n        k--;\n\n        // Move to the next node\n        temp = temp.next;\n    }\n\n    // Return the Kth node\n    return temp;\n}\n\n// Function to reverse nodes in groups of K\nfunction kReverse(head, k) {\n    // Initialize a temporary\n    // node to traverse the list\n    let temp = head;\n\n    // Initialize a pointer to track the\n    // last node of the previous group\n    let prevLast = null;\n\n    // Traverse through the linked list\n    while (temp !== null) {\n        // Get the Kth node of the current group\n        let kThNode = getKthNode(temp, k);\n\n        // If the Kth node is NULL\n        // (not a complete group)\n        if (kThNode === null) {\n            // If there was a previous group,\n            // link the last node to the current node\n            if (prevLast) {\n                prevLast.next = temp;\n            }\n\n            // Exit the loop\n            break;\n        }\n\n        // Store the next node\n        // after the Kth node\n        let nextNode = kThNode.next;\n\n        // Disconnect the Kth node\n        // to prepare for reversal\n        kThNode.next = null;\n\n        // Reverse the nodes from\n        // temp to the Kth node\n        reverseLinkedList(temp);\n\n        // Adjust the head if the reversal\n        // starts from the head\n        if (temp === head) {\n            head = kThNode;\n        } else {\n            // Link the last node of the previous\n            // group to the reversed group\n            prevLast.next = kThNode;\n        }\n\n        // Update the pointer to the\n        // last node of the previous group\n        prevLast = temp;\n\n        // Move to the next group\n        temp = nextNode;\n    }\n\n    // Return the head of the\n    // modified linked list\n    return head;\n}\n\n// Function to reverse the linked list\nfunction reverseLinkedList(head) {\n    let prev = null;\n    let current = head;\n    let next = null;\n\n    while (current !== null) {\n        next = current.next;\n        current.next = prev;\n        prev = current;\n        current = next;\n    }\n\n    head = prev;\n}\n\n// Function to print the linked list\nfunction printLinkedList(head) {\n    let temp = head;\n    let result = \"\";\n    while (temp !== null) {\n        result += temp.data + \" \";\n        temp = temp.next;\n    }\n    console.log(result);\n}\n\n// Create a linked list with\n// values 5, 4, 3, 7, 9, and 2\nlet head = new Node(5);\nhead.next = new Node(4);\nhead.next.next = new Node(3);\nhead.next.next.next = new Node(7);\nhead.next.next.next.next = new Node(9);\nhead.next.next.next.next.next = new Node(2);\n\n// Print the original linked list\nconsole.log(\"Original Linked List: \");\nprintLinkedList(head);\n\n// Reverse the linked list\nhead = kReverse(head, 4);\n\n// Print the reversed linked list\nconsole.log(\"Reversed Linked List: \");\nprintLinkedList(head);</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong><br>Original Linked List: 5 4 3 7 9 2&nbsp;K = 4<br>Linked List Reversed in groups of 4: 7 3 4 5 9 2&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(2N)</strong> The time complexity consists of actions of <strong>reversing</strong> <strong>segments</strong> <strong>of K</strong> and <strong>finding</strong> <strong>the</strong> <strong>Kth</strong> <strong>node</strong> which operates in linear time. Thus, <strong>O(N) + O(N) = O(2N)</strong>, which simplifies to O(N).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(1) </strong>The space complexity is O(1) as the algorithm <strong>operates</strong> <span style=\"background-color: rgba(48, 48, 48, 0.2);\"><b>in </b></span><strong>place</strong> without any additional space requirements.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In case you are learning DSA, you should definitely check out our free&nbsp;<a href=\"http://blogs.takeuforward.org/strivers-a2z-dsa-course/strivers-a2z-dsa-course-sheet-2/\" target=\"_blank\" rel=\"noopener\" title=\"\">A2Z DSA Course</a>&nbsp;with videos and blogs.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;</em><strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268\" target=\"_blank\" rel=\"noreferrer noopener\">Gauri Tomar</a></strong><em>&nbsp;for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"http://blogs.takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\" target=\"_blank\" rel=\"noopener\" title=\"\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:embed {\"url\":\"https://youtu.be/lIar1skcQYI?si=SZA90RkRrEEVoT-q\",\"type\":\"video\",\"providerNameSlug\":\"youtube\",\"responsive\":true,\"className\":\"wp-embed-aspect-16-9 wp-has-aspect-ratio\"} -->\n<figure class=\"wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio\"><div class=\"wp-block-embed__wrapper\">\nhttps://youtu.be/lIar1skcQYI?si=SZA90RkRrEEVoT-q\n</div></figure>\n<!-- /wp:embed -->",
    "category_tag": "data-structure",
    "likes": 142,
    "preview": "Problem Statement: Given the head of a singly linked list of `n` nodes and an integer `k`, where k is less than or equal to `n`. Your task is to reverse the order of each group of `k` consecutive n..."
}