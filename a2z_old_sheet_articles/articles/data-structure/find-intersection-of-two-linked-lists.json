{
    "dislikes": 7,
    "video": "u4FWXfgS8jw",
    "publishedOn": "Sun Mar 24 2024 22:09:32 GMT+0530 (India Standard Time)",
    "slug": "find-intersection-of-two-linked-lists",
    "aid": "1519",
    "title": "Find intersection of Two Linked Lists",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/find-the-intersection-point-of-y-ll",
    "topics": [
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "hashing",
            "topic-title": "Hashing"
        },
        {
            "topic-id": "linked-list",
            "topic-title": "Linked List"
        }
    ],
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement: </strong>Given the heads of two singly <a href=\"https://takeuforward.org/linked-list/linked-list-introduction/\" target=\"_blank\" rel=\"noreferrer noopener\">linked-lists</a> <strong>headA</strong> and <strong>headB</strong>, return <strong>the node at which the two lists intersect</strong>. If the two linked lists have no intersection at all, return <strong>null</strong>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Examples:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\"><strong>Example 1:</strong>\n<strong>Input:</strong>\nList 1 = [1,3,1,2,4], List 2 = [3,2,4]\n<strong>Output:</strong>\n2\n<strong>Explanation:</strong> Here, both lists intersecting nodes start from node 2.\n<img width=\"463.60975609756093\" height=\"260.4377308268175\" src=\"https://lh5.googleusercontent.com/4WJ3tjiiLLRYeZOXd_o4BtSYdlsSnOwWKxTGIRW8qQfW9gFymPC710FCgiIrB6vTwwa-hR5WrtWjKOk-beBhD9WtH4nFi16W4f42FQAS0PTXiD_1LmPQYzwmn_eE2OChjKVGRVTy\"></pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\"><strong>Example 2:</strong>\n<strong>Input:</strong>\n List1 = [1,2,7], List 2 = [2,8,1]\n<strong>Output:</strong>\n Null\n<strong>Explanation:</strong> Here, both lists do not intersect and thus no intersection node is present.\n<strong><img width=\"509.22279792746116\" height=\"285.23970605636237\" src=\"https://lh6.googleusercontent.com/BYrRaBAIP_iu_ygjCZ14mXh0_yjNCD0tqzptMI4A1L_iH2wJUlBkOBmSTL_npJcRV9zqhNcvgDCZ6i8kOFqFTuQw0AZsZJrggdjOeA0PwRbE_JkQLCfEAWQwEdDKaoYo2lZYYQhJ\"></strong></pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p><strong>Solution 1: Brute-Force</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Approach:</strong> We know intersection means a common attribute present between two entities. Here, we have linked lists as given entities.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>What should be the common attribute for two linked lists?&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If you believe a common attribute is a node's value, then think properly! If we take our example 1, there we can see both lists have nodes of value 3. But it is not the first intersection node. So what\u2019s the common attribute?</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It is the node itself that is the common attribute. So, the process is as follows:-</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>Keep any one of the list to check its node present in the other list. Here, we are choosing the second list for this task.</li><li>Iterate through the other list. Here, it is the first one.&nbsp;</li><li>Check if the both nodes are the same. If yes, we got our first intersection node.</li><li>If not, continue iteration.</li><li>If we did not find an intersection node and completed the entire iteration of the second list, then there is no intersection between the provided lists. Hence, return <em>null</em>.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Dry Run:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><img width=\"435\" height=\"244\" src=\"https://lh4.googleusercontent.com/zDRIcBToS6sC_ZdFN6p5vdel95-kPq736LHU4ldIHQWNtURwNxVC_4iRxbS9RE6q06pb-KWujO7ISc7yiJhLBg1_Bl7tGUxeKrbiwdBJHEFO-QeSPckvJrFSF1ctEtdo6Wpw4Yzy\"></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include&lt;iostream&gt;\nusing namespace std;\n\nclass node {\n    public:\n        int num;\n        node* next;\n        node(int val) {\n            num = val;\n            next = NULL;\n        }\n};\n//utility function to insert node at the end of the linked list\nvoid insertNode(node* &amp;head,int val) {\n    node* newNode = new node(val);\n    \n    if(head == NULL) {\n        head = newNode;\n        return;\n    }\n    \n    node* temp = head;\n    while(temp-&gt;next != NULL) temp = temp-&gt;next;\n    \n    temp-&gt;next = newNode;\n    return;\n}\n\n//utility function to check presence of intersection\nnode* intersectionPresent(node* head1,node* head2) {\n    while(head2 != NULL) {\n        node* temp = head1;\n        while(temp != NULL) {\n            //if both nodes are same\n            if(temp == head2) return head2;\n            temp = temp-&gt;next;\n        }\n        head2 = head2-&gt;next;\n    }\n    //intersection is not present between the lists return null\n    return NULL;\n}\n\n//utility function to print linked list created\nvoid printList(node* head) {\n    while(head-&gt;next != NULL) {\n        cout&lt;&lt;head-&gt;num&lt;&lt;\"-&gt;\";\n        head = head-&gt;next;\n    }\n    cout&lt;&lt;head-&gt;num&lt;&lt;endl;\n}\n\nint main() {\n    // creation of both lists \n    node* head = NULL;\n    insertNode(head,1);\n    insertNode(head,3);\n    insertNode(head,1);\n    insertNode(head,2);\n    insertNode(head,4);\n    node* head1 = head;\n    head = head-&gt;next-&gt;next-&gt;next;\n    node* headSec = NULL;\n    insertNode(headSec,3);\n    node* head2 = headSec;\n    headSec-&gt;next = head;\n    //printing of the lists\n    cout&lt;&lt;\"List1: \"; printList(head1);\n    cout&lt;&lt;\"List2: \"; printList(head2);\n    //checking if intersection is present\n    node* answerNode = intersectionPresent(head1,head2);\n    if(answerNode == NULL )\n    cout&lt;&lt;\"No intersection\\n\";\n    else\n    cout&lt;&lt;\"The intersection point is \"&lt;&lt;answerNode-&gt;num&lt;&lt;endl;\n    return 0;\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>List1: 1-&gt;3-&gt;1-&gt;2-&gt;4<br>List2: 3-&gt;2-&gt;4<br>The intersection point is 2</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity:</strong> O(m*n)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Reason</em>: For each node in list 2 entire lists 1 are iterated.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity:</strong> O(1)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Reason</em>: No extra space is used.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\nclass Node {\n        int num;\n        Node next;\n        Node(int val) {\n            num = val;\n            next = null;\n        }\n}\nclass TUF{\n//utility function to insert node at the end of the linked list\nstatic Node insertNode(Node head,int val) {\n    Node newNode = new Node(val);\n    \n    if(head == null) {\n        head = newNode;\n        return head;\n    }\n    \n    Node temp = head;\n    while(temp.next != null) temp = temp.next;\n    \n    temp.next = newNode;\n    return head;\n}\n\n//utility function to check presence of intersection\nstatic Node intersectionPresent(Node head1,Node head2) {\n    while(head2 != null) {\n        Node temp = head1;\n        while(temp != null) {\n            //if both nodes are same\n            if(temp == head2) return head2;\n            temp = temp.next;\n        }\n        head2 = head2.next;\n    }\n    //intersection is not present between the lists return null\n    return null;\n}\n\n//utility function to print linked list created\nstatic void printList(Node head) {\n    while(head.next != null) {\n    System.out.print(head.num+\"-&gt;\");\n        head = head.next;\n    }\n    System.out.println(head.num);\n}\n\npublic static void main(String args[]) {\n    // creation of both lists \n    Node head = null;\n    head=insertNode(head,1);\n    head=insertNode(head,3);\n    head=insertNode(head,1);\n    head=insertNode(head,2);\n    head=insertNode(head,4);\n    Node head1 = head;\n    head = head.next.next.next;\n    Node headSec = null;\n    headSec=insertNode(headSec,3);\n    Node head2 = headSec;\n    headSec.next = head;\n    //printing of the lists\n    System.out.print(\"List1: \"); printList(head1);\n    System.out.print(\"List2: \"); printList(head2);\n    //checking if intersection is present\n    Node answerNode = intersectionPresent(head1,head2);\n    if(answerNode == null)  \n    System.out.println(\"No intersection\\n\");\n    else\n    System.out.println(\"The intersection point is \"+answerNode.num);\n    \n}\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>List1: 1-&gt;3-&gt;1-&gt;2-&gt;4<br>List2: 3-&gt;2-&gt;4<br>The intersection point is 2</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity:</strong> O(m*n)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Reason</em>: For each node in list 2 entire lists 1 are iterated.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity:</strong> O(1)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Reason</em>: No extra space is used.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block\" data-lang=\"python\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">class Node:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n\n\n\n\n# utility function to insert node at the end of the linked list\ndef insertNode(head, val):\n    newNode = Node(val)\n    if head == None:\n        head = newNode\n        return head\n    temp = head\n    while temp.next != None:\n        temp = temp.next\n    temp.next = newNode\n    return head\n\n\n\n\n# utility function to check presence of intersection\ndef intersectionPresent(head1, head2):\n    while head2 != None:\n        temp = head1\n        while temp != None:\n            # if both nodes are same\n            if temp == head2:\n                return head2\n            temp = temp.next\n        head2 = head2.next\n    # intersection is not present between the lists\n    return None\n\n\n\n\n# utility function to print linked list created\ndef printList(head):\n    while head.next != None:\n        print(head.val, end='->')\n        head = head.next\n    print(head.val)\n\n\n\n\nif __name__ == '__main__':\n    head = None\n    head = insertNode(head, 1)\n    head = insertNode(head, 3)\n    head = insertNode(head, 1)\n    head = insertNode(head, 2)\n    head = insertNode(head, 4)\n    head1 = head\n    head = head.next.next.next\n    headSec = None\n    headSec = insertNode(headSec, 3)\n    head2 = headSec\n    headSec.next = head\n    print('List1: ', end='')\n    printList(head1)\n    print('List2: ', end='')\n    printList(head2)\n    answerNode = intersectionPresent(head1, head2)\n    if answerNode == None:\n        print('No intersection')\n    else:\n        print('The intersection point is', answerNode.val)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>List1: 1-&gt;3-&gt;1-&gt;2-&gt;4<br>List2: 3-&gt;2-&gt;4<br>The intersection point is 2</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity:</strong> O(m*n)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Reason</em>: For each node in list 2 entire list 1 is iterated.\u00a0</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity:</strong> O(1)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Reason</em>: No extra space is used.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Solution 2: Hashing</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Approach:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Can we improve brute-force time complexity? In brute force, we are basically performing \u201csearching\u201d. We can also perform searches by Hashing. Taking into consideration that hashing process takes O(1) time complexity. So the process is as follows:-</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>Iterate through list 1 and hash its node address. Why? (Hint: depends on the common attribute we are searching)</li><li>Iterate through list 2 and search the hashed value in the hash table. If found, return node.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nclass node {\n    public:\n        int num;\n        node* next;\n        node(int val) {\n            num = val;\n            next = NULL;\n        }\n};\n//utility function to insert node at the end of the linked list\nvoid insertNode(node* &amp;head,int val) {\n    node* newNode = new node(val);\n    \n    if(head == NULL) {\n        head = newNode;\n        return;\n    }\n    \n    node* temp = head;\n    while(temp-&gt;next != NULL) temp = temp-&gt;next;\n    \n    temp-&gt;next = newNode;\n    return;\n}\n\n//utility function to check presence of intersection\nnode* intersectionPresent(node* head1,node* head2) {\n     unordered_set&lt;node*&gt; st;\n    while(head1 != NULL) {\n       st.insert(head1);\n       head1 = head1-&gt;next;\n    }\n    while(head2 != NULL) {\n        if(st.find(head2) != st.end()) return head2;\n        head2 = head2-&gt;next;\n    }\n    return NULL;\n\n}\n\n//utility function to print linked list created\nvoid printList(node* head) {\n    while(head-&gt;next != NULL) {\n        cout&lt;&lt;head-&gt;num&lt;&lt;\"-&gt;\";\n        head = head-&gt;next;\n    }\n    cout&lt;&lt;head-&gt;num&lt;&lt;endl;\n}\n\nint main() {\n    // creation of both lists \n    node* head = NULL;\n    insertNode(head,1);\n    insertNode(head,3);\n    insertNode(head,1);\n    insertNode(head,2);\n    insertNode(head,4);\n    node* head1 = head;\n    head = head-&gt;next-&gt;next-&gt;next;\n    node* headSec = NULL;\n    insertNode(headSec,3);\n    node* head2 = headSec;\n    headSec-&gt;next = head;\n    //printing of the lists\n    cout&lt;&lt;\"List1: \"; printList(head1);\n    cout&lt;&lt;\"List2: \"; printList(head2);\n    //checking if intersection is present\n    node* answerNode = intersectionPresent(head1,head2);\n    if(answerNode == NULL )\n    cout&lt;&lt;\"No intersection\\n\";\n    else\n    cout&lt;&lt;\"The intersection point is \"&lt;&lt;answerNode-&gt;num&lt;&lt;endl;\n    return 0;\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>List1: 1-&gt;3-&gt;1-&gt;2-&gt;4<br>List2: 3-&gt;2-&gt;4<br>The intersection point is 2</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity:</strong> O(n+m)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Reason</em>: Iterating through list 1 first takes O(n), then iterating through list 2 takes O(m).&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity:</strong> O(n)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Reason</em>: Storing list 1 node addresses in unordered_set.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\nclass Node {\n        int num;\n        Node next;\n        Node(int val) {\n            num = val;\n            next = null;\n        }\n}\nclass TUF{\n//utility function to insert node at the end of the linked list\nstatic Node insertNode(Node head,int val) {\n    Node newNode = new Node(val);\n    \n    if(head == null) {\n        head = newNode;\n        return head;\n    }\n    \n    Node temp = head;\n    while(temp.next != null) temp = temp.next;\n    \n    temp.next = newNode;\n    return head;\n}\n\n//utility function to check presence of intersection\nstatic Node intersectionPresent(Node head1,Node head2) {\n     HashSet&lt;Node&gt; st=new HashSet&lt;&gt;();\n    while(head1 != null) {\n       st.add(head1);\n       head1 = head1.next;\n    }\n    while(head2 != null) {\n        if(st.contains(head2)) return head2;\n        head2 = head2.next;\n    }\n    return null;\n\n}\n\n//utility function to print linked list created\nstatic void printList(Node head) {\n    while(head.next != null) {\n    System.out.print(head.num+\"-&gt;\");\n        head = head.next;\n    }\n    System.out.println(head.num);\n}\n\npublic static void main(String args[]) {\n    // creation of both lists \n    Node head = null;\n    head=insertNode(head,1);\n    head=insertNode(head,3);\n    head=insertNode(head,1);\n    head=insertNode(head,2);\n    head=insertNode(head,4);\n    Node head1 = head;\n    head = head.next.next.next;\n    Node headSec = null;\n    headSec=insertNode(headSec,3);\n    Node head2 = headSec;\n    headSec.next = head;\n    //printing of the lists\n    System.out.print(\"List1: \"); printList(head1);\n    System.out.print(\"List2: \"); printList(head2);\n    //checking if intersection is present\n    Node answerNode = intersectionPresent(head1,head2);\n    if(answerNode == null)  \n    System.out.println(\"No intersection\\n\");\n    else\n    System.out.println(\"The intersection point is \"+answerNode.num);\n    \n}\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>List1: 1-&gt;3-&gt;1-&gt;2-&gt;4<br>List2: 3-&gt;2-&gt;4<br>The intersection point is 2</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity:</strong> O(n+m)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Reason</em>: Iterating through list 1 first takes O(n), then iterating through list 2 takes O(m).&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity:</strong> O(n)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Reason</em>: Storing list 1 node address in HashSet.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block\" data-lang=\"python\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">class Node:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n\n\n\n\n# utility function to insert node at the end of the linked list\ndef insertNode(head, val):\n    newNode = Node(val)\n    if head == None:\n        head = newNode\n        return head\n    temp = head\n    while temp.next != None:\n        temp = temp.next\n    temp.next = newNode\n    return head\n\n\n\n\n# utility function to check presence of intersection\ndef intersectionPresent(head1, head2):\n    st = set()\n    while head1 != None:\n        st.add(head1)\n        head1 = head1.next\n    while head2 != None:\n        if head2 in st:\n            return head2\n        head2 = head2.next\n    return None\n\n\n\n\n# utility function to print linked list created\ndef printList(head):\n    while head.next != None:\n        print(head.val, end='->')\n        head = head.next\n    print(head.val)\n\n\n\n\nif __name__ == '__main__':\n    head = None\n    head = insertNode(head, 1)\n    head = insertNode(head, 3)\n    head = insertNode(head, 1)\n    head = insertNode(head, 2)\n    head = insertNode(head, 4)\n    head1 = head\n    head = head.next.next.next\n    headSec = None\n    headSec = insertNode(headSec, 3)\n    head2 = headSec\n    headSec.next = head\n    print('List1: ', end='')\n    printList(head1)\n    print('List2: ', end='')\n    printList(head2)\n    answerNode = intersectionPresent(head1, head2)\n    if answerNode == None:\n        print('No intersection')\n    else:\n        print('The intersection point is', answerNode.val)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>List1: 1-&gt;3-&gt;1-&gt;2-&gt;4<br>List2: 3-&gt;2-&gt;4<br>The intersection point is 2</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity:</strong> O(n+m)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Reason</em>: Iterating through list 1 first takes O(n), then iterating through list 2 takes O(m).&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity:</strong> O(n)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Reason</em>: Storing list 1 node addresses in unordered_set.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Solution 3: Difference in length</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Approach:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We will reduce the search length. This can be done by searching the length of the shorter linked list. How? Let\u2019s see the process.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>Find the length of both lists.</li><li>Find the positive difference between these lengths.</li><li>Move the dummy pointer of the larger list by the difference achieved. This makes our search length reduced to a smaller list length.</li><li>Move both pointers, each pointing two lists, ahead simultaneously if both do not collide.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Dry Run:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><img width=\"414\" height=\"233\" src=\"https://lh4.googleusercontent.com/cr22opvFzLqxxbA3HpT8_xX18wjb5FTHKeeJyQ0OA0Lr8_S18iIZUP5XAJjFdNymiQnVfvP5ThzurQo0q7gSWx1B4JGE0WxqV-qzf6C_44a5cWTDmlXfUvp1JOxEubmHFH4cOh_o\"></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nclass node {\n    public:\n        int num;\n        node* next;\n        node(int val) {\n            num = val;\n            next = NULL;\n        }\n};\n//utility function to insert node at the end of the linked list\nvoid insertNode(node* &amp;head,int val) {\n    node* newNode = new node(val);\n    \n    if(head == NULL) {\n        head = newNode;\n        return;\n    }\n    \n    node* temp = head;\n    while(temp-&gt;next != NULL) temp = temp-&gt;next;\n    \n    temp-&gt;next = newNode;\n    return;\n}\nint getDifference(node* head1,node* head2) {\n     int len1 = 0,len2 = 0;\n        while(head1 != NULL || head2 != NULL) {\n            if(head1 != NULL) {\n                ++len1; head1 = head1-&gt;next;\n            }\n            if(head2 != NULL) {\n                ++len2; head2 = head2-&gt;next;\n            }\n            \n        }\n        return len1-len2;//if difference is neg-&gt; length of list2 &gt; length of list1 else vice-versa\n}\n\n//utility function to check presence of intersection\nnode* intersectionPresent(node* head1,node* head2) {\n int diff = getDifference(head1,head2);\n        if(diff &lt; 0) \n            while(diff++ != 0) head2 = head2-&gt;next; \n        else while(diff-- != 0) head1 = head1-&gt;next;\n        while(head1 != NULL) {\n            if(head1 == head2) return head1;\n            head2 = head2-&gt;next;\n            head1 = head1-&gt;next;\n        }\n        return head1;\n\n\n}\n\n//utility function to print linked list created\nvoid printList(node* head) {\n    while(head-&gt;next != NULL) {\n        cout&lt;&lt;head-&gt;num&lt;&lt;\"-&gt;\";\n        head = head-&gt;next;\n    }\n    cout&lt;&lt;head-&gt;num&lt;&lt;endl;\n}\n\nint main() {\n    // creation of both lists \n    node* head = NULL;\n    insertNode(head,1);\n    insertNode(head,3);\n    insertNode(head,1);\n    insertNode(head,2);\n    insertNode(head,4);\n    node* head1 = head;\n    head = head-&gt;next-&gt;next-&gt;next;\n    node* headSec = NULL;\n    insertNode(headSec,3);\n    node* head2 = headSec;\n    headSec-&gt;next = head;\n    //printing of the lists\n    cout&lt;&lt;\"List1: \"; printList(head1);\n    cout&lt;&lt;\"List2: \"; printList(head2);\n    //checking if intersection is present\n    node* answerNode = intersectionPresent(head1,head2);\n    if(answerNode == NULL )\n    cout&lt;&lt;\"No intersection\\n\";\n    else\n    cout&lt;&lt;\"The intersection point is \"&lt;&lt;answerNode-&gt;num&lt;&lt;endl;\n    return 0;\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>List1: 1-&gt;3-&gt;1-&gt;2-&gt;4<br>List2: 3-&gt;2-&gt;4<br>The intersection point is 2</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>O(2max(length of list1,length of list2))+O(abs(length of list1-length of list2))+O(min(length of list1,length of list2))</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Reason</em>: Finding the length of both lists takes max(length of list1, length of list2) because it is found simultaneously for both of them. Moving the head pointer ahead by a difference of them. The next one is for searching.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity:</strong> O(1)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Reason</em>: No extra space is used.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\nclass Node {\n        int num;\n        Node next;\n        Node(int val) {\n            num = val;\n            next = null;\n        }\n}\nclass TUF{\n//utility function to insert node at the end of the linked list\nstatic Node insertNode(Node head,int val) {\n    Node newNode = new Node(val);\n    \n    if(head == null) {\n        head = newNode;\n        return head;\n    }\n    \n    Node temp = head;\n    while(temp.next != null) temp = temp.next;\n    \n    temp.next = newNode;\n    return head;\n}\n static int getDifference(Node head1,Node head2) {\n     int len1 = 0,len2 = 0;\n        while(head1 != null || head2 != null) {\n            if(head1 != null) {\n                ++len1; head1 = head1.next;\n            }\n            if(head2 != null) {\n                ++len2; head2 = head2.next;\n            }\n            \n        }\n        return len1-len2;//if difference is neg-&gt; length of list2 &gt; length of list1 else vice-versa\n}\n//utility function to check presence of intersection\nstatic Node intersectionPresent(Node head1,Node head2) {\n   int diff = getDifference(head1,head2);\n        if(diff &lt; 0) \n            while(diff++ != 0) head2 = head2.next; \n        else while(diff-- != 0) head1 = head1.next;\n        while(head1 != null) {\n            if(head1 == head2) return head1;\n            head2 = head2.next;\n            head1 = head1.next;\n        }\n        return head1;\n\n}\n\n//utility function to print linked list created\nstatic void printList(Node head) {\n    while(head.next != null) {\n    System.out.print(head.num+\"-&gt;\");\n        head = head.next;\n    }\n    System.out.println(head.num);\n}\n\npublic static void main(String args[]) {\n    // creation of both lists \n    Node head = null;\n    head=insertNode(head,1);\n    head=insertNode(head,3);\n    head=insertNode(head,1);\n    head=insertNode(head,2);\n    head=insertNode(head,4);\n    Node head1 = head;\n    head = head.next.next.next;\n    Node headSec = null;\n    headSec=insertNode(headSec,3);\n    Node head2 = headSec;\n    headSec.next = head;\n    //printing of the lists\n    System.out.print(\"List1: \"); printList(head1);\n    System.out.print(\"List2: \"); printList(head2);\n    //checking if intersection is present\n    Node answerNode = intersectionPresent(head1,head2);\n    if(answerNode == null)  \n    System.out.println(\"No intersection\\n\");\n    else\n    System.out.println(\"The intersection point is \"+answerNode.num);\n    \n}\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>List1: 1-&gt;3-&gt;1-&gt;2-&gt;4<br>List2: 3-&gt;2-&gt;4<br>The intersection point is 2</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>O(2max(length of list1,length of list2))+O(abs(length of list1-length of list2))+O(min(length of list1,length of list2))</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Reason</em>: Finding the length of both lists takes max(length of list1, length of list2) because it is found simultaneously for both of them. Moving the head pointer ahead by a difference of them. The next one is for searching.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity:</strong> O(1)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Reason</em>: No extra space is used.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block\" data-lang=\"python\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">class Node:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n\n\n\n\n# utility function to insert node at the end of the linked list\ndef insertNode(head, val):\n    newNode = Node(val)\n    if head == None:\n        head = newNode\n        return head\n    temp = head\n    while temp.next != None:\n        temp = temp.next\n    temp.next = newNode\n    return head\n\n\n\n\ndef getDifference(head1, head2):\n    len1 = 0\n    len2 = 0\n    while head1 != None or head2 != None:\n        if head1 != None:\n            len1 += 1\n            head1 = head1.next\n        if head2 != None:\n            len2 += 1\n            head2 = head2.next\n    # if difference is neg-> length of list2 > length of list1 else vice-versa\n    return len1 - len2\n\n\n\n\n# utility function to check presence of intersection\ndef intersectionPresent(head1, head2):\n    diff = getDifference(head1, head2)\n    if diff &lt; 0:\n        while diff != 0:\n            head2 = head2.next\n            diff += 1\n    else:\n        while diff != 0:\n            head1 = head1.next\n            diff -= 1\n    while head1 != None:\n        if head1 == head2:\n            return head1\n        head2 = head2.next\n        head1 = head1.next\n    return head1\n\n\n\n\n# utility function to print linked list created\ndef printList(head):\n    while head.next != None:\n        print(head.val, end='->')\n        head = head.next\n    print(head.val)\n\n\n\n\nif __name__ == '__main__':\n    head = None\n    head = insertNode(head, 1)\n    head = insertNode(head, 3)\n    head = insertNode(head, 1)\n    head = insertNode(head, 2)\n    head = insertNode(head, 4)\n    head1 = head\n    head = head.next.next.next\n    headSec = None\n    headSec = insertNode(headSec, 3)\n    head2 = headSec\n    headSec.next = head\n    print('List1: ', end='')\n    printList(head1)\n    print('List2: ', end='')\n    printList(head2)\n    answerNode = intersectionPresent(head1, head2)\n    if answerNode == None:\n        print('No intersection')\n    else:\n        print('The intersection point is', answerNode.val)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>List1: 1-&gt;3-&gt;1-&gt;2-&gt;4<br>List2: 3-&gt;2-&gt;4<br>The intersection point is 2</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>O(2max(length of list1,length of list2))+O(abs(length of list1-length of list2))+O(min(length of list1,length of list2))</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Reason</em>: Finding the length of both lists takes max(length of list1, length of list2) because it is found simultaneously for both of them. Moving the head pointer ahead by a difference of them. The next one is for searching.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity:</strong> O(1)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Reason</em>: No extra space is used.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Solution 4: Optimised&nbsp;</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Approach:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The difference of length method requires various steps to work on it. Using the same concept of difference of length, a different approach can be implemented. The process is as follows:-</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>Take two dummy nodes for each list. Point each to the head of the lists.</li><li>Iterate over them. If anyone becomes null, point them to the head of the opposite lists and continue iterating until they collide.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Dry</strong> <strong>Run</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><img src=\"https://lh3.googleusercontent.com/lQGGtwWBXL3Kvl15qC71jpZwvbokF4h963ahFBTd1fAathQjnPSbpxWbCaXv8c3OjJSaWJRot_Ug9WL85_SEPy9ShJxNNCLUFHTWsjS6pQKWGbGoK4Jhpe4Ebgr4VfbCWfOQ0uHC\" width=\"438\" height=\"246\"></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nclass node {\n    public:\n        int num;\n        node* next;\n        node(int val) {\n            num = val;\n            next = NULL;\n        }\n};\n//utility function to insert node at the end of the linked list\nvoid insertNode(node* &amp;head,int val) {\n    node* newNode = new node(val);\n    \n    if(head == NULL) {\n        head = newNode;\n        return;\n    }\n    \n    node* temp = head;\n    while(temp-&gt;next != NULL) temp = temp-&gt;next;\n    \n    temp-&gt;next = newNode;\n    return;\n}\n//utility function to check presence of intersection\nnode* intersectionPresent(node* head1,node* head2) {\n    node* d1 = head1;\n    node* d2 = head2;\n    \n    while(d1 != d2) {\n        d1 = d1 == NULL? head2:d1-&gt;next;\n        d2 = d2 == NULL? head1:d2-&gt;next;\n    }\n    \n    return d1;\n}\n\n\n//utility function to print linked list created\nvoid printList(node* head) {\n    while(head-&gt;next != NULL) {\n        cout&lt;&lt;head-&gt;num&lt;&lt;\"-&gt;\";\n        head = head-&gt;next;\n    }\n    cout&lt;&lt;head-&gt;num&lt;&lt;endl;\n}\n\nint main() {\n    // creation of both lists \n    node* head = NULL;\n    insertNode(head,1);\n    insertNode(head,3);\n    insertNode(head,1);\n    insertNode(head,2);\n    insertNode(head,4);\n    node* head1 = head;\n    head = head-&gt;next-&gt;next-&gt;next;\n    node* headSec = NULL;\n    insertNode(headSec,3);\n    node* head2 = headSec;\n    headSec-&gt;next = head;\n    //printing of the lists\n    cout&lt;&lt;\"List1: \"; printList(head1);\n    cout&lt;&lt;\"List2: \"; printList(head2);\n    //checking if intersection is present\n    node* answerNode = intersectionPresent(head1,head2);\n    if(answerNode == NULL )\n    cout&lt;&lt;\"No intersection\\n\";\n    else\n    cout&lt;&lt;\"The intersection point is \"&lt;&lt;answerNode-&gt;num&lt;&lt;endl;\n    return 0;\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>List1: 1-&gt;3-&gt;1-&gt;2-&gt;4<br>List2: 3-&gt;2-&gt;4<br>The intersection point is 2</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity:</strong> O(2*max(length of list1,length of list2))</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Reason</em>: Uses the same concept of the difference of lengths of two lists.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity:</strong> O(1)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Reason</em>: No extra data structure is used</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\nclass Node {\n        int num;\n        Node next;\n        Node(int val) {\n            num = val;\n            next = null;\n        }\n}\nclass TUF{\n//utility function to insert node at the end of the linked list\nstatic Node insertNode(Node head,int val) {\n    Node newNode = new Node(val);\n    \n    if(head == null) {\n        head = newNode;\n        return head;\n    }\n    \n    Node temp = head;\n    while(temp.next != null) temp = temp.next;\n    \n    temp.next = newNode;\n    return head;\n}\n//utility function to check presence of intersection\nstatic Node intersectionPresent(Node head1,Node head2) {\n    Node d1 = head1;\n    Node d2 = head2;\n    \n    while(d1 != d2) {\n        d1 = d1 == null? head2:d1.next;\n        d2 = d2 == null? head1:d2.next;\n    }\n    \n    return d1;\n}\n\n//utility function to print linked list created\nstatic void printList(Node head) {\n    while(head.next != null) {\n    System.out.print(head.num+\"-&gt;\");\n        head = head.next;\n    }\n    System.out.println(head.num);\n}\n\npublic static void main(String args[]) {\n    // creation of both lists \n    Node head = null;\n    head=insertNode(head,1);\n    head=insertNode(head,3);\n    head=insertNode(head,1);\n    head=insertNode(head,2);\n    head=insertNode(head,4);\n    Node head1 = head;\n    head = head.next.next.next;\n    Node headSec = null;\n    headSec=insertNode(headSec,3);\n    Node head2 = headSec;\n    headSec.next = head;\n    //printing of the lists\n    System.out.print(\"List1: \"); printList(head1);\n    System.out.print(\"List2: \"); printList(head2);\n    //checking if intersection is present\n    Node answerNode = intersectionPresent(head1,head2);\n    if(answerNode == null)  \n    System.out.println(\"No intersection\\n\");\n    else\n    System.out.println(\"The intersection point is \"+answerNode.num);\n    \n}\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>List1: 1-&gt;3-&gt;1-&gt;2-&gt;4<br>List2: 3-&gt;2-&gt;4<br>The intersection point is 2</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity:</strong> O(2*max(length of list1,length of list2))</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Reason</em>: Uses the same concept of the difference of lengths of two lists.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity:</strong> O(1)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Reason</em>: No extra data structure is used</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block\" data-lang=\"python\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">class Node:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n\n\n\n\n# utility function to insert node at the end of the linked list\ndef insertNode(head, val):\n    newNode = Node(val)\n    if head == None:\n        head = newNode\n        return head\n    temp = head\n    while temp.next != None:\n        temp = temp.next\n    temp.next = newNode\n    return head\n\n\n\n\n# utility function to check presence of intersection\ndef intersectionPresent(head1, head2):\n    d1 = head1\n    d2 = head2\n    while d1 != d2:\n        d1 = head2 if d1 == None else d1.next\n        d2 = head1 if d2 == None else d2.next\n    return d1\n\n\n\n\n# utility function to print linked list created\ndef printList(head):\n    while head.next != None:\n        print(head.val, end='->')\n        head = head.next\n    print(head.val)\n\n\n\n\nif __name__ == '__main__':\n    head = None\n    head = insertNode(head, 1)\n    head = insertNode(head, 3)\n    head = insertNode(head, 1)\n    head = insertNode(head, 2)\n    head = insertNode(head, 4)\n    head1 = head\n    head = head.next.next.next\n    headSec = None\n    headSec = insertNode(headSec, 3)\n    head2 = headSec\n    headSec.next = head\n    print('List1: ', end='')\n    printList(head1)\n    print('List2: ', end='')\n    printList(head2)\n    answerNode = intersectionPresent(head1, head2)\n    if answerNode == None:\n        print('No intersection')\n    else:\n        print('The intersection point is', answerNode.val)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>List1: 1-&gt;3-&gt;1-&gt;2-&gt;4<br>List2: 3-&gt;2-&gt;4<br>The intersection point is 2</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity:</strong> O(2*max(length of list1,length of list2))</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Reason</em>: Uses the same concept of difference of lengths of two lists.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity:</strong> O(1)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Reason</em>: No extra data structure is used</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em><em>Special thanks to\u00a0<strong><a href=\"https://www.linkedin.com/in/dewanshi-paul-2515091b9\" target=\"_blank\" rel=\"noreferrer noopener\">Dewanshi Paul</a></strong>\u00a0<em>and\u00a0<em><a href=\"https://www.linkedin.com/in/imsudip/\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>Sudip Ghosh</strong></a></em></em>\u00a0</em></em><em><em>for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,\u00a0</em><a href=\"https://takeuforward.org/contribute/help-us-grow-takeuforward/\">please check out this articl</a></em>e</p></blockquote>\n<!-- /wp:quote -->",
    "category_tag": "data-structure",
    "likes": 166,
    "preview": "Problem Statement: Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return null. Ex..."
}