{
    "dislikes": 9,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:09:36 GMT+0530 (India Standard Time)",
    "slug": "count-frequency-of-each-element-in-the-array",
    "aid": "1535",
    "title": "Count frequency of each element in the array",
    "tuf_plus": "",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "hashing",
            "topic-title": "Hashing"
        }
    ],
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem statement: </strong>Given an array, we have found the number of occurrences of each element in the array.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Examples:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\"><strong>Example 1:</strong>\n<strong>Input:</strong> arr[] = {10,5,10,15,10,5};\n<strong>Output:</strong> 10  3\n\t 5  2\n        15  1\n<strong>Explanation:</strong> 10 occurs 3 times in the array\n\t      5 occurs 2 times in the array\n              15 occurs 1 time in the array\n\n<strong>Example2:</strong> \n<strong>Input:</strong> arr[] = {2,2,3,4,4,2};\n<strong>Output:</strong> 2  3\n\t3  1\n        4  2\n<strong>Explanation:</strong> 2 occurs 3 times in the array\n\t     3 occurs 1 time in the array\n             4 occurs 2 time in the array\n</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Solution</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"textColor\":\"accent\"} -->\n<p class=\"has-accent-color has-text-color\"><em>Disclaimer</em>: <em>Don\u2019t jump directly to the solution, try it out yourself first.</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Solution 1: Use of two loops</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Intuition: </strong>We can simply use two loops, in which the first loop points to one element and the second loop finds that element in the remaining array. We will keep track of the occurrence of that same element by maintaining a count variable. We also have to maintain a visited array so that it will keep track of the duplicate elements that we already count. <strong>&nbsp;</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Approach:&nbsp;</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>Make a visited array of type boolean.</li><li>Use the first loop to point to an element of the array.</li><li>Initialize the variable count to 1.</li><li>Make that index true in the visited array.</li><li>Run second loop, if we find the element then mark the visited index true and increase the count.</li><li>If the visited index is already true then skip the other steps.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><img width=\"624\" height=\"376\" src=\"https://lh5.googleusercontent.com/9s6zbhEz8A5heBSGGCEQapfPp11ge6EpDSxQIhOcbdmzDw0QTLLcCrYlba7D99HcLRi7FxIhJMrSSH4yvPDrunBIAMjtkzGauOAnN8367JvXNiz0UK2cSFIX9Y_CEkc8pwPUTzaw\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"624\" height=\"356\" src=\"https://lh3.googleusercontent.com/g9yh2jlkZsSBB-8h3p0sg_dfFphr2sKV_9pjlWf5GgUFXRUEueVdn_yE6xS30AMOqlFG08o7GAKATyI_eAczSSnPxzV1yQHuX_dBnN9oCxUu00UkGlrW56OWTvNX3GOC5VXc0yQs\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n \nvoid countFreq(int arr[], int n)\n{\n    vector&lt;bool&gt; visited(n, false);\n \n    for (int i = 0; i &lt; n; i++) {\n \n        // Skip this element if already processed\n        if (visited[i] == true)\n            continue;\n \n        // Count frequency\n        int count = 1;\n        for (int j = i + 1; j &lt; n; j++) {\n            if (arr[i] == arr[j]) {\n                visited[j] = true;\n                count++;\n            }\n        }\n        cout &lt;&lt; arr[i] &lt;&lt; \" \" &lt;&lt; count &lt;&lt; endl;\n    }\n}\n \nint main()\n{\n    int arr[] = {10,5,10,15,10,5};\n    int n = sizeof(arr) / sizeof(arr[0]);\n    countFreq(arr, n);\n    return 0;\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>10 3<br>5 2<br>15 1</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity:</strong> O(N*N)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>&nbsp;O(N)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\n \npublic class tuf {\n \npublic static void main(String args[]){  \n   \n      int arr[] ={10,5,10,15,10,5};\n      int n = arr.length;\n      countFreq(arr, n);  \n  }\npublic static void countFreq(int arr[], int n)\n{\n    boolean visited[] = new boolean[n];\n \n    for (int i = 0; i &lt; n; i++) {\n \n        // Skip this element if already processed\n        if (visited[i] == true)\n            continue;\n \n        // Count frequency\n        int count = 1;\n        for (int j = i + 1; j &lt; n; j++) {\n            if (arr[i] == arr[j]) {\n                visited[j] = true;\n                count++;\n            }\n        }\n        System.out.println(arr[i] + \" \" + count);\n    }\n}\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>10 3<br>5 2<br>15 1</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity:</strong> O(N*N)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>&nbsp;O(N)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block\" data-lang=\"python\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">def countFreq(arr, n):\n    visited = [False] * n\n    for i in range(n):\n        if (visited[i] == True):\n            continue\n        count = 1\n        for j in range(i + 1, n):\n            if (arr[i] == arr[j]):\n                visited[j] = True\n                count += 1\n        print(arr[i], count)\n\n\nif __name__ == \"__main__\":\n    arr = [10,5,10,15,10,5]\n    n = len(arr)\n    countFreq(arr, n)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>10 3<br>5 2<br>15 1</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity:</strong> O(N*N)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>&nbsp;O(N)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Solution 2: Using Map</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Intuition:</strong> We can use a map of value and frequency pair, in which we can easily update the frequency of an element if it is already present in the map, if it is not present in the map then insert it in the map with frequency as 1. After completing all the iterations, print the value frequency pair.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Approach:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>Take a unordered_map/HashMap of &lt;Integer, Integer> pair.</li><li>Use a for loop to iterate the array.</li><li>If the element is not present in the map then insert it with frequency 1, otherwise increase the existing frequency by 1.</li><li>Print the value frequency pair.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><img width=\"624\" height=\"387\" src=\"https://lh3.googleusercontent.com/7C_VnntfuEtXBJuCkZWavzdhEX715U6ckYvkFPw3w8mCzV1c8ayHCvBngOQyMbxKGjKzo4du2hdu_d1DEToNgVD2dpNtUh0_wL1XVTIyLsgjnuPBYan4Vx2pMkdkjZbe8Cd1oiww\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n \nvoid Frequency(int arr[], int n)\n{\n    unordered_map&lt;int, int&gt; map;\n \n    for (int i = 0; i &lt; n; i++)\n        map[arr[i]]++;\n \n    // Traverse through map and print frequencies\n    for (auto x : map)\n        cout &lt;&lt; x.first &lt;&lt; \" \" &lt;&lt; x.second &lt;&lt; endl;\n}\n \nint main()\n{\n    int arr[] = {10,5,10,15,10,5};\n    int n = sizeof(arr) / sizeof(arr[0]);\n    Frequency(arr, n);\n    return 0;\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>15 1<br>10 3<br>  5 2</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity:</strong> O(N)<strong> </strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(n)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\n \npublic class tuf {\n \npublic static void main(String args[]){  \n   \n   int arr[] = {10,5,10,15,10,5};\n     int n = arr.length;\n     Frequency(arr, n);\n  }\nstatic void Frequency(int arr[], int n)\n{\n    Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();\n \n    for (int i = 0; i &lt; n; i++)\n    {\n        if (map.containsKey(arr[i]))\n        {\n            map.put(arr[i], map.get(arr[i]) + 1);\n        }\n        else\n        {\n            map.put(arr[i], 1);\n        }\n    }\n    // Traverse through map and print frequencies\n    for (Map.Entry&lt;Integer,Integer&gt; entry : map.entrySet())\n    {\n        System.out.println(entry.getKey() + \" \" + entry.getValue());\n    }\n}\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p> 5 2<br>10 3<br>15 1</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity:</strong> O(N)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(n)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block\" data-lang=\"python\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">def Frequency(arr, n):\n    mp = {}\n    for i in range(n):\n        if arr[i] in mp:\n            mp[arr[i]] += 1\n        else:\n            mp[arr[i]] = 1\n    for x in mp:\n        print(x, mp[x])\n\n\nif __name__ == '__main__':\n    arr = [10, 5, 10, 15, 10, 5]\n    n = len(arr)\n    Frequency(arr, n)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p> 5 2<br>10 3<br>15 1</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity:</strong> O(N)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(n)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to\u00a0<strong><a href=\"https://www.linkedin.com/in/prashant-sahu-2691a719a\" target=\"_blank\" rel=\"noreferrer noopener\">Prashant Sahu</a></strong> <em><em>and\u00a0<a href=\"https://www.linkedin.com/in/imsudip/\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>Sudip Ghosh</strong></a></em></em>\u00a0for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,\u00a0</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->",
    "category_tag": "data-structure",
    "likes": 483,
    "preview": "Problem statement: Given an array, we have found the number of occurrences of each element in the array. Examples: Example 1: Input: arr[] = {10,5,10,15,10,5}; Output: 10 3 5 2 15 1 Explanation: 10..."
}