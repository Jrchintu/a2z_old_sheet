{
    "dislikes": 2,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:10:00 GMT+0530 (India Standard Time)",
    "slug": "binary-search-explained",
    "aid": "1644",
    "title": "Binary Search: Explained",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/search-x-in-sorted-array",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "binary-search",
            "topic-title": "Binary Search"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "recursion",
            "topic-title": "Recursion"
        }
    ],
    "content": "<!-- wp:paragraph -->\n<p>This is the very first article of the Binary Search series. Until now, we have learned the <a href=\"https://takeuforward.org/data-structure/linear-search-in-c/\" target=\"_blank\" rel=\"noopener\" title=\"\">linear search</a> algorithm. Now, in this article, we will discuss another search algorithm i.e. the Binary Search algorithm. The flow of this article will be the following:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>A real-life example of Binary Search</strong></li><li><strong>Coding problem example</strong></li><li><strong>Iterative code implementation of Binary Search</strong></li><li><strong>Recursive code implementation of Binary Search</strong></li><li><strong>Time complexity</strong></li><li><strong>Overflow case</strong></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading -->\n<h2><strong>A real-life example of Binary Search:</strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Problem statement: </strong>Assume there is a dictionary and we have to find the word \u201craj\u201d.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Method 1: </strong>One of the many ways is to check every possible page of the entire dictionary and see if we can find the word \u201craj\u201d. This technique is known as <a href=\"https://takeuforward.org/data-structure/linear-search-in-c/\">linear search</a>. <em><br></em><em>Basically, we can traverse from the first till the end to find the target value in the search space i.e. the entire dictionary in our example.</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Method 2: </strong>In this case, we will optimize our search by using the property of a dictionary i.e. a dictionary is always in the sorted order.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>We will first try to open the dictionary in such a way that it is roughly divided into two parts. Then, we will check the left page. Now, assume the words on the left page starts with \u2018s\u2019. We can certainly say that our target word i.e. \u201craj\u201d definitely comes before the words start with \u2018s\u2019. So, now, we need not search in the entire dictionary rather we will only search in the left half.</li><li>Now, we will do the same thing with the left half. First, we will divide it into 2 halves and then try to locate which half contains the word \u201craj\u201d. Eventually, after certain steps, we will end up finding the word \u201craj\u201d.<br></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>This is a typical real-life example of binary search.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Note:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>Binary search is only applicable in a sorted search space. The sorted search space does not necessarily have to be a sorted array. It can be anything but the search space must be sorted.</li><li>In binary search, we generally divide the search space into two equal halves and then try to locate which half contains the target. According to that, we shrink the search space size.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading -->\n<h2><strong>Coding problem example:</strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Problem statement:</strong> You are given a sorted array of integers and a target, your task is to search for the target in the given array. Assume the given array does not contain any duplicate numbers.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Let\u2019s say the given array is = {3, 4, 6, 7, 9, 12, 16, 17} and target = 6.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Solution:</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:html -->\n<!-- This is Practice Section-->\n<div class=\"practice\">\n<span><strong>Practice: </strong></span>\n<div class=\"problem-buttons\">\n\n<!-- Add Problem Link inside href -->\n<a href=\"https://bit.ly/41wXCne\" target=\"_blank\" rel=\"noopener\">\n<span>Solve Problem</span>\n<img src=\"https://static.takeuforward.org/wp/uploads/2023/04/Group-11-5.png\" alt=\"code-studio\">\n</a>\n</div>\n</div>\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\nyourself first. </em></p>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<div class=\"horizontal_navbar_dsa_article\">\n<div class=\"grid_container_two\">\n<a href=\"#brute-force-approach\" class=\"two-boxes box-a\">\nIterative Implementation\n</a>\n<a href=\"#optimal-approach\" class=\"two-boxes box-c\">\nRecursive Implementation\n</a>\n<a href=\"#dsa_article_video_explanation\" class=\"three-boxes box-d\">\n<svg width=\"26\" height=\"26\" viewBox=\"0 0 20 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M8 10L13.19 7L8 4V10ZM19.56 2.17C19.69 2.64 19.78 3.27 19.84 4.07C19.91 4.87 19.94 5.56 19.94 6.16L20 7C20 9.19 19.84 10.8 19.56 11.83C19.31 12.73 18.73 13.31 17.83 13.56C17.36 13.69 16.5 13.78 15.18 13.84C13.88 13.91 12.69 13.94 11.59 13.94L10 14C5.81 14 3.2 13.84 2.17 13.56C1.27 13.31 0.69 12.73 0.44 11.83C0.31 11.36 0.22 10.73 0.16 9.93C0.0900001 9.13 0.0599999 8.44 0.0599999 7.84L0 7C0 4.81 0.16 3.2 0.44 2.17C0.69 1.27 1.27 0.69 2.17 0.44C2.64 0.31 3.5 0.22 4.82 0.16C6.12 0.0899998 7.31 0.0599999 8.41 0.0599999L10 0C14.19 0 16.8 0.16 17.83 0.44C18.73 0.69 19.31 1.27 19.56 2.17Z\" fill=\"red\"></path>\n</svg>\n\n</a>\n<div class=\"box-e tooltip\">\n<svg viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M12.842 9.25L11.9577 10.17C11.2502 10.89 10.8081 11.5 10.8081 13H8.84297V12.5C8.84297 11.39 9.28511 10.39 9.99255 9.67L11.2109 8.41C11.5745 8.05 11.7906 7.55 11.7906 7C11.7906 6.46957 11.5836 5.96086 11.2151 5.58579C10.8465 5.21071 10.3467 5 9.82552 5C9.30434 5 8.80451 5.21071 8.43598 5.58579C8.06745 5.96086 7.86041 6.46957 7.86041 7H5.89531C5.89531 5.93913 6.30938 4.92172 7.04644 4.17157C7.7835 3.42143 8.78316 3 9.82552 3C10.8679 3 11.8675 3.42143 12.6046 4.17157C13.3417 4.92172 13.7557 5.93913 13.7557 7C13.7543 7.84324 13.4259 8.65183 12.842 9.25ZM10.8081 17H8.84297V15H10.8081M9.82552 0C8.53521 0 7.25754 0.258658 6.06545 0.761205C4.87337 1.26375 3.79021 2.00035 2.87783 2.92893C1.03519 4.8043 0 7.34784 0 10C0 12.6522 1.03519 15.1957 2.87783 17.0711C3.79021 17.9997 4.87337 18.7362 6.06545 19.2388C7.25754 19.7413 8.53521 20 9.82552 20C12.4314 20 14.9306 18.9464 16.7732 17.0711C18.6158 15.1957 19.651 12.6522 19.651 10C19.651 4.47 15.2296 0 9.82552 0Z\" fill=\"black\"></path>\n</svg>\n<div class=\"bottom\">\n<p>Expand any one approach by clicking the given options in the bar. Clicking one approach on bar,\ncloses all other expands. You can manually expand more than one approach at a time</p>\n<i></i>\n</div>\n\n</div>\n</div>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<div class=\"dsa_article_dropdown_approachs \">\n\n<!-- Brute Force Approach Starts from here -->\n<div id=\"brute-force-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nIterative Implementation\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n<p>We will use a couple of pointers i.e. <strong>low</strong> and <strong>high</strong> to apply binary search. Initially, the low pointer should point to the first index and the high pointer should point to the last index.</p>\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/06/Screenshot-2023-06-21-224435.png\" alt=\"\" class=\"wp-image-11390\"></figure>\n<p><strong>Search space: </strong>The entire area between the low and the high pointer(<em>including them</em>) is considered the search space. Here, the search space is sorted.</p>\n<h3><strong>Algorithm:</strong></h3>\n<p>Now, we will apply the binary search algorithm in the given array:</p>\n<ul><li><strong>Step 1: Divide the search space into 2 halves:</strong><strong><br></strong>In order to divide the search space, we need to find the middle point of it. So, we will take a <strong>\u2018mid\u2019 </strong>pointer and do the following:<br><strong>mid = (low+high) // 2 ( \u2018//\u2019 refers to integer division)</strong><strong><br></strong></li><li><strong>Step 2: Compare the middle element with the target:</strong><strong><br></strong>In this step, we can observe 3 different cases:<ul><li><strong>If arr[mid] == target: </strong>We have found the target. From this step, we can return the index of the target possibly.</li><li><strong>If target &gt; arr[mid]: </strong>This case signifies our target is located on the right half of the array. So, the next search space will be the right half.</li><li><strong>If target &lt; arr[mid]: </strong>This case signifies our target is located on the left half of the array. So, the next search space will be the left half.<br></li></ul></li><li><strong>Step 3: Trim down the search space:</strong><strong><br></strong>Based on the probable location of the target we will trim down the search space.<ul><li>If the target occurs on the left, we should set the high pointer to mid-1. Thus the left half will be the next search space.</li><li>Similarly, if the target occurs on the right, we should set the low pointer to mid+1. Thus the right half will be the next search space.</li></ul></li></ul>\n<p>The above steps will continue until either <strong><em>we found the target</em></strong> or <strong><em>the search space becomes invalid i.e. high &lt; low</em></strong>. By definition of search space, it will lose its existence if the high pointer is appearing before the low pointer.<br><strong>Dry-run:</strong></p>\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/06/Screenshot-2023-06-21-225946.png\" alt=\"\" class=\"wp-image-11391\"></figure>\n<p><strong>Note: </strong>If the target is not present in the array, low and high will cross each other.</p>\n<p><strong>Note: </strong><em>For a better understanding, please watch the video at the bottom of the page.</em></p>\n<h3><strong>Iterative implementation:</strong></h3>\n<ul><li>Initially, the pointers low and high will be 0 and n-1(<em>where n = size of the given array</em>) respectively.</li><li>Now inside a loop, we will perform the 3 steps discussed above in the algorithm section.</li><li>The loop will run until either we fount the target or any of the pointers crosses the other.</li></ul>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint binarySearch(vector&lt;int&gt;&amp; nums, int target) {\n    int n = nums.size(); //size of the array\n    int low = 0, high = n - 1;\n\n    // Perform the steps:\n    while (low &lt;= high) {\n        int mid = (low + high) / 2;\n        if (nums[mid] == target) return mid;\n        else if (target &gt; nums[mid]) low = mid + 1;\n        else high = mid - 1;\n    }\n    return -1;\n}\n\nint main()\n{\n    vector&lt;int&gt; a = {3, 4, 6, 7, 9, 12, 16, 17};\n    int target = 6;\n    int ind = binarySearch(a, target);\n    if (ind == -1) cout &lt;&lt; \"The target is not present.\" &lt;&lt; endl;\n    else cout &lt;&lt; \"The target is at index: \"\n                  &lt;&lt; ind &lt;&lt; endl;\n    return 0;\n}\n\n</code>\n</pre>\n<p>\nOutput: The target is at index: 2\n\n\n</p>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\npublic class tUf {\n\n    public static int binarySearch(int[] nums, int target) {\n        int n = nums.length; //size of the array.\n        int low = 0, high = n - 1;\n\n        // Perform the steps:\n        while (low &lt;= high) {\n            int mid = (low + high) / 2;\n            if (nums[mid] == target) return mid;\n            else if (target &gt; nums[mid]) low = mid + 1;\n            else high = mid - 1;\n        }\n        return -1;\n    }\n\n    public static void main(String[] args) {\n        int[] a = {3, 4, 6, 7, 9, 12, 16, 17};\n        int target = 6;\n        int ind = binarySearch(a, target);\n        if (ind == -1)\n            System.out.println(\"The target is not present.\");\n        else\n            System.out.println(\"The target is at index: \" + ind);\n    }\n} \n</code>\n</pre>\n<p>\nOutput: The target is at index: 2\n\n\n\n</p>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\ndef binarySearch(nums: [int], target: int):\n    n = len(nums)  # size of the array\n    low = 0\n    high = n - 1\n\n    # Perform the steps:\n    while low &lt;= high:\n        mid = (low + high) // 2\n        if nums[mid] == target:\n            return mid\n        elif target &gt; nums[mid]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\nif __name__ == \"__main__\":\n    a = [3, 4, 6, 7, 9, 12, 16, 17]\n    target = 6\n    ind = binarySearch(a, target)\n    if ind == -1:\n        print(\"The target is not present.\")\n    else:\n        print(\"The target is at index:\", ind)\n</code>\n</pre>\n<p>\nOutput: The target is at index: 2\n\n\n\n</p>\n</div>\n<div class=\"code-block \" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\nfunction binarySearch(nums, target) {\n    let n = nums.length; // size of the array\n    let low = 0, high = n - 1;\n\n    // Perform the steps:\n    while (low &lt;= high) {\n        let mid = Math.floor((low + high) / 2);\n        if (nums[mid] === target) return mid;\n        else if (target &gt; nums[mid]) low = mid + 1;\n        else high = mid - 1;\n    }\n    return -1;\n}\n\nlet a = [3, 4, 6, 7, 9, 12, 16, 17];\nlet target = 6;\nlet ind = binarySearch(a, target);\nif (ind === -1) console.log(\"The target is not present.\");\nelse console.log(\"The target is at index:\", ind);\n\n\n</code>\n</pre>\n<p>\nOutput: The target is at index: 2\n\n\n\n</p>\n</div>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n</p><h2><strong>Time Complexity:</strong></h2>\n<p>In the algorithm, in every step, we are basically dividing the search space into 2 equal halves. This is actually equivalent to dividing the size of the array by 2, every time. After a certain number of divisions, the size will reduce to such an extent that we will not be able to divide that anymore and the process will stop. The number of total divisions will be equal to the time complexity.</p>\n<p>Let\u2019s derive the number of divisions mathematically,</p>\n<pre class=\"wp-block-preformatted\">If a number n can be divided by 2 for x times:\n\t2^x = n\nTherefore, x = logn (base is 2)</pre>\n<p>So the overall time complexity is O(logN), where N = size of the given array.</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Brute Force Approach Ends here -->\n\n<!-- Optimal Approach Starts from here -->\n\n<div id=\"optimal-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nRecursive Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n<h2><strong>Recursive implementation:</strong></h2>\n<p><strong>Pre-requisite: </strong><a href=\"https://youtube.com/playlist?list=PLgUwDviBIf0oF6QL8m22w1hIDC1vJ_BHz\" target=\"_blank\" rel=\"noopener\" title=\"\">Recursion section</a></p>\n<h3><strong>Approach:</strong></h3>\n<p>Assume, the recursive function will look like this: <strong>binarySearch(nums, low, high)</strong>. It basically takes 3 parameters i.e. the array, the low pointer, and the high pointer. In each recursive call, we will change the value of low and high pointers to trim down the search space. Except for this, the rest of the steps will be the same.</p>\n<p>The steps are as follows:</p>\n<ol><li><strong>Step 1: Divide the search space into 2 halves:</strong><strong><br></strong>In order to divide the search space, we need to find the middle point of it. So, we will take a <strong>\u2018mid\u2019 </strong>pointer and do the following:<br><strong>mid = (low+high) // 2 ( \u2018//\u2019 refers to integer division)</strong><strong><br></strong></li><li><strong>Step 2: Compare the middle element with the target and trim down the search space:</strong><strong><br></strong>In this step, we can observe 3 different cases:<ol><li><strong>If arr[mid] == target: </strong>We have found the target. From this step, we can return the index of the target, and the recursion will end.</li><li><strong>If target &gt; arr[mid]: </strong>This case signifies our target is located on the right half of the array. So, the next recursion call will be <strong>binarySearch(nums, mid+1, high)</strong>.</li><li><strong>If target &lt; arr[mid]: </strong>This case signifies our target is located on the left half of the array. So, the next recursion call will be <strong>binarySearch(nums, low, mid-1)</strong>.<br></li></ol></li><li><strong>Base case: </strong>The base case of the recursion will be <strong>low &gt; high</strong>. If <strong>(low &gt; high)</strong>, the search space becomes invalid which means the target is not present in the array.</li></ol>\n<p><strong>Note: </strong><em>For a better understanding, please watch the video at the bottom of the page.</em></p>\n\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint binarySearch(vector&lt;int&gt;&amp; nums, int low, int high, int target) {\n\n    if (low &gt; high) return -1; //Base case.\n\n    // Perform the steps:\n    int mid = (low + high) / 2;\n    if (nums[mid] == target) return mid;\n    else if (target &gt; nums[mid])\n        return binarySearch(nums, mid + 1, high, target);\n    return binarySearch(nums, low, mid - 1, target);\n}\n\nint search(vector&lt;int&gt;&amp; nums, int target) {\n    return binarySearch(nums, 0, nums.size() - 1, target);\n}\n\nint main()\n{\n    vector&lt;int&gt; a = {3, 4, 6, 7, 9, 12, 16, 17};\n    int target = 6;\n    int ind = search(a, target);\n    if (ind == -1) cout &lt;&lt; \"The target is not present.\" &lt;&lt; endl;\n    else cout &lt;&lt; \"The target is at index: \"\n                  &lt;&lt; ind &lt;&lt; endl;\n    return 0;\n}\n</code>\n</pre>\n<p>\nOutput: The target is at index: 2\n\n\n\n</p>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\npublic class tUf {\n\n    public static int binarySearch(int[] nums, int low, int high, int target) {\n        if (low &gt; high) return -1; //Base case.\n\n        // Perform the steps:\n        int mid = (low + high) / 2;\n        if (nums[mid] == target) return mid;\n        else if (target &gt; nums[mid])\n            return binarySearch(nums, mid + 1, high, target);\n        return binarySearch(nums, low, mid - 1, target);\n    }\n\n    public static int search(int[] nums, int target) {\n        return binarySearch(nums, 0, nums.length - 1, target);\n    }\n\n    public static void main(String[] args) {\n        int[] a = {3, 4, 6, 7, 9, 12, 16, 17};\n        int target = 6;\n        int ind = search(a, target);\n        if (ind == -1)\n            System.out.println(\"The target is not present.\");\n        else\n            System.out.println(\"The target is at index: \" + ind);\n    }\n}\n</code>\n</pre>\n<p>\nOutput: The target is at index: 2\n\n</p>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\ndef binarySearch(nums: [int], low: int, high: int, target: int):\n    if low &gt; high:\n        return -1  # Base case\n    \n    # Perform the steps:\n    mid = (low + high) // 2\n    if nums[mid] == target:\n        return mid\n    elif target &gt; nums[mid]:\n        return binarySearch(nums, mid + 1, high, target)\n    return binarySearch(nums, low, mid - 1, target)\n\ndef search(nums: [int], target: int):\n    return binarySearch(nums, 0, len(nums) - 1, target)\n\nif __name__ == \"__main__\":\n    a = [3, 4, 6, 7, 9, 12, 16, 17]\n    target = 6\n    ind = search(a, target)\n    if ind == -1:\n        print(\"The target is not present.\")\n    else:\n        print(\"The target is at index:\", ind) \n\n\n</code>\n</pre>\n<p>\nOutput: The target is at index: 2\n\n\n</p>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\nfunction binarySearch(nums, low, high, target) {\n    if (low &gt; high) return -1; // Base case.\n\n    // Perform the steps:\n    let mid = Math.floor((low + high) / 2);\n    if (nums[mid] === target) return mid;\n    else if (target &gt; nums[mid])\n        return binarySearch(nums, mid + 1, high, target);\n    return binarySearch(nums, low, mid - 1, target);\n}\n\nfunction search(nums, target) {\n    return binarySearch(nums, 0, nums.length - 1, target);\n}\n\nlet a = [3, 4, 6, 7, 9, 12, 16, 17];\nlet target = 6;\nlet ind = search(a, target);\nif (ind === -1) console.log(\"The target is not present.\");\nelse console.log(\"The target is at index:\", ind);\n</code>\n</pre>\n<p>\nOutput: The target is at index: 2\n\n\n</p>\n</div>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n</p><h2><strong>Time Complexity:</strong></h2>\n<p>In the algorithm, in every step, we are basically dividing the search space into 2 equal halves. This is actually equivalent to dividing the size of the array by 2, every time. After a certain number of divisions, the size will reduce to such an extent that we will not be able to divide that anymore and the process will stop. The number of total divisions will be equal to the time complexity.</p>\n<p>Let\u2019s derive the number of divisions mathematically,</p>\n<pre class=\"wp-block-preformatted\">If a number n can be divided by 2 for x times:\n\t2^x = n\nTherefore, x = logn (base is 2)</pre>\n<p>So the overall time complexity is O(logN), where N = size of the given array.</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n<details>\n<summary class=\"main-summary\">\n<span>\nVideo Explanation\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"yt-video-wrapper\">\n\n<!-- Insert iframe embed Link of Youtube Video-->\n<iframe class=\"lazy-loaded\" loading=\"lazy\" title=\"Binary Search\" width=\"810\" height=\"456\" data-lazy-type=\"iframe\" data-src=\"https://www.youtube.com/embed/MHf6awe89xw\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\" src=\"https://www.youtube.com/embed/MHf6awe89xw?feature=oembed\"></iframe><noscript>\n<iframe loading=\"lazy\" title=\"Binary Search\" width=\"810\" height=\"456\" src=\"https://www.youtube.com/embed/MHf6awe89xw\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe></noscript>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script>\n\nconst codeSections = document.querySelectorAll('.code-section');\n\n// Get last selected language from localStorage or set default value\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\n// Update last selected language for all sections and store in localStorage\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\n// Handle copy button click event\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\n// Set initial state of the tabs\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<script>\nconst codeSections = document.querySelectorAll('.code-section');\n\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script src=\"https://takeuforward.org/UXApproachDropDowns/2ApproachJSScript.js\"></script>\n<!-- /wp:html -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to\u00a0<strong><a href=\"https://www.linkedin.com/in/sai-bargav-nellepalli-74799b1bb/\" target=\"_blank\" rel=\"noreferrer noopener\">Sai bargav Nellepalli</a></strong>\u00a0and <em><strong><a href=\"https://www.linkedin.com/in/kriti39/\" target=\"_blank\" rel=\"noreferrer noopener\">KRITIDIPTA GHOSH</a></strong></em></em> <em>for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,\u00a0</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->",
    "category_tag": "data-structure",
    "likes": 402,
    "preview": "This is the very first article of the Binary Search series. Until now, we have learned the linear search algorithm. Now, in this article, we will discuss another search algorithm i.e. the Binary Se..."
}