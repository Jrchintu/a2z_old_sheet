{
    "dislikes": 4,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:09:40 GMT+0530 (India Standard Time)",
    "slug": "number-of-distinct-substrings-in-a-string-using-trie",
    "aid": "1553",
    "title": "Number of Distinct Substrings in a String Using Trie",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/number-of-distinct-substrings-in-a-string",
    "topics": [
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "string",
            "topic-title": "String"
        },
        {
            "topic-id": "trie",
            "topic-title": "Trie"
        }
    ],
    "content": "<p><strong>Problem Statement: </strong>  Implement a program that takes a string 'S' as input and returns the number of distinct substrings of the given string, including the empty substring. Use a trie data structure to accomplish this.</p>\n<p>\nNote:\n<ol><li>\nA string \u2018B\u2019 is considered a substring of a string \u2018A\u2019 if \u2018B\u2019 can be obtained by deleting zero or more characters from the start and end of \u2018A\u2019.</li><li>Two strings \u2018X\u2019 and \u2018Y\u2019 are considered different if there is at least one index \u2018i\u2019 such that the character of \u2018X\u2019 at index \u2018i\u2019 is different from the character of \u2018Y\u2019 at index \u2018i\u2019 (i.e., X[i] != Y[i]).</li></ol>\n</p>\n\n\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n    <details class=\"article_example_details\">\n        <summary class=\"article_example_summary\">\n            <span><strong>\n                    Examples\n                </strong>\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"atricle_example_content\">\n            <pre class=\"wp-block-preformatted\">\n                <span><strong>Example 1:</strong></span>\n                <span><strong>Input:</strong> Input String = [\u2018abab\u2019]</span>\n                \n                <span><strong>Output:</strong> 8</span>\n                \n                <span><strong>Explanation: </strong>All possible substring of \u2018abab\u2019 are:</span>\n                <ol><li>\u201c\u201d</li>\n                <li>\u201ca\u201d</li>\n                <li>\u201cb\u201d</li>\n                <li>\u201cab\u201d</li>\n                <li>\u201caba\u201d</li>\n                <li>\u201cabab\u201d</li>\n                <li>\u201cbab\u201d</li>\n                <li>\u201cba\u201d</li></ol>\n                         \n                <span><strong>Example 2:</strong></span>\n                <span><strong>Input:</strong> Input String = [\u201cbob\u201d]\n                </span>                \n               \n                <span><strong>Output: </strong>7</span>\n                \n                <span><strong>Explanation: </strong> All possible substring of \u2018bob\u2019 are:</span>\n                <ol><li>\u201c\u201d</li>\n                <li>\u201cb\u201d</li>\n                <li>\u201cbo\u201d</li>\n                <li>\u201cbob\u201d</li>\n                <li>\u201co\u201d</li>\n                <li>\u201cob\u201d</li>\n                <li>\u201cb\u201d</li></ol>\n                \n\n            </pre>\n        </div>\n    </details>\n</div>\n\n\n<!-- This is Practice Section-->\n<div class=\"practice\">\n    <span><strong>Practice: </strong></span>\n    <div class=\"problem-buttons\">\n\n         <!--Add Problem Link inside href -->\n        <a href=\"https://www.codingninjas.com/studio/problems/count-distinct-substrings_985292?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf\" target=\"_blank\" rel=\"noopener\">\n            <span>Solve Problem</span>\n            <img src=\"https://takeuforward-content-images.s3.ap-south-1.amazonaws.com/content/Group-11-5-pFOq-8ga\" alt=\"code-studio\">\n        </a>\n    </div>\n    \n</div>\n\n\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out yourself first. </em></p>\n\n\n<!-- This is Approaches Drop-Down -->\n<div class=\"dsa_article_dropdown_approachs \">\n\n    <!-- Approach - 1 Starts from here -->\n    <div id=\"brute-force-approach\">\n        <details>\n            <summary class=\"main-summary\">\n                <span>\n                    <!-- Change Name Here -->\n                   Brute Force Approach \n                </span>\n                <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                    <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                    </path>\n                </svg>\n            </summary>\n            <div class=\"common-drops\">\n                <details class=\"secondary-details\" open=\"\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Algorithm / Intuition\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <div class=\"approach-algorithm\">\n                        \n                        <p>To find all the distinct substrings of a given string we iterate through the string and construct substrings starting from each character. Add each substring created to a set to only store the unique substrings.</p>\n\n                        <p><strong>Algorithm:</strong></p>\n                        <p><strong>Step 1:</strong> Initialise an empty set to store distinct substrings.</p>\n                        \n                        <p><strong>Step 2:</strong>  Iterate through each character of the string. Start from the first character and iterate through each subsequent character.</p>\n                                               \n                        <p><strong>Step 3:</strong> For each starting character, construct all possible starting from that character using nested loops:\n                        <ol><li>The outer loop iterates over each character, acting as the starting point of the substring.</li><li>The inner loop iterates over the subsequent characters to construct the substring.</li><li>Add each constructed substring to the set.</li></ol></p>\n                        \n                        <p><strong>Step 4: </strong>Return the set containing all distinct substrings of the given string.</p>\n                        \n                    </div>\n                </details>\n                <details class=\"code-section secondary-details\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Code\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <div class=\"code-tabs\">\n                        <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n                        <button class=\"code-tab\" data-lang=\"java\">Java</button>\n                        <button class=\"code-tab\" data-lang=\"python\">Python</button>\n                        <button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n                        <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\"\n                            xmlns=\"http://www.w3.org/2000/svg\">\n                            <path\n                                d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n                            </path>\n                        </svg>\n                    </div>\n                    <div class=\"code-content\">\n                        <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n                            <pre class=\"wp-block-code\">\n                                <code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;iostream&gt;\n#include &lt;set&gt;\n#include &lt;string&gt;\nusing namespace std;\n\n// Function to count all distinct\n// substrings of a given string\nset&lt;string&gt; countDistinctSubstrings(const string&amp; s) {\n    // Set to store\n    // distinct substrings\n    set&lt;string&gt; st;\n\n    // Length of the\n    // input string\n    int n = s.length();\n\n    // Iterate over each\n    // character in the string\n    for (int i = 0; i &lt; n; i++) {\n        // Initialize an empty string\n        // to store the current substring\n        string str = &quot;&quot;;\n\n        // Iterate over the remaining characters \n        // in the string starting from index i\n        for (int j = i; j &lt; n; j++) {\n            // Append the current\n            // character to the substring\n            str += s[j];\n\n            // Insert the current\n            // substring into the set\n            st.insert(str);\n        }\n    }\n\n    // Return the set containing\n    // all distinct substrings\n    return st;\n}\n\nint main() {\n    string s = &quot;striver&quot;;\n    cout &lt;&lt; &quot;Given String: &quot; &lt;&lt; s &lt;&lt; endl;\n\n    // Call the function to\n    // count distinct substrings\n    set&lt;string&gt; substrings = countDistinctSubstrings(s);\n    int count = 0;\n    // Print the distinct substrings\n    cout &lt;&lt; &quot;Distinct Substrings:&quot; &lt;&lt; endl;\n    for (const auto&amp; substr : substrings) {\n        cout &lt;&lt; substr &lt;&lt; endl;\n        count ++;\n    }\n    // Count + 1 as we have to count\n    // the empty string as well\n    cout &lt;&lt; &quot;Number of distinct substrings: &quot;&lt;&lt; count + 1&lt;&lt; endl;\n\n    return 0;\n}\n                                </code>\n                            </pre>\n                        </div>\n                        <div class=\"code-block \" data-lang=\"java\">\n                            <pre class=\"wp-block-code\">\n                                <code lang=\"java\" class=\"language-java\">\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class Main {\n    // Function to count all distinct\n    // substrings of a given string\n    static Set&lt;String&gt; countDistinctSubstrings(String s) {\n        // Set to store\n        // distinct substrings\n        Set&lt;String&gt; st = new HashSet&lt;&gt;();\n\n        // Length of the\n        // input string\n        int n = s.length();\n\n        // Iterate over each\n        // character in the string\n        for (int i = 0; i &lt; n; i++) {\n            // Initialize an empty string\n            // to store the current substring\n            StringBuilder str = new StringBuilder();\n\n            // Iterate over the remaining characters\n            // in the string starting from index i\n            for (int j = i; j &lt; n; j++) {\n                // Append the current\n                // character to the substring\n                str.append(s.charAt(j));\n\n                // Insert the current\n                // substring into the set\n                st.add(str.toString());\n            }\n        }\n\n        // Return the set containing\n        // all distinct substrings\n        return st;\n    }\n\n    public static void main(String[] args) {\n        String s = &quot;striver&quot;;\n        System.out.println(&quot;Given String: &quot; + s);\n\n        // Call the function to\n        // count distinct substrings\n        Set&lt;String&gt; substrings = countDistinctSubstrings(s);\n        int count = 0;\n\n        // Print the distinct substrings\n        System.out.println(&quot;Distinct Substrings:&quot;);\n        for (String substr : substrings) {\n            System.out.println(substr);\n            count++;\n        }\n\n        // Count + 1 as we have to count\n        // the empty string as well\n        System.out.println(&quot;Number of distinct substrings: &quot; + (count + 1));\n    }\n}\n\n                                </code>\n                            </pre>\n                        </div>\n                        <div class=\"code-block\" data-lang=\"python\">\n                            <pre class=\"wp-block-code\">\n                                <code lang=\"python\" class=\"language-python\">\n# Function to count all distinct\n# substrings of a given string\ndef count_distinct_substrings(s):\n    # Set to store\n    # distinct substrings\n    st = set()\n\n    # Length of the\n    # input string\n    n = len(s)\n\n    # Iterate over each\n    # character in the string\n    for i in range(n):\n        # Initialize an empty string\n        # to store the current substring\n        substr = &quot;&quot;\n\n        # Iterate over the remaining characters \n        # in the string starting from index i\n        for j in range(i, n):\n            # Append the current\n            # character to the substring\n            substr += s[j]\n\n            # Insert the current\n            # substring into the set\n            st.add(substr)\n\n    # Return the set containing\n    # all distinct substrings\n    return st\n\nif __name__ == &quot;__main__&quot;:\n    s = &quot;striver&quot;\n    print(&quot;Given String:&quot;, s)\n\n    # Call the function to\n    # count distinct substrings\n    substrings = count_distinct_substrings(s)\n    count = 0\n\n    # Print the distinct substrings\n    print(&quot;Distinct Substrings:&quot;)\n    for substr in substrings:\n        print(substr)\n        count += 1\n\n    # Count + 1 as we have to count\n    # the empty string as well\n    print(&quot;Number of distinct substrings:&quot;, count + 1)\n                                </code>\n                            </pre>\n                        </div>\n                         <div class=\"code-block\" data-lang=\"javascript\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"javascript\" class=\"language-javascript\">\n// Function to count all distinct\n// substrings of a given string\nfunction countDistinctSubstrings(s) {\n    // Set to store\n    // distinct substrings\n    const st = new Set();\n\n    // Length of the\n    // input string\n    const n = s.length;\n\n    // Iterate over each\n    // character in the string\n    for (let i = 0; i &lt; n; i++) {\n        // Initialize an empty string\n        // to store the current substring\n        let str = &quot;&quot;;\n\n        // Iterate over the remaining characters \n        // in the string starting from index i\n        for (let j = i; j &lt; n; j++) {\n            // Append the current\n            // character to the substring\n            str += s[j];\n\n            // Insert the current\n            // substring into the set\n            st.add(str);\n        }\n    }\n\n    // Return the set containing\n    // all distinct substrings\n    return st;\n}\n\n// Main function to test the code\nfunction main() {\n    const s = &quot;striver&quot;;\n    console.log(&quot;Given String: &quot; + s);\n\n    // Call the function to\n    // count distinct substrings\n    const substrings = countDistinctSubstrings(s);\n    let count = 0;\n\n    // Print the distinct substrings\n    console.log(&quot;Distinct Substrings:&quot;);\n    for (const substr of substrings) {\n        console.log(substr);\n        count++;\n    }\n\n    // Count + 1 as we have to count\n    // the empty string as well\n    console.log(&quot;Number of distinct substrings: &quot; + (count + 1));\n}\n\n// Call the main function\nmain();\n\n                            </code>\n                        </pre>\n                        </div>\n                        <p>\n                           <strong>Output: </strong>Given String: striver</p>\n                        <p>Distinct Substrings:</p>\n                        <p>e</p>\n                        <p>er</p>\n                        <p>i</p>\n                        <p>iv</p>\n                        <p>ive</p>\n                        <p>iver</p>\n                        <p>r</p>\n                        <p>ri</p>\n                        <p>riv</p>\n                        <p>rive</p>\n                        <p>river</p>\n                        <p>s</p>\n                        <p>st</p>\n                        <p>str</p>\n                        <p>stri</p>\n                        <p>striv</p>\n                        <p>strive</p>\n                        <p>striver</p>\n                        <p>t</p>\n                        <p>tr</p>\n                        <p>tri</p>\n                        <p>triv</p>\n                        <p>trive</p>\n                        <p>triver</p>\n                        <p>v</p>\n                        <p>ve</p>\n                        <p>ver</p>\n                        <p>Number of distinct substrings: 28</p>\n\n                    </div>\n                </details>\n                <details class=\"secondary-details\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Complexity Analysis\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <p>\n                        <p><strong>Time Complexity: O(N*N)</strong> where N is the number of characters in the given word. The implementation has two nested loops:\n                        <ol><li>The outer loop iterates over each character of the string, leading to O(N) iterations.</li><li>The inner loop iterates over the remaining characters in the string for each character, also leading to O(N) iterations in the worst case.</li></ol></p>\n\n                        <p><strong>Space Complexity : O(N*N)</strong>where N is the number of characters in the given word. The size of the set to store distinct substrings can grow up to O(N*N) in the worst case where all substrings are distinct. Each substring stored in the set occupies space proportional to its length, but the total space occupied by all substrings will limit to O(N*N).</p>\n\n                    </p>\n                </details>\n            </div>\n        </details>\n    </div>\n    <!-- Approach - 1 Ends here -->\n\n\n    <!-- Approach - 2 Starts from here -->\n\n    <div id=\"optimal-approach\">\n        <details>\n            <summary class=\"main-summary\">\n                <span>\n                    Optimal Approach \n                </span>\n                <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                    <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                    </path>\n                </svg>\n            </summary>\n            <div class=\"common-drops\">\n                <details class=\"secondary-details\" open=\"\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Algorithm / Intuition\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <div class=\"approach-algorithm\">\n                        <p>Instead of using the nested loops for the previous approach, using a Trie data structure significantly reduces the number of comparisons needed as we traverse the substring, resulting in better performance. </p>\n                        <p>The Trie also uses memory efficiently by storing only the necessary information and avoids redundancy by sharing common prefixes among substrings for better space utilisation especially for long strings with many repeated substrings. Read more about the Implementation of a Trie here:<a href=\"https://takeuforward.org/data-structure/implement-trie-1/\"> Implement Trie | Search | Insert | Startswith</a></p>\n                        \n                        <p><strong>Algorithm</strong></p>\n                        <p><strong>Step 1: </strong>\n                        Initialise a root node for the Trie.</p>\n                                                \n                        <p><strong>Step 2: </strong>\n                        Iterate through all the input string and for each character: Traverse the trie, creating new nodes as necessary to represent the substrings formed by the characters seen so far.\n\n                        </p>\n                        <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/distinct-substring-trie-image1-kOjZraCh\" alt=\"\" class=\"wp-image-8107\" width=\"600\" height=\"1000\"/>\n                        \n                        <p><strong>Step 3: </strong> Initialise a counter to keep track of the number of the number of distinct substrings.\n                        <ol><li>Iterate through all possible starting positions \u2018i\u2019 of the substring.</li><li>Start from the \u2018root\u2019 node for each substring.</li><li>For each character at index \u2018j\u2019 in the substring starting from position \u2018i\u2019:<ol><li>Check if the current node has a child node corresponding to the character at index j.</li><li>If not, insert a new child node for character at index j and increment the counter since a new substring is found.</li><li>Move to the child node corresponding to the character at index i.</li></ol></li><li>Repeat this process for all substrings starting from position \u2018i\u2019.</li></ol></p>\n                        <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/distinct-substring-trie-image2-8ft0J3iT\" alt=\"\" class=\"wp-image-8107\" width=\"600\" height=\"1000\"/>\n                        <p><strong>Step 4: </strong>Return the total count of distinct substrings + 1 added to account for the input string itself.</p>\n                    </div>\n                </details>\n                <details class=\"code-section secondary-details\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Code\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <div class=\"code-tabs\">\n                        <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n                        <button class=\"code-tab\" data-lang=\"java\">Java</button>\n                        <button class=\"code-tab\" data-lang=\"python\">Python</button>\n                        <button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n                        <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\"\n                            xmlns=\"http://www.w3.org/2000/svg\">\n                            <path\n                                d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n                            </path>\n                        </svg>\n                    </div>\n                    <div class=\"code-content\">\n                        <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n                            <pre class=\"wp-block-code\">\n                                <code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;iostream&gt;  \n#include &lt;string&gt;    \n\nusing namespace std;  \n\n\n// Node structure representing\n// each node in the trie\nstruct Node {\n    Node* links[26];  \n    // Array of pointers to child nodes,\n    // each corresponding to a letter\n    // of the alphabet\n    bool flag = false;  \n    // Flag indicating if the current\n    // node represents the end of a substring\n\n    // Method to check if a specific character key\n    // exists in the children of the current node\n    bool containsKey(char ch) {  \n        // Check if the current node has a child node\n        // corresponding to character 'ch'\n        return (links[ch - 'a'] != NULL);\n    }\n\n    // Method to get the child node corresponding\n    // to a specific character key\n    Node* get(char ch) {  \n        // Get the child node\n        // corresponding to character 'ch'\n        return links[ch - 'a'];\n    }\n\n    // Method to insert a new child\n    // node with a specific character key\n    void put(char ch, Node* node) {  \n        // Insert a new child\n        // node for character 'ch'\n        links[ch - 'a'] = node;\n    }\n\n    // Method to mark the current\n    // node as the end of a substring\n    void setEnd() {  \n        // Mark the current node\n        // as the end of a substring\n        flag = true;\n    }\n\n    // Method to check if the current\n    // node marks the end of a substring\n    bool isEnd() {  \n        // Check if the current node\n        // marks the end of a substring\n        return flag;\n    }\n};\n\n// Function to count the number of\n// distinct substrings in the given string\nint countDistinctSubstrings(string &amp;s) {  \n    // Function to count distinct\n    // substrings in the input string 's'\n    Node* root = new Node();  \n    // Creating the root\n    // node of the trie\n    int cnt = 0;  \n    // Counter to keep track\n    // of distinct substrings\n    int n = s.size();  \n    // Length of the input string\n\n    // Nested loops to iterate through all\n    // possible substrings of the input string\n    for (int i = 0; i &lt; n; i++) {  \n        // Iterate through each\n        // starting position of the substring\n        Node* node = root;  \n        // Start from the root for each substring\n        for (int j = i; j &lt; n; j++) {  \n            // Iterate through each character of the substring\n            // If the current character is not a child\n            // of the current node, insert it as a new child node\n            if (!node-&gt;containsKey(s[j])) {\n                node-&gt;put(s[j], new Node());  \n                // Insert a new child\n                // node for character s[j]\n                cnt++;  \n                // Increment the counter\n                // since a new substring is found\n            }\n            node = node-&gt;get(s[j]);  \n            // Move to the child node\n            // corresponding to character s[j]\n        }\n    }\n     // Return the total count of distinct substrings\n     // (+1 to account for the input string itself)\n    return cnt + 1;  \n  \n}\n\nint main() {  \n    // Main function to test the\n    // countDistinctSubstrings function\n    string s = &quot;striver&quot;;  \n    cout &lt;&lt; &quot;Current String: &quot; &lt;&lt; s &lt;&lt; endl;\n    // Input string\n    cout &lt;&lt; &quot;Number of distinct substrings: &quot; &lt;&lt; countDistinctSubstrings(s) &lt;&lt; endl;  \n    return 0;  \n\n}\n                                </code>\n                            </pre>\n                        </div>\n                        <div class=\"code-block \" data-lang=\"java\">\n                            <pre class=\"wp-block-code\">\n                                <code lang=\"java\" class=\"language-java\">\nimport java.util.HashMap;\n\n// Node structure representing\n// each node in the trie\nclass Node {\n    Node[] links;  \n    // Array of pointers to child nodes,\n    // each corresponding to a letter\n    // of the alphabet\n    boolean flag;  \n    // Flag indicating if the current\n    // node represents the end of a substring\n\n    // Method to check if a specific character key\n    // exists in the children of the current node\n    public boolean containsKey(char ch) {  \n        // Check if the current node has a child node\n        // corresponding to character 'ch'\n        return links[ch - 'a'] != null;\n    }\n\n    // Method to get the child node corresponding\n    // to a specific character key\n    public Node get(char ch) {  \n        // Get the child node\n        // corresponding to character 'ch'\n        return links[ch - 'a'];\n    }\n\n    // Method to insert a new child\n    // node with a specific character key\n    public void put(char ch, Node node) {  \n        // Insert a new child\n        // node for character 'ch'\n        links[ch - 'a'] = node;\n    }\n\n    // Method to mark the current\n    // node as the end of a substring\n    public void setEnd() {  \n        // Mark the current node\n        // as the end of a substring\n        flag = true;\n    }\n\n    // Method to check if the current\n    // node marks the end of a substring\n    public boolean isEnd() {  \n        // Check if the current node\n        // marks the end of a substring\n        return flag;\n    }\n}\n\n// Function to count the number of\n// distinct substrings in the given string\npublic class Main {  \n    // Function to count the number of\n    // distinct substrings in the given string\n    public static int countDistinctSubstrings(String s) {  \n        // Function to count distinct\n        // substrings in the input string 's'\n        Node root = new Node();  \n        // Creating the root\n        // node of the trie\n        int cnt = 0;  \n        // Counter to keep track\n        // of distinct substrings\n        int n = s.length();  \n        // Length of the input string\n\n        // Nested loops to iterate through all\n        // possible substrings of the input string\n        for (int i = 0; i &lt; n; i++) {  \n            // Iterate through each\n            // starting position of the substring\n            Node node = root;  \n            // Start from the root for each substring\n            for (int j = i; j &lt; n; j++) {  \n                // Iterate through each character of the substring\n                // If the current character is not a child\n                // of the current node, insert it as a new child node\n                if (!node.containsKey(s.charAt(j))) {\n                    node.put(s.charAt(j), new Node());  \n                    // Insert a new child\n                    // node for character s.charAt(j)\n                    cnt++;  \n                    // Increment the counter\n                    // since a new substring is found\n                }\n                node = node.get(s.charAt(j));  \n                // Move to the child node\n                // corresponding to character s.charAt(j)\n            }\n        }\n        return cnt + 1;  \n        // Return the total count of distinct substrings\n        // (+1 to account for the input string itself)\n    }\n\n    // Main function to test the\n    // countDistinctSubstrings function\n    public static void main(String[] args) {  \n        String s = &quot;striver&quot;;  \n        // Input string\n        System.out.println(&quot;Current String: &quot; + s);\n        System.out.println(&quot;Number of distinct substrings: &quot; + countDistinctSubstrings(s));  \n        // Output the result\n    }\n}\n                                </code>\n                            </pre>\n                        </div>\n                        <div class=\"code-block\" data-lang=\"python\">\n                            <pre class=\"wp-block-code\">\n                                <code lang=\"python\" class=\"language-python\">\n                     \nclass Node:\n    &quot;&quot;&quot;\n    Node structure representing\n    each node in the trie\n    &quot;&quot;&quot;\n\n    def __init__(self):\n        self.links = [None] * 26  \n        # Array of pointers to child nodes,\n        # each corresponding to a letter\n        # of the alphabet\n        self.flag = False  \n        # Flag indicating if the current\n        # node represents the end of a substring\n\n    def containsKey(self, ch):\n        &quot;&quot;&quot;\n        Method to check if a specific character key\n        exists in the children of the current node\n        &quot;&quot;&quot;\n        # Check if the current node has a child node\n        # corresponding to character 'ch'\n        return self.links[ord(ch) - ord('a')] is not None\n\n    def get(self, ch):\n        &quot;&quot;&quot;\n        Method to get the child node corresponding\n        to a specific character key\n        &quot;&quot;&quot;\n        # Get the child node\n        # corresponding to character 'ch'\n        return self.links[ord(ch) - ord('a')]\n\n    def put(self, ch, node):\n        &quot;&quot;&quot;\n        Method to insert a new child\n        node with a specific character key\n        &quot;&quot;&quot;\n        # Insert a new child\n        # node for character 'ch'\n        self.links[ord(ch) - ord('a')] = node\n\n    def setEnd(self):\n        &quot;&quot;&quot;\n        Method to mark the current\n        node as the end of a substring\n        &quot;&quot;&quot;\n        # Mark the current node\n        # as the end of a substring\n        self.flag = True\n\n    def isEnd(self):\n        &quot;&quot;&quot;\n        Method to check if the current\n        node marks the end of a substring\n        &quot;&quot;&quot;\n        # Check if the current node\n        # marks the end of a substring\n        return self.flag\n\n\ndef countDistinctSubstrings(s):\n    &quot;&quot;&quot;\n    Function to count the number of\n    distinct substrings in the given string\n    &quot;&quot;&quot;\n    root = Node()  \n    # Creating the root\n    # node of the trie\n    cnt = 0  \n    # Counter to keep track\n    # of distinct substrings\n    n = len(s)  \n    # Length of the input string\n\n    # Nested loops to iterate through all\n    # possible substrings of the input string\n    for i in range(n):  \n        # Iterate through each\n        # starting position of the substring\n        node = root  \n        # Start from the root for each substring\n        for j in range(i, n):  \n            # Iterate through each character of the substring\n            # If the current character is not a child\n            # of the current node, insert it as a new child node\n            if not node.containsKey(s[j]):\n                node.put(s[j], Node())  \n                # Insert a new child\n                # node for character s[j]\n                cnt += 1  \n                # Increment the counter\n                # since a new substring is found\n            node = node.get(s[j])  \n            # Move to the child node\n            # corresponding to character s[j]\n\n    return cnt + 1  \n    # Return the total count of distinct substrings\n    # (+1 to account for the input string itself)\n\n\nif __name__ == &quot;__main__&quot;:\n    s = &quot;striver&quot;  \n    # Input string\n    print(&quot;Current String:&quot;, s)\n    print(&quot;Number of distinct substrings:&quot;, countDistinctSubstrings(s))  \n    # Output the result\n                                </code>\n                            </pre>\n                        </div>\n                         <div class=\"code-block\" data-lang=\"javascript\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"javascript\" class=\"language-javascript\">\n// Node class representing each node in the trie\nclass Node {\n    constructor() {\n        this.links = new Array(26);  \n        // Array of pointers to child nodes,\n        // each corresponding to a letter\n        // of the alphabet\n        this.flag = false;  \n        // Flag indicating if the current\n        // node represents the end of a substring\n    }\n\n    // Method to check if a specific character key\n    // exists in the children of the current node\n    containsKey(ch) {  \n        // Check if the current node has a child node\n        // corresponding to character 'ch'\n        return this.links[ch.charCodeAt(0) - 'a'.charCodeAt(0)] !== undefined;\n    }\n\n    // Method to get the child node corresponding\n    // to a specific character key\n    get(ch) {  \n        // Get the child node\n        // corresponding to character 'ch'\n        return this.links[ch.charCodeAt(0) - 'a'.charCodeAt(0)];\n    }\n\n    // Method to insert a new child\n    // node with a specific character key\n    put(ch, node) {  \n        // Insert a new child\n        // node for character 'ch'\n        this.links[ch.charCodeAt(0) - 'a'.charCodeAt(0)] = node;\n    }\n\n    // Method to mark the current\n    // node as the end of a substring\n    setEnd() {  \n        // Mark the current node\n        // as the end of a substring\n        this.flag = true;\n    }\n\n    // Method to check if the current\n    // node marks the end of a substring\n    isEnd() {  \n        // Check if the current node\n        // marks the end of a substring\n        return this.flag;\n    }\n}\n\n// Function to count the number of\n// distinct substrings in the given string\nfunction countDistinctSubstrings(s) {  \n    // Function to count distinct\n    // substrings in the input string 's'\n    const root = new Node();  \n    // Creating the root\n    // node of the trie\n    let cnt = 0;  \n    // Counter to keep track\n    // of distinct substrings\n    const n = s.length;  \n    // Length of the input string\n\n    // Nested loops to iterate through all\n    // possible substrings of the input string\n    for (let i = 0; i &lt; n; i++) {  \n        // Iterate through each\n        // starting position of the substring\n        let node = root;  \n        // Start from the root for each substring\n        for (let j = i; j &lt; n; j++) {  \n            // Iterate through each character of the substring\n            // If the current character is not a child\n            // of the current node, insert it as a new child node\n            if (!node.containsKey(s[j])) {\n                node.put(s[j], new Node());  \n                // Insert a new child\n                // node for character s[j]\n                cnt++;  \n                // Increment the counter\n                // since a new substring is found\n            }\n            node = node.get(s[j]);  \n            // Move to the child node\n            // corresponding to character s[j]\n        }\n    }\n    return cnt + 1;  \n    // Return the total count of distinct substrings\n    // (+1 to account for the input string itself)\n}\n\n// Main function to test the\n// countDistinctSubstrings function\nfunction main() {  \n    const s = &quot;striver&quot;;  \n    // Input string\n    console.log(&quot;Current String: &quot; + s);\n    console.log(&quot;Number of distinct substrings: &quot; + countDistinctSubstrings(s));  \n    // Output the result\n}\n\nmain();         \n                            </code>\n                        </pre>\n                        </div>\n                        <p>\n                             <strong>Output: </strong>Current String: striver ,Number of distinct substrings: 28</p>\n                                               \n                    </div>\n                </details>\n                <details class=\"secondary-details\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Complexity Analysis\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <p>\n                        <p><strong>Time Complexity: O(N*N)</strong>where N is the length of the input string. This is because for each starting position of the substring, we traverse the entire substring once. However, due to the Trie structure, the actual number of comparisons is reduced as we progress.</p>\n                        <p><strong>Space Complexity : O(N*N)</strong> where N is the length of the input string. In the worst-case scenario, where there are no common prefixes among substrings the number of nodes could be as high as the total number of substrings which is bounded by O(N*N). </p>\n\n\n                    </p>\n                </details>\n            </div>\n        </details>\n    </div>\n</div>\n\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n    <details>\n        <summary class=\"main-summary\">\n            <span>\n                Video Explanation\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"yt-video-wrapper\">\n          <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/RV0QeTyHZxo?si=fzIH7QuxT1t-AMdZ\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n        </div>\n    </details>\n</div>\n\n<script src=\"https://takeuforward.org/UXApproachDropDowns/2ApproachJSScript.js\"></script>\n\n<blockquote class=\"wp-block-quote\">\n    Special thanks to <strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268\">Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,<strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\"> please check out this article</a></strong>\n</blockquote>\n\n\n<script>\n\n    const codeSections = document.querySelectorAll('.code-section');\n\n    // Get last selected language from localStorage or set default value\n    let lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp';\n\n    codeSections.forEach((section, sectionIndex) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n        const copyBtn = section.querySelector('.copy-btn');\n\n        codeTabs.forEach((tab) => {\n            tab.addEventListener('click', () => {\n                codeTabs.forEach((t) => {\n                    t.classList.remove('dsa_article_code_active');\n                });\n                tab.classList.add('dsa_article_code_active');\n\n                const lang = tab.dataset.lang;\n                const activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                codeBlocks.forEach((block) => {\n                    if (block === activeBlock) {\n                        block.classList.add('dsa_article_code_active');\n                    } else {\n                        block.classList.remove('dsa_article_code_active');\n                    }\n                });\n\n                // Update last selected language for all sections and store in localStorage\n                lastSelectedLanguage = lang;\n                localStorage.setItem('lastSelectedLanguage', lang);\n                codeSections.forEach((otherSection, otherIndex) => {\n                    if (otherIndex !== sectionIndex) {\n                        const otherTabs = otherSection.querySelectorAll('.code-tab');\n                        otherTabs.forEach((otherTab) => {\n                            if (otherTab.dataset.lang === lang) {\n                                otherTab.classList.add('dsa_article_code_active');\n                            } else {\n                                otherTab.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                        const otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                        const otherCodeBlocks = otherSection.querySelectorAll('.code-block');\n                        otherCodeBlocks.forEach((block) => {\n                            if (block === otherActiveBlock) {\n                                block.classList.add('dsa_article_code_active');\n                            } else {\n                                block.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                    }\n                });\n            });\n        });\n\n        // Handle copy button click event\n        copyBtn.addEventListener('click', () => {\n            const activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\n            navigator.clipboard.writeText(activeBlock.innerText);\n            copyBtn.classList.add('dsa_article_code_active');\n            setTimeout(() => {\n                copyBtn.classList.remove('dsa_article_code_active');\n            }, 1000);\n        });\n    });\n\n    // Set initial state of the tabs\n    codeSections.forEach((section) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n\n        codeTabs.forEach((tab) => {\n            if (tab.dataset.lang === lastSelectedLanguage) {\n                tab.classList.add('dsa_article_code_active');\n            } else {\n                tab.classList.remove('dsa_article_code_active');\n            }\n        });\n\n        codeBlocks.forEach((block) => {\n            if (block.dataset.lang === lastSelectedLanguage) {\n                block.classList.add('dsa_article_code_active');\n            } else {\n                block.classList.remove('dsa_article_code_active');\n            }\n        });\n    });\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>",
    "category_tag": "data-structure",
    "likes": 30,
    "preview": "Problem Statement: Implement a program that takes a string 'S' as input and returns the number of distinct substrings of the given string, including the empty substring. Use a trie data structure t..."
}