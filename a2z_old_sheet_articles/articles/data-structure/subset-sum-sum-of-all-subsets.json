{
    "dislikes": 7,
    "video": "rYkfBRtMJr8",
    "publishedOn": "Sun Mar 24 2024 22:09:21 GMT+0530 (India Standard Time)",
    "slug": "subset-sum-sum-of-all-subsets",
    "aid": "1464",
    "title": "Subset Sum : Sum of all Subsets",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/subsets-i",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "recursion",
            "topic-title": "Recursion"
        }
    ],
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement:</strong> Given an array print all the sum of the subset generated from it, in the increasing order.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Examples:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\"><strong>Example 1:</strong>\n\n<strong>Input:</strong> N = 3, arr[] = {5,2,1}\n\n<strong>Output:</strong> 0,1,2,3,5,6,7,8\n\n<strong>Explanation:</strong> We have to find all the subset\u2019s sum and print them.in this case the generated subsets are [ [], [1], [2], [2,1], [5], [5,1], [5,2]. [5,2,1],so the sums we get will be  0,1,2,3,5,6,7,8\n\n\n<strong>Input:</strong> N=3,arr[]= {3,1,2}\n\n<strong>Output:</strong> 0,1,2,3,3,4,5,6\n\n<strong>Explanation:</strong> We have to find all the subset\u2019s sum and print them.in this case the generated subsets are [ [], [1], [2], [2,1], [3], [3,1], [3,2]. [3,2,1],so the sums we get will be  0,1,2,3,3,4,5,6</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Solution</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><span class=\"has-inline-color has-vivid-red-color\"><strong><em>Disclaimer</em></strong>: <em>Don't jump directly to the solution, try it out yourself first.</em></span></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Solution 1: Using recursion</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Intuition</strong>: The main idea is that on every index you have two options either to select the element to add it to your subset(pick) or not select the element at that index and move to the next index(non-pick).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Approach: </strong>Traverse through the array and for each index solve for two arrays, one where you pick the element,i.e add the element to the sum or don\u2019t pick and move to the next element, recursively, until the base condition. Here when you reach the end of the array is the base condition.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"602\" height=\"181\" src=\"https://lh4.googleusercontent.com/f-cF0GX84YkT_9VaDr_8XpqbLOsbfbcIV8zqjoNmjloOS1LCG4MbO33O_2XLTO292CFoE47Ql1w3l6NPQjrrGs1D3R96uiNWuTFtW6m5LAsY2XGOT4eGvuaZ72ccI1UnwbLkG7fI\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include&lt;bits/stdc++.h&gt;\n\nusing namespace std;\nclass Solution {\n  public:\n    void subsetSumsHelper(int ind, vector &lt; int &gt; &amp; arr, int n, vector &lt; int &gt; &amp; ans, int sum) {\n      if (ind == n) {\n        ans.push_back(sum);\n        return;\n      }\n      //element is picked\n      subsetSumsHelper(ind + 1, arr, n, ans, sum + arr[ind]);\n      //element is not picked\n      subsetSumsHelper(ind + 1, arr, n, ans, sum);\n    }\n  vector &lt; int &gt; subsetSums(vector &lt; int &gt; arr, int n) {\n    vector &lt; int &gt; ans;\n    subsetSumsHelper(0, arr, n, ans, 0);\n    sort(ans.begin(), ans.end());\n    return ans;\n  }\n};\n\n\nint main() {\n  vector &lt; int &gt; arr{3,1,2};\n  Solution ob;\n  vector &lt; int &gt; ans = ob.subsetSums(arr, arr.size());\n  sort(ans.begin(), ans.end());\n  cout&lt;&lt;\"The sum of each subset is \"&lt;&lt;endl;\n  for (auto sum: ans) {\n    cout &lt;&lt; sum &lt;&lt; \" \";\n  }\n  cout &lt;&lt; endl;\n\n  return 0;\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The sum of each subset is<br>0 1 2 3 3 4 5 6</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity</strong>: O(2^n)+O(2^n log(2^n)). Each index has two ways. You can either pick it up or not pick it. So for n index time complexity for O(2^n) and for sorting it will take (2^n log(2^n)).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(2^n) for storing subset sums, since 2^n subsets can be generated for an array of size n.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\nclass TUF {\n    static void subsetSumsHelper(int ind, int sum, ArrayList &lt; Integer &gt; arr, int N, ArrayList &lt; Integer &gt; sumSubset) {\n        if (ind == N) {\n            sumSubset.add(sum);\n            return;\n        }\n\n        // pick the element \n        subsetSumsHelper(ind + 1, sum + arr.get(ind), arr, N, sumSubset);\n\n        // Do-not pick the element\n        subsetSumsHelper(ind + 1, sum, arr, N, sumSubset);\n    }\n\n    static ArrayList &lt; Integer &gt; subsetSums(ArrayList &lt; Integer &gt; arr, int N) {\n\n        ArrayList &lt; Integer &gt; sumSubset = new ArrayList &lt; &gt; ();\n        subsetSumsHelper(0, 0, arr, N, sumSubset);\n        Collections.sort(sumSubset);\n        return sumSubset;\n    }\n\n\n\n    public static void main(String args[]) {\n\n\n        ArrayList &lt; Integer &gt; arr = new ArrayList &lt; &gt; ();\n        arr.add(3);\n        arr.add(1);\n        arr.add(2);\n        ArrayList &lt; Integer &gt; ans = subsetSums(arr, arr.size());\n        Collections.sort(ans);\n        System.out.println(\"The sum of each subset is \");\n        for (int i = 0; i &lt; ans.size(); i++)\n            System.out.print(ans.get(i) + \" \");\n    }\n\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The sum of each subset is<br>0 1 2 3 3 4 5 6</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity</strong>: O(2^n)+O(2^n log(2^n)). Each index has two ways. You can either pick it up or not pick it. So for n index time complexity for O(2^n) and for sorting it will take (2^n log(2^n)).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity:</strong> O(2^n) for storing subset sums, since 2^n subsets can be generated for an array of size n.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block\" data-lang=\"python\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">from typing import List\n\n\n\n\nclass Solution:\n    def subsetSums(self, arr: List[int], n: int) -> List[int]:\n        ans = []\n\n\n        def subsetSumsHelper(ind: int, sum: int):\n            if ind == n:\n                ans.append(sum)\n                return\n            # element is picked\n            subsetSumsHelper(ind + 1, sum + arr[ind])\n            # element is not picked\n            subsetSumsHelper(ind + 1, sum)\n        subsetSumsHelper(0, 0)\n        ans.sort()\n        return ans\n\n\n\n\nif __name__ == \"__main__\":\n    arr = [3, 1, 2]\n    ans = Solution().subsetSums(arr, len(arr))\n    print(\"The sum of each subset is\")\n    for sum in ans:\n        print(sum, end=\" \")\n    print()</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The sum of each subset is<br>0 1 2 3 3 4 5 6</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity</strong>: O(2^n)+O(2^n log(2^n)). Each index has two ways. You can either pick it up or not pick it. So for n index time complexity for O(2^n) and for sorting it will take (2^n log(2^n)).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(2^n) for storing subset sums, since 2^n subsets can be generated for an array of size n.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to\u00a0<strong><strong><a href=\"https://www.linkedin.com/in/pranav-padawe-9486241ba/\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>Pranav Padawe</strong></a></strong></strong>\u00a0<em><strong><em><strong>and\u00a0<em><a href=\"https://www.linkedin.com/in/imsudip/\" target=\"_blank\" rel=\"noreferrer noopener\">Sudip Ghosh</a></em></strong></em></strong></em></em> <em>for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,\u00a0</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->",
    "category_tag": "data-structure",
    "likes": 149,
    "preview": "Problem Statement: Given an array print all the sum of the subset generated from it, in the increasing order. Examples: Example 1: Input: N = 3, arr[] = {5,2,1} Output: 0,1,2,3,5,6,7,8 Explanation:..."
}