{
    "dislikes": 2,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:10:17 GMT+0530 (India Standard Time)",
    "slug": "unbounded-knapsack-dp-23",
    "aid": "1730",
    "title": "Unbounded Knapsack (DP-23)",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/unbounded-knapsack",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "dynamic-programming",
            "topic-title": "Dynamic Programming"
        },
        {
            "topic-id": "recursion",
            "topic-title": "Recursion"
        }
    ],
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Link: </strong><a href=\"https://www.codingninjas.com/codestudio/problems/unbounded-knapsack_1215029?source=youtube&amp;campaign=striver_dp_videos&amp;utm_source=youtube&amp;utm_medium=affiliate&amp;utm_campaign=striver_dp_videos\"><strong>Unbounded Knapsack</strong></a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>A thief wants to rob a store. He is carrying a bag of capacity W. The store has \u2018n\u2019 items of infinite supply. Its weight is given by the \u2018wt\u2019 array and its value by the \u2018val\u2019 array. He can either include an item in its knapsack or exclude it but can\u2019t partially have it as a fraction. We need to find the maximum value of items that the thief can steal. He can take a single item any number of times he wants and put it in his knapsack.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n<details class=\"article_example_details\">\n<summary class=\"article_example_summary\">\n<span><strong>\nExamples\n</strong>\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"atricle_example_content\">\n<pre class=\"wp-block-preformatted\"><!-- Insert New Examples Here -->\n<pre class=\"wp-block-preformatted\"><strong>Example:</strong>\n\n<img width=\"516\" height=\"389\" src=\"https://lh4.googleusercontent.com/NXDXKmwueWiUKdOgXhDuQlxTTRXjStKg8sQ8ddyaLI6IU0s1vhWnBHuifDDDDEvWJXD9SnaI8gNsahmRMl_g3p0GTy6O01jZ_TygtaobjxC38UwWTmeD7zOlyJTPJz5lIP8dC3fd\"></pre>\n</pre>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Practice Section-->\n<div class=\"practice\">\n<span><strong>Practice: </strong></span>\n<div class=\"problem-buttons\">\n\n<!-- Add Problem Link inside href -->\n<a href=\"https://www.codingninjas.com/studio/problems/unbounded-knapsack_1215029?utm_source=striver&amp;utm_medium=website&amp;utm_campaign=a_zcoursetuf\" target=\"_blank\" rel=\"noopener\">\n<span>Solve Problem</span>\n<img src=\"https://static.takeuforward.org/wp/uploads/2023/04/Group-11-5.png\" alt=\"code-studio\">\n</a>\n</div>\n</div>\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\nyourself first. </em></p>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<div class=\"horizontal_navbar_dsa_article\">\n<div class=\"grid_container_three\">\n<a href=\"#brute-force-approach\" class=\"three-boxes box-a\">\nMemorization approach\n</a>\n<a href=\"#better-approach\" class=\"three-boxes box-b\">\nTabulation approach\n</a>\n<a href=\"#optimal-approach\" class=\"three-boxes box-c\">\nSpace Optimization\n</a>\n<a href=\"#dsa_article_video_explanation\" class=\"three-boxes box-d\">\n<svg width=\"26\" height=\"26\" viewBox=\"0 0 20 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M8 10L13.19 7L8 4V10ZM19.56 2.17C19.69 2.64 19.78 3.27 19.84 4.07C19.91 4.87 19.94 5.56 19.94 6.16L20 7C20 9.19 19.84 10.8 19.56 11.83C19.31 12.73 18.73 13.31 17.83 13.56C17.36 13.69 16.5 13.78 15.18 13.84C13.88 13.91 12.69 13.94 11.59 13.94L10 14C5.81 14 3.2 13.84 2.17 13.56C1.27 13.31 0.69 12.73 0.44 11.83C0.31 11.36 0.22 10.73 0.16 9.93C0.0900001 9.13 0.0599999 8.44 0.0599999 7.84L0 7C0 4.81 0.16 3.2 0.44 2.17C0.69 1.27 1.27 0.69 2.17 0.44C2.64 0.31 3.5 0.22 4.82 0.16C6.12 0.0899998 7.31 0.0599999 8.41 0.0599999L10 0C14.19 0 16.8 0.16 17.83 0.44C18.73 0.69 19.31 1.27 19.56 2.17Z\" fill=\"red\"></path>\n</svg>\n\n</a>\n<div class=\"box-e tooltip\">\n<svg viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M12.842 9.25L11.9577 10.17C11.2502 10.89 10.8081 11.5 10.8081 13H8.84297V12.5C8.84297 11.39 9.28511 10.39 9.99255 9.67L11.2109 8.41C11.5745 8.05 11.7906 7.55 11.7906 7C11.7906 6.46957 11.5836 5.96086 11.2151 5.58579C10.8465 5.21071 10.3467 5 9.82552 5C9.30434 5 8.80451 5.21071 8.43598 5.58579C8.06745 5.96086 7.86041 6.46957 7.86041 7H5.89531C5.89531 5.93913 6.30938 4.92172 7.04644 4.17157C7.7835 3.42143 8.78316 3 9.82552 3C10.8679 3 11.8675 3.42143 12.6046 4.17157C13.3417 4.92172 13.7557 5.93913 13.7557 7C13.7543 7.84324 13.4259 8.65183 12.842 9.25ZM10.8081 17H8.84297V15H10.8081M9.82552 0C8.53521 0 7.25754 0.258658 6.06545 0.761205C4.87337 1.26375 3.79021 2.00035 2.87783 2.92893C1.03519 4.8043 0 7.34784 0 10C0 12.6522 1.03519 15.1957 2.87783 17.0711C3.79021 17.9997 4.87337 18.7362 6.06545 19.2388C7.25754 19.7413 8.53521 20 9.82552 20C12.4314 20 14.9306 18.9464 16.7732 17.0711C18.6158 15.1957 19.651 12.6522 19.651 10C19.651 4.47 15.2296 0 9.82552 0Z\" fill=\"black\"></path>\n</svg>\n<div class=\"bottom\">\n<p>Expand any one approach by clicking the given options in the bar. Clicking one approach on bar,\ncloses all other expands. You can manually expand more than one approach at a time</p>\n<i></i>\n</div>\n\n</div>\n</div>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Approaches Drop-Down -->\n<div class=\"dsa_article_dropdown_approachs \">\n\n<!-- Brute Force Approach Starts from here -->\n<div id=\"brute-force-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nMemorization Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n<h3><strong>Why a Greedy Solution doesn\u2019t work?</strong></h3>\n<p>The first approach that comes to our mind is greedy. A greedy solution will fail in this problem because there is no \u2018uniformity\u2019 in data. While selecting a local better choice we may choose an item that will in long term give less value.</p>\n<p>As the greedy approach doesn\u2019t work, we will try to generate all possible combinations using <strong>recursion</strong> and select the combination which gives us the <strong>maximum </strong>value in the given constraints.</p>\n<p><strong>Steps to form the recursive solution:&nbsp;</strong></p>\n<p>We will first form the recursive solution by the three points mentioned in <a href=\"https://takeuforward.org/data-structure/dynamic-programming-introduction/\">Dynamic Programming Introduction</a>.&nbsp;</p>\n<p><strong>Step 1: </strong>Express the problem in terms of indexes.</p>\n<p>We are given \u2018n\u2019 items. Their weight is represented by the \u2018wt\u2019 array and value by the \u2018val\u2019 array. So clearly one parameter will be \u2018ind\u2019, i.e index upto which the array items are being considered.</p>\n<p>There is one more parameter \u201cW\u201d. We need the capacity of the knapsack to decide whether we can pick an array item or not in the knapsack.</p>\n<p>So, we can say that initially, we need to find f(n-1, W) where W is the overall capacity given to us. f(n-1, W) means we are finding the maximum value of items that the thief can steal from items with index 0 to n-1 capacity W of the knapsack.</p>\n<p><img width=\"624\" height=\"120\" src=\"https://lh6.googleusercontent.com/pyvWW9fM_-RW7eTLWpCqO58c_55Iw1bH8JagkQ0qzElw590W5hubiXcXrlUTwGxH8Wm2RWKoqM6g6PMWJbcOjqSloWzkXsTPzj-xCz9VJGmFqcBnoN_UZ61s2ElJbYgCAhRkiwrG\"></p>\n<h3><strong>Base Cases:</strong></h3>\n<ul><li>If ind==0, it means we are at the first item. Now, in an unbounded knapsack we can pick an item any number of times we want. As there is only one item left, we will pick for <strong>W/wt[0] </strong>times because we ultimately want to maximize the value of items while respecting the constraint of weight of the knapsack. The value added will be the product of the number of items picked and value of the individual item. Therefore we return (<strong>W/wt[0]) * val[0].</strong></li></ul>\n<p><img width=\"337\" height=\"288\" src=\"https://lh5.googleusercontent.com/csslf_tah7GBWPv4hhHwM9ymrlqnQ2wfGQ6ERM-jywMrA_hddaf4NXM6kMjBJ43w2qD-a9QyanqHvDjhQdPGD4uc3mG2qsm_PVPxqAMTDh3dgeXT087kbbf6TjTRE78w9sm8TEjk\"></p>\n<p><strong>Step 2: </strong>Try out all possible choices at a given index.</p>\n<p>We need to generate all the subsequences. We will use the pick/non-pick technique as discussed in this video \u201c<a href=\"https://www.youtube.com/watch?v=AxNNVECce8c\">Recursion on Subsequences</a>\u201d.</p>\n<p>We have two choices:</p>\n<ul><li><strong>Exclude the current element in the subsequence: </strong>We first try to find a subsequence without considering the current index item. If we exclude the current item, the capacity of the bag will not be affected and the value added will be 0 for the current item. So we will call the recursive function f(ind-1,W)</li><li><strong>Include the current element in the subsequence:</strong> We will try to find a subsequence by considering the current item to the knapsack. As we have included the item, the capacity of the knapsack will be updated to W-wt[ind] and the current item\u2019s value (val[ind]) will also be added to the further recursive call answer.</li></ul>\n<p>Now here is the catch, as there is an unlimited supply of coins, we want to again form a solution with the same item value. So we <strong>will not </strong>recursively call for f(ind-1, W-wt[ind]) rather we will stay at that index only and call for<strong> f(ind, W-wt[ind])</strong> to find the answer.<br><strong>Note: </strong>We will consider the current item in the subsequence only when the current element\u2019s weight is less than or equal to the capacity \u2018W\u2019 of the knapsack, if it isn\u2019t we will not be considering it.</p>\n<p><img width=\"413\" height=\"430\" src=\"https://lh3.googleusercontent.com/TWZhbM5gsdov3KTtRhNLGKWBj0eEcClKgi14DM9s5ljhinpB5-SAIZFe__6r_uNj5xabZw-QTBOSSVMppuCx8JeCtCoeqL1EkAA3fLC5eTRZ_gntz0O1zh9wqF0L-leKNKXgzrl3\"></p>\n<p><strong>Step 3:&nbsp; Return the maximum of take and notTake</strong></p>\n<p>As we have to return the maximum amount of value, we will return the max of take and notTake as our answer.</p>\n<p>The final pseudocode after steps 1, 2, and 3:</p>\n<p><img width=\"461\" height=\"480\" src=\"https://lh6.googleusercontent.com/F6GA43uE55XK8USO2xKSNv8_9YhHRzY3x3h6yNsno9Sz2fw2aPPLdNrldznDQC91hX8_7uxoMzmjBwAhiaxT3YJ7H4KBcrBzlP5c-oYA_LKQg2KxofMK8VCXqH6_8X42K22VUKel\"></p>\n<p><strong>Steps to memoize a recursive solution:</strong></p>\n<p>If we draw the recursion tree, we will see that there are overlapping subproblems. In order to convert a recursive solution the following steps will be taken:</p>\n<ol><li>Create a dp array of size [n][W+1]. The size of the input array is \u2018N\u2019, so the index will always lie between \u20180\u2019 and \u2018n-1\u2019. The capacity can take any value between \u20180\u2019 and \u2018W\u2019. Therefore we take the dp array as dp[n][W+1]</li><li>We initialize the dp array to -1.</li><li>Whenever we want to find the answer of particular parameters (say f(ind,target)), we first check whether the answer is already calculated using the dp array(i.e dp[ind][target]!= -1 ). If yes, simply return the value from the dp array.</li><li>If not, then we are finding the answer for the given value for the first time, we will use the recursive relation as usual but before returning from the function, we will set dp[ind][target] to the solution we get.</li></ol>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h>\nusing namespace std;\n\n// Function to solve the unbounded knapsack problem\nint knapsackUtil(vector&lt;int>&amp; wt, vector&lt;int>&amp; val, int ind, int W, vector&lt;vector&lt;int>>&amp; dp) {\n    // Base case: if we're at the first item\n    if (ind == 0) {\n        // Calculate and return the maximum value for the given weight limit\n        return (W / wt[0]) * val[0];\n    }\n    \n    // If the result for this index and weight limit is already calculated, return it\n    if (dp[ind][W] != -1)\n        return dp[ind][W];\n        \n    // Calculate the maximum value without taking the current item\n    int notTaken = 0 + knapsackUtil(wt, val, ind - 1, W, dp);\n    \n    // Calculate the maximum value by taking the current item\n    int taken = INT_MIN;\n    if (wt[ind] &lt;= W)\n        taken = val[ind] + knapsackUtil(wt, val, ind, W - wt[ind], dp);\n        \n    // Store the maximum value in the DP table and return it\n    return dp[ind][W] = max(notTaken, taken);\n}\n\n// Function to solve the unbounded knapsack problem\nint unboundedKnapsack(int n, int W, vector&lt;int>&amp; val, vector&lt;int>&amp; wt) {\n    vector&lt;vector&lt;int>> dp(n, vector&lt;int>(W + 1, -1)); // Create a DP table\n    \n    // Call the utility function to calculate the maximum value\n    return knapsackUtil(wt, val, n - 1, W, dp);\n}\n\nint main() {\n    vector&lt;int> wt = {2, 4, 6}; // Weight of items\n    vector&lt;int> val = {5, 11, 13}; // Value of items\n    int W = 10; // Weight capacity of the knapsack\n    int n = wt.size(); // Number of items\n    \n    // Call the function to calculate and output the maximum value the thief can steal\n    cout &lt;&lt; \"The Maximum value of items the thief can steal is \" &lt;&lt; unboundedKnapsack(n, W, val, wt) &lt;&lt; endl;\n\n    return 0; // Return 0 to indicate successful program execution\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\nclass TUF {\n    // Recursive function to solve the unbounded knapsack problem\n    static int knapsackUtil(int[] wt, int[] val, int ind, int W, int[][] dp) {\n        // Base case: If there are no more items to consider\n        if (ind == 0) {\n            // Calculate and return the maximum value possible\n            return ((int) (W / wt[0])) * val[0];\n        }\n\n        // If the result for this subproblem has already been calculated, return it\n        if (dp[ind][W] != -1)\n            return dp[ind][W];\n\n        // Calculate the maximum value when the current item is not taken\n        int notTaken = 0 + knapsackUtil(wt, val, ind - 1, W, dp);\n\n        // Initialize the maximum value when the current item is taken as the minimum integer value\n        int taken = Integer.MIN_VALUE;\n\n        // If the weight of the current item is less than or equal to the available capacity (W),\n        // calculate the maximum value when the current item is taken\n        if (wt[ind] &lt;= W)\n            taken = val[ind] + knapsackUtil(wt, val, ind, W - wt[ind], dp);\n\n        // Store the result in the dp array and return it\n        return dp[ind][W] = Math.max(notTaken, taken);\n    }\n\n    // Function to find the maximum value of items that the thief can steal\n    static int unboundedKnapsack(int n, int W, int[] val, int[] wt) {\n        // Create a 2D array to store results of subproblems\n        int[][] dp = new int[n][W + 1];\n\n        // Initialize the dp array with -1 to indicate that subproblems are not solved yet\n        for (int row[] : dp)\n            Arrays.fill(row, -1);\n\n        // Call the knapsackUtil function to solve the problem\n        return knapsackUtil(wt, val, n - 1, W, dp);\n    }\n\n    public static void main(String args[]) {\n        int wt[] = { 2, 4, 6 };\n        int val[] = { 5, 11, 13 };\n        int W = 10;\n\n        int n = wt.length;\n\n        // Call the unboundedKnapsack function and print the result\n        System.out.println(\"The Maximum value of items, the thief can steal is \" + unboundedKnapsack(n, W, val, wt));\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\nimport sys\n\n# Recursive function to solve the unbounded knapsack problem\ndef knapsackUtil(wt, val, ind, W, dp):\n    # Base case: If there are no more items to consider (index is 0)\n    if ind == 0:\n        return (W // wt[0]) * val[0]\n\n    # If the result for this state is already calculated, return it\n    if dp[ind][W] != -1:\n        return dp[ind][W]\n\n    # Calculate the maximum value when the current item is not taken\n    notTaken = knapsackUtil(wt, val, ind - 1, W, dp)\n\n    # Initialize a variable to store the maximum value when the current item is taken\n    taken = -sys.maxsize\n    if wt[ind] &lt;= W:\n        taken = val[ind] + knapsackUtil(wt, val, ind, W - wt[ind], dp)\n\n    # Store the maximum of \"notTaken\" and \"taken\" in the DP table\n    dp[ind][W] = max(notTaken, taken)\n    return dp[ind][W]\n\n# Function to find the maximum value that can be obtained in unbounded knapsack\ndef unboundedKnapsack(n, W, val, wt):\n    # Create a DP table initialized with -1\n    dp = [[-1 for _ in range(W + 1)] for _ in range(n)]\n    return knapsackUtil(wt, val, n - 1, W, dp)\n\ndef main():\n    wt = [2, 4, 6]\n    val = [5, 11, 13]\n    W = 10\n    n = len(wt)\n\n    print(\"The Maximum value of items the thief can steal is\", unboundedKnapsack(n, W, val, wt))\n\nif __name__ == \"__main__\":\n    main()\n\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\nfunction unboundedKnapsack(n, W, val, wt) {\n    // Create a 2D array 'dp' to store dynamic programming results, initialized with -1\n    const dp = Array.from({ length: n }, () => Array(W + 1).fill(-1));\n\n    // Define a recursive utility function to calculate the maximum value\n    function knapsackUtil(ind, W) {\n        // Base case: If we have reached the first item in the array\n        if (ind === 0) {\n            // Calculate the maximum value for this item\n            return Math.floor(W / wt[0]) * val[0];\n        }\n\n        // If the result for this combination of 'ind' and 'W' has already been calculated, return it\n        if (dp[ind][W] !== -1)\n            return dp[ind][W];\n\n        // Initialize variables to store results\n        let notTaken = 0 + knapsackUtil(ind - 1, W);\n\n        let taken = -Infinity;\n        if (wt[ind] &lt;= W)\n            taken = val[ind] + knapsackUtil(ind, W - wt[ind]);\n\n        // Store and return the result\n        return dp[ind][W] = Math.max(notTaken, taken);\n    }\n\n    // Call the recursive utility function to calculate the maximum value\n    return knapsackUtil(n - 1, W);\n}\n\n// Main function\nfunction main() {\n    const wt = [2, 4, 6];\n    const val = [5, 11, 13];\n    const W = 10;\n    const n = wt.length;\n\n    // Call the unboundedKnapsack function and print the result\n    console.log(\"The Maximum value of items the thief can steal is \" + unboundedKnapsack(n, W, val, wt));\n}\n\n// Call the main function to start the program\nmain();\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Brute Force Here -->\n</p><p><strong>Output:</strong> The Maximum value of items, thief can steal is 27\n\n\n</p>\n<p></p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n<!-- Insert Time and Space Complexity of Brute Force Here -->\n<p><strong>Time Complexity: O(N*W)</strong></p>\n<p>Reason: There are N*W states therefore at max \u2018N*W\u2019 new problems will be solved.</p>\n<p><strong>Space Complexity: O(N*W) + O(N)</strong></p>\n<p>Reason: We are using a recursion stack space(O(N)) and a 2D array ( O(N*W)).</p>\n</p>\n</details>\n</div>\n</details>\n</div>\n<!-- Brute Force Approach Ends here -->\n\n\n<!-- Better Approach Starts from here -->\n\n<div id=\"better-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nTabulation Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition For Better Approach Here -->\n<p>To convert the memoization approach to a tabulation one, create a dp array with the same size as done in memoization. We can initialize it as 0.</p>\n<p>First, we need to initialize the base conditions of the recursive solution.</p>\n<ul><li>At ind==0, we are considering the first element, so we will assign its value as <strong>(i/wt[0]) * val[0]</strong>, where i will iterate from 0 to W.</li><li>Next, we are done for the first row, so our \u2018ind\u2019 variable will move from 1 to n-1, whereas our \u2018cap\u2019 variable will move from 0 to \u2018W\u2019. We will set the nested loops to traverse the dp array.</li><li>Inside the nested loops we will apply the recursive logic to find the answer of the cell.</li><li>When the nested loop execution has ended, we will return dp[n-1][W] as our answer.</li></ul>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h>\nusing namespace std;\n\n// Function to solve the unbounded knapsack problem\nint unboundedKnapsack(int n, int W, vector&lt;int>&amp; val, vector&lt;int>&amp; wt) {\n    vector&lt;vector&lt;int>> dp(n, vector&lt;int>(W + 1, 0)); // Create a DP table\n\n    // Base Condition\n    for (int i = wt[0]; i &lt;= W; i++) {\n        dp[0][i] = (i / wt[0]) * val[0]; // Calculate the maximum value for the first item\n    }\n\n    for (int ind = 1; ind &lt; n; ind++) {\n        for (int cap = 0; cap &lt;= W; cap++) {\n            int notTaken = 0 + dp[ind - 1][cap]; // Maximum value without taking the current item\n\n            int taken = INT_MIN;\n            if (wt[ind] &lt;= cap)\n                taken = val[ind] + dp[ind][cap - wt[ind]]; // Maximum value by taking the current item\n\n            dp[ind][cap] = max(notTaken, taken); // Store the maximum value in the DP table\n        }\n    }\n\n    return dp[n - 1][W]; // Return the maximum value considering all items and the knapsack capacity\n}\n\nint main() {\n    vector&lt;int> wt = {2, 4, 6}; // Weight of items\n    vector&lt;int> val = {5, 11, 13}; // Value of items\n    int W = 10; // Weight capacity of the knapsack\n    int n = wt.size(); // Number of items\n\n    // Call the function to calculate and output the maximum value the thief can steal\n    cout &lt;&lt; \"The Maximum value of items the thief can steal is \" &lt;&lt; unboundedKnapsack(n, W, val, wt) &lt;&lt; endl;\n\n    return 0; // Return 0 to indicate successful program execution\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\nclass TUF {\n    // Function to solve the unbounded knapsack problem\n    static int unboundedKnapsack(int n, int W, int[] val, int[] wt) {\n        // Create a 2D array to store results of subproblems\n        int[][] dp = new int[n][W + 1];\n\n        // Base condition: Initialize the dp array for the first item\n        for (int i = wt[0]; i &lt;= W; i++) {\n            dp[0][i] = ((int) i / wt[0]) * val[0];\n        }\n\n        // Fill the dp array using dynamic programming\n        for (int ind = 1; ind &lt; n; ind++) {\n            for (int cap = 0; cap &lt;= W; cap++) {\n                // Calculate the maximum value when the current item is not taken\n                int notTaken = 0 + dp[ind - 1][cap];\n\n                // Initialize the maximum value when the current item is taken as the minimum integer value\n                int taken = Integer.MIN_VALUE;\n\n                // If the weight of the current item is less than or equal to the current capacity (cap),\n                // calculate the maximum value when the current item is taken\n                if (wt[ind] &lt;= cap)\n                    taken = val[ind] + dp[ind][cap - wt[ind]];\n\n                // Store the result in the dp array\n                dp[ind][cap] = Math.max(notTaken, taken);\n            }\n        }\n\n        return dp[n - 1][W]; // Return the maximum value that can be obtained\n    }\n\n    public static void main(String args[]) {\n        int wt[] = { 2, 4, 6 };\n        int val[] = { 5, 11, 13 };\n        int W = 10;\n        int n = wt.length;\n\n        // Call the unboundedKnapsack function and print the result\n        System.out.println(\"The Maximum value of items the thief can steal is \" + unboundedKnapsack(n, W, val, wt));\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\nimport sys\n\n# Function to solve the unbounded knapsack problem using dynamic programming\ndef unboundedKnapsack(n, W, val, wt):\n    # Create a DP table to store the maximum value for different capacities\n    dp = [[0 for j in range(W + 1)] for i in range(n)]\n\n    # Initialize the base condition for the first item\n    for i in range(wt[0], W + 1, wt[0]):\n        dp[0][i] = ((i // wt[0]) * val[0])\n\n    # Fill in the DP table for the remaining items and capacities\n    for ind in range(1, n):\n        for cap in range(W + 1):\n            # Calculate the maximum value when the current item is not taken\n            notTaken = 0 + dp[ind - 1][cap]\n\n            # Initialize a variable to store the maximum value when the current item is taken\n            taken = -sys.maxsize\n            if wt[ind] &lt;= cap:\n                taken = val[ind] + dp[ind][cap - wt[ind]]\n\n            # Store the maximum of \"notTaken\" and \"taken\" in the DP table\n            dp[ind][cap] = max(notTaken, taken)\n\n    # The maximum value for the entire knapsack is at dp[n-1][W]\n    return dp[n - 1][W]\n\ndef main():\n    wt = [2, 4, 6]\n    val = [5, 11, 13]\n    W = 10\n    n = len(wt)\n\n    print(\"The Maximum value of items the thief can steal is\", unboundedKnapsack(n, W, val, wt))\n\nif __name__ == \"__main__\":\n    main()\n\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\nfunction unboundedKnapsack(n, W, val, wt) {\n    // Create a 2D array 'dp' to store dynamic programming results, initialized with 0\n    const dp = Array.from({ length: n }, () => Array(W + 1).fill(0));\n\n    // Initializing the base condition for the first item in the array\n    for (let i = wt[0]; i &lt;= W; i++) {\n        dp[0][i] = Math.floor(i / wt[0]) * val[0];\n    }\n\n    // Populating the dp array using nested loops\n    for (let ind = 1; ind &lt; n; ind++) {\n        for (let cap = 0; cap &lt;= W; cap++) {\n            const notTaken = dp[ind - 1][cap];\n\n            let taken = -Infinity;\n            if (wt[ind] &lt;= cap)\n                taken = val[ind] + dp[ind][cap - wt[ind]];\n\n            dp[ind][cap] = Math.max(notTaken, taken);\n        }\n    }\n\n    // The result is stored in the bottom-right cell of the dp array\n    return dp[n - 1][W];\n}\n\n// Main function\nfunction main() {\n    const wt = [2, 4, 6];\n    const val = [5, 11, 13];\n    const W = 10;\n    const n = wt.length;\n\n    // Call the unboundedKnapsack function and print the result\n    console.log(\"The Maximum value of items the thief can steal is \" + unboundedKnapsack(n, W, val, wt));\n}\n\n// Call the main function to start the program\nmain();\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Better Approach Here -->\n<strong>Output:</strong> The Maximum value of items, thief can steal is 27\n\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Better Approach Here -->\n<p><strong>Time Complexity: O(N*W)</strong></p>\n<p>Reason: There are two nested loops</p>\n<p><strong>Space Complexity: O(N*W)</strong></p>\n<p>Reason: We are using an external array of size \u2018N*W\u2019. Stack Space is eliminated.</p>\n</p>\n</details>\n</div>\n</details>\n</div>\n<!-- Better Approach Ends from here -->\n\n\n<!-- Optimal Approach Starts from here -->\n\n<div id=\"optimal-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nSpace Optimization Approach \n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm of Better Approach Here -->\n<p>If we closely look the relation,</p>\n<p><strong>dp[ind][cap] =&nbsp; max(dp[ind-1][cap] ,dp[ind][cap-wt[ind]]</strong></p>\n<p>We see that to calculate a value of a cell of the dp array, we need only the previous row values (say prev). So, we don\u2019t need to store an entire array. Hence we can space optimize it.</p>\n<p>We will be space optimizing this solution using <strong>only one row.</strong></p>\n<p><strong>Intuition:</strong></p>\n<p>If we clearly see the values required:&nbsp; dp[ind-1][cap] and dp[ind-1][cap - wt[ind]], we can say that if we are at a column cap, we will only require the values shown in the blue box(of the same column) from the previous row and other values will be from the cur row itself. So why do we need to store an entire array for it?</p>\n<p><img width=\"600\" height=\"308\" src=\"https://lh3.googleusercontent.com/YPSss5S-iHoBDbdP1bwUTfMu5oKAdhouiV0SmLh0rIfeZSgC3GMlTa_guaREoqb3c4V1q1FUSwdOfaq_e9VmoKkTxI6JkYB0o6R6vtQiwvtxnfbcmFhBJWeHFu9Upr0StPwohnd0\"></p>\n<p>If we need only one value from the prev row, there is no need to store an entire row. We can work a bit smarter.</p>\n<p>We can use the cur row itself to store the required value in the following way:</p>\n<ul><li>We somehow make sure that the previous value( say preValue) is available to us in some manner ( we will discuss later how we got the value).</li><li>Now, let us say that we want to find the value of cell cur[3], by going through the relation we find that we need a preValue and one value from the cur row.</li><li>We see that to calculate the cur[3] element, we need only a single variable (preValue). The catch is that we can initially place this preValue at the position cur[3] (before finding its updated value) and later while calculating for the current row\u2019s cell cur[3], the value present there automatically serves as the preValue and we can use it to find the required cur[3] value. ( If there is any confusion please see the code).</li><li>After calculating the cur[3] value we store it at the cur[3] position so this cur[3] will automatically serve as preValue for the next row. In this way, we space-optimize the tabulation approach by just using one row.</li></ul>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h>\nusing namespace std;\n\n// Function to solve the unbounded knapsack problem\nint unboundedKnapsack(int n, int W, vector&lt;int>&amp; val, vector&lt;int>&amp; wt) {\n    vector&lt;int> cur(W + 1, 0); // Create a vector to store the current DP state\n\n    // Base Condition\n    for (int i = wt[0]; i &lt;= W; i++) {\n        cur[i] = (i / wt[0]) * val[0]; // Calculate the maximum value for the first item\n    }\n\n    for (int ind = 1; ind &lt; n; ind++) {\n        for (int cap = 0; cap &lt;= W; cap++) {\n            int notTaken = cur[cap]; // Maximum value without taking the current item\n\n            int taken = INT_MIN;\n            if (wt[ind] &lt;= cap)\n                taken = val[ind] + cur[cap - wt[ind]]; // Maximum value by taking the current item\n\n            cur[cap] = max(notTaken, taken); // Store the maximum value in the current DP state\n        }\n    }\n\n    return cur[W]; // Return the maximum value considering all items and the knapsack capacity\n}\n\nint main() {\n    vector&lt;int> wt = {2, 4, 6}; // Weight of items\n    vector&lt;int> val = {5, 11, 13}; // Value of items\n    int W = 10; // Weight capacity of the knapsack\n    int n = wt.size(); // Number of items\n\n    // Call the function to calculate and output the maximum value the thief can steal\n    cout &lt;&lt; \"The Maximum value of items the thief can steal is \" &lt;&lt; unboundedKnapsack(n, W, val, wt) &lt;&lt; endl;\n\n    return 0; // Return 0 to indicate successful program execution\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\nclass TUF {\n    // Function to solve the unbounded knapsack problem\n    static int unboundedKnapsack(int n, int W, int[] val, int[] wt) {\n        // Create an array to store the maximum value for each capacity from 0 to W\n        int cur[] = new int[W + 1];\n\n        // Base condition: Initialize the cur array for the first item\n        for (int i = wt[0]; i &lt;= W; i++) {\n            cur[i] = ((int) i / wt[0]) * val[0];\n        }\n\n        // Fill the cur array using dynamic programming\n        for (int ind = 1; ind &lt; n; ind++) {\n            for (int cap = 0; cap &lt;= W; cap++) {\n                // Calculate the maximum value when the current item is not taken\n                int notTaken = cur[cap];\n\n                // Initialize the maximum value when the current item is taken as the minimum integer value\n                int taken = Integer.MIN_VALUE;\n\n                // If the weight of the current item is less than or equal to the current capacity (cap),\n                // calculate the maximum value when the current item is taken\n                if (wt[ind] &lt;= cap)\n                    taken = val[ind] + cur[cap - wt[ind]];\n\n                // Store the result in the cur array\n                cur[cap] = Math.max(notTaken, taken);\n            }\n        }\n\n        return cur[W]; // Return the maximum value that can be obtained with the given capacity W\n    }\n\n    public static void main(String args[]) {\n        int wt[] = { 2, 4, 6 };\n        int val[] = { 5, 11, 13 };\n        int W = 10;\n        int n = wt.length;\n\n        // Call the unboundedKnapsack function and print the result\n        System.out.println(\"The Maximum value of items the thief can steal is \" + unboundedKnapsack(n, W, val, wt));\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\nimport sys\n\n# Function to solve the unbounded knapsack problem using dynamic programming\ndef unboundedKnapsack(n, W, val, wt):\n    # Create a list 'cur' to store the maximum value for different capacities\n    cur = [0] * (W + 1)\n\n    # Initialize the base condition for the first item\n    for i in range(wt[0], W + 1):\n        cur[i] = (i // wt[0]) * val[0]\n\n    # Fill in the 'cur' list for the remaining items and capacities\n    for ind in range(1, n):\n        for cap in range(W + 1):\n            # Calculate the maximum value when the current item is not taken\n            notTaken = cur[cap]\n\n            # Initialize a variable to store the maximum value when the current item is taken\n            taken = -sys.maxsize\n            if wt[ind] &lt;= cap:\n                taken = val[ind] + cur[cap - wt[ind]]\n\n            # Store the maximum of \"notTaken\" and \"taken\" in the 'cur' list\n            cur[cap] = max(notTaken, taken)\n\n    # The maximum value for the entire knapsack is at 'cur[W]'\n    return cur[W]\n\ndef main():\n    wt = [2, 4, 6]\n    val = [5, 11, 13]\n    W = 10\n    n = len(wt)\n\n    print(\"The Maximum value of items the thief can steal is\", unboundedKnapsack(n, W, val, wt))\n\nif __name__ == \"__main__\":\n    main()\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\nfunction unboundedKnapsack(n, W, val, wt) {\n    // Initialize an array 'cur' to store dynamic programming results, initialized with 0\n    const cur = new Array(W + 1).fill(0);\n\n    // Initializing the base condition for the first item in the array\n    for (let i = wt[0]; i &lt;= W; i++) {\n        cur[i] = Math.floor(i / wt[0]) * val[0];\n    }\n\n    // Populating the 'cur' array using nested loops\n    for (let ind = 1; ind &lt; n; ind++) {\n        for (let cap = 0; cap &lt;= W; cap++) {\n            const notTaken = cur[cap];\n\n            let taken = -Infinity;\n            if (wt[ind] &lt;= cap)\n                taken = val[ind] + cur[cap - wt[ind]];\n\n            cur[cap] = Math.max(notTaken, taken);\n        }\n    }\n\n    // The result is stored in the last element of the 'cur' array\n    return cur[W];\n}\n\n// Main function\nfunction main() {\n    const wt = [2, 4, 6];\n    const val = [5, 11, 13];\n    const W = 10;\n    const n = wt.length;\n\n    // Call the unboundedKnapsack function and print the result\n    console.log(\"The Maximum value of items the thief can steal is \" + unboundedKnapsack(n, W, val, wt));\n}\n\n// Call the main function to start the program\nmain();\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Optimal Apporach Here -->\n<strong>Output:</strong>The Maximum value of items, thief can steal is 27\n\n\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Optimal Approach-->\n<p><strong>Time Complexity: O(N*W)</strong></p>\n<p>Reason: There are two nested loops.</p>\n<p><strong>Space Complexity: O(W)</strong></p>\n<p>Reason: We are using an external array of size \u2018W+1\u2019 to store only one row.</p>\n</p>\n</details>\n</div>\n</details>\n</div>\n<!-- Optimal Approach Starts from here -->\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n<details>\n<summary class=\"main-summary\">\n<span>\nVideo Explanation\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"yt-video-wrapper\">\n\n<!-- Insert iframe embed Link of Youtube Video-->\n<iframe class=\"lazy-loaded\" loading=\"lazy\" title=\"Unbounded Knapsack\" width=\"810\" height=\"456\" data-lazy-type=\"iframe\" data-src=\"https://www.youtube.com/embed/OgvOZ6OrJoY?si=tULRo2fYBhkD8mG5\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\" src=\"https://www.youtube.com/embed/OgvOZ6OrJoY?feature=oembed\"></iframe><noscript>\n<iframe loading=\"lazy\" title=\"Unbounded Knapsack\" width=\"810\" height=\"456\" src=\"https://www.youtube.com/embed/OgvOZ6OrJoY?si=tULRo2fYBhkD8mG5\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe></noscript>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script>\n\nconst codeSections = document.querySelectorAll('.code-section');\n\n// Get last selected language from localStorage or set default value\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\n// Update last selected language for all sections and store in localStorage\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\n// Handle copy button click event\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\n// Set initial state of the tabs\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<script>\nconst codeSections = document.querySelectorAll('.code-section');\n\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script src=\"https://takeuforward.org/UXApproachDropDowns/3ApproachJSScript.js\"></script>\n<!-- /wp:html -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;<strong><a href=\"https://www.linkedin.com/in/anshuman-sharma-a1b245194/\" target=\"_blank\" rel=\"noreferrer noopener\">Anshuman Sharma</a></strong>&nbsp;<em>and&nbsp;<a href=\"https://www.linkedin.com/in/abhipsita-das-5b7069212/?originalSubdomain=in\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>Abhipsita Das</strong></a></em></em> <em>for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->",
    "category_tag": "data-structure",
    "likes": 47,
    "preview": "Problem Link: Unbounded Knapsack A thief wants to rob a store. He is carrying a bag of capacity W. The store has \u2018n\u2019 items of infinite supply. Its weight is given by the \u2018wt\u2019 array and its value by..."
}