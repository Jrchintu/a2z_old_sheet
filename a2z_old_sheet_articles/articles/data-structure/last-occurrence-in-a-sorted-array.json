{
    "dislikes": 71,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:10:33 GMT+0530 (India Standard Time)",
    "slug": "last-occurrence-in-a-sorted-array",
    "aid": "1810",
    "tuf_plus": "",
    "title": "Last occurrence in a sorted array",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        }
    ],
    "category_tag": "data-structure",
    "likes": 246,
    "preview": "Given a sorted array of N integers, write a program to find the index of the last occurrence of the target key. If the target is not found then return -1. Note: Consider 0 based indexing Examples:...",
    "content": "<!-- wp:paragraph -->\n<p>Given a sorted array of <strong>N integers</strong>, write a program to find the index of the last occurrence of the target key. If the target is not found then return -1.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Note:</strong> Consider 0 based indexing</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Examples:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\"><strong>Example 1:</strong>\n<strong>Input:</strong> N = 7, target=13, array[] = {3,4,13,13,13,20,40}\n<strong>Output</strong>: 4\n<strong>Explanation:</strong> As the target value is 13 , it appears for the first time at index number 2.\n\n<strong>Example 2:</strong>\n<strong>Input:</strong> N = 7, target=60, array[] = {3,4,13,13,13,20,40}\n<strong>Output</strong>: -1\n<strong>Explanation:</strong> Target value 60 is not present in the array \n</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph {\"textColor\":\"accent\"} -->\n<p class=\"has-accent-color has-text-color\"><strong><em>Disclaimer</em></strong>: <em>Don't jump directly to the solution, try it out yourself first.</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Solution 1: Naive solution</strong>\u00a0</h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><li>As the array is already sorted, start traversing the array from the back using a for loop and check whether the element is present or not.</li><li>If the target element is present, break out of the loop and print the resulting index.</li><li>If the target element is not present inside the array, then print -1</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Code</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    \n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include&lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\nint solve(int n, int key, vector &lt; int &gt; &amp; v) {\n  int res = -1;\n  for (int i = n - 1; i &gt;= 0; i--) {\n    if (v[i] == key) {\n      res = i;\n      break;\n    }\n  }\n  return res;\n}\n\nint main() {\n  int n = 7;\n  int key = 13;\n  vector &lt; int &gt; v = {3,4,13,13,13,20,40};\n   \n  // returning the last occurrence index if the element is present otherwise -1\n  cout &lt;&lt; solve(n, key, v) &lt;&lt; \"\\n\";\n\n  return 0;\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> 4</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(n)</strong>&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(1) </strong>not considering the given array</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">public class tUf {\n  public static int solve(int n, int key, int[] v) {\n    int res = -1;\n    for (int i = n - 1; i &gt;= 0; i--) {\n      if (v[i] == key) {\n        res = i;\n        break;\n      }\n    }\n    return res;\n  }\n  public static void main(String args[]) {\n    int n = 7;\n    int key = 13;\n    int[] v = {3,4,13,13,13,20,40};\n\n    // returning the last occurrence index if the element is present otherwise -1\n    System.out.println(solve(n, key, v));\n  }\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> 4</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(n)</strong>&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(1) </strong>not considering the given array</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Solution 2: Binary search solution (optimised)</strong>\u00a0</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>As given in the question, the array is already sorted</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Whenever the word \u201csorted\u201d or other similar terminologies are used in an array question, BINARY SEARCH <strong>can</strong> be one of the approaches.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Initially consider the start=0 and the end=n-1 pointers and the result as -1.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Till start does not crossover end pointer compare the mid element&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>If the mid element is equal to the key value, store the mid-value in the result and move the start pointer to mid+1(move leftward)</li><li>Else if the key value is less than the mid element then end= mid-1(move leftward)</li><li>Else do start = mid+1 (move rightwards)</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    \n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include&lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\nint solve(int n, int key, vector &lt; int &gt; &amp; v) {\n  int start = 0;\n  int end = n - 1;\n  int res = -1;\n\n  while (start &lt;= end) {\n    int mid = start + (end - start) / 2;\n    if (v[mid] == key) {\n      res = mid;\n      start = mid + 1;\n\n    } else if (key &lt; v[mid]) {\n      end = mid - 1;\n    } else {\n      start = mid + 1;\n    }\n  }\n  return res;\n}\n\nint main() {\n  int n = 7;\n  int key = 13;\n  vector &lt; int &gt; v = {3,4,13,13,13,20,40};\n  \n  // returning the last occurrence index if the element is present otherwise -1\n  cout &lt;&lt; solve(n, key, v) &lt;&lt; \"\\n\";\n\n  return 0;\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> <strong>4</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(log n)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(1)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">public class tUf {\n  public static int solve(int n, int key, int[] v) {\n    int start = 0;\n    int end = n - 1;\n    int res = -1;\n\n    while (start &lt;= end) {\n      int mid = start + (end - start) / 2;\n      if (v[mid] == key) {\n        res = mid;\n        start = mid + 1;\n\n      } else if (key &lt; v[mid]) {\n        end = mid - 1;\n      } else {\n        start = mid + 1;\n      }\n    }\n    return res;\n  }\n  public static void main(String args[]) {\n    int n = 7;\n    int key = 13;\n    int[] v = {3,4,13,13,13,20,40};\n\n    // returning the last occurrence index if the element is present otherwise -1\n    System.out.println(solve(n, key, v));\n  }\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> <strong>4</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(log n)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(1)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;<strong><a href=\"https://www.linkedin.com/in/rishirajgirmal/\" target=\"_blank\" rel=\"noreferrer noopener\">Rishiraj Girmal</a></strong>&nbsp;for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->"
}