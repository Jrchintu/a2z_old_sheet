{
    "dislikes": 2,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:09:52 GMT+0530 (India Standard Time)",
    "slug": "dynamic-programming-frog-jump-with-k-distances-dp-4",
    "aid": "1606",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/frog-jump-with-k-distances",
    "title": "Dynamic Programming: Frog Jump with k Distances (DP 4)",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "dynamic-programming",
            "topic-title": "Dynamic Programming"
        },
        {
            "topic-id": "recursion",
            "topic-title": "Recursion"
        }
    ],
    "likes": 158,
    "category_tag": "data-structure",
    "preview": "In this article, we will learn about \"Dynamic Programming: Frog Jump with k Distances (DP 4)\" Problem Statement: Frog Jump with K Distance/ Learn to write 1D DP Problem Statement: This is a follow-...",
    "content": "<!-- wp:paragraph -->\n<p>In this article, we will learn about \"Dynamic Programming: Frog Jump with k Distances (DP 4)\"</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Problem Statement:&nbsp; </strong>Frog Jump with K Distance/ Learn to write 1D DP</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Problem Statement:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This is a follow-up question to \u201cFrog Jump\u201d discussed in <a href=\"https://takeuforward.org/data-structure/dynamic-programming-frog-jump-dp-3/\">the previous article.</a> In the previous question, the frog was allowed to jump either one or two steps at a time. In this question, the frog is allowed to jump up to \u2018K\u2019 steps at a time. If K=4, the frog can jump 1,2,3, or 4 steps at every index.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Pre-req: </strong><a href=\"https://takeuforward.org/data-structure/dynamic-programming-frog-jump-dp-3/\"><strong>Frog Jump</strong></a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<!-- This is Practice Section-->\n<div class=\"practice\">\n<span><strong>Practice: </strong></span>\n<div class=\"problem-buttons\">\n\n<!-- Add Problem Link inside href -->\n<a href=\"https://www.codingninjas.com/studio/problems/minimal-cost_8180930?utm_source=striver&amp;utm_medium=website&amp;utm_campaign=a_zcoursetuf\" target=\"_blank\" rel=\"noopener\">\n<span>Solve Problem</span>\n<img src=\"https://static.takeuforward.org/wp/uploads/2023/04/Group-11-5.png\" alt=\"code-studio\">\n</a>\n</div>\n</div>\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\nyourself first. </em></p>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<div class=\"horizontal_navbar_dsa_article\">\n<div class=\"grid_container_two\">\n<a href=\"#brute-force-approach\" class=\"two-boxes box-a\">\nMemorization Approach\n</a>\n<a href=\"#optimal-approach\" class=\"two-boxes box-c\">\nTabulation Approach\n</a>\n<a href=\"#dsa_article_video_explanation\" class=\"three-boxes box-d\">\n<svg width=\"26\" height=\"26\" viewBox=\"0 0 20 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M8 10L13.19 7L8 4V10ZM19.56 2.17C19.69 2.64 19.78 3.27 19.84 4.07C19.91 4.87 19.94 5.56 19.94 6.16L20 7C20 9.19 19.84 10.8 19.56 11.83C19.31 12.73 18.73 13.31 17.83 13.56C17.36 13.69 16.5 13.78 15.18 13.84C13.88 13.91 12.69 13.94 11.59 13.94L10 14C5.81 14 3.2 13.84 2.17 13.56C1.27 13.31 0.69 12.73 0.44 11.83C0.31 11.36 0.22 10.73 0.16 9.93C0.0900001 9.13 0.0599999 8.44 0.0599999 7.84L0 7C0 4.81 0.16 3.2 0.44 2.17C0.69 1.27 1.27 0.69 2.17 0.44C2.64 0.31 3.5 0.22 4.82 0.16C6.12 0.0899998 7.31 0.0599999 8.41 0.0599999L10 0C14.19 0 16.8 0.16 17.83 0.44C18.73 0.69 19.31 1.27 19.56 2.17Z\" fill=\"red\"></path>\n</svg>\n\n</a>\n<div class=\"box-e tooltip\">\n<svg viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M12.842 9.25L11.9577 10.17C11.2502 10.89 10.8081 11.5 10.8081 13H8.84297V12.5C8.84297 11.39 9.28511 10.39 9.99255 9.67L11.2109 8.41C11.5745 8.05 11.7906 7.55 11.7906 7C11.7906 6.46957 11.5836 5.96086 11.2151 5.58579C10.8465 5.21071 10.3467 5 9.82552 5C9.30434 5 8.80451 5.21071 8.43598 5.58579C8.06745 5.96086 7.86041 6.46957 7.86041 7H5.89531C5.89531 5.93913 6.30938 4.92172 7.04644 4.17157C7.7835 3.42143 8.78316 3 9.82552 3C10.8679 3 11.8675 3.42143 12.6046 4.17157C13.3417 4.92172 13.7557 5.93913 13.7557 7C13.7543 7.84324 13.4259 8.65183 12.842 9.25ZM10.8081 17H8.84297V15H10.8081M9.82552 0C8.53521 0 7.25754 0.258658 6.06545 0.761205C4.87337 1.26375 3.79021 2.00035 2.87783 2.92893C1.03519 4.8043 0 7.34784 0 10C0 12.6522 1.03519 15.1957 2.87783 17.0711C3.79021 17.9997 4.87337 18.7362 6.06545 19.2388C7.25754 19.7413 8.53521 20 9.82552 20C12.4314 20 14.9306 18.9464 16.7732 17.0711C18.6158 15.1957 19.651 12.6522 19.651 10C19.651 4.47 15.2296 0 9.82552 0Z\" fill=\"black\"></path>\n</svg>\n<div class=\"bottom\">\n<p>Expand any one approach by clicking the given options in the bar. Clicking one approach on bar,\ncloses all other expands. You can manually expand more than one approach at a time</p>\n<i></i>\n</div>\n\n</div>\n</div>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Approaches Drop-Down -->\n<div class=\"dsa_article_dropdown_approachs \">\n\n<!-- Brute Force Approach Starts from here -->\n<div id=\"brute-force-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nMemorization Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n<p>We will first see the modifications required in the pseudo-code. Once the recursive code is formed, we can go ahead with the memorization and tabulation.</p>\n<p>Here is the pseudocode from the simple Frog Jump problem.</p>\n<p><img width=\"333\" height=\"283\" src=\"https://lh5.googleusercontent.com/kwms7RNZji5N04HWXf1sG9GwLMVqrwHzC5Cl4ObfzjGH4n6R-OOzv9bJrTtRcs5x5Wqk0Hffd4gwkkDbNfNxm9AU84YQGvAlQAbB_6EfWCTj8094Kc54vwgCd6C_SxRXIeIHHnjN\"></p>\n<p>This was the case where we needed to try two options (move a single step and move two steps) in order to try out all the possible ways for the problem. Now, we need to try K options in order to try out all possible ways.</p>\n<p>These are the calls we need to make for K=2, K=3, K=4</p>\n<p><img src=\"https://lh6.googleusercontent.com/Ruob9xci0A0OV3GpvP01q0YYmFEybN0Acn4u4freJ4mfogdN_TT2YMsQpqPTKN-QHOoAHwsLW6HLC0jyrn-xJSkR9jjmes_SJ3QwcBqZcdj99n-MdZPf4zf1z7D-lNKs0Dri0U6e\" width=\"624\" height=\"275\"></p>\n<p>If we generalize, we are making K calls, therefore, we can set a for loop to run from 1 to K, and in each iteration, we can make a function call, corresponding to a step. We will return the minimum step call after the loop.</p>\n<p>The final pseudo-code will be:</p>\n<p><img width=\"399\" height=\"425\" src=\"https://lh5.googleusercontent.com/kx9o7SlWA4RwXuHtnFTcSOsKmWGWFWAl_u-k_gJ1CDEPHQtttzDWVGcN_YCDemZeCIzcZQ3Hlxb8ns3IwDr8pb_3Yb6r2t8GznIyQISmjsPW9mlL2JIs3znJ7b4QkgP-Hvqal1WH\"></p>\n<p><strong>Note: </strong>We need to make sure that we are not passing negative index to the array, therefore an extra if the condition is used.</p>\n<p>Once we form the recursive solution, we can use the approach told in <a href=\"https://takeuforward.org/data-structure/dynamic-programming-introduction/\">Dynamic Programming Introduction</a> to convert it into a dynamic programming one.</p>\n<p><strong>Memoization approach</strong></p>\n<p><strong>Steps to convert Recursive code to memoization solution:</strong></p>\n<ul><li>Create a dp[n] array initialized to -1.</li><li>Whenever we want to find the answer of a particular value (say n), we first check whether the answer is already calculated using the dp array(i.e dp[n] != -1 ). If yes, simply return the value from the dp array.</li><li>If not, then we are finding the answer for the given value for the first time, we will use the recursive relation as usual but before returning from the function, we will set dp[n] to the solution we get.</li></ul>\n\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h>\nusing namespace std;\n\n// Function to find the minimum cost to reach the end using at most 'k' jumps\nint solveUtil(int ind, vector&lt;int>&amp; height, vector&lt;int>&amp; dp, int k) {\n    // Base case: If we are at the beginning (index 0), no cost is needed.\n    if (ind == 0) return 0;\n    \n    // If the result for this index has been previously calculated, return it.\n    if (dp[ind] != -1) return dp[ind];\n    \n    int mmSteps = INT_MAX;\n    \n    // Loop to try all possible jumps from '1' to 'k'\n    for (int j = 1; j &lt;= k; j++) {\n        // Ensure that we do not jump beyond the beginning of the array\n        if (ind - j >= 0) {\n            // Calculate the cost for this jump and update mmSteps with the minimum cost\n            int jump = solveUtil(ind - j, height, dp, k) + abs(height[ind] - height[ind - j]);\n            mmSteps = min(jump, mmSteps);\n        }\n    }\n    \n    // Store the minimum cost for this index in the dp array and return it.\n    return dp[ind] = mmSteps;\n}\n\n// Function to find the minimum cost to reach the end of the array\nint solve(int n, vector&lt;int>&amp; height, int k) {\n    vector&lt;int> dp(n, -1); // Initialize a memoization array to store calculated results\n    return solveUtil(n - 1, height, dp, k); // Start the recursion from the last index\n}\n\nint main() {\n    vector&lt;int> height{30, 10, 60, 10, 60, 50};\n    int n = height.size();\n    int k = 2;\n    vector&lt;int> dp(n, -1); // Initialize a memoization array for the main function\n    cout &lt;&lt; solve(n, height, k) &lt;&lt; endl; // Print the result of the solve function\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\nclass TUF {\n    // Recursive function to calculate the minimum cost to reach the end\n    // from a given index with at most 'k' jumps.\n    static int solveUtil(int ind, int[] height, int[] dp, int k) {\n        // Base case: If we are at the beginning (index 0), no cost is needed.\n        if (ind == 0)\n            return 0;\n\n        // If the result for this index has been previously calculated, return it.\n        if (dp[ind] != -1)\n            return dp[ind];\n\n        int mmSteps = Integer.MAX_VALUE;\n\n        // Loop to try all possible jumps from '1' to 'k'\n        for (int j = 1; j &lt;= k; j++) {\n            // Ensure that we do not jump beyond the beginning of the array\n            if (ind - j >= 0) {\n                // Calculate the cost for this jump and update mmSteps with the minimum cost\n                int jump = solveUtil(ind - j, height, dp, k) + Math.abs(height[ind] - height[ind - j]);\n                mmSteps = Math.min(jump, mmSteps);\n            }\n        }\n\n        // Store the minimum cost for this index in the dp array and return it.\n        return dp[ind] = mmSteps;\n    }\n\n    // Function to find the minimum cost to reach the end of the array\n    static int solve(int n, int[] height, int k) {\n        int[] dp = new int[n];\n        Arrays.fill(dp, -1); // Initialize a memoization array to store calculated results\n        return solveUtil(n - 1, height, dp, k); // Start the recursion from the last index\n    }\n\n    public static void main(String args[]) {\n        int height[] = { 30, 10, 60, 10, 60, 50 };\n        int n = height.length;\n        int k = 2;\n        System.out.println(solve(n, height, k)); // Print the result of the solve function\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\nimport sys\n\n# Recursive function to calculate the minimum cost to reach the end\n# from a given index with at most 'k' jumps.\ndef solveUtil(ind, height, dp, k):\n    # Base case: If we are at the beginning (index 0), no cost is needed.\n    if ind == 0:\n        return 0\n    # If the result for this index has been previously calculated, return it.\n    if dp[ind] != -1:\n        return dp[ind]\n\n    mmSteps = sys.maxsize\n\n    # Loop to try all possible jumps from '1' to 'k'\n    for j in range(1, k + 1):\n        # Ensure that we do not jump beyond the beginning of the array\n        if ind - j >= 0:\n            # Calculate the cost for this jump and update mmSteps with the minimum cost\n            jump = solveUtil(ind - j, height, dp, k) + abs(height[ind] - height[ind - j])\n            mmSteps = min(jump, mmSteps)\n\n    # Store the minimum cost for this index in the dp array and return it.\n    dp[ind] = mmSteps\n    return dp[ind]\n\n# Function to find the minimum cost to reach the end of the array\ndef solve(n, height, k):\n    dp = [-1] * n  # Initialize a memoization array to store calculated results\n    return solveUtil(n - 1, height, dp, k)  # Start the recursion from the last index\n\ndef main():\n    height = [30, 10, 60, 10, 60, 50]\n    n = len(height)\n    k = 2\n    print(solve(n, height, k))  # Print the result of the solve function\n\nif __name__ == \"__main__\":\n    main()\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\nfunction solveUtil(ind, height, dp, k) {\n  // Base case: If we are at the beginning (index 0), no cost is needed.\n  if (ind === 0) return 0;\n  // If the result for this index has been previously calculated, return it.\n  if (dp[ind] !== -1) return dp[ind];\n\n  let mmSteps = Infinity;\n\n  // Loop to try all possible jumps from '1' to 'k'\n  for (let j = 1; j &lt;= k; j++) {\n    // Ensure that we do not jump beyond the beginning of the array\n    if (ind - j >= 0) {\n      // Calculate the cost for this jump and update mmSteps with the minimum cost\n      const jump =\n        solveUtil(ind - j, height, dp, k) + Math.abs(height[ind] - height[ind - j]);\n      mmSteps = Math.min(jump, mmSteps);\n    }\n  }\n  // Store the minimum cost for this index in the dp array and return it.\n  dp[ind] = mmSteps;\n  return dp[ind];\n}\n\nfunction solve(n, height, k) {\n  const dp = Array(n).fill(-1); // Initialize a memoization array to store calculated results\n  return solveUtil(n - 1, height, dp, k); // Start the recursion from the last index\n}\n\nconst height = [30, 10, 60, 10, 60, 50];\nconst n = height.length;\nconst k = 2;\nconst dp = Array(n).fill(-1); // Initialize a memoization array for the main function\nconsole.log(solve(n, height, k)); // Print the result of the solve function\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Brute Force Here -->\n<strong>Output:</strong> 40\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n<!-- Insert Time and Space Complexity of Brute Force Here -->\n<p><strong>Time Complexity: O(N *K)</strong></p>\n<p>Reason: The overlapping subproblems will return the answer in constant time. Therefore the total number of new subproblems we solve is \u2018n\u2019. At every new subproblem, we are running another loop for K times. Hence total time complexity is O(N * K).</p>\n<p><strong>Space Complexity: O(N)</strong></p>\n<p>Reason: We are using a recursion stack space(O(N)) and an array (again O(N)). Therefore total space complexity will be O(N) + O(N) \u2248 O(N)</p>\n</p>\n</details>\n</div>\n</details>\n</div>\n<!-- Brute Force Approach Ends here -->\n\n\n<!-- Optimal Approach Starts from here -->\n\n<div id=\"optimal-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nTabulation Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm of Better Approach Here -->\n<p><strong>Tabulation approach</strong></p>\n<ul><li>Declare a dp[] array of size n.</li><li>First initialize the base condition values, i.e dp[0] as 0.</li><li>Set an iterative loop which traverses the array( from index 1 to n-1) and for every index calculate jumpOne and jumpTwo and set dp[i] = min(jumpOne, jumpTwo).</li></ul>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h>\nusing namespace std;\n\n// Function to find the minimum cost to reach the end using at most 'k' jumps\nint solveUtil(int n, vector&lt;int>&amp; height, vector&lt;int>&amp; dp, int k) {\n    dp[0] = 0;\n\n    // Loop through the array to fill in the dp array\n    for (int i = 1; i &lt; n; i++) {\n        int mmSteps = INT_MAX;\n\n        // Loop to try all possible jumps from '1' to 'k'\n        for (int j = 1; j &lt;= k; j++) {\n            if (i - j >= 0) {\n                int jump = dp[i - j] + abs(height[i] - height[i - j]);\n                mmSteps = min(jump, mmSteps);\n            }\n        }\n        dp[i] = mmSteps;\n    }\n    return dp[n - 1]; // The result is stored in the last element of dp\n}\n\n// Function to find the minimum cost to reach the end of the array\nint solve(int n, vector&lt;int>&amp; height, int k) {\n    vector&lt;int> dp(n, -1); // Initialize a memoization array to store calculated results\n    return solveUtil(n, height, dp, k);\n}\n\nint main() {\n    vector&lt;int> height{30, 10, 60, 10, 60, 50};\n    int n = height.size();\n    int k = 2;\n    vector&lt;int> dp(n, -1); // Initialize a memoization array for the main function\n    cout &lt;&lt; solve(n, height, k) &lt;&lt; endl; // Print the result of the solve function\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\nclass TUF {\n    // Function to find the minimum cost to reach the end using at most 'k' jumps\n    static int solveUtil(int n, int[] height, int[] dp, int k) {\n        dp[0] = 0;\n\n        // Loop through the array to fill in the dp array\n        for (int i = 1; i &lt; n; i++) {\n            int mmSteps = Integer.MAX_VALUE;\n\n            // Loop to try all possible jumps from '1' to 'k'\n            for (int j = 1; j &lt;= k; j++) {\n                if (i - j >= 0) {\n                    int jump = dp[i - j] + Math.abs(height[i] - height[i - j]);\n                    mmSteps = Math.min(jump, mmSteps);\n                }\n            }\n            dp[i] = mmSteps;\n        }\n        return dp[n - 1]; // The result is stored in the last element of dp\n    }\n\n    // Function to find the minimum cost to reach the end of the array\n    static int solve(int n, int[] height, int k) {\n        int[] dp = new int[n]; // Initialize a memoization array to store calculated results\n        Arrays.fill(dp, -1);\n        return solveUtil(n, height, dp, k);\n    }\n\n    public static void main(String args[]) {\n        int height[] = {30, 10, 60, 10, 60, 50};\n        int n = height.length;\n        int k = 2;\n        System.out.println(solve(n, height, k)); // Print the result of the solve function\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\nimport sys\n\n# Helper function to solve the problem using dynamic programming\ndef solve_util(n, height, dp, k):\n    # Initialize the first element of the dp array as 0 since no steps are needed to reach the first position\n    dp[0] = 0\n\n    # Loop through the elements of the height array\n    for i in range(1, n):\n        mmSteps = sys.maxsize  # Initialize the minimum steps to a large value\n        for j in range(1, k+1):\n            if i - j >= 0:\n                # Calculate the number of steps required to reach the current position from the previous positions\n                jump = dp[i - j] + abs(height[i] - height[i - j])\n                mmSteps = min(jump, mmSteps)  # Update the minimum steps\n        dp[i] = mmSteps  # Store the minimum steps needed to reach the current position\n\n    return dp[n-1]  # Return the minimum steps needed to reach the last position\n\n# Main function to solve the problem\ndef solve(n, height, k):\n    dp = [-sys.maxsize] * n  # Initialize a dp array with large negative values\n    return solve_util(n, height, dp, k)  # Call the helper function\n\n# Entry point of the program\ndef main():\n    height = [30, 10, 60, 10, 60, 50]\n    n = len(height)\n    k = 2\n    dp = [-sys.maxsize] * n  # Initialize dp array\n    result = solve(n, height, k)  # Call the solve function\n    print(result)  # Print the result\n\nif __name__ == \"__main__\":\n    main()\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n// Define the solveUtil function to calculate the minimum steps required\nfunction solveUtil(n, height, dp, k) {\n  // Initialize the first element in dp to 0\n  dp[0] = 0;\n\n  // Loop through the height array from index 1 to n-1\n  for (let i = 1; i &lt; n; i++) {\n    // Initialize mmSteps to a large value\n    let mmSteps = Infinity;\n\n    // Loop through the last k elements (backward jumps)\n    for (let j = 1; j &lt;= k; j++) {\n      // Check if it's possible to jump to the previous element\n      if (i - j >= 0) {\n        // Calculate the cost of the jump and update mmSteps with the minimum cost\n        const jump = dp[i - j] + Math.abs(height[i] - height[i - j]);\n        mmSteps = Math.min(jump, mmSteps);\n      }\n    }\n\n    // Store the minimum cost in dp for the current index\n    dp[i] = mmSteps;\n  }\n\n  // Return the minimum cost to reach the last element\n  return dp[n - 1];\n}\n\n// Define the solve function to initialize dp and call solveUtil\nfunction solve(n, height, k) {\n  // Initialize the dp array with -1\n  const dp = new Array(n).fill(-1);\n\n  // Call solveUtil to calculate the minimum cost\n  return solveUtil(n, height, dp, k);\n}\n\n// Main function\nfunction main() {\n  // Input height array\n  const height = [30, 10, 60, 10, 60, 50];\n\n  // Calculate the length of the height array\n  const n = height.length;\n\n  // Set the maximum allowed jumps (k)\n  const k = 2;\n\n  // Initialize the dp array with -1\n  const dp = new Array(n).fill(-1);\n\n  // Call the solve function and print the result\n  console.log(solve(n, height, k));\n}\n\n// Call the main function to start the program\nmain();\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Optimal Apporach Here -->\n<strong>Output:</strong> 40\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Optimal Approach-->\n\n<p><strong>Time Complexity: O(N*K)</strong></p>\n<p>Reason: We are running two nested loops, where outer loops run from 1 to n-1 and the inner loop runs from 1 to K</p>\n<p><strong>Space Complexity: O(N)</strong></p>\n<p>Reason: We are using an external array of size \u2018n\u2019\u2019.</p>\n</p>\n</details>\n</div>\n</details>\n</div>\n<!-- Optimal Approach Starts from here -->\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n<details>\n<summary class=\"main-summary\">\n<span>\nVideo Explanation\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"yt-video-wrapper\">\n\n<!-- Insert iframe embed Link of Youtube Video-->\n<iframe class=\"lazy-loaded\" loading=\"lazy\" title=\"Frog Jump With k Distance\" width=\"810\" height=\"456\" data-lazy-type=\"iframe\" data-src=\"https://www.youtube.com/embed/Kmh3rhyEtB8?si=Zwu45E7geAifVVMo\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\" src=\"https://www.youtube.com/embed/Kmh3rhyEtB8?feature=oembed\"></iframe><noscript>\n<iframe loading=\"lazy\" title=\"Frog Jump with K Distance\" width=\"810\" height=\"456\" src=\"https://www.youtube.com/embed/Kmh3rhyEtB8?si=Zwu45E7geAifVVMo\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe></noscript>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script>\n\nconst codeSections = document.querySelectorAll('.code-section');\n\n// Get last selected language from localStorage or set default value\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\n// Update last selected language for all sections and store in localStorage\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\n// Handle copy button click event\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\n// Set initial state of the tabs\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<script>\nconst codeSections = document.querySelectorAll('.code-section');\n\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script src=\"https://takeuforward.org/UXApproachDropDowns/2ApproachJSScript.js\"></script>\n<!-- /wp:html -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;<strong><a href=\"https://www.linkedin.com/in/anshuman-sharma-a1b245194/\" target=\"_blank\" rel=\"noreferrer noopener\">Anshuman Sharma</a> <em>and&nbsp;<a href=\"https://www.linkedin.com/in/abhipsita-das-5b7069212/?originalSubdomain=in\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>Abhipsita Das</strong></a></em></strong>&nbsp;for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->"
}