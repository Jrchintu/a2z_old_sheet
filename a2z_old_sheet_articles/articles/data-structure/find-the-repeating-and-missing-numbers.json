{
    "dislikes": 8,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:09:05 GMT+0530 (India Standard Time)",
    "slug": "find-the-repeating-and-missing-numbers",
    "aid": "1389",
    "title": "Find the repeating and missing numbers",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/find-the-repeating-and-missing-number",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "hashing",
            "topic-title": "Hashing"
        },
        {
            "topic-id": "maths",
            "topic-title": "Maths"
        }
    ],
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement:</strong> You are given a read-only array of N integers with values also in the range [1, N] both inclusive. Each integer appears exactly once except A which appears twice and B which is missing. The task is to find the repeating and missing numbers A and B where A repeats twice and B is missing.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n<details class=\"article_example_details\">\n<summary class=\"article_example_summary\">\n<span><strong>\nExamples\n</strong>\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"atricle_example_content\">\n<pre class=\"wp-block-preformatted\"><!-- Insert New Examples Here -->\n<pre class=\"wp-block-preformatted\"><strong>Example 1:</strong>\n<strong>Input Format</strong>:&nbsp; array[] = {3,1,2,5,3}\n<strong>Result</strong>: {3,4)\n<strong>Explanation</strong>: A = 3 , B = 4&nbsp;\nSince 3 is appearing twice and 4 is missing\n\n<strong>Example 2:</strong>\n<strong>Input Format</strong>: array[] = {3,1,2,5,4,6,7,5}\n<strong>Result</strong>: {5,8)\n<strong>Explanation</strong>: A = 5 , B = 8&nbsp;\nSince 5 is appearing twice and 8 is missing\n</pre>\n</pre>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Practice Section-->\n<div class=\"practice\">\n<span><strong>Practice: </strong></span>\n<div class=\"problem-buttons\">\n\n<!-- Add Problem Link inside href -->\n<a href=\"https://bit.ly/3MC5iAx\" target=\"_blank\" rel=\"noopener\">\n<span>Solve Problem</span>\n<img src=\"https://static.takeuforward.org/wp/uploads/2023/04/Group-11-5.png\" alt=\"code-studio\">\n</a>\n</div>\n</div>\n\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\nyourself first. </em></p>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<div class=\"horizontal_navbar_dsa_article\">\n<div class=\"grid_container_four\">\n<a href=\"#brute-force-approach\" class=\"four-boxes box-a\">\nBrute Force Approach\n</a>\n<a href=\"#better-approach\" class=\"four-boxes box-a\">\nBetter Approach\n</a>\n<a href=\"#optimal-approach-1\" class=\"four-boxes box-c\">\nOptimal Approach 1\n</a>\n<a href=\"#optimal-approach-2\" class=\"four-boxes box-c-2\">\nOptimal Approach 2\n</a>\n<a href=\"#dsa_article_video_explanation\" class=\"three-boxes box-d\">\n<svg width=\"26\" height=\"26\" viewBox=\"0 0 20 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M8 10L13.19 7L8 4V10ZM19.56 2.17C19.69 2.64 19.78 3.27 19.84 4.07C19.91 4.87 19.94 5.56 19.94 6.16L20 7C20 9.19 19.84 10.8 19.56 11.83C19.31 12.73 18.73 13.31 17.83 13.56C17.36 13.69 16.5 13.78 15.18 13.84C13.88 13.91 12.69 13.94 11.59 13.94L10 14C5.81 14 3.2 13.84 2.17 13.56C1.27 13.31 0.69 12.73 0.44 11.83C0.31 11.36 0.22 10.73 0.16 9.93C0.0900001 9.13 0.0599999 8.44 0.0599999 7.84L0 7C0 4.81 0.16 3.2 0.44 2.17C0.69 1.27 1.27 0.69 2.17 0.44C2.64 0.31 3.5 0.22 4.82 0.16C6.12 0.0899998 7.31 0.0599999 8.41 0.0599999L10 0C14.19 0 16.8 0.16 17.83 0.44C18.73 0.69 19.31 1.27 19.56 2.17Z\" fill=\"red\"></path>\n</svg>\n\n</a>\n<div class=\"box-e tooltip\">\n<svg viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M12.842 9.25L11.9577 10.17C11.2502 10.89 10.8081 11.5 10.8081 13H8.84297V12.5C8.84297 11.39 9.28511 10.39 9.99255 9.67L11.2109 8.41C11.5745 8.05 11.7906 7.55 11.7906 7C11.7906 6.46957 11.5836 5.96086 11.2151 5.58579C10.8465 5.21071 10.3467 5 9.82552 5C9.30434 5 8.80451 5.21071 8.43598 5.58579C8.06745 5.96086 7.86041 6.46957 7.86041 7H5.89531C5.89531 5.93913 6.30938 4.92172 7.04644 4.17157C7.7835 3.42143 8.78316 3 9.82552 3C10.8679 3 11.8675 3.42143 12.6046 4.17157C13.3417 4.92172 13.7557 5.93913 13.7557 7C13.7543 7.84324 13.4259 8.65183 12.842 9.25ZM10.8081 17H8.84297V15H10.8081M9.82552 0C8.53521 0 7.25754 0.258658 6.06545 0.761205C4.87337 1.26375 3.79021 2.00035 2.87783 2.92893C1.03519 4.8043 0 7.34784 0 10C0 12.6522 1.03519 15.1957 2.87783 17.0711C3.79021 17.9997 4.87337 18.7362 6.06545 19.2388C7.25754 19.7413 8.53521 20 9.82552 20C12.4314 20 14.9306 18.9464 16.7732 17.0711C18.6158 15.1957 19.651 12.6522 19.651 10C19.651 4.47 15.2296 0 9.82552 0Z\" fill=\"black\"></path>\n</svg>\n<div class=\"bottom\">\n<p>Expand any one approach by clicking the given options in the bar. Clicking one approach on bar,\ncloses all other expands. You can manually expand more than one approach at a time</p>\n<i></i>\n</div>\n</div>\n</div>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<div class=\"dsa_article_dropdown_approachs \">\n\n<!-- Brute Force Approach Starts from here -->\n<div id=\"brute-force-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nBrute Force Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n<h3><strong>Solution:</strong></h3>\n<h3><strong>Naive Approach (Brute force)</strong>:&nbsp;</h3>\n<p><strong>Intuition: </strong>For each number between 1 to N, we will try to count the occurrence in the given array using <a href=\"https://takeuforward.org/data-structure/linear-search-in-c/\" target=\"_blank\" rel=\"noopener\" title=\"\">linear search</a>. And the element with occurrence as 2 will be the repeating number and the number with 0 occurrences will be the missing number.</p>\n<h3><strong>Approach:</strong></h3>\n<p>The steps are as follows:</p>\n<ol><li>We will run a loop(say i) from 1 to N.</li><li>For each integer, i, we will count its occurrence in the given array using linear search.</li><li>We will store those two elements that have the occurrence of 2 and 0.</li><li>Finally, we will return the elements.</li></ol>\n<p><strong>Note: </strong><em>For a better understanding of intuition, please watch the video at the bottom of the page.</em></p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n\n<!-- Insert C++ code of Brute Force Here -->\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvector&lt;int&gt; findMissingRepeatingNumbers(vector&lt;int&gt; a) {\n    int n = a.size(); // size of the array\n    int repeating = -1, missing = -1;\n\n    //Find the repeating and missing number:\n    for (int i = 1; i &lt;= n; i++) {\n        //Count the occurrences:\n        int cnt = 0;\n        for (int j = 0; j &lt; n; j++) {\n            if (a[j] == i) cnt++;\n        }\n\n        if (cnt == 2) repeating = i;\n        else if (cnt == 0) missing = i;\n\n        if (repeating != -1 &amp;&amp; missing != -1)\n            break;\n    }\n    return {repeating, missing};\n}\n\nint main()\n{\n    vector&lt;int&gt; a = {3, 1, 2, 5, 4, 6, 7, 5};\n    vector&lt;int&gt; ans = findMissingRepeatingNumbers(a);\n    cout &lt;&lt; \"The repeating and missing numbers are: {\"\n         &lt;&lt; ans[0] &lt;&lt; \", \" &lt;&lt; ans[1] &lt;&lt; \"}\\n\";\n    return 0;\n}\n\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\n<!-- Insert Java code of Brute Force Here -->\nimport java.util.*;\n\npublic class tUf {\n\n    public static int[] findMissingRepeatingNumbers(int[] a) {\n        int n = a.length; // size of the array\n        int repeating = -1, missing = -1;\n\n        //Find the repeating and missing number:\n        for (int i = 1; i &lt;= n; i++) {\n            //Count the occurrences:\n            int cnt = 0;\n            for (int j = 0; j &lt; n; j++) {\n                if (a[j] == i) cnt++;\n            }\n\n            if (cnt == 2) repeating = i;\n            else if (cnt == 0) missing = i;\n\n            if (repeating != -1 &amp;&amp; missing != -1)\n                break;\n        }\n        int[] ans = {repeating, missing};\n        return ans;\n    }\n\n    public static void main(String[] args) {\n        int[] a = {3, 1, 2, 5, 4, 6, 7, 5};\n        int[] ans = findMissingRepeatingNumbers(a);\n        System.out.println(\"The repeating and missing numbers are: {\"\n                           + ans[0] + \", \" + ans[1] + \"}\");\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\n<!-- Insert Python code of Brute Force Here -->\nfrom typing import List\n\ndef findMissingRepeatingNumbers(a: [int]) -&gt; [int]:\n    n = len(a)  # size of the array\n    repeating, missing = -1, -1\n\n    # Find the repeating and missing number:\n    for i in range(1, n+1):\n        # Count the occurrences:\n        cnt = 0\n        for j in range(n):\n            if a[j] == i:\n                cnt += 1\n\n        if cnt == 2:\n            repeating = i\n        elif cnt == 0:\n            missing = i\n\n        if repeating != -1 and missing != -1:\n            break\n\n    return [repeating, missing]\n\nif __name__ == '__main__':\n    a = [3, 1, 2, 5, 4, 6, 7, 5]\n    ans = findMissingRepeatingNumbers(a)\n    print(\"The repeating and missing numbers are: {\", ans[0], \", \", ans[1], \"}\\n\")\n\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\n<!-- Insert Javascript code of Brute Force Here -->\nfunction findMissingRepeatingNumbers(a) {\n    const n = a.length;\n    let repeating = -1, missing = -1;\n\n    for (let i = 1; i &lt;= n; i++) {\n        let cnt = 0;\n        for (let j = 0; j &lt; n; j++) {\n            if (a[j] == i) cnt++;\n        }\n\n        if (cnt == 2) repeating = i;\n        else if (cnt == 0) missing = i;\n\n        if (repeating != -1 &amp;&amp; missing != -1) break;\n    }\n\n    return [repeating, missing];\n}\n\nconst a = [3, 1, 2, 5, 4, 6, 7, 5];\nconst ans = findMissingRepeatingNumbers(a);\nconsole.log(`The repeating and missing numbers are: [${ans[0]}, ${ans[1]}]`);\n\n</code>\n</pre>\n</div>\n\n<p>\n<!-- Insert Output of Brute Force Here -->\n<strong>Output:</strong> The repeating and missing numbers are: {5, 8}\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n<!-- Insert Time and Space Complexity of Brute Force Here -->\n</p><p><strong>Time Complexity: </strong>O(N<sup>2</sup>), where N = size of the given array.<br><strong>Reason: </strong>Here, we are using nested loops to count occurrences of every element between 1 to N.</p>\n<p><strong>Space Complexity: </strong>O(1) as we are not using any extra space.</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Brute Force Approach Ends here -->\n\n\n<!-- Better Approach Starts from here -->\n<div id=\"better-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nBetter Approach \n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition For Better Approach Here -->\n<h3><strong>Better Approach (Using Hashing)</strong>:&nbsp;</h3>\n<h3><strong>Intuition: </strong></h3>\n<p>Instead of counting the occurrences every time, using the hashing technique, we will store the frequency of each element between 1 to N. Now, the element with frequency 2 will be the repeating number and the element with frequency 0 will be the missing number.</p>\n<p><strong>Note: </strong><em>Here, we can solve this problem using a hash array.</em></p>\n<h3><strong>Approach:</strong></h3>\n<p>The steps are as follows:</p>\n<ol><li>The range of the number is 1 to N. So, we need a hash array of size N+1 (<em>as we want to store the frequency of N as well</em>).</li><li>We will iterate all the elements of the given array and update the hash array accordingly i.e. hash[a[i]] = hash[a[i]]+1.</li><li>Now, we will iterate on the hash array and return the two elements with frequencies 2 and 0.</li></ol>\n<p><strong>Note: </strong><em>For a better understanding of intuition, please watch the video at the bottom of the page.</em></p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n\n<!-- Insert C++ Code of Better Approach Here -->\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvector&lt;int&gt; findMissingRepeatingNumbers(vector&lt;int&gt; a) {\n    int n = a.size(); // size of the array\n    int hash[n + 1] = {0}; // hash array\n\n    //update the hash array:\n    for (int i = 0; i &lt; n; i++) {\n        hash[a[i]]++;\n    }\n\n    //Find the repeating and missing number:\n    int repeating = -1, missing = -1;\n    for (int i = 1; i &lt;= n; i++) {\n        if (hash[i] == 2) repeating = i;\n        else if (hash[i] == 0) missing = i;\n\n        if (repeating != -1 &amp;&amp; missing != -1)\n            break;\n    }\n    return {repeating, missing};\n}\n\nint main()\n{\n    vector&lt;int&gt; a = {3, 1, 2, 5, 4, 6, 7, 5};\n    vector&lt;int&gt; ans = findMissingRepeatingNumbers(a);\n    cout &lt;&lt; \"The repeating and missing numbers are: {\"\n         &lt;&lt; ans[0] &lt;&lt; \", \" &lt;&lt; ans[1] &lt;&lt; \"}\\n\";\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\n<!-- Insert Java Code of Better Approach Here -->\nimport java.util.*;\n\npublic class tUf {\n\n    public static int[] findMissingRepeatingNumbers(int[] a) {\n        int n = a.length; // size of the array\n        int[] hash = new int[n + 1]; // hash array\n\n        //update the hash array:\n        for (int i = 0; i &lt; n; i++) {\n            hash[a[i]]++;\n        }\n\n        //Find the repeating and missing number:\n        int repeating = -1, missing = -1;\n        for (int i = 1; i &lt;= n; i++) {\n            if (hash[i] == 2) repeating = i;\n            else if (hash[i] == 0) missing = i;\n\n            if (repeating != -1 &amp;&amp; missing != -1)\n                break;\n        }\n        int[] ans = {repeating, missing};\n        return ans;\n    }\n\n    public static void main(String[] args) {\n        int[] a = {3, 1, 2, 5, 4, 6, 7, 5};\n        int[] ans = findMissingRepeatingNumbers(a);\n        System.out.println(\"The repeating and missing numbers are: {\"\n                           + ans[0] + \", \" + ans[1] + \"}\");\n    }\n}\n\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\n<!-- Insert Python Code of Better Approach Here -->\nfrom typing import List\n\ndef findMissingRepeatingNumbers(a: [int]) -&gt; [int]:\n    n = len(a) # size of the array\n    hash = [0] * (n + 1) # hash array\n\n    #update the hash array:\n    for i in range(n):\n        hash[a[i]] += 1\n\n    #Find the repeating and missing number:\n    repeating, missing = -1, -1\n    for i in range(1, n + 1):\n        if hash[i] == 2:\n            repeating = i\n        elif hash[i] == 0:\n            missing = i\n\n        if repeating != -1 and missing != -1:\n            break\n    return [repeating, missing]\n\nif __name__ == '__main__':\n    a = [3, 1, 2, 5, 4, 6, 7, 5]\n    ans = findMissingRepeatingNumbers(a)\n    print(\"The repeating and missing numbers are: {\", ans[0], \", \", ans[1], \"}\\n\")\n\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\n<!-- Insert Javascript code of Brute Force Here -->\nfunction findMissingRepeatingNumbers(a) {\n    const n = a.length;\n    const hash = new Array(n + 1).fill(0);\n\n    for (let i = 0; i &lt; n; i++) {\n        hash[a[i]]++;\n    }\n\n    let repeating = -1, missing = -1;\n    for (let i = 1; i &lt;= n; i++) {\n        if (hash[i] == 2) repeating = i;\n        else if (hash[i] == 0) missing = i;\n\n        if (repeating != -1 &amp;&amp; missing != -1) break;\n    }\n\n    return [repeating, missing];\n}\n\nconst a = [3, 1, 2, 5, 4, 6, 7, 5];\nconst ans = findMissingRepeatingNumbers(a);\nconsole.log(`The repeating and missing numbers are: [${ans[0]}, ${ans[1]}]`);\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Better Approach Here -->\n<strong>Output:</strong> The repeating and missing numbers are: {5, 8}\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Better Approach Here -->\n</p><p><strong>Time Complexity: </strong>O(2N), where N = the size of the given array.<br><strong>Reason: </strong>We are using two loops each running for N times. So, the time complexity will be O(2N).</p>\n<p><strong>Space Complexity: </strong>O(N) as we are using a hash array to solve this problem.</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Better Approach Ends from here -->\n\n\n<!-- Optimal Approach - 1 Starts from here -->\n<div id=\"optimal-approach-1\">\n<details>\n<summary class=\"main-summary\">\n<span>\nOptimal Approach 1:\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm of Better Approach - 1 Here -->\n<h3><strong>Optimal Approach 1 (Using Maths)</strong>:&nbsp;</h3>\n<h3><strong>Intuition: </strong></h3>\n<p>The idea is to convert the given problem into mathematical equations. Since we have two variables i.e. missing and repeating, we will try to form two linear equations. And then we will find the values of two variables using those equations.</p>\n<p>Assume the repeating number to be X and the missing number to be Y.</p>\n<p>In the array, the numbers are between 1 to N, and in that range, one number is missing and one number is occurring twice.</p>\n<p><strong>Step 1: Form equation 1:</strong></p>\n<p>Now, we know the summation of the first N numbers is:</p>\n<pre class=\"wp-block-preformatted\">Sn = (N*(N+1))/2</pre>\n<p>Let\u2019s say, <strong>S = the summation of all the elements in the given array</strong>.</p>\n<pre class=\"wp-block-preformatted\">Therefore, S - Sn = X - Y\u2026\u2026\u2026\u2026\u2026\u2026\u2026equation 1</pre>\n<p><strong>Step 2: Form equation 2:</strong></p>\n<p>Now, we know the summation of squares of the first N numbers is:</p>\n<pre class=\"wp-block-preformatted\">S2n = (N*(N+1)*(2N+1))/6</pre>\n<p>Let\u2019s say, <strong>S2 = the summation of squares of all the elements in the given array</strong>.</p>\n<pre class=\"wp-block-preformatted\">Therefore, S2-S2n = X2-Y2...................equation 2</pre>\n<p>From equation 2 we can conclude,</p>\n<pre class=\"wp-block-preformatted\">X+Y = (S2 - S2n) / (X-Y) [From equation 1, we get the value X-Y] \u2026\u2026\u2026\u2026 equation 3\n</pre>\n<p>From equation 1 and equation 3, we can easily find the value of X and Y. And this is what we want.</p>\n<p><strong>Note: </strong><em>Here, we are summing all the numbers and squares of all the numbers, so we should use a bigger data type(Like in C++, long long instead of int).</em></p>\n<h3><strong>Approach:</strong></h3>\n<p>Assume the repeating number to be X and the missing number to be Y.</p>\n<p>The steps are as follows:</p>\n<ol><li>First, find out the values of S and Sn and then calculate S - Sn (Using the above formulas).</li><li>Then, find out the values of S2 and S2n and then calculate S2 - S2n.</li><li>After performing steps 1 and 2, we will be having the values of X + Y and X - Y. Now, by substitution of values, we can easily find the values of X and Y.</li></ol>\n<p><strong>Note: </strong><em>For a better understanding of intuition, please watch the video at the bottom of the page.</em></p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n\n<!-- Insert C++ code of Optimal Approach - 1 Here-->\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvector&lt;int&gt; findMissingRepeatingNumbers(vector&lt;int&gt; a) {\n    long long n = a.size(); // size of the array\n\n    // Find Sn and S2n:\n    long long SN = (n * (n + 1)) / 2;\n    long long S2N = (n * (n + 1) * (2 * n + 1)) / 6;\n\n    // Calculate S and S2:\n    long long S = 0, S2 = 0;\n    for (int i = 0; i &lt; n; i++) {\n        S += a[i];\n        S2 += (long long)a[i] * (long long)a[i];\n    }\n\n    //S-Sn = X-Y:\n    long long val1 = S - SN;\n\n    // S2-S2n = X^2-Y^2:\n    long long val2 = S2 - S2N;\n\n    //Find X+Y = (X^2-Y^2)/(X-Y):\n    val2 = val2 / val1;\n\n    //Find X and Y: X = ((X+Y)+(X-Y))/2 and Y = X-(X-Y),\n    // Here, X-Y = val1 and X+Y = val2:\n    long long x = (val1 + val2) / 2;\n    long long y = x - val1;\n\n    return {(int)x, (int)y};\n}\n\nint main()\n{\n    vector&lt;int&gt; a = {3, 1, 2, 5, 4, 6, 7, 5};\n    vector&lt;int&gt; ans = findMissingRepeatingNumbers(a);\n    cout &lt;&lt; \"The repeating and missing numbers are: {\"\n         &lt;&lt; ans[0] &lt;&lt; \", \" &lt;&lt; ans[1] &lt;&lt; \"}\\n\";\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\n<!-- Insert Java code of Optimal Approach - 1 Here -->\nimport java.util.*;\n\npublic class tUf {\n\n    public static int[] findMissingRepeatingNumbers(int[] a) {\n        long n = a.length; // size of the array\n        // Find Sn and S2n:\n        long SN = (n * (n + 1)) / 2;\n        long S2N = (n * (n + 1) * (2 * n + 1)) / 6;\n\n        // Calculate S and S2:\n        long S = 0, S2 = 0;\n        for (int i = 0; i &lt; n; i++) {\n            S += a[i];\n            S2 += (long)a[i] * (long)a[i];\n        }\n\n        //S-Sn = X-Y:\n        long val1 = S - SN;\n\n        // S2-S2n = X^2-Y^2:\n        long val2 = S2 - S2N;\n\n        //Find X+Y = (X^2-Y^2)/(X-Y):\n        val2 = val2 / val1;\n\n        //Find X and Y: X = ((X+Y)+(X-Y))/2 and Y = X-(X-Y),\n        // Here, X-Y = val1 and X+Y = val2:\n        long x = (val1 + val2) / 2;\n        long y = x - val1;\n\n        int[] ans = {(int)x, (int)y};\n        return ans;\n    }\n\n    public static void main(String[] args) {\n        int[] a = {3, 1, 2, 5, 4, 6, 7, 5};\n        int[] ans = findMissingRepeatingNumbers(a);\n        System.out.println(\"The repeating and missing numbers are: {\"\n                           + ans[0] + \", \" + ans[1] + \"}\");\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\n<!-- Insert Python code of Optimal Approach - 1 Here -->\nfrom typing import List\n\ndef findMissingRepeatingNumbers(a: [int]) -&gt; [int]:\n    n = len(a)  # size of the array\n\n    # Find Sn and S2n:\n    SN = (n * (n + 1)) // 2\n    S2N = (n * (n + 1) * (2 * n + 1)) // 6\n\n    # Calculate S and S2:\n    S, S2 = 0, 0\n    for i in range(n):\n        S += a[i]\n        S2 += a[i] * a[i]\n\n    # S-Sn = X-Y:\n    val1 = S - SN\n\n    # S2-S2n = X^2-Y^2:\n    val2 = S2 - S2N\n\n    # Find X+Y = (X^2-Y^2)/(X-Y):\n    val2 = val2 // val1\n\n    # Find X and Y: X = ((X+Y)+(X-Y))/2 and Y = X-(X-Y),\n    # Here, X-Y = val1 and X+Y = val2:\n    x = (val1 + val2) // 2\n    y = x - val1\n\n    return [x, y]\n\nif __name__ == '__main__':\n    a = [3, 1, 2, 5, 4, 6, 7, 5]\n    ans = findMissingRepeatingNumbers(a)\n    print(\"The repeating and missing numbers are: {\", ans[0], \", \", ans[1], \"}\\n\")\n\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\n<!-- Insert Javascript code of Brute Force Here -->\nfunction findMissingRepeatingNumbers(a) {\n    const n = a.length; // size of the array\n\n    // Find Sn and S2n:\n    const SN = (n * (n + 1)) / 2;\n    const S2N = (n * (n + 1) * (2 * n + 1)) / 6;\n\n    // Calculate S and S2:\n    let S = 0, S2 = 0;\n    for (let i = 0; i &lt; n; i++) {\n        S += a[i];\n        S2 += a[i] * a[i];\n    }\n\n    //S-Sn = X-Y:\n    const val1 = S - SN;\n\n    // S2-S2n = X^2-Y^2:\n    let val2 = S2 - S2N;\n\n    //Find X+Y = (X^2-Y^2)/(X-Y):\n    val2 = val2 / val1;\n\n    //Find X and Y: X = ((X+Y)+(X-Y))/2 and Y = X-(X-Y),\n    // Here, X-Y = val1 and X+Y = val2:\n    const x = (val1 + val2) / 2;\n    const y = x - val1;\n\n    return [x, y];\n}\n\nconst a = [3, 1, 2, 5, 4, 6, 7, 5];\nconst ans = findMissingRepeatingNumbers(a);\nconsole.log(`The repeating and missing numbers are: [${ans[0]}, ${ans[1]}]`);\n\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Optimal Apporach - 1 Here -->\n<strong>Output:</strong> The repeating and missing numbers are: {5, 8}\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Optimal Approach -1 -->\n</p><p><strong>Time Complexity: </strong>O(N), where N = the size of the given array.<br><strong>Reason: </strong>We are using only one loop running for N times. So, the time complexity will be O(N).</p>\n<p><strong>Space Complexity: </strong>O(1) as we are not using any extra space to solve this problem.</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Optimal Approach - 1 ends from here -->\n\n<!-- Optimal Approach - 2 Starts from here -->\n<div id=\"optimal-approach-2\">\n<details>\n<summary class=\"main-summary\">\n<span>\nOptimal Approach 2\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm of Better Approach - 2 Here -->\n<h3><strong>Optimal Approach 2 (Using XOR)</strong>:&nbsp;</h3>\n<p>Using XOR, we are going to solve this problem using the following 3 steps.</p>\n<p>Assume the repeating number to be X and the missing number to be Y.</p>\n<p><strong>Step 1: Find the XOR of the repeating number(X) and the missing number(Y) </strong><strong><br></strong><strong> </strong><strong>i.e. (X^Y) = (a[0]^a[1]^.....^a[n-1]) ^ (1^2^........^N)</strong></p>\n<ul><li>In order to find the XOR of the repeating number and the missing number, we will first XOR all the array elements and with that value, we will again XOR all the numbers from 1 to N.<br>(X^Y) = (a[0]^a[1]^.....^a[n-1]) ^ (1^2^3^........^N)</li></ul>\n<p><strong>Step 2: Find the first different bit from right between the repeating and the missing number i.e. the first set bit from right in (X^Y)</strong></p>\n<ul><li>By convention, the repeating and the missing number must be different and since they are different they must contain different bits. Now, our task is to find the first different bit from the right i.e. the end. We know, the XOR of two different bits always results in 1. The position of the first different bit from the end will be the first set bit(<em>from the right</em>) in (X^Y) that we have found in step 1.</li></ul>\n<p><strong>Step 3: Based on the position of the different bits we will group all the elements ( i.e. all array elements + all elements between 1 to N) into 2 different groups</strong></p>\n<ul><li>Assume an imaginary array containing all the array elements and all the elements between 1 to N. Now, we will check that particular position for each element of that imaginary array and then if the bit is 0, we will insert the element into the 1st group otherwise, we will insert it into the 2nd group.&nbsp;</li><li>After performing this step, we will get two groups. Now, if we XOR all the elements of those 2 groups, we will get 2 numbers. One of them will be the repeating number and the other will be the missing number. But until now, we do not know which one is repeating and which one is missing.</li></ul>\n<p><strong>Last step: Figure out which one of the numbers is repeating and which one is missing</strong></p>\n<ul><li>We will traverse the entire given array and check which one of them appears twice. And the number that appears twice is the repeating number and the other one is the missing number.</li></ul>\n<h3><strong>Approach:</strong></h3>\n<p>The steps are as follows:</p>\n<ol><li>For the first step, we will run a loop and calculate the XOR of all the array elements and the numbers between 1 to N. Let\u2019s call this value xr.</li><li>In order to find the position of the first set bit from the right, we can either use a loop or we can perform AND of the xr and negation of (xr-1) i.e. (xr &amp; ~(xr-1)).</li><li>Now, we will take two variables i.e. zero and one. Now, we will check the bit of that position for every element (array elements as well as numbers between 1 to N).<ol><li><strong>If the bit is 1: </strong>We will XOR that element with variable one.</li><li><strong>If the bit is 0: </strong>We will XOR that element with variable zero.</li></ol></li><li>Finally, we have two variables i.e. two numbers zero and one. Among them, one is repeating and the other is missing. It\u2019s time to identify them.&nbsp;<ol><li>We will traverse the entire array and check how many times variable zero appears.&nbsp;</li><li>If it appears twice, it will be the repeating number, otherwise, it will be the missing. Now, based on variable zero\u2019s identity, we can easily identify in which category, variable one belongs.</li></ol></li></ol>\n<p><strong>Note: </strong><em>For a better understanding of intuition, please watch the video at the bottom of the page.</em></p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n\n<!-- Insert C++ code of Optimal Approach - 2 Here-->\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvector&lt;int&gt; findMissingRepeatingNumbers(vector&lt;int&gt; a) {\n    int n = a.size(); // size of the array\n\n    int xr = 0;\n\n    //Step 1: Find XOR of all elements:\n    for (int i = 0; i &lt; n; i++) {\n        xr = xr ^ a[i];\n        xr = xr ^ (i + 1);\n    }\n\n    //Step 2: Find the differentiating bit number:\n    int number = (xr &amp; ~(xr - 1));\n\n    //Step 3: Group the numbers:\n    int zero = 0;\n    int one = 0;\n    for (int i = 0; i &lt; n; i++) {\n        //part of 1 group:\n        if ((a[i] &amp; number) != 0) {\n            one = one ^ a[i];\n        }\n        //part of 0 group:\n        else {\n            zero = zero ^ a[i];\n        }\n    }\n\n    for (int i = 1; i &lt;= n; i++) {\n        //part of 1 group:\n        if ((i &amp; number) != 0) {\n            one = one ^ i;\n        }\n        //part of 0 group:\n        else {\n            zero = zero ^ i;\n        }\n    }\n\n    // Last step: Identify the numbers:\n    int cnt = 0;\n    for (int i = 0; i &lt; n; i++) {\n        if (a[i] == zero) cnt++;\n    }\n\n    if (cnt == 2) return {zero, one};\n    return {one, zero};\n}\n\nint main()\n{\n    vector&lt;int&gt; a = {3, 1, 2, 5, 4, 6, 7, 5};\n    vector&lt;int&gt; ans = findMissingRepeatingNumbers(a);\n    cout &lt;&lt; \"The repeating and missing numbers are: {\"\n         &lt;&lt; ans[0] &lt;&lt; \", \" &lt;&lt; ans[1] &lt;&lt; \"}\\n\";\n    return 0;\n}\n\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\n<!-- Insert Java code of Optimal Approach - 2 Here -->\nimport java.util.*;\n\npublic class tUf {\n\n    public static int[] findMissingRepeatingNumbers(int[] a) {\n        int n = a.length; // size of the array\n        int xr = 0;\n\n        //Step 1: Find XOR of all elements:\n        for (int i = 0; i &lt; n; i++) {\n            xr = xr ^ a[i];\n            xr = xr ^ (i + 1);\n        }\n\n        //Step 2: Find the differentiating bit number:\n        int number = (xr &amp; ~(xr - 1));\n\n        //Step 3: Group the numbers:\n        int zero = 0;\n        int one = 0;\n        for (int i = 0; i &lt; n; i++) {\n            //part of 1 group:\n            if ((a[i] &amp; number) != 0) {\n                one = one ^ a[i];\n            }\n            //part of 0 group:\n            else {\n                zero = zero ^ a[i];\n            }\n        }\n\n        for (int i = 1; i &lt;= n; i++) {\n            //part of 1 group:\n            if ((i &amp; number) != 0) {\n                one = one ^ i;\n            }\n            //part of 0 group:\n            else {\n                zero = zero ^ i;\n            }\n        }\n\n        // Last step: Identify the numbers:\n        int cnt = 0;\n        for (int i = 0; i &lt; n; i++) {\n            if (a[i] == zero) cnt++;\n        }\n\n        if (cnt == 2) return new int[] {zero, one};\n        return new int[] {one, zero};\n    }\n\n\n    public static void main(String[] args) {\n        int[] a = {3, 1, 2, 5, 4, 6, 7, 5};\n        int[] ans = findMissingRepeatingNumbers(a);\n        System.out.println(\"The repeating and missing numbers are: {\"\n                           + ans[0] + \", \" + ans[1] + \"}\");\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\n<!-- Insert Python code of Optimal Approach - 2 Here -->\nfrom typing import List\n\ndef findMissingRepeatingNumbers(a: [int]) -&gt; [int]:\n    n = len(a) # size of the array\n\n    xr = 0\n\n    #Step 1: Find XOR of all elements:\n    for i in range(n):\n        xr = xr ^ a[i]\n        xr = xr ^ (i + 1)\n\n    #Step 2: Find the differentiating bit number:\n    number = (xr &amp; ~(xr - 1))\n\n    #Step 3: Group the numbers:\n    zero = 0\n    one = 0\n    for i in range(n):\n        #part of 1 group:\n        if ((a[i] &amp; number) != 0):\n            one = one ^ a[i]\n        #part of 0 group:\n        else:\n            zero = zero ^ a[i]\n\n    for i in range(1, n + 1):\n        #part of 1 group:\n        if ((i &amp; number) != 0):\n            one = one ^ i\n        #part of 0 group:\n        else:\n            zero = zero ^ i\n\n    # Last step: Identify the numbers:\n    cnt = 0\n    for i in range(n):\n        if (a[i] == zero):\n            cnt += 1\n\n    if (cnt == 2):\n        return [zero, one]\n    return [one, zero]\n\nif __name__ == '__main__':\n    a = [3, 1, 2, 5, 4, 6, 7, 5]\n    ans = findMissingRepeatingNumbers(a)\n    print(\"The repeating and missing numbers are: {\", ans[0], \", \", ans[1], \"}\\n\") \n\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\n<!-- Insert Javascript code of Brute Force Here -->\nfunction findMissingRepeatingNumbers(a) {\n  const n = a.length; // size of the array\n\n  let xr = 0;\n\n  //Step 1: Find XOR of all elements:\n  for (let i = 0; i &lt; n; i++) {\n    xr = xr ^ a[i];\n    xr = xr ^ (i + 1);\n  }\n\n  //Step 2: Find the differentiating bit number:\n  const number = (xr &amp; ~(xr - 1));\n\n  //Step 3: Group the numbers:\n  let zero = 0;\n  let one = 0;\n  for (let i = 0; i &lt; n; i++) {\n    //part of 1 group:\n    if ((a[i] &amp; number) != 0) {\n      one = one ^ a[i];\n    }\n    //part of 0 group:\n    else {\n      zero = zero ^ a[i];\n    }\n  }\n\n  for (let i = 1; i &lt;= n; i++) {\n    //part of 1 group:\n    if ((i &amp; number) != 0) {\n      one = one ^ i;\n    }\n    //part of 0 group:\n    else {\n      zero = zero ^ i;\n    }\n  }\n\n  // Last step: Identify the numbers:\n  let cnt = 0;\n  for (let i = 0; i &lt; n; i++) {\n    if (a[i] == zero) cnt++;\n  }\n\n  if (cnt == 2) return [zero, one];\n  return [one, zero];\n}\n\nconst a = [3, 1, 2, 5, 4, 6, 7, 5];\nconst ans = findMissingRepeatingNumbers(a);\nconsole.log(`The repeating and missing numbers are: [${ans[0]}, ${ans[1]}]`);\n\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Optimal Apporach - 2 Here -->\n<strong>Output:</strong> The repeating and missing numbers are: {5, 8}\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Optimal Approach - 2 -->\n</p><p><strong>Time Complexity: </strong>O(N), where N = the size of the given array.<br><strong>Reason: </strong>We are just using some loops running for N times. So, the time complexity will be approximately O(N).</p>\n<p><strong>Space Complexity: </strong>O(1) as we are not using any extra space to solve this problem.</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Optimal Approach - 2 ends from here -->\n\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n<details>\n<summary class=\"main-summary\">\n<span>\nVideo Explanation\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"yt-video-wrapper\">\n\n<!-- Insert iframe embed Link of Youtube Video-->\n<iframe class=\"lazy-loaded\" loading=\"lazy\" title=\"Find Repeating and Missing Number\" width=\"810\" height=\"456\" data-lazy-type=\"iframe\" data-src=\"https://www.youtube.com/embed/2D0D8HE6uak\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\" src=\"https://www.youtube.com/embed/2D0D8HE6uak?feature=oembed\"></iframe><noscript>\n<iframe loading=\"lazy\" title=\"Find the Repeating and Missing Number\" width=\"810\" height=\"456\" src=\"https://www.youtube.com/embed/2D0D8HE6uak\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe></noscript>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script>\n\nconst codeSections = document.querySelectorAll('.code-section');\n\n// Get last selected language from localStorage or set default value\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\n// Update last selected language for all sections and store in localStorage\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\n// Handle copy button click event\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\n// Set initial state of the tabs\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<script>\nconst codeSections = document.querySelectorAll('.code-section');\n\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script src=\"https://takeuforward.org/UXApproachDropDowns/4ApproachJSScript.js\"></script>\n<!-- /wp:html -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;<strong><a href=\"https://www.linkedin.com/in/ambuj-kumar-88b614203/\" target=\"_blank\" rel=\"noreferrer noopener\" title=\"https://www.linkedin.com/in/ambuj-kumar-88b614203/\">Ambuj Kumar</a></strong> <em>,&nbsp;<em><a href=\"https://www.linkedin.com/in/imsudip/\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>Sudip Ghosh</strong></a></em></em>&nbsp;and  <strong><a href=\"https://www.linkedin.com/in/kriti39/\" target=\"_blank\" rel=\"noopener\" title=\"\">KRITIDIPTA GHOSH</a></strong></em> <em>for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/contribute/help-us-grow-takeuforward/\">please check out this articl</a>e</p></blockquote>\n<!-- /wp:quote -->",
    "category_tag": "data-structure",
    "likes": 282,
    "preview": "Problem Statement: You are given a read-only array of N integers with values also in the range [1, N] both inclusive. Each integer appears exactly once except A which appears twice and B which is m..."
}