{
    "dislikes": 9,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:09:56 GMT+0530 (India Standard Time)",
    "slug": "detect-a-cycle-in-a-linked-list",
    "aid": "1626",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/detect-a-loop-in-ll",
    "title": "Detect a Cycle in a Linked List",
    "topics": [
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "linked-list",
            "topic-title": "Linked List"
        }
    ],
    "category_tag": "data-structure",
    "likes": 205,
    "preview": "Examples Example 1: Input Format: LL: 1 2 3 4 5 Result: True Explanation: The last node with the value of 5 has its 'next' pointer pointing back to a previous node with the value of 3. This has res...",
    "content": "<!-- wp:html -->\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n<details class=\"article_example_details\">\n<summary class=\"article_example_summary\">\n<span><strong>\nExamples\n</strong>\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"atricle_example_content\">\n<p><strong>Example 1:</strong></p>\n<p><strong>Input Format</strong>:</p>\n<p>LL: 1 2 3 4 5</p>\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/12/Screenshot-2023-12-17-at-7.45.34-PM_red_border-1024x450.png\" alt=\"\" class=\"wp-image-13034\" width=\"768\" height=\"338\"></figure>\n<p><strong>Result</strong>: True</p>\n<p><strong>Explanation</strong>: The last node with the value of 5 has its 'next' pointer pointing back to a previous node with the value of 3. This has resulted in a loop, hence we return true.</p>\n<p><strong>Example 2:</strong></p>\n<p><strong>Input Format:</strong></p>\n<p>LL: 1 2 3 4 9 9</p>\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/12/tuxpi.com_.1698730362-1-1024x268.jpg\" alt=\"\" class=\"wp-image-13035\" width=\"768\" height=\"201\"></figure>\n<p><strong>Result: </strong>False</p>\n<p><strong>Explanation</strong>: : In this example, the linked list does not have a loop hence returns false.</p>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Practice Section-->\n<div class=\"practice\">\n<span><strong>Practice: </strong></span>\n<div class=\"problem-buttons\">\n\n<!-- Add Problem Link inside href -->\n<a href=\"https://www.codingninjas.com/studio/problems/cycle-detection-in-a-singly-linked-list_628974?utm_source=striver&amp;utm_medium=website&amp;utm_campaign=a_zcoursetuf\" target=\"_blank\" rel=\"noopener\">\n<span>Solve Problem</span>\n<img src=\"https://static.takeuforward.org/wp/uploads/2023/04/Group-11-5.png\" alt=\"code-studio\">\n</a>\n</div>\n</div>\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\nyourself first. </em></p>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<div class=\"horizontal_navbar_dsa_article\">\n<div class=\"grid_container_two\">\n<a href=\"#brute-force-approach\" class=\"two-boxes box-a\">\nBrute Force Approach\n</a>\n<a href=\"#optimal-approach\" class=\"two-boxes box-c\">\nOptimal Approach\n</a>\n<a href=\"#dsa_article_video_explanation\" class=\"three-boxes box-d\">\n<svg width=\"26\" height=\"26\" viewBox=\"0 0 20 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M8 10L13.19 7L8 4V10ZM19.56 2.17C19.69 2.64 19.78 3.27 19.84 4.07C19.91 4.87 19.94 5.56 19.94 6.16L20 7C20 9.19 19.84 10.8 19.56 11.83C19.31 12.73 18.73 13.31 17.83 13.56C17.36 13.69 16.5 13.78 15.18 13.84C13.88 13.91 12.69 13.94 11.59 13.94L10 14C5.81 14 3.2 13.84 2.17 13.56C1.27 13.31 0.69 12.73 0.44 11.83C0.31 11.36 0.22 10.73 0.16 9.93C0.0900001 9.13 0.0599999 8.44 0.0599999 7.84L0 7C0 4.81 0.16 3.2 0.44 2.17C0.69 1.27 1.27 0.69 2.17 0.44C2.64 0.31 3.5 0.22 4.82 0.16C6.12 0.0899998 7.31 0.0599999 8.41 0.0599999L10 0C14.19 0 16.8 0.16 17.83 0.44C18.73 0.69 19.31 1.27 19.56 2.17Z\" fill=\"red\"></path>\n</svg>\n\n</a>\n<div class=\"box-e tooltip\">\n<svg viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M12.842 9.25L11.9577 10.17C11.2502 10.89 10.8081 11.5 10.8081 13H8.84297V12.5C8.84297 11.39 9.28511 10.39 9.99255 9.67L11.2109 8.41C11.5745 8.05 11.7906 7.55 11.7906 7C11.7906 6.46957 11.5836 5.96086 11.2151 5.58579C10.8465 5.21071 10.3467 5 9.82552 5C9.30434 5 8.80451 5.21071 8.43598 5.58579C8.06745 5.96086 7.86041 6.46957 7.86041 7H5.89531C5.89531 5.93913 6.30938 4.92172 7.04644 4.17157C7.7835 3.42143 8.78316 3 9.82552 3C10.8679 3 11.8675 3.42143 12.6046 4.17157C13.3417 4.92172 13.7557 5.93913 13.7557 7C13.7543 7.84324 13.4259 8.65183 12.842 9.25ZM10.8081 17H8.84297V15H10.8081M9.82552 0C8.53521 0 7.25754 0.258658 6.06545 0.761205C4.87337 1.26375 3.79021 2.00035 2.87783 2.92893C1.03519 4.8043 0 7.34784 0 10C0 12.6522 1.03519 15.1957 2.87783 17.0711C3.79021 17.9997 4.87337 18.7362 6.06545 19.2388C7.25754 19.7413 8.53521 20 9.82552 20C12.4314 20 14.9306 18.9464 16.7732 17.0711C18.6158 15.1957 19.651 12.6522 19.651 10C19.651 4.47 15.2296 0 9.82552 0Z\" fill=\"black\"></path>\n</svg>\n<div class=\"bottom\">\n<p>Expand any one approach by clicking the given options in the bar. Clicking one approach on bar,\ncloses all other expands. You can manually expand more than one approach at a time</p>\n<i></i>\n</div>\n\n</div>\n</div>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Approaches Drop-Down -->\n<div class=\"dsa_article_dropdown_approachs \">\n\n<!-- Brute Force Approach Starts from here -->\n<div id=\"brute-force-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nBrute Force Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n\n<p>A <strong>loop</strong> in a linked list occurs when there's a node that, <strong>when followed</strong>, <strong>brings you back</strong> to it, indicating a <strong>closed loop</strong> in the list.</p>\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2024/01/Screenshot-2023-12-17-at-7.45.23-PM_red_border-1024x578.png\" alt=\"\" class=\"wp-image-13102\" width=\"768\" height=\"434\"></figure>\n<p>Hence it's important to keep track of nodes that have already been visited so that loops can be detected. One common way to do this is by using hashing.</p>\n<h3><strong>Algorithm:</strong></h3>\n<p><strong>Step 1: Traverse</strong> through the LL using the traversal technique of assigning a <strong>temp</strong> node to the head and <strong>iterating</strong> by moving to the next element till we reach <strong>null</strong>.</p>\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2024/01/Screenshot-2023-12-17-at-7.45.14-PM_red_border-1024x413.png\" alt=\"\" class=\"wp-image-13103\" width=\"768\" height=\"310\"></figure>\n<p><strong>Step 2: </strong>While traversing, keep a track of the visited nodes in the map data structure.&nbsp;</p>\n<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2024/01/Screenshot-2023-12-17-at-7.45.07-PM_red_border.png\" alt=\"\" class=\"wp-image-13106\" width=\"515\" height=\"722\"></figure>\n<p><strong>Note: </strong>Storing the entire node in the map is essential to distinguish between nodes with <strong>identical values</strong> but <strong>different positions</strong> in the list. This ensures <strong>accurate loop detection</strong> and not just duplicate value checks.</p>\n<p><strong>Step 3:</strong> If a <strong>previously</strong> <strong>visited</strong> <strong>node</strong> is encountered again, that proves that there is a <strong>loop</strong> in the linked list hence return <strong>true</strong>.</p>\n<p><strong>Step 4:</strong> If the traversal is completed, and we reach the last point of the LL which is <strong>null</strong>, it means there was <strong>noloop</strong>, hence we return <strong>false</strong>.</p>\n\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;iostream&gt;\n#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\n// Node class represents a\n// node in a linked list\nclass Node {\npublic:\n    // Data stored in the node\n    int data;        \n    \n    // Pointer to the next node in the list\n    Node* next;      \n\n    // Constructor with both data \n    // and next node as parameters\n    Node(int data1, Node* next1) {\n        data = data1;\n        next = next1;\n    }\n\n    // Constructor with only data as\n    // a parameter, sets next to nullptr\n    Node(int data1) {\n        data = data1;\n        next = nullptr;\n    }\n};\n\n// function to detect loop in linked list\nbool detectLoop(Node* head) {\n    \n    // Initialize a pointer 'temp'\n    // at the head of the linked list\n    Node* temp = head;  \n    \n    // Create a map to keep track of\n    // encountered nodes\n    std::unordered_map&lt;Node*, int&gt; nodeMap;  \n\n    // Step 2: Traverse the linked list\n    while (temp != nullptr) {\n        // If the node is already in the\n        // map, there is a loop\n        if (nodeMap.find(temp) != nodeMap.end()) {\n            return true;\n        }\n        // Store the current node\n        // in the map\n        nodeMap[temp] = 1;\n        \n        // Move to the next node\n        temp = temp-&gt;next;  \n    }\n\n    // Step 3: If the list is successfully traversed \n    // without a loop, return false\n    return false;\n}\n\nint main() {\n    // Create a sample linked list\n    // with a loop for testing\n    \n    Node* head = new Node(1);\n    Node* second = new Node(2);\n    Node* third = new Node(3);\n    Node* fourth = new Node(4);\n    Node* fifth = new Node(5);\n\n    head-&gt;next = second;\n    second-&gt;next = third;\n    third-&gt;next = fourth;\n    fourth-&gt;next = fifth;\n     // Create a loop\n    fifth-&gt;next = third; \n\n    // Check if there is a loop \n    // n the linked list\n    if (detectLoop(head)) {\n        cout &lt;&lt; \"Loop detected in the linked list.\" &lt;&lt; endl;\n    } else {\n        cout &lt;&lt; \"No loop detected in the linked list.\" &lt;&lt; endl;\n    }\n\n    // Clean up memory (free the allocated nodes)\n    delete head;\n    delete second;\n    delete third;\n    delete fourth;\n    delete fifth;\n\n    return 0;\n}\n\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.HashMap;\nimport java.util.Map;\n\n// Node class represents a\n// node in a linked list\nclass Node {\n    // Data stored in the node\n    public int data;   \n    // Pointer to the next node in the list\n    public Node next;  \n\n    // Constructor with both data\n    // and next node as parameters\n    public Node(int data, Node next) {\n        this.data = data;\n        this.next = next;\n    }\n\n    // Constructor with only data as\n    // a parameter, sets next to null\n    public Node(int data) {\n        this.data = data;\n        this.next = null;\n    }\n}\n\npublic class Main {\n    // Function to detect a\n    // loop in a linked list\n    public static boolean detectLoop(Node head) {\n        // Initialize a pointer 'temp'\n        // at the head of the linked list\n        Node temp = head;\n        \n        // Create a map to keep track\n        // of encountered nodes\n        Map&lt;Node, int&gt; nodeMap = new HashMap&lt;&gt;();\n\n        // Step 2: Traverse the linked list\n        while (temp != null) {\n            // If the node is already in\n            // the map, there is a loop\n            if (nodeMap.containsKey(temp)) {\n                return true;\n            }\n            // Store the current node in the map\n            nodeMap.put(temp, 1);\n            // Move to the next node\n            temp = temp.next;\n        }\n\n        // Step 3: If the list is successfully\n        // traversed without a loop, return false\n        return false;\n    }\n\n    public static void main(String[] args) {\n        // Create a sample linked list\n        // with a loop for testing\n        Node head = new Node(1);\n        Node second = new Node(2);\n        Node third = new Node(3);\n        Node fourth = new Node(4);\n        Node fifth = new Node(5);\n\n        head.next = second;\n        second.next = third;\n        third.next = fourth;\n        fourth.next = fifth;\n        // Create a loop\n        fifth.next = third;\n\n        // Check if there is a loop\n        // in the linked list\n        if (detectLoop(head)) {\n            System.out.println(\"Loop detected in the linked list.\");\n        } else {\n            System.out.println(\"No loop detected in the linked list.\");\n        }\n\n        // No need to explicitly free memory\n        // in Java; the garbage collector handles it\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n# Node class represents\n# a node in a linked list\nclass Node:\n    def __init__(self, data, next_node=None):\n        self.data = data\n        self.next = next_node\n\n# Function to detect a loop \n# n a linked list\ndef detect_loop(head):\n    # Initialize a pointer 'temp' at \n    # the head of the linked list\n    temp = head\n\n    # Create a set to keep track\n    # of encountered nodes\n    node_set = set()\n\n    # Step 2: Traverse the linked list\n    while temp is not None:\n        # If the node is already\n        # in the set, there is a loop\n        if temp in node_set:\n            return True\n\n        # Store the current node in the set\n        node_set.add(temp)\n\n        # Move to the next node\n        temp = temp.next\n\n    # Step 3: If the list is successfully\n    # traversed without a loop, return False\n    return False\n\nif __name__ == \"__main__\":\n    # Create a sample linked list with\n    # a loop for testing\n    head = Node(1)\n    second = Node(2)\n    third = Node(3)\n    fourth = Node(4)\n    fifth = Node(5)\n\n    head.next = second\n    second.next = third\n    third.next = fourth\n    fourth.next = fifth\n    # Create a loop\n    fifth.next = third\n\n    # Check if there is a loop\n    # in the linked list\n    if detect_loop(head):\n        print(\"Loop detected in the linked list.\")\n    else:\n        print(\"No loop detected in the linked list.\")\n\n    # No need to explicitly free memory\n    # in Python; memory management is automatic\n\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n// Node class represents a\n// node in a linked list\nclass Node {\n    constructor(data, next) {\n        // Data stored in the node\n        this.data = data; \n        \n        // Pointer to the next node in the list\n        this.next = next;  \n    }\n}\n\n// Function to detect a loop\n// in a linked list\nfunction detectLoop(head) {\n    // Initialize a pointer 'temp'\n    // at the head of the linked list\n    let temp = head;\n\n    // Create a map to keep track of encountered nodes\n    const nodeMap = new Map();\n\n    // Step 2: Traverse the linked list\n    while (temp !== null) {\n        // If the node is already in\n        // the map, there is a loop\n        if (nodeMap.has(temp)) {\n            return true;\n        }\n        // Store the current node in the map\n        nodeMap.set(temp, true);\n        // Move to the next node\n        temp = temp.next;\n    }\n\n    // Step 3: If the list is successfully\n    // traversed without a loop, return false\n    return false;\n}\n\n// Create a sample linked list\n// with a loop for testing\nconst head = new Node(1);\nconst second = new Node(2);\nconst third = new Node(3);\nconst fourth = new Node(4);\nconst fifth = new Node(5);\n\nhead.next = second;\nsecond.next = third;\nthird.next = fourth;\nfourth.next = fifth;\n// Create a loop\nfifth.next = third;\n\n// Check if there is a loop in the linked list\nif (detectLoop(head)) {\n    console.log(\"Loop detected in the linked list.\");\n} else {\n    console.log(\"No loop detected in the linked list.\");\n}\n\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Brute Force Here -->\n<strong>Output:</strong> \nLoop detected in the linked list.\n\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n<!-- Insert Time and Space Complexity of Brute Force Here -->\n</p><p><strong>Time Complexity: O(N * 2 * log(N) )</strong>The algorithm traverses the linked list <strong>once</strong>, performing hashmap <strong>insertions</strong> and <strong>searches</strong> in the while loop for each node. The insertion and search operations in the unordered_map have a worst-case time complexity of <strong>O(log(N))</strong>. As the loop iterates through N nodes, the total time complexity is determined by the product of the traversal <strong>(O(N))</strong> and the average-case complexity of the <strong>hashmap operations (insert and search)</strong>, resulting in <strong>O(N * 2 * log(N)).&nbsp;</strong></p>\n<p>Hashmaps and their time complexities are discussed in more detail <a href=\"https://takeuforward.org/hashing/hashing-maps-time-complexity-collisions-division-rule-of-hashing-strivers-a2z-dsa-course/\" target=\"_blank\" rel=\"noopener\" title=\"\">here</a>.&nbsp;</p>\n<p><strong>Space Complexity: O(N) </strong>The code uses a <strong>hashmap</strong>/<strong>dictionary</strong> to store encountered nodes, which can take up to O(N) additional space, where 'n' is the number of nodes in the list. Hence, the <strong>spacecomplexity</strong> is O(N) due to the use of the map to track nodes.</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Brute Force Approach Ends here -->\n\n\n<!-- Optimal Approach Starts from here -->\n\n<div id=\"optimal-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nOptimal Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm of Better Approach Here -->\n<p>The previous method uses O(N) <strong>additional</strong> <strong>memory</strong>, which can become quite large as the <strong>linked</strong> <strong>list</strong> <strong>length</strong> <strong>grows</strong>. To enhance efficiency, the <strong>Tortoise</strong> and <strong>Hare</strong> <strong>Algorithm</strong> is introduced as an <strong>optimization</strong>.</p>\n<p>The Tortoise and Hare approach has been discussed in this <a href=\"https://takeuforward.org/data-structure/find-middle-element-in-a-linked-list/\" target=\"_blank\" rel=\"noopener\" title=\"\"><strong>article</strong></a>.&nbsp;</p>\n<p>When the <strong>tortoise</strong> and <strong>hare</strong> enter the loop, they may be at different positions within the loop due to the difference in their <strong>speeds</strong>. The hare is moving <strong>faster</strong>, so it will traverse a <strong>greater</strong> <strong>distance</strong> in the same amount of time.</p>\n<p>If there is <strong>no loop</strong> in the linked list, the hare will eventually reach the <strong>end</strong>, and the algorithm will terminate without a meeting occurring.</p>\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2024/01/Screenshot-2023-12-17-at-9.31.10-PM_red_border-1024x445.png\" alt=\"\" class=\"wp-image-13107\" width=\"768\" height=\"334\"></figure>\n<h3><strong>Algorithm</strong></h3>\n<p><strong>Step 1:</strong> Initialise two pointers, <strong>`slow`</strong> and <strong>`fast`</strong>, to the head of the linked list. <strong>`slow`</strong> will advance <strong>one</strong> <strong>step</strong> at a time, while <strong>`fast`</strong> will advance <strong>two</strong> <strong>steps</strong> at a time. These pointers will move <strong>simultaneously</strong>.</p>\n<p><strong>Step 2: </strong>Traverse the linked list with the <strong>`slow`</strong> and <strong>`fast`</strong> pointers. While traversing, repeatedly move <strong>`slow`</strong> <strong>one</strong> <strong>step</strong> and <strong>`fast`</strong> <strong>two</strong> <strong>steps</strong> at a time.</p>\n<p><strong>Step 3: </strong>Continue this traversal until one of the following conditions is met:</p>\n<ol><li><strong>`fast</strong>` or<strong> `fast.next`</strong> reaches the end of the linked list (i.e., becomes <strong>null</strong>). In this case, there is <strong>no loop</strong> in the linked list ie. the linked list is <strong>linear</strong>, and the algorithm terminates by returning <strong>false</strong>.<br></li><li><strong>`fast`</strong> and <strong>`slow`</strong> pointers meet at the same node. This indicates the presence of a <strong>loop</strong> in the linked list, and the algorithm terminates by returning <strong>`true`</strong>.</li></ol>\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2024/01/Screenshot-2023-12-17-at-7.44.56-PM_red_border-1024x564.png\" alt=\"\" class=\"wp-image-13108\" width=\"768\" height=\"423\"></figure>\n<h3><strong>Intuition:&nbsp;</strong></h3>\n<p>In a linked list with a loop, consider two pointers: one that moves one node at a time (<strong>slow</strong>) and another that moves two nodes at a time (<strong>fast</strong>). If we start moving these pointers with their defined speed they will surely enter the loop and might be at some distance <strong>'d'</strong> from each other within the loop.</p>\n<p>The key insight here is the <strong>relative</strong> <strong>speed</strong> between these pointers. The fast pointer, moving at double the speed of the slow one, <strong>closes</strong> <strong>the</strong> <strong>gap</strong> between them by <strong>one</strong> <strong>node</strong> <strong>in</strong> <strong>every</strong> <strong>iteration</strong>. This means that with each step, the distance decreases by one node.</p>\n<p>Imagine a race where one runner moves at <strong>twice</strong> the speed of another. The faster runner covers the ground faster and closes the gap, resulting in a reduction in the distance between them. Similarly, the <strong>fast</strong> pointer catches up to the <strong>slow</strong> pointer in the looped linked list, closing in the gap between them until it reaches zero.</p>\n<h3><strong>Proof:&nbsp;</strong></h3>\n<p>Let <strong>'d'</strong> denote the initial distance between the <strong>slow</strong> and <strong>fast</strong> pointers inside the loop. At each step, the fast pointer moves ahead by two nodes while the slow pointer advances by one node.</p>\n<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2024/01/Screenshot-2023-12-17-at-7.44.31-PM_red_border.png\" alt=\"\" class=\"wp-image-13109\" width=\"465\" height=\"287\"></figure>\n<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2024/01/Screenshot-2023-12-17-at-7.44.18-PM_red_border.png\" alt=\"\" class=\"wp-image-13110\" width=\"482\" height=\"563\"></figure>\n<p>The <strong>relative</strong> <strong>speed</strong> between them causes the gap to decrease by one node in each iteration (fast gains two nodes while slow gains one node). This continuous reduction ensures that the difference between their positions <strong>decreases</strong> <strong>steadily</strong>. Mathematically, if the fast pointer <strong>gains ground</strong> twice as fast as the slow pointer, the difference in their positions reduces by one node after each step. Consequently, this reduction in the distance between them continues <strong>until</strong> the<strong> difference becomes zero</strong>.</p>\n<p>Hence, the proof lies in this <strong>iterative</strong> <strong>process</strong> where the faster rate of the fast pointer leads to a continual decrease in the gap distance, ultimately resulting in their collision within the looped linked list.</p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;iostream&gt;\n#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\n// Node class represents a\n// node in a linked list\nclass Node {\npublic:\n    // Data stored in the node\n    int data;        \n    \n    // Pointer to the next node in the list\n    Node* next;      \n\n    // Constructor with both data \n    // and next node as parameters\n    Node(int data1, Node* next1) {\n        data = data1;\n        next = next1;\n    }\n\n    // Constructor with only data as\n    // a parameter, sets next to nullptr\n    Node(int data1) {\n        data = data1;\n        next = nullptr;\n    }\n};\n\n// Function to detect a loop in a linked\n// list using the Tortoise and Hare Algorithm\nbool detectCycle(Node* head) {\n    // Initialize two pointers, slow and fast,\n    // to the head of the linked list\n    Node* slow = head;\n    Node* fast = head;\n\n    // Step 2: Traverse the linked list with\n    // the slow and fast pointers\n    while (fast != nullptr &amp;&amp; fast-&gt;next != nullptr) {\n        // Move slow one step\n        slow = slow-&gt;next;\n        // Move fast two steps\n        fast = fast-&gt;next-&gt;next;\n\n        // Check if slow and fast pointers meet\n        if (slow == fast) {\n            return true;  // Loop detected\n        }\n    }\n\n    // If fast reaches the end of the list,\n    // there is no loop\n    return false;\n}\n\n\nint main() {\n    // Create a sample linked list\n    // with a loop for testing\n    \n    Node* head = new Node(1);\n    Node* second = new Node(2);\n    Node* third = new Node(3);\n    Node* fourth = new Node(4);\n    Node* fifth = new Node(5);\n\n    head-&gt;next = second;\n    second-&gt;next = third;\n    third-&gt;next = fourth;\n    fourth-&gt;next = fifth;\n     // Create a loop\n    fifth-&gt;next = third; \n\n    // Check if there is a loop \n    // n the linked list\n    if (detectCycle(head)) {\n        cout &lt;&lt; \"Loop detected in the linked list.\" &lt;&lt; endl;\n    } else {\n        cout &lt;&lt; \"No loop detected in the linked list.\" &lt;&lt; endl;\n    }\n\n    // Clean up memory (free the allocated nodes)\n    delete head;\n    delete second;\n    delete third;\n    delete fourth;\n    delete fifth;\n\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.HashMap;\nimport java.util.Map;\n\n// Node class represents a\n// node in a linked list\nclass Node {\n    // Data stored in the node\n    public int data;   \n    // Pointer to the next node in the list\n    public Node next;  \n\n    // Constructor with both data\n    // and next node as parameters\n    public Node(int data, Node next) {\n        this.data = data;\n        this.next = next;\n    }\n\n    // Constructor with only data as\n    // a parameter, sets next to null\n    public Node(int data) {\n        this.data = data;\n        this.next = null;\n    }\n}\n\npublic class Main {\n\n    // Function to detect a loop in a linked list\n    // using the Tortoise and Hare Algorithm\n    public static boolean detectCycle(Node head) {\n        // Initialize two pointers, slow and fast,\n        // to the head of the linked list\n        Node slow = head;\n        Node fast = head;\n\n        // Step 2: Traverse the linked list\n        // with the slow and fast pointers\n        while (fast != null &amp;&amp; fast.next != null) {\n            // Move slow one step\n            slow = slow.next;\n            // Move fast two steps\n            fast = fast.next.next;\n\n            // Check if slow and fast pointers meet\n            if (slow == fast) {\n                return true;  // Loop detected\n            }\n        }\n\n        // If fast reaches the end of the\n        // list, there is no loop\n        return false;\n    }\n\n\n    public static void main(String[] args) {\n        // Create a sample linked list\n        // with a loop for testing\n        Node head = new Node(1);\n        Node second = new Node(2);\n        Node third = new Node(3);\n        Node fourth = new Node(4);\n        Node fifth = new Node(5);\n\n        head.next = second;\n        second.next = third;\n        third.next = fourth;\n        fourth.next = fifth;\n        // Create a loop\n        fifth.next = third;\n\n        // Check if there is a loop\n        // in the linked list\n        if (detectCycle(head)) {\n            System.out.println(\"Loop detected in the linked list.\");\n        } else {\n            System.out.println(\"No loop detected in the linked list.\");\n        }\n\n        // No need to explicitly free memory\n        // in Java; the garbage collector handles it\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n# Node class represents\n# a node in a linked list\nclass Node:\n    def __init__(self, data, next_node=None):\n        self.data = data\n        self.next = next_node\n\n# Function to detect a loop in a\n# linked list using the Tortoise and Hare Algorithm\ndef detect_cycle(head):\n    # Initialize two pointers, slow and fast,\n    # to the head of the linked list\n    slow = head\n    fast = head\n\n    # Step 2: Traverse the linked list\n    # with the slow and fast pointers\n    while fast is not None and fast.next is not None:\n        # Move slow one step\n        slow = slow.next\n        # Move fast two steps\n        fast = fast.next.next\n\n        # Check if slow and fast pointers meet\n        if slow == fast:\n            return True  # Loop detected\n\n    # If fast reaches the end of the\n    # list, there is no loop\n    return False\n\n\nif __name__ == \"__main__\":\n    # Create a sample linked list with\n    # a loop for testing\n    head = Node(1)\n    second = Node(2)\n    third = Node(3)\n    fourth = Node(4)\n    fifth = Node(5)\n\n    head.next = second\n    second.next = third\n    third.next = fourth\n    fourth.next = fifth\n    # Create a loop\n    fifth.next = third\n\n    # Check if there is a loop\n    # in the linked list\n    if detect_cycle(head):\n        print(\"Loop detected in the linked list.\")\n    else:\n        print(\"No loop detected in the linked list.\")\n\n    # No need to explicitly free memory\n    # in Python; memory management is automatic\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n// Node class represents a\n// node in a linked list\nclass Node {\n    constructor(data, next) {\n        // Data stored in the node\n        this.data = data; \n        \n        // Pointer to the next node in the list\n        this.next = next;  \n    }\n}\n\n// Function to detect a loop in a linked list\n// using the Tortoise and Hare Algorithm\nfunction detectCycle(head) {\n    // Initialize two pointers, slow and fast,\n    // to the head of the linked list\n    let slow = head;\n    let fast = head;\n\n    // Step 2: Traverse the linked list\n    // with the slow and fast pointers\n    while (fast !== null &amp;&amp; fast.next !== null) {\n        // Move slow one step\n        slow = slow.next;\n        // Move fast two steps\n        fast = fast.next.next;\n\n        // Check if slow and fast pointers meet\n        if (slow === fast) {\n            return true;  // Loop detected\n        }\n    }\n\n    // If fast reaches the end of the list, there is no loop\n    return false;\n}\n\n\n// Create a sample linked list\n// with a loop for testing\nconst head = new Node(1);\nconst second = new Node(2);\nconst third = new Node(3);\nconst fourth = new Node(4);\nconst fifth = new Node(5);\n\nhead.next = second;\nsecond.next = third;\nthird.next = fourth;\nfourth.next = fifth;\n// Create a loop\nfifth.next = third;\n\n// Check if there is a loop in the linked list\nif (detectCycle(head)) {\n    console.log(\"Loop detected in the linked list.\");\n} else {\n    console.log(\"No loop detected in the linked list.\");\n}\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Optimal Apporach Here -->\n<strong>Output:</strong> \nLoop detected in the linked list.\n\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Optimal Approach-->\n</p><p><strong>Time Complexity: O(N)</strong>, where N is the number of nodes in the linked list. This is because in the <strong>worst-case scenario</strong>, the <strong>fast</strong> pointer, which <strong>moves</strong> <strong>quicker</strong>, will either reach the end of the list (in case of no loop) or meet the <strong>slow</strong> pointer (in case of a loop) in a <strong>linear time</strong> relative to the length of the list.</p>\n<p>The key insight into why this is <strong>O(N)</strong> and <strong>not something slower</strong> is that each step of the algorithm reduces the distance between the fast and slow pointers (when they are in the loop) by one. Therefore, the <strong>maximum</strong> <strong>number</strong> of <strong>steps</strong> needed for them to meet is <strong>proportional</strong> to the number of nodes in the list.</p>\n<p><br><strong>Space Complexity : O(1)</strong> The code uses only a <strong>constantamount</strong> of <strong>additionalspace</strong>, regardless of the linked list's length. This is achieved by using two pointers (<strong>slow</strong> and <strong>fast</strong>) to detect the loop without any significant extra memory usage, resulting in <strong>constantspace</strong> complexity, O(1).</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Optimal Approach Starts from here -->\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n<details>\n<summary class=\"main-summary\">\n<span>\nVideo Explanation\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"yt-video-wrapper\">\n\n<!-- Insert iframe embed Link of Youtube Video-->\n<iframe class=\"lazy-loaded\" loading=\"lazy\" title=\"Detect a loop in a Linked List\" width=\"810\" height=\"456\" data-lazy-type=\"iframe\" data-src=\"https://www.youtube.com/embed/wiOo4DC5GGA?si=2K96t4rt0tRlch5c\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\" src=\"https://www.youtube.com/embed/wiOo4DC5GGA?feature=oembed\"></iframe><noscript>\n<iframe loading=\"lazy\" title=\"Detect a loop in a Linked List\" width=\"810\" height=\"456\" src=\"https://www.youtube.com/embed/wiOo4DC5GGA?si=2K96t4rt0tRlch5c\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe></noscript>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script>\n\nconst codeSections = document.querySelectorAll('.code-section');\n\n// Get last selected language from localStorage or set default value\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\n// Update last selected language for all sections and store in localStorage\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\n// Handle copy button click event\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\n// Set initial state of the tabs\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<script>\nconst codeSections = document.querySelectorAll('.code-section');\n\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script src=\"https://takeuforward.org/UXApproachDropDowns/2ApproachJSScript.js\"></script>\n<!-- /wp:html -->\n\n<!-- wp:paragraph -->\n<p>In case you are learning DSA, you should check out our free&nbsp;<a href=\"https://takeuforward.org/strivers-a2z-dsa-course/strivers-a2z-dsa-course-sheet-2/\" target=\"_blank\" rel=\"noopener\" title=\"\">A2Z DSA Course</a>&nbsp;with videos and blogs.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;</em><strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268\" target=\"_blank\" rel=\"noreferrer noopener\">Gauri Tomar</a></strong><em>&nbsp;for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam</em>, <a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\" target=\"_blank\" rel=\"noopener\" title=\"\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->"
}