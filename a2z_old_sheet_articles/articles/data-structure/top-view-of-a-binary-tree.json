{
    "dislikes": 7,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:09:11 GMT+0530 (India Standard Time)",
    "slug": "top-view-of-a-binary-tree",
    "aid": "1416",
    "title": "Top view of a Binary Tree",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/top-view-of-bt",
    "topics": [
        {
            "topic-id": "binary-tree",
            "topic-title": "Binary Tree"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "recursion",
            "topic-title": "Recursion"
        }
    ],
    "content": "<p><strong>Problem Statement: </strong> Given a Binary Tree, return its Top View. The Top View of a Binary Tree is the set of nodes visible when we see the tree from the top.\n\n \n</p>\n\n<div id=\"article_examples\">\n    <details class=\"article_example_details\">\n        <summary class=\"article_example_summary\">\n            <span><strong>\n                    Examples\n                </strong>\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"atricle_example_content\">\n            <pre class=\"wp-block-preformatted\">\n                <span><strong>Example 1:</strong></span>\n\t\t\t\t<span><strong>Input:</strong>Binary Tree: 1 2 3 4 10 9 11 -1 5 -1 -1 -1 -1 -1 -1 -1 6\n\t\t\t\t</span>\n\t\t\t\t<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/top-view-tree-image1-B4hVS6fx\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n\t\t\t\t<span><strong>Output:</strong> Top View: [4, 2, 1, 3, 11]</span>\n\t\t\t\t<span><strong>Explanation: </strong></span>\n\t\t\t\t<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/top-view-tree-image2-yzsmeIXv\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n\t\t\t\t<span><strong>Example 2:</strong></span>\n\t\t\t\t<span><strong>Input:</strong>Binary Tree: 2 7 5 2 6 -1 9 -1 -1 5 11 4 -1\n\t\t\t\t</span>\n\t\t\t\t<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/top-view-tree-image3-HzQGi34x\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n\t\t\t\t<span><strong>Output :</strong> Top View: [2, 7, 2, 5, 9]</span>\n\t\t\t\t<span><strong>Explanation: </strong></span>\n\t\t\t\t<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/top-view-tree-image4-IZBtc6WM\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n\t\t\t\t\n            </pre>\n        </div>\n    </details>\n</div>\n\n<!-- This is Practice Section-->\n<div class=\"practice\">\n    <span><strong>Practice: </strong></span>\n    <div class=\"problem-buttons\">\n\n        <!-- Add Problem Link inside href -->\n        <a href=\"https://www.codingninjas.com/studio/problems/top-view-of-binary-tree_799401?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf\" target=\"_blank\" rel=\"noopener\">\n            <span>Solve Problem</span>\n            <img src=\"https://takeuforward-content-images.s3.ap-south-1.amazonaws.com/content/Group-11-5-pFOq-8ga\"\n                alt=\"code-studio\">\n        </a>\n    </div>\n    <!--<div class=\"problem-buttons\">\n         Add Problem Link inside href \n        <a href=\"\" target=\"_blank\" rel=\"noopener\">\n            <span>Solve Problem</span>\n            <img src=\"https://cdn.iconscout.com/icon/free/png-256/free-leetcode-3521542-2944960.png?f=webp\"\n                alt=\"leetcode\">\n        </a>\n    </div>-->\n</div>\n\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\n        yourself first. </em></p>\n\n\n<div id=\"brute-force-approach\">\n    <details>\n        <summary class=\"main-summary\">\n            <span>\n                Optimal Approach \n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                </path>\n            </svg>\n        </summary>\n        <div class=\"common-drops\">\n            <details class=\"secondary-details\" open=\"\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Algorithm / Intuition\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <div class=\"approach-algorithm\">\n                    <!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n                    <p>To imagine the Binary Tree from above, we visualise vertical lines passing through the tree. Each vertical line represents a unique vertical position.\n                    Nodes to the right of the tree\u2019s centre are assigned positive vertical indexes. As we move to the right, the vertical index increases. Nodes to the left of the tree\u2019s centre are assigned negative vertical indexes. As we move to the left, the vertical index decreases.</p>\n                    <p><figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/top-view-tree-image5-VXXF3WqV\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure></p>\n                    <p>We use a map data structure to store the nodes corresponding to each vertical level of the tree as the map automatically sorts the elements based on their ascending value. Against each vertical level, the node highest in the tree at that vertical level is added by traversing the tree level order wise (BFS).</p>\n                    <p><figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/top-view-tree-image6-1C7YrBA4\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure></p>\n                    \n                    <p><strong>Algorithm:</strong></p>\n                    <p><strong>Step 1:</strong> Create a vector `ans` to store the result. Check if the tree is empty. If it is, return an empty vector.</p>\n                    \n                    <p><strong>Step 2:</strong> Create a map to store the top view of nodes based on their vertical positions. The key of this map is the vertical index and the value is the node\u2019s data.</p>\n                    \n                    \n                    <p><strong>Step 3:</strong> Initialise a queue to perform breadth first traversal. Each element of this queue is the node of the binary tree along with its vertical coordinate. \n                    Enqueue the root node into the queue with its vertical position initialised to 0.</p>\n                    <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/top-view-tree-image7-VjjqL4-H\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n                    \n                    \n                    <p><strong>Step 4:</strong> While the queue is not empty, pop the front node of the queue and for this node:\n                    <ol><li>Get its vertical position. If this vertical position is not in the map, add the node\u2019s data to the map. This means that this node is the first node encountered at this vertical position during the traversal.</li><li>If the vertical position of this node is already a key in the map, it implies that a node higher in the tree with the same vertical position has already been processed.</li><li>Enqueue the left child with a decreased vertical position ie. current vertical index -1. As when we move to the left child, we are moving towards the left column in the vertical order traversal.</li><li>Enqueue the right child with an increased vertical position ie. current vertical index + 1. As when we move to the right child, we are moving towards the right column in the vertical order traversal.</li></ol></p>\n                    <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/top-view-tree-image8-DlcI4CEn\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n\n                    <p><strong>Step 5:</strong> Iterate over the map and push the values of each node into the top view traversal.\n                    <ol><li>Since the keys of the map are sorted based on their keys (vertical positions), the nodes added to the `ans` vector will be sorted left to right.</li><li>Return the \u2018ans\u2019 vector.</li></ol></p>\n                    <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/top-view-tree-image9-5QAB0ECD\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n                    \n                    \n                </div>\n            </details>\n            <details class=\"code-section secondary-details\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Code\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <div class=\"code-tabs\">\n                    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n                    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n                    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n                    <button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n                    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\"\n                        xmlns=\"http://www.w3.org/2000/svg\">\n                        <path\n                            d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n                        </path>\n                    </svg>\n                </div>\n                <div class=\"code-content\">\n                    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;set&gt;\n#include &lt;queue&gt;\n#include &lt;map&gt;\n\nusing namespace std;\n\n// Node structure for the binary tree\nstruct Node {\n    int data;\n    Node* left;\n    Node* right;\n    // Constructor to initialize\n    // the node with a value\n    Node(int val) : data(val), left(nullptr), right(nullptr) {}\n};\n\nclass Solution{\npublic:\n    // Function to return the\n    // top view of the binary tree\n    vector&lt;int&gt; topView(Node* root){\n        // Vector to store the result\n        vector&lt;int&gt; ans;\n        \n        // Check if the tree is empty\n        if(root == NULL){\n            return ans;\n        }\n        \n        // Map to store the top view nodes\n        // based on their vertical positions\n        map&lt;int, int&gt; mpp;\n        \n        // Queue for BFS traversal, each element\n        // is a pair containing node \n        // and its vertical position\n        queue&lt;pair&lt;Node*, int&gt;&gt; q;\n        \n        // Push the root node with its vertical\n        // position (0) into the queue\n        q.push({root, 0});\n        \n        // BFS traversal\n        while(!q.empty()){\n            // Retrieve the node and its vertical\n            // position from the front of the queue\n            auto it = q.front();\n            q.pop();\n            Node* node = it.first;\n            int line = it.second;\n            \n            // If the vertical position is not already\n            // in the map, add the node's data to the map\n            if(mpp.find(line) == mpp.end()){\n                mpp[line] = node-&gt;data;\n            }\n            \n            // Process left child\n            if(node-&gt;left != NULL){\n                // Push the left child with a decreased\n                // vertical position into the queue\n                q.push({node-&gt;left, line - 1});\n            }\n            \n            // Process right child\n            if(node-&gt;right != NULL){\n                // Push the right child with an increased\n                // vertical position into the queue\n                q.push({node-&gt;right, line + 1});\n            }\n        }\n        \n        // Transfer values from the\n        // map to the result vector\n        for(auto it : mpp){\n            ans.push_back(it.second);\n        }\n        \n        return ans;\n    }\n};\n\nint main() {\n    // Creating a sample binary tree\n    Node* root = new Node(1);\n    root-&gt;left = new Node(2);\n    root-&gt;left-&gt;left = new Node(4);\n    root-&gt;left-&gt;right = new Node(10);\n    root-&gt;left-&gt;left-&gt;right = new Node(5);\n    root-&gt;left-&gt;left-&gt;right-&gt;right = new Node(6);\n    root-&gt;right = new Node(3);\n    root-&gt;right-&gt;right = new Node(10);\n    root-&gt;right-&gt;left = new Node(9);\n\n    Solution solution;\n\n    // Get the top view traversal\n    vector&lt;int&gt; topView =\n                    solution.topView(root);\n\n    // Print the result\n    cout &lt;&lt; &quot;Top View Traversal: &quot;&lt;&lt; endl;\n    for(auto node: topView){\n        cout &lt;&lt; node &lt;&lt; &quot; &quot;;\n    }\n\n    return 0;\n}\n                            </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block \" data-lang=\"java\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\n// Node structure for the binary tree\nclass Node {\n    int data;\n    Node left;\n    Node right;\n    \n    // Constructor to initialize\n    // the node with a value\n    public Node(int val) {\n        data = val;\n        left = null;\n        right = null;\n    }\n}\n\npublic class Solution {\n    // Function to return the\n    // top view of the binary tree\n    public List&lt;Integer&gt; topView(Node root) {\n        // List to store the result\n        List&lt;Integer&gt; ans = new ArrayList&lt;&gt;();\n        \n        // Check if the tree is empty\n        if (root == null) {\n            return ans;\n        }\n        \n        // Map to store the top view nodes\n        // based on their vertical positions\n        Map&lt;Integer, Integer&gt; mpp = new TreeMap&lt;&gt;();\n        \n        // Queue for BFS traversal, each element\n        // is a pair containing node \n        // and its vertical position\n        Queue&lt;Pair&lt;Node, Integer&gt;&gt; q = new LinkedList&lt;&gt;();\n        \n        // Push the root node with its vertical\n        // position (0) into the queue\n        q.add(new Pair&lt;&gt;(root, 0));\n        \n        // BFS traversal\n        while (!q.isEmpty()) {\n            // Retrieve the node and its vertical\n            // position from the front of the queue\n            Pair&lt;Node, Integer&gt; pair = q.poll();\n            Node node = pair.getKey();\n            int line = pair.getValue();\n            \n            // If the vertical position is not already\n            // in the map, add the node's data to the map\n            if (!mpp.containsKey(line)) {\n                mpp.put(line, node.data);\n            }\n            \n            // Process left child\n            if (node.left != null) {\n                // Push the left child with a decreased\n                // vertical position into the queue\n                q.add(new Pair&lt;&gt;(node.left, line - 1));\n            }\n            \n            // Process right child\n            if (node.right != null) {\n                // Push the right child with an increased\n                // vertical position into the queue\n                q.add(new Pair&lt;&gt;(node.right, line + 1));\n            }\n        }\n        \n        // Transfer values from the\n        // map to the result list\n        for (int value : mpp.values()) {\n            ans.add(value);\n        }\n        \n        return ans;\n    }\n\n    public static void main(String[] args) {\n        // Creating a sample binary tree\n        Node root = new Node(1);\n        root.left = new Node(2);\n        root.left.left = new Node(4);\n        root.left.right = new Node(10);\n        root.left.left.right = new Node(5);\n        root.left.left.right.right = new Node(6);\n        root.right = new Node(3);\n        root.right.right = new Node(10);\n        root.right.left = new Node(9);\n\n        Solution solution = new Solution();\n\n        // Get the top view traversal\n        List&lt;Integer&gt; topView = solution.topView(root);\n\n        // Print the result\n        System.out.println(&quot;Vertical Traversal: &quot;);\n        for (int node : topView) {\n            System.out.print(node + &quot; &quot;);\n        }\n    }\n}\n                            </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block\" data-lang=\"python\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"python\" class=\"language-python\">\nfrom collections import deque\n\n# Node class for the binary tree\nclass Node:\n    def __init__(self, val):\n        self.data = val\n        self.left = None\n        self.right = None\n\nclass Solution:\n    # Function to return the top view of the binary tree\n    def topView(self, root):\n        # Vector to store the result\n        ans = []\n        \n        # Check if the tree is empty\n        if not root:\n            return ans\n        \n        # Map to store the top view nodes\n        # based on their vertical positions\n        mpp = {}\n        \n        # Queue for BFS traversal, each element\n        # is a pair containing node \n        # and its vertical position\n        q = deque([(root, 0)])\n        \n        # Push the root node with its vertical\n        # position (0) into the queue\n        while q:\n            # Retrieve the node and its vertical\n            # position from the front of the queue\n            node, line = q.popleft()\n            \n            # If the vertical position is not already\n            # in the map, add the node's data to the map\n            if line not in mpp:\n                mpp[line] = node.data\n            \n            # Process left child\n            if node.left:\n                # Push the left child with a decreased\n                # vertical position into the queue\n                q.append((node.left, line - 1))\n            \n            # Process right child\n            if node.right:\n                # Push the right child with an increased\n                # vertical position into the queue\n                q.append((node.right, line + 1))\n        \n        # Transfer values from the\n        # map to the result vector\n        for value in sorted(mpp.items()):\n            ans.append(value[1])\n        \n        return ans\n\n# Creating a sample binary tree\nroot = Node(1)\nroot.left = Node(2)\nroot.left.left = Node(4)\nroot.left.right = Node(10)\nroot.left.left.right = Node(5)\nroot.left.left.right.right = Node(6)\nroot.right = Node(3)\nroot.right.right = Node(10)\nroot.right.left = Node(9)\n\nsolution = Solution()\n\n# Get the top view traversal\ntopView = solution.topView(root)\n\n# Print the result\nprint(&quot;Vertical Traversal:&quot;)\nfor node in topView:\n    print(node, end=&quot; &quot;)\n                           </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block\" data-lang=\"javascript\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"javascript\" class=\"language-javascript\">\n// Node structure for the binary tree\nclass Node {\n    constructor(val) {\n        this.data = val;\n        this.left = null;\n        this.right = null;\n    }\n}\n\nclass Solution {\n    // Function to return the\n    // top view of the binary tree\n    topView(root) {\n        // Vector to store the result\n        let ans = [];\n\n        // Check if the tree is empty\n        if (root === null) {\n            return ans;\n        }\n\n        // Map to store the top view nodes\n        // based on their vertical positions\n        let mpp = new Map();\n\n        // Queue for BFS traversal, each element\n        // is a pair containing node\n        // and its vertical position\n        let q = [];\n\n        // Push the root node with its vertical\n        // position (0) into the queue\n        q.push([root, 0]);\n\n        // BFS traversal\n        while (q.length !== 0) {\n            // Retrieve the node and its vertical\n            // position from the front of the queue\n            let [node, line] = q.shift();\n\n            // If the vertical position is not already\n            // in the map, add the node's data to the map\n            if (!mpp.has(line)) {\n                mpp.set(line, node.data);\n            }\n\n            // Process left child\n            if (node.left !== null) {\n                // Push the left child with a decreased\n                // vertical position into the queue\n                q.push([node.left, line - 1]);\n            }\n\n            // Process right child\n            if (node.right !== null) {\n                // Push the right child with an increased\n                // vertical position into the queue\n                q.push([node.right, line + 1]);\n            }\n        }\n\n        // Transfer values from the\n        // map to the result vector\n        for (let [key, value] of mpp) {\n            ans.push(value);\n        }\n\n        return ans;\n    }\n}\n\n// Creating a sample binary tree\nlet root = new Node(1);\nroot.left = new Node(2);\nroot.left.left = new Node(4);\nroot.left.right = new Node(10);\nroot.left.left.right = new Node(5);\nroot.left.left.right.right = new Node(6);\nroot.right = new Node(3);\nroot.right.right = new Node(10);\nroot.right.left = new Node(9);\n\nlet solution = new Solution();\n\n// Get the top view traversal\nlet topView = solution.topView(root);\n\n// Print the result\nconsole.log(&quot;Vertical Traversal:&quot;);\nfor (let node of topView) {\n    console.log(node + &quot; &quot;);\n}\n\n                            </code>\n                        </pre>\n                    </div>\n                    <p>\n                       <strong>Output</strong> \n                      \tTop View Traversal: 4 2 1 3 10 \n                    </p>\n                </div>\n            </details>\n            <details class=\"secondary-details\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Complexity Analysis\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <p>\n                    <!-- Insert Time and Space Complexity  Here -->\n                    <p><strong>Time Complexity: O(N)</strong> where N is the number of nodes in the Binary Tree. This complexity arises from visiting each node exactly once during the BFS traversal.</p>\n\n\t\t\t\t\t<p><strong>Space Complexity:  O(N/2 + N/2)</strong>  where N represents the number of nodes in the Binary Tree.\n\t\t\t\t\t<ol><li>The main space consuming data structure is the queue used for BFS traversal. It acquires space proportional to the number of nodes in the level it is exploring hence in the worst case of a balanced binary tree, the queue will have at most N/2 nodes which is the maximum width.</li><li>Additionally, the map is used to store the top view nodes based on their vertical positions hence its complexity will also be proportional to the greatest width level. In the worst case, it may have N/2 entries as well.</li></ol> </p>\n\n                </p>\n            </details>\n        </div>\n    </details>\n</div>\n\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n    <details>\n        <summary class=\"main-summary\">\n            <span>\n                Video Explanation\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"yt-video-wrapper\">\n            <!-- Insert iframe embed Link of Youtube Video-->\n          <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Et9OCDNvJ78?si=SuRJSlsHRx1eXm71\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n        </div>\n    </details>\n</div>\n\n<blockquote class=\"wp-block-quote\">\n    Special thanks to <strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268\">Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,<strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\"> please check out this article</a></strong>\n</blockquote>\n\n<script>\n\n    const codeSections = document.querySelectorAll('.code-section');\n\n    // Get last selected language from localStorage or set default value\n    let lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp';\n\n    codeSections.forEach((section, sectionIndex) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n        const copyBtn = section.querySelector('.copy-btn');\n\n        codeTabs.forEach((tab) => {\n            tab.addEventListener('click', () => {\n                codeTabs.forEach((t) => {\n                    t.classList.remove('dsa_article_code_active');\n                });\n                tab.classList.add('dsa_article_code_active');\n\n                const lang = tab.dataset.lang;\n                const activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                codeBlocks.forEach((block) => {\n                    if (block === activeBlock) {\n                        block.classList.add('dsa_article_code_active');\n                    } else {\n                        block.classList.remove('dsa_article_code_active');\n                    }\n                });\n\n                // Update last selected language for all sections and store in localStorage\n                lastSelectedLanguage = lang;\n                localStorage.setItem('lastSelectedLanguage', lang);\n                codeSections.forEach((otherSection, otherIndex) => {\n                    if (otherIndex !== sectionIndex) {\n                        const otherTabs = otherSection.querySelectorAll('.code-tab');\n                        otherTabs.forEach((otherTab) => {\n                            if (otherTab.dataset.lang === lang) {\n                                otherTab.classList.add('dsa_article_code_active');\n                            } else {\n                                otherTab.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                        const otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                        const otherCodeBlocks = otherSection.querySelectorAll('.code-block');\n                        otherCodeBlocks.forEach((block) => {\n                            if (block === otherActiveBlock) {\n                                block.classList.add('dsa_article_code_active');\n                            } else {\n                                block.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                    }\n                });\n            });\n        });\n\n        // Handle copy button click event\n        copyBtn.addEventListener('click', () => {\n            const activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\n            navigator.clipboard.writeText(activeBlock.innerText);\n            copyBtn.classList.add('dsa_article_code_active');\n            setTimeout(() => {\n                copyBtn.classList.remove('dsa_article_code_active');\n            }, 1000);\n        });\n    });\n\n    // Set initial state of the tabs\n    codeSections.forEach((section) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n\n        codeTabs.forEach((tab) => {\n            if (tab.dataset.lang === lastSelectedLanguage) {\n                tab.classList.add('dsa_article_code_active');\n            } else {\n                tab.classList.remove('dsa_article_code_active');\n            }\n        });\n\n        codeBlocks.forEach((block) => {\n            if (block.dataset.lang === lastSelectedLanguage) {\n                block.classList.add('dsa_article_code_active');\n            } else {\n                block.classList.remove('dsa_article_code_active');\n            }\n        });\n    });\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>",
    "category_tag": "data-structure",
    "likes": 74,
    "preview": "Problem Statement: Given a Binary Tree, return its Top View. The Top View of a Binary Tree is the set of nodes visible when we see the tree from the top. Examples Example 1: Input:Binary Tree: 1 2..."
}