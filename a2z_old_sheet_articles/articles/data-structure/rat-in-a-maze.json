{
    "dislikes": 3,
    "video": "bLGZhJlt4y0",
    "publishedOn": "Sun Mar 24 2024 22:09:24 GMT+0530 (India Standard Time)",
    "slug": "rat-in-a-maze",
    "aid": "1477",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/rat-in-a-maze",
    "title": "Rat in a Maze",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "recursion",
            "topic-title": "Recursion"
        }
    ],
    "category_tag": "data-structure",
    "likes": 68,
    "preview": "Rat in a Maze Consider a rat placed at (0, 0) in a square matrix of order N * N. It has to reach the destination at (N - 1, N - 1). Find all possible paths that the rat can take to reach from sourc...",
    "content": "<!-- wp:paragraph -->\n<p><strong>Rat in a Maze</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Consider a rat placed at <strong>(0, 0)</strong> in a square matrix<strong> </strong>of order <strong>N * N</strong>. It has to reach the destination at <strong>(N - 1, N - 1)</strong>. Find all possible paths that the rat can take to reach from source to destination. The directions in which the rat can move are <strong>'U'(up)</strong>, <strong>'D'(down)</strong>, <strong>'L' (left)</strong>, <strong>'R' (right)</strong>. Value 0 at a cell in the matrix represents that it is blocked and the rat cannot move to it while value 1 at a cell in the matrix represents that rat can travel through it.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Note</strong>: In a path, no cell can be visited more than one time.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Print the answer in lexicographical(sorted) order</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Examples:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\"><strong>Example 1:</strong>\n\n<strong>Input:</strong>\nN = 4\nm[][] = {{1, 0, 0, 0},\n        {1, 1, 0, 1}, \n        {1, 1, 0, 0},\n        {0, 1, 1, 1}}\n\n<strong>Output:</strong> DDRDRR DRDDRR\n\n<strong>Explanation:</strong>\n\n<img width=\"227\" height=\"227\" src=\"https://lh4.googleusercontent.com/S8inL4fJsNLyNYtmgFbXAx5BEcA0rgKk3-PYWkVYc90hIBhSgMYWBWtNqz82H0zCZvXqYxp1g3kDpTwjKhTYB2NjwgoHgoPU9Bve6aFzbl-mvI4I90NmEvbV0TpiQ3LXeHccBVEC\">\n\nThe rat can reach the destination at (3, 3) from (0, 0) by two paths - DRDDRR and DDRDRR, when printed in sorted order we get DDRDRR DRDDRR.\n\n<strong>Example 2:</strong>\n\n<strong>Input:</strong> N = 2\n       m[][] = {{1, 0},\n                {1, 0}}\n\n<strong>Output:</strong>\n No path exists and the destination cell is blocked.\n</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Solution</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"textColor\":\"vivid-red\"} -->\n<p class=\"has-vivid-red-color has-text-color\"><strong><em>Disclaimer</em></strong>: <em>Don't jump directly to the solution, try it out yourself first.</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Solution 1: Recursion</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Intuition:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The best way to solve such problems is using recursion.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Approach</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>Start at the source(0,0) with an empty string and try every possible path i.e upwards<strong>(U)</strong>, downwards<strong>(D)</strong>, leftwards<strong>(L)</strong> and rightwards<strong>(R)</strong>.</li><li>As the <strong>answer </strong>should be in lexicographical order so it's better to try the <strong>directions </strong>in lexicographical order i.e (D,L,R,U)</li><li>Declare a 2D-array named visited because the question states that a single cell should be included only once in the path,so it's important to keep track of the visited cells in a particular path.</li><li>If a cell is in path, mark it in the visited array.</li><li>Also keep a check of the<strong> \u201cout of bound\u201d </strong>conditions while going in a particular direction in the matrix.&nbsp;</li><li>Whenever you reach the destination<strong>(n,n)</strong> it's very important to get back as shown in the recursion tree.</li><li>While getting back, keep on unmarking the visited array for the respective direction.Also check whether there is a different path possible while getting back and if yes, then mark that cell in the visited array.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Recursive tree:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"624\" height=\"420\" src=\"https://lh5.googleusercontent.com/G8Ix6_osmHr9thVF0o1o5QL-V6-G2wQPM3J1IwCTFcc3rzoGNbwNo9ZuIjLl5BNrx-bj50VxcU1A3qC6EPiKUxxOD2OtsBAGz0jQksI03jn8r9vkGX2QZs31ghpwUZIHLxTMsgRt\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>For&nbsp; \u201cDDRDRR\u201d :</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:columns -->\n<div class=\"wp-block-columns\"><!-- wp:column {\"width\":\"50%\"} -->\n<div class=\"wp-block-column\" style=\"flex-basis:50%\"><!-- wp:paragraph -->\n<p><strong><img width=\"288\" height=\"303\" src=\"https://lh4.googleusercontent.com/jHuDgGszsySZjD2RTMQE4DCT_9OC46Red7ulQwP-8ctIP-C8zxYn2NMljOS4E_y6P1ByfQ3F5vabBsAPJIiuhy-4j5GvHgs0wjkdJQSb9KT1zooSxHb9XqwAGjwyDspd30ZBscHF\"></strong> </p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column -->\n\n<!-- wp:column {\"width\":\"50%\"} -->\n<div class=\"wp-block-column\" style=\"flex-basis:50%\"><!-- wp:paragraph -->\n<p><strong><img src=\"https://lh5.googleusercontent.com/HRDMA8b1Htmoz-vNJKntjUXhBnmjptURMWkykzEe4jEP2eYVtP6As4Zf_uBX-vVf9r1wK-hBJ2wuGhKKvikRUr5URVTYArEjhE-TQEAd98505_L0M-EqylJxVawURD1Z4lagpyfc\" width=\"271\" height=\"296\"></strong></p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column --></div>\n<!-- /wp:columns -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\nclass Solution {\n  void findPathHelper(int i, int j, vector &lt; vector &lt; int &gt;&gt; &amp; a, int n, vector &lt; string &gt; &amp; ans, string move,\n    vector &lt; vector &lt; int &gt;&gt; &amp; vis) {\n    if (i == n - 1 &amp;&amp; j == n - 1) {\n      ans.push_back(move);\n      return;\n    }\n\n    // downward\n    if (i + 1 &lt; n &amp;&amp; !vis[i + 1][j] &amp;&amp; a[i + 1][j] == 1) {\n      vis[i][j] = 1;\n      findPathHelper(i + 1, j, a, n, ans, move + 'D', vis);\n      vis[i][j] = 0;\n    }\n\n    // left\n    if (j - 1 &gt;= 0 &amp;&amp; !vis[i][j - 1] &amp;&amp; a[i][j - 1] == 1) {\n      vis[i][j] = 1;\n      findPathHelper(i, j - 1, a, n, ans, move + 'L', vis);\n      vis[i][j] = 0;\n    }\n\n    // right \n    if (j + 1 &lt; n &amp;&amp; !vis[i][j + 1] &amp;&amp; a[i][j + 1] == 1) {\n      vis[i][j] = 1;\n      findPathHelper(i, j + 1, a, n, ans, move + 'R', vis);\n      vis[i][j] = 0;\n    }\n\n    // upward\n    if (i - 1 &gt;= 0 &amp;&amp; !vis[i - 1][j] &amp;&amp; a[i - 1][j] == 1) {\n      vis[i][j] = 1;\n      findPathHelper(i - 1, j, a, n, ans, move + 'U', vis);\n      vis[i][j] = 0;\n    }\n\n  }\n  public:\n    vector &lt; string &gt; findPath(vector &lt; vector &lt; int &gt;&gt; &amp; m, int n) {\n      vector &lt; string &gt; ans;\n      vector &lt; vector &lt; int &gt;&gt; vis(n, vector &lt; int &gt; (n, 0));\n\n      if (m[0][0] == 1) findPathHelper(0, 0, m, n, ans, \"\", vis);\n      return ans;\n    }\n};\n\nint main() {\n  int n = 4;\n\n   vector &lt; vector &lt; int &gt;&gt; m = {{1,0,0,0},{1,1,0,1},{1,1,0,0},{0,1,1,1}};\n\n  Solution obj;\n  vector &lt; string &gt; result = obj.findPath(m, n);\n  if (result.size() == 0)\n    cout &lt;&lt; -1;\n  else\n    for (int i = 0; i &lt; result.size(); i++) cout &lt;&lt; result[i] &lt;&lt; \" \";\n  cout &lt;&lt; endl;\n\n  return 0;\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>DDRDRR DRDDRR</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(4^(m*n)), </strong>because<strong> </strong>on every cell we need to try 4 different directions.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity:&nbsp; O(m*n) ,</strong>Maximum Depth of the recursion tree(auxiliary space).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\n\n// m is the given matrix and n is the order of matrix\nclass Solution {\n  private static void solve(int i, int j, int a[][], int n, ArrayList &lt; String &gt; ans, String move,\n    int vis[][]) {\n    if (i == n - 1 &amp;&amp; j == n - 1) {\n      ans.add(move);\n      return;\n    }\n\n    // downward\n    if (i + 1 &lt; n &amp;&amp; vis[i + 1][j] == 0 &amp;&amp; a[i + 1][j] == 1) {\n      vis[i][j] = 1;\n      solve(i + 1, j, a, n, ans, move + 'D', vis);\n      vis[i][j] = 0;\n    }\n\n    // left\n    if (j - 1 &gt;= 0 &amp;&amp; vis[i][j - 1] == 0 &amp;&amp; a[i][j - 1] == 1) {\n      vis[i][j] = 1;\n      solve(i, j - 1, a, n, ans, move + 'L', vis);\n      vis[i][j] = 0;\n    }\n\n    // right \n    if (j + 1 &lt; n &amp;&amp; vis[i][j + 1] == 0 &amp;&amp; a[i][j + 1] == 1) {\n      vis[i][j] = 1;\n      solve(i, j + 1, a, n, ans, move + 'R', vis);\n      vis[i][j] = 0;\n    }\n\n    // upward\n    if (i - 1 &gt;= 0 &amp;&amp; vis[i - 1][j] == 0 &amp;&amp; a[i - 1][j] == 1) {\n      vis[i][j] = 1;\n      solve(i - 1, j, a, n, ans, move + 'U', vis);\n      vis[i][j] = 0;\n    }\n  }\n  public static ArrayList &lt; String &gt; findPath(int[][] m, int n) {\n    int vis[][] = new int[n][n];\n    for (int i = 0; i &lt; n; i++) {\n      for (int j = 0; j &lt; n; j++) {\n        vis[i][j] = 0;\n      }\n    }\n\n    ArrayList &lt; String &gt; ans = new ArrayList &lt; &gt; ();\n    if (m[0][0] == 1) solve(0, 0, m, n, ans, \"\", vis);\n    return ans;\n  }\n}\nclass TUF {\n  public static void main(String[] args) {\n\n    int n = 4;\n    int[][] a = {{1,0,0,0},{1,1,0,1},{1,1,0,0},{0,1,1,1}};\n\n    Solution obj = new Solution();\n    ArrayList &lt; String &gt; res = obj.findPath(a, n);\n    if (res.size() &gt; 0) {\n      for (int i = 0; i &lt; res.size(); i++)\n        System.out.print(res.get(i) + \" \");\n      System.out.println();\n    } else {\n      System.out.println(-1);\n    }\n  }\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>DDRDRR DRDDRR</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(4^(m*n)), </strong>because<strong> </strong>on every cell we need to try 4 different directions.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity:\u00a0 O(m*n), </strong>Maximum Depth of the recursion tree(auxiliary space).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block\" data-lang=\"python\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">from typing import List\n\n\n\n\nclass Solution:\n\n\n    def findPathHelper(self, i: int, j: int, a: List[List[int]], n: int, ans: List[str], move: str, vis: List[List[int]]):\n        if i == n - 1 and j == n - 1:\n            ans.append(move)\n            return\n\n\n        # downward\n        if i + 1 &lt; n and not vis[i + 1][j] and a[i + 1][j] == 1:\n            vis[i][j] = 1\n            self.findPathHelper(i + 1, j, a, n, ans, move + 'D', vis)\n            vis[i][j] = 0\n\n\n        # left\n        if j - 1 >= 0 and not vis[i][j - 1] and a[i][j - 1] == 1:\n            vis[i][j] = 1\n            self.findPathHelper(i, j - 1, a, n, ans, move + 'L', vis)\n            vis[i][j] = 0\n\n\n        # right\n        if j + 1 &lt; n and not vis[i][j + 1] and a[i][j + 1] == 1:\n            vis[i][j] = 1\n            self.findPathHelper(i, j + 1, a, n, ans, move + 'R', vis)\n            vis[i][j] = 0\n\n\n        # upward\n        if i - 1 >= 0 and not vis[i - 1][j] and a[i - 1][j] == 1:\n            vis[i][j] = 1\n            self.findPathHelper(i - 1, j, a, n, ans, move + 'U', vis)\n            vis[i][j] = 0\n\n\n    def findPath(self, m: List[List[int]], n: int) -> List[str]:\n        ans = []\n        vis = [[0 for _ in range(n)] for _ in range(n)]\n\n\n        if m[0][0] == 1:\n            self.findPathHelper(0, 0, m, n, ans, \"\", vis)\n        return ans\n\n\n\n\nif __name__ == '__main__':\n    n = 4\n\n\n    m = [[1, 0, 0, 0], [1, 1, 0, 1], [1, 1, 0, 0], [0, 1, 1, 1]]\n\n\n    obj = Solution()\n    result = obj.findPath(m, n)\n    if len(result) == 0:\n        print(-1)\n    else:\n        for i in range(len(result)):\n            print(result[i], end=\" \")\n    print()</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>DDRDRR DRDDRR</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(4^(m*n)), </strong>because<strong> </strong>on every cell we need to try 4 different directions.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity:\u00a0 O(m*n),</strong> Maximum Depth of the recursion tree(auxiliary space).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><br><strong>But, writing an individual code for every direction is a lengthy process therefore we truncate the 4 \u201cif statements\u201d into a single for loop using the following approach.</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"262\" height=\"183\" src=\"https://lh6.googleusercontent.com/P_GQn5Y57tZa5bCFIL-_3lsxWdJzySrYBq2Gur_ReGEmGr4I-gTIZ8DQugmzvQWOd2fSyJWhkj3BG3EuB3KWFBDeQWBvIxcCHN8xa1ANDqHceDmJGnsQS9imVJCaYUoiQi8i3fOA\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img src=\"https://lh3.googleusercontent.com/Xi1tY_DXrC4dLDZFATLx6POsnplmw6-B3iYsvUE37OPWIAyqOBxGSJF6RLAjKqErRokXhXxl2xTFOBqu8z7Z9MVLKGmHJR74PEL_pTlAv-M2yjU5mDH8vfD_B3ioIDjVIgIPO7Oi\" width=\"354\" height=\"145\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\nclass Solution {\n  void solve(int i, int j, vector &lt; vector &lt; int &gt;&gt; &amp; a, int n, vector &lt; string &gt; &amp; ans, string move,\n    vector &lt; vector &lt; int &gt;&gt; &amp; vis, int di[], int dj[]) {\n    if (i == n - 1 &amp;&amp; j == n - 1) {\n      ans.push_back(move);\n      return;\n    }\n    string dir = \"DLRU\";\n    for (int ind = 0; ind &lt; 4; ind++) {\n      int nexti = i + di[ind];\n      int nextj = j + dj[ind];\n      if (nexti &gt;= 0 &amp;&amp; nextj &gt;= 0 &amp;&amp; nexti &lt; n &amp;&amp; nextj &lt; n &amp;&amp; !vis[nexti][nextj] &amp;&amp; a[nexti][nextj] == 1) {\n        vis[i][j] = 1;\n        solve(nexti, nextj, a, n, ans, move + dir[ind], vis, di, dj);\n        vis[i][j] = 0;\n      }\n    }\n\n  }\n  public:\n    vector &lt; string &gt; findPath(vector &lt; vector &lt; int &gt;&gt; &amp; m, int n) {\n      vector &lt; string &gt; ans;\n      vector &lt; vector &lt; int &gt;&gt; vis(n, vector &lt; int &gt; (n, 0));\n      int di[] = {\n        +1,\n        0,\n        0,\n        -1\n      };\n      int dj[] = {\n        0,\n        -1,\n        1,\n        0\n      };\n      if (m[0][0] == 1) solve(0, 0, m, n, ans, \"\", vis, di, dj);\n      return ans;\n    }\n};\n\nint main() {\n  int n = 4;\n\n vector &lt; vector &lt; int &gt;&gt; m = {{1,0,0,0},{1,1,0,1},{1,1,0,0},{0,1,1,1}};\n   \n  Solution obj;\n  vector &lt; string &gt; result = obj.findPath(m, n);\n  if (result.size() == 0)\n    cout &lt;&lt; -1;\n  else\n    for (int i = 0; i &lt; result.size(); i++) cout &lt;&lt; result[i] &lt;&lt; \" \";\n  cout &lt;&lt; endl;\n\n  return 0;\n}\n\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>DDRDRR DRDDRR</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(4^(m*n)), </strong>because<strong> </strong>on every cell we need to try 4 different directions.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity:\u00a0 O(m*n), </strong>Maximum Depth of the recursion tree(auxiliary space).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\n\n// m is the given matrix and n is the order of matrix\nclass Solution {\n  private static void solve(int i, int j, int a[][], int n, ArrayList &lt; String &gt; ans, String move,\n    int vis[][], int di[], int dj[]) {\n    if (i == n - 1 &amp;&amp; j == n - 1) {\n      ans.add(move);\n      return;\n    }\n    String dir = \"DLRU\";\n    for (int ind = 0; ind &lt; 4; ind++) {\n      int nexti = i + di[ind];\n      int nextj = j + dj[ind];\n      if (nexti &gt;= 0 &amp;&amp; nextj &gt;= 0 &amp;&amp; nexti &lt; n &amp;&amp; nextj &lt; n &amp;&amp;\n        vis[nexti][nextj] == 0 &amp;&amp; a[nexti][nextj] == 1) {\n\n        vis[i][j] = 1;\n        solve(nexti, nextj, a, n, ans, move + dir.charAt(ind), vis, di, dj);\n        vis[i][j] = 0;\n\n      }\n    }\n  }\n  public static ArrayList &lt; String &gt; findPath(int[][] m, int n) {\n    int vis[][] = new int[n][n];\n    for (int i = 0; i &lt; n; i++) {\n      for (int j = 0; j &lt; n; j++) {\n        vis[i][j] = 0;\n      }\n    }\n    int di[] = {\n      +1,\n      0,\n      0,\n      -1\n    };\n    int dj[] = {\n      0,\n      -1,\n      1,\n      0\n    };\n    ArrayList &lt; String &gt; ans = new ArrayList &lt; &gt; ();\n    if (m[0][0] == 1) solve(0, 0, m, n, ans, \"\", vis, di, dj);\n    return ans;\n  }\n}\nclass TUF {\n  public static void main(String[] args) {\n\n    int n = 4;\n    int[][] a = {{1,0,0,0},{1,1,0,1},{1,1,0,0},{0,1,1,1}};\n\n    Solution obj = new Solution();\n    ArrayList &lt; String &gt; res = obj.findPath(a, n);\n    if (res.size() &gt; 0) {\n      for (int i = 0; i &lt; res.size(); i++)\n        System.out.print(res.get(i) + \" \");\n      System.out.println();\n    } else {\n      System.out.println(-1);\n    }\n  }\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>DDRDRR DRDDRR</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(4^(m*n)), </strong>because<strong> </strong>on every cell we need to try 4 different directions.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity:\u00a0 O(m*n),</strong> Maximum Depth of the recursion tree(auxiliary space).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block\" data-lang=\"python\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">from typing import List\n\n\n\nclass Solution:\n\n\n    def solve(self, i: int, j: int, a: List[List[int]], n: int, ans: List[str], move: str, vis: List[List[int]], di: List[int], dj: List[int]):\n        if i == n - 1 and j == n - 1:\n            ans.append(move)\n            return\n        dir = \"DLRU\"\n        for ind in range(4):\n            nexti = i + di[ind]\n            nextj = j + dj[ind]\n            if nexti >= 0 and nextj >= 0 and nexti &lt; n and nextj &lt; n and not vis[nexti][nextj] and a[nexti][nextj] == 1:\n                vis[i][j] = 1\n                self.solve(nexti, nextj, a, n, ans,\n                           move + dir[ind], vis, di, dj)\n                vis[i][j] = 0\n\n\n    def findPath(self, m: List[List[int]], n: int) -> List[str]:\n        ans = []\n        vis = [[0 for _ in range(n)] for _ in range(n)]\n        di = [+1, 0, 0, -1]\n        dj = [0, -1, 1, 0]\n        if m[0][0] == 1:\n            self.solve(0, 0, m, n, ans, \"\", vis, di, dj)\n        return ans\n\n\n\n\nif __name__ == \"__main__\":\n    n = 4\n    m = [[1, 0, 0, 0], [1, 1, 0, 1], [1, 1, 0, 0], [0, 1, 1, 1]]\n    obj = Solution()\n    result = obj.findPath(m, n)\n    if len(result) == 0:\n        print(-1)\n    else:\n        for i in range(len(result)):\n            print(result[i], end=\" \")\n    print()</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>DDRDRR DRDDRR</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(4^(m*n)), </strong>because<strong> </strong>on every cell we need to try 4 different directions.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity:\u00a0 O(m*n), </strong>Maximum Depth of the recursion tree(auxiliary space).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to\u00a0<strong><strong><a href=\"https://www.linkedin.com/in/rishirajgirmal/\" target=\"_blank\" rel=\"noreferrer noopener\">Rishiraj Girmal</a></strong></strong>\u00a0<em>and\u00a0<em><a href=\"https://www.linkedin.com/in/imsudip/\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>Sudip Ghosh</strong></a></em></em>\u00a0for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,\u00a0</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->"
}