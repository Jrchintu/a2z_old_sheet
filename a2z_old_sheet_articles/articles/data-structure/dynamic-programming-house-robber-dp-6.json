{
    "dislikes": 8,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:09:53 GMT+0530 (India Standard Time)",
    "slug": "dynamic-programming-house-robber-dp-6",
    "aid": "1612",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/house-robber",
    "title": "Dynamic Programming: House Robber (DP 6)",
    "topics": [
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "dynamic-programming",
            "topic-title": "Dynamic Programming"
        }
    ],
    "category_tag": "data-structure",
    "likes": 114,
    "preview": "Problem Statement: Dynamic Programming: House Robber (DP 6) Problem Statement Link: House Robber A thief needs to rob money in a street. The houses in the street are arranged in a circular manner....",
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement:&nbsp;</strong>Dynamic Programming: House Robber (DP 6)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Problem Statement Link: </em><a href=\"https://www.codingninjas.com/codestudio/problems/house-robber_839733?source=youtube&amp;campaign=striver_dp_videos&amp;utm_source=youtube&amp;utm_medium=affiliate&amp;utm_campaign=striver_dp_videos\"><em>House Robber</em></a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>A thief needs to rob money in a street. The houses in the street are arranged in a circular manner. Therefore the first and the last house are adjacent to each other. The security system in the street is such that if adjacent houses are robbed, the police will get notified.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Given an array of integers \u201cArr'' which represents money at each house, we need to return the maximum amount of money that the thief can rob without alerting the police.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n<details class=\"article_example_details\">\n<summary class=\"article_example_summary\">\n<span><strong>\nExamples\n</strong>\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"atricle_example_content\">\n<pre class=\"wp-block-preformatted\"><!-- Insert New Examples Here -->\n<pre class=\"wp-block-preformatted\"><strong>Examples:</strong>\n<img width=\"554\" height=\"384\" src=\"https://lh5.googleusercontent.com/XG1_bncXs9qY3NldqFW-79mYZLwA84HZSsG58UaQR63ZatUYlRlUQ-0vFsCaEmPxBik4c9xftsYnzMZdtAlweBpvTZ0I3BBm9ZD_IVFkB-HAr7NuSTgf4jgzQsKV6qpgQyPu20zW\"></pre>\n</pre>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:paragraph -->\n<p><strong>Pre-req: </strong><a href=\"https://takeuforward.org/data-structure/maximum-sum-of-non-adjacent-elements-dp-5/\"><strong>Maximum Sum of non-adjacent elements</strong></a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Solution :</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This question can be solved using the approach discussed in the <a href=\"https://takeuforward.org/data-structure/maximum-sum-of-non-adjacent-elements-dp-5/\">Maximum Sum of non-adjacent elements</a>. Readers are highly advised to go through that article first and then read this. The rest of the article will refer to the previous article as Article DP5 and will relate to that approach.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now, we have a single test case. Three houses have money as shown.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img src=\"https://lh5.googleusercontent.com/TQxjaokoYS4UBxXxGJlcSbVElkd46Mxc4w7tmg0I6-Tn8NKwa8HtaxZGDZkDAtd3oSIai0T2r8CJiu9d4foSWJbAaNmFNxG-divkVyFIrQA-5dVc85M0qSXDPcGkugjKsZvkwwIu\" width=\"624\" height=\"291\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>According to article DP5, the answer will be 4(2+2) as we are taking the maximum sum of non-adjacent elements.</li><li>In this question, the first and last element are also adjacent(circular street), therefore the answer will be 3.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Modification to Article DP5\u2019s Approach</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We were finding the maximum sum of non-adjacent elements in the previous questions. For a circular street, the first and last house are adjacent, therefore one thing we know for sure is that the answer will not consider the first and last element simultaneously (as they are adjacent).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now building on the article DP5, we can say that maybe the last element is not considered in the answer. In that case, we can consider the first element. Let\u2019s call this answer ans1. Hence we have reduced our array(arr- last element), say arr1, and found ans1 on it by using the article DP5 approach.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"415\" height=\"201\" src=\"https://lh3.googleusercontent.com/0mkwqypWCCVBzCR3p4y0kpIcfaOtXVj554Oppzazg3vz8R7BSgWstj6oIwKJtgmDVVZ7Ixn5I3q-KTAWMP3xWzQX88XoyrZBEZ7KcCH6T2IMGSserlmIDas4ZlI8OhMAe84kgL72\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now, it can also happen that the final answer does consider the last element. If we consider the last element, we can\u2019t consider the first element( again adjacent elements). We again use the same approach on our reduced array( arr - first element), say arr2. Let\u2019s call the answer we get as ans2.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now, the final answer can be either ans1 or ans2. As we have to return the maximum money robbed by the robber, we will return max(ans1, ans2) as our final answer.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"419\" height=\"203\" src=\"https://lh6.googleusercontent.com/0x1VzdE2zZniwJr84vvkNsZWQSeNsKu385q_o-ySKc7rdFGdj-Qhc7I6XSif0vldfl9NIfqEd92e7mlYkDc6Z05dgtO0pZX7Qg30W09hU7qOHFuzvvv0Sh8KgphfR5IZ2mVdFJqf\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Approach:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The approach to solving this problem can be summarized as:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>Make two reduced arrays - arr1(arr-last element) and arr2(arr-first element).</li><li>Find the maximum of non-adjacent elements as mentioned in article DP5 on arr1 and arr2 separately. Let\u2019s call the answers we got ans1 and ans2 respectively.</li><li>Return max(ans1, ans2) as our final answer.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\nlong long int solve(vector&lt;int&gt;&amp; arr){\n    int n = arr.size();\n    long long int prev = arr[0];\n    long long int prev2 =0;\n    \n    for(int i=1; i&lt;n; i++){\n        long long int pick = arr[i];\n        if(i&gt;1)\n            pick += prev2;\n        int long long nonPick = 0 + prev;\n        \n        long long int cur_i = max(pick, nonPick);\n        prev2 = prev;\n        prev= cur_i;\n        \n    }\n    return prev;\n}\n\nlong long int robStreet(int n, vector&lt;int&gt; &amp;arr){\n    vector&lt;int&gt; arr1;\n    vector&lt;int&gt; arr2;\n    \n    if(n==1)\n       return arr[0];\n    \n    for(int i=0; i&lt;n; i++){\n        \n        if(i!=0) arr1.push_back(arr[i]);\n        if(i!=n-1) arr2.push_back(arr[i]);\n    }\n    \n    long long int ans1 = solve(arr1);\n    long long int ans2 = solve(arr2);\n    \n    return max(ans1,ans2);\n}\n\n\nint main() {\n\n  vector&lt;int&gt; arr{1,5,1,2,6};\n  int n=arr.size();\n  cout&lt;&lt;robStreet(n,arr);\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> 11</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(N )</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reason: We are running a simple iterative loop, two times. Therefore total time complexity will be O(N) + O(N) \u2248 O(N)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(1)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reason: We are not using extra space.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\nclass TUF{\nstatic long solve(ArrayList&lt;Integer&gt; arr){\n    int n = arr.size();\n    long prev = arr.get(0);\n    long prev2 =0;\n    \n    for(int i=1; i&lt;n; i++){\n        long pick = arr.get(i);\n        if(i&gt;1)\n            pick += prev2;\n        long nonPick = 0 + prev;\n        \n        long cur_i = Math.max(pick, nonPick);\n        prev2 = prev;\n        prev= cur_i;\n        \n    }\n    return prev;\n}\n\nstatic long robStreet(int n, ArrayList&lt;Integer&gt; arr){\n    ArrayList&lt;Integer&gt; arr1=new ArrayList&lt;&gt;();\n    ArrayList&lt;Integer&gt; arr2=new ArrayList&lt;&gt;();\n\n    if(n==1)\n       return arr.get(0);\n    \n    for(int i=0; i&lt;n; i++){\n        \n        if(i!=0) arr1.add(arr.get(i));\n        if(i!=n-1) arr2.add(arr.get(i));\n    }\n    \n    long ans1 = solve(arr1);\n    long ans2 = solve(arr2);\n    \n    return Math.max(ans1,ans2);\n}\n\n\npublic static void main(String args[]) {\n\n  ArrayList&lt;Integer&gt; arr=new ArrayList&lt;&gt;();\n  arr.add(1);\n  arr.add(5);\n  arr.add(1);\n  arr.add(2);\n  arr.add(6);\n  int n=arr.size();\n  System.out.println(robStreet(n,arr));\n\n}\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> 11</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(N )</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reason: We are running a simple iterative loop, two times. Therefore total time complexity will be O(N) + O(N) \u2248 O(N)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(1)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reason: We are not using extra space.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block\" data-lang=\"python\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">def solve(arr):\n    n = len(arr)\n    prev = arr[0]\n    prev2 = 0\n\n    for i in range(1, n):\n        pick = arr[i]\n        if i &gt; 1:\n            pick += prev2\n        nonPick = 0 + prev\n\n        cur_i = max(pick, nonPick)\n        prev2 = prev\n        prev = cur_i\n\n    return prev\n\ndef robStreet(n, arr):\n    arr1 = []\n    arr2 = []\n\n    if n == 1:\n        return arr[0]\n\n    for i in range(n):\n        if i != 0:\n            arr1.append(arr[i])\n        if i != n - 1:\n            arr2.append(arr[i])\n\n    ans1 = solve(arr1)\n    ans2 = solve(arr2)\n\n    return max(ans1, ans2)\n\ndef main():\n    arr = [1, 5, 1, 2, 6]\n    n = len(arr)\n    print(robStreet(n, arr))\n\nif __name__ == '__main__':\n    main()\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> 11</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(N )</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reason: We are running a simple iterative loop, two times. Therefore total time complexity will be O(N) + O(N) \u2248 O(N)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(1)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reason: We are not using extra space.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>[tabby title=\"JavaScript Code\"]</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">function solve(arr) {\n    const n = arr.length;\n    let prev = arr[0];\n    let prev2 = 0;\n    \n    for (let i = 1; i &lt; n; i++) {\n        let pick = arr[i];\n        if (i > 1) {\n            pick += prev2;\n        }\n        let nonPick = 0 + prev;\n        \n        let cur_i = Math.max(pick, nonPick);\n        prev2 = prev;\n        prev = cur_i;\n    }\n    return prev;\n}\n\nfunction robStreet(n, arr) {\n    const arr1 = [];\n    const arr2 = [];\n    \n    if (n === 1) {\n        return arr[0];\n    }\n    \n    for (let i = 0; i &lt; n; i++) {\n        if (i !== 0) arr1.push(arr[i]);\n        if (i !== n - 1) arr2.push(arr[i]);\n    }\n    \n    const ans1 = solve(arr1);\n    const ans2 = solve(arr2);\n    \n    return Math.max(ans1, ans2);\n}\n\nfunction main() {\n    const arr = [1, 5, 1, 2, 6];\n    const n = arr.length;\n\n    console.log(robStreet(n, arr));\n}\n\nmain();\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> 11</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(N )</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reason: We are running a simple iterative loop, two times. Therefore total time complexity will be O(N) + O(N) \u2248 O(N)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(1)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reason: We are not using extra space.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n<details>\n<summary class=\"main-summary\">\n<span>\nVideo Explanation\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"yt-video-wrapper\">\n\n<!-- Insert iframe embed Link of Youtube Video-->\n<iframe class=\"lazy-loaded\" loading=\"lazy\" title=\"House Robber 2\" width=\"810\" height=\"456\" data-lazy-type=\"iframe\" data-src=\"https://www.youtube.com/embed/3WaxQMELSkw?si=s3VOjbIk6k_Z-XCc\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\" src=\"https://www.youtube.com/embed/3WaxQMELSkw?feature=oembed\"></iframe><noscript>\n<iframe loading=\"lazy\" title=\"House Robber 2\" width=\"810\" height=\"456\" src=\"https://www.youtube.com/embed/3WaxQMELSkw?si=s3VOjbIk6k_Z-XCc\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe></noscript>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;<strong><a href=\"https://www.linkedin.com/in/anshuman-sharma-a1b245194/\" target=\"_blank\" rel=\"noreferrer noopener\">Anshuman Sharma</a></strong>&nbsp;<em>and&nbsp;<a href=\"https://www.linkedin.com/in/abhipsita-das-5b7069212/?originalSubdomain=in\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>Abhipsita Das</strong></a></em></em> <em>for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->"
}