{
    "dislikes": 4,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:09:38 GMT+0530 (India Standard Time)",
    "slug": "implement-trie-ii",
    "aid": "1543",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/trie-implementation-and-advanced-operations",
    "title": "Implement Trie - II",
    "topics": [
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "string",
            "topic-title": "String"
        },
        {
            "topic-id": "trie",
            "topic-title": "Trie"
        }
    ],
    "likes": 43,
    "category_tag": "data-structure",
    "preview": "Problem Statement: Implement a Trie data structure that supports the following methods: 1. Insert (word): To insert a string `word` in the Trie. 2. Count Words Equal To (word): Return the count of...",
    "content": "<p><strong>Problem Statement: </strong>Implement a Trie data structure that supports the following methods:\n<ol><li>Insert (word): To insert a string `word` in the Trie.</li><li>Count Words Equal To (word): Return the count of occurrences of the string word in the Trie.</li><li>Count Words Starting With (prefix): Return the count of words in the Trie that have the string \u201cprefix\u201d as a prefix.</li><li>Erase (word): Delete one occurrence of the string word from the Trie.</li></ol>\n</p>\n<p>Note:\n<ol><li>The Erase(word) function is guaranteed to be called only when a word is present in the Trie.</li><li>Release the memory associated with variables using dynamic memory allocation at the end of your solution.</li></ol></p>\n<div id=\"article_examples\">\n    <details class=\"article_example_details\">\n        <summary class=\"article_example_summary\">\n            <span><strong>\n                    Examples\n                </strong>\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"atricle_example_content\">\n            <pre class=\"wp-block-preformatted\">\n                <span><strong>Example 1:</strong></span>\n\t\t\t\t<span><strong>Input:</strong></span>\n\t\t\t\t<span>Insert: \u2018apple\u2019, \u2018apps\u2019, \u2018apxl\u2019</span>\n\t\t\t\t<span>Count Number of Words Equal to: \u2018apple\u2019</span>\n\t\t\t\t<span>Count Number of Words Starting with: \u2018app\u2019, \u2018ap\u2019</span>\n\t\t\t\t<span>Erase word: \u2018apxl\u2019</span>\n\t\t\t\t\n\t\t\t\t<span><strong>Output: </strong></span>\n\t\t\t\t<span>Inserted \u2018apple\u2019, Inserted \u2018apps\u2019,Inserted, \u2018apxl\u2019.</span>\n\t\t\t\t<span>Number of Words Equal to \u2018apple\u2019: 1</span>\n\t\t\t\t<span>Number of Words Starting with \u2018app\u2019: 2 and \u2018ap\u2019: 3</span>\n\t\t\t\t<span>Erased \u2018apxl\u2019</span>\n\t\t\n\t\t\t\t<span><strong>Explanation: </strong>Insert Operations: \u201capple\u201d, \u201capps\u201d and \u201capxl\u201d are inserted. </span>\n\t\t\t\t<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/implement-trie-ii-image1-qR1-pLsD\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n\t\t\t\t<span>Count Number of Words Equal to: \u2018apple\u2019</span>\n\t\t\t\t<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/implement-trie-ii-image2-flB-Z5zT\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n\t\t\t\t<span>Count Number of Words Starting with: \u2018app\u2019, \u2018ap\u2019</span>\n\t\t\t\t<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/implement-trie-ii-image3-6A95uufO\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n\t\t\t\t<span>Erase word: \u2018apxl\u2019</span>\n\t\t\t\t<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/implement-trie-ii-image4-yzMMSfJ0\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n\t\t\t\t\n\t\t\t\t\t\n            </pre>\n        </div>\n    </details>\n</div>\n\n<!-- This is Practice Section-->\n<div class=\"practice\">\n    <span><strong>Practice: </strong></span>\n    <div class=\"problem-buttons\">\n\n        <!-- Add Problem Link inside href -->\n        <a href=\"https://www.codingninjas.com/studio/problems/trie-delete-operation_1062663?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf\" target=\"_blank\" rel=\"noopener\">\n            <span>Solve Problem</span>\n            <img src=\"https://takeuforward-content-images.s3.ap-south-1.amazonaws.com/content/Group-11-5-pFOq-8ga\"\n                alt=\"code-studio\">\n        </a>\n    </div>\n    <!--<div class=\"problem-buttons\">\n         Add Problem Link inside href \n        <a href=\"\" target=\"_blank\" rel=\"noopener\">\n            <span>Solve Problem</span>\n            <img src=\"https://cdn.iconscout.com/icon/free/png-256/free-leetcode-3521542-2944960.png?f=webp\"\n                alt=\"leetcode\">\n        </a>\n    </div>-->\n</div>\n\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\n        yourself first. </em></p>\n\n\n<div id=\"brute-force-approach\">\n    <details>\n        <summary class=\"main-summary\">\n            <span>\n                Optimal Approach \n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                </path>\n            </svg>\n        </summary>\n        <div class=\"common-drops\">\n            <details class=\"secondary-details\" open=\"\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Algorithm / Intuition\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <div class=\"approach-algorithm\">\n                    <!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n                    \n                    <p>The Trie data structure is used to efficiently store and retrieve a set of strings.</p>\n                    <p>It organises strings such that common prefixes are shared among strings, making operations like searching for words with a given prefix efficient. Trie allows for quick retrieval of all strings with a given prefix, making it highly efficient for autocomplete and predictive text applications.</p>\n                    <p>The prefix tree specifically uses counters to keep track of the number of words ending with the current node and how many words contain the current node letter. A classical Trie accomplished this using the boolean flag to indicate that a word ends at this node.</p>\n                    <p>Each node in this Prefix Trie contains:\n                   \t<ol><li>An array of pointers to child nodes (26 slots, one for each lowercase English letter).</li><li>Counters for tracking the number of words that end at the node (\u2018cntEndWith\u2019) and the number of words that have the node as a prefix (\u2018cntPrefix\u2019).</li></ol></p>\n                    <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/implement-trie-ii-image5-i7z9l5xC\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n                                       \n\n                    <h3>Algorithm 1: To Insert a Node in the Prefix Trie:</h3>\n                    <p><strong>Step 1:</strong>Start at the root node.</p>\n                   \n                    <p><strong>Step 2: </strong>Iterate over each character in the word. For each character:\n                    <ol><li>Check if a child node corresponding to that character exists.</li><li>If not, create a new node for that character and link it to the current node.</li><li>Increment the prefix count for each node.</li></ol></p> \n                   \t\n                    <p><strong>Step 3: </strong>\n                    Finally, increment the end count for the last node of the word. </p>\n                    <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/implement-trie-ii-image6-H3XOE5ZJ\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure> \n\n                    <h3>Algorithm 2: To Count the Number of Words Equal to the Given Word in the Trie</h3>\n                    <p><strong>Step 1:</strong>Start at the root node.</p>\n                   \n                    <p><strong>Step 2: </strong>Iterate over each character in the word. For each character:\n                    <ol><li>Traverse down the Trie following the characters of the word.</li><li>If any character is not found, return 0 (Indicating the word is not in the Trie).</li></ol></p> \n                   \t\n                    <p><strong>Step 3: </strong>\n                    Once all characters are found, return the end count of the node corresponding to the last character.</p>\n                    <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/implement-trie-ii-image7-8qpafvRU\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure> \n\n                    <h3>Algorithm 3: To Count the Number of Words Starting with the Given Word in the Trie:</h3>\n                    <p><strong>Step 1:</strong>Start at the root node.</p>\n                   \n                    <p><strong>Step 2: </strong>Iterate over each character in the word. For each character:\n                    <ol><li>Traverse down the Trie following the characters of the word.</li><li>If any character is not found, return 0 (Indicating no words start with the given prefix).</li></ol></p> \n                   \t\n                    <p><strong>Step 3: </strong>\n                    Once all characters are found, return the prefix count of the node corresponding to the last character.</p>\n                    <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/implement-trie-ii-image8-JU-Owz5c\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure> \n\n                    <h3>Algorithm 4: To Erase the Given Word from the Trie</h3>\n                    <p><strong>Step 1:</strong>Start at the root node.</p>\n                   \n                    <p><strong>Step 2: </strong>Iterate over each character in the word. For each character traverse down the Trie following the characters of the word and at each node:\n                    <ol><li>Decrement the prefix count.</li><li>It is given that the given word to erase will always be found in the Trie.</li></ol></p> \n                   \t\n                    <p><strong>Step 3: </strong>\n                    Once the end of the word is reached, decrement the end count.</p>\n                    <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/implement-trie-ii-image9-YqMK25zw\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure> \n                              \n                </div>\n            </details>\n            <details class=\"code-section secondary-details\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Code\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <div class=\"code-tabs\">\n                    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n                    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n                    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n                    <button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n                    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\"\n                        xmlns=\"http://www.w3.org/2000/svg\">\n                        <path\n                            d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n                        </path>\n                    </svg>\n                </div>\n                <div class=\"code-content\">\n                    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h&gt; \n\nusing namespace std;\n\n// Define a struct for\n// each node in the trie\nstruct Node {\n     // Array to store\n     // links to child nodes\n    Node* links[26];\n     // Counter for number of\n     // words that end at this node\n    int cntEndWith = 0;\n    // Counter for number of words\n    // that have this node as a prefix\n    int cntPrefix = 0; \n\n    // Function to check if the\n    // node contains a specific key\n    bool containsKey(char ch) {\n        // Check if the link corresponding\n        // to the character exists\n        return (links[ch - 'a'] != NULL); \n    }\n\n    // Function to get the child\n    // node corresponding to a key\n    Node* get(char ch) {\n        // Return the link\n        // corresponding to the character\n        return links[ch - 'a']; \n    }\n\n    // Function to insert a child\n    // node with a specific key\n    void put(char ch, Node* node) {\n         // Set the link corresponding to\n         // the character to the provided node\n        links[ch - 'a'] = node;\n    }\n\n    // Function to increment the\n    // count of words that end at this node\n    void increaseEnd() {\n        // Increment the counter\n        cntEndWith++; \n    }\n\n    // Function to increment the count of\n    // words that have this node as a prefix\n    void increasePrefix() {\n         // Increment the counter\n        cntPrefix++;\n    }\n\n    // Function to decrement the count\n    // of words that end at this node\n    void deleteEnd() {\n        // Decrement the counter\n        cntEndWith--; \n    }\n\n    // Function to decrement the count of\n    // words that have this node as a prefix\n    void reducePrefix() {\n        // Decrement the counter\n        cntPrefix--; \n    }\n};\n\n// Define a class for the\n// trie data structure\nclass Trie {\nprivate:\n    // Pointer to the\n    // root node of the trie\n    Node* root; \n\npublic:\n    // Constructor to initialize\n    // the trie with an empty root node\n    Trie() {\n        // Create a new root node\n        root = new Node(); \n    }\n\n    // Function to insert\n    // a word into the trie\n    void insert(string word) {\n        // Start from the root node\n        Node* node = root; \n        // Iterate over each\n        // character in the word\n        for (int i = 0; i &lt; word.size(); i++) { \n             // If the character is\n             // not already in the trie\n            if (!node-&gt;containsKey(word[i])) {\n                // Create a new node\n                // for the character\n                node-&gt;put(word[i], new Node()); \n            }\n             // Move to the child node\n             // corresponding to the character\n            node = node-&gt;get(word[i]);\n            // Increment the prefix\n            // count for the node\n            node-&gt;increasePrefix(); \n        }\n        // Increment the end count\n        // for the last node of the word\n        node-&gt;increaseEnd(); \n    }\n\n    // Function to count the number\n    // of words equal to a given word\n    int countWordsEqualTo(string word) {\n         // Start from the root node\n        Node* node = root;\n        // Iterate over each character in the word\n        for (int i = 0; i &lt; word.size(); i++) { \n            // If the character is found in the trie\n            if (node-&gt;containsKey(word[i])) { \n                // Move to the child node\n                // corresponding to the character\n                node = node-&gt;get(word[i]); \n            } else {\n                 // Return 0 if the\n                 // character is not found\n                return 0;\n            }\n        }\n        // Return the count of\n        // words ending at the node\n        return node-&gt;cntEndWith; \n    }\n\n    // Function to count the number of\n    // words starting with a given prefix\n    int countWordsStartingWith(string word) {\n         // Start from the root node\n        Node* node = root;\n        // Iterate over each character in the prefix\n        for (int i = 0; i &lt; word.size(); i++) { \n            // If the character is found in the trie\n            if (node-&gt;containsKey(word[i])) { \n                // Move to the child node\n                // corresponding to the character\n                node = node-&gt;get(word[i]); \n            } else {\n                // Return 0 if the\n                // character is not found\n                return 0; \n            }\n        }\n        // Return the count of\n        // words with the prefix\n        return node-&gt;cntPrefix; \n    }\n\n    // Function to erase a\n    // word from the trie\n    void erase(string word) {\n         // Start from the root node\n        Node* node = root;\n        // Iterate over each\n        // character in the word\n        for (int i = 0; i &lt; word.size(); i++) { \n            // If the character is\n            // found in the trie\n            if (node-&gt;containsKey(word[i])) { \n                 // Move to the child node\n                 // corresponding to the character\n                node = node-&gt;get(word[i]);\n                // Decrement the prefix\n                // count for the node\n                node-&gt;reducePrefix(); \n            } else {\n                // Return if the\n                // character is not found\n                return; \n            }\n        }\n        // Decrement the end count\n        // for the last node of the word\n        node-&gt;deleteEnd(); \n    }\n};\n\n\nint main() {\n    Trie trie; \n    trie.insert(&quot;apple&quot;); \n    trie.insert(&quot;app&quot;); \n    cout &lt;&lt; &quot;Inserting strings 'apple', 'app' into Trie&quot;&lt;&lt; endl;\n    cout &lt;&lt; &quot;Count Words Equal to 'apple': &quot;;\n    cout &lt;&lt; trie.countWordsEqualTo(&quot;apple&quot;) &lt;&lt; endl; \n    cout &lt;&lt; &quot;Count Words Starting With 'app': &quot;;\n    cout &lt;&lt; trie.countWordsStartingWith(&quot;app&quot;) &lt;&lt; endl; \n    cout &lt;&lt; &quot;Erasing word 'app' from trie&quot;&lt;&lt; endl;\n    trie.erase(&quot;app&quot;); \n    cout &lt;&lt; &quot;Count Words Equal to 'apple': &quot;;\n    cout &lt;&lt; trie.countWordsEqualTo(&quot;apple&quot;) &lt;&lt; endl; \n    cout &lt;&lt; &quot;Count Words Starting With 'apple': &quot;;\n    cout &lt;&lt; trie.countWordsStartingWith(&quot;app&quot;) &lt;&lt; endl; \n    return 0; \n}\n                            </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block \" data-lang=\"java\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"java\" class=\"language-java\">\n// Define a class for the trie data structure\nclass Trie {\n    // Define a struct for\n    // each node in the trie\n    static class Node {\n        // Array to store\n        // links to child nodes\n        Node[] links;\n        // Counter for number of\n        // words that end at this node\n        int cntEndWith;\n        // Counter for number of words\n        // that have this node as a prefix\n        int cntPrefix;\n\n        // Constructor for Node\n        Node() {\n            links = new Node[26];\n            cntEndWith = 0;\n            cntPrefix = 0;\n        }\n\n        // Function to check if the\n        // node contains a specific key\n        boolean containsKey(char ch) {\n            // Check if the link corresponding\n            // to the character exists\n            return links[ch - 'a'] != null;\n        }\n\n        // Function to get the child\n        // node corresponding to a key\n        Node get(char ch) {\n            // Return the link\n            // corresponding to the character\n            return links[ch - 'a'];\n        }\n\n        // Function to insert a child\n        // node with a specific key\n        void put(char ch, Node node) {\n            // Set the link corresponding to\n            // the character to the provided node\n            links[ch - 'a'] = node;\n        }\n\n        // Function to increment the\n        // count of words that end at this node\n        void increaseEnd() {\n            // Increment the counter\n            cntEndWith++;\n        }\n\n        // Function to increment the count of\n        // words that have this node as a prefix\n        void increasePrefix() {\n            // Increment the counter\n            cntPrefix++;\n        }\n\n        // Function to decrement the count\n        // of words that end at this node\n        void deleteEnd() {\n            // Decrement the counter\n            cntEndWith--;\n        }\n\n        // Function to decrement the count of\n        // words that have this node as a prefix\n        void reducePrefix() {\n            // Decrement the counter\n            cntPrefix--;\n        }\n    }\n\n    // Pointer to the\n    // root node of the trie\n    private Node root;\n\n    // Constructor to initialize\n    // the trie with an empty root node\n    Trie() {\n        // Create a new root node\n        root = new Node();\n    }\n\n    // Function to insert\n    // a word into the trie\n    void insert(String word) {\n        // Start from the root node\n        Node node = root;\n        // Iterate over each\n        // character in the word\n        for (int i = 0; i &lt; word.length(); i++) {\n            // If the character is\n            // not already in the trie\n            if (!node.containsKey(word.charAt(i))) {\n                // Create a new node\n                // for the character\n                node.put(word.charAt(i), new Node());\n            }\n            // Move to the child node\n            // corresponding to the character\n            node = node.get(word.charAt(i));\n            // Increment the prefix\n            // count for the node\n            node.increasePrefix();\n        }\n        // Increment the end count\n        // for the last node of the word\n        node.increaseEnd();\n    }\n\n    // Function to count the number\n    // of words equal to a given word\n    int countWordsEqualTo(String word) {\n        // Start from the root node\n        Node node = root;\n        // Iterate over each character in the word\n        for (int i = 0; i &lt; word.length(); i++) {\n            // If the character is found in the trie\n            if (node.containsKey(word.charAt(i))) {\n                // Move to the child node\n                // corresponding to the character\n                node = node.get(word.charAt(i));\n            } else {\n                // Return 0 if the\n                // character is not found\n                return 0;\n            }\n        }\n        // Return the count of\n        // words ending at the node\n        return node.cntEndWith;\n    }\n\n    // Function to count the number of\n    // words starting with a given prefix\n    int countWordsStartingWith(String word) {\n        // Start from the root node\n        Node node = root;\n        // Iterate over each character in the prefix\n        for (int i = 0; i &lt; word.length(); i++) {\n            // If the character is found in the trie\n            if (node.containsKey(word.charAt(i))) {\n                // Move to the child node\n                // corresponding to the character\n                node = node.get(word.charAt(i));\n            } else {\n                // Return 0 if the\n                // character is not found\n                return 0;\n            }\n        }\n        // Return the count of\n        // words with the prefix\n        return node.cntPrefix;\n    }\n\n    // Function to erase a\n    // word from the trie\n    void erase(String word) {\n        // Start from the root node\n        Node node = root;\n        // Iterate over each\n        // character in the word\n        for (int i = 0; i &lt; word.length(); i++) {\n            // If the character is\n            // found in the trie\n            if (node.containsKey(word.charAt(i))) {\n                // Move to the child node\n                // corresponding to the character\n                node = node.get(word.charAt(i));\n                // Decrement the prefix\n                // count for the node\n                node.reducePrefix();\n            } else {\n                // Return if the\n                // character is not found\n                return;\n            }\n        }\n        // Decrement the end count\n        // for the last node of the word\n        node.deleteEnd();\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Trie trie = new Trie();\n        trie.insert(&quot;apple&quot;);\n        trie.insert(&quot;app&quot;);\n        System.out.println(&quot;Inserting strings 'apple', 'app' into Trie&quot;);\n        System.out.print(&quot;Count Words Equal to 'apple': &quot;);\n        System.out.println(trie.countWordsEqualTo(&quot;apple&quot;));\n        System.out.print(&quot;Count Words Starting With 'app': &quot;);\n        System.out.println(trie.countWordsStartingWith(&quot;app&quot;));\n        System.out.println(&quot;Erasing word 'app' from trie&quot;);\n        trie.erase(&quot;app&quot;);\n        System.out.print(&quot;Count Words Equal to 'apple': &quot;);\n        System.out.println(trie.countWordsEqualTo(&quot;apple&quot;));\n        System.out.print(&quot;Count Words Starting With 'apple': &quot;);\n        System.out.println(trie.countWordsStartingWith(&quot;app&quot;));\n    }\n}\n                            </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block\" data-lang=\"python\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"python\" class=\"language-python\">\nclass Node:\n    &quot;&quot;&quot;\n    Define a class for each node in the trie.\n    &quot;&quot;&quot;\n\n    def __init__(self):\n        # Array to store links\n        # to child nodes\n        self.links = [None] * 26\n        # Counter for number of words\n        # that end at this node\n        self.cntEndWith = 0\n        # Counter for number of words that\n        # have this node as a prefix\n        self.cntPrefix = 0\n\n    def contains_key(self, ch):\n        &quot;&quot;&quot;\n        Function to check if the\n        node contains a specific key.\n        &quot;&quot;&quot;\n        # Check if the link corresponding\n        # to the character exists\n        return self.links[ord(ch) - ord('a')] is not None\n\n    def get(self, ch):\n        &quot;&quot;&quot;\n        Function to get the child node\n        corresponding to a key.\n        &quot;&quot;&quot;\n        # Return the link corresponding\n        # to the character\n        return self.links[ord(ch) - ord('a')]\n\n    def put(self, ch, node):\n        &quot;&quot;&quot;\n        Function to insert a child node\n        with a specific key.\n        &quot;&quot;&quot;\n        # Set the link corresponding to\n        # the character to the provided node\n        self.links[ord(ch) - ord('a')] = node\n\n    def increase_end(self):\n        &quot;&quot;&quot;\n        Function to increment the count\n        of words that end at this node.\n        &quot;&quot;&quot;\n        # Increment the counter\n        self.cntEndWith += 1\n\n    def increase_prefix(self):\n        &quot;&quot;&quot;\n        Function to increment the count of\n        words that have this node as a prefix.\n        &quot;&quot;&quot;\n        # Increment the counter\n        self.cntPrefix += 1\n\n    def delete_end(self):\n        &quot;&quot;&quot;\n        Function to decrement the count of\n        words that end at this node.\n        &quot;&quot;&quot;\n        # Decrement the counter\n        self.cntEndWith -= 1\n\n    def reduce_prefix(self):\n        &quot;&quot;&quot;\n        Function to decrement the count of \n        words that have this node as a prefix.\n        &quot;&quot;&quot;\n        # Decrement the counter\n        self.cntPrefix -= 1\n\n\nclass Trie:\n    &quot;&quot;&quot;\n    Define a class for the\n    trie data structure.\n    &quot;&quot;&quot;\n\n    def __init__(self):\n        &quot;&quot;&quot;\n        Constructor to initialize the\n        trie with an empty root node.\n        &quot;&quot;&quot;\n        # Create a new root node\n        self.root = Node()\n\n    def insert(self, word):\n        &quot;&quot;&quot;\n        Function to insert a\n        word into the trie.\n        &quot;&quot;&quot;\n        # Start from the root node\n        node = self.root\n        \n        # Iterate over each\n        # character in the word\n        for ch in word:\n            # If the character is not\n            # already in the trie\n            \n            if not node.contains_key(ch):\n            \n                # Create a new node\n                # for the character\n                node.put(ch, Node())\n           \n            # Move to the child node\n            # corresponding to the character\n            \n            node = node.get(ch)\n            # Increment the prefix\n            # count for the node\n            node.increase_prefix()\n        # Increment the end count\n        # for the last node of the word\n        node.increase_end()\n\n    def count_words_equal_to(self, word):\n        &quot;&quot;&quot;\n        Function to count the number\n        of words equal to a given word.\n        &quot;&quot;&quot;\n        # Start from the\n        # root node\n        node = self.root\n        # Iterate over each\n        # character in the word\n        for ch in word:\n            # If the character is\n            # found in the trie\n            if node.contains_key(ch):\n                # Move to the child node\n                # corresponding to the character\n                node = node.get(ch)\n            else:\n                # Return 0 if the\n                # character is not found\n                return 0\n        # Return the count of\n        # words ending at the node\n        return node.cntEndWith\n\n    def count_words_starting_with(self, word):\n        &quot;&quot;&quot;\n        Function to count the number of\n        words starting with a given prefix.\n        &quot;&quot;&quot;\n        # Start from the root node\n        node = self.root\n        # Iterate over each\n        # character in the prefix\n        for ch in word:\n            # If the character is\n            # found in the trie\n            if node.contains_key(ch):\n                # Move to the child node\n                # corresponding to the character\n                node = node.get(ch)\n            else:\n                # Return 0 if the\n                # character is not found\n                return 0\n        # Return the count of\n        # words with the prefix\n        return node.cntPrefix\n\n    def erase(self, word):\n        &quot;&quot;&quot;\n        Function to erase\n        a word from the trie.\n        &quot;&quot;&quot;\n        # Start from the root node\n        node = self.root\n        # Iterate over each\n        # character in the word\n        for ch in word:\n            # If the character is\n            # found in the trie\n            if node.contains_key(ch):\n                # Move to the child node\n                # corresponding to the character\n                node = node.get(ch)\n                # Decrement the prefix\n                # count for the node\n                node.reduce_prefix()\n            else:\n                # Return if the\n                # character is not found\n                return\n        # Decrement the end count\n        # for the last node of the word\n        node.delete_end()\n\n\nif __name__ == &quot;__main__&quot;:\n    trie = Trie()\n    trie.insert(&quot;apple&quot;)\n    trie.insert(&quot;app&quot;)\n    print(&quot;Inserting strings 'apple', 'app' into Trie&quot;)\n    print(&quot;Count Words Equal to 'apple':&quot;, trie.count_words_equal_to(&quot;apple&quot;))\n    print(&quot;Count Words Starting With 'app':&quot;, trie.count_words_starting_with(&quot;app&quot;))\n    print(&quot;Erasing word 'app' from trie&quot;)\n    trie.erase(&quot;app&quot;)\n    print(&quot;Count Words Equal to 'apple':&quot;, trie.count_words_equal_to(&quot;apple&quot;))\n    print(&quot;Count Words Starting With 'apple':&quot;, trie.count_words_starting_with(&quot;app&quot;))\n                           </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block\" data-lang=\"javascript\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"javascript\" class=\"language-javascript\">\n// Define a class for the\n// trie data structure\nclass Node {\n    // Define a struct for\n    // each node in the trie\n    constructor() {\n        // Array to store\n        // links to child nodes\n        this.links = new Array(26).fill(null);\n        // Counter for number of\n        // words that end at this node\n        this.cntEndWith = 0;\n        // Counter for number of words\n        // that have this node as a prefix\n        this.cntPrefix = 0;\n    }\n\n    // Function to check if the\n    // node contains a specific key\n    containsKey(ch) {\n        // Check if the link corresponding\n        // to the character exists\n        return this.links[ch.charCodeAt(0) - 'a'.charCodeAt(0)] !== null;\n    }\n\n    // Function to get the child\n    // node corresponding to a key\n    get(ch) {\n        // Return the link \n        // orresponding to the character\n        return this.links[ch.charCodeAt(0) - 'a'.charCodeAt(0)];\n    }\n\n    // Function to insert a\n    // child node with a specific key\n    put(ch, node) {\n        // Set the link corresponding\n        // to the character to the provided node\n        this.links[ch.charCodeAt(0) - 'a'.charCodeAt(0)] = node;\n    }\n\n    // Function to increment the count\n    // of words that end at this node\n    increaseEnd() {\n        // Increment the counter\n        this.cntEndWith++;\n    }\n\n    // Function to increment the count\n    // of words that have this node as a prefix\n    increasePrefix() {\n        // Increment the counter\n        this.cntPrefix++;\n    }\n\n    // Function to decrement the count\n    // of words that end at this node\n    deleteEnd() {\n        // Decrement the counter\n        this.cntEndWith--;\n    }\n\n    // Function to decrement the count of\n    // words that have this node as a prefix\n    reducePrefix() {\n        // Decrement the counter\n        this.cntPrefix--;\n    }\n}\n\nclass Trie {\n    // Constructor to initialize\n    // the trie with an empty root node\n    constructor() {\n        // Create a new root node\n        this.root = new Node();\n    }\n\n    // Function to insert\n    // a word into the trie\n    insert(word) {\n        // Start from the root node\n        let node = this.root;\n        // Iterate over each\n        // character in the word\n        for (let i = 0; i &lt; word.length; i++) {\n            // If the character\n            // is not already in the trie\n            if (!node.containsKey(word[i])) {\n                // Create a new node\n                // for the character\n                node.put(word[i], new Node());\n            }\n            // Move to the child node\n            // corresponding to the character\n            node = node.get(word[i]);\n            \n            // Increment the prefix\n            // count for the node\n            node.increasePrefix();\n        }\n        // Increment the end count for\n        // the last node of the word\n        node.increaseEnd();\n    }\n\n    // Function to count the number\n    // of words equal to a given word\n    countWordsEqualTo(word) {\n        // Start from the root node\n        let node = this.root;\n        // Iterate over each character in the word\n        for (let i = 0; i &lt; word.length; i++) {\n            // If the character is\n            // found in the trie\n            if (node.containsKey(word[i])) {\n                // Move to the child node\n                // corresponding to the character\n                node = node.get(word[i]);\n            } else {\n                // Return 0 if the\n                // character is not found\n                return 0;\n            }\n        }\n        // Return the count of\n        // words ending at the node\n        return node.cntEndWith;\n    }\n\n    // Function to count the number of\n    // words starting with a given prefix\n    countWordsStartingWith(word) {\n        // Start from the root node\n        let node = this.root;\n        // Iterate over each\n        // character in the prefix\n        for (let i = 0; i &lt; word.length; i++) {\n            // If the character is\n            // found in the trie\n            if (node.containsKey(word[i])) {\n                // Move to the child node\n                // corresponding to the character\n                node = node.get(word[i]);\n            } else {\n                // Return 0 if the\n                // character is not found\n                return 0;\n            }\n        }\n        // Return the count of\n        // words with the prefix\n        return node.cntPrefix;\n    }\n\n    // Function to erase\n    // a word from the trie\n    erase(word) {\n        // Start from the root node\n        let node = this.root;\n        // Iterate over each character in the word\n        for (let i = 0; i &lt; word.length; i++) {\n            // If the character is\n            // found in the trie\n            if (node.containsKey(word[i])) {\n                // Move to the child node\n                // corresponding to the character\n                node = node.get(word[i]);\n                // Decrement the prefix\n                // count for the node\n                node.reducePrefix();\n            } else {\n                // Return if the\n                // character is not found\n                return;\n            }\n        }\n        // Decrement the end count\n        // for the last node of the word\n        node.deleteEnd();\n    }\n}\n\n// Main function\nlet trie = new Trie();\ntrie.insert(&quot;apple&quot;);\ntrie.insert(&quot;app&quot;);\nconsole.log(&quot;Inserting strings 'apple', 'app' into Trie&quot;);\nconsole.log(&quot;Count Words Equal to 'apple': &quot;, trie.countWordsEqualTo(&quot;apple&quot;));\nconsole.log(&quot;Count Words Starting With 'app': &quot;, trie.countWordsStartingWith(&quot;app&quot;));\nconsole.log(&quot;Erasing word 'app' from trie&quot;);\ntrie.erase(&quot;app&quot;);\nconsole.log(&quot;Count Words Equal to 'apple': &quot;, trie.countWordsEqualTo(&quot;apple&quot;));\nconsole.log(&quot;Count Words Starting With 'apple': &quot;, trie.countWordsStartingWith(&quot;app&quot;));\n                            </code>\n                        </pre>\n                    </div>\n                    <p>\n                       <strong>Output</strong> \n                    </p>\n                    <p>Inserting strings 'apple', 'app' into Trie</p>\n                    <p>Count Words Equal to 'apple': 1</p>\n                    <p>Count Words Starting With 'app': 2</p>\n                    <p>Erasing word 'app' from trie</p>\n                    <p>Count Words Equal to 'apple': 1</p>\n                    <p>Count Words Starting With 'apple': 1</p>\n                </div>\n            </details>\n            <details class=\"secondary-details\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Complexity Analysis\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <p>\n                    <!-- Insert Time and Space Complexity  Here -->\n                    <p><strong>Time Complexity: O(N)</strong>\n                    where N is the length of the word or prefix being processed.\n                    <ol><li>Each method (insertion, counting words equal to a given word, counting words starting with a prefix, and erasing a word) requires traversing the Trie for each character of the input word or prefix.</li><li>Therefore, the time complexity is linear with respect to the length of the word or prefix being processed.</li></ol></p>\n\n\t\t\t\t\t<p><strong>Space Complexity: O(N)</strong>   \n\t\t\t\t\twhere N is the total characters across all words inserted into the Trie. The space complexity is proportional to the number of unique words inserted into the Trie and the average length of those words.</p>\n\n                </p>\n            </details>\n        </div>\n    </details>\n</div>\n\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n    <details>\n        <summary class=\"main-summary\">\n            <span>\n                Video Explanation\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"yt-video-wrapper\">\n            <!-- Insert iframe embed Link of Youtube Video-->\n        <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/K5pcpkEMCN0?si=9XQ6BYuvzG_8iNuc\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n        </div>\n    </details>\n</div>\n\n<blockquote class=\"wp-block-quote\">\n    Special thanks to <strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268\">Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,<strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\"> please check out this article</a></strong>\n</blockquote>\n\n<script>\n\n    const codeSections = document.querySelectorAll('.code-section');\n\n    // Get last selected language from localStorage or set default value\n    let lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp';\n\n    codeSections.forEach((section, sectionIndex) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n        const copyBtn = section.querySelector('.copy-btn');\n\n        codeTabs.forEach((tab) => {\n            tab.addEventListener('click', () => {\n                codeTabs.forEach((t) => {\n                    t.classList.remove('dsa_article_code_active');\n                });\n                tab.classList.add('dsa_article_code_active');\n\n                const lang = tab.dataset.lang;\n                const activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                codeBlocks.forEach((block) => {\n                    if (block === activeBlock) {\n                        block.classList.add('dsa_article_code_active');\n                    } else {\n                        block.classList.remove('dsa_article_code_active');\n                    }\n                });\n\n                // Update last selected language for all sections and store in localStorage\n                lastSelectedLanguage = lang;\n                localStorage.setItem('lastSelectedLanguage', lang);\n                codeSections.forEach((otherSection, otherIndex) => {\n                    if (otherIndex !== sectionIndex) {\n                        const otherTabs = otherSection.querySelectorAll('.code-tab');\n                        otherTabs.forEach((otherTab) => {\n                            if (otherTab.dataset.lang === lang) {\n                                otherTab.classList.add('dsa_article_code_active');\n                            } else {\n                                otherTab.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                        const otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                        const otherCodeBlocks = otherSection.querySelectorAll('.code-block');\n                        otherCodeBlocks.forEach((block) => {\n                            if (block === otherActiveBlock) {\n                                block.classList.add('dsa_article_code_active');\n                            } else {\n                                block.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                    }\n                });\n            });\n        });\n\n        // Handle copy button click event\n        copyBtn.addEventListener('click', () => {\n            const activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\n            navigator.clipboard.writeText(activeBlock.innerText);\n            copyBtn.classList.add('dsa_article_code_active');\n            setTimeout(() => {\n                copyBtn.classList.remove('dsa_article_code_active');\n            }, 1000);\n        });\n    });\n\n    // Set initial state of the tabs\n    codeSections.forEach((section) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n\n        codeTabs.forEach((tab) => {\n            if (tab.dataset.lang === lastSelectedLanguage) {\n                tab.classList.add('dsa_article_code_active');\n            } else {\n                tab.classList.remove('dsa_article_code_active');\n            }\n        });\n\n        codeBlocks.forEach((block) => {\n            if (block.dataset.lang === lastSelectedLanguage) {\n                block.classList.add('dsa_article_code_active');\n            } else {\n                block.classList.remove('dsa_article_code_active');\n            }\n        });\n    });\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>"
}