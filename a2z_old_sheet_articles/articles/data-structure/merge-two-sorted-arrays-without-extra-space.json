{
    "dislikes": 16,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:09:22 GMT+0530 (India Standard Time)",
    "slug": "merge-two-sorted-arrays-without-extra-space",
    "aid": "1468",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/merge-two-sorted-arrays-without-extra-space",
    "title": "Merge two Sorted Arrays Without Extra Space",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        }
    ],
    "likes": 246,
    "category_tag": "data-structure",
    "preview": "Problem statement: Given two sorted arrays arr1[] and arr2[] of sizes n and m in non-decreasing order. Merge them in sorted order. Modify arr1 so that it contains the first N elements and modify ar...",
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem statement: </strong>Given two sorted arrays <strong>arr1[]</strong> and <strong>arr2[] </strong>of<strong> </strong>sizes <strong>n</strong> and <strong>m</strong> in non-decreasing order. Merge them in sorted order. Modify arr1 so that it contains the first N elements and modify arr2 so that it contains the last M elements.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n<details class=\"article_example_details\">\n<summary class=\"article_example_summary\">\n<span><strong>\nExamples\n</strong>\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"atricle_example_content\">\n<pre class=\"wp-block-preformatted\"><!-- Insert New Examples Here -->\n<pre class=\"wp-block-preformatted\"><strong>Example 1:</strong>\n\n<strong>Input:</strong> \nn = 4, arr1[] = [1 4 8 10] \nm = 5, arr2[] = [2 3 9]\n\n<strong>Output:</strong> \narr1[] = [1 2 3 4]\narr2[] = [8 9 10]\n\n<strong>Explanation:</strong>\nAfter merging the two non-decreasing arrays, we get, 1,2,3,4,8,9,10.\n\n<strong>Example2:</strong>\n\n<strong>Input:</strong> \nn = 4, arr1[] = [1 3 5 7] \nm = 5, arr2[] = [0 2 6 8 9]\n\n<strong>Output:</strong> \narr1[] = [0 1 2 3]\narr2[] = [5 6 7 8 9]\n\n<strong>Explanation:</strong>\nAfter merging the two non-decreasing arrays, we get, 0 1 2 3 5 6 7 8 9.\n</pre>\n</pre>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Practice Section-->\n<div class=\"practice\">\n<span><strong>Practice: </strong></span>\n<div class=\"problem-buttons\">\n\n<!-- Add Problem Link inside href -->\n<a href=\"https://bit.ly/3BqXvPn\" target=\"_blank\" rel=\"noopener\">\n<span>Solve Problem</span>\n<img src=\"https://static.takeuforward.org/wp/uploads/2023/04/Group-11-5.png\" alt=\"code-studio\">\n</a>\n</div>\n</div>\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\nyourself first. </em></p>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<div class=\"horizontal_navbar_dsa_article\">\n<div class=\"grid_container_three\">\n<a href=\"#brute-force-approach\" class=\"three-boxes box-a\">\nBrute Force Approach\n</a>\n<a href=\"#better-approach\" class=\"three-boxes box-b\">\nOptimal Approach 1\n</a>\n<a href=\"#optimal-approach\" class=\"three-boxes box-c\">\nOptimal Approach 2\n</a>\n<a href=\"#dsa_article_video_explanation\" class=\"three-boxes box-d\">\n<svg width=\"26\" height=\"26\" viewBox=\"0 0 20 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M8 10L13.19 7L8 4V10ZM19.56 2.17C19.69 2.64 19.78 3.27 19.84 4.07C19.91 4.87 19.94 5.56 19.94 6.16L20 7C20 9.19 19.84 10.8 19.56 11.83C19.31 12.73 18.73 13.31 17.83 13.56C17.36 13.69 16.5 13.78 15.18 13.84C13.88 13.91 12.69 13.94 11.59 13.94L10 14C5.81 14 3.2 13.84 2.17 13.56C1.27 13.31 0.69 12.73 0.44 11.83C0.31 11.36 0.22 10.73 0.16 9.93C0.0900001 9.13 0.0599999 8.44 0.0599999 7.84L0 7C0 4.81 0.16 3.2 0.44 2.17C0.69 1.27 1.27 0.69 2.17 0.44C2.64 0.31 3.5 0.22 4.82 0.16C6.12 0.0899998 7.31 0.0599999 8.41 0.0599999L10 0C14.19 0 16.8 0.16 17.83 0.44C18.73 0.69 19.31 1.27 19.56 2.17Z\" fill=\"red\"></path>\n</svg>\n\n</a>\n<div class=\"box-e tooltip\">\n<svg viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M12.842 9.25L11.9577 10.17C11.2502 10.89 10.8081 11.5 10.8081 13H8.84297V12.5C8.84297 11.39 9.28511 10.39 9.99255 9.67L11.2109 8.41C11.5745 8.05 11.7906 7.55 11.7906 7C11.7906 6.46957 11.5836 5.96086 11.2151 5.58579C10.8465 5.21071 10.3467 5 9.82552 5C9.30434 5 8.80451 5.21071 8.43598 5.58579C8.06745 5.96086 7.86041 6.46957 7.86041 7H5.89531C5.89531 5.93913 6.30938 4.92172 7.04644 4.17157C7.7835 3.42143 8.78316 3 9.82552 3C10.8679 3 11.8675 3.42143 12.6046 4.17157C13.3417 4.92172 13.7557 5.93913 13.7557 7C13.7543 7.84324 13.4259 8.65183 12.842 9.25ZM10.8081 17H8.84297V15H10.8081M9.82552 0C8.53521 0 7.25754 0.258658 6.06545 0.761205C4.87337 1.26375 3.79021 2.00035 2.87783 2.92893C1.03519 4.8043 0 7.34784 0 10C0 12.6522 1.03519 15.1957 2.87783 17.0711C3.79021 17.9997 4.87337 18.7362 6.06545 19.2388C7.25754 19.7413 8.53521 20 9.82552 20C12.4314 20 14.9306 18.9464 16.7732 17.0711C18.6158 15.1957 19.651 12.6522 19.651 10C19.651 4.47 15.2296 0 9.82552 0Z\" fill=\"black\"></path>\n</svg>\n<div class=\"bottom\">\n<p>Expand any one approach by clicking the given options in the bar. Clicking one approach on bar,\ncloses all other expands. You can manually expand more than one approach at a time</p>\n<i></i>\n</div>\n\n</div>\n</div>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Approaches Drop-Down -->\n<div class=\"dsa_article_dropdown_approachs \">\n\n<!-- Brute Force Approach Starts from here -->\n<div id=\"brute-force-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nBrute Force Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n<h3><strong>Solution:</strong></h3>\n<p>In the question, it is clearly stated that the given two arrays are sorted. Based on this we will try to solve this problem.</p>\n<h3><strong>Naive Approach (Brute-force)</strong>:&nbsp;</h3>\n<p>This approach is not the exact solution according to the question as in this approach we are going to use an extra space i.e. an array. But it is definitely one of the solutions if the question does not contain the constraint of not using any extra space. And also this approach will help to understand the optimal approaches.</p>\n<h3><strong>Approach:</strong></h3>\n<p>Assume the size of the given arrays are n and m.</p>\n<p>The steps are as follows:</p>\n<ol><li>We will first declare a third array, arr3[] of size n+m, and two pointers i.e. <strong><em>left and right</em></strong>, one pointing to the first index of arr1[] and the other pointing to the first index of arr2[].</li><li>The two pointers will move like the following:<ol><li><strong>If arr1[left] &lt; arr2[right]: </strong>We will insert the element arr1[left] into the array and increase the left pointer by 1.</li><li><strong>If arr2[right] &lt; arr1[left]: </strong>We will insert the element arr2[right] into the array and increase the right pointer by 1.</li><li><strong>If arr1[left] == arr2[right]: </strong>Insert any of the elements and increase that particular pointer by 1.</li><li><strong>If one of the pointers reaches the end, </strong>then we will only move the other pointer and insert the rest of the elements of that particular array into the third array i.e. arr3[].</li></ol></li><li>If we move the pointer like the above, we will get the third array in the sorted order.</li><li>Now, from sorted array arr3[], we will copy first n(<em>size of arr1[]</em>) elements to arr1[], and the next m(<em>size of arr2[]</em>) elements to arr2[].</li></ol>\n<h3><strong>Intuition: </strong></h3>\n<p>Intuition is pretty straightforward. As the given arrays are sorted, we are using 2 pointer approach to get a third array, that contains all the elements from the given two arrays in the sorted order. Now, from the sorted third array, we are again filling back the given two arrays.</p>\n<h3><strong>Dry Run:</strong></h3>\n<p>The following dry run will further simplify the concept:</p>\n<pre class=\"wp-block-preformatted\">Assume arr1[] = [1 4 8 10] and arr2[] = [2 3 9].</pre>\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/05/Screenshot-2023-05-07-202817.png\" alt=\"\" class=\"wp-image-8432\"></figure>\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/05/Screenshot-2023-05-07-202844.png\" alt=\"\" class=\"wp-image-8433\"></figure>\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/05/Screenshot-2023-05-07-202908.png\" alt=\"\" class=\"wp-image-8434\"></figure>\n<p><strong>Note: </strong><em>For a better understanding of intuition, please watch the video at the bottom of the page.</em></p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n\n<!-- Insert C++ code of Brute Force Here -->\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvoid merge(long long arr1[], long long arr2[], int n, int m) {\n\n    //Declare a 3rd array and 2 pointers:\n    long long arr3[n + m];\n    int left = 0;\n    int right = 0;\n\n    int index = 0;\n\n    //Insert the elements from the 2 arrays\n    // into the 3rd array using left and right\n    // pointers:\n\n    while (left &lt; n &amp;&amp; right &lt; m) {\n        if (arr1[left] &lt;= arr2[right]) {\n            arr3[index] = arr1[left];\n            left++, index++;\n        }\n        else {\n            arr3[index] = arr2[right];\n            right++, index++;\n        }\n    }\n\n    // If right pointer reaches the end:\n    while (left &lt; n) {\n        arr3[index++] = arr1[left++];\n    }\n\n    // If left pointer reaches the end:\n    while (right &lt; m) {\n        arr3[index++] = arr2[right++];\n    }\n\n    // Fill back the elements from arr3[]\n    // to arr1[] and arr2[]:\n    for (int i = 0; i &lt; n + m; i++) {\n        if (i &lt; n) arr1[i] = arr3[i];\n        else arr2[i - n] = arr3[i];\n    }\n}\n\nint main()\n{\n    long long arr1[] = {1, 4, 8, 10};\n    long long arr2[] = {2, 3, 9};\n    int n = 4, m = 3;\n    merge(arr1, arr2, n, m);\n    cout &lt;&lt; \"The merged arrays are: \" &lt;&lt; \"\\n\";\n    cout &lt;&lt; \"arr1[] = \";\n    for (int i = 0; i &lt; n; i++) {\n        cout &lt;&lt; arr1[i] &lt;&lt; \" \";\n    }\n    cout &lt;&lt; \"\\narr2[] = \";\n    for (int i = 0; i &lt; m; i++) {\n        cout &lt;&lt; arr2[i] &lt;&lt; \" \";\n    }\n    cout &lt;&lt; endl;\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\n<!-- Insert Java code of Brute Force Here -->\nimport java.util.*;\n\npublic class tUf {\n\n    public static void merge(long[] arr1, long[] arr2, int n, int m) {\n\n        // Declare a 3rd array and 2 pointers:\n        long[] arr3 = new long[n + m];\n        int left = 0;\n        int right = 0;\n        int index = 0;\n\n        // Insert the elements from the 2 arrays\n        // into the 3rd array using left and right\n        // pointers:\n\n        while (left &lt; n &amp;&amp; right &lt; m) {\n            if (arr1[left] &lt;= arr2[right]) {\n                arr3[index] = arr1[left];\n                left++;\n                index++;\n            } else {\n                arr3[index] = arr2[right];\n                right++;\n                index++;\n            }\n        }\n\n        // If right pointer reaches the end:\n        while (left &lt; n) {\n            arr3[index++] = arr1[left++];\n        }\n\n        // If left pointer reaches the end:\n        while (right &lt; m) {\n            arr3[index++] = arr2[right++];\n        }\n\n        // Fill back the elements from arr3[]\n        // to arr1[] and arr2[]:\n        for (int i = 0; i &lt; n + m; i++) {\n            if (i &lt; n) {\n                arr1[i] = arr3[i];\n            } else {\n                arr2[i - n] = arr3[i];\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        long[] arr1 = {1, 4, 8, 10};\n        long[] arr2 = {2, 3, 9};\n        int n = 4, m = 3;\n        merge(arr1, arr2, n, m);\n        System.out.println(\"The merged arrays are:\");\n        System.out.print(\"arr1[] = \");\n        for (int i = 0; i &lt; n; i++) {\n            System.out.print(arr1[i] + \" \");\n        }\n        System.out.print(\"\\narr2[] = \");\n        for (int i = 0; i &lt; m; i++) {\n            System.out.print(arr2[i] + \" \");\n        }\n        System.out.println();\n    }\n\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\n<!-- Insert Python code of Brute Force Here -->\ndef merge(arr1, arr2, n, m):\n\n    # Declare a 3rd array and 2 pointers:\n    arr3 = [0] * (n + m)\n    left = 0\n    right = 0\n    index = 0\n\n    # Insert the elements from the 2 arrays\n    # into the 3rd array using left and right\n    # pointers:\n    while left &lt; n and right &lt; m:\n        if arr1[left] &lt;= arr2[right]:\n            arr3[index] = arr1[left]\n            left += 1\n            index += 1\n        else:\n            arr3[index] = arr2[right]\n            right += 1\n            index += 1\n\n    # If right pointer reaches the end:\n    while left &lt; n:\n        arr3[index] = arr1[left]\n        left += 1\n        index += 1\n\n    # If left pointer reaches the end:\n    while right &lt; m:\n        arr3[index] = arr2[right]\n        right += 1\n        index += 1\n\n    # Fill back the elements from arr3[]\n    # to arr1[] and arr2[]:\n    for i in range(n + m):\n        if i &lt; n:\n            arr1[i] = arr3[i]\n        else:\n            arr2[i - n] = arr3[i]\n\nif __name__ == '__main__':\n    arr1 = [1, 4, 8, 10]\n    arr2 = [2, 3, 9]\n    n = 4\n    m = 3\n    merge(arr1, arr2, n, m)\n\n    print(\"The merged arrays are:\")\n    print(\"arr1[] = \", end=\"\")\n    for i in range(n):\n        print(arr1[i], end=\" \")\n    print(\"\\narr2[] = \", end=\"\")\n    for i in range(m):\n        print(arr2[i], end=\" \")\n    print() \n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\n<!-- Insert JavaScript code of Brute Force Here -->\nfunction merge(arr1, arr2, n, m) {\n\n    //Declare a 3rd array and 2 pointers:\n    let arr3 = new Array(n + m);\n    let left = 0;\n    let right = 0;\n\n    let index = 0;\n\n    //Insert the elements from the 2 arrays\n    // into the 3rd array using left and right\n    // pointers:\n\n    while (left &lt; n &amp;&amp; right &lt; m) {\n        if (arr1[left] &lt;= arr2[right]) {\n            arr3[index] = arr1[left];\n            left++, index++;\n        }\n        else {\n            arr3[index] = arr2[right];\n            right++, index++;\n        }\n    }\n\n    // If right pointer reaches the end:\n    while (left &lt; n) {\n        arr3[index++] = arr1[left++];\n    }\n\n    // If left pointer reaches the end:\n    while (right &lt; m) {\n        arr3[index++] = arr2[right++];\n    }\n\n    // Fill back the elements from arr3[]\n    // to arr1[] and arr2[]:\n    for (let i = 0; i &lt; n + m; i++) {\n        if (i &lt; n) arr1[i] = arr3[i];\n        else arr2[i - n] = arr3[i];\n    }\n}\n\nlet arr1 = [1, 4, 8, 10];\nlet arr2 = [2, 3, 9];\nlet n = 4, m = 3;\nmerge(arr1, arr2, n, m);\nconsole.log(\"The merged arrays are: \");\nconsole.log(\"arr1[] = \" + arr1.join(\" \"));\nconsole.log(\"arr2[] = \" + arr2.join(\" \"));\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Brute Force Here -->\n</p><p><strong>Output:</strong> The merged arrays are:\narr1[] = 1 2 3 4\narr2[] = 8 9 10&nbsp;\n</p>\n<p></p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n<!-- Insert Time and Space Complexity of Brute Force Here -->\n</p><p><strong>Time Complexity: </strong>O(n+m) + O(n+m), where n and m are the sizes of the given arrays.<br><strong>Reason: </strong>O(n+m) is for copying the elements from arr1[] and arr2[] to arr3[]. And another O(n+m) is for filling back the two given arrays from arr3[].</p>\n<p><strong>Space Complexity: </strong>O(n+m) as we use an extra array of size n+m.</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Brute Force Approach Ends here -->\n\n\n<!-- Better Approach Starts from here -->\n\n<div id=\"better-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nOptimal Approach 1:\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition For Better Approach Here -->\n<h3><strong>Optimal Approach 1 (without using any extra space)</strong>:&nbsp;</h3>\n<p>In this optimal approach, we need to get rid of the extra space we were using.</p>\n<h3><strong>Approach:</strong></h3>\n<p>The sizes of the given arrays are n(<em>size of arr1[]</em>) and m(<em>size of arr2[]</em>).</p>\n<p>The steps are as follows:</p>\n<ol><li>We will declare two pointers i.e. <strong>left </strong>and <strong>right.</strong> The left pointer will point to the last index of the arr1[](<em>i.e. Basically the maximum element of the array</em>). The right pointer will point to the first index of the arr2[](<em>i.e. Basically the minimum element of the array</em>).</li><li>Now, the left pointer will move toward index 0 and the right pointer will move towards the index m-1. While moving the two pointers we will face 2 different cases like the following:<ol><li><strong>If arr1[left] &gt; arr2[right]: </strong>In this case, we will swap the elements and move the pointers to the next positions.</li><li><strong>If arr1[left] &lt;= arr2[right]: </strong>In this case, we will stop moving the pointers as arr1[] and arr2[] are containing correct elements.</li></ol></li><li>Thus, after step 2, arr1[] will contain all smaller elements and arr2[] will contain all bigger elements. Finally, we will sort the two arrays.</li></ol>\n<h3><strong>Intuition: </strong></h3>\n<p>If we merge the given array, one thing we can assure is that arr1[] will contain all the smaller elements and arr2[] will contain all the bigger elements. This is the logic we will use. Using the 2 pointers, we will swap the bigger elements of arr1[] with the smaller elements of arr2[] until the minimum of arr2[] becomes greater or equal to the maximum of arr1[].</p>\n<h3><strong>Dry run:&nbsp;</strong></h3>\n<p>The dry run will further clarify the concepts:</p>\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/05/Screenshot-2023-05-07-203827.png\" alt=\"\" class=\"wp-image-8435\"></figure>\n<p><strong>Note: </strong><em>For a better understanding of intuition, please watch the video at the bottom of the page.</em></p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n\n<!-- Insert C++ Code of Better Approach Here -->\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvoid merge(long long arr1[], long long arr2[], int n, int m) {\n\n    //Declare 2 pointers:\n    int left = n - 1;\n    int right = 0;\n\n    //Swap the elements until arr1[left] is\n    // smaller than arr2[right]:\n    while (left &gt;= 0 &amp;&amp; right &lt; m) {\n        if (arr1[left] &gt; arr2[right]) {\n            swap(arr1[left], arr2[right]);\n            left--, right++;\n        }\n        else {\n            break;\n        }\n    }\n\n    // Sort arr1[] and arr2[] individually:\n    sort(arr1, arr1 + n);\n    sort(arr2, arr2 + m);\n}\n\nint main()\n{\n    long long arr1[] = {1, 4, 8, 10};\n    long long arr2[] = {2, 3, 9};\n    int n = 4, m = 3;\n    merge(arr1, arr2, n, m);\n    cout &lt;&lt; \"The merged arrays are: \" &lt;&lt; \"\\n\";\n    cout &lt;&lt; \"arr1[] = \";\n    for (int i = 0; i &lt; n; i++) {\n        cout &lt;&lt; arr1[i] &lt;&lt; \" \";\n    }\n    cout &lt;&lt; \"\\narr2[] = \";\n    for (int i = 0; i &lt; m; i++) {\n        cout &lt;&lt; arr2[i] &lt;&lt; \" \";\n    }\n    cout &lt;&lt; endl;\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\n<!-- Insert Java Code of Better Approach Here -->\nimport java.util.*;\n\npublic class tUf {\n\n    public static void merge(long[] arr1, long[] arr2, int n, int m) {\n\n        // Declare 2 pointers:\n        int left = n - 1;\n        int right = 0;\n\n        // Swap the elements until arr1[left] is\n        // smaller than arr2[right]:\n        while (left &gt;= 0 &amp;&amp; right &lt; m) {\n            if (arr1[left] &gt; arr2[right]) {\n                long temp = arr1[left];\n                arr1[left] = arr2[right];\n                arr2[right] = temp;\n                left--;\n                right++;\n            } else {\n                break;\n            }\n        }\n\n        // Sort arr1[] and arr2[] individually:\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n    }\n\n    public static void main(String[] args) {\n        long[] arr1 = {1, 4, 8, 10};\n        long[] arr2 = {2, 3, 9};\n        int n = 4, m = 3;\n        merge(arr1, arr2, n, m);\n        System.out.println(\"The merged arrays are:\");\n        System.out.print(\"arr1[] = \");\n        for (int i = 0; i &lt; n; i++) {\n            System.out.print(arr1[i] + \" \");\n        }\n        System.out.print(\"\\narr2[] = \");\n        for (int i = 0; i &lt; m; i++) {\n            System.out.print(arr2[i] + \" \");\n        }\n        System.out.println();\n    }\n\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\n<!-- Insert Python Code of Better Approach Here -->\ndef merge(arr1, arr2, n, m):\n\n    # Declare 2 pointers:\n    left = n - 1\n    right = 0\n\n    # Swap the elements until arr1[left] is smaller than arr2[right]:\n    while left &gt;= 0 and right &lt; m:\n        if arr1[left] &gt; arr2[right]:\n            arr1[left], arr2[right] = arr2[right], arr1[left]\n            left -= 1\n            right += 1\n        else:\n            break\n\n    # Sort arr1[] and arr2[] individually:\n    arr1.sort()\n    arr2.sort()\n\nif __name__ == '__main__':\n    arr1 = [1, 4, 8, 10]\n    arr2 = [2, 3, 9]\n    n = 4\n    m = 3\n    merge(arr1, arr2, n, m)\n\n    print(\"The merged arrays are:\")\n    print(\"arr1[] = \", end=\"\")\n    for i in range(n):\n        print(arr1[i], end=\" \")\n    print(\"\\narr2[] = \", end=\"\")\n    for i in range(m):\n        print(arr2[i], end=\" \")\n    print()\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\n<!-- Insert javascript Code of Better Approach Here -->\nfunction merge(arr1, arr2, n, m) {\n\n    //Declare 2 pointers:\n    let left = n - 1;\n    let right = 0;\n\n    //Swap the elements until arr1[left] is\n    // smaller than arr2[right]:\n    while (left &gt;= 0 &amp;&amp; right &lt; m) {\n        if (arr1[left] &gt; arr2[right]) {\n            [arr1[left], arr2[right]] = [arr2[right], arr1[left]];\n            left--, right++;\n        }\n        else {\n            break;\n        }\n    }\n\n    // Sort arr1[] and arr2[] individually:\n    arr1.sort((a, b) =&gt; a - b);\n    arr2.sort((a, b) =&gt; a - b);\n}\n\nlet arr1 = [1, 4, 8, 10];\nlet arr2 = [2, 3, 9];\nlet n = 4, m = 3;\nmerge(arr1, arr2, n, m);\nconsole.log(\"The merged arrays are: \");\nconsole.log(\"arr1[] = \" + arr1.join(' '));\nconsole.log(\"arr2[] = \" + arr2.join(' '));\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Better Approach Here -->\n<strong>Output:</strong>  The merged arrays are:\narr1[] = 1 2 3 4\narr2[] = 8 9 10&nbsp;\n\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Better Approach Here -->\n</p><p><strong>Time Complexity: </strong>O(min(n, m)) + O(n*logn) + O(m*logm), where n and m are the sizes of the given arrays.<br><strong>Reason: </strong>O(min(n, m)) is for swapping the array elements. And O(n*logn) and O(m*logm) are for sorting the two arrays.</p>\n<p><strong>Space Complexity: </strong>O(1) as we are not using any extra space.</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Better Approach Ends from here -->\n\n\n<!-- Optimal Approach Starts from here -->\n\n<div id=\"optimal-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nOptimal Approach 2:\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm of Better Approach Here -->\n<h3><strong>Optimal Approach 2 (Using gap method)</strong>:&nbsp;</h3>\n<p>This gap method is based on a sorting technique called shell sort. The intuition of this method is simple.&nbsp;</p>\n<h3><strong>Intuition: </strong></h3>\n<p>Similar to optimal approach 1, in this approach, we will use two pointers i.e. left and right, and swap the elements if the element at the left pointer is greater than the element at the right pointer.&nbsp;</p>\n<p>But the placing of the pointers will be based on the gap value calculated. The formula to calculate the initial gap is the following:</p>\n<p>Initial gap = ceil((size of arr1[] + size of arr2[]) / 2)</p>\n<p>Assume the two arrays as a single continuous array and initially, we will place the left pointer at the first index and the right pointer at the (left+gap) index of that continuous array.</p>\n<p>Now, we will compare the elements at the left and right pointers and move them by 1 place each time after comparison. While comparing we will swap the elements if <strong><em>the element at the left pointer &gt; the element at the right pointer</em></strong>. After some steps, the right pointer will reach the end and the iteration will be stopped.</p>\n<p>After each iteration, we will decrease the gap and will follow the same procedure until the iteration for gap = 1 gets completed. Now, after each iteration, the gap will be the following:</p>\n<p>gap = ceil( previous gap / 2)</p>\n<p>The whole process will be applied to the imaginary continuous array constructed using arr1[] and arr2[].</p>\n<h3><strong>Approach:</strong></h3>\n<p>The steps are as follows:</p>\n<ol><li>First, assume the two arrays as a single array and calculate the gap value i.e. ceil((size of arr1[] + size of arr2[]) / 2).</li><li>We will perform the following operations for each gap until the value of the gap becomes 0:<ol><li>Place two pointers in their correct position like the left pointer at index 0 and the right pointer at index (left+gap).</li><li>Again we will run a loop until the right pointer reaches the end i.e. (n+m). Inside the loop, there will be 3 different cases:<ol><li><strong>If the left pointer is inside arr1[] and the right pointer is in arr2[]: </strong>We will compare arr1[left] and arr2[right-n] and swap them if arr1[left] &gt; arr2[right-n].</li><li><strong>If both the pointers are in arr2[]: </strong>We will compare arr1[left-n] and arr2[right-n] and swap them if arr1[left-n] &gt; arr2[right-n].</li><li><strong>If both the pointers are in arr1[]: </strong>We will compare arr1[left] and arr2[right] and swap them if arr1[left] &gt; arr2[right].</li></ol></li><li>After the right pointer reaches the end, we will decrease the value of the gap and it will become ceil(current gap / 2).&nbsp;</li></ol></li><li>Finally, after performing all the operations, we will get the merged sorted array.</li></ol>\n<p><strong>Note: </strong><em>For a better understanding of intuition, please watch the video at the bottom of the page.</em></p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n\n<!-- Insert C++ code of Optimal Approach Here-->\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvoid swapIfGreater(long long arr1[], long long arr2[], int ind1, int ind2) {\n    if (arr1[ind1] &gt; arr2[ind2]) {\n        swap(arr1[ind1], arr2[ind2]);\n    }\n}\n\nvoid merge(long long arr1[], long long arr2[], int n, int m) {\n    // len of the imaginary single array:\n    int len = n + m;\n\n    // Initial gap:\n    int gap = (len / 2) + (len % 2);\n\n    while (gap &gt; 0) {\n        // Place 2 pointers:\n        int left = 0;\n        int right = left + gap;\n        while (right &lt; len) {\n            // case 1: left in arr1[]\n            //and right in arr2[]:\n            if (left &lt; n &amp;&amp; right &gt;= n) {\n                swapIfGreater(arr1, arr2, left, right - n);\n            }\n            // case 2: both pointers in arr2[]:\n            else if (left &gt;= n) {\n                swapIfGreater(arr2, arr2, left - n, right - n);\n            }\n            // case 3: both pointers in arr1[]:\n            else {\n                swapIfGreater(arr1, arr1, left, right);\n            }\n            left++, right++;\n        }\n        // break if iteration gap=1 is completed:\n        if (gap == 1) break;\n\n        // Otherwise, calculate new gap:\n        gap = (gap / 2) + (gap % 2);\n    }\n}\n\nint main()\n{\n    long long arr1[] = {1, 4, 8, 10};\n    long long arr2[] = {2, 3, 9};\n    int n = 4, m = 3;\n    merge(arr1, arr2, n, m);\n    cout &lt;&lt; \"The merged arrays are: \" &lt;&lt; \"\\n\";\n    cout &lt;&lt; \"arr1[] = \";\n    for (int i = 0; i &lt; n; i++) {\n        cout &lt;&lt; arr1[i] &lt;&lt; \" \";\n    }\n    cout &lt;&lt; \"\\narr2[] = \";\n    for (int i = 0; i &lt; m; i++) {\n        cout &lt;&lt; arr2[i] &lt;&lt; \" \";\n    }\n    cout &lt;&lt; endl;\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\n<!-- Insert Java code of Optimal Approach Here -->\nimport java.util.*;\n\npublic class tUf {\n\n    public static void swapIfGreater(long[] arr1, long[] arr2, int ind1, int ind2) {\n        if (arr1[ind1] &gt; arr2[ind2]) {\n            long temp = arr1[ind1];\n            arr1[ind1] = arr2[ind2];\n            arr2[ind2] = temp;\n        }\n    }\n\n    public static void merge(long[] arr1, long[] arr2, int n, int m) {\n\n        // len of the imaginary single array:\n        int len = n + m;\n\n        // Initial gap:\n        int gap = (len / 2) + (len % 2);\n\n        while (gap &gt; 0) {\n            // Place 2 pointers:\n            int left = 0;\n            int right = left + gap;\n            while (right &lt; len) {\n                // case 1: left in arr1[]\n                //and right in arr2[]:\n                if (left &lt; n &amp;&amp; right &gt;= n) {\n                    swapIfGreater(arr1, arr2, left, right - n);\n                }\n                // case 2: both pointers in arr2[]:\n                else if (left &gt;= n) {\n                    swapIfGreater(arr2, arr2, left - n, right - n);\n                }\n                // case 3: both pointers in arr1[]:\n                else {\n                    swapIfGreater(arr1, arr1, left, right);\n                }\n                left++; right++;\n            }\n            // break if iteration gap=1 is completed:\n            if (gap == 1) break;\n\n            // Otherwise, calculate new gap:\n            gap = (gap / 2) + (gap % 2);\n        }\n    }\n\n    public static void main(String[] args) {\n        long[] arr1 = {1, 4, 8, 10};\n        long[] arr2 = {2, 3, 9};\n        int n = 4, m = 3;\n        merge(arr1, arr2, n, m);\n        System.out.println(\"The merged arrays are:\");\n        System.out.print(\"arr1[] = \");\n        for (int i = 0; i &lt; n; i++) {\n            System.out.print(arr1[i] + \" \");\n        }\n        System.out.print(\"\\narr2[] = \");\n        for (int i = 0; i &lt; m; i++) {\n            System.out.print(arr2[i] + \" \");\n        }\n        System.out.println();\n    }\n\n}\n\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\n<!-- Insert Python code of Optimal Approach Here -->\ndef swapIfGreater(arr1, arr2, ind1, ind2):\n    if arr1[ind1] &gt; arr2[ind2]:\n        arr1[ind1], arr2[ind2] = arr2[ind2], arr1[ind1]\n\ndef merge(arr1, arr2, n, m):\n    # len of the imaginary single array:\n    len = n + m\n\n    # Initial gap:\n    gap = (len // 2) + (len % 2)\n\n    while gap &gt; 0:\n        # Place 2 pointers:\n        left = 0\n        right = left + gap\n        while right &lt; len:\n            # case 1: left in arr1[]\n            # and right in arr2[]:\n            if left &lt; n and right &gt;= n:\n                swapIfGreater(arr1, arr2, left, right - n)\n            # case 2: both pointers in arr2[]:\n            elif left &gt;= n:\n                swapIfGreater(arr2, arr2, left - n, right - n)\n            # case 3: both pointers in arr1[]:\n            else:\n                swapIfGreater(arr1, arr1, left, right)\n            left += 1\n            right += 1\n        # break if iteration gap=1 is completed:\n        if gap == 1:\n            break\n        # Otherwise, calculate new gap:\n        gap = (gap // 2) + (gap % 2)\n\nif __name__ == '__main__':\n    arr1 = [1, 4, 8, 10]\n    arr2 = [2, 3, 9]\n    n = 4\n    m = 3\n    merge(arr1, arr2, n, m)\n\n    print(\"The merged arrays are:\")\n    print(\"arr1[] = \", end=\"\")\n    for i in range(n):\n        print(arr1[i], end=\" \")\n    print(\"\\narr2[] = \", end=\"\")\n    for i in range(m):\n        print(arr2[i], end=\" \")\n    print()\n\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\n<!-- Insert Python code of Optimal Approach Here -->\nfunction swapIfGreater(arr1, arr2, ind1, ind2) {\n  if (arr1[ind1] &gt; arr2[ind2]) {\n    [arr1[ind1], arr2[ind2]] = [arr2[ind2], arr1[ind1]];\n  }\n}\n\nfunction merge(arr1, arr2, n, m) {\n  const len = n + m;\n  let gap = Math.ceil(len / 2);\n\n  while (gap &gt; 0) {\n    let left = 0;\n    let right = left + gap;\n\n    while (right &lt; len) {\n      if (left &lt; n &amp;&amp; right &gt;= n) {\n        swapIfGreater(arr1, arr2, left, right - n);\n      } else if (left &gt;= n) {\n        swapIfGreater(arr2, arr2, left - n, right - n);\n      } else {\n        swapIfGreater(arr1, arr1, left, right);\n      }\n      left++, right++;\n    }\n\n    if (gap == 1) break;\n\n    gap = Math.ceil(gap / 2);\n  }\n}\n\nconst arr1 = [1, 4, 8, 10];\nconst arr2 = [2, 3, 9];\nconst n = 4, m = 3;\n\nmerge(arr1, arr2, n, m);\n\nconsole.log(\"The merged arrays are:\");\nconsole.log(`arr1[] = ${arr1.join(\" \")}`);\nconsole.log(`arr2[] = ${arr2.join(\" \")}`);\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Optimal Apporach Here -->\n<strong>Output:</strong> The merged arrays are:\narr1[] = 1 2 3 4\narr2[] = 8 9 10&nbsp;\n\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Optimal Approach-->\n</p><p><strong>Time Complexity: </strong>O((n+m)*log(n+m)), where n and m are the sizes of the given arrays.<br><strong>Reason: </strong>The gap is ranging from n+m to 1 and every time the gap gets divided by 2. So, the time complexity of the outer loop will be O(log(n+m)). Now, for each value of the gap, the inner loop can at most run for (n+m) times. So, the time complexity of the inner loop will be O(n+m). So, the overall time complexity will be O((n+m)*log(n+m)).</p>\n<p><strong>Space Complexity: </strong>O(1) as we are not using any extra space.</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Optimal Approach Starts from here -->\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n<details>\n<summary class=\"main-summary\">\n<span>\nVideo Explanation\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"yt-video-wrapper\">\n\n<!-- Insert iframe embed Link of Youtube Video-->\n<iframe class=\"lazy-loaded\" loading=\"lazy\" title=\"Merge Two Sorted Arrays without Extra Space\" width=\"810\" height=\"456\" data-lazy-type=\"iframe\" data-src=\"https://www.youtube.com/embed/n7uwj04E0I4?si=keiStd9csaDmKRXv\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\" src=\"https://www.youtube.com/embed/n7uwj04E0I4?feature=oembed\"></iframe><noscript>\n<iframe loading=\"lazy\" title=\"Merge Two Sorted Arrays without Extra Space\" width=\"810\" height=\"456\" src=\"https://www.youtube.com/embed/n7uwj04E0I4?si=keiStd9csaDmKRXv\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe></noscript>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script>\n\nconst codeSections = document.querySelectorAll('.code-section');\n\n// Get last selected language from localStorage or set default value\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\n// Update last selected language for all sections and store in localStorage\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\n// Handle copy button click event\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\n// Set initial state of the tabs\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<script>\nconst codeSections = document.querySelectorAll('.code-section');\n\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script src=\"https://takeuforward.org/UXApproachDropDowns/3ApproachJSScript.js\"></script>\n<!-- /wp:html -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;<strong><a href=\"https://www.linkedin.com/in/prashant-sahu-2691a719a\" target=\"_blank\" rel=\"noreferrer noopener\">Prashant Sahu</a></strong>&nbsp;and <strong><a href=\"https://www.linkedin.com/in/kriti39/\" target=\"_blank\" rel=\"noopener\" title=\"\">KRITIDIPTA GHOSH</a></strong></em> <em>for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->"
}