{
    "dislikes": 43,
    "video": "dxVcMDI7vyI",
    "publishedOn": "Sun Mar 24 2024 22:09:13 GMT+0530 (India Standard Time)",
    "slug": "minimum-number-of-platforms-required-for-a-railway",
    "aid": "1423",
    "title": "Minimum number of platforms required for a railway",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/minimum-number-of-platforms-required-for-a-railway",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "greedy",
            "topic-title": "Greedy"
        },
        {
            "topic-id": "sorting",
            "topic-title": "Sorting"
        }
    ],
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement: </strong>We are given two arrays that represent the arrival and departure times of trains that stop at the platform. We need to find the minimum number of platforms needed at the railway station so that no train has to wait.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Examples 1:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\"><strong>Input:</strong> N=6, \narr[] = {9:00, 9:45, 9:55, 11:00, 15:00, 18:00}&nbsp;\ndep[] = {9:20, 12:00, 11:30, 11:50, 19:00, 20:00}\n\n<strong>Output:</strong>3</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p><strong>Explanation:</strong> There are at-most three trains at a time. The train at 11:00 arrived but the trains which had arrived at 9:45 and 9:55 have still not departed. So, we need at least three platforms here.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"624\" height=\"267\" src=\"https://lh6.googleusercontent.com/r5OF5NqKLDt3TtQ-IFLoULIiQG2e7ZaFOV06KE6z2DOpE4v17rB20bVzTaLHn6U_IKaqsVqfsLA-c6BtwVtq1BTNhXQ1Zqm2FDCu1D-bry_3U-RUY_RD1EMKGqkc1U1bT_AbhMM2\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Example 2:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\"><strong>Input Format:</strong> N=2, \narr[]={10:20,12:00}\ndep[]={10:50,12:30}\n\n<strong>Output: </strong>1</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p><strong>Explanation: </strong>Before the arrival of the new train, the earlier train already departed. So, we don't require multiple platforms.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Solution</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph {\"textColor\":\"vivid-red\"} -->\n<p class=\"has-vivid-red-color has-text-color\"><strong><em>Disclaimer</em></strong>: <em>Don't jump directly to the solution, try it out yourself first.</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Solution 1</strong>:<strong> Naive Approach&nbsp;</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Intuition: </strong>Take each interval of arrival and departure one by one and count the number of overlapping time intervals. This can easily be done using nested for-loops. Maintain the maximum value of the count during the process and return the maximum value at the end.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Approach:&nbsp;</strong>We need to run two nested for-loops. Inside the inner loop count the number of intervals which intersect with the interval represented by the outer loop. As soon as the inner loop ends just update the maximum value of count and proceed with the next iteration of the outer loop. After the process ends we will get the maximum value of the count.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include&lt;bits/stdc++.h&gt;\n using namespace std;\n \n int countPlatforms(int n,int arr[],int dep[])\n {\n    int ans=1; //final value\n    for(int i=0;i&lt;=n-1;i++)\n    {\n        int count=1; // count of overlapping interval of only this   iteration\n        for(int j=i+1;j&lt;=n-1;j++)\n        {\n            if((arr[i]&gt;=arr[j] &amp;&amp; arr[i]&lt;=dep[j]) ||\n           (arr[j]&gt;=arr[i] &amp;&amp; arr[j]&lt;=dep[i]))\n           {\n               count++;\n           }\n        }\n        ans=max(ans,count); //updating the value\n    }\n    return ans;\n }\n \n int main()\n {\n    int arr[]={900,945,955,1100,1500,1800};\n    int dep[]={920,1200,1130,1150,1900,2000};\n    int n=sizeof(dep)/sizeof(dep[0]);\n    cout&lt;&lt;\"Minimum number of Platforms required \"&lt;&lt;countPlatforms(n,arr,dep)&lt;&lt;endl;\n }\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> Minimum number of Platforms required 3</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O(n^2)&nbsp; (due to two nested loops).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(1)&nbsp; (no extra space used).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\nclass TUF {\nstatic int countPlatforms(int n,int arr[],int dep[])\n {\n    int ans=1; //final value\n    for(int i=0;i&lt;=n-1;i++)\n    {\n        int count=1; // count of overlapping interval of only this   iteration\n        for(int j=i+1;j&lt;=n-1;j++)\n        {\n            if((arr[i]&gt;=arr[j] &amp;&amp; arr[i]&lt;=dep[j]) ||\n           (arr[j]&gt;=arr[i] &amp;&amp; arr[j]&lt;=dep[i]))\n           {\n               count++;\n           }\n        }\n        ans=Math.max(ans,count); //updating the value\n    }\n    return ans;\n }\n \n \npublic static void main (String[] args) {\n\t\t\n\t\tint[] arr ={900,945,955,1100,1500,1800};\n\t\tint[] dep={920,1200,1130,1150,1900,2000};\n\t\tint n=arr.length;\n\t\tint totalCount=countPlatforms(n,arr,dep);\n\t\tSystem.out.println(\"Minimum number of Platforms required \"+totalCount);\n\t}\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Minimum number of Platforms required 3</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O(n^2)&nbsp; (due to two nested loops).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(1)&nbsp; (no extra space used).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block\" data-lang=\"python\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">def countPlatforms(n, arr, dep):\n    ans = 1  # final value\n    for i in range(n):\n        count = 1  # count of overlapping interval of only this iteration\n        for j in range(i+1, n):\n            if (arr[i] >= arr[j] and arr[i] &lt;= dep[j]) or (arr[j] >= arr[i] and arr[j] &lt;= dep[i]):\n                count += 1\n        ans = max(ans, count)  # updating the value\n    return ans\n\n\n\n\nif __name__ == \"__main__\":\n    arr = [900, 945, 955, 1100, 1500, 1800]\n    dep = [920, 1200, 1130, 1150, 1900, 2000]\n    n = len(dep)\n    print(\"Minimum number of Platforms required\", countPlatforms(n, arr, dep))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Minimum number of Platforms required 3</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O(n^2)&nbsp; (due to two nested loops).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(1)\u00a0 (no extra space used).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Solution 2</strong>:<strong> Efficient Approach </strong>[Sorting]</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Intuition: </strong>At first we need to sort both arrays. When the events will be sorted, it will be easy to track the count of trains that have arrived but not departed yet. The total platforms needed at one time can be found by taking the difference between arrivals and departures at that time and the maximum value of all times will be the final answer.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Approach:\u00a0</strong> At first we need to sort both arrays. When the events will be sorted, it will be easy to track the count of trains that have arrived but not departed yet. The total platforms needed at one time can be found by taking the difference of arrivals and departures at that time and the maximum value of all times will be the final answer. If(arr[i]&lt;=dep[j]) means if arrival time is less than or equal to the departure time then- we need one more platform. So increment count as well as increment i. If(arr[i]>dep[j]) means the arrival time is more than the departure time then- we have one extra platform which we can reduce. So decrement count but increment j. Update the ans with max(ans, count) after each iteration of the while loop.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include&lt;bits/stdc++.h&gt;\n using namespace std;\n \n int countPlatforms(int n,int arr[],int dep[])\n {\n    sort(arr,arr+n);\n    sort(dep,dep+n);\n \n    int ans=1;\n    int count=1;\n    int i=1,j=0;\n    while(i&lt;n &amp;&amp; j&lt;n)\n    {\n        if(arr[i]&lt;=dep[j]) //one more platform needed\n        {\n            count++;\n            i++;\n        }\n        else //one platform can be reduced\n        {\n            count--;\n            j++;\n        }\n        ans=max(ans,count); //updating the value with the current maximum\n    }\n    return ans;\n }\n \n int main()\n {\n    int arr[]={900,945,955,1100,1500,1800};\n    int dep[]={920,1200,1130,1150,1900,2000};\n    int n=sizeof(dep)/sizeof(dep[0]);\n    cout&lt;&lt;\"Minimum number of Platforms required \"&lt;&lt;countPlatforms(n,arr,dep)&lt;&lt;endl;\n }\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p> Minimum number of Platforms required  3</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O(nlogn)  Sorting takes O(nlogn) and traversal of arrays takes O(n) so overall time complexity is O(nlogn).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space complexity: </strong>O(1) &nbsp;(No extra space used).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\nclass TUF {\nstatic int findPlatform(int arr[], int dep[], int n)\n    {\n        Arrays.sort(arr); \n        Arrays.sort(dep); \n  \n        int plat_needed = 1, result = 1; \n        int i = 1, j = 0; \n  \n        while (i &lt; n &amp;&amp; j &lt; n) { \n        \n            if (arr[i] &lt;= dep[j]) { \n                plat_needed++; \n                i++; \n            } \n  \n            else if (arr[i] &gt; dep[j]) { \n                plat_needed--; \n                j++; \n            } \n  \n            if (plat_needed &gt; result) \n                result = plat_needed; \n        } \n  \n        return result; \n    }\n public static void main (String[] args) {\n\t\t\n\t\tint[] arr ={900,945,955,1100,1500,1800};\n\t\tint[] dep={920,1200,1130,1150,1900,2000};\n\t\tint n=arr.length;\n\t\tint totalCount=findPlatform(arr,dep,n);\n\t\tSystem.out.println(\"Minimum number of Platforms required \"+totalCount);\n\t}\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Minimum number of Platforms required 3</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O(nlogn) &nbsp; (Sorting takes O(nlogn) and traversal of arrays takes O(n) so overall time complexity is O(nlogn)).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space complexity: </strong>O(1) &nbsp; (No extra space used).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block\" data-lang=\"python\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">def countPlatforms(arr, dep):\n    arr.sort()\n    dep.sort()\n\n\n    ans = 1\n    count = 1\n    i = 1\n    j = 0\n    while i &lt; len(arr) and j &lt; len(dep):\n        if arr[i] &lt;= dep[j]:  # one more platform needed\n            count += 1\n            i += 1\n        else:  # one platform can be reduced\n            count -= 1\n            j += 1\n        ans = max(ans, count)  # updating the value with the current maximum\n    return ans\n\n\n\n\nif __name__ == \"__main__\":\n    arr = [900, 945, 955, 1100, 1500, 1800]\n    dep = [920, 1200, 1130, 1150, 1900, 2000]\n    print(\"Minimum number of Platforms required \", countPlatforms(arr, dep))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p> Minimum number of Platforms required  3</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O(nlogn)  Sorting takes O(nlogn) and traversal of arrays takes O(n) so overall time complexity is O(nlogn).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space complexity: </strong>O(1) \u00a0(No extra space used).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to\u00a0<strong><a href=\"https://www.linkedin.com/in/ekansh-lohiya-640a63187/\" target=\"_blank\" rel=\"noreferrer noopener\" title=\"https://www.linkedin.com/in/ekansh-lohiya-640a63187/\">Ekansh Lohiya</a></strong>\u00a0<em><strong><em><strong>and\u00a0<em><a href=\"https://www.linkedin.com/in/imsudip/\" target=\"_blank\" rel=\"noreferrer noopener\">Sudip Ghosh</a></em></strong></em></strong></em></em> <em>for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,\u00a0</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->",
    "category_tag": "data-structure",
    "likes": 122,
    "preview": "Problem Statement: We are given two arrays that represent the arrival and departure times of trains that stop at the platform. We need to find the minimum number of platforms needed at the railway..."
}