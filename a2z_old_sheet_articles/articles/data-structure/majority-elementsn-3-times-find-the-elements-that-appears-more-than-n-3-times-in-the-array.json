{
    "dislikes": 11,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:09:09 GMT+0530 (India Standard Time)",
    "slug": "majority-elementsn-3-times-find-the-elements-that-appears-more-than-n-3-times-in-the-array",
    "aid": "1407",
    "title": "Majority Elements(&gt;N/3 times) | Find the elements that appears more than N/3 times in the array",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/majority-element-ii",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "hashing",
            "topic-title": "Hashing"
        }
    ],
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement:</strong> Given an array of N integers. Find the elements that appear more than <strong>N/3</strong> times in the array. If no such element exists, return an empty vector.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Pre-requisite: </strong><a href=\"https://takeuforward.org/data-structure/find-the-majority-element-that-occurs-more-than-n-2-times/\">Majority Element(&gt;N/2 times)</a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n<details class=\"article_example_details\">\n<summary class=\"article_example_summary\">\n<span><strong>\nExamples\n</strong>\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"atricle_example_content\">\n<pre class=\"wp-block-preformatted\"><!-- Insert New Examples Here -->\n<pre class=\"wp-block-preformatted\"><strong>Example 1:</strong>\n<strong>Input Format</strong>: N = 5, array[] = {1,2,2,3,2}\n<strong>Result</strong>: 2\n<strong>Explanation:</strong> Here we can see that the Count(1) = 1, Count(2) = 3 and Count(3) = 1.Therefore, the count of 2 is greater than N/3 times. Hence, 2 is the answer.\n\n<strong>Example 2:</strong>\n<strong>Input Format</strong>:  N = 6, array[] = {11,33,33,11,33,11}\n<strong>Result:</strong> 11 33\n<strong>Explanation:</strong> Here we can see that the Count(11) = 3 and Count(33) = 3. Therefore, the count of both 11 and 33 is greater than N/3 times. Hence, 11 and 33 is the answer.\n</pre></pre>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Practice Section-->\n<div class=\"practice\">\n<span><strong>Practice: </strong></span>\n<div class=\"problem-buttons\">\n\n<!-- Add Problem Link inside href -->\n<a href=\"https://bit.ly/3M3M5WI\" target=\"_blank\" rel=\"noopener\">\n<span>Solve Problem</span>\n<img src=\"https://static.takeuforward.org/wp/uploads/2023/04/Group-11-5.png\" alt=\"code-studio\">\n</a>\n</div>\n</div>\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\nyourself first. </em></p>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<div class=\"horizontal_navbar_dsa_article\">\n<div class=\"grid_container_three\">\n<a href=\"#brute-force-approach\" class=\"three-boxes box-a\">\nBrute Force Approach:\n</a>\n<a href=\"#better-approach\" class=\"three-boxes box-b\">\nBetter Approach:\n</a>\n<a href=\"#optimal-approach\" class=\"three-boxes box-c\">\nOptimal Approach:\n</a>\n<a href=\"#dsa_article_video_explanation\" class=\"three-boxes box-d\">\n<svg width=\"26\" height=\"26\" viewBox=\"0 0 20 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M8 10L13.19 7L8 4V10ZM19.56 2.17C19.69 2.64 19.78 3.27 19.84 4.07C19.91 4.87 19.94 5.56 19.94 6.16L20 7C20 9.19 19.84 10.8 19.56 11.83C19.31 12.73 18.73 13.31 17.83 13.56C17.36 13.69 16.5 13.78 15.18 13.84C13.88 13.91 12.69 13.94 11.59 13.94L10 14C5.81 14 3.2 13.84 2.17 13.56C1.27 13.31 0.69 12.73 0.44 11.83C0.31 11.36 0.22 10.73 0.16 9.93C0.0900001 9.13 0.0599999 8.44 0.0599999 7.84L0 7C0 4.81 0.16 3.2 0.44 2.17C0.69 1.27 1.27 0.69 2.17 0.44C2.64 0.31 3.5 0.22 4.82 0.16C6.12 0.0899998 7.31 0.0599999 8.41 0.0599999L10 0C14.19 0 16.8 0.16 17.83 0.44C18.73 0.69 19.31 1.27 19.56 2.17Z\" fill=\"red\"></path>\n</svg>\n\n</a>\n<div class=\"box-e tooltip\">\n<svg viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M12.842 9.25L11.9577 10.17C11.2502 10.89 10.8081 11.5 10.8081 13H8.84297V12.5C8.84297 11.39 9.28511 10.39 9.99255 9.67L11.2109 8.41C11.5745 8.05 11.7906 7.55 11.7906 7C11.7906 6.46957 11.5836 5.96086 11.2151 5.58579C10.8465 5.21071 10.3467 5 9.82552 5C9.30434 5 8.80451 5.21071 8.43598 5.58579C8.06745 5.96086 7.86041 6.46957 7.86041 7H5.89531C5.89531 5.93913 6.30938 4.92172 7.04644 4.17157C7.7835 3.42143 8.78316 3 9.82552 3C10.8679 3 11.8675 3.42143 12.6046 4.17157C13.3417 4.92172 13.7557 5.93913 13.7557 7C13.7543 7.84324 13.4259 8.65183 12.842 9.25ZM10.8081 17H8.84297V15H10.8081M9.82552 0C8.53521 0 7.25754 0.258658 6.06545 0.761205C4.87337 1.26375 3.79021 2.00035 2.87783 2.92893C1.03519 4.8043 0 7.34784 0 10C0 12.6522 1.03519 15.1957 2.87783 17.0711C3.79021 17.9997 4.87337 18.7362 6.06545 19.2388C7.25754 19.7413 8.53521 20 9.82552 20C12.4314 20 14.9306 18.9464 16.7732 17.0711C18.6158 15.1957 19.651 12.6522 19.651 10C19.651 4.47 15.2296 0 9.82552 0Z\" fill=\"black\"></path>\n</svg>\n<div class=\"bottom\">\n<p>Expand any one approach by clicking the given options in the bar. Clicking one approach on bar,\ncloses all other expands. You can manually expand more than one approach at a time</p>\n<i></i>\n</div>\n\n</div>\n</div>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Approaches Drop-Down -->\n<div class=\"dsa_article_dropdown_approachs \">\n\n<!-- Brute Force Approach Starts from here -->\n<div id=\"brute-force-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nBrute Force Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n<h3><strong>Solution:</strong></h3>\n<p><strong>Observation: How many integers can occur more than floor(N/3) times in the given array:</strong></p>\n<p>If we closely observe, in the given array, there can be a maximum of two integers that can occur more than floor(N/3) times. Let\u2019s understand it using the following scenario:<br>Assume there are 8 elements in the given array. Now, if there is any majority element, it should occur more than floor(8/3) = 2 times. So, the majority of elements should occur at least 3 times. Now, if we imagine there are 3 majority elements, then the total occurrence of them will be 3X3 = 9 i.e. greater than the size of the array. But this should not happen. That is why <strong><em>there can be a maximum of 2 majority elements.</em></strong></p>\n<h3><strong>Naive Approach (Brute-force)</strong>:&nbsp;</h3>\n<ol><li>We will run a loop that will select the elements of the array one by one.</li><li>Now, for each unique element, we will run another loop and count its occurrence in the given array.</li><li>If any element occurs more than the floor of (N/3), we will include it in our answer.&nbsp;</li><li>While traversing if we find any element that is already included in our answer, we will just skip it.</li></ol>\n<p><strong>Note: </strong><em>For a better understanding of intuition, please watch the video at the bottom of the page.</em></p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n\n<!-- Insert C++ code of Brute Force Here -->\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvector&lt;int&gt; majorityElement(vector&lt;int&gt; v) {\n    int n = v.size(); //size of the array\n    vector&lt;int&gt; ls; // list of answers\n\n    for (int i = 0; i &lt; n; i++) {\n        //selected element is v[i]:\n        // Checking if v[i] is not already\n        // a part of the answer:\n        if (ls.size() == 0 || ls[0] != v[i]) {\n            int cnt = 0;\n            for (int j = 0; j &lt; n; j++) {\n                // counting the frequency of v[i]\n                if (v[j] == v[i]) {\n                    cnt++;\n                }\n            }\n\n            // check if frquency is greater than n/3:\n            if (cnt &gt; (n / 3))\n                ls.push_back(v[i]);\n        }\n\n        if (ls.size() == 2) break;\n    }\n\n    return ls;\n}\n\nint main()\n{\n    vector&lt;int&gt; arr = {11, 33, 33, 11, 33, 11};\n    vector&lt;int&gt; ans = majorityElement(arr);\n    cout &lt;&lt; \"The majority elements are: \";\n    for (auto it : ans)\n        cout &lt;&lt; it &lt;&lt; \" \";\n    cout &lt;&lt; \"\\n\";\n    return 0;\n}\n\n\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\n<!-- Insert Java code of Brute Force Here -->\nimport java.util.*;\n\npublic class tUf {\n    public static List&lt;Integer&gt; majorityElement(int []v) {\n        int n = v.length; //size of the array\n        List&lt;Integer&gt; ls = new ArrayList&lt;&gt;(); // list of answers\n\n        for (int i = 0; i &lt; n; i++) {\n            //selected element is v[i]:\n            // Checking if v[i] is not already\n            // a part of the answer:\n            if (ls.size() == 0 || ls.get(0) != v[i]) {\n                int cnt = 0;\n                for (int j = 0; j &lt; n; j++) {\n                    // counting the frequency of v[i]\n                    if (v[j] == v[i]) {\n                        cnt++;\n                    }\n                }\n\n                // check if frquency is greater than n/3:\n                if (cnt &gt; (n / 3))\n                    ls.add(v[i]);\n            }\n\n            if (ls.size() == 2) break;\n        }\n\n        return ls;\n    }\n\n    public static void main(String args[]) {\n        int[] arr = {11, 33, 33, 11, 33, 11};\n        List&lt;Integer&gt; ans = majorityElement(arr);\n        System.out.print(\"The majority elements are: \");\n        for (int i = 0; i &lt; ans.size(); i++) {\n            System.out.print(ans.get(i) + \" \");\n        }\n        System.out.println();\n    }\n}\n\n\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\n<!-- Insert Python code of Brute Force Here -->\nfrom typing import List\n\ndef majorityElement(v: List[int]) -&gt; List[int]:\n    n = len(v) # size of the list\n    ls = [] # list of answers\n\n    for i in range(n):\n        # selected element is v[i]:\n        # Checking if v[i] is not already\n        # a part of the answer:\n        if len(ls) == 0 or ls[0] != v[i]:\n            cnt = 0\n            for j in range(n):\n                # counting the frequency of v[i]\n                if v[j] == v[i]:\n                    cnt += 1\n\n            # check if frquency is greater than n/3:\n            if cnt &gt; (n // 3):\n                ls.append(v[i])\n\n        if len(ls) == 2:\n            break\n\n    return ls\n\n\narr = [11, 33, 33, 11, 33, 11]\nans = majorityElement(arr)\nprint(\"The majority elements are: \", end=\"\")\nfor it in ans:\n    print(it, end=\" \")\nprint()\n\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\n<!-- Insert JavaScript code of Brute Force Here -->\nfunction majorityElement(v) {\n    const n = v.length; // size of the array\n    const ls = []; // list of answers\n\n    for (let i = 0; i &lt; n; i++) {\n        // selected element is v[i]:\n        // checking if v[i] is not already\n        // a part of the answer:\n        if (ls.length == 0 || ls[0] != v[i]) {\n            let cnt = 0;\n            for (let j = 0; j &lt; n; j++) {\n                // counting the frequency of v[i]\n                if (v[j] == v[i]) {\n                    cnt++;\n                }\n            }\n\n            // check if frequency is greater than n/3:\n            if (cnt &gt; Math.floor(n / 3))\n                ls.push(v[i]);\n        }\n\n        if (ls.length == 2) break;\n    }\n\n    return ls;\n}\n\nconst arr = [11, 33, 33, 11, 33, 11];\nconst ans = majorityElement(arr);\nconsole.log(\"The majority elements are: \" + ans.join(\" \"));\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Brute Force Here -->\n<strong>Output:</strong> The majority elements are: 11 33&nbsp;\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n<!-- Insert Time and Space Complexity of Brute Force Here -->\n</p><p><strong>Time Complexity: </strong>O(N<sup>2</sup>), where N = size of the given array.<br><strong>Reason: </strong>For every element of the array the inner loop runs for N times. And there are N elements in the array. So, the total time complexity is O(N<sup>2</sup>).</p>\n<p><strong>Space Complexity:</strong> O(1) as we are using a list that stores a maximum of 2 elements. The space used is so small that it can be considered constant.</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Brute Force Approach Ends here -->\n\n\n<!-- Better Approach Starts from here -->\n\n<div id=\"better-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nBetter Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition For Better Approach Here -->\n<h3><strong>Better Approach (Using Hashing)</strong>:&nbsp;</h3>\n<h3><strong>Intuition:</strong> </h3>\n<p>Use a better data structure to reduce the number of look-up operations and hence the time complexity. Moreover, we have been calculating the count of the same element again and again \u2013 so we have to reduce that also.</p>\n<h3><strong>Approach:</strong>&nbsp;</h3>\n<p>The steps are as follows:</p>\n<ol><li>Use a hashmap and store the elements as &lt;key, value&gt; pairs. (Can also use frequency array based on the size of nums).<br>Here the key will be the element of the array and the value will be the number of times it occurs.&nbsp;</li><li>Traverse the whole array and update the occurrence of each element.&nbsp;</li><li>After that, check the map if the value for any element is greater than the <strong>floor of N/3</strong>.&nbsp;<ol><li>If yes, include it in the list.&nbsp;</li><li>Else iterate forward.</li></ol></li><li>Finally, return the list.</li></ol>\n<h3><strong>Dry Run:</strong>&nbsp;</h3>\n<p>Let\u2019s take the example of arr[] = {10,20,40,40,40}, n=5.</p>\n<p>First, we create an unordered map to store the count of each element.</p>\n<p>Now traverse through the array&nbsp;</p>\n<p>Found 10 at index 0, increase the value of key 10 in the map by 1.</p>\n<p>Found 20 at index 1, increase the value of key 20 in the map by 1.</p>\n<p>Found 40 at index 2, increase the value of key 40 in the map by 1.</p>\n<p>Found 40 at index 3, increase the value of key 40 in the map by 1.</p>\n<p>Found 40 at index 4, increase the value of key 40 in the map by 1.</p>\n<p>Now, Our map will look like this:</p>\n<pre class=\"wp-block-preformatted\">10 -&gt; 1 \n20 -&gt; 1\n40 -&gt; 3\n</pre>\n<p>Now traverse through the map,&nbsp;</p>\n<p>We found that the value of key 40 is greater than the floor(N/3). So, 40 is the answer.</p>\n<p><strong>Note: </strong><em>For a better understanding of intuition, please watch the video at the bottom of the page.</em></p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n\n<!-- Insert C++ Code of Better Approach Here -->\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvector&lt;int&gt; majorityElement(vector&lt;int&gt; v) {\n    int n = v.size(); //size of the array\n    vector&lt;int&gt; ls; // list of answers\n\n    //declaring a map:\n    map&lt;int, int&gt; mpp;\n\n    // least occurrence of the majority element:\n    int mini = int(n / 3) + 1;\n\n    //storing the elements with its occurnce:\n    for (int i = 0; i &lt; n; i++) {\n        mpp[v[i]]++;\n\n        //checking if v[i] is\n        // the majority element:\n        if (mpp[v[i]] == mini) {\n            ls.push_back(v[i]);\n        }\n        if (ls.size() == 2) break;\n    }\n\n    return ls;\n}\n\nint main()\n{\n    vector&lt;int&gt; arr = {11, 33, 33, 11, 33, 11};\n    vector&lt;int&gt; ans = majorityElement(arr);\n    cout &lt;&lt; \"The majority elements are: \";\n    for (auto it : ans)\n        cout &lt;&lt; it &lt;&lt; \" \";\n    cout &lt;&lt; \"\\n\";\n    return 0;\n}\n\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\n<!-- Insert Java Code of Better Approach Here -->\nimport java.util.*;\n\npublic class tUf {\n    public static List&lt;Integer&gt; majorityElement(int []v) {\n        int n = v.length; //size of the array\n        List&lt;Integer&gt; ls = new ArrayList&lt;&gt;(); // list of answers\n\n        //declaring a map:\n        HashMap&lt;Integer, Integer&gt; mpp = new HashMap&lt;&gt;();\n\n        // least occurrence of the majority element:\n        int mini = (int)(n / 3) + 1;\n\n        //storing the elements with its occurnce:\n        for (int i = 0; i &lt; n; i++) {\n            int value = mpp.getOrDefault(v[i], 0);\n            mpp.put(v[i], value + 1);\n\n            //checking if v[i] is\n            // the majority element:\n            if (mpp.get(v[i]) == mini) {\n                ls.add(v[i]);\n            }\n            if (ls.size() == 2) break;\n        }\n\n        return ls;\n    }\n\n    public static void main(String args[]) {\n        int[] arr = {11, 33, 33, 11, 33, 11};\n        List&lt;Integer&gt; ans = majorityElement(arr);\n        System.out.print(\"The majority elements are: \");\n        for (int i = 0; i &lt; ans.size(); i++) {\n            System.out.print(ans.get(i) + \" \");\n        }\n        System.out.println();\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\n<!-- Insert Python Code of Better Approach Here -->\nfrom collections import Counter\n\ndef majorityElement(arr):\n    # Size of the given array\n    n = len(arr)\n\n    # Count the occurrences of each element using Counter\n    counter = Counter(arr)\n\n    # Searching for the majority element\n    for num, count in counter.items():\n        if count &gt; (n // 2):\n            return num\n\n    return -1\n\narr = [2, 2, 1, 1, 1, 2, 2]\nans = majorityElement(arr)\nprint(\"The majority element is:\", ans)\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\n<!-- Insert javascript Code of Better Approach Here -->\nfunction majorityElement(v) {\n    const n = v.length; // size of the array\n    const ls = []; // list of answers\n\n    // declaring a map:\n    const mpp = new Map();\n\n    // least occurrence of the majority element:\n    const mini = Math.floor(n / 3) + 1;\n\n    // storing the elements with its occurrence:\n    for (let i = 0; i &lt; n; i++) {\n        if (mpp.has(v[i])) {\n            mpp.set(v[i], mpp.get(v[i]) + 1);\n        } else {\n            mpp.set(v[i], 1);\n        }\n\n        // checking if v[i] is the majority element:\n        if (mpp.get(v[i]) == mini) {\n            ls.push(v[i]);\n        }\n        if (ls.length == 2) break;\n    }\n\n    return ls;\n}\n\nconst arr = [11, 33, 33, 11, 33, 11];\nconst ans = majorityElement(arr);\nconsole.log(\"The majority elements are: \" + ans.join(\" \"));\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Better Approach Here -->\n<strong>Output:</strong> The majority elements are: 33 11&nbsp;\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Better Approach Here -->\n</p><p><strong>Time Complexity: </strong>O(N*logN), where N = size of the given array.<br><strong>Reason: </strong>We are using a map data structure. Insertion in the map takes logN time. And we are doing it for N elements. So, it results in the first term O(N*logN).<br>If we use unordered_map instead, the first term will be O(N) for the best and average case and for the worst case, it will be O(N<sup>2</sup>).</p>\n<p><strong>Space Complexity:</strong> O(N) as we are using a map data structure. We are also using a list that stores a maximum of 2 elements. That space used is so small that it can be considered constant.</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Better Approach Ends from here -->\n\n\n<!-- Optimal Approach Starts from here -->\n\n<div id=\"optimal-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nOptimal Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm of Better Approach Here -->\n<h3><strong>Optimal Approach (Extended Boyer Moore\u2019s Voting Algorithm)</strong>:&nbsp;</h3>\n<h3><strong>Approach:</strong>&nbsp;</h3>\n<ol><li>Initialize 4 variables:<br><strong>cnt1 &amp; cnt2</strong> \u2013&nbsp; for tracking the counts of elements<br><strong>el1 &amp; el2</strong> \u2013 for storing the majority of elements.</li><li>Traverse through the given array.<ol><li>If <strong>cnt1</strong> is 0 and the current element is not el2 then store the current element of the array as <strong>el1 along with increasing the cnt1 value by 1</strong>.</li><li>If <strong>cnt2</strong> is 0 and the current element is not el1 then store the current element of the array as <strong>el2 along with increasing the cnt2 value by 1</strong>.</li><li>If the current element and <strong>el1</strong> are the same increase the <strong>cnt1</strong> by 1.</li><li>If the current element and <strong>el2</strong> are the same increase the <strong>cnt2</strong> by 1.</li><li>Other than all the above cases: decrease cnt1 and cnt2 by 1.</li></ol></li><li>The integers present in <strong>el1 &amp; el2</strong> should be the result we are expecting. So, using another loop, we will manually check their counts if they are greater than the floor(N/3).</li></ol>\n<p><strong>Intuition: </strong>If the array contains the majority of elements, their occurrence must be greater than the floor(N/3). Now, we can say that the count of minority elements and majority elements is equal up to a certain point in the array. So when we traverse through the array we try to keep track of the counts of elements and the elements themselves for which we are tracking the counts.&nbsp;</p>\n<p>After traversing the whole array, we will check the elements stored in the variables. Then we need to check if the stored elements are the majority elements or not by manually checking their counts.</p>\n<p><strong>Note: </strong>This intuition is simply the logic of cancellation i.e. a variation of Moore\u2019s Voting Algorithm that we used in the problem <a href=\"https://takeuforward.org/data-structure/find-the-majority-element-that-occurs-more-than-n-2-times/\">Majority Element (&gt; N/2)</a>.</p>\n<p>The projection will be the following:</p>\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/04/Screenshot-2023-04-20-224857.png\" alt=\"\" class=\"wp-image-8325\"></figure>\n<p><strong>Edge Case: </strong>Why we are adding extra checks like el2 != v[i] and el1 != v[i] in the first if statements? Let\u2019s understand it using an example:<br>Assume the given array is: {2, 1, 1, 3, 1, 4, 5, 6}. Now apply the algorithm without the checks:</p>\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/04/Screenshot-2023-04-20-225002.png\" alt=\"\" class=\"wp-image-8326\"></figure>\n<p>We can clearly notice that in iteration 5, el1 and el2 both are set to 1 as cnt1 becomes 0 in iteration 4. But this is incorrect. So, to avoid this edge case, we are checking if the current element is already included in our elements, and if it is, we will not again include it in another variable.</p>\n<p><strong>Note: </strong><em>For a better understanding of intuition, please watch the video at the bottom of the page.</em></p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n\n<!-- Insert C++ code of Optimal Approach Here-->\nint #include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvector&lt;int&gt; majorityElement(vector&lt;int&gt; v) {\n    int n = v.size(); //size of the array\n\n    int cnt1 = 0, cnt2 = 0; // counts\n    int el1 = INT_MIN; // element 1\n    int el2 = INT_MIN; // element 2\n\n    // applying the Extended Boyer Moore's Voting Algorithm:\n    for (int i = 0; i &lt; n; i++) {\n        if (cnt1 == 0 &amp;&amp; el2 != v[i]) {\n            cnt1 = 1;\n            el1 = v[i];\n        }\n        else if (cnt2 == 0 &amp;&amp; el1 != v[i]) {\n            cnt2 = 1;\n            el2 = v[i];\n        }\n        else if (v[i] == el1) cnt1++;\n        else if (v[i] == el2) cnt2++;\n        else {\n            cnt1--, cnt2--;\n        }\n    }\n\n    vector&lt;int&gt; ls; // list of answers\n\n    // Manually check if the stored elements in\n    // el1 and el2 are the majority elements:\n    cnt1 = 0, cnt2 = 0;\n    for (int i = 0; i &lt; n; i++) {\n        if (v[i] == el1) cnt1++;\n        if (v[i] == el2) cnt2++;\n    }\n\n    int mini = int(n / 3) + 1;\n    if (cnt1 &gt;= mini) ls.push_back(el1);\n    if (cnt2 &gt;= mini) ls.push_back(el2);\n\n    // Uncomment the following line\n    // if it is told to sort the answer array:\n    // sort(ls.begin(), ls.end()); //TC --&gt; O(2*log2) ~ O(1);\n\n    return ls;\n}\n\nint main()\n{\n    vector&lt;int&gt; arr = {11, 33, 33, 11, 33, 11};\n    vector&lt;int&gt; ans = majorityElement(arr);\n    cout &lt;&lt; \"The majority elements are: \";\n    for (auto it : ans)\n        cout &lt;&lt; it &lt;&lt; \" \";\n    cout &lt;&lt; \"\\n\";\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\n<!-- Insert Java code of Optimal Approach Here -->\nimport java.util.*;\n\npublic class tUf {\n    public static List&lt;Integer&gt; majorityElement(int []v) {\n        int n = v.length; //size of the array\n\n        int cnt1 = 0, cnt2 = 0; // counts\n        int el1 = Integer.MIN_VALUE; // element 1\n        int el2 = Integer.MIN_VALUE; // element 2\n\n        // applying the Extended Boyer Moore's Voting Algorithm:\n        for (int i = 0; i &lt; n; i++) {\n            if (cnt1 == 0 &amp;&amp; el2 != v[i]) {\n                cnt1 = 1;\n                el1 = v[i];\n            } else if (cnt2 == 0 &amp;&amp; el1 != v[i]) {\n                cnt2 = 1;\n                el2 = v[i];\n            } else if (v[i] == el1) cnt1++;\n            else if (v[i] == el2) cnt2++;\n            else {\n                cnt1--; cnt2--;\n            }\n        }\n\n        List&lt;Integer&gt; ls = new ArrayList&lt;&gt;(); // list of answers\n\n        // Manually check if the stored elements in\n        // el1 and el2 are the majority elements:\n        cnt1 = 0; cnt2 = 0;\n        for (int i = 0; i &lt; n; i++) {\n            if (v[i] == el1) cnt1++;\n            if (v[i] == el2) cnt2++;\n        }\n\n        int mini = (int)(n / 3) + 1;\n        if (cnt1 &gt;= mini) ls.add(el1);\n        if (cnt2 &gt;= mini) ls.add(el2);\n\n        // Uncomment the following line\n        // if it is told to sort the answer array:\n        //Collections.sort(ls); //TC --&gt; O(2*log2) ~ O(1);\n\n        return ls;\n    }\n\n    public static void main(String args[]) {\n        int[] arr = {11, 33, 33, 11, 33, 11};\n        List&lt;Integer&gt; ans = majorityElement(arr);\n        System.out.print(\"The majority elements are: \");\n        for (int i = 0; i &lt; ans.size(); i++) {\n            System.out.print(ans.get(i) + \" \");\n        }\n        System.out.println();\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\n<!-- Insert Python code of Optimal Approach Here -->\nfrom typing import List\n\ndef majorityElement(v: List[int]) -&gt; List[int]:\n    n = len(v) # size of the array\n\n    cnt1, cnt2 = 0, 0 # counts\n    el1, el2 = float('-inf'), float('-inf') # element 1 and element 2\n\n    # applying the Extended Boyer Moore\u2019s Voting Algorithm:\n    for i in range(n):\n        if cnt1 == 0 and el2 != v[i]:\n            cnt1 = 1\n            el1 = v[i]\n        elif cnt2 == 0 and el1 != v[i]:\n            cnt2 = 1\n            el2 = v[i]\n        elif v[i] == el1:\n            cnt1 += 1\n        elif v[i] == el2:\n            cnt2 += 1\n        else:\n            cnt1 -= 1\n            cnt2 -= 1\n\n    ls = [] # list of answers\n\n    # Manually check if the stored elements in\n    # el1 and el2 are the majority elements:\n    cnt1, cnt2 = 0, 0\n    for i in range(n):\n        if v[i] == el1:\n            cnt1 += 1\n        if v[i] == el2:\n            cnt2 += 1\n\n    mini = int(n / 3) + 1\n    if cnt1 &gt;= mini:\n        ls.append(el1)\n    if cnt2 &gt;= mini:\n        ls.append(el2)\n\n    # Uncomment the following line\n    # if it is told to sort the answer array:\n    #ls.sort() #TC --&gt; O(2*log2) ~ O(1);\n\n    return ls\n\narr = [11, 33, 33, 11, 33, 11]\nans = majorityElement(arr)\nprint(\"The majority elements are: \", end=\"\")\nfor it in ans:\n    print(it, end=\" \")\nprint()\n\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\n<!-- Insert Python code of Optimal Approach Here -->\nfunction majorityElement(v) {\n    let n = v.length; // size of the array\n\n    let cnt1 = 0, cnt2 = 0; // counts\n    let el1 = -Infinity; // element 1\n    let el2 = -Infinity; // element 2\n\n    // applying the Extended Boyer Moore's Voting Algorithm:\n    for (let i = 0; i &lt; n; i++) {\n        if (cnt1 === 0 &amp;&amp; el2 !== v[i]) {\n            cnt1 = 1;\n            el1 = v[i];\n        }\n        else if (cnt2 === 0 &amp;&amp; el1 !== v[i]) {\n            cnt2 = 1;\n            el2 = v[i];\n        }\n        else if (v[i] === el1) cnt1++;\n        else if (v[i] === el2) cnt2++;\n        else {\n            cnt1--, cnt2--;\n        }\n    }\n\n    let ls = []; // list of answers\n\n    // Manually check if the stored elements in\n    // el1 and el2 are the majority elements:\n    cnt1 = 0, cnt2 = 0;\n    for (let i = 0; i &lt; n; i++) {\n        if (v[i] === el1) cnt1++;\n        if (v[i] === el2) cnt2++;\n    }\n\n    let mini = Math.floor(n / 3) + 1;\n    if (cnt1 &gt;= mini) ls.push(el1);\n    if (cnt2 &gt;= mini) ls.push(el2);\n\n    // Uncomment the following line\n    // if it is told to sort the answer array:\n    // ls.sort(); // TC --&gt; O(2*log2) ~ O(1);\n\n    return ls;\n}\n\nlet arr = [11, 33, 33, 11, 33, 11];\nlet ans = majorityElement(arr);\nconsole.log(\"The majority elements are: \" + ans.join(\" \"));\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Optimal Apporach Here -->\n<strong>Output:<strong> The majority elements are: 11 33&nbsp;\n</strong></strong></p><strong><strong>\n</strong></strong></div><strong><strong>\n</strong></strong></details><strong><strong>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Optimal Approach-->\n</p><p><strong>Time Complexity: </strong>O(N) + O(N), where N = size of the given array.<br><strong>Reason: </strong>The first O(N) is to calculate the counts and find the expected majority elements. The second one is to check if the calculated elements are the majority ones or not.</p>\n<p><strong>Space Complexity:</strong> O(1) as we are only using a list that stores a maximum of 2 elements. The space used is so small that it can be considered constant.</p>\n<p></p>\n</details>\n</strong></strong></div><strong><strong>\n</strong></strong></details><strong><strong>\n</strong></strong></div><strong><strong>\n<!-- Optimal Approach Starts from here -->\n</strong></strong></div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n<details>\n<summary class=\"main-summary\">\n<span>\nVideo Explanation\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"yt-video-wrapper\">\n\n<!-- Insert iframe embed Link of Youtube Video-->\n<iframe class=\"lazy-loaded\" loading=\"lazy\" title=\"Majority Element II\" width=\"810\" height=\"456\" data-lazy-type=\"iframe\" data-src=\"https://www.youtube.com/embed/vwZj1K0e9U8\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\" src=\"https://www.youtube.com/embed/vwZj1K0e9U8?feature=oembed\"></iframe><noscript>\n<iframe loading=\"lazy\" title=\"Majority Element II\" width=\"810\" height=\"456\" src=\"https://www.youtube.com/embed/vwZj1K0e9U8\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe></noscript>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script>\n\nconst codeSections = document.querySelectorAll('.code-section');\n\n// Get last selected language from localStorage or set default value\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\n// Update last selected language for all sections and store in localStorage\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\n// Handle copy button click event\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\n// Set initial state of the tabs\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<script>\nconst codeSections = document.querySelectorAll('.code-section');\n\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script src=\"https://takeuforward.org/UXApproachDropDowns/3ApproachJSScript.js\"></script>\n<!-- /wp:html -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;<strong><a href=\"https://www.linkedin.com/in/utkarsh-shrivastava-36260a171/\" target=\"_blank\" rel=\"noreferrer noopener\">Utkarsh Shrivastava</a></strong><em><em>,&nbsp;<strong><em><a href=\"https://www.linkedin.com/in/imsudip/\" target=\"_blank\" rel=\"noreferrer noopener\">Sudip Ghosh</a></em> and <strong><a href=\"https://www.linkedin.com/in/kriti39/\" target=\"_blank\" rel=\"noopener\" title=\"\">KRITIDIPTA GHOSH</a></strong></strong></em></em></em> <em>for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->",
    "category_tag": "data-structure",
    "likes": 276,
    "preview": "Problem Statement: Given an array of N integers. Find the elements that appear more than N/3 times in the array. If no such element exists, return an empty vector. Pre-requisite: Majority Element(>..."
}