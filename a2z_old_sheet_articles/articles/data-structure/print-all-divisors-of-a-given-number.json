{
    "dislikes": 20,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:10:18 GMT+0530 (India Standard Time)",
    "slug": "print-all-divisors-of-a-given-number",
    "aid": "1733",
    "title": "Print all Divisors of a given Number",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/divisors-of-a-number",
    "topics": [
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "maths",
            "topic-title": "Maths"
        }
    ],
    "content": "<p><strong>Problem Statement: </strong>Given an integer N, return all divisors of N.</p>\n<p>\nA divisor of an integer N is a positive integer that divides N without leaving a remainder. In other words, if N is divisible by another integer without any remainder, then that integer is considered a divisor of N.\n</p>\n\n\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n    <details class=\"article_example_details\">\n        <summary class=\"article_example_summary\">\n            <span><strong>\n                    Examples\n                </strong>\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"atricle_example_content\">\n            <pre class=\"wp-block-preformatted\">\n                <span><strong>Example 1:</strong></span>\n                <span><strong>Input:</strong>N = 36</span>\n               \n                <span><strong>Output:</strong>[1, 2, 3, 4, 6, 9, 12, 18, 36]</span>\n                \n                <span><strong>Explanation: </strong>The divisors of 36 are 1, 2, 3, 4, 6, 9, 12, 18, 36.</span>\n                                        \n                <span><strong>Example 2:</strong></span>\n                <span><strong>Input:</strong>N =12</span>                \n                \n                <span><strong>Output: </strong>[1, 2, 3, 4, 6, 12]</span>\n                \n                <span><strong>Explanation: </strong>The divisors of 12 are 1, 2, 3, 4, 6, 12.</span>                            \n\n            </pre>\n        </div>\n    </details>\n</div>\n\n\n<!-- This is Practice Section-->\n<div class=\"practice\">\n    <span><strong>Practice: </strong></span>\n    <div class=\"problem-buttons\">\n\n         \n        <a href=\"https://www.codingninjas.com/studio/problems/sum-of-all-divisors_8360720?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf\" target=\"_blank\" rel=\"noopener\">\n            <span>Solve Problem</span>\n            <img src=\"https://takeuforward-content-images.s3.ap-south-1.amazonaws.com/content/Group-11-5-pFOq-8ga\" alt=\"code-studio\">\n        </a>\n    </div>\n    \n</div>\n\n\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out yourself first. </em></p>\n\n\n<!-- This is Approaches Drop-Down -->\n<div class=\"dsa_article_dropdown_approachs \">\n\n    <!-- Approach - 1 Starts from here -->\n    <div id=\"brute-force-approach\">\n        <details>\n            <summary class=\"main-summary\">\n                <span>\n                    <!-- Change Name Here -->\n                   Brute Force Approach \n                </span>\n                <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                    <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                    </path>\n                </svg>\n            </summary>\n            <div class=\"common-drops\">\n                <details class=\"secondary-details\" open=\"\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Algorithm / Intuition\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <div class=\"approach-algorithm\">\n                        \n                        <p>A brute force approach would be to iterate from 1 to n checking each value if it divides n without leaving a remainder. For each divisor found, store it in an array and a count of divisors is maintained. After iterating through all possible values, the size of the array is updated with the count of divisors and the array is returned.</p>\n                        \n                        <p><strong>Algorithm:</strong></p>\n                        <p><strong>Step 1:</strong>Initialise an array to store the divisors.</p>\n                        \n                        <p><strong>Step 2:</strong>Iterate from 1 to n using a loop variable \u2018i\u2019. For each value of \u2018i\u2019:\n                        <ol><li>Check if \u2018i\u2019 is a divisor of \u2018n\u2019 by checking if \u2018n\u2019 is divisible by \u2018i\u2019 without a remainder (\u2018n\u2019%i == 0).</li><li>If i is a divisor, store it in the array of divisors and increment the count of divisors.</li></ol></p>\n                                                                    \n                        <p><strong>Step 3:</strong>After the loop, return the array of divisors.</p>\n                        \n                    </div>\n                </details>\n                <details class=\"code-section secondary-details\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Code\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <div class=\"code-tabs\">\n                        <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n                        <button class=\"code-tab\" data-lang=\"java\">Java</button>\n                        <button class=\"code-tab\" data-lang=\"python\">Python</button>\n                        <button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n                        <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\"\n                            xmlns=\"http://www.w3.org/2000/svg\">\n                            <path\n                                d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n                            </path>\n                        </svg>\n                    </div>\n                    <div class=\"code-content\">\n                        <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n                            <pre class=\"wp-block-code\">\n                                <code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h&gt; \nusing namespace std;\n\nint* printDivisors(int n, int &amp;size) {\n    // Allocate memory for\n    // the array of divisors\n    int *divisors = new int[n]; \n     // Initialize the count of divisors\n    int count = 0;\n\n    for(int i = 1; i &lt;= n; i++) {\n        if(n % i == 0) {\n            // Add the divisor to the array\n            divisors[count++] = i; \n        }\n    }\n    // Update the size parameter\n    // with the count of divisors\n    size = count; \n    // Return the array of divisors\n    return divisors; \n}\n\nint main() {\n    int number = 12;\n    int size;\n    int *divisors = printDivisors(number, size);\n\n    cout &lt;&lt; &quot;Divisors of &quot; &lt;&lt; number &lt;&lt; &quot; are: &quot;;\n    for (int i = 0; i &lt; size; i++) {\n        cout &lt;&lt; divisors[i] &lt;&lt; &quot; &quot;;\n    }\n    cout &lt;&lt; std::endl;\n\n    delete[] divisors;\n\n    return 0;\n}\n                                </code>\n                            </pre>\n                        </div>\n                        <div class=\"code-block \" data-lang=\"java\">\n                            <pre class=\"wp-block-code\">\n                                <code lang=\"java\" class=\"language-java\">\npublic class Main {\n    public static int[] printDivisors(int n, int[] size) {\n        // Allocate memory for\n        // the array of divisors\n        int[] divisors = new int[n];\n        // Initialize the count of divisors\n        int count = 0;\n\n        for (int i = 1; i &lt;= n; i++) {\n            if (n % i == 0) {\n                // Add the divisor to the array\n                divisors[count++] = i;\n            }\n        }\n        // Update the size parameter\n        // with the count of divisors\n        size[0] = count;\n        // Return the array of divisors\n        return divisors;\n    }\n\n    public static void main(String[] args) {\n        int number = 12;\n        int[] size = new int[1];\n        int[] divisors = printDivisors(number, size);\n\n        System.out.print(&quot;Divisors of &quot; + number + &quot; are: &quot;);\n        for (int i = 0; i &lt; size[0]; i++) {\n            System.out.print(divisors[i] + &quot; &quot;);\n        }\n        System.out.println();\n\n        // Free dynamically allocated memory\n        divisors = null;\n    }\n}\n                                </code>\n                            </pre>\n                        </div>\n                        <div class=\"code-block\" data-lang=\"python\">\n                            <pre class=\"wp-block-code\">\n                                <code lang=\"python\" class=\"language-python\">\ndef print_divisors(n):\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\ndef main():\n    number = 12\n    divisors = print_divisors(number)\n\n    print(f\"Divisors of {number} are: \", end=\"\")\n    for d in divisors:\n        print(d, end=\" \")\n    print()\n\nif __name__ == \"__main__\":\n    main()\n\n                                </code>\n                            </pre>\n                        </div>\n                         <div class=\"code-block\" data-lang=\"javascript\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"javascript\" class=\"language-javascript\">\nfunction printDivisors(n) {\n    const divisors = [];\n\n    for (let i = 1; i &lt;= n; i++) {\n        if (n % i === 0) {\n            divisors.push(i);\n        }\n    }\n\n    return divisors;\n}\n\n// Main code\nconst number = 12;\nconst divisors = printDivisors(number);\n\nconsole.log(`Divisors of ${number} are: ${divisors.join(&quot; &quot;)}`);\n                            </code>\n                        </pre>\n                        </div>\n                        <p>\n                           <strong>Output: </strong>Divisors of 12 are: 1 2 3 4 6 12 </p>\n\n\n                    </div>\n                </details>\n                <details class=\"secondary-details\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Complexity Analysis\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <p>\n                        <p><strong>Time Complexity: O(N)</strong> where N is the input number. The algorithm iterates through each number from 1 to n once to check if it is a divisor.</p>\n\n                        <p><strong>Space Complexity : O(N)</strong> where N is the input number. The algorithm iterates through each number from 1 to n once to check if it is a divisor.</p>\n\n                    </p>\n                </details>\n            </div>\n        </details>\n    </div>\n    <!-- Approach - 1 Ends here -->\n\n\n    <!-- Approach - 2 Starts from here -->\n\n    <div id=\"optimal-approach\">\n        <details>\n            <summary class=\"main-summary\">\n                <span>\n                    Optimal Approach \n                </span>\n                <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                    <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                    </path>\n                </svg>\n            </summary>\n            <div class=\"common-drops\">\n                <details class=\"secondary-details\" open=\"\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Algorithm / Intuition\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <div class=\"approach-algorithm\">\n                        \n                        <p>We can optimise the previous approach by using the property that for any non-negative integer n, if d is a divisor of n then n/d is also a divisor of n.</p>\n                        <p>This property is symmetric about the square root of n by traversing just the first half we can avoid redundant iteration and computations improving the efficiency of the algorithm.</p>\n                        <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/print-all-divisors-image1-fh-zLEup\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n                        \n                        <p><strong>Algorithm</strong></p>\n                        <p><strong>Step 1: </strong>\n                        Initialise an array to store the divisors.</p>\n                                                                     \n                        <p><strong>Step 2: </strong>Iterate from 1 to square root of n using a loop variable \u2018i\u2019. For each value of \u2018i\u2019:\n                        <ol><li>Check if \u2018i\u2019 is a divisor of \u2018n\u2019 by checking if \u2018n\u2019 is divisible by \u2018i\u2019 without a remainder (\u2018n\u2019%i == 0).</li><li>If i is a divisor, add it to the vectors of divisors.</li><li>If i is different from n/i add the counterpart divisor n/i to the vector of divisors.</li></ol></p>                  \n\n                                          \n                        <p><strong>Step 3: </strong>After the loop, return the array of divisors.</p>\n                        \n                        \n                    </div>\n                </details>\n                <details class=\"code-section secondary-details\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Code\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <div class=\"code-tabs\">\n                        <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n                        <button class=\"code-tab\" data-lang=\"java\">Java</button>\n                        <button class=\"code-tab\" data-lang=\"python\">Python</button>\n                        <button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n                        <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\"\n                            xmlns=\"http://www.w3.org/2000/svg\">\n                            <path\n                                d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n                            </path>\n                        </svg>\n                    </div>\n                    <div class=\"code-content\">\n                        <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n                            <pre class=\"wp-block-code\">\n                                <code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;cmath&gt;\n\nusing namespace std;\n\nvector&lt;int&gt; findDivisors(int n) {\n    // Initialize an empty\n    // vector to store the divisors\n    vector&lt;int&gt; divisors; \n\n    // Iterate up to the square\n    // root of n to find divisors\n    // Calculate the square root of n\n    int sqrtN = sqrt(n); \n    \n    // Loop from 1 to the\n    // square root of n\n    for (int i = 1; i &lt;= sqrtN; ++i) { \n        // Check if i divides n\n        // without leaving a remainder\n        if (n % i == 0) { \n            // Add divisor i to the list\n            divisors.push_back(i); \n\n            // Add the counterpart divisor\n            // if it's different from i\n            if (i != n / i) {\n                // Add the counterpart\n                // divisor to the list\n                divisors.push_back(n / i); \n            }\n        }\n    }\n    \n    // Return the list of divisors\n    return divisors; \n}\n\n\nint main() {\n    int number = 12;\n    vector&lt;int&gt; divisors = findDivisors(number);\n\n    cout &lt;&lt; &quot;Divisors of &quot; &lt;&lt; number &lt;&lt; &quot; are: &quot;;\n    for (int divisor : divisors) {\n        cout &lt;&lt; divisor &lt;&lt; &quot; &quot;;\n    }\n    cout &lt;&lt; endl;\n\n    return 0;\n}\n                                </code>\n                            </pre>\n                        </div>\n                        <div class=\"code-block \" data-lang=\"java\">\n                            <pre class=\"wp-block-code\">\n                                <code lang=\"java\" class=\"language-java\">\nimport java.util.ArrayList;\n\npublic class Main {\n    public static ArrayList&lt;Integer&gt; findDivisors(int n) {\n        // Initialize an empty\n        // ArrayList to store the divisors\n        ArrayList&lt;Integer&gt; divisors = new ArrayList&lt;&gt;();\n\n        // Iterate up to the square\n        // root of n to find divisors\n        // Calculate the square root of n\n        int sqrtN = (int) Math.sqrt(n);\n\n        // Loop from 1 to the\n        // square root of n\n        for (int i = 1; i &lt;= sqrtN; ++i) {\n            // Check if i divides n\n            // without leaving a remainder\n            if (n % i == 0) {\n                // Add divisor i to the list\n                divisors.add(i);\n\n                // Add the counterpart divisor\n                // if it's different from i\n                if (i != n / i) {\n                    // Add the counterpart\n                    // divisor to the list\n                    divisors.add(n / i);\n                }\n            }\n        }\n\n        // Return the list of divisors\n        return divisors;\n    }\n\n    public static void main(String[] args) {\n        int number = 12;\n        ArrayList&lt;Integer&gt; divisors = findDivisors(number);\n\n        System.out.print(&quot;Divisors of &quot; + number + &quot; are: &quot;);\n        for (int divisor : divisors) {\n            System.out.print(divisor + &quot; &quot;);\n        }\n        System.out.println();\n    }\n}\n                                </code>\n                            </pre>\n                        </div>\n                        <div class=\"code-block\" data-lang=\"python\">\n                            <pre class=\"wp-block-code\">\n                                <code lang=\"python\" class=\"language-python\">\n                     \nimport math\n\ndef findDivisors(n):\n    # Initialize an empty\n    # list to store the divisors\n    divisors = [] \n\n    # Iterate up to the square\n    # root of n to find divisors\n    # Calculate the square root of n\n    sqrtN = int(math.sqrt(n)) \n    \n    # Loop from 1 to the\n    # square root of n\n    for i in range(1, sqrtN + 1): \n        # Check if i divides n\n        # without leaving a remainder\n        if n % i == 0: \n            # Add divisor i to the list\n            divisors.append(i) \n\n            # Add the counterpart divisor\n            # if it's different from i\n            if i != n // i:\n                # Add the counterpart\n                # divisor to the list\n                divisors.append(n // i) \n    \n    # Return the list of divisors\n    return divisors \n\nif __name__ == &quot;__main__&quot;:\n    number = 12\n    divisors = findDivisors(number)\n\n    print(&quot;Divisors of&quot;, number, &quot;are:&quot;, end=&quot; &quot;)\n    for divisor in divisors:\n        print(divisor, end=&quot; &quot;)\n    print()\n\n                                </code>\n                            </pre>\n                        </div>\n                         <div class=\"code-block\" data-lang=\"javascript\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"javascript\" class=\"language-javascript\">\nfunction findDivisors(n) {\n    // Initialize an empty\n    // array to store the divisors\n    let divisors = [];\n\n    // Iterate up to the square\n    // root of n to find divisors\n    // Calculate the square root of n\n    let sqrtN = Math.sqrt(n);\n\n    // Loop from 1 to the\n    // square root of n\n    for (let i = 1; i &lt;= sqrtN; ++i) {\n        // Check if i divides n\n        // without leaving a remainder\n        if (n % i === 0) {\n            // Add divisor i to the array\n            divisors.push(i);\n\n            // Add the counterpart divisor\n            // if it's different from i\n            if (i !== n / i) {\n                // Add the counterpart\n                // divisor to the array\n                divisors.push(n / i);\n            }\n        }\n    }\n\n    // Return the array of divisors\n    return divisors;\n}\n\nlet number = 12;\nlet divisors = findDivisors(number);\n\nconsole.log(&quot;Divisors of &quot; + number + &quot; are: &quot;);\nfor (let divisor of divisors) {\n    console.log(divisor + &quot; &quot;);\n}\nconsole.log();\n\n                            </code>\n                        </pre>\n                        </div>\n                        <p>\n                             <strong>Output: </strong>Divisors of 12 are: 1 2 3 4 6 12 </p>\n\n                                               \n                    </div>\n                </details>\n                <details class=\"secondary-details\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Complexity Analysis\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <p>\n                        <p><strong>Time Complexity: O(sqrt(N))</strong> where N is the input number. The algorithm iterates through each number from 1 to the square root of N once to check if it is a divisor.</p>\n                        <p><strong>Space Complexity : O(2*sqrt(N))</strong>where N is the input number. This approach allocates memory for an array to hold all the divisors. The size of this array could go to be 2*(sqrt(N)).\n\n</p>\n\n\n                    </p>\n                </details>\n            </div>\n        </details>\n    </div>\n</div>\n\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n    <details>\n        <summary class=\"main-summary\">\n            <span>\n                Video Explanation\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"yt-video-wrapper\">\n          <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Ae_Ag_saG9s?si=X5mIgcJXZw5rSR2o\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n        </div>\n    </details>\n</div>\n\n<script src=\"https://takeuforward.org/UXApproachDropDowns/2ApproachJSScript.js\"></script>\n\n<blockquote class=\"wp-block-quote\">\n    Special thanks to <strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268\">Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,<strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\"> please check out this article</a></strong>\n</blockquote>\n\n\n<script>\n\n    const codeSections = document.querySelectorAll('.code-section');\n\n    // Get last selected language from localStorage or set default value\n    let lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp';\n\n    codeSections.forEach((section, sectionIndex) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n        const copyBtn = section.querySelector('.copy-btn');\n\n        codeTabs.forEach((tab) => {\n            tab.addEventListener('click', () => {\n                codeTabs.forEach((t) => {\n                    t.classList.remove('dsa_article_code_active');\n                });\n                tab.classList.add('dsa_article_code_active');\n\n                const lang = tab.dataset.lang;\n                const activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                codeBlocks.forEach((block) => {\n                    if (block === activeBlock) {\n                        block.classList.add('dsa_article_code_active');\n                    } else {\n                        block.classList.remove('dsa_article_code_active');\n                    }\n                });\n\n                // Update last selected language for all sections and store in localStorage\n                lastSelectedLanguage = lang;\n                localStorage.setItem('lastSelectedLanguage', lang);\n                codeSections.forEach((otherSection, otherIndex) => {\n                    if (otherIndex !== sectionIndex) {\n                        const otherTabs = otherSection.querySelectorAll('.code-tab');\n                        otherTabs.forEach((otherTab) => {\n                            if (otherTab.dataset.lang === lang) {\n                                otherTab.classList.add('dsa_article_code_active');\n                            } else {\n                                otherTab.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                        const otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                        const otherCodeBlocks = otherSection.querySelectorAll('.code-block');\n                        otherCodeBlocks.forEach((block) => {\n                            if (block === otherActiveBlock) {\n                                block.classList.add('dsa_article_code_active');\n                            } else {\n                                block.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                    }\n                });\n            });\n        });\n\n        // Handle copy button click event\n        copyBtn.addEventListener('click', () => {\n            const activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\n            navigator.clipboard.writeText(activeBlock.innerText);\n            copyBtn.classList.add('dsa_article_code_active');\n            setTimeout(() => {\n                copyBtn.classList.remove('dsa_article_code_active');\n            }, 1000);\n        });\n    });\n\n    // Set initial state of the tabs\n    codeSections.forEach((section) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n\n        codeTabs.forEach((tab) => {\n            if (tab.dataset.lang === lastSelectedLanguage) {\n                tab.classList.add('dsa_article_code_active');\n            } else {\n                tab.classList.remove('dsa_article_code_active');\n            }\n        });\n\n        codeBlocks.forEach((block) => {\n            if (block.dataset.lang === lastSelectedLanguage) {\n                block.classList.add('dsa_article_code_active');\n            } else {\n                block.classList.remove('dsa_article_code_active');\n            }\n        });\n    });\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>",
    "category_tag": "data-structure",
    "likes": 249,
    "preview": "Problem Statement: Given an integer N, return all divisors of N. A divisor of an integer N is a positive integer that divides N without leaving a remainder. In other words, if N is divisible by ano..."
}