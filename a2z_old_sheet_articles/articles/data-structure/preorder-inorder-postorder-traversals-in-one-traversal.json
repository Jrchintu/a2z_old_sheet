{
    "dislikes": 4,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:09:22 GMT+0530 (India Standard Time)",
    "slug": "preorder-inorder-postorder-traversals-in-one-traversal",
    "aid": "1470",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/pre,-post,-inorder-in-one-traversal",
    "title": "Preorder Inorder Postorder Traversals in One Traversal",
    "topics": [
        {
            "topic-id": "binary-tree",
            "topic-title": "Binary Tree"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "recursion",
            "topic-title": "Recursion"
        }
    ],
    "likes": 93,
    "category_tag": "data-structure",
    "preview": "Problem Statement: Given the root of a Binary Tree, return the preorder, inorder and postorder traversal sequence of the given tree by making just one traversal. Examples Example 1: Input: Binary T...",
    "content": "<p><strong>Problem Statement: </strong>Given the root of a Binary Tree, return the preorder, inorder and postorder traversal sequence of the given tree by making just one traversal. </p>\n\n<div id=\"article_examples\">\n    <details class=\"article_example_details\">\n        <summary class=\"article_example_summary\">\n            <span><strong>\n                    Examples\n                </strong>\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"atricle_example_content\">\n            <pre class=\"wp-block-preformatted\">\n                <span><strong>Example 1:</strong></span>\n\t\t\t\t<span><strong>Input:</strong> Binary Tree: 1 2 3 4 5 6 7 -1 -1 8 -1 -1 -1 9 10</span>\n\t\t\t\t<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/preorder-post-binarytree-image1-3G6JAHpq\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n\t\t\t\t<span><strong>Output:</strong>Preorder: [1, 2, 4, 5, 8, 3, 6, 7, 9, 10]Inorder: [4, 2, 8, 5, 1, 6, 3, 9, 7, 10]Postorder: [4, 8, 5, 2, 6, 9, 10, 7, 3, 1] </span>\n\t\t\t\t<!--<span><strong>Explanation: </strong>We traverse the binary tree level by level using the following traversal:</span>\n\t\t\t\t<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/level-order-image2-KUQPEVEj\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>-->\n\t\t\t\t<span><strong>Example 2:</strong></span>\n\t\t\t\t<span><strong>Input:</strong>Binary Tree: 4 2 5 3 -1 7 6 -1 9 -1 -1 8 -1 1\n\t\t\t\t</span>\n\t\t\t\t<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/preorder-post-image2-lz-2xjio\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n\t\t\t\t<span><strong>Output :</strong> Preorder: [4, 2, 3, 9, 1, 5, 7, 6, 8]Inorder: [3, 1, 9, 2, 4, 7, 5, 8, 6]Postorder: [1, 9, 3, 2, 7, 8, 6, 5, 4]</span>\n\t\t\t\t\n\t\t\t\t<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/preorder-post-image3-2KCfv_46\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n            </pre>\n        </div>\n    </details>\n</div>\n\n<!-- This is Practice Section-->\n<div class=\"practice\">\n    <span><strong>Practice: </strong></span>\n    <div class=\"problem-buttons\">\n\n        <!-- Add Problem Link inside href -->\n        <a href=\"https://www.codingninjas.com/studio/problems/tree-traversals_981269?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf\" target=\"_blank\" rel=\"noopener\">\n            <span>Solve Problem</span>\n            <img src=\"https://takeuforward-content-images.s3.ap-south-1.amazonaws.com/content/Group-11-5-pFOq-8ga\"\n                alt=\"code-studio\">\n        </a>\n    </div>\n    <!--<div class=\"problem-buttons\">\n         Add Problem Link inside href \n        <a href=\"\" target=\"_blank\" rel=\"noopener\">\n            <span>Solve Problem</span>\n            <img src=\"https://cdn.iconscout.com/icon/free/png-256/free-leetcode-3521542-2944960.png?f=webp\"\n                alt=\"leetcode\">\n        </a>\n    </div>-->\n</div>\n\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\n        yourself first. </em></p>\n\n\n<div id=\"brute-force-approach\">\n    <details>\n        <summary class=\"main-summary\">\n            <span>\n                Optimal Approach \n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                </path>\n            </svg>\n        </summary>\n        <div class=\"common-drops\">\n            <details class=\"secondary-details\" open=\"\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Algorithm / Intuition\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <div class=\"approach-algorithm\">\n                    <!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n                    <p>This approach traverses the binary tree in a single pass while computing the preorder, inorder and postorder traversals at the same time. A stack is used for state management. The stack keeps track of the traversal state for each node. It stores nodes and their state information allowing the algorithm to resume traversal from intermediate points.For each node, it identifies its state: if it's in the pre-order state, it records the node's value and pushes the left child onto the stack. Moving to the in-order state, it records the node's value and pushes the right child onto the stack. Finally, in the post-order state, it stores the node's value and pops the node.As the algorithm executes over each node, it pushes each value in separate arrays for preorder, inorder and postorder traversals depending upon the current order and sequence. Hence, we are able to traverse the tree just once and get all three traversals from it.</p>\n                               \n                    <p><strong>Algorithm:</strong></p>\n                    <p><strong>Step 1:</strong> Initialise a stack that holds a tree node and an integer value representing its state corresponding to pre order, inorder and postorder. Initialise empty arrays to store the three traversals as well.Check if the tree is empty. If so, return empty traversals.</p>\n                    <p><figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/post_order_image4-4ayNSqzr\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure></p>\n                    <p><strong>Step 2:</strong>  Push the root node onto the stack along with its state \u20181\u2019 (preorder) to start the traversal.</p>\n                    <p><figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/preorder-post-binarytree-image5-7brByio-\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure></p>\n                    <p><strong>Step 3:</strong> <p> While the stack isn\u2019t empty, pop the top node of the stack and for each node:\n                    \t<ol><li>If the state is \u20181\u2019 ie. preorder: store the node\u2019s data in the preorder array and move its state to 2 (inorder) for this node. Push this updated state back onto the stack and push its left child as well.</li><li>If the state is \u20182\u2019 ie. inorder: store the node\u2019s data is the inorder array and update its state to 3 (postorder) for this node. Push the updated state back onto the stack and push the right child onto the stack as well.</li><li>If the state is \u20183\u2019 ie. postorder: store the node\u2019s data in the postorder array and pop it.</li></ol></p>\n                    <p><figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/preorder-post-binarytree-image6-RyxeaYpQ\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure></p>\n                    <p><strong>Step 4:</strong> Return the preorder, inorder and postorder array.</p>\n                    \n                </div>\n            </details>\n            <details class=\"code-section secondary-details\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Code\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <div class=\"code-tabs\">\n                    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n                    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n                    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n                    <button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n                    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\"\n                        xmlns=\"http://www.w3.org/2000/svg\">\n                        <path\n                            d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n                        </path>\n                    </svg>\n                </div>\n                <div class=\"code-content\">\n                    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;stack&gt;\n\nusing namespace std;\n\n// Node structure for the binary tree\nstruct Node {\n    int data;\n    Node* left;\n    Node* right;\n    // Constructor to initialize\n    // the node with a value\n    Node(int val) : data(val), left(nullptr), right(nullptr) {}\n};\n\n// Function to get the Preorder,\n// Inorder and Postorder traversal\n// Of Binary Tree in One traversal\nvector&lt;vector&lt;int&gt;&gt; preInPostTraversal(Node* root) {\n    // Vectors to store traversals\n    vector&lt;int&gt; pre, in, post;\n\n    // If the tree is empty,\n    // return empty traversals\n    if (root == NULL) {\n        return {};\n    }\n\n    // Stack to maintain nodes\n    // and their traversal state\n    stack&lt;pair&lt;Node*, int&gt;&gt; st;\n\n    // Start with the root node\n    // and state 1 (preorder)\n    st.push({root, 1});\n\n    while (!st.empty()) {\n        auto it = st.top();\n        st.pop();\n\n        // this is part of pre\n        if (it.second == 1) {\n            // Store the node's data\n            // in the preorder traversal\n            pre.push_back(it.first-&gt;data);\n            // Move to state 2\n            // (inorder) for this node\n            it.second = 2;\n            // Push the updated state\n            // back onto the stack\n            st.push(it); \n\n            // Push left child onto\n            // the stack for processing\n            if (it.first-&gt;left != NULL) {\n                st.push({it.first-&gt;left, 1});\n            }\n        }\n\n        // this is a part of in\n        else if (it.second == 2) {\n            // Store the node's data\n            // in the inorder traversal\n            in.push_back(it.first-&gt;data);\n            // Move to state 3\n            // (postorder) for this node\n            it.second = 3;\n            // Push the updated state\n            // back onto the stack\n            st.push(it); \n\n            // Push right child onto\n            // the stack for processing\n            if (it.first-&gt;right != NULL) {\n                st.push({it.first-&gt;right, 1});\n            }\n        }\n\n        // this is part of post\n        else {\n            // Store the node's data\n            // in the postorder traversal\n            post.push_back(it.first-&gt;data);\n        }\n    }\n\n    // Returning the traversals\n    vector&lt;vector&lt;int&gt;&gt; result;\n    result.push_back(pre);\n    result.push_back(in);\n    result.push_back(post);\n    return result;\n}\n\n\n\n\n// Function to print the\n// elements of a vector\nvoid printVector(const vector&lt;int&gt;&amp; vec) {\n    // Iterate through the vector\n    // and print each element\n    for (int num : vec) {\n        cout &lt;&lt; num &lt;&lt; &quot; &quot;;\n    }\n    cout &lt;&lt; endl;\n}\n\n// Main function\nint main()\n{\n    // Creating a sample binary tree\n    Node* root = new Node(1);\n    root-&gt;left = new Node(2);\n    root-&gt;right = new Node(3);\n    root-&gt;left-&gt;left = new Node(4);\n    root-&gt;left-&gt;right = new Node(5);\n\n    // Getting the pre-order, in-order,\n    // and post-order traversals\n    vector&lt;int&gt; pre, in, post;\n    vector&lt;vector&lt;int&gt;&gt; traversals = preInPostTraversal(root);\n\n    // Extracting the traversals\n    // from the result\n    pre = traversals[0];\n    in = traversals[1];\n    post = traversals[2];\n\n    // Printing the traversals\n    cout &lt;&lt; &quot;Preorder traversal: &quot;;\n    for (int val : pre) {\n        cout &lt;&lt; val &lt;&lt; &quot; &quot;;\n    }\n    cout &lt;&lt; endl;\n\n    cout &lt;&lt; &quot;Inorder traversal: &quot;;\n    for (int val : in) {\n        cout &lt;&lt; val &lt;&lt; &quot; &quot;;\n    }\n    cout &lt;&lt; endl;\n\n    cout &lt;&lt; &quot;Postorder traversal: &quot;;\n    for (int val : post) {\n        cout &lt;&lt; val &lt;&lt; &quot; &quot;;\n    }\n    cout &lt;&lt; endl;\n\n    return 0;\n}\n                            </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block \" data-lang=\"java\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\n// Node structure for the binary tree\nclass Node {\n    int data;\n    Node left;\n    Node right;\n\n    // Constructor to initialize\n    // the node with a value\n    Node(int val) {\n        data = val;\n        left = null;\n        right = null;\n    }\n}\n\npublic class TreeTraversal {\n    // Function to get the Preorder,\n    // Inorder and Postorder traversal\n    // Of Binary Tree in One traversal\n    public static List&lt;List&lt;Integer&gt;&gt; preInPostTraversal(Node root) {\n        // Lists to store traversals\n        List&lt;Integer&gt; pre = new ArrayList&lt;&gt;();\n        List&lt;Integer&gt; in = new ArrayList&lt;&gt;();\n        List&lt;Integer&gt; post = new ArrayList&lt;&gt;();\n\n        // If the tree is empty,\n        // return empty traversals\n        if (root == null) {\n            return new ArrayList&lt;&gt;();\n        }\n\n        // Stack to maintain nodes\n        // and their traversal state\n        Stack&lt;Pair&lt;Node, Integer&gt;&gt; st = new Stack&lt;&gt;();\n\n        // Start with the root node\n        // and state 1 (preorder)\n        st.push(new Pair&lt;&gt;(root, 1));\n\n        while (!st.empty()) {\n            Pair&lt;Node, Integer&gt; it = st.pop();\n\n            // this is part of pre\n            if (it.getValue() == 1) {\n                // Store the node's data\n                // in the preorder traversal\n                pre.add(it.getKey().data);\n                // Move to state 2\n                // (inorder) for this node\n                it.setValue(2);\n                // Push the updated state\n                // back onto the stack\n                st.push(it);\n\n                // Push left child onto\n                // the stack for processing\n                if (it.getKey().left != null) {\n                    st.push(new Pair&lt;&gt;(it.getKey().left, 1));\n                }\n            }\n\n            // this is a part of in\n            else if (it.getValue() == 2) {\n                // Store the node's data\n                // in the inorder traversal\n                in.add(it.getKey().data);\n                // Move to state 3\n                // (postorder) for this node\n                it.setValue(3);\n                // Push the updated state\n                // back onto the stack\n                st.push(it);\n\n                // Push right child onto\n                // the stack for processing\n                if (it.getKey().right != null) {\n                    st.push(new Pair&lt;&gt;(it.getKey().right, 1));\n                }\n            }\n\n            // this is part of post\n            else {\n                // Store the node's data\n                // in the postorder traversal\n                post.add(it.getKey().data);\n            }\n        }\n\n        // Returning the traversals\n        List&lt;List&lt;Integer&gt;&gt; result = new ArrayList&lt;&gt;();\n        result.add(pre);\n        result.add(in);\n        result.add(post);\n        return result;\n    }\n\n    // Function to print the\n    // elements of a list\n    public static void printList(List&lt;Integer&gt; list) {\n        // Iterate through the list\n        // and print each element\n        for (int num : list) {\n            System.out.print(num + &quot; &quot;);\n        }\n        System.out.println();\n    }\n\n    // Main function\n    public static void main(String[] args) {\n        // Creating a sample binary tree\n        Node root = new Node(1);\n        root.left = new Node(2);\n        root.right = new Node(3);\n        root.left.left = new Node(4);\n        root.left.right = new Node(5);\n\n        // Getting the pre-order, in-order,\n        // and post-order traversals\n        List&lt;Integer&gt; pre, in, post;\n        List&lt;List&lt;Integer&gt;&gt; traversals = preInPostTraversal(root);\n\n        // Extracting the traversals\n        // from the result\n        pre = traversals.get(0);\n        in = traversals.get(1);\n        post = traversals.get(2);\n\n        // Printing the traversals\n        System.out.print(&quot;Preorder traversal: &quot;);\n        printList(pre);\n\n        System.out.print(&quot;Inorder traversal: &quot;);\n        printList(in);\n\n        System.out.print(&quot;Postorder traversal: &quot;);\n        printList(post);\n    }\n}\n                            </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block\" data-lang=\"python\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"python\" class=\"language-python\">\n# Node class for the binary tree\nclass Node:\n    def __init__(self, val):\n        self.data = val\n        self.left = None\n        self.right = None\n\n# Function to get the Preorder,\n# Inorder and Postorder traversal\n# Of Binary Tree in One traversal\ndef pre_in_post_traversal(root):\n    # Lists to store traversals\n    pre, in_order, post = [], [], []\n\n    # If the tree is empty,\n    # return empty traversals\n    if root is None:\n        return []\n\n    # Stack to maintain nodes\n    # and their traversal state\n    stack = [(root, 1)]\n\n    while stack:\n        node, state = stack.pop()\n\n        # this is part of pre\n        if state == 1:\n            # Store the node's data\n            # in the preorder traversal\n            pre.append(node.data)\n            # Move to state 2\n            # (inorder) for this node\n            state = 2\n            # Push the updated state\n            # back onto the stack\n            stack.append((node, state))\n\n            # Push left child onto\n            # the stack for processing\n            if node.left:\n                stack.append((node.left, 1))\n\n        # this is a part of in\n        elif state == 2:\n            # Store the node's data\n            # in the inorder traversal\n            in_order.append(node.data)\n            # Move to state 3\n            # (postorder) for this node\n            state = 3\n            # Push the updated state\n            # back onto the stack\n            stack.append((node, state))\n\n            # Push right child onto\n            # the stack for processing\n            if node.right:\n                stack.append((node.right, 1))\n\n        # this is part of post\n        else:\n            # Store the node's data\n            # in the postorder traversal\n            post.append(node.data)\n\n    # Returning the traversals\n    return [pre, in_order, post]\n\n# Function to print the\n# elements of a list\ndef print_list(lst):\n    # Iterate through the list\n    # and print each element\n    for num in lst:\n        print(num, end=&quot; &quot;)\n    print()\n\n# Main function\nif __name__ == &quot;__main__&quot;:\n    # Creating a sample binary tree\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    root.left.left = Node(4)\n    root.left.right = Node(5)\n\n    # Getting the pre-order, in-order,\n    # and post-order traversals\n    traversals = pre_in_post_traversal(root)\n\n    # Extracting the traversals\n    # from the result\n    pre, in_order, post = traversals\n\n    # Printing the traversals\n    print(&quot;Preorder traversal: &quot;, end=&quot;&quot;)\n    print_list(pre)\n\n    print(&quot;Inorder traversal: &quot;, end=&quot;&quot;)\n    print_list(in_order)\n\n    print(&quot;Postorder traversal: &quot;, end=&quot;&quot;)\n    print_list(post)\n                           </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block\" data-lang=\"javascript\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"javascript\" class=\"language-javascript\">\n// Node class for the binary tree\nclass Node {\n    constructor(val) {\n        this.data = val;\n        this.left = null;\n        this.right = null;\n    }\n}\n\n// Function to get Preorder, Inorder,\n// and Postorder traversal of Binary\n// Tree in One traversal\nfunction preInPostTraversal(root) {\n    // Arrays to store traversals\n    let pre = [];\n    let inOrder = [];\n    let post = [];\n\n    // If the tree is empty,\n    // return empty traversals\n    if (!root) {\n        return [];\n    }\n\n    // Stack to maintain nodes\n    // and their traversal state\n    let stack = [];\n\n    // Start with the root\n    // node and state 1 (preorder)\n    stack.push([root, 1]);\n\n    while (stack.length &gt; 0) {\n        let [node, state] = stack.pop();\n\n        // This is part of pre\n        if (state === 1) {\n            // Store the node's data\n            // in the preorder traversal\n            pre.push(node.data);\n            // Move to state 2\n            // (inorder) for this node\n            state = 2;\n            // Push the updated state\n            // back onto the stack\n            stack.push([node, state]);\n\n            // Push left child onto\n            // the stack for processing\n            if (node.left !== null) {\n                stack.push([node.left, 1]);\n            }\n        }\n        // This is a part of in\n        else if (state === 2) {\n            // Store the node's data\n            // in the inorder traversal\n            inOrder.push(node.data);\n            // Move to state 3\n            // (postorder) for this node\n            state = 3;\n            // Push the updated state\n            // back onto the stack\n            stack.push([node, state]);\n\n            // Push right child onto\n            // the stack for processing\n            if (node.right !== null) {\n                stack.push([node.right, 1]);\n            }\n        }\n        // This is part of post\n        else {\n            // Store the node's data\n            // in the postorder traversal\n            post.push(node.data);\n        }\n    }\n\n    // Returning the traversals\n    return [pre, inOrder, post];\n}\n\n// Function to print\n// the elements of an array\nfunction printArray(arr) {\n    // Iterate through the\n    // array and print each element\n    for (let val of arr) {\n        process.stdout.write(val + &quot; &quot;);\n    }\n    process.stdout.write(&quot;\\n&quot;);\n}\n\n// Main function\nfunction main() {\n    // Creating a sample binary tree\n    let root = new Node(1);\n    root.left = new Node(2);\n    root.right = new Node(3);\n    root.left.left = new Node(4);\n    root.left.right = new Node(5);\n\n    // Getting the pre-order,\n    // in-order, and post-order traversals\n    let traversals = preInPostTraversal(root);\n\n    // Extracting the \n    // traversals from the result\n    let pre = traversals[0];\n    let inOrder = traversals[1];\n    let post = traversals[2];\n\n    // Printing the traversals\n    process.stdout.write(&quot;Preorder traversal: &quot;);\n    printArray(pre);\n\n    process.stdout.write(&quot;Inorder traversal: &quot;);\n    printArray(inOrder);\n\n    process.stdout.write(&quot;Postorder traversal: &quot;);\n    printArray(post);\n}\n\nmain();\n                            </code>\n                        </pre>\n                    </div>\n                    <p>\n                        <!-- Insert Output of Brute Force Here -->\n                       <strong>Output</strong> \n                       Preorder traversal: 1 2 4 5 3 \n                       Inorder traversal: 4 2 5 1 3\n                       Postorder traversal: 4 5 2 3 1\n                    </p>\n                </div>\n            </details>\n            <details class=\"secondary-details\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Complexity Analysis\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <p>\n                    <!-- Insert Time and Space Complexity  Here -->\n                    <p><strong>Time Complexity: O(3N)</strong>   where N is the number of nodes in the Binary Tree. Each node is processed once for each traversal type (pre-order, in-order, and post-order). Hence, the algorithm effectively visits each node three times in total across the three traversal types.</p>\n\t\t\t\t\t<p><strong>Space Complexity: O(4N)</strong>  where N is the number of nodes in the Binary Tree. The following additional data structures are used:A stack to maintain traversal states, requiring additional space proportional to the maximum number of nodes in the stack at any point during traversal.Three vectors to store the preorder, inorder and postorder traversal. These arrays collectively occupy space proportional to the total number of nodes in the tree. Hence, 3N is added to the space complexity.</p>\n\n                </p>\n            </details>\n        </div>\n    </details>\n</div>\n\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n    <details>\n        <summary class=\"main-summary\">\n            <span>\n                Video Explanation\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"yt-video-wrapper\">\n            <!-- Insert iframe embed Link of Youtube Video-->\n            <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ySp2epYvgTE?si=KUpMv-8xod02UJyk\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n        </div>\n    </details>\n</div>\n\n<blockquote class=\"wp-block-quote\">\n    Special thanks to <strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268\">Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,<strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\"> please check out this article</a></strong>\n</blockquote>\n\n<script>\n\n    const codeSections = document.querySelectorAll('.code-section');\n\n    // Get last selected language from localStorage or set default value\n    let lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp';\n\n    codeSections.forEach((section, sectionIndex) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n        const copyBtn = section.querySelector('.copy-btn');\n\n        codeTabs.forEach((tab) => {\n            tab.addEventListener('click', () => {\n                codeTabs.forEach((t) => {\n                    t.classList.remove('dsa_article_code_active');\n                });\n                tab.classList.add('dsa_article_code_active');\n\n                const lang = tab.dataset.lang;\n                const activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                codeBlocks.forEach((block) => {\n                    if (block === activeBlock) {\n                        block.classList.add('dsa_article_code_active');\n                    } else {\n                        block.classList.remove('dsa_article_code_active');\n                    }\n                });\n\n                // Update last selected language for all sections and store in localStorage\n                lastSelectedLanguage = lang;\n                localStorage.setItem('lastSelectedLanguage', lang);\n                codeSections.forEach((otherSection, otherIndex) => {\n                    if (otherIndex !== sectionIndex) {\n                        const otherTabs = otherSection.querySelectorAll('.code-tab');\n                        otherTabs.forEach((otherTab) => {\n                            if (otherTab.dataset.lang === lang) {\n                                otherTab.classList.add('dsa_article_code_active');\n                            } else {\n                                otherTab.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                        const otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                        const otherCodeBlocks = otherSection.querySelectorAll('.code-block');\n                        otherCodeBlocks.forEach((block) => {\n                            if (block === otherActiveBlock) {\n                                block.classList.add('dsa_article_code_active');\n                            } else {\n                                block.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                    }\n                });\n            });\n        });\n\n        // Handle copy button click event\n        copyBtn.addEventListener('click', () => {\n            const activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\n            navigator.clipboard.writeText(activeBlock.innerText);\n            copyBtn.classList.add('dsa_article_code_active');\n            setTimeout(() => {\n                copyBtn.classList.remove('dsa_article_code_active');\n            }, 1000);\n        });\n    });\n\n    // Set initial state of the tabs\n    codeSections.forEach((section) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n\n        codeTabs.forEach((tab) => {\n            if (tab.dataset.lang === lastSelectedLanguage) {\n                tab.classList.add('dsa_article_code_active');\n            } else {\n                tab.classList.remove('dsa_article_code_active');\n            }\n        });\n\n        codeBlocks.forEach((block) => {\n            if (block.dataset.lang === lastSelectedLanguage) {\n                block.classList.add('dsa_article_code_active');\n            } else {\n                block.classList.remove('dsa_article_code_active');\n            }\n        });\n    });\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>"
}