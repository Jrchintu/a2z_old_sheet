{
    "dislikes": 5,
    "video": "xDEuM5qa0zg",
    "publishedOn": "Sun Mar 24 2024 22:09:21 GMT+0530 (India Standard Time)",
    "slug": "implement-lru-cache",
    "aid": "1465",
    "title": "Implement LRU Cache",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/lru-cache",
    "topics": [
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "linked-list",
            "topic-title": "Linked List"
        }
    ],
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement: \u201c</strong>Design a data structure that follows the constraints of <strong>Least Recently Used (LRU) cache</strong>\u201d.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Implement the <strong>LRUCache</strong> class:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>LRUCache(int capacity)</strong> we need to initialize the LRU cache with positive size <strong>capacity</strong>.</li><li><strong>int get(int key)</strong> returns the value of the <strong>key</strong> if the key exists, otherwise return<strong> -1</strong>.</li><li><strong>Void put(int key,int value),</strong> Update the value of the<strong> key</strong> if the <strong>key</strong> exists. Otherwise, add the <strong>key-value</strong> pair to the cache.if the number of keys exceeds the <strong>capacity</strong> from this operation, evict the least recently used key.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>The functions <strong>get</strong> and <strong>put</strong> must each run in<strong> O(1)</strong> average time complexity.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\"><strong>Example:</strong>\n\n<strong>Input:</strong>\n [\"LRUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"put\", \"get\", \"get\", \"get\"]\n       [[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]\n\n<strong>Output:\n</strong> [null, null, null, 1, null, -1, null, -1, 3, 4]\n\n<strong>Explanation</strong>:\n\nLRUCache lRUCache = new LRUCache(2);\nlRUCache.put(1, 1); // cache is {1=1}\nlRUCache.put(2, 2); // cache is {1=1, 2=2}\nlRUCache.get(1);    // return 1\nlRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}\nlRUCache.get(2);    // returns -1 (not found)\nlRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}\nlRUCache.get(1);    // return -1 (not found)\nlRUCache.get(3);    // return 3\nlRUCache.get(4);    // return 4</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p><strong>Solution:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph {\"textColor\":\"vivid-red\"} -->\n<p class=\"has-vivid-red-color has-text-color\"><strong><em>Disclaimer</em></strong><em>: Don\u2019t jump directly to the solution, try it out yourself first.</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Prerequisite: Should have knowledge on the topics Hashmaps &amp; DLL(Doubly Linked List)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Intuition:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>While inserting the {key,val} pair into the <strong>DDL</strong> make sure that we are inserting it from the back tail to head.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The cache will tell us when the {key, value} pair is used/inserted.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Approach:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Size = 3</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>put(1,10)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>put(3,15)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>put(2,12)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>get(3)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>put(4,25)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Create a DLL and hashmap</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"436\" height=\"336\" src=\"https://lh6.googleusercontent.com/ZKd3PZIu44zfHeq--r4ALn4ODM4AI8IQuqsDfAv7aSy88ZitXg11J7GcN63XEmXUybH-0Y2Z0E4VNKsoxagpDVzhR-rJUG2TicftKOFDj3Dh9Rmg0y_ZZu_WMvpPKKN3yo3-IQPI\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>While inserting the {key,val}pair consider the following</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>Check if the {key,val} pair is already present in Cache.</li><li>Check for the capacity. if the Cache size == capacity then while inserting the new pair remove the<strong> LRU</strong> and insert the <strong>new pair right after the head</strong>.while removing the node make sure to remove the {value, node} pair from the cache.</li><li>If the key is not present in the Cache then return -1;</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Query 1: put(1,10)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Initialling Cache is empty so (n = 0) and&nbsp; (1,10) are not present in the Cache. It is a new element so we should insert it into the Cache.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Since n &lt; capacity(0 &lt; 3), so we can insert the pair.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Insert the pair({1,10}) right after the head.And store the<strong> {key,address of the node x}</strong> in the Cache.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"624\" height=\"169\" src=\"https://lh3.googleusercontent.com/Zw1tru2gK7wDc6pmia-OVMCgM1HKZ1YTDrbKXlW_O1arYHZZcfe1tkNT8J0L-M4ZxyzX_tUr5tCT9ECdMw5eSSDlRAOzSIO8JuN85ABgkAae5HojFQcfkqvuzHBz0w4YalCBwTtF\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"189\" height=\"270\" src=\"https://lh5.googleusercontent.com/p6Yo0vHfHVcvwYUJx--sKYhc6oaGlCLzpOZk6srXtcQBKUAaD_Qs2UJ9OVAEPEjsiF8FQH1P6YvQe7c40IsikWzLY3G6G5gUNjYf7PktGaFk45kEA0ynEy6wxwQLcXNoAaDEY9-C\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Query 2: put(3,15)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Repeat the same process.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(3,15) is not present in the Cache and the size of the Cache (n = 1) is less than capacity 3.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Insert the pair(3,10) right after the head and store the address of that node in the Cache with its key value.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"624\" height=\"155\" src=\"https://lh4.googleusercontent.com/P4j6xnpZEtA-SgR4RFxEBaYpr1dY4nDDwLe5I7LLbrr5-6Odh_TrBgk-6jrvtsxgiN1AS6guVq02SYC9cpoZ0yeDhqc5eXX4ycKP5vwsjjgBh-7jqiE4pg4GwbhOvaBV5gkDdjRQ\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"156\" height=\"220\" src=\"https://lh6.googleusercontent.com/dNeuOgBx9y6bnQFgW9rreFgqZ3-zS5bXR47zP0AqBalzCtVFDQNkNVd9ey0Z289RAHGFPcB_gzRSwKJZPQAADVT2OqFBv1UI_54VpAqo1wP6Cc56hiLEQxpEVEeIe1wF_tLpxC5h\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Query 3: put(2,12)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Repeat again. check if (2,12) Is present in the Cache.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>No, it\u2019s not present in the cache so now check for the size Cache size is 2 &lt; capacity(3).so insert the pair right after the head.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"624\" height=\"141\" src=\"https://lh5.googleusercontent.com/0BGpmy7I6MeNuNgmxXfX-gaHFsP4Pmg95NIMD3sTbug3iR_uzYWI1j3BHJgziwFK1YkejmOcmBcpsw10QT2Oh9ZjyUoeMq3JRrWLu6NH-nHEEvrz-3jjsqL8zSx-BgslACAHgoWP\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"207\" height=\"260\" src=\"https://lh3.googleusercontent.com/715h3DRnaC0DeBBSuLb12cS6BDOOEJYDIwvuXMWoqh-tN1LITG4tqh65pCDM2ujpxSvm-B8nM8rO1TeVlu5MjXHjkhdLn3XpUkKC6VJuOzzUusSp4JKCOnKK4KRrTyuQNIZpcBI7\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Query 4: get(3)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Check if the value is present in the cache. Yes, 3 is present in the cache so take the address of the node(Y) and output the value which is present in that node.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now the most recently used should be changed because the flow is from head(most recent) to tail(least recent).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Delete the node and add that node right after the head. Since the node is moved to a new address update the address of the key in the cache.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"624\" height=\"304\" src=\"https://lh4.googleusercontent.com/0Sj3RAiLDwLkYEprOas7tmkBkMQHVBpjVcrogp37ZsOrHm98Be7jjAXWCym0kt3dZ_xV1Tr55_WvkSp6CAUCHqplnTqzF33q_NA3Mper3_PmgeMgN7QC0bZyHyUDtJIU-f_O8KLz\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"173\" height=\"251\" src=\"https://lh6.googleusercontent.com/nIi3IPSoGDSFhuPatPXquqfhNqAUwCyI5fafquu7javzRU0-IKQrr0IFhyIzCHoLLzfz0ZCBOM3oV4yMMiFkH71j4P8TDhqBt8s4S1F3hs9sNmEmOZiBjyug9DJ8WPrI5dJL8Trt\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Query 5: put(4,25)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Check for the size of the cache n = 3 which is equal to capacity so we have to remove the LRU which is present right before the tail.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Before removing the node delete the pair{key, node} of that node present in the cache.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"624\" height=\"245\" src=\"https://lh4.googleusercontent.com/F0YfSSnFpNYdfn6MrE_WCntOniTxrAKf5nX-miHnXhscMvM5m0UbNF3FUoWB_m01e5QkBDPcP2034IjcNjAeoE3Gft-Zvhq8eqMXaqPFzexq51nNSucnh761kPGxUdsmBJtuZg8N\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now the size of the cache will be 2 now we have space to insert the pair(4,25).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Take (4,25) right after the head and take the address of the node(s) and insert it into the cache.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"624\" height=\"149\" src=\"https://lh3.googleusercontent.com/mECpHuqfhmWgXuPl_E1SKL8IWZnc1NyTiQNTx3KFfPkp6k28FOSS1q94CNE3m1FATFCvZ2ShKV9oCLTdTKILGs31DsOAPinAYJW00cWcEDDQ9bfEI5oOP58VfGjEn7d5hBus7nzB\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"176\" height=\"254\" src=\"https://lh5.googleusercontent.com/0_iWfxlKZzouHkQQ_rcU6vYaCqGnwVbMDQ6TBakp2H3MtAObW_cu4sbk1RgLn2GAL5riX36NDIxipuH2uP4YYKcpKsbhQqsXDbGaIWeNiUrD8UP72yLK_iAsB1jdqdAXu5fNX4Hd\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    \n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">class LRUCache {\n  public:\n    class node {\n      public:\n        int key;\n      int val;\n      node * next;\n      node * prev;\n      node(int _key, int _val) {\n        key = _key;\n        val = _val;\n      }\n    };\n\n  node * head = new node(-1, -1);\n  node * tail = new node(-1, -1);\n\n  int cap;\n  unordered_map &lt; int, node * &gt; m;\n\n  LRUCache(int capacity) {\n    cap = capacity;\n    head -&gt; next = tail;\n    tail -&gt; prev = head;\n  }\n\n  void addnode(node * newnode) {\n    node * temp = head -&gt; next;\n    newnode -&gt; next = temp;\n    newnode -&gt; prev = head;\n    head -&gt; next = newnode;\n    temp -&gt; prev = newnode;\n  }\n\n  void deletenode(node * delnode) {\n    node * delprev = delnode -&gt; prev;\n    node * delnext = delnode -&gt; next;\n    delprev -&gt; next = delnext;\n    delnext -&gt; prev = delprev;\n  }\n\n  int get(int key_) {\n    if (m.find(key_) != m.end()) {\n      node * resnode = m[key_];\n      int res = resnode -&gt; val;\n      m.erase(key_);\n      deletenode(resnode);\n      addnode(resnode);\n      m[key_] = head -&gt; next;\n      return res;\n    }\n\n    return -1;\n  }\n\n  void put(int key_, int value) {\n    if (m.find(key_) != m.end()) {\n      node * existingnode = m[key_];\n      m.erase(key_);\n      deletenode(existingnode);\n    }\n    if (m.size() == cap) {\n      m.erase(tail -&gt; prev -&gt; key);\n      deletenode(tail -&gt; prev);\n    }\n\n    addnode(new node(key_, value));\n    m[key_] = head -&gt; next;\n  }\n};</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity:</strong>O(N)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity:</strong>O(1)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">class LRUCache {\n    Node head = new Node(0, 0), tail = new Node(0, 0);\n    Map &lt; Integer, Node &gt; map = new HashMap();\n    int capacity;\n\n    public LRUCache(int _capacity) {\n        capacity = _capacity;\n        head.next = tail;\n        tail.prev = head;\n    }\n\n    public int get(int key) {\n        if (map.containsKey(key)) {\n            Node node = map.get(key);\n            remove(node);\n            insert(node);\n            return node.value;\n        } else {\n            return -1;\n        }\n    }\n\n    public void put(int key, int value) {\n        if (map.containsKey(key)) {\n            remove(map.get(key));\n        }\n        if (map.size() == capacity) {\n            remove(tail.prev);\n        }\n        insert(new Node(key, value));\n    }\n\n    private void remove(Node node) {\n        map.remove(node.key);\n        node.prev.next = node.next;\n        node.next.prev = node.prev;\n    }\n\n    private void insert(Node node) {\n        map.put(node.key, node);\n        node.next = head.next;\n        node.next.prev = node;\n        head.next = node;\n        node.prev = head;\n    }\n\n    class Node {\n        Node prev, next;\n        int key, value;\n        Node(int _key, int _value) {\n            key = _key;\n            value = _value;\n        }\n    }\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity:</strong>O(N)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity:</strong>O(1)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>[tabbyending]<br><br><strong>Note:</strong> We are not using any STL libraries in above solution for better understanding of the implementation.  It may give TLE in some platforms. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;<a href=\"https://www.linkedin.com/in/bhuvaneshwari-pamarthy-chiranjeevi-a788a1201\" target=\"_blank\" rel=\"noreferrer noopener nofollow\"><strong>P.C.Bhuvaneshwari</strong></a>&nbsp;for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->",
    "category_tag": "data-structure",
    "likes": 127,
    "preview": "Problem Statement: \u201cDesign a data structure that follows the constraints of Least Recently Used (LRU) cache\u201d. Implement the LRUCache class: * LRUCache(int capacity) we need to initialize the LRU ca..."
}