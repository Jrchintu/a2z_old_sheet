{
    "dislikes": 6,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:09:17 GMT+0530 (India Standard Time)",
    "slug": "count-reverse-pairs",
    "aid": "1445",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/reverse-pairs",
    "title": "Count Reverse Pairs",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "recursion",
            "topic-title": "Recursion"
        },
        {
            "topic-id": "sorting",
            "topic-title": "Sorting"
        }
    ],
    "category_tag": "data-structure",
    "likes": 185,
    "preview": "Problem Statement: Given an array of numbers, you need to return the count of reverse pairs. Reverse Pairs are those pairs where i<j and arr[i]>2*arr[j]. Examples Example 1: Input: N = 5, array[] =...",
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement:</strong> Given an array of numbers, you need to return the count of reverse pairs. <strong>Reverse Pairs </strong>are those pairs where i&lt;j and arr[i]>2*arr[j].</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n<details class=\"article_example_details\">\n<summary class=\"article_example_summary\">\n<span><strong>\nExamples\n</strong>\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"atricle_example_content\">\n<pre class=\"wp-block-preformatted\"><!-- Insert New Examples Here -->\n<pre class=\"wp-block-preformatted\"><strong>Example 1:</strong>\n\n<strong>Input:</strong> N = 5, array[] = {1,3,2,3,1)\n\n<strong>Output</strong>: 2 \n\n<strong>Explanation:</strong> The pairs are (3, 1) and (3, 1) as from both the pairs the condition arr[i] &gt; 2*arr[j] is satisfied.\n\n<strong>Example 2:</strong>\n\n<strong>Input:</strong> N = 4, array[] = {3,2,1,4}\n\n<strong>Output:</strong> 1\n\n<strong>Explaination: </strong>There is only 1 pair  ( 3 , 1 ) that satisfy the condition arr[i] &gt; 2*arr[j]</pre>\n</pre>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Practice Section-->\n<div class=\"practice\">\n<span><strong>Practice: </strong></span>\n<div class=\"problem-buttons\">\n\n<!-- Add Problem Link inside href -->\n<a href=\"https://www.codingninjas.com/codestudio/problems/team-contest_6840309?utm_source=youtube&amp;utm_medium=affiliate&amp;utm_campaign=striver_Arrayproblems\" target=\"_blank\" rel=\"noopener\">\n<span>Solve Problem</span>\n<img src=\"https://static.takeuforward.org/wp/uploads/2023/04/Group-11-5.png\" alt=\"code-studio\">\n</a>\n</div>\n</div>\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\nyourself first. </em></p>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<div class=\"horizontal_navbar_dsa_article\">\n<div class=\"grid_container_two\">\n<a href=\"#brute-force-approach\" class=\"two-boxes box-a\">\nBrute Force Approach\n</a>\n<a href=\"#optimal-approach\" class=\"two-boxes box-c\">\nOptimal Approach\n</a>\n<a href=\"#dsa_article_video_explanation\" class=\"three-boxes box-d\">\n<svg width=\"26\" height=\"26\" viewBox=\"0 0 20 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M8 10L13.19 7L8 4V10ZM19.56 2.17C19.69 2.64 19.78 3.27 19.84 4.07C19.91 4.87 19.94 5.56 19.94 6.16L20 7C20 9.19 19.84 10.8 19.56 11.83C19.31 12.73 18.73 13.31 17.83 13.56C17.36 13.69 16.5 13.78 15.18 13.84C13.88 13.91 12.69 13.94 11.59 13.94L10 14C5.81 14 3.2 13.84 2.17 13.56C1.27 13.31 0.69 12.73 0.44 11.83C0.31 11.36 0.22 10.73 0.16 9.93C0.0900001 9.13 0.0599999 8.44 0.0599999 7.84L0 7C0 4.81 0.16 3.2 0.44 2.17C0.69 1.27 1.27 0.69 2.17 0.44C2.64 0.31 3.5 0.22 4.82 0.16C6.12 0.0899998 7.31 0.0599999 8.41 0.0599999L10 0C14.19 0 16.8 0.16 17.83 0.44C18.73 0.69 19.31 1.27 19.56 2.17Z\" fill=\"red\"></path>\n</svg>\n\n</a>\n<div class=\"box-e tooltip\">\n<svg viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M12.842 9.25L11.9577 10.17C11.2502 10.89 10.8081 11.5 10.8081 13H8.84297V12.5C8.84297 11.39 9.28511 10.39 9.99255 9.67L11.2109 8.41C11.5745 8.05 11.7906 7.55 11.7906 7C11.7906 6.46957 11.5836 5.96086 11.2151 5.58579C10.8465 5.21071 10.3467 5 9.82552 5C9.30434 5 8.80451 5.21071 8.43598 5.58579C8.06745 5.96086 7.86041 6.46957 7.86041 7H5.89531C5.89531 5.93913 6.30938 4.92172 7.04644 4.17157C7.7835 3.42143 8.78316 3 9.82552 3C10.8679 3 11.8675 3.42143 12.6046 4.17157C13.3417 4.92172 13.7557 5.93913 13.7557 7C13.7543 7.84324 13.4259 8.65183 12.842 9.25ZM10.8081 17H8.84297V15H10.8081M9.82552 0C8.53521 0 7.25754 0.258658 6.06545 0.761205C4.87337 1.26375 3.79021 2.00035 2.87783 2.92893C1.03519 4.8043 0 7.34784 0 10C0 12.6522 1.03519 15.1957 2.87783 17.0711C3.79021 17.9997 4.87337 18.7362 6.06545 19.2388C7.25754 19.7413 8.53521 20 9.82552 20C12.4314 20 14.9306 18.9464 16.7732 17.0711C18.6158 15.1957 19.651 12.6522 19.651 10C19.651 4.47 15.2296 0 9.82552 0Z\" fill=\"black\"></path>\n</svg>\n<div class=\"bottom\">\n<p>Expand any one approach by clicking the given options in the bar. Clicking one approach on bar,\ncloses all other expands. You can manually expand more than one approach at a time</p>\n<i></i>\n</div>\n\n</div>\n</div>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<div class=\"dsa_article_dropdown_approachs \">\n\n<!-- Brute Force Approach Starts from here -->\n<div id=\"brute-force-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nBrute Force Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n<p><strong>Solution:</strong></p>\n<p>This question is slightly different from the question <a href=\"https://takeuforward.org/data-structure/count-inversions-in-an-array/\" target=\"_blank\" rel=\"noopener\" title=\"\">count inversion</a> where the condition was a[i] &gt; a[j] but here in this question, the condition is a[i] &gt; 2*a[j]. In both questions, the index i &lt; j.</p>\n\n<h3><strong>Naive Approach (Brute-force)</strong>:&nbsp;</h3>\n<h3><strong>Approach:</strong></h3>\n<p>The steps are as follows:</p>\n\n<ol><li>First, we will run a loop(say i) from 0 to N-1 to select the a[i].</li><li>As index j should be greater than index i, inside loop i, we will run another loop i.e. j from i+1 to N-1, and select the element a[j].</li><li>Inside this second loop, we will check if a[i] &gt; 2*a[j] i.e. if a[i] and a[j] can be a pair. If they satisfy the condition, we will increase the count by 1.</li><li>Finally, we will return the count i.e. the number of such pairs.</li></ol>\n<h3><strong>Intuition: </strong></h3>\n<p>The naive approach is pretty straightforward. We will use nested loops to generate all possible pairs. We know index i must be smaller than index j. So, we will fix i at one index at a time through a loop, and with another loop, we will check(<em>the condition a[i] &gt; 2*a[j]</em>) the elements from index i+1 to N-1&nbsp; if they can form a pair with a[i].</p>\n<p><strong>Note: </strong><em>For a better understanding of intuition, please watch the video at the bottom of the page.</em></p>\n\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint countPairs(vector&lt;int&gt;&amp;a, int n) {\n\n    // Count the number of pairs:\n    int cnt = 0;\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = i + 1; j &lt; n; j++) {\n            if (a[i] &gt; 2 * a[j]) cnt++;\n        }\n    }\n    return cnt;\n}\n\nint team(vector &lt;int&gt; &amp; skill, int n) {\n    return countPairs(skill, n);\n}\n\nint main()\n{\n    vector&lt;int&gt; a = {4, 1, 2, 3, 1};\n    int n = 5;\n    int cnt = team(a, n);\n    cout &lt;&lt; \"The number of reverse pair is: \"\n         &lt;&lt; cnt &lt;&lt; endl;\n    return 0;\n}\n</code>\n</pre>\n<p>\nOutput: The number of reverse pair is: 3\n</p>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\npublic class tUf {\n\n    public static int countPairs(int[] a, int n) {\n\n        // Count the number of pairs:\n        int cnt = 0;\n        for (int i = 0; i &lt; n; i++) {\n            for (int j = i + 1; j &lt; n; j++) {\n                if (a[i] &gt; 2 * a[j])\n                    cnt++;\n            }\n        }\n        return cnt;\n    }\n\n    public static int team(int[] skill, int n) {\n        return countPairs(skill, n);\n    }\n\n    public static void main(String[] args) {\n        int[] a = {4, 1, 2, 3, 1};\n        int n = 5;\n        int cnt = team(a, n);\n        System.out.println(\"The number of reverse pair is: \" + cnt);\n    }\n}  \n</code>\n</pre>\n<p>\nOutput: The number of reverse pair is: 3\n</p>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\nfrom typing import List\n\ndef countPairs(a: [int], n: int) -&gt; int:\n    # Count the number of pairs:\n    cnt = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] &gt; 2 * a[j]:\n                cnt += 1\n    return cnt\n\ndef team(skill: [int], n: int) -&gt; int:\n    return countPairs(skill, n)\n\nif __name__ == \"__main__\":\n    a = [4, 1, 2, 3, 1]\n    n = 5\n    cnt = team(a, n)\n    print(\"The number of inversions are:\", cnt)\n</code>\n</pre>\n<p>\nOutput: The number of reverse pair is: 3\n</p>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\nfunction countPairs(a, n) {\n  // Count the number of pairs:\n  let cnt = 0;\n  for (let i = 0; i &lt; n; i++) {\n    for (let j = i + 1; j &lt; n; j++) {\n      if (a[i] &gt; 2 * a[j]) cnt++;\n    }\n  }\n  return cnt;\n}\n\nfunction team(skill, n) {\n  return countPairs(skill, n);\n}\n\nlet a = [4, 1, 2, 3, 1];\nlet n = 5;\nlet cnt = team(a, n);\nconsole.log(\"The number of reverse pair is: \" + cnt);\n</code>\n</pre>\n<p>\nOutput: The number of reverse pair is: 3\n</p>\n</div>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n</p><p><strong>Time Complexity: </strong>O(N<sup>2</sup>), where N = size of the given array.<br><strong>Reason: </strong>We are using nested loops here and those two loops roughly run for N times.</p>\n<p><strong>Space Complexity: </strong>O(1) as we are not using any extra space to solve this problem.</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Brute Force Approach Ends here -->\n\n<!-- Optimal Approach Starts from here -->\n\n<div id=\"optimal-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nOptimal Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n<h3><strong>Optimal Approach</strong>:&nbsp;</h3>\n<h3><strong>Intuition:&nbsp;</strong></h3>\n<p>In order to solve this problem we will use the merge sort algorithm like we used in the problem <a href=\"https://takeuforward.org/data-structure/count-inversions-in-an-array/\" target=\"_blank\" rel=\"noopener\" title=\"\">count inversion</a> with a slight modification of the merge() function. But in this case, the same logic will not work. In order to understand this, we need to deep dive into the merge() function.</p>\n<p><strong>Why the same logic of </strong><a href=\"https://takeuforward.org/data-structure/count-inversions-in-an-array/\" target=\"_blank\" rel=\"noopener\" title=\"\"><strong>count inversion</strong></a><strong> will not work?</strong></p>\n<ul><li>The merge function works by comparing two elements from two halves i.e. arr[left] and arr[right]. Now, the condition in the question was arr[i] &gt; arr[j]. That is why we merged the logic. While comparing the elements, we counted the number of pairs.</li><li>But in this case, the condition is arr[i] &gt; 2*arr[j]. And, we cannot change the condition of comparing the elements in the merge() function. If we change the condition, the merge() function will fail to merge the elements. So, we need to check this condition and count the number of pairs separately.</li></ul>\n<p>Here, our approach will be to check, for every element in the sorted left half(<em>sorted</em>), how many elements in the right half(<em>also sorted</em>) can make a pair. Let\u2019s try to understand, using the following example:</p>\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/06/Screenshot-2023-06-10-221649.png\" alt=\"\" class=\"wp-image-11300\"></figure>\n<p>For the first element of the left half i.e. 6, we will start checking from index 0 of the right half i.e. arr2[]. Now, we can clearly see that the first two elements of arr2[] can make a pair with arr1[0] i.e. 6.</p>\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/06/Screenshot-2023-06-10-221824.png\" alt=\"\" class=\"wp-image-11301\"></figure>\n<p>For the next element i.e. arr1[1], we will start checking from index 2(<em>0-based indexing</em>) i.e. where we stopped for the previous element.&nbsp;</p>\n<p><strong>Note: </strong><em>This process will work because arr1[1] will always be greater than arr1[0] which concludes if arr2[0] and arr2[1] are making a pair with arr1[0], they will obviously make pairs with a number greater than arr1[0] i.e. arr1[1].</em></p>\n<p>Thus before the merge step in the merge sort algorithm, we will calculate the total number of pairs each time.</p>\n<h3><strong>Approach:</strong></h3>\n<p>The steps are basically the same as they are in the case of the <a href=\"https://takeuforward.org/data-structure/merge-sort-algorithm/\" target=\"_blank\" rel=\"noopener\" title=\"\">merge sort algorithm</a>. The change will be just in the mergeSort() function:</p>\n<ul><li><em>In order to count the number of pairs, we will keep a count variable, cnt, initialized to 0 beforehand inside the mergeSort().</em></li><li><em>We will add the numbers returned by the previous mergeSort() calls.</em></li><li><em>Before the merge step, we will count the number of pairs using a function, named countPairs().</em></li><li><em>We need to remember that the left half starts from low and ends at mid, and the right half starts from mid+1 and ends at high.</em></li></ul>\n<p>The steps of the countPairs() function will be as follows:</p>\n<ol><li>We will declare a variable, cnt, initialized with 0.</li><li>We will run a loop from low to mid, to select an element at a time from the left half.</li><li>Inside that loop, we will use another loop to check how many elements from the right half can make a pair.</li><li>Lastly, we will add the total number of elements i.e. (right-(mid+1)) (where <em>right = current index)</em>, to the cnt and return it.</li></ol>\n<p><strong>Note: </strong><em>For a better understanding of intuition, please watch the video at the bottom of the page.</em></p>\n\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvoid merge(vector&lt;int&gt; &amp;arr, int low, int mid, int high) {\n    vector&lt;int&gt; temp; // temporary array\n    int left = low;      // starting index of left half of arr\n    int right = mid + 1;   // starting index of right half of arr\n\n    //storing elements in the temporary array in a sorted manner//\n\n    while (left &lt;= mid &amp;&amp; right &lt;= high) {\n        if (arr[left] &lt;= arr[right]) {\n            temp.push_back(arr[left]);\n            left++;\n        }\n        else {\n            temp.push_back(arr[right]);\n            right++;\n        }\n    }\n\n    // if elements on the left half are still left //\n\n    while (left &lt;= mid) {\n        temp.push_back(arr[left]);\n        left++;\n    }\n\n    //  if elements on the right half are still left //\n    while (right &lt;= high) {\n        temp.push_back(arr[right]);\n        right++;\n    }\n\n    // transfering all elements from temporary to arr //\n    for (int i = low; i &lt;= high; i++) {\n        arr[i] = temp[i - low];\n    }\n}\n\nint countPairs(vector&lt;int&gt; &amp;arr, int low, int mid, int high) {\n    int right = mid + 1;\n    int cnt = 0;\n    for (int i = low; i &lt;= mid; i++) {\n        while (right &lt;= high &amp;&amp; arr[i] &gt; 2 * arr[right]) right++;\n        cnt += (right - (mid + 1));\n    }\n    return cnt;\n}\n\nint mergeSort(vector&lt;int&gt; &amp;arr, int low, int high) {\n    int cnt = 0;\n    if (low &gt;= high) return cnt;\n    int mid = (low + high) / 2 ;\n    cnt += mergeSort(arr, low, mid);  // left half\n    cnt += mergeSort(arr, mid + 1, high); // right half\n    cnt += countPairs(arr, low, mid, high); //Modification\n    merge(arr, low, mid, high);  // merging sorted halves\n    return cnt;\n}\n\nint team(vector &lt;int&gt; &amp; skill, int n)\n{\n    return mergeSort(skill, 0, n - 1);\n}\n\nint main()\n{\n    vector&lt;int&gt; a = {4, 1, 2, 3, 1};\n    int n = 5;\n    int cnt = team(a, n);\n    cout &lt;&lt; \"The number of reverse pair is: \"\n         &lt;&lt; cnt &lt;&lt; endl;\n    return 0;\n}\n</code>\n</pre>\n<p>\n<strong>Output:</strong> The number of reverse pair is: 3\n</p>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\npublic class tUf {\n\n    private static void merge(int[] arr, int low, int mid, int high) {\n        ArrayList&lt;Integer&gt; temp = new ArrayList&lt;&gt;(); // temporary array\n        int left = low;      // starting index of left half of arr\n        int right = mid + 1;   // starting index of right half of arr\n\n        //storing elements in the temporary array in a sorted manner//\n\n        while (left &lt;= mid &amp;&amp; right &lt;= high) {\n            if (arr[left] &lt;= arr[right]) {\n                temp.add(arr[left]);\n                left++;\n            } else {\n                temp.add(arr[right]);\n                right++;\n            }\n        }\n\n        // if elements on the left half are still left //\n\n        while (left &lt;= mid) {\n            temp.add(arr[left]);\n            left++;\n        }\n\n        //  if elements on the right half are still left //\n        while (right &lt;= high) {\n            temp.add(arr[right]);\n            right++;\n        }\n\n        // transfering all elements from temporary to arr //\n        for (int i = low; i &lt;= high; i++) {\n            arr[i] = temp.get(i - low);\n        }\n    }\n\n    public static int countPairs(int[] arr, int low, int mid, int high) {\n        int right = mid + 1;\n        int cnt = 0;\n        for (int i = low; i &lt;= mid; i++) {\n            while (right &lt;= high &amp;&amp; arr[i] &gt; 2 * arr[right]) right++;\n            cnt += (right - (mid + 1));\n        }\n        return cnt;\n    }\n\n    public static int mergeSort(int[] arr, int low, int high) {\n        int cnt = 0;\n        if (low &gt;= high) return cnt;\n        int mid = (low + high) / 2 ;\n        cnt += mergeSort(arr, low, mid);  // left half\n        cnt += mergeSort(arr, mid + 1, high); // right half\n        cnt += countPairs(arr, low, mid, high); //Modification\n        merge(arr, low, mid, high);  // merging sorted halves\n        return cnt;\n    }\n\n    public static int team(int[] skill, int n) {\n        return mergeSort(skill, 0, n - 1);\n    }\n\n    public static void main(String[] args) {\n        int[] a = {4, 1, 2, 3, 1};\n        int n = 5;\n        int cnt = team(a, n);\n        System.out.println(\"The number of reverse pair is: \" + cnt);\n    }\n}\n</code>\n</pre>\n<p>\n<strong>Output:</strong> The number of reverse pair is: 3\n</p>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\nfrom typing import List\n\ndef merge(arr, low, mid, high):\n    temp = []  # temporary array\n    left = low  # starting index of left half of arr\n    right = mid + 1  # starting index of right half of arr\n\n    # storing elements in the temporary array in a sorted manner\n    while left &lt;= mid and right &lt;= high:\n        if arr[left] &lt;= arr[right]:\n            temp.append(arr[left])\n            left += 1\n        else:\n            temp.append(arr[right])\n            right += 1\n\n    # if elements on the left half are still left\n    while left &lt;= mid:\n        temp.append(arr[left])\n        left += 1\n\n    # if elements on the right half are still left\n    while right &lt;= high:\n        temp.append(arr[right])\n        right += 1\n\n    # transferring all elements from temporary to arr\n    for i in range(low, high + 1):\n        arr[i] = temp[i - low]\n\ndef countPairs(arr, low, mid, high):\n    right = mid + 1\n    cnt = 0\n    for i in range(low, mid + 1):\n        while right &lt;= high and arr[i] &gt; 2 * arr[right]:\n            right += 1\n        cnt += (right - (mid + 1))\n    return cnt\n\ndef mergeSort(arr, low, high):\n    cnt = 0\n    if low &gt;= high:\n        return cnt\n    mid = (low + high) // 2\n    cnt += mergeSort(arr, low, mid)  # left half\n    cnt += mergeSort(arr, mid + 1, high)  # right half\n    cnt += countPairs(arr, low, mid, high)  # Modification\n    merge(arr, low, mid, high)  # merging sorted halves\n    return cnt\n\ndef team(skill: [int], n: int) -&gt; int:\n    return mergeSort(skill, 0, n - 1)\n\nif __name__ == \"__main__\":\n    a = [4, 1, 2, 3, 1]\n    n = 5\n    cnt = team(a, n)\n    print(\"The number of reverse pair is:\", cnt).\n\n</code>\n</pre>\n<p>\n<strong>Output:</strong> The number of reverse pair is: 3\n</p>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\nfunction merge(arr, low, mid, high) {\n  let temp = []; // temporary array\n  let left = low; // starting index of left half of arr\n  let right = mid + 1; // starting index of right half of arr\n\n  // storing elements in the temporary array in a sorted manner\n  while (left &lt;= mid &amp;&amp; right &lt;= high) {\n    if (arr[left] &lt;= arr[right]) {\n      temp.push(arr[left]);\n      left++;\n    } else {\n      temp.push(arr[right]);\n      right++;\n    }\n  }\n\n  // if elements on the left half are still left\n  while (left &lt;= mid) {\n    temp.push(arr[left]);\n    left++;\n  }\n\n  // if elements on the right half are still left\n  while (right &lt;= high) {\n    temp.push(arr[right]);\n    right++;\n  }\n\n  // transferring all elements from temporary to arr\n  for (let i = low; i &lt;= high; i++) {\n    arr[i] = temp[i - low];\n  }\n}\n\nfunction countPairs(arr, low, mid, high) {\n  let right = mid + 1;\n  let cnt = 0;\n  for (let i = low; i &lt;= mid; i++) {\n    while (right &lt;= high &amp;&amp; arr[i] &gt; 2 * arr[right]) right++;\n    cnt += right - (mid + 1);\n  }\n  return cnt;\n}\n\nfunction mergeSort(arr, low, high) {\n  let cnt = 0;\n  if (low &gt;= high) return cnt;\n  let mid = Math.floor((low + high) / 2);\n  cnt += mergeSort(arr, low, mid); // left half\n  cnt += mergeSort(arr, mid + 1, high); // right half\n  cnt += countPairs(arr, low, mid, high); // Modification\n  merge(arr, low, mid, high); // merging sorted halves\n  return cnt;\n}\n\nfunction team(skill, n) {\n  return mergeSort(skill, 0, n - 1);\n}\n\nlet a = [4, 1, 2, 3, 1];\nlet n = 5;\nlet cnt = team(a, n);\nconsole.log(\"The number of reverse pair is: \" + cnt);\n</code>\n</pre>\n<p>\n<strong>Output:</strong> The number of reverse pair is: 3\n</p>\n</div>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n</p><p><strong>Time Complexity:</strong> O(2N*logN), where N = size of the given array.<br><strong>Reason: </strong>Inside the mergeSort() we call merge() and countPairs() except mergeSort() itself. Now, inside the function countPairs(), though we are running a nested loop, we are actually iterating the left half once and the right half once in total. That is why, the time complexity is O(N). And the merge() function also takes O(N). The mergeSort() takes O(logN) time complexity. Therefore, the overall time complexity will be O(logN * (N+N)) = O(2N*logN).</p>\n<p><strong>Space Complexity: </strong>O(N), as in the merge sort We use a temporary array to store elements in sorted order.</p>\n\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Optimal Approach Starts from here -->\n\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n<details>\n<summary class=\"main-summary\">\n<span>\nVideo Explanation\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"yt-video-wrapper\">\n\n<!-- Insert iframe embed Link of Youtube Video-->\n<iframe class=\"lazy-loaded\" loading=\"lazy\" title=\"Reverse Pairs\" width=\"810\" height=\"456\" data-lazy-type=\"iframe\" data-src=\"https://www.youtube.com/embed/0e4bZaP3MDI\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\" src=\"https://www.youtube.com/embed/0e4bZaP3MDI?feature=oembed\"></iframe><noscript>\n<iframe loading=\"lazy\" title=\"Reverse Pairs\" width=\"810\" height=\"456\" src=\"https://www.youtube.com/embed/0e4bZaP3MDI\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe></noscript>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script>\n\nconst codeSections = document.querySelectorAll('.code-section');\n\n// Get last selected language from localStorage or set default value\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\n// Update last selected language for all sections and store in localStorage\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\n// Handle copy button click event\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\n// Set initial state of the tabs\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<script>\nconst codeSections = document.querySelectorAll('.code-section');\n\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script src=\"https://takeuforward.org/UXApproachDropDowns/2ApproachJSScript.js\"></script>\n<!-- /wp:html -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p> <em>Special thanks to\u00a0<strong><a href=\"https://www.linkedin.com/in/harsh-prajapati-a349061b9\" target=\"_blank\" rel=\"noreferrer noopener\">Harsh Prajapati</a></strong>,\u00a0<a href=\"https://www.linkedin.com/in/imsudip/\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>Sudip Ghosh</strong></a> and <strong><a href=\"https://www.linkedin.com/in/kriti39/\" target=\"_blank\" rel=\"noreferrer noopener\">KRITIDIPTA GHOSH</a></strong></em> <em>for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,\u00a0</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->"
}