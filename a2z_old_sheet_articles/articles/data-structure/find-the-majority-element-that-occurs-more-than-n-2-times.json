{
    "dislikes": 9,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:09:04 GMT+0530 (India Standard Time)",
    "slug": "find-the-majority-element-that-occurs-more-than-n-2-times",
    "aid": "1385",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/majority-element-i",
    "title": "Find the Majority Element that occurs more than N/2 times",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "hashing",
            "topic-title": "Hashing"
        }
    ],
    "category_tag": "data-structure",
    "likes": 608,
    "preview": "Problem Statement: Given an array of N integers, write a program to return an element that occurs more than N/2 times in the given array. You may consider that such an element always exists in the...",
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement:</strong> Given an array of <strong>N integers</strong>, write a program to return an element that occurs more than <strong>N/2 </strong>times in the given array. You may consider that such an element always exists in the array.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n<details class=\"article_example_details\">\n<summary class=\"article_example_summary\">\n<span><strong>\nExamples\n</strong>\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"atricle_example_content\">\n<pre class=\"wp-block-preformatted\"><!-- Insert New Examples Here -->\n<pre class=\"wp-block-preformatted\"><strong>Example 1:</strong>\n<strong>Input Format</strong>: N = 3, nums[] = {3,2,3}\n<strong>Result</strong>: 3\n<strong>Explanation</strong>: When we just count the occurrences of each number and compare with half of the size of the array, you will get 3 for the above solution. \n\n<strong>Example 2:</strong>\n<strong>Input Format:</strong>&nbsp; N = 7, nums[] = {2,2,1,1,1,2,2}\n\n<strong>Result</strong>: 2\n\n<strong>Explanation</strong>: After counting the number of times each element appears and comparing it with half of array size, we get 2 as result.\n\n<strong>Example 3:</strong>\n<strong>Input Format:</strong>&nbsp; N = 10, nums[] = {4,4,2,4,3,4,4,3,2,4}\n\n<strong>Result</strong>: 4</pre></pre>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Practice Section-->\n<div class=\"practice\">\n<span><strong>Practice: </strong></span>\n<div class=\"problem-buttons\">\n\n<!-- Add Problem Link inside href -->\n<a href=\"https://bit.ly/3OiPLGG\" target=\"_blank\" rel=\"noopener\">\n<span>Solve Problem</span>\n<img src=\"https://static.takeuforward.org/wp/uploads/2023/04/Group-11-5.png\" alt=\"code-studio\">\n</a>\n</div>\n</div>\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\nyourself first. </em></p>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<div class=\"horizontal_navbar_dsa_article\">\n<div class=\"grid_container_three\">\n<a href=\"#brute-force-approach\" class=\"three-boxes box-a\">\nBrute Force Approach:\n</a>\n<a href=\"#better-approach\" class=\"three-boxes box-b\">\nBetter Approach:\n</a>\n<a href=\"#optimal-approach\" class=\"three-boxes box-c\">\nOptimal Approach:\n</a>\n<a href=\"#dsa_article_video_explanation\" class=\"three-boxes box-d\">\n<svg width=\"26\" height=\"26\" viewBox=\"0 0 20 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M8 10L13.19 7L8 4V10ZM19.56 2.17C19.69 2.64 19.78 3.27 19.84 4.07C19.91 4.87 19.94 5.56 19.94 6.16L20 7C20 9.19 19.84 10.8 19.56 11.83C19.31 12.73 18.73 13.31 17.83 13.56C17.36 13.69 16.5 13.78 15.18 13.84C13.88 13.91 12.69 13.94 11.59 13.94L10 14C5.81 14 3.2 13.84 2.17 13.56C1.27 13.31 0.69 12.73 0.44 11.83C0.31 11.36 0.22 10.73 0.16 9.93C0.0900001 9.13 0.0599999 8.44 0.0599999 7.84L0 7C0 4.81 0.16 3.2 0.44 2.17C0.69 1.27 1.27 0.69 2.17 0.44C2.64 0.31 3.5 0.22 4.82 0.16C6.12 0.0899998 7.31 0.0599999 8.41 0.0599999L10 0C14.19 0 16.8 0.16 17.83 0.44C18.73 0.69 19.31 1.27 19.56 2.17Z\" fill=\"red\"></path>\n</svg>\n\n</a>\n<div class=\"box-e tooltip\">\n<svg viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M12.842 9.25L11.9577 10.17C11.2502 10.89 10.8081 11.5 10.8081 13H8.84297V12.5C8.84297 11.39 9.28511 10.39 9.99255 9.67L11.2109 8.41C11.5745 8.05 11.7906 7.55 11.7906 7C11.7906 6.46957 11.5836 5.96086 11.2151 5.58579C10.8465 5.21071 10.3467 5 9.82552 5C9.30434 5 8.80451 5.21071 8.43598 5.58579C8.06745 5.96086 7.86041 6.46957 7.86041 7H5.89531C5.89531 5.93913 6.30938 4.92172 7.04644 4.17157C7.7835 3.42143 8.78316 3 9.82552 3C10.8679 3 11.8675 3.42143 12.6046 4.17157C13.3417 4.92172 13.7557 5.93913 13.7557 7C13.7543 7.84324 13.4259 8.65183 12.842 9.25ZM10.8081 17H8.84297V15H10.8081M9.82552 0C8.53521 0 7.25754 0.258658 6.06545 0.761205C4.87337 1.26375 3.79021 2.00035 2.87783 2.92893C1.03519 4.8043 0 7.34784 0 10C0 12.6522 1.03519 15.1957 2.87783 17.0711C3.79021 17.9997 4.87337 18.7362 6.06545 19.2388C7.25754 19.7413 8.53521 20 9.82552 20C12.4314 20 14.9306 18.9464 16.7732 17.0711C18.6158 15.1957 19.651 12.6522 19.651 10C19.651 4.47 15.2296 0 9.82552 0Z\" fill=\"black\"></path>\n</svg>\n<div class=\"bottom\">\n<p>Expand any one approach by clicking the given options in the bar. Clicking one approach on bar,\ncloses all other expands. You can manually expand more than one approach at a time</p>\n<i></i>\n</div>\n\n</div>\n</div>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Approaches Drop-Down -->\n<div class=\"dsa_article_dropdown_approachs \">\n\n<!-- Brute Force Approach Starts from here -->\n<div id=\"brute-force-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nBrute Force Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n<h3><strong>Naive Approach</strong>:&nbsp;</h3>\n<h3><strong>Approach:</strong></h3>\n<p>The steps are as follows:</p>\n<ol><li>We will run a loop that will select the elements of the array one by one.</li><li>Now, for each element, we will run another loop and count its occurrence in the given array.</li><li>If any element occurs more than the floor of (N/2), we will simply return it.</li></ol>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n\n<!-- Insert C++ code of Brute Force Here -->\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint majorityElement(vector&lt;int&gt; v) {\n\n    //size of the given array:\n    int n = v.size();\n\n    for (int i = 0; i &lt; n; i++) {\n        //selected element is v[i]\n        int cnt = 0;\n        for (int j = 0; j &lt; n; j++) {\n            // counting the frequency of v[i]\n            if (v[j] == v[i]) {\n                cnt++;\n            }\n        }\n\n        // check if frquency is greater than n/2:\n        if (cnt &gt; (n / 2))\n            return v[i];\n    }\n\n    return -1;\n}\n\nint main()\n{\n    vector&lt;int&gt; arr = {2, 2, 1, 1, 1, 2, 2};\n    int ans = majorityElement(arr);\n    cout &lt;&lt; \"The majority element is: \" &lt;&lt; ans &lt;&lt; endl;\n    return 0;\n}\n\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\n<!-- Insert Java code of Brute Force Here -->\nimport java.util.*;\n\npublic class tUf {\n    public static int majorityElement(int []v) {\n        //size of the given array:\n        int n = v.length;\n\n        for (int i = 0; i &lt; n; i++) {\n            //selected element is v[i]\n            int cnt = 0;\n            for (int j = 0; j &lt; n; j++) {\n                // counting the frequency of v[i]\n                if (v[j] == v[i]) {\n                    cnt++;\n                }\n            }\n\n            // check if frquency is greater than n/2:\n            if (cnt &gt; (n / 2))\n                return v[i];\n        }\n\n        return -1;\n    }\n\n    public static void main(String args[]) {\n        int[] arr = {2, 2, 1, 1, 1, 2, 2};\n        int ans = majorityElement(arr);\n        System.out.println(\"The majority element is: \" + ans);\n\n    }\n\n} \n\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\n<!-- Insert Python code of Brute Force Here -->\ndef majorityElement(arr):\n    # Size of the given array\n    n = len(arr)\n\n    for i in range(n):\n        # Selected element is arr[i]\n        cnt = 0\n        for j in range(n):\n            # Counting the frequency of arr[i]\n            if arr[j] == arr[i]:\n                cnt += 1\n\n        # Check if frequency is greater than n/2\n        if cnt > (n // 2):\n            return arr[i]\n\n    return -1\n\narr = [2, 2, 1, 1, 1, 2, 2]\nans = majorityElement(arr)\nprint(\"The majority element is:\", ans)\n\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\n<!-- Insert JavaScript code of Brute Force Here -->\nfunction majorityElement(arr) {\n    // Size of the given array\n    let n = arr.length;\n\n    for (let i = 0; i &lt; n; i++) {\n        // Selected element is arr[i]\n        let cnt = 0;\n        for (let j = 0; j &lt; n; j++) {\n            // Counting the frequency of arr[i]\n            if (arr[j] === arr[i]) {\n                cnt++;\n            }\n        }\n\n        // Check if frequency is greater than n/2\n        if (cnt > Math.floor(n / 2)) {\n            return arr[i];\n        }\n    }\n\n    return -1;\n}\n\nlet arr = [2, 2, 1, 1, 1, 2, 2];\nlet ans = majorityElement(arr);\nconsole.log(\"The majority element is:\", ans);\n\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Brute Force Here -->\nOutput: The majority element is: 2\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n<!-- Insert Time and Space Complexity of Brute Force Here -->\n<strong>Time Complexity:</strong> O(N2), where N = size of the given array.\n<strong>Reason:</strong> For every element of the array the inner loop runs for N times. And there are N elements in the array. So, the total time complexity is O(N2).\n<strong>Space Complexity:</strong> O(1) as we use no extra space.\n</p>\n</details>\n</div>\n</details>\n</div>\n<!-- Brute Force Approach Ends here -->\n\n\n<!-- Better Approach Starts from here -->\n\n<div id=\"better-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nBetter Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition For Better Approach Here -->\n<h3><strong>Solution 2 (Better):</strong></h3>\n<h3><strong>Intuition</strong>: </h3>\n<p>Use a better data structure to reduce the number of look-up operations and hence the time complexity. Moreover, we have been calculating the count of the same element again and again - so we have to reduce that also.</p>\n<h3><strong>Approach</strong>:&nbsp;</h3>\n<ol><li>Use a hashmap and store as <em>(key, </em>value) pairs. (Can also use frequency array based on the size of nums)&nbsp;</li><li>Here the key will be the element of the array and the value will be the number of times it occurs.&nbsp;</li><li>Traverse the array and update the value of the key. Simultaneously check if the value is greater than the <strong>floor of N/2</strong>.&nbsp;<ol><li>If yes, return the key&nbsp;</li><li>Else iterate forward.</li></ol></li></ol>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n\n<!-- Insert C++ Code of Better Approach Here -->\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint majorityElement(vector&lt;int&gt; v) {\n\n    //size of the given array:\n    int n = v.size();\n\n    //declaring a map:\n    map&lt;int, int&gt; mpp;\n\n    //storing the elements with its occurnce:\n    for (int i = 0; i &lt; n; i++) {\n        mpp[v[i]]++;\n    }\n\n    //searching for the majority element:\n    for (auto it : mpp) {\n        if (it.second &gt; (n / 2)) {\n            return it.first;\n        }\n    }\n\n    return -1;\n}\n\nint main()\n{\n    vector&lt;int&gt; arr = {2, 2, 1, 1, 1, 2, 2};\n    int ans = majorityElement(arr);\n    cout &lt;&lt; \"The majority element is: \" &lt;&lt; ans &lt;&lt; endl;\n    return 0;\n}\n\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\n<!-- Insert Java Code of Better Approach Here -->\nimport java.util.*;\n\npublic class tUf {\n    public static int majorityElement(int []v) {\n        //size of the given array:\n        int n = v.length;\n\n        //declaring a map:\n        HashMap&lt;Integer, Integer> mpp = new HashMap&lt;>();\n\n        //storing the elements with its occurnce:\n        for (int i = 0; i &lt; n; i++) {\n            int value = mpp.getOrDefault(v[i], 0);\n            mpp.put(v[i], value + 1);\n        }\n\n        //searching for the majority element:\n        for (Map.Entry&lt;Integer, Integer> it : mpp.entrySet()) {\n            if (it.getValue() > (n / 2)) {\n                return it.getKey();\n            }\n        }\n\n        return -1;\n    }\n\n    public static void main(String args[]) {\n        int[] arr = {2, 2, 1, 1, 1, 2, 2};\n        int ans = majorityElement(arr);\n        System.out.println(\"The majority element is: \" + ans);\n\n    }\n\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\n<!-- Insert Python Code of Better Approach Here -->\nfrom collections import Counter\n\ndef majorityElement(arr):\n    # Size of the given array\n    n = len(arr)\n\n    # Count the occurrences of each element using Counter\n    counter = Counter(arr)\n\n    # Searching for the majority element\n    for num, count in counter.items():\n        if count > (n // 2):\n            return num\n\n    return -1\n\narr = [2, 2, 1, 1, 1, 2, 2]\nans = majorityElement(arr)\nprint(\"The majority element is:\", ans)\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\n<!-- Insert javascript Code of Better Approach Here -->\nfunction majorityElement(arr) {\n    // Size of the given array\n    const n = arr.length;\n\n    // Creating a Map\n    const map = new Map();\n\n    // Storing the elements with their occurrences\n    for (let i = 0; i &lt; n; i++) {\n        const num = arr[i];\n        if (map.has(num)) {\n            map.set(num, map.get(num) + 1);\n        } else {\n            map.set(num, 1);\n        }\n    }\n\n    // Searching for the majority element\n    for (const [num, count] of map) {\n        if (count > Math.floor(n / 2)) {\n            return num;\n        }\n    }\n\n    return -1;\n}\n\nconst arr = [2, 2, 1, 1, 1, 2, 2];\nconst ans = majorityElement(arr);\nconsole.log(\"The majority element is:\", ans);\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Better Approach Here -->\nOutput: The majority element is: 2\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Better Approach Here -->\n<p><strong>Time Complexity: </strong>O(N*logN) + O(N), where N = size of the given array.<br><strong>Reason: </strong>We are using a map data structure. Insertion in the map takes logN time. And we are doing it for N elements. So, it results in the first term O(N*logN). The second O(N) is for checking which element occurs more than floor(N/2) times. If we use unordered_map instead, the first term will be O(N) for the best and average case and for the worst case, it will be O(N<sup>2</sup>).</p>\n<p><strong>Space Complexity: </strong>O(N) as we are using a map data structure.</p>\n</p>\n</details>\n</div>\n</details>\n</div>\n<!-- Better Approach Ends from here -->\n\n\n<!-- Optimal Approach Starts from here -->\n\n<div id=\"optimal-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nOptimal Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm of Better Approach Here -->\n<h3><strong>Optimal Approach</strong>: <strong>Moore\u2019s Voting Algorithm:</strong></h3>\n<h3><strong>Intuition: </strong></h3>\n<p>If the array contains a majority element, its occurrence must be greater than the floor(N/2). Now, we can say that the count of minority elements and majority elements is equal up to a certain point in the array. So when we traverse through the array we try to keep track of the count of elements and the element itself for which we are tracking the count.\u00a0</p>\n<p>After traversing the whole array, we will check the element stored in the variable. If the question states that the array must contain a majority element, the stored element will be that one but if the question does not state so, then we need to check if the stored element is the majority element or not. If not, then the array does not contain any majority element.</p>\n<h3><strong>Approach:</strong>&nbsp;</h3>\n<ol><li>Initialize 2 variables:<br><strong>Count</strong> \u2013&nbsp; for tracking the count of element<br><strong>Element</strong> \u2013 for which element we are counting</li><li>Traverse through the given array.<ol><li>If <strong>Count</strong> is 0 then store the current element of the array as <strong>Element</strong>.</li><li>If the current element and <strong>Element</strong> are the same increase the <strong>Count</strong> by 1.</li><li>If they are different decrease the <strong>Count</strong> by 1.</li></ol></li><li>The integer present in <strong>Element</strong> should be the result we are expecting&nbsp;</li></ol>\n<p><strong>Dry Run:</strong></p>\n<p>The yellow-colored element represents the current element.</p>\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/03/Screenshot-2023-03-18-163852.png\" alt=\"\" class=\"wp-image-7977\"/></figure>\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/03/image.png\" alt=\"\" class=\"wp-image-7978\"/></figure>\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/03/Screenshot-2023-03-18-164012.png\" alt=\"\" class=\"wp-image-7979\"/></figure>\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/03/Screenshot-2023-03-18-164100.png\" alt=\"\" class=\"wp-image-7980\"/></figure>\n<p>Basically, we are trying to keep track of the occurrences of the majority element and minority elements dynamically. That is why, in iteration 4, the count becomes 0 as the occurrence of Element and the occurrence of the other elements are the same. So, they canceled each other. This is how the process works. The element with the most occurrence will remain and the rest will cancel themselves.</p>\n<p>Here, we can see that 2 is the majority element. But if in this array, the last two elements were 3, then the Element variable would have stored 3 instead of 2. For that, we need to check if the Element is the majority element by traversing the array once more. But if the question guarantees that the given array contains a majority element, then we can bet the Element will store the majority one.</p>\n<p><strong>Note: </strong><em>For a better understanding of intuition, please watch the video at the bottom of the page.</em></p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n\n<!-- Insert C++ code of Optimal Approach Here-->\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint majorityElement(vector&lt;int&gt; v) {\n\n    //size of the given array:\n    int n = v.size();\n    int cnt = 0; // count\n    int el; // Element\n\n    //applying the algorithm:\n    for (int i = 0; i &lt; n; i++) {\n        if (cnt == 0) {\n            cnt = 1;\n            el = v[i];\n        }\n        else if (el == v[i]) cnt++;\n        else cnt--;\n    }\n\n    //checking if the stored element\n    // is the majority element:\n    int cnt1 = 0;\n    for (int i = 0; i &lt; n; i++) {\n        if (v[i] == el) cnt1++;\n    }\n\n    if (cnt1 &gt; (n / 2)) return el;\n    return -1;\n}\n\nint main()\n{\n    vector&lt;int&gt; arr = {2, 2, 1, 1, 1, 2, 2};\n    int ans = majorityElement(arr);\n    cout &lt;&lt; \"The majority element is: \" &lt;&lt; ans &lt;&lt; endl;\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\n<!-- Insert Java code of Optimal Approach Here -->\nimport java.util.*;\n\npublic class tUf {\n    public static int majorityElement(int []v) {\n        //size of the given array:\n        int n = v.length;\n        int cnt = 0; // count\n        int el = 0; // Element\n\n        //applying the algorithm:\n        for (int i = 0; i &lt; n; i++) {\n            if (cnt == 0) {\n                cnt = 1;\n                el = v[i];\n            } else if (el == v[i]) cnt++;\n            else cnt--;\n        }\n\n        //checking if the stored element\n        // is the majority element:\n        int cnt1 = 0;\n        for (int i = 0; i &lt; n; i++) {\n            if (v[i] == el) cnt1++;\n        }\n\n        if (cnt1 &gt; (n / 2)) return el;\n        return -1;\n    }\n\n    public static void main(String args[]) {\n        int[] arr = {2, 2, 1, 1, 1, 2, 2};\n        int ans = majorityElement(arr);\n        System.out.println(\"The majority element is: \" + ans);\n\n    }\n\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\n<!-- Insert Python code of Optimal Approach Here -->\ndef majorityElement(arr):\n    # Size of the given array\n    n = len(arr)\n    cnt = 0  # Count\n    el = None  # Element\n\n    # Applying the algorithm\n    for i in range(n):\n        if cnt == 0:\n            cnt = 1\n            el = arr[i]\n        elif el == arr[i]:\n            cnt += 1\n        else:\n            cnt -= 1\n\n    # Checking if the stored element is the majority element\n    cnt1 = 0\n    for i in range(n):\n        if arr[i] == el:\n            cnt1 += 1\n\n    if cnt1 > (n / 2):\n        return el\n    return -1\n\n\narr = [2, 2, 1, 1, 1, 2, 2]\nans = majorityElement(arr)\nprint(\"The majority element is:\", ans)\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\n<!-- Insert Python code of Optimal Approach Here -->\nfunction majorityElement(arr) {\n    // Size of the given array\n    let n = arr.length;\n    let cnt = 0; // Count\n    let el; // Element\n\n    // Applying the algorithm\n    for (let i = 0; i &lt; n; i++) {\n        if (cnt === 0) {\n            cnt = 1;\n            el = arr[i];\n        } else if (el === arr[i]) {\n            cnt++;\n        } else {\n            cnt--;\n        }\n    }\n\n    // Checking if the stored element is the majority element\n    let cnt1 = 0;\n    for (let i = 0; i &lt; n; i++) {\n        if (arr[i] === el) {\n            cnt1++;\n        }\n    }\n\n    if (cnt1 > Math.floor(n / 2)) {\n        return el;\n    }\n    return -1;\n}\n\nlet arr = [2, 2, 1, 1, 1, 2, 2];\nlet ans = majorityElement(arr);\nconsole.log(\"The majority element is:\", ans);\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Optimal Apporach Here -->\nOutput: The majority element is: 2\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Optimal Approach-->\n<p><strong>Time Complexity: </strong>O(N) + O(N), where N = size of the given array.<br><strong>Reason: </strong>The first O(N) is to calculate the count and find the expected majority element. The second one is to check if the expected element is the majority one or not.</p>\n<p><strong>Note: </strong><em>If the question states that the array must contain a majority element, in that case, we do not need the second check. Then the time complexity will boil down to O(N).</em></p>\n<p><strong>Space Complexity: </strong>O(1) as we are not using any extra space.</p>\n</p>\n</details>\n</div>\n</details>\n</div>\n<!-- Optimal Approach Starts from here -->\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n<details>\n<summary class=\"main-summary\">\n<span>\nVideo Explanation\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"yt-video-wrapper\">\n\n<!-- Insert iframe embed Link of Youtube Video-->\n<iframe class=\"lazy-loaded\" loading=\"lazy\" title=\"Majority Element I\" width=\"810\" height=\"456\" data-lazy-type=\"iframe\" data-src=\"https://www.youtube.com/embed/nP_ns3uSh80\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\" src=\"https://www.youtube.com/embed/nP_ns3uSh80?feature=oembed\"></iframe><noscript>\n<iframe loading=\"lazy\" title=\"Majority Element I\" width=\"810\" height=\"456\" src=\"https://www.youtube.com/embed/nP_ns3uSh80\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe></noscript>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script>\n\nconst codeSections = document.querySelectorAll('.code-section');\n\n// Get last selected language from localStorage or set default value\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\n// Update last selected language for all sections and store in localStorage\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\n// Handle copy button click event\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\n// Set initial state of the tabs\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<script>\nconst codeSections = document.querySelectorAll('.code-section');\n\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script src=\"https://takeuforward.org/UXApproachDropDowns/3ApproachJSScript.js\"></script>\n<!-- /wp:html -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;<meta charset=\"utf-8\"><strong><a data-type=\"URL\" data-id=\"https://www.linkedin.com/in/aravind-balaji-5a9564170/\" href=\"https://www.linkedin.com/in/aravind-balaji-5a9564170/\" target=\"_blank\" rel=\"noreferrer noopener\">Aravind Balaji</a></strong>&nbsp;<em>,&nbsp;<strong><em><a href=\"https://www.linkedin.com/in/imsudip/\" target=\"_blank\" rel=\"noreferrer noopener\">Sudip Ghosh</a></em></strong></em></em> and <a href=\"https://www.linkedin.com/in/kriti39/\" target=\"_blank\" rel=\"noopener\" title=\"\"><strong>KRITIDIPTA GHOSH</strong> </a><em>for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/contribute/help-us-grow-takeuforward/\">please check out this articl</a><em>e</em></p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->"
}