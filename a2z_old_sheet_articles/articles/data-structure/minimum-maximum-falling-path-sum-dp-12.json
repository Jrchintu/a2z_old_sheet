{
    "dislikes": 0,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:10:00 GMT+0530 (India Standard Time)",
    "slug": "minimum-maximum-falling-path-sum-dp-12",
    "aid": "1646",
    "title": "Minimum/Maximum Falling Path Sum (DP-12)",
    "tuf_plus": "",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "dynamic-programming",
            "topic-title": "Dynamic Programming"
        },
        {
            "topic-id": "recursion",
            "topic-title": "Recursion"
        }
    ],
    "content": "<!-- wp:paragraph -->\n<p>In this article, we will solve the most asked coding interview problem: Minimum/Maximum falling path sum.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Problem Link: </strong><a href=\"https://www.codingninjas.com/codestudio/problems/maximum-path-sum-in-the-matrix_797998?source=youtube&amp;campaign=striver_dp_videos&amp;utm_source=youtube&amp;utm_medium=affiliate&amp;utm_campaign=striver_dp_videos\"><strong>Variable Starting and Ending Point</strong></a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Problem Description:&nbsp;</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We are given an \u2018N*M\u2019 matrix. We need to find the maximum path sum from any cell of the first row to any cell of the last row.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>At every cell we can move in three directions: to the bottom cell (\u2193), to the bottom-right cell(\u2198), or to the bottom-left cell(\u2199).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n<details class=\"article_example_details\">\n<summary class=\"article_example_summary\">\n<span><strong>\nExamples\n</strong>\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"atricle_example_content\">\n<pre class=\"wp-block-preformatted\"><!-- Insert New Examples Here -->\n<pre class=\"wp-block-preformatted\"><strong>Example:</strong>\n\n<img width=\"655\" height=\"369\" src=\"https://lh6.googleusercontent.com/xpFMcLpnK7M66ZKw8tK6zXQDNtd45bCEmY6BkkbOtb3jJzQiv1NreJTv63xCkkTOuMG-C0KjmN1cmP2m2hVxx7IDUS38Ut78Com243xZDJHO6dMsinsc5R_EhT7htyCp0s-TxLDw\"></pre>\n</pre>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Practice Section-->\n<div class=\"practice\">\n<span><strong>Practice: </strong></span>\n<div class=\"problem-buttons\">\n\n<!-- Add Problem Link inside href -->\n<a href=\"https://www.codingninjas.com/studio/problems/maximum-path-sum-in-the-matrix_797998?utm_source=striver&amp;utm_medium=website&amp;utm_campaign=a_zcoursetuf\" target=\"_blank\" rel=\"noopener\">\n<span>Solve Problem</span>\n<img src=\"https://static.takeuforward.org/wp/uploads/2023/04/Group-11-5.png\" alt=\"code-studio\">\n</a>\n</div>\n</div>\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\nyourself first. </em></p>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<div class=\"horizontal_navbar_dsa_article\">\n<div class=\"grid_container_three\">\n<a href=\"#brute-force-approach\" class=\"three-boxes box-a\">\nMemorization approach\n</a>\n<a href=\"#better-approach\" class=\"three-boxes box-b\">\nTabulation approach\n</a>\n<a href=\"#optimal-approach\" class=\"three-boxes box-c\">\nSpace Optimization\n</a>\n<a href=\"#dsa_article_video_explanation\" class=\"three-boxes box-d\">\n<svg width=\"26\" height=\"26\" viewBox=\"0 0 20 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M8 10L13.19 7L8 4V10ZM19.56 2.17C19.69 2.64 19.78 3.27 19.84 4.07C19.91 4.87 19.94 5.56 19.94 6.16L20 7C20 9.19 19.84 10.8 19.56 11.83C19.31 12.73 18.73 13.31 17.83 13.56C17.36 13.69 16.5 13.78 15.18 13.84C13.88 13.91 12.69 13.94 11.59 13.94L10 14C5.81 14 3.2 13.84 2.17 13.56C1.27 13.31 0.69 12.73 0.44 11.83C0.31 11.36 0.22 10.73 0.16 9.93C0.0900001 9.13 0.0599999 8.44 0.0599999 7.84L0 7C0 4.81 0.16 3.2 0.44 2.17C0.69 1.27 1.27 0.69 2.17 0.44C2.64 0.31 3.5 0.22 4.82 0.16C6.12 0.0899998 7.31 0.0599999 8.41 0.0599999L10 0C14.19 0 16.8 0.16 17.83 0.44C18.73 0.69 19.31 1.27 19.56 2.17Z\" fill=\"red\"></path>\n</svg>\n\n</a>\n<div class=\"box-e tooltip\">\n<svg viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M12.842 9.25L11.9577 10.17C11.2502 10.89 10.8081 11.5 10.8081 13H8.84297V12.5C8.84297 11.39 9.28511 10.39 9.99255 9.67L11.2109 8.41C11.5745 8.05 11.7906 7.55 11.7906 7C11.7906 6.46957 11.5836 5.96086 11.2151 5.58579C10.8465 5.21071 10.3467 5 9.82552 5C9.30434 5 8.80451 5.21071 8.43598 5.58579C8.06745 5.96086 7.86041 6.46957 7.86041 7H5.89531C5.89531 5.93913 6.30938 4.92172 7.04644 4.17157C7.7835 3.42143 8.78316 3 9.82552 3C10.8679 3 11.8675 3.42143 12.6046 4.17157C13.3417 4.92172 13.7557 5.93913 13.7557 7C13.7543 7.84324 13.4259 8.65183 12.842 9.25ZM10.8081 17H8.84297V15H10.8081M9.82552 0C8.53521 0 7.25754 0.258658 6.06545 0.761205C4.87337 1.26375 3.79021 2.00035 2.87783 2.92893C1.03519 4.8043 0 7.34784 0 10C0 12.6522 1.03519 15.1957 2.87783 17.0711C3.79021 17.9997 4.87337 18.7362 6.06545 19.2388C7.25754 19.7413 8.53521 20 9.82552 20C12.4314 20 14.9306 18.9464 16.7732 17.0711C18.6158 15.1957 19.651 12.6522 19.651 10C19.651 4.47 15.2296 0 9.82552 0Z\" fill=\"black\"></path>\n</svg>\n<div class=\"bottom\">\n<p>Expand any one approach by clicking the given options in the bar. Clicking one approach on bar,\ncloses all other expands. You can manually expand more than one approach at a time</p>\n<i></i>\n</div>\n\n</div>\n</div>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Approaches Drop-Down -->\n<div class=\"dsa_article_dropdown_approachs \">\n\n<!-- Brute Force Approach Starts from here -->\n<div id=\"brute-force-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nMemorization Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n<p>This question is a slight modification of the question discussed in  <a href=\"https://takeuforward.org/data-structure/minimum-path-sum-in-triangular-grid-dp-11/\" target=\"_blank\" rel=\"noreferrer noopener nofollow\" title=\"Minimum Path Sum in a Triangular Grid\"><strong>Minimum Path Sum in a Triangular Grid</strong></a>. In the previous problem, we were given a fixed starting and a variable ending point, whereas here the problem states that the starting point can be any cell from the first row and the ending point can be any cell in the last row.</p>\n<p><strong>Why a Greedy Solution doesn\u2019t work?</strong></p>\n<p>As we have to return the minimum path sum, the first approach that comes to our mind is to take a greedy approach and always form a path by locally choosing the cheaper option. But there is no <strong>\u2018uniformity\u2019 </strong>in the values of the string, therefore it can happen that whenever we are making a local choice that gives us a better path, we actually take a path which in the later stages is giving us the lesser path sum.</p>\n<p>As a greedy solution doesn\u2019t work, our next choice will be to try out all the possible paths. To generate all possible paths we will use <strong>recursion</strong>.</p>\n<p><strong>Steps to form the recursive solution:&nbsp;</strong></p>\n<p>We will first form the recursive solution by the three points mentioned in <a href=\"https://takeuforward.org/data-structure/dynamic-programming-introduction/\">Dynamic Programming Introduction</a>.&nbsp;</p>\n<p><strong>Step 1: </strong>Express the problem in terms of indexes.</p>\n<p>We are given an \u2018N*M\u2019 matrix. We can define the function with two parameters i and j, where i and j represent the row and column of the matrix.</p>\n<p>Now our ultimate aim is to reach the last row. We can define f(i,j) such that it gives us the maximum path sum from any cell in the first row to the cell[i][j].</p>\n<p><img width=\"454\" height=\"121\" src=\"https://lh6.googleusercontent.com/YY20jSpg0WFWhYngVMHvxpfkt8hFEAwM7bD_T7VQHeoWS2CRdpaKoA5rgYZmVL99T1z8ymBcbohvXhIOerbphbHamNbAAfb6cQSg6Os5EYJIyVblovphK1KAHlvStzGvpl-RctJf\"></p>\n<p>If we see the figure given below:</p>\n<p><img width=\"624\" height=\"261\" src=\"https://lh5.googleusercontent.com/1pbVTNw9xhK8W9V2gMrqL8OYED9AZbllCx6KfyrDKQyEkdMKAQ0N2qdhCiHvDmI4kbzc5W7-iEUhqwAqf2D9w8CjZc9oTOX_nXynOK2eMl7J1tpP8oP0WP0jsJj0gTnokGBjHPJ0\"></p>\n<p>We have a top row and a bottom row, we will be writing a recursion in the direction of the last row to the first row. For the last row, i=N-1 therefore we need to find four different answers:</p>\n<p><strong>f(N-1,0), f(N-1,1), f(N-1,2), f(N-1,3)</strong></p>\n<p>These recursive calls will give the maximum path sum from a cell in the first row to the respective four cells for which the recursion calls are made. We need to return the <strong>maximum</strong> value among these as the final answer.</p>\n<p><strong>Base Case:</strong></p>\n<p>There will be the following base cases:</p>\n<ul><li>When i == 0, it means we are at the first row, so the min path from that cell to the first will be the value of that cell itself, hence we return mat[0][j].</li></ul>\n<p>At every cell we have three options (we are writing recursion from the last row to the first row): to the top cell (\u2191), to the top-right cell(\u2197), or to the top-left cell(\u2196).</p>\n<p>As we are moving to the top cell (\u2191), at max we will reach the first row, from where we return, so we will never go out of the bounding index.</p>\n<p>To move to the top-left cell(\u2196) or to the top-right cell(\u2197), it can happen that we may go out of bound as shown in the figure(below). So we need to handle it, we can return -1e9, whenever we go out of bound, in this way this path will not be selected by the calling function as we have to return the maximum path.</p>\n<p><img width=\"624\" height=\"351\" src=\"https://lh3.googleusercontent.com/lhtbJN62YNeHZuvESPG3By3xHYEFcWsUiF7ykgpo9LchKuagCvi_BhQq2H8JtGrFJQv74Xbko_GngE3V_NXrZuevKNhoUix9DpkOZmqU3sw8iJR29BbNyQDnJ0Bg3uGQ2e4UBelU\"></p>\n<ul><li>If j&lt;0 or j&gt;=M , then we return -1e9&nbsp;</li></ul>\n<p>The pseudocode till this step will be:</p>\n<p><img width=\"339\" height=\"312\" src=\"https://lh5.googleusercontent.com/xxd_ExLplQePql0zyKE02DajjhGjtIkRJcoJCpZu9P2BGAH0HdA5Bv80Lo_EpNHHzz6_sb4Isbd4gewQTPrLt74fTel7yFLm37zjdWNihwBr5I6TBN_Z3A2-cJsJWddIXqsgvDIJ\"></p>\n<p><strong>Step 2: </strong>Try out all possible choices at a given index.</p>\n<p>At every cell we have three options (we are writing recursion from the last row to the first row): to the top cell (\u2191), to the top-right cell(\u2197), or to the top-left cell(\u2196).</p>\n<p>To go to the top, we will decrease i by 1, and to move towards top-left, we will decrease both i and j by 1 whereas to move to top-right, we will decrease i by 1 and increase j by 1.</p>\n<p>Now when we get our answer for the recursive call (f(i-1,j), f(i-1,j-1) or f(i-1,j+1)), we need to also add the current cell value to it as we have to include it too for the current path sum.</p>\n<p><img width=\"376\" height=\"350\" src=\"https://lh3.googleusercontent.com/Uhk2KQWQeTlFobG0pBs704UV6pWOa5cDJgrSA9ggW25HjKFxTmSAaI7GjpX4WzOg6BflrkZSfTyuOXLo14YgVK8vy5aAXrCldWs-n-9NvpqHUPU_7JbPuJDG-pGKMfKyEnp5STg1\"></p>\n<p><strong>Step 3:&nbsp; Take the maximum of all choices</strong></p>\n<p>As we have to find the<strong> maximum path sum </strong>of<strong> </strong>all the possible unique paths, we will return the <strong>maximum</strong> of all the choices(up, leftDiagonal, right diagonal)&nbsp;</p>\n<p>The final pseudocode after steps 1, 2, and 3:</p>\n<p><img width=\"418\" height=\"466\" src=\"https://lh6.googleusercontent.com/2RMnDg6Di9rUZeY8yBSvNpuQ-SqrhR9fI2lfWG2vXv40je3ACjjIanN2g9jbezfkEy73CdxIqgTr6FqS4ny8ov1tYiKsq1VN-OnbVqTtyHqFl0aD6bSc9ByGw-jaqnmN0L-eOZyQ\"></p>\n<p><strong>Steps to memoize a recursive solution:</strong></p>\n<p>If we draw the recursion tree, we will see that there are overlapping subproblems. In order to convert a recursive solution the following steps will be taken:</p>\n<ol><li>Create a dp array of size [N][M]</li><li>Whenever we want to find the answer of a particular row and column (say f(i,j)), we first check whether the answer is already calculated using the dp array(i.e dp[i][j]!= -1 ). If yes, simply return the value from the dp array.</li><li>If not, then we are finding the answer for the given values for the first time, we will use the recursive relation as usual but before returning from the function, we will set dp[i][j] to the solution we get.</li></ol>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h>\nusing namespace std;\n\n// Function to recursively find the maximum path sum for a given cell\nint getMaxUtil(int i, int j, int m, vector&lt;vector&lt;int>> &amp;matrix, vector&lt;vector&lt;int>> &amp;dp) {\n    // Base Conditions\n    if (j &lt; 0 || j >= m)\n        return -1e9; // A very large negative value to represent an invalid path\n    if (i == 0)\n        return matrix[0][j]; // The maximum path sum for the top row is the value itself\n    \n    if (dp[i][j] != -1)\n        return dp[i][j]; // If the result for this cell is already calculated, return it\n    \n    // Calculate the maximum path sum by considering three possible directions: up, left diagonal, and right diagonal\n    int up = matrix[i][j] + getMaxUtil(i - 1, j, m, matrix, dp);\n    int leftDiagonal = matrix[i][j] + getMaxUtil(i - 1, j - 1, m, matrix, dp);\n    int rightDiagonal = matrix[i][j] + getMaxUtil(i - 1, j + 1, m, matrix, dp);\n    \n    // Store the maximum of the three paths in dp\n    return dp[i][j] = max(up, max(leftDiagonal, rightDiagonal));\n}\n\n// Function to find the maximum path sum in the given matrix\nint getMaxPathSum(vector&lt;vector&lt;int>> &amp;matrix) {\n    int n = matrix.size(); // Number of rows in the matrix\n    int m = matrix[0].size(); // Number of columns in the matrix\n    \n    vector&lt;vector&lt;int>> dp(n, vector&lt;int>(m, -1)); // Memoization table to store computed results\n    \n    int maxi = INT_MIN; // Initialize the maximum path sum to a very small value\n    \n    // Iterate through each cell in the first row to find the maximum path sum starting from each of them\n    for (int j = 0; j &lt; m; j++) {\n        int ans = getMaxUtil(n - 1, j, m, matrix, dp); // Calculate the maximum path sum for the last row\n        maxi = max(maxi, ans); // Update the maximum path sum if a larger one is found\n    }\n    \n    return maxi; // Return the maximum path sum\n}\n\nint main() {\n    // Define the matrix as a 2D vector\n    vector&lt;vector&lt;int>> matrix{{1, 2, 10, 4},\n                                {100, 3, 2, 1},\n                                {1, 1, 20, 2},\n                                {1, 2, 2, 1}};\n    \n    // Call the getMaxPathSum function and print the result\n    cout &lt;&lt; getMaxPathSum(matrix);\n\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\nclass TUF {\n    // Function to find the maximum path sum in the matrix using dynamic programming\n    static int getMaxUtil(int i, int j, int m, int[][] matrix, int[][] dp) {\n        // Base Conditions\n        if (j &lt; 0 || j >= m)\n            return (int) Math.pow(-10, 9);\n        if (i == 0)\n            return matrix[0][j];\n\n        if (dp[i][j] != -1)\n            return dp[i][j];\n\n        // Calculate three possible paths: moving up, left diagonal, and right diagonal\n        int up = matrix[i][j] + getMaxUtil(i - 1, j, m, matrix, dp);\n        int leftDiagonal = matrix[i][j] + getMaxUtil(i - 1, j - 1, m, matrix, dp);\n        int rightDiagonal = matrix[i][j] + getMaxUtil(i - 1, j + 1, m, matrix, dp);\n\n        // Store the maximum of the three paths in dp\n        return dp[i][j] = Math.max(up, Math.max(leftDiagonal, rightDiagonal));\n    }\n\n    // Function to find the maximum path sum in the matrix\n    static int getMaxPathSum(int[][] matrix) {\n        int n = matrix.length;\n        int m = matrix[0].length;\n\n        int dp[][] = new int[n][m];\n        for (int row[] : dp)\n            Arrays.fill(row, -1);\n\n        int maxi = Integer.MIN_VALUE;\n\n        // For each starting column, find the maximum path sum and update maxi\n        for (int j = 0; j &lt; m; j++) {\n            int ans = getMaxUtil(n - 1, j, m, matrix, dp);\n            maxi = Math.max(maxi, ans);\n        }\n\n        return maxi;\n    }\n\n    public static void main(String args[]) {\n        int matrix[][] = {{1, 2, 10, 4},\n                          {100, 3, 2, 1},\n                          {1, 1, 20, 2},\n                          {1, 2, 2, 1}};\n\n        // Call the getMaxPathSum function and print the result\n        System.out.println(getMaxPathSum(matrix));\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\nimport sys\n\n# Recursive function to find the maximum path sum starting from cell (i, j)\ndef getMaxUtil(i, j, m, matrix, dp):\n    # Base case: If j is out of bounds, return a large negative value\n    if j &lt; 0 or j >= m:\n        return -int(1e9)\n    \n    # Base case: If we are at the top row (i == 0), return the value in the current cell\n    if i == 0:\n        return matrix[0][j]\n    \n    # Check if the maximum path sum for this cell has already been computed\n    if dp[i][j] != -1:\n        return dp[i][j]\n    \n    # Calculate three possible moves: going up, going up-left, and going up-right\n    up = matrix[i][j] + getMaxUtil(i - 1, j, m, matrix, dp)\n    leftDiagonal = matrix[i][j] + getMaxUtil(i - 1, j - 1, m, matrix, dp)\n    rightDiagonal = matrix[i][j] + getMaxUtil(i - 1, j + 1, m, matrix, dp)\n    \n    # Store the maximum of the three moves in the memoization table\n    dp[i][j] = max(up, max(leftDiagonal, rightDiagonal))\n    return dp[i][j]\n\n# Function to find the maximum path sum in the matrix\ndef getMaxPathSum(matrix):\n    n = len(matrix)  # Number of rows\n    m = len(matrix[0])  # Number of columns\n    dp = [[-1 for j in range(m)] for i in range(n)]  # Initialize a memoization table\n    maxi = -sys.maxsize  # Initialize the maximum sum to a large negative value\n    \n    # Iterate through the first row and find the maximum path sum starting from each cell\n    for j in range(m):\n        ans = getMaxUtil(n - 1, j, m, matrix, dp)\n        maxi = max(maxi, ans)\n    \n    return maxi  # Return the maximum path sum\n\ndef main():\n    # Define the input matrix\n    matrix = [[1, 2, 10, 4], [100, 3, 2, 1], [1, 1, 20, 2], [1, 2, 2, 1]]\n    \n    # Call the getMaxPathSum function and print the result\n    print(getMaxPathSum(matrix))\n\nif __name__ == \"__main__\":\n    main()\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\nfunction minimumPathSum(triangle) {\n  const n = triangle.length;\n\n  // Create an array to store the minimum path sums\n  const dp = new Array(n);\n\n  // Initialize the dp array with the values from the bottom row of the triangle\n  dp[n - 1] = [...triangle[n - 1]];\n\n  // Start from the second-to-last row and work upwards\n  for (let i = n - 2; i >= 0; i--) {\n    dp[i] = [];\n\n    for (let j = 0; j &lt; triangle[i].length; j++) {\n      // Calculate the minimum path sum by considering the down and diagonal moves\n      const down = triangle[i][j] + dp[i + 1][j];\n      const diagonal = triangle[i][j] + dp[i + 1][j + 1];\n\n      // Store the minimum of down and diagonal in the dp array\n      dp[i][j] = Math.min(down, diagonal);\n    }\n  }\n\n  // The minimum path sum will be stored at dp[0][0]\n  return dp[0][0];\n}\n\nfunction main() {\n  const triangle = [\n    [1],\n    [2, 3],\n    [3, 6, 7],\n    [8, 9, 6, 10]\n  ];\n\n  const result = minimumPathSum(triangle);\n\n  console.log(\"Minimum Path Sum:\", result);\n}\n\n// Call the main function to execute the code\nmain();\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Brute Force Here -->\n</p><p><strong>Output:</strong> 105\n\n</p>\n<p></p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n<!-- Insert Time and Space Complexity of Brute Force Here -->\n<p><strong>Time Complexity: O(N*N)</strong></p>\n<p>Reason: At max, there will be M*N calls of recursion to solve a new problem,</p>\n<p><strong>Space Complexity: O(N) + O(N*M)</strong></p>\n<p>Reason: We are using a recursion stack space: O(N), where N is the path length and an external DP Array of size \u2018N*M\u2019.</p>\n</p>\n</details>\n</div>\n</details>\n</div>\n<!-- Brute Force Approach Ends here -->\n\n\n<!-- Better Approach Starts from here -->\n\n<div id=\"better-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nTabulation Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition For Better Approach Here -->\n<p>The steps to convert to the tabular solution are given below:</p>\n<ul><li>Declare a dp[] array of size [N][M].</li><li>First initialize the base condition values, i.e the first row of the dp array to the first row of the input matrix.</li><li>We want to move from the first row to the last row.Whenever we compute values for a cell, we want to have all the values required to calculate it.</li><li>If we see the memoized code, values required for dp[i][j] are: dp[i-1][j], dp[i-1][j-1] and dp[i-1][j+1]. So we only need the values from the \u2018i-1\u2019 row.</li><li>We have already filled the first row (i=0), if we start from row \u20181\u2019 and move downwards we will find the values correctly.</li><li>We can use two nested loops to have this traversal.</li><li>At last we need to return the maximum among the last row of dp array as our answer.</li></ul>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h>\nusing namespace std;\n\n// Function to find the maximum path sum in the given matrix\nint getMaxPathSum(vector&lt;vector&lt;int>>&amp; matrix) {\n    int n = matrix.size(); // Number of rows in the matrix\n    int m = matrix[0].size(); // Number of columns in the matrix\n\n    // Create a 2D DP (dynamic programming) array to store maximum path sums\n    vector&lt;vector&lt;int>> dp(n, vector&lt;int>(m, 0));\n\n    // Initialize the first row of dp with values from the matrix (base condition)\n    for (int j = 0; j &lt; m; j++) {\n        dp[0][j] = matrix[0][j];\n    }\n\n    // Iterate through the matrix rows starting from the second row\n    for (int i = 1; i &lt; n; i++) {\n        for (int j = 0; j &lt; m; j++) {\n            // Calculate the maximum path sum for the current cell considering three possible directions: up, left diagonal, and right diagonal\n\n            // Up direction\n            int up = matrix[i][j] + dp[i - 1][j];\n\n            // Left diagonal direction (if it's a valid move)\n            int leftDiagonal = matrix[i][j];\n            if (j - 1 >= 0) {\n                leftDiagonal += dp[i - 1][j - 1];\n            } else {\n                leftDiagonal += -1e9; // A very large negative value to represent an invalid path\n            }\n\n            // Right diagonal direction (if it's a valid move)\n            int rightDiagonal = matrix[i][j];\n            if (j + 1 &lt; m) {\n                rightDiagonal += dp[i - 1][j + 1];\n            } else {\n                rightDiagonal += -1e9; // A very large negative value to represent an invalid path\n            }\n\n            // Store the maximum of the three paths in dp\n            dp[i][j] = max(up, max(leftDiagonal, rightDiagonal));\n        }\n    }\n\n    // Find the maximum value in the last row of dp, which represents the maximum path sums ending at each cell\n    int maxi = INT_MIN;\n    for (int j = 0; j &lt; m; j++) {\n        maxi = max(maxi, dp[n - 1][j]);\n    }\n\n    // The maximum path sum is the maximum value in the last row\n    return maxi;\n}\n\nint main() {\n    // Define the matrix as a 2D vector\n    vector&lt;vector&lt;int>> matrix{{1, 2, 10, 4},\n                               {100, 3, 2, 1},\n                               {1, 1, 20, 2},\n                               {1, 2, 2, 1}};\n\n    // Call the getMaxPathSum function and print the result\n    cout &lt;&lt; getMaxPathSum(matrix);\n\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\nclass TUF {\n    // Function to find the maximum path sum in the matrix using dynamic programming\n    static int getMaxPathSum(int[][] matrix) {\n        int n = matrix.length;\n        int m = matrix[0].length;\n\n        int dp[][] = new int[n][m];\n\n        // Initializing the first row - base condition\n        for (int j = 0; j &lt; m; j++) {\n            dp[0][j] = matrix[0][j];\n        }\n\n        // Calculate the maximum path sum for each cell in the matrix\n        for (int i = 1; i &lt; n; i++) {\n            for (int j = 0; j &lt; m; j++) {\n                int up = matrix[i][j] + dp[i - 1][j];\n\n                int leftDiagonal = matrix[i][j];\n                if (j - 1 >= 0) {\n                    leftDiagonal += dp[i - 1][j - 1];\n                } else {\n                    leftDiagonal += (int) Math.pow(-10, 9);\n                }\n\n                int rightDiagonal = matrix[i][j];\n                if (j + 1 &lt; m) {\n                    rightDiagonal += dp[i - 1][j + 1];\n                } else {\n                    rightDiagonal += (int) Math.pow(-10, 9);\n                }\n\n                // Store the maximum of the three paths in dp\n                dp[i][j] = Math.max(up, Math.max(leftDiagonal, rightDiagonal));\n            }\n        }\n\n        // Find the maximum value in the last row of dp\n        int maxi = Integer.MIN_VALUE;\n        for (int j = 0; j &lt; m; j++) {\n            maxi = Math.max(maxi, dp[n - 1][j]);\n        }\n\n        return maxi;\n    }\n\n    public static void main(String args[]) {\n        int matrix[][] = {{1, 2, 10, 4},\n                          {100, 3, 2, 1},\n                          {1, 1, 20, 2},\n                          {1, 2, 2, 1}};\n\n        // Call the getMaxPathSum function and print the result\n        System.out.println(getMaxPathSum(matrix));\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\nimport sys\n\n# Function to find the maximum path sum in the matrix\ndef getMaxPathSum(matrix):\n    n = len(matrix)  # Number of rows\n    m = len(matrix[0])  # Number of columns\n    \n    # Initialize a dynamic programming table (dp) with zeros\n    dp = [[0 for j in range(m)] for i in range(n)]\n    \n    # Initializing the first row of dp as the base condition\n    for j in range(m):\n        dp[0][j] = matrix[0][j]\n    \n    # Iterate through the matrix to compute the maximum path sum\n    for i in range(1, n):\n        for j in range(m):\n            # Calculate the three possible moves: up, left diagonal, and right diagonal\n            up = matrix[i][j] + dp[i - 1][j]\n            \n            # Handle left diagonal\n            left_diagonal = matrix[i][j]\n            if j - 1 >= 0:\n                left_diagonal += dp[i - 1][j - 1]\n            else:\n                left_diagonal += -int(1e9)  # A large negative value if out of bounds\n            \n            # Handle right diagonal\n            right_diagonal = matrix[i][j]\n            if j + 1 &lt; m:\n                right_diagonal += dp[i - 1][j + 1]\n            else:\n                right_diagonal += -int(1e9)  # A large negative value if out of bounds\n            \n            # Store the maximum of the three moves in dp\n            dp[i][j] = max(up, left_diagonal, right_diagonal)\n    \n    # Find the maximum path sum in the last row of dp\n    maxi = -sys.maxsize\n    for j in range(m):\n        maxi = max(maxi, dp[n - 1][j])\n    \n    return maxi  # Return the maximum path sum\n\ndef main():\n    # Define the input matrix\n    matrix = [[1, 2, 10, 4], [100, 3, 2, 1], [1, 1, 20, 2], [1, 2, 2, 1]]\n    \n    # Call the getMaxPathSum function and print the result\n    print(getMaxPathSum(matrix))\n\nif __name__ == \"__main__\":\n    main()\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\nfunction getMaxPathSum(matrix) {\n  const n = matrix.length;\n  const m = matrix[0].length;\n\n  // Initialize a 2D array dp to store maximum path sums\n  const dp = new Array(n).fill().map(() => new Array(m).fill(0));\n\n  // Initialize the first row of dp with values from the matrix\n  for (let j = 0; j &lt; m; j++) {\n    dp[0][j] = matrix[0][j];\n  }\n\n  // Iterate over the matrix to calculate maximum path sums\n  for (let i = 1; i &lt; n; i++) {\n    for (let j = 0; j &lt; m; j++) {\n      const up = matrix[i][j] + dp[i - 1][j];\n\n      let leftDiagonal = matrix[i][j];\n      if (j - 1 >= 0) leftDiagonal += dp[i - 1][j - 1];\n      else leftDiagonal -= 1e9; // Subtract a large negative value for invalid index\n\n      let rightDiagonal = matrix[i][j];\n      if (j + 1 &lt; m) rightDiagonal += dp[i - 1][j + 1];\n      else rightDiagonal -= 1e9; // Subtract a large negative value for invalid index\n\n      // Store the maximum of up, leftDiagonal, and rightDiagonal in dp\n      dp[i][j] = Math.max(up, leftDiagonal, rightDiagonal);\n    }\n  }\n\n  // Find the maximum value in the last row of dp\n  let maxi = Number.MIN_SAFE_INTEGER;\n  for (let j = 0; j &lt; m; j++) {\n    maxi = Math.max(maxi, dp[n - 1][j]);\n  }\n\n  return maxi;\n}\n\nfunction main() {\n  const matrix = [\n    [1, 2, 10, 4],\n    [100, 3, 2, 1],\n    [1, 1, 20, 2],\n    [1, 2, 2, 1]\n  ];\n\n  const result = getMaxPathSum(matrix);\n\n  console.log(\"Maximum Path Sum:\", result);\n}\n\n// Call the main function to execute the code\nmain();\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Better Approach Here -->\n<strong>Output:</strong> 105\n\n\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Better Approach Here -->\n<p><strong>Time Complexity: O(N*M)</strong></p>\n<p>Reason: There are two nested loops</p>\n<p><strong>Space Complexity: O(N*M)</strong></p>\n<p>Reason: We are using an external array of size \u2018N*M\u2019. The stack space will be eliminated.</p>\n</p>\n</details>\n</div>\n</details>\n</div>\n<!-- Better Approach Ends from here -->\n\n\n<!-- Optimal Approach Starts from here -->\n\n<div id=\"optimal-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nSpace Optimization Approach \n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm of Better Approach Here -->\n<p>If we closely look the relation,</p>\n<p><strong>dp[i][j] = matrix[i][j] + max(dp[i-1][j],dp[i-1][j-1], dp[i-1][j+1]))</strong></p>\n<p>We see that we only need the previous row, in order to calculate dp[i][j]. Therefore we can space optimize it.</p>\n<p>Initially, we can take a dummy row ( say prev). We initialize this row to the input matrix's first row( as done in tabulation).</p>\n<p>Now the current row(say cur) only needs the <strong>prev row\u2019s</strong> value inorder to calculate dp[i][j].</p>\n<p><img width=\"604\" height=\"340\" src=\"https://lh5.googleusercontent.com/k363NTpKpc0fjCauGX0S4D2g-64A-Spy8PEFqBmGa9GnCiGx1FOQCC1u8DPGUTTLedpl8EA-S2YDP_XWXo7U_k6VdSrxyd-Bt4bpxsiplz5jIx2DSiNBWuEW_TR5djjcGyEZouu8\"></p>\n<p>At last, we will return the maximum value among the values of the prev row as our answer.</p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h>\nusing namespace std;\n\n// Function to find the maximum path sum in the given matrix\nint getMaxPathSum(vector&lt;vector&lt;int>>&amp; matrix) {\n    int n = matrix.size(); // Number of rows in the matrix\n    int m = matrix[0].size(); // Number of columns in the matrix\n\n    vector&lt;int> prev(m, 0); // Represents the previous row's maximum path sums\n    vector&lt;int> cur(m, 0);  // Represents the current row's maximum path sums\n\n    // Initialize the first row (base condition)\n    for (int j = 0; j &lt; m; j++) {\n        prev[j] = matrix[0][j];\n    }\n\n    for (int i = 1; i &lt; n; i++) {\n        for (int j = 0; j &lt; m; j++) {\n            // Calculate the maximum path sum for the current cell considering three possible directions: up, left diagonal, and right diagonal\n\n            // Up direction\n            int up = matrix[i][j] + prev[j];\n\n            // Left diagonal direction (if it's a valid move)\n            int leftDiagonal = matrix[i][j];\n            if (j - 1 >= 0) {\n                leftDiagonal += prev[j - 1];\n            } else {\n                leftDiagonal += -1e9; // A very large negative value to represent an invalid path\n            }\n\n            // Right diagonal direction (if it's a valid move)\n            int rightDiagonal = matrix[i][j];\n            if (j + 1 &lt; m) {\n                rightDiagonal += prev[j + 1];\n            } else {\n                rightDiagonal += -1e9; // A very large negative value to represent an invalid path\n            }\n\n            // Store the maximum of the three paths in the current row\n            cur[j] = max(up, max(leftDiagonal, rightDiagonal));\n        }\n\n        // Update the 'prev' array with the values from the 'cur' array for the next iteration\n        prev = cur;\n    }\n\n    // Find the maximum value in the last row of 'prev', which represents the maximum path sums ending at each cell\n    int maxi = INT_MIN;\n    for (int j = 0; j &lt; m; j++) {\n        maxi = max(maxi, prev[j]);\n    }\n\n    // The maximum path sum is the maximum value in the last row of 'prev'\n    return maxi;\n}\n\nint main() {\n    // Define the matrix as a 2D vector\n    vector&lt;vector&lt;int>> matrix{{1, 2, 10, 4},\n                               {100, 3, 2, 1},\n                               {1, 1, 20, 2},\n                               {1, 2, 2, 1}};\n\n    // Call the getMaxPathSum function and print the result\n    cout &lt;&lt; getMaxPathSum(matrix);\n\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\nclass TUF {\n    // Function to find the maximum path sum in the matrix using dynamic programming\n    static int getMaxPathSum(List&lt;List&lt;Integer>> matrix) {\n        int n = matrix.size();\n        int m = matrix.get(0).size();\n\n        List&lt;Integer> prev = new ArrayList&lt;>(Collections.nCopies(m, 0));\n        List&lt;Integer> cur = new ArrayList&lt;>(Collections.nCopies(m, 0));\n\n        // Initializing the first row - base condition\n        for (int j = 0; j &lt; m; j++) {\n            prev.set(j, matrix.get(0).get(j));\n        }\n\n        for (int i = 1; i &lt; n; i++) {\n            for (int j = 0; j &lt; m; j++) {\n                int up = matrix.get(i).get(j) + prev.get(j);\n\n                int leftDiagonal = matrix.get(i).get(j);\n                if (j - 1 >= 0) {\n                    leftDiagonal += prev.get(j - 1);\n                } else {\n                    leftDiagonal += -1e9;\n                }\n\n                int rightDiagonal = matrix.get(i).get(j);\n                if (j + 1 &lt; m) {\n                    rightDiagonal += prev.get(j + 1);\n                } else {\n                    rightDiagonal += -1e9;\n                }\n\n                // Store the maximum of the three paths in cur\n                cur.set(j, Math.max(up, Math.max(leftDiagonal, rightDiagonal)));\n            }\n\n            // Update the prev list with the values from the cur list for the next row\n            prev = new ArrayList&lt;>(cur);\n        }\n\n        int maxi = Integer.MIN_VALUE;\n\n        for (int j = 0; j &lt; m; j++) {\n            maxi = Math.max(maxi, prev.get(j));\n        }\n\n        return maxi;\n    }\n\n    public static void main(String args[]) {\n        List&lt;List&lt;Integer>> matrix = new ArrayList&lt;>();\n        matrix.add(Arrays.asList(1, 2, 10, 4));\n        matrix.add(Arrays.asList(100, 3, 2, 1));\n        matrix.add(Arrays.asList(1, 1, 20, 2));\n        matrix.add(Arrays.asList(1, 2, 2, 1));\n\n        // Call the getMaxPathSum function and print the result\n        System.out.println(getMaxPathSum(matrix));\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\nimport sys\n\n# Function to find the maximum path sum in the matrix\ndef getMaxPathSum(matrix):\n    n = len(matrix)  # Number of rows\n    m = len(matrix[0])  # Number of columns\n\n    # Initialize two lists: prev (previous row) and cur (current row)\n    prev = [0] * m\n    cur = [0] * m\n\n    # Initializing the first row of prev as the base condition\n    for j in range(m):\n        prev[j] = matrix[0][j]\n\n    # Iterate through the matrix to compute the maximum path sum\n    for i in range(1, n):\n        for j in range(m):\n            # Calculate the three possible moves: up, left diagonal, and right diagonal\n            up = matrix[i][j] + prev[j]\n\n            leftDiagonal = matrix[i][j]\n            if j - 1 >= 0:\n                leftDiagonal += prev[j - 1]\n            else:\n                leftDiagonal += -int(1e9)  # A large negative value if out of bounds\n\n            rightDiagonal = matrix[i][j]\n            if j + 1 &lt; m:\n                rightDiagonal += prev[j + 1]\n            else:\n                rightDiagonal += -int(1e9)  # A large negative value if out of bounds\n\n            # Store the maximum of the three moves in the current row (cur)\n            cur[j] = max(up, max(leftDiagonal, rightDiagonal))\n\n        # Update prev with the values of cur for the next iteration\n        prev = cur[:]\n\n    # Find the maximum path sum in the last row of prev\n    maxi = -sys.maxsize\n    for j in range(m):\n        maxi = max(maxi, prev[j])\n\n    return maxi  # Return the maximum path sum\n\ndef main():\n    # Define the input matrix\n    matrix = [[1, 2, 10, 4], [100, 3, 2, 1], [1, 1, 20, 2], [1, 2, 2, 1]]\n\n    # Call the getMaxPathSum function and print the result\n    print(getMaxPathSum(matrix))\n\nif __name__ == '__main__':\n    main()\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\nfunction getMaxPathSum(matrix) {\n  const n = matrix.length;\n  const m = matrix[0].length;\n\n  // Initialize two arrays: prev and cur\n  let prev = new Array(m).fill(0);\n  let cur = new Array(m).fill(0);\n\n  // Initialize the first row of prev with values from the matrix\n  for (let j = 0; j &lt; m; j++) {\n    prev[j] = matrix[0][j];\n  }\n\n  // Iterate over the matrix to calculate maximum path sums\n  for (let i = 1; i &lt; n; i++) {\n    for (let j = 0; j &lt; m; j++) {\n      const up = matrix[i][j] + prev[j];\n\n      let leftDiagonal = matrix[i][j];\n      if (j - 1 >= 0) leftDiagonal += prev[j - 1];\n      else leftDiagonal -= 1e9; // Subtract a large negative value for invalid index\n\n      let rightDiagonal = matrix[i][j];\n      if (j + 1 &lt; m) rightDiagonal += prev[j + 1];\n      else rightDiagonal -= 1e9; // Subtract a large negative value for invalid index\n\n      // Store the maximum of up, leftDiagonal, and rightDiagonal in cur\n      cur[j] = Math.max(up, leftDiagonal, rightDiagonal);\n    }\n\n    // Update the prev array with the values from cur\n    prev = [...cur];\n  }\n\n  // Find the maximum value in the prev array\n  let maxi = Number.MIN_SAFE_INTEGER;\n  for (let j = 0; j &lt; m; j++) {\n    maxi = Math.max(maxi, prev[j]);\n  }\n\n  return maxi;\n}\n\nfunction main() {\n  const matrix = [\n    [1, 2, 10, 4],\n    [100, 3, 2, 1],\n    [1, 1, 20, 2],\n    [1, 2, 2, 1]\n  ];\n\n  const result = getMaxPathSum(matrix);\n\n  console.log(\"Maximum Path Sum:\", result);\n}\n\n// Call the main function to execute the code\nmain();\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Optimal Apporach Here -->\n<strong>Output:</strong>105\n\n\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Optimal Approach-->\n<p><strong>Time Complexity: O(N*M)</strong></p>\n<p>Reason: There are two nested loops</p>\n<p><strong>Space Complexity: O(M)</strong></p>\n<p>Reason: We are using an external array of size \u2018M\u2019 to store only one row.</p>\n</p>\n</details>\n</div>\n</details>\n</div>\n<!-- Optimal Approach Starts from here -->\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n<details>\n<summary class=\"main-summary\">\n<span>\nVideo Explanation\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"yt-video-wrapper\">\n\n<!-- Insert iframe embed Link of Youtube Video-->\n<iframe class=\"lazy-loaded\" loading=\"lazy\" title=\"Minimum/Maximum Falling Path Sum\" width=\"810\" height=\"456\" data-lazy-type=\"iframe\" data-src=\"https://www.youtube.com/embed/N_aJ5qQbYA0?si=ynhMIg6QjOIYEzEP\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\" src=\"https://www.youtube.com/embed/N_aJ5qQbYA0?feature=oembed\"></iframe><noscript>\n<iframe loading=\"lazy\" title=\"Minimum/Maximum Falling Path Sum\" width=\"810\" height=\"456\" src=\"https://www.youtube.com/embed/N_aJ5qQbYA0?si=ynhMIg6QjOIYEzEP\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe></noscript>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script>\n\nconst codeSections = document.querySelectorAll('.code-section');\n\n// Get last selected language from localStorage or set default value\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\n// Update last selected language for all sections and store in localStorage\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\n// Handle copy button click event\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\n// Set initial state of the tabs\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<script>\nconst codeSections = document.querySelectorAll('.code-section');\n\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script src=\"https://takeuforward.org/UXApproachDropDowns/3ApproachJSScript.js\"></script>\n<!-- /wp:html -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;<strong><a href=\"https://www.linkedin.com/in/anshuman-sharma-a1b245194/\" target=\"_blank\" rel=\"noreferrer noopener\">Anshuman Sharma</a></strong>&nbsp;<em>and&nbsp;<a href=\"https://www.linkedin.com/in/abhipsita-das-5b7069212/?originalSubdomain=in\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>Abhipsita Das</strong></a></em></em> <em>for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->",
    "category_tag": "data-structure",
    "likes": 65,
    "preview": "In this article, we will solve the most asked coding interview problem: Minimum/Maximum falling path sum. Problem Link: Variable Starting and Ending Point Problem Description: We are given an \u2018N*M\u2019..."
}