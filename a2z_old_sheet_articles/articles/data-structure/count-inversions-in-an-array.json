{
    "dislikes": 6,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:09:09 GMT+0530 (India Standard Time)",
    "slug": "count-inversions-in-an-array",
    "aid": "1403",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/count-inversions",
    "title": "Count inversions in an array",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "recursion",
            "topic-title": "Recursion"
        },
        {
            "topic-id": "sorting",
            "topic-title": "Sorting"
        }
    ],
    "category_tag": "data-structure",
    "likes": 263,
    "preview": "Problem Statement: Given an array of N integers, count the inversion of the array (using merge-sort). What is an inversion of an array? Definition: for all i & j < size of array, if i < j then you...",
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement:</strong> Given an array of N integers, count the inversion of the array (using <a href=\"https://takeuforward.org/data-structure/merge-sort-algorithm/\" target=\"_blank\" rel=\"noreferrer noopener\">merge-sort</a>). </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>What is an inversion of an array? Definition: for all i &amp; j &lt; size of array, if i &lt; j then you have to find pair (A[i],A[j]) such that A[j] &lt; A[i].</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n<details class=\"article_example_details\">\n<summary class=\"article_example_summary\">\n<span><strong>\nExamples\n</strong>\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"atricle_example_content\">\n<pre class=\"wp-block-preformatted\"><!-- Insert New Examples Here -->\n<pre class=\"wp-block-preformatted\"><strong>Example 1:</strong>\n<strong>Input Format</strong>: N = 5, array[] = {1,2,3,4,5}\n<strong>Result</strong>: 0\n<strong>Explanation</strong>: we have a sorted array and the sorted array has 0 inversions as for i &lt; j you will never find a pair such that A[j] &lt; A[i]. More clear example: 2 has index 1 and 5 has index 4 now 1 &lt; 5 but 2 &lt; 5 so this is not an inversion.\n\n<strong>Example 2:</strong>\n<strong>Input Format</strong>: N = 5, array[] = {5,4,3,2,1}\n<strong>Result</strong>: 10\n<strong>Explanation</strong>: we have a reverse sorted array and we will get the maximum inversions as for i &lt; j we will always find a pair such that A[j] &lt; A[i]. Example: 5 has index 0 and 3 has index 2 now (5,3) pair is inversion as 0 &lt; 2 and 5 &gt; 3 which will satisfy out conditions and for reverse sorted array we will get maximum inversions and that is (n)*(n-1) / 2.For above given array there is 4 + 3 + 2 + 1 = 10 inversions.\n\n<strong>Example 3:</strong>\n<strong>Input Format</strong>: N = 5, array[] = {5,3,2,1,4}\n<strong>Result</strong>: 7\n<strong>Explanation</strong>: There are 7 pairs (5,1), (5,3), (5,2), (5,4),(3,2), (3,1), (2,1) and we have left 2 pairs (2,4) and (1,4) as both are not satisfy our condition.&nbsp;\n\n</pre>\n</pre>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Practice Section-->\n<div class=\"practice\">\n<span><strong>Practice: </strong></span>\n<div class=\"problem-buttons\">\n\n<!-- Add Problem Link inside href -->\n<a href=\"https://www.codingninjas.com/codestudio/problems/number-of-inversions_6840276?utm_source=youtube&amp;utm_medium=affiliate&amp;utm_campaign=striver_Arrayproblems\" target=\"_blank\" rel=\"noopener\">\n<span>Solve Problem</span>\n<img src=\"https://static.takeuforward.org/wp/uploads/2023/04/Group-11-5.png\" alt=\"code-studio\">\n</a>\n</div>\n</div>\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\nyourself first. </em></p>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<div class=\"horizontal_navbar_dsa_article\">\n<div class=\"grid_container_two\">\n<a href=\"#brute-force-approach\" class=\"two-boxes box-a\">\nBrute Force Approach\n</a>\n<a href=\"#optimal-approach\" class=\"two-boxes box-c\">\nOptimal Approach\n</a>\n<a href=\"#dsa_article_video_explanation\" class=\"three-boxes box-d\">\n<svg width=\"26\" height=\"26\" viewBox=\"0 0 20 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M8 10L13.19 7L8 4V10ZM19.56 2.17C19.69 2.64 19.78 3.27 19.84 4.07C19.91 4.87 19.94 5.56 19.94 6.16L20 7C20 9.19 19.84 10.8 19.56 11.83C19.31 12.73 18.73 13.31 17.83 13.56C17.36 13.69 16.5 13.78 15.18 13.84C13.88 13.91 12.69 13.94 11.59 13.94L10 14C5.81 14 3.2 13.84 2.17 13.56C1.27 13.31 0.69 12.73 0.44 11.83C0.31 11.36 0.22 10.73 0.16 9.93C0.0900001 9.13 0.0599999 8.44 0.0599999 7.84L0 7C0 4.81 0.16 3.2 0.44 2.17C0.69 1.27 1.27 0.69 2.17 0.44C2.64 0.31 3.5 0.22 4.82 0.16C6.12 0.0899998 7.31 0.0599999 8.41 0.0599999L10 0C14.19 0 16.8 0.16 17.83 0.44C18.73 0.69 19.31 1.27 19.56 2.17Z\" fill=\"red\"></path>\n</svg>\n\n</a>\n<div class=\"box-e tooltip\">\n<svg viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M12.842 9.25L11.9577 10.17C11.2502 10.89 10.8081 11.5 10.8081 13H8.84297V12.5C8.84297 11.39 9.28511 10.39 9.99255 9.67L11.2109 8.41C11.5745 8.05 11.7906 7.55 11.7906 7C11.7906 6.46957 11.5836 5.96086 11.2151 5.58579C10.8465 5.21071 10.3467 5 9.82552 5C9.30434 5 8.80451 5.21071 8.43598 5.58579C8.06745 5.96086 7.86041 6.46957 7.86041 7H5.89531C5.89531 5.93913 6.30938 4.92172 7.04644 4.17157C7.7835 3.42143 8.78316 3 9.82552 3C10.8679 3 11.8675 3.42143 12.6046 4.17157C13.3417 4.92172 13.7557 5.93913 13.7557 7C13.7543 7.84324 13.4259 8.65183 12.842 9.25ZM10.8081 17H8.84297V15H10.8081M9.82552 0C8.53521 0 7.25754 0.258658 6.06545 0.761205C4.87337 1.26375 3.79021 2.00035 2.87783 2.92893C1.03519 4.8043 0 7.34784 0 10C0 12.6522 1.03519 15.1957 2.87783 17.0711C3.79021 17.9997 4.87337 18.7362 6.06545 19.2388C7.25754 19.7413 8.53521 20 9.82552 20C12.4314 20 14.9306 18.9464 16.7732 17.0711C18.6158 15.1957 19.651 12.6522 19.651 10C19.651 4.47 15.2296 0 9.82552 0Z\" fill=\"black\"></path>\n</svg>\n<div class=\"bottom\">\n<p>Expand any one approach by clicking the given options in the bar. Clicking one approach on bar,\ncloses all other expands. You can manually expand more than one approach at a time</p>\n<i></i>\n</div>\n\n</div>\n</div>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<div class=\"dsa_article_dropdown_approachs \">\n\n<!-- Brute Force Approach Starts from here -->\n<div id=\"brute-force-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nBrute Force Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n<p><strong>Solution:</strong></p>\n\n<p>Let\u2019s understand the Question more deeply. We are required to give the total number of inversions and the inversions are: For i &amp; j &lt; size of an array if i &lt; j then you have to find pair (a[i], a[j]) such that a[i] &gt; a[j].</p>\n<p>For example, for the given array: [5,3,2,1,4], (5, 3) will be a valid pair as 5 &gt; 3 and<br>index 0 &lt; index 1. But (1, 4) cannot be valid pair.</p>\n<p><strong>Naive Approach (Brute force)</strong>:&nbsp;</p>\n<p><strong>Approach:</strong></p>\n<p>The steps are as follows:</p>\n<ol><li>First, we will run a loop(say i) from 0 to N-1 to select the first element in the pair.</li><li>As index j should be greater than index i, inside loop i, we will run another loop i.e. j from i+1 to N-1.</li><li>Inside this second loop, we will check if a[i] &gt; a[j] i.e. if a[i] and a[j] can be a pair. If they satisfy the condition, we will increase the count by 1.</li><li>Finally, we will return the count i.e. the number of such pairs.</li></ol>\n<p><strong>Intuition: </strong>The naive approach is pretty straightforward. We will use nested loops to solve this problem. We know index i must be smaller than index j. So, we will fix i at one index at a time through a loop, and with another loop, we will check(<em>the condition a[i] &gt; a[j]</em>) the elements from index i+1 to N-1&nbsp; if they can form a pair with a[i]. This is the first naive approach we can think of.</p>\n<p><strong>Note: </strong><em>For a better understanding of intuition, please watch the video at the bottom of the page.</em></p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n\n<!-- Insert C++ code of Brute Force Here -->\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint numberOfInversions(vector&lt;int&gt;&amp;a, int n) {\n\n    // Count the number of pairs:\n    int cnt = 0;\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = i + 1; j &lt; n; j++) {\n            if (a[i] &gt; a[j]) cnt++;\n        }\n    }\n    return cnt;\n}\n\nint main()\n{\n    vector&lt;int&gt; a = {5, 4, 3, 2, 1};\n    int n = 5;\n    int cnt = numberOfInversions(a, n);\n    cout &lt;&lt; \"The number of inversions is: \"\n         &lt;&lt; cnt &lt;&lt; endl;\n    return 0;\n}\n</code>\n</pre>\n<p>\n<!-- Insert Output of Brute Force Here -->\nOutput: The number of inversions is: 10\n</p>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\n<!-- Insert Java code of Brute Force Here -->\nimport java.util.*;\n\npublic class tUf {\n\n    public static int numberOfInversions(int[] a, int n) {\n        // Count the number of pairs:\n        int cnt = 0;\n        for (int i = 0; i &lt; n; i++) {\n            for (int j = i + 1; j &lt; n; j++) {\n                if (a[i] &gt; a[j]) cnt++;\n            }\n        }\n        return cnt;\n    }\n\n\n    public static void main(String[] args) {\n        int[] a = {5, 4, 3, 2, 1};\n        int n = 5;\n        int cnt = numberOfInversions(a, n);\n        System.out.println(\"The number of inversions is: \" + cnt);\n    }\n}\n\n\n</code>\n</pre>\n<p>\n<!-- Insert Output of Brute Force Here -->\nOutput: The number of inversions is: 10\n</p>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\n<!-- Insert Python code of Brute Force Here -->\nfrom typing import List\n\ndef numberOfInversions(a : List[int], n : int) -&gt; int:\n    # Count the number of pairs:\n    cnt = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] &gt; a[j]:\n                cnt += 1\n    return cnt\n\nif __name__ == \"__main__\":\n    a = [5, 4, 3, 2, 1]\n    n = 5\n    cnt = numberOfInversions(a, n)\n    print(\"The number of inversions is:\", cnt)\n</code>\n</pre>\n<p>\n<!-- Insert Output of Brute Force Here -->\nOutput: The number of inversions is: 10\n</p>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\nfunction numberOfInversions(a) {\n    // Count the number of pairs:\n    let cnt = 0;\n    for (let i = 0; i &lt; a.length; i++) {\n        for (let j = i + 1; j &lt; a.length; j++) {\n            if (a[i] &gt; a[j]) cnt++;\n        }\n    }\n    return cnt;\n}\n\nconst a = [5, 4, 3, 2, 1];\nconst cnt = numberOfInversions(a);\nconsole.log(\"The number of inversions is: \" + cnt);\n\n</code>\n</pre>\n<p>\n<!-- Insert Output of Brute Force Here -->\nOutput: The number of inversions is: 10\n</p>\n</div>\n\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n<!-- Insert Time and Space Complexity of Brute Force Here -->\n\n</p><p><strong>Time Complexity: </strong>O(N<sup>2</sup>), where N = size of the given array.<br><strong>Reason: </strong>We are using nested loops here and those two loops roughly run for N times.</p>\n<p><strong>Space Complexity: </strong>O(1) as we are not using any extra space to solve this problem.</p>\n\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Brute Force Approach Ends here -->\n\n<!-- Optimal Approach Starts from here -->\n\n<div id=\"optimal-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nOptimal Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm of Better Approach Here -->\n<p><strong>Observation:&nbsp;</strong></p>\n<p>Let\u2019s build the intuition for this approach using a modified version of the given question.</p>\n<p>Assume two sorted arrays are given i.e. a1[] = {2, 3, 5, 6} and a2[] = {2, 2, 4, 4, 8}. Now, we have to count the pairs i.e. a1[i] and a2[j] such that a1[i] &gt; a2[j].</p>\n<p>In order to solve this, we will keep two pointers i and j, where i will point to the first index of a1[] and j will point to the first index of a2[]. Now in each iteration, we will do the following:</p>\n<ul><li><strong>If a1[i] &lt;= a2[j]: </strong>These two elements cannot be a pair and so we will move the pointer i to the next position. This case is illustrated below:</li></ul>\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/06/Screenshot-2023-06-08-002847.png\" alt=\"\" class=\"wp-image-11271\"></figure>\n<ul><li><strong>Why we moved the i pointer: </strong>We know, that the given arrays are sorted. So, all the elements after the pointer j, should be greater than a2[j]. Now, as a1[i] is smaller or equal to a2[j], it is obvious that a1[i] will be smaller or equal to all the elements after a2[j]. We need a bigger value of a1[i] to make a pair and so we move the i pointer to the next position i.e. next bigger value.<strong><em><br></em></strong></li><li><strong>If a1[i] &gt; a2[j]: </strong>These two elements can be a pair and so we will update the count of pairs. Now, here, we should observe that as a1[i] is greater than a2[j], all the elements after a1[i] will also be greater than a2[j] and so, those elements will also make pair with a2[j]. So, the number of pairs added will be n1-i (<em>where n1 = size of a1[ ]</em>). Now, we will move the j pointer to the next position. This case is also illustrated below:</li></ul>\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/06/Screenshot-2023-06-08-004326.png\" alt=\"\" class=\"wp-image-11272\"></figure>\n<p>The above process will continue until at least one of the pointers reaches the end.</p>\n<p>Until now, we have figured out how to count the number of pairs in one go if two sorted arrays are given. But in our actual question, only a single unsorted array is given. So, how to break it into two sorted halves so that we can apply the above observation?&nbsp;</p>\n<p><br>We can think of the merge sort algorithm that works in a similar way we want. In the merge sort algorithm, at every step, we divide the given array into two halves and then sort them, and while doing that we can actually count the number of pairs.</p>\n<p>Basically, we will use the merge sort algorithm to use the observation in the correct way.</p>\n<h3><strong>Approach:</strong></h3>\n\n<p>The steps are basically the same as they are in the case of the <a href=\"https://takeuforward.org/data-structure/merge-sort-algorithm/\" target=\"_blank\" rel=\"noopener\" title=\"\">merge sort algorithm</a>. The change will be just a one-line addition inside the <strong>merge()</strong> function. Inside the merge(), we need to add the number of pairs to the count when a[left] &gt; a[right].</p>\n<p>The steps of the merge() function were the following:</p>\n<ol><li>In the merge function, we will use a temp array to store the elements of the two sorted arrays after merging. Here, the range of the left array is low to mid and the range for the right half is mid+1 to high.</li><li>Now we will take two pointers left and right, where left starts from low and right starts from mid+1.</li><li>Using a while loop( while(left &lt;= mid &amp;&amp; right &lt;= high)), we will select two elements, one from each half, and will consider the smallest one among the two. Then, we will insert the smallest element in the temp array.&nbsp;</li><li>After that, the left-out elements in both halves will be copied as it is into the temp array.</li><li>Now, we will just transfer the elements of the temp array to the range low to high in the original array.</li></ol>\n<p><strong>Modifications in merge() and mergeSort():&nbsp;</strong></p>\n<ul><li><em>In order to count the number of pairs, we will keep a count variable, cnt, initialized to 0 beforehand inside the merge().</em></li><li><em>While comparing a[left] and a[right] in the 3rd step of merge(), if a[left] &gt; a[right], we will simply add this line: </em><em><br></em><em>cnt += mid-left+1 (mid+1 = size of the left half)</em></li><li>Now, we will return this cnt from merge() to mergeSort().&nbsp;</li><li>Inside mergeSort(), we will keep another counter variable that will store the final answer. With this cnt, we will add the answer returned from mergeSort() of the left half, mergeSort() of the right half, and merge().</li><li>Finally, we will return this cnt, as our answer from mergeSort().</li></ul>\n<p><strong>Note: </strong>The code implementation will further clarify the modifications.</p>\n\n<p><strong>Dry Run: </strong>Please refer to the video for a better understanding of the dry run.</p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint merge(vector&lt;int&gt; &amp;arr, int low, int mid, int high) {\n    vector&lt;int&gt; temp; // temporary array\n    int left = low;      // starting index of left half of arr\n    int right = mid + 1;   // starting index of right half of arr\n\n    //Modification 1: cnt variable to count the pairs:\n    int cnt = 0;\n\n    //storing elements in the temporary array in a sorted manner//\n\n    while (left &lt;= mid &amp;&amp; right &lt;= high) {\n        if (arr[left] &lt;= arr[right]) {\n            temp.push_back(arr[left]);\n            left++;\n        }\n        else {\n            temp.push_back(arr[right]);\n            cnt += (mid - left + 1); //Modification 2\n            right++;\n        }\n    }\n\n    // if elements on the left half are still left //\n\n    while (left &lt;= mid) {\n        temp.push_back(arr[left]);\n        left++;\n    }\n\n    //  if elements on the right half are still left //\n    while (right &lt;= high) {\n        temp.push_back(arr[right]);\n        right++;\n    }\n\n    // transfering all elements from temporary to arr //\n    for (int i = low; i &lt;= high; i++) {\n        arr[i] = temp[i - low];\n    }\n\n    return cnt; // Modification 3\n}\n\nint mergeSort(vector&lt;int&gt; &amp;arr, int low, int high) {\n    int cnt = 0;\n    if (low &gt;= high) return cnt;\n    int mid = (low + high) / 2 ;\n    cnt += mergeSort(arr, low, mid);  // left half\n    cnt += mergeSort(arr, mid + 1, high); // right half\n    cnt += merge(arr, low, mid, high);  // merging sorted halves\n    return cnt;\n}\n\nint numberOfInversions(vector&lt;int&gt;&amp;a, int n) {\n\n    // Count the number of pairs:\n    return mergeSort(a, 0, n - 1);\n}\n\nint main()\n{\n    vector&lt;int&gt; a = {5, 4, 3, 2, 1};\n    int n = 5;\n    int cnt = numberOfInversions(a, n);\n    cout &lt;&lt; \"The number of inversions are: \"\n         &lt;&lt; cnt &lt;&lt; endl;\n    return 0;\n}\n\n</code>\n</pre>\n<p>\n<!-- Insert Output of Optimal Apporach Here -->\nOutput: The number of inversions is: 10\n</p>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\npublic class tUf {\n\n    private static int merge(int[] arr, int low, int mid, int high) {\n        ArrayList&lt;Integer&gt; temp = new ArrayList&lt;&gt;(); // temporary array\n        int left = low;      // starting index of left half of arr\n        int right = mid + 1;   // starting index of right half of arr\n\n        //Modification 1: cnt variable to count the pairs:\n        int cnt = 0;\n\n        //storing elements in the temporary array in a sorted manner//\n\n        while (left &lt;= mid &amp;&amp; right &lt;= high) {\n            if (arr[left] &lt;= arr[right]) {\n                temp.add(arr[left]);\n                left++;\n            } else {\n                temp.add(arr[right]);\n                cnt += (mid - left + 1); //Modification 2\n                right++;\n            }\n        }\n\n        // if elements on the left half are still left //\n\n        while (left &lt;= mid) {\n            temp.add(arr[left]);\n            left++;\n        }\n\n        //  if elements on the right half are still left //\n        while (right &lt;= high) {\n            temp.add(arr[right]);\n            right++;\n        }\n\n        // transfering all elements from temporary to arr //\n        for (int i = low; i &lt;= high; i++) {\n            arr[i] = temp.get(i - low);\n        }\n        return cnt; // Modification 3\n    }\n\n    public static int mergeSort(int[] arr, int low, int high) {\n        int cnt = 0;\n        if (low &gt;= high) return cnt;\n        int mid = (low + high) / 2 ;\n        cnt += mergeSort(arr, low, mid);  // left half\n        cnt += mergeSort(arr, mid + 1, high); // right half\n        cnt += merge(arr, low, mid, high);  // merging sorted halves\n        return cnt;\n    }\n\n    public static int numberOfInversions(int[] a, int n) {\n        // Count the number of pairs:\n        return mergeSort(a, 0, n - 1);\n    }\n\n\n    public static void main(String[] args) {\n        int[] a = {5, 4, 3, 2, 1};\n        int n = 5;\n        int cnt = numberOfInversions(a, n);\n        System.out.println(\"The number of inversions are: \" + cnt);\n    }\n}\n</code>\n</pre>\n<p>\n<!-- Insert Output of Optimal Apporach Here -->\nOutput: The number of inversions is: 10\n</p>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\nfrom typing import List\nimport math\n\ndef merge(arr : List[int], low : int, mid : int, high : int) -&gt; int:\n    temp = []   # temporary array\n    left = low  # starting index of left half of arr\n    right = mid + 1 # starting index of right half of arr\n\n    cnt = 0     # Modification 1: cnt variable to count the pairs\n\n    # storing elements in the temporary array in a sorted manner\n    while (left &lt;= mid and right &lt;= high):\n        if (arr[left] &lt;= arr[right]):\n            temp.append(arr[left])\n            left += 1\n        else:\n            temp.append(arr[right])\n            cnt += (mid - left + 1)  # Modification 2\n            right += 1\n\n    # if elements on the left half are still left\n    while (left &lt;= mid):\n        temp.append(arr[left])\n        left += 1\n\n    # if elements on the right half are still left\n    while (right &lt;= high):\n        temp.append(arr[right])\n        right += 1\n\n    # transfering all elements from temporary to arr\n    for i in range(low, high + 1):\n        arr[i] = temp[i - low]\n\n    return cnt   # Modification 3\n\ndef mergeSort(arr : List[int], low : int, high : int) -&gt; int:\n    cnt = 0\n    if low &gt;= high:\n        return cnt\n    mid = math.floor((low + high) / 2)\n    cnt += mergeSort(arr, low, mid)    # left half\n    cnt += mergeSort(arr, mid + 1, high)  # right half\n    cnt += merge(arr, low, mid, high)  # merging sorted halves\n    return cnt\n\ndef numberOfInversions(a : List[int], n : int) -&gt; int:\n    # Count the number of pairs:\n    n = len(a)\n    # Count the number of pairs:\n    return mergeSort(a, 0, n - 1)\n\nif __name__ == \"__main__\":\n    a = [5, 4, 3, 2, 1]\n    n = 5\n    cnt = numberOfInversions(a, n)\n    print(\"The number of inversions are:\", cnt)\n\n</code>\n</pre>\n<p>\n<!-- Insert Output of Optimal Apporach Here -->\nOutput: The number of inversions is: 10\n</p>\n</div>\n<div class=\"code-block dsa_article_code_active\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\nfunction numberOfInversions(a) {\n    let cnt = 0;\n    for (let i = 0; i &lt; a.length; i++) {\n        for (let j = i + 1; j &lt; a.length; j++) {\n            if (a[i] &gt; a[j]) cnt++;\n        }\n    }\n    return cnt;\n}\n\nconst a = [5, 4, 3, 2, 1];\nconst cnt = numberOfInversions(a);\nconsole.log(\"The number of inversions is: \" + cnt);\n\n</code>\n</pre>\n<p>\n<!-- Insert Output of Optimal Apporach Here -->\nOutput: The number of inversions is: 10\n</p>\n</div>\n\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n</p><p><strong>Time Complexity:</strong> O(N*logN), where N = size of the given array.<br><strong>Reason: </strong>We are not changing the merge sort algorithm except by adding a variable to it. So, the time complexity is as same as the merge sort.</p>\n<p><strong>Space Complexity: </strong>O(N), as in the merge sort We use a temporary array to store elements in sorted order.</p>\n\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Optimal Approach Starts from here -->\n\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n<details>\n<summary class=\"main-summary\">\n<span>\nVideo Explanation\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"yt-video-wrapper\">\n\n<!-- Insert iframe embed Link of Youtube Video-->\n<iframe class=\"lazy-loaded\" loading=\"lazy\" title=\"Count Inversion\" width=\"810\" height=\"456\" data-lazy-type=\"iframe\" data-src=\"https://www.youtube.com/embed/AseUmwVNaoY\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\" src=\"https://www.youtube.com/embed/AseUmwVNaoY?feature=oembed\"></iframe><noscript>\n<iframe loading=\"lazy\" title=\"Count Inversion\" width=\"810\" height=\"456\" src=\"https://www.youtube.com/embed/AseUmwVNaoY\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe></noscript>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script>\n\nconst codeSections = document.querySelectorAll('.code-section');\n\n// Get last selected language from localStorage or set default value\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\n// Update last selected language for all sections and store in localStorage\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\n// Handle copy button click event\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\n// Set initial state of the tabs\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<script>\nconst codeSections = document.querySelectorAll('.code-section');\n\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script src=\"https://takeuforward.org/UXApproachDropDowns/2ApproachJSScript.js\"></script>\n<!-- /wp:html -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p> <em style=\"font-size: inherit; color: var(--text-color); font-family: var(--text-font);\">Special thanks to\u00a0<strong><a href=\"https://www.linkedin.com/in/harsh-prajapati-a349061b9\" target=\"_blank\" rel=\"noreferrer noopener\">Harsh Prajapati</a></strong>,\u00a0<a href=\"https://www.linkedin.com/in/imsudip/\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>Sudip Ghosh</strong></a> and <strong><a href=\"https://www.linkedin.com/in/kriti39/\" target=\"_blank\" rel=\"noreferrer noopener\">KRITIDIPTA GHOSH</a></strong></em><span style=\"font-size: inherit; color: var(--text-color); font-family: var(--text-font);\"> </span><em style=\"font-size: inherit; color: var(--text-color); font-family: var(--text-font);\">for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,\u00a0</em><a style=\"font-size: inherit; font-family: var(--text-font);\" href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->"
}