{
    "dislikes": 15,
    "video": "qtVh-XEpsJo",
    "publishedOn": "Sun Mar 24 2024 22:09:17 GMT+0530 (India Standard Time)",
    "slug": "length-of-longest-substring-without-any-repeating-character",
    "aid": "1444",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/longest-substring-without-repeating-characters",
    "title": "Length of Longest Substring without any Repeating Character",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "hashing",
            "topic-title": "Hashing"
        },
        {
            "topic-id": "string",
            "topic-title": "String"
        }
    ],
    "likes": 355,
    "category_tag": "data-structure",
    "preview": "Problem Statement: Given a String, find the length of longest substring without any repeating character. Examples: Example 1: Input: s = \u201dabcabcbb\u201d Output: 3 Explanation: The answer is abc with len...",
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement:</strong> Given a String, find the length of longest substring without any repeating character.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Examples:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\"><strong>Example 1:</strong>\n\n<strong>Input:</strong> s = \u201dabcabcbb\u201d\n\n<strong>Output:</strong> 3\n\n<strong>Explanation:</strong> The answer is abc with length of 3.\n\n<strong>Example 2:</strong>\n\n<strong>Input:</strong> s = \u201dbbbbb\u201d\n\n<strong>Output:</strong> 1\n\n<strong>Explanation:</strong> The answer is b with length of 1 units.</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Solution</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"textColor\":\"vivid-red\"} -->\n<p class=\"has-vivid-red-color has-text-color\"><strong><em>Disclaimer</em></strong>: <em>Don't jump directly to the solution, try it out yourself first.</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Solution 1: Brute force Approach</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Approach</strong>: This approach consists of taking the two loops one for traversing the string and another loop - nested loop for finding different substrings and after that, we will check for all substrings one by one and check for each and every element if the element is not found then we will store that element in HashSet otherwise we will break from the loop and count it.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"588\" height=\"319\" src=\"https://lh5.googleusercontent.com/2Wa6Ktvs1Qj14BON9517_-DM5-BNSiIVdKwgn6jlS5yoPfDjyFWKlEmBoNZyF7EIHN2NBfmVT3O7EGy6ubYuhkJBb2XC_b5soTz9au_COuZCApBYFY-viExaOLTDdtGTQ89uGOtO\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include&lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\nint solve(string str) {\n\n  if(str.size()==0)\n      return 0;\n  int maxans = INT_MIN;\n  for (int i = 0; i &lt; str.length(); i++) // outer loop for traversing the string\n  {\n    unordered_set &lt; int &gt; set;\n    for (int j = i; j &lt; str.length(); j++) // nested loop for getting different string starting with str[i]\n    {\n      if (set.find(str[j]) != set.end()) // if element if found so mark it as ans and break from the loop\n      {\n        maxans = max(maxans, j - i);\n        break;\n      }\n      set.insert(str[j]);\n    }\n  }\n  return maxans;\n}\n\nint main() {\n  string str = \"takeUforward\";\n  cout &lt;&lt; \"The length of the longest substring without repeating characters is \" &lt;&lt; \n  solve(str);\n  return 0;\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong>  The length of the longest substring without repeating characters is 9</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O( N<sup>2 </sup>)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(N) where N is the size of HashSet taken for storing the elements</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\npublic class Main {\n    static int solve(String str) {\n\n        if(str.length()==0)\n             return 0;\n        int maxans = Integer.MIN_VALUE;\n        for (int i = 0; i &lt; str.length(); i++) // outer loop for traversing the string\n        {\n            Set &lt; Character &gt; se = new HashSet &lt; &gt; ();\n            for (int j = i; j &lt; str.length(); j++) // nested loop for getting different \n            string starting with str[i]\n            {\n                if (se.contains(str.charAt(j))) // if element if found so mark it as ans \n                and break from the loop\n                {\n                    maxans = Math.max(maxans, j - i);\n                    break;\n                }\n                se.add(str.charAt(j));\n            }\n        }\n        return maxans;\n    }\n\n    public static void main(String args[]) {\n        String str = \"takeUforward\";\n        System.out.println(\"The length of the longest substring without repeating \n        characters is \" + solve(str));\n\n    }\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong>  The length of the longest substring without repeating characters is 9</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O( N<sup>2 </sup>)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(N) where N is the size of HashSet taken for storing the elements</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block\" data-lang=\"python\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">def solve(str: str) -> int:\n    if len(str) == 0:\n        return 0\n    maxans = -1\n    for i in range(len(str)):  # outer loop for traversing the string\n        set = {}\n        # nested loop for getting different string starting with str[i]\n        for j in range(i, len(str)):\n            if str[j] in set:  # if element if found so mark it as ans and break from the loop\n                maxans = max(maxans, j - i)\n                break\n            set[str[j]] = 1\n    return maxans\n\n\nif __name__ == \"__main__\":\n    str = \"takeUforward\"\n    print(\"The length of the longest substring without repeating characters is\", solve(str))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong>  The length of the longest substring without repeating characters is 9</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O( N<sup>2 </sup>)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(N) where N is the size of HashSet taken for storing the elements</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Solution 2: Optimised&nbsp; Approach 1</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Approach</strong>: We will have two pointers left and right. Pointer \u2018left\u2019 is used for maintaining the starting point of the substring while \u2018right\u2019 will maintain the endpoint of the substring.\u2019 right\u2019 pointer will move forward and check for the duplicate occurrence of the current element if found then the \u2018left\u2019 pointer will be shifted ahead so as to delete the duplicate elements.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"624\" height=\"444\" src=\"https://lh4.googleusercontent.com/aMQirjlxaiN8IBm5FckhirAltc-njpQsvsRoj_0fah3eoebaBZOgDRm6GGJ0o7ZC5jlsEG7RZSVwqc668ackaIRqsBWU5zwNqWthQhkXgp8CMjh0Cd-vjfPQpBsA_QSISzkmoMR1\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include &lt;bits/stdc++.h&gt;\n\n#include&lt;unordered_set&gt;\n\nusing namespace std;\n\nint solve(string str) {\n\n  if(str.size()==0)\n      return 0;\n  int maxans = INT_MIN;\n  unordered_set &lt; int &gt; set;\n  int l = 0;\n  for (int r = 0; r &lt; str.length(); r++) // outer loop for traversing the string\n  {\n    if (set.find(str[r]) != set.end()) //if duplicate element is found\n    {\n      while (l &lt; r &amp;&amp; set.find(str[r]) != set.end()) {\n        set.erase(str[l]);\n        l++;\n      }\n    }\n    set.insert(str[r]);\n    maxans = max(maxans, r - l + 1);\n  }\n  return maxans;\n}\n\nint main() {\n  string str = \"takeUforward\";\n  cout &lt;&lt; \"The length of the longest substring without repeating characters is \" &lt;&lt; \n  solve(str);\n  return 0;\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong>  The length of the longest substring without repeating characters is 9 </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O( 2*N<sup> </sup>) (sometimes left and right both have to travel a complete array)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(N) where N is the size of HashSet taken for storing the elements</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\npublic class Main {\n    static int solve(String str) {\n\n        if(str.length()==0)\n             return 0;\n        int maxans = Integer.MIN_VALUE;\n        Set &lt; Character &gt; set = new HashSet &lt; &gt; ();\n        int l = 0;\n        for (int r = 0; r &lt; str.length(); r++) // outer loop for traversing the string\n        {\n            if (set.contains(str.charAt(r))) //if duplicate element is found\n            {\n                while (l &lt; r &amp;&amp; set.contains(str.charAt(r))) {\n                    set.remove(str.charAt(l));\n                    l++;\n                }\n            }\n            set.add(str.charAt(r));\n            maxans = Math.max(maxans, r - l + 1);\n        }\n        return maxans;\n    }\n\n    public static void main(String args[]) {\n        String str = \"takeUforward\";\n        System.out.println(\"The length of the longest substring without repeating \n        characters is \" + solve(str));\n\n    }\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong>  The length of the longest substring without repeating characters is 9 </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O( 2*N<sup> </sup>) (sometimes left and right both have to travel complete array)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(N) where N is the size of HashSet taken for storing the elements</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block\" data-lang=\"python\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">def solve(str: str) -> int:\n    if len(str) == 0:\n        return 0\n    maxans = float(\"-inf\")\n    setx = set()\n    l = 0\n    for r in range(len(str)):  # outer loop for traversing the string\n        if str[r] in setx:  # if duplicate element is found\n            while l &lt; r and str[r] in setx:\n                setx.remove(str[l])\n                l += 1\n        setx.add(str[r])\n        maxans = max(maxans, r - l + 1)\n    return maxans\n\n\nif __name__ == \"__main__\":\n    str = \"takeUforward\"\n    print(\"The length of the longest substring without repeating characters is\", solve(str))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong>  The length of the longest substring without repeating characters is 9 </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O( 2*N<sup> </sup>) (sometimes left and right both have to travel a complete array)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(N) where N is the size of HashSet taken for storing the elements</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Solution 3: Optimised&nbsp; Approach 2</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Approach:</strong> In this approach, we will make a map that will take care of counting the elements and maintaining the frequency of each and every element as a unity by taking the latest index of every element.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><img width=\"624\" height=\"347\" src=\"https://lh5.googleusercontent.com/GH56iZCr9JG8MDLCJCHsAIpc6-PHczH8nvyrqyE3q2KFxCqtktxoG5gwIZOs53EnkNWfx349AIIe_foy3qY2P2HM7Tw5cHeOTcQimnRrS2a9NoX4jGIi0Ff8MqujUTdt8VnG9aSK\"></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\nclass Solution {\n  public:\n    int lengthofLongestSubstring(string s) {\n      vector &lt; int &gt; mpp(256, -1);\n\n      int left = 0, right = 0;\n      int n = s.size();\n      int len = 0;\n      while (right &lt; n) {\n        if (mpp[s[right]] != -1)\n          left = max(mpp[s[right]] + 1, left);\n\n        mpp[s[right]] = right;\n\n        len = max(len, right - left + 1);\n        right++;\n      }\n      return len;\n    }\n};\n\nint main() {\n  string str = \"takeUforward\";\n  Solution obj;\n  cout &lt;&lt; \"The length of the longest substring without repeating characters is \" &lt;&lt; obj.lengthofLongestSubstring(str);\n  return 0;\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong>  The length of the longest substring without repeating characters is 9  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O( N<sup> </sup>)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(N) where N represents the size of HashSet where we are storing our elements</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\npublic class Main {\n    static int solve(String s) {\n        HashMap &lt; Character, Integer &gt; mpp = new HashMap &lt; Character, Integer &gt; ();\n\n        int left = 0, right = 0;\n        int n = s.length();\n        int len = 0;\n        while (right &lt; n) {\n            if (mpp.containsKey(s.charAt(right))) left = Math.max(mpp.get(s.charAt(right)) + 1, left);\n\n            mpp.put(s.charAt(right), right);\n\n            len = Math.max(len, right - left + 1);\n            right++;\n        }\n        return len;\n    }\n\n    public static void main(String args[]) {\n        String str = \"takeUforward\";\n        System.out.println(\"The length of the longest substring without repeating \n        characters is \" + solve(str));\n\n    }\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong>  The length of the longest substring without repeating characters is 9  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O( N<sup> </sup>)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(N) where N represents the size of HashSet where we are storing our elements</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block\" data-lang=\"python\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">class Solution:\n    def lengthofLongestSubstring(self, s: str) -> int:\n        mpp = [-1] * 256\n\n\n        left = 0\n        right = 0\n        n = len(s)\n        length = 0\n        while right &lt; n:\n            if mpp[ord(s[right])] != -1:\n                left = max(mpp[ord(s[right])] + 1, left)\n\n\n            mpp[ord(s[right])] = right\n\n\n            length = max(length, right - left + 1)\n            right += 1\n        return length\n\n\nif __name__ == \"__main__\":\n    str = \"takeUforward\"\n    obj = Solution()\n    print(\"The length of the longest substring without repeating characters is\",\n          obj.lengthofLongestSubstring(str))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong>  The length of the longest substring without repeating characters is 9  </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O( N<sup> </sup>)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(N) where N represents the size of HashSet where we are storing our elements</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to\u00a0<a href=\"https://www.linkedin.com/in/gurmeet-singh-630002201/\" target=\"_blank\" rel=\"noreferrer noopener nofollow\"><strong>Gurmeet Singh</strong></a>\u00a0<em>and\u00a0</em><strong><em><em><a href=\"https://www.linkedin.com/in/imsudip/\" target=\"_blank\" rel=\"noreferrer noopener\">Sudip Ghosh</a></em></em>\u00a0</strong></em> <em>for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,\u00a0</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->"
}