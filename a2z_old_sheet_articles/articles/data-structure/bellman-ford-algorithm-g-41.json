{
    "dislikes": 1,
    "video": "0vVofAhAYjc",
    "publishedOn": "Sun Mar 24 2024 22:11:46 GMT+0530 (India Standard Time)",
    "slug": "bellman-ford-algorithm-g-41",
    "aid": "2159",
    "title": "Bellman Ford Algorithm: G-41",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/bellman-ford-algorithm",
    "topics": [
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "graph",
            "topic-title": "Graph"
        }
    ],
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement:</strong> Given a weighted, directed and connected graph of V vertices and E edges, Find the shortest distance of all the vertices from the source vertex S.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Note:</strong> If the Graph contains a negative cycle then return an array consisting of only -1.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Example 1</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<pre><b>Input Format:</b> \nV = 6, \nE = [[3, 2, 6], [5, 3, 1], [0, 1, 5], [1, 5, -3], [1, 2, -2], [3, 4, -2], [2, 4, 3]], \nS = 0\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2022/11/Screenshot-2022-11-23-165611.png\" alt=\"\" class=\"wp-image-6947\"></figure>\n<b>Result</b>: 0 5 3 3 1 2\n<b>Explanation:</b> Shortest distance of all nodes from the source node is returned.\n</pre>\n<!-- /wp:html -->\n\n<!-- wp:paragraph -->\n<p><strong>Example 2</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<pre><b>Input Format:</b> V = 2, E = [[0,1,9]],  S = 0\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2022/11/Screenshot-2022-11-23-165658.png\" alt=\"\" class=\"wp-image-6948\"></figure>\n<b>Result:</b> 0 9\n<b>Explanation:</b> Shortest distance of all nodes from the source node is returned.\n</pre>\n<!-- /wp:html -->\n\n<!-- wp:heading -->\n<h2><strong>Solution</strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong><em>Disclaimer</em></strong>: <em>Don't jump directly to the solution, try it out yourself first. </em><a href=\"https://practice.geeksforgeeks.org/problems/distance-from-the-source-bellman-ford-algorithm/1?utm_source=youtube&amp;utm_medium=collab_striver_ytdescription&amp;utm_campaign=distance-from-the-source-bellman-ford-algorithm\"><em>Problem link</em></a><em>.</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Solution:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>The bellman-Ford algorithm</em></strong> helps to find the shortest distance from the source node to all other nodes. But, we have already learned <strong><em>Dijkstra's algorithm (</em></strong>Dijkstra's algorithm article link<strong><em>)</em></strong> to fulfill the same purpose. Now, the question is <strong><em>how this algorithm is different from Dijkstra's algorithm</em></strong>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>While learning Dijkstra's algorithm, we came across the following two situations, where Dijkstra's algorithm failed:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong><em>If the graph contains negative edges.</em></strong></li><li><strong><em>If the graph has a negative cycle (In this case Dijkstra's algorithm fails to minimize the distance, keeps on running, and goes into an infinite loop. As a result it gives TLE error).</em></strong></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>Negative Cycle: </em></strong><em>A cycle is called a negative cycle if the sum of all its weights becomes negative. The following illustration is an example of a negative cycle:</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":6949,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2022/11/Screenshot-2022-11-23-165806.png\" alt=\"\" class=\"wp-image-6949\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong><em>Bellman-Ford's algorithm </em></strong>successfully solves these problems. <strong><em>It works fine with negative edges</em></strong> as well as <strong><em>it is able to detect if the graph contains a negative cycle</em></strong>. But this algorithm is only applicable for <strong><em>directed graphs</em></strong>. In order to apply this algorithm to an undirected graph, we just need to convert the undirected edges into directed edges like the following:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":6950,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2022/11/Screenshot-2022-11-23-165854.png\" alt=\"\" class=\"wp-image-6950\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>Explanation:</strong> An undirected edge between nodes u and v necessarily means that there are two opposite-directed edges, one towards node u and the other towards node v. So the above conversion is valid.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>After converting the undirected graph into a directed graph following the above method, we can use the Bellman-Ford algorithm as it is.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Intuition:</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>In this algorithm, the edges can be given in any order. The intuition is to relax all the edges for N-1( N = no. of nodes) times sequentially. After N-1 iterations, we should have minimized the distance to every node.</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>Let\u2019s understand what the relaxation of edges means using an example.</em></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":6952,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2022/11/Screenshot-2022-11-23-170013.png\" alt=\"\" class=\"wp-image-6952\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Let's consider the above graph with dist[u], dist[v], and wt. Here, wt is the weight of the edge and dist[u] signifies the shortest distance to reach node u found until now. Similarly, dist[v](maybe infinite) signifies the shortest distance to reach node v found until now. If the distance to reach v through u(i.e. dist[u] + wt) is smaller than dist[v], we will update the value of dist[v] with (dist[u] + wt). This process of updating the distance is called the relaxation of edges.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We will apply the above process(i.e. minimizing the distance to reach every node) N-1 times in the Bellman-Ford algorithm.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>Two follow-up questions about the algorithm: Why do we need exact N-1 iterations?<br></em></strong>Let\u2019s try to first understand this using an example:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":6953,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2022/11/Screenshot-2022-11-23-170112.png\" alt=\"\" class=\"wp-image-6953\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:list -->\n<ul><li>In the above graph, the algorithm will minimize the distance of the i<sup>th</sup> node in the i<sup>th</sup> iteration like dist[1] will be updated in the 1st iteration, dist[2] will be updated in the 2nd iteration, and so on. So we will need a total of 4 iterations(i.e. N-1 iterations) to minimize all the distances as dist[0] is already set to 0.<br><strong>Note: </strong><em>Points to remember since, in a graph of N nodes we will take at most N-1 edges to reach from the first to the last node, we need exact N-1 iterations. It is impossible to draw a graph that takes more than N-1 edges to reach any node.&nbsp; <br></em></li><li><strong><em>How to detect a negative cycle in the graph?</em></strong><strong><em><br></em></strong><ul><li>We know if we keep on rotating inside a negative cycle, the path weight will be decreased in every iteration. But according to our intuition, we should have minimized all the distances within N-1 iterations(that means, after N-1 iterations no relaxation of edges is possible).&nbsp;</li><li>In order to check the existence of a negative cycle, we will relax the edges one more time after the completion of N-1 iterations. And if in that N<sup>th</sup> iteration, it is found that further relaxation of any edge is possible, we can conclude that the graph has a negative cycle. Thus, the Bellman-Ford algorithm detects negative cycles.</li></ul></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Approach</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Initial Configuration:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>distance array(dist[ ]): </strong>The dist[] array will be initialized with infinity, except for the source node as dist[src] will be initialized to 0.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The algorithm steps will be the following:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li>First, we will initialize the source node in the distance array to 0 and the rest of the nodes to infinity.</li><li>Then we will run a loop for N-1 times.</li><li>Inside that loop, we will try to relax every given edge.<br>For example, one of the given edge information is like (u, v, wt), where u = starting node of the edge, v = ending node, and wt = edge weight. For all edges like this we will be checking if node u is reachable and if the distance to reach v through u is less than the distance to v found until now(i.e. <strong>dist[u]  and dist[u]+ wt &lt; dist[v]</strong>).</li><li>After repeating the 3rd step for N-1 times, we will apply the same step one more time to check if the negative cycle exists. If we found further relaxation is possible, we will conclude the graph has a negative cycle and from this step, we will return a distance array of -1(i.e. minimization of distances is not possible).</li><li>Otherwise, we will return the distance array which contains all the minimized distances.</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Note</strong>: <em>If you wish to see the dry run of the above approach, you can watch the video attached to this article.</em><strong><br>Code</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    \n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nclass Solution {\npublic:\n\t/*  Function to implement Bellman Ford\n\t*   edges: vector of vectors which represents the graph\n\t*   S: source vertex to start traversing graph with\n\t*   V: number of vertices\n\t*/\n\tvector&lt;int&gt; bellman_ford(int V, vector&lt;vector&lt;int&gt;&gt;&amp; edges, int S) {\n\t\tvector&lt;int&gt; dist(V, 1e8);\n\t\tdist[S] = 0;\n\t\tfor (int i = 0; i &lt; V - 1; i++) {\n\t\t\tfor (auto it : edges) {\n\t\t\t\tint u = it[0];\n\t\t\t\tint v = it[1];\n\t\t\t\tint wt = it[2];\n\t\t\t\tif (dist[u] != 1e8 &amp;&amp; dist[u] + wt &lt; dist[v]) {\n\t\t\t\t\tdist[v] = dist[u] + wt;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Nth relaxation to check negative cycle\n\t\tfor (auto it : edges) {\n\t\t\tint u = it[0];\n\t\t\tint v = it[1];\n\t\t\tint wt = it[2];\n\t\t\tif (dist[u] != 1e8 &amp;&amp; dist[u] + wt &lt; dist[v]) {\n\t\t\t\treturn { -1};\n\t\t\t}\n\t\t}\n\n\n\t\treturn dist;\n\t}\n};\n\n\nint main() {\n\n\tint V = 6;\n\tvector&lt;vector&lt;int&gt;&gt; edges(7, vector&lt;int&gt;(3));\n\tedges[0] = {3, 2, 6};\n\tedges[1] = {5, 3, 1};\n\tedges[2] = {0, 1, 5};\n\tedges[3] = {1, 5, -3};\n\tedges[4] = {1, 2, -2};\n\tedges[5] = {3, 4, -2};\n\tedges[6] = {2, 4, 3};\n\n\tint S = 0;\n\tSolution obj;\n\tvector&lt;int&gt; dist = obj.bellman_ford(V, edges, S);\n\tfor (auto d : dist) {\n\t\tcout &lt;&lt; d &lt;&lt; \" \";\n\t}\n\tcout &lt;&lt; endl;\n\n\treturn 0;\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output: 0 5 3 3 1 2</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O(V*E), where V = no. of vertices and E = no. of Edges.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(V) for the distance array which stores the minimized distances.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\n\n/*\n*   edges: vector of vectors which represents the graph\n*   S: source vertex to start traversing graph with\n*   V: number of vertices\n*/\nclass Solution {\n    static int[] bellman_ford(int V,\n                              ArrayList&lt;ArrayList&lt;Integer&gt;&gt; edges, int S) {\n        int[] dist = new int[V];\n        for (int i = 0; i &lt; V; i++) dist[i] = (int)(1e8);\n        dist[S] = 0;\n        // V x E\n        for (int i = 0; i &lt; V - 1; i++) {\n            for (ArrayList&lt;Integer&gt; it : edges) {\n                int u = it.get(0);\n                int v = it.get(1);\n                int wt = it.get(2);\n                if (dist[u] != 1e8 &amp;&amp; dist[u] + wt &lt; dist[v]) {\n                    dist[v] = dist[u] + wt;\n                }\n            }\n        }\n        // Nth relaxation to check negative cycle\n        for (ArrayList&lt;Integer&gt; it : edges) {\n            int u = it.get(0);\n            int v = it.get(1);\n            int wt = it.get(2);\n            if (dist[u] != 1e8 &amp;&amp; dist[u] + wt &lt; dist[v]) {\n                int temp[] = new int[1];\n                temp[0] = -1;\n                return temp;\n            }\n        }\n        return dist;\n    }\n}\n\npublic class tUf {\n    public static void main(String[] args) {\n        int V = 6;\n        int S = 0;\n        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; edges = new ArrayList&lt;&gt;() {\n            {\n                add(new ArrayList&lt;Integer&gt;(Arrays.asList(3, 2, 6)));\n                add(new ArrayList&lt;Integer&gt;(Arrays.asList(5, 3, 1)));\n                add(new ArrayList&lt;Integer&gt;(Arrays.asList(0, 1, 5)));\n                add(new ArrayList&lt;Integer&gt;(Arrays.asList(1, 5, -3)));\n                add(new ArrayList&lt;Integer&gt;(Arrays.asList(1, 2, -2)));\n                add(new ArrayList&lt;Integer&gt;(Arrays.asList(3, 4, -2)));\n                add(new ArrayList&lt;Integer&gt;(Arrays.asList(2, 4, 3)));\n            }\n        };\n\n\n\n        int[] dist = Solution.bellman_ford(V, edges, S);\n        for (int i = 0; i &lt; V; i++) {\n            System.out.print(dist[i] + \" \");\n        }\n        System.out.println(\"\");\n    }\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output: 0 5 3 3 1 2</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O(V*E), where V = no. of vertices and E = no. of Edges.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(V) for the distance array which stores the minimized distances.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;<strong><a href=\"https://www.linkedin.com/in/kriti39/\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>KRITIDIPTA GHOSH</strong></a></strong>&nbsp;for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a>.&nbsp;<em>If you want to suggest any improvement/correction in this article please mail us at&nbsp;write4tuf@gmail.com</em></p></blockquote>\n<!-- /wp:quote -->",
    "category_tag": "data-structure",
    "likes": 139,
    "preview": "Problem Statement: Given a weighted, directed and connected graph of V vertices and E edges, Find the shortest distance of all the vertices from the source vertex S. Note: If the Graph contains a n..."
}