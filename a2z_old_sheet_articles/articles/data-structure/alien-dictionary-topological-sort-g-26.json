{
    "dislikes": 7,
    "video": "U3N_je7tWAs",
    "publishedOn": "Sun Mar 24 2024 22:11:44 GMT+0530 (India Standard Time)",
    "slug": "alien-dictionary-topological-sort-g-26",
    "aid": "2154",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/alient-dictionary",
    "title": "Alien Dictionary - Topological Sort: G-26",
    "topics": [
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "graph",
            "topic-title": "Graph"
        }
    ],
    "category_tag": "data-structure",
    "likes": 117,
    "preview": "Problem Statement: Given a sorted dictionary of an alien language having N words and k starting alphabets of a standard dictionary. Find the order of characters in the alien language. Note: Many or...",
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement:</strong> Given a sorted dictionary of an alien language having N words and k starting alphabets of a standard dictionary. Find the order of characters in the alien language.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Note:</strong> Many orders may be possible for a particular test case, thus you may return any valid order.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Examples:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\"><strong>Example 1:</strong>\n<strong>Input:</strong> N = 5, K = 4\ndict = {\"baa\",\"abcd\",\"abca\",\"cab\",\"cad\"}\n<strong>Output</strong>: b d a c\n<strong>Explanation:</strong> \nWe will analyze every consecutive pair to find out the order of the characters.\nThe pair \u201cbaa\u201d and \u201cabcd\u201d suggests \u2018b\u2019 appears before \u2018a\u2019 in the alien dictionary.\nThe pair \u201cabcd\u201d and \u201cabca\u201d suggests \u2018d\u2019 appears before \u2018a\u2019 in the alien dictionary.\nThe pair \u201cabca\u201d and \u201ccab\u201d suggests \u2018a\u2019 appears before \u2018c\u2019 in the alien dictionary.\nThe pair \u201ccab\u201d and \u201ccad\u201d suggests \u2018b\u2019 appears before \u2018d\u2019 in the alien dictionary.\nSo, [\u2018b\u2019, \u2018d\u2019, \u2018a\u2019, \u2018c\u2019] is a valid ordering.\n\n<strong>Example 2:</strong>\n<strong>Input:</strong> N = 3, K = 3\ndict = {\"caa\",\"aaa\",\"aab\"}\n<strong>Output</strong>: c a b\n<strong>Explanation:</strong> Similarly, if we analyze the consecutive pair \nfor this example, we will figure out [\u2018c\u2019, \u2018a\u2019, \u2018b\u2019] is \na valid ordering.</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p><span class=\"has-inline-color has-accent-color\"><strong><em>Disclaimer</em></strong>: <em>Don't jump directly to the solution, try it out yourself first. </em></span></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https://practice.geeksforgeeks.org/problems/alien-dictionary/1?utm_source=youtube&amp;utm_medium=collab_striver_ytdescription&amp;utm_campaign=alien-dictionary\"><em>Problem Link</em></a><em>.</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Solution:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Let\u2019s consider the first example where <strong>N</strong> = 5, <strong>K</strong> = 4 and <strong>dict</strong> = {\"baa\", \"abcd\", \"abca\", \"cab\", \"cad\"}. So, here we need to find out the correct ordering of the first 4 letters of the alphabet(i.e. \u2018a\u2019, \u2018b\u2019, \u2018c\u2019, \u2018d\u2019).&nbsp;If we consider the first 2 words and try to figure out why \u201cbaa\u201d appears before \u201cabcd\u201d, we can clearly observe that they are differentiated by the first letter i.e. \u2018b\u2019 and \u2018a\u2019. That is why, we can conclude that in the alien dictionary, <strong><em>\u2018b\u2019 appears before \u2018a\u2019( i.e. \u2018b\u2019 is smaller than \u2018a\u2019). </em></strong>We can correspond this differentiating factor to a <strong><em>directed graph</em></strong> like the following:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":6904,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2022/11/Screenshot-2022-11-08-182031.png\" alt=\"\" class=\"wp-image-6904\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Let\u2019s understand <em>why we need not check</em><strong><em> \u201cbaa\u201d and \u201cabca\u201d (the 1st and the 3rd word) next:<br></em></strong>Until now, we have figured out why \u201cbaa\u201d appears before \u201cabcd\u201d. So, by convention, if \u201cabcd\u201d is appearing before \u201cabca\u201d and \u201cbaa\u201d is appearing before \u201cabcd\u201d, <strong><em>\u201cbaa\u201d will obviously appear before \u201cabca\u201d</em></strong>. That is why we will check the pair of \u201cabcd\u201d and \u201cabca\u201d next rather than checking \u201cbaa\u201d with any other words and this flow will be continued for the rest of the words.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Note:</strong> <em>Points to remember that we need not check every pair of words rather we will just check the consecutive pair of words in the dictionary. </em>Comparing each pair of consecutive words in the dictionary, we can construct a directed graph like the following:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":6905,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2022/11/Screenshot-2022-11-08-182153.png\" alt=\"\" class=\"wp-image-6905\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Now, we have successfully reduced the problem to a known <strong><em>directed graph problem</em></strong>. If we look at the problem from the graph point of view, we just need to find out the <strong><em>linear ordering of the nodes of the directed graph</em></strong>. And we can do this easily using <a href=\"https://takeuforward.org/data-structure/kahns-algorithm-topological-sort-algorithm-bfs-g-22/\" target=\"_blank\" rel=\"noopener\" title=\"\">the topological sort algorithm</a> which we have previously learned.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To further simplify the problem, we will denote the alphabet with numbers like: \u2018a\u2019 with 0, \u2018b\u2019 with 1, \u2018c\u2019 with 2, and so on. For example, if the letter is \u2018z\u2019, we will denote it using 25. Finally, the directed graph will look like the following illustration:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":6906,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2022/11/Screenshot-2022-11-08-182304.png\" alt=\"\" class=\"wp-image-6906\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>Note:</strong> <em>The intuition is to check every consecutive pair of words and find out the differentiating factor. With these factors, we will form a directed graph, and the whole problem balls down to a topological sort of problem.</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Edge Case: </strong>The problem arises when the value of K becomes 5 and there is no word in the dictionary containing the letter <strong>\u2018e\u2019</strong>. In this case, we will add a separate node with the value \u2018e\u2019 in the graph and it will be considered a component of the directed graph like the following, and the same algorithm will work fine for multiple components.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":6907,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2022/11/image-3.png\" alt=\"\" class=\"wp-image-6907\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>Note: </strong><em>If the value of K is greater than the number of unique characters appearing in the dictionary, then the extra characters will be considered the different components of the directed graph formed.</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>The follow-up question for the interview:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>When is the ordering not possible?<br></strong>There are two such cases when ordering is not possible:<ul><li><strong>If every character matches and the largest word appears before the shortest word: </strong>For example, if \u201cabcd\u201d appears before \u201cabc\u201d, we can say the ordering is not possible.</li><li><strong>If there exists a cyclic dependency between the characters: </strong>For example, in the dictionary: <strong>dict: {\u201cabc\u201d, \u201cbat\u201d, \u201cade\u201d}</strong> there exists a cyclic dependency between \u2018a\u2019 and \u2018b\u2019 because the dictionary states <strong>\u2018a\u2019 &lt; \u2018b\u2019 &lt; \u2018a\u2019</strong>, which is not possible.<br></li></ul></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Approach</strong>:&nbsp;</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>We will apply the BFS(Breadth First Search) traversal technique. Breadth First Search or BFS is a traversal technique where we visit the nodes level-wise, i.e., it visits the same level nodes simultaneously, and then moves to the next level.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Initial Configuration:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Adjacency List: </strong>Initially it will be empty and we will create this adjacency list comparing the consecutive pair of words.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Indegree Array:</strong> Initially all elements are set to 0. Then, We will count the incoming edges for a node and store it in this array. For example, if the indegree of node 3 is 2, indegree[3] = 2.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Queue:</strong> As we will use BFS, a queue is required. Initially, the node with indegree 0 will be pushed into the queue.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Answer array(topo):</strong> Initially empty and is used to store the linear ordering.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The algorithm steps are as follows:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li>First, we need to create the adjacency list for the graph. The steps are the following:<ol><li>We will run a loop from the starting index to the <strong>second last index </strong>because we will check the i<sup>th</sup> element and the (i+1)<sup>th</sup> element.&nbsp;</li><li>Inside the loop, we will pick two words (the word at the current index(<strong>s1</strong>) and the word at the next index(<strong>s2</strong>)). For comparing them, we will again run a loop up to the length of the smallest string.</li><li>Inside that second loop, if at any index we find inequality (<strong>s1[i] != s2[i]</strong>), we will add them to the adjacency list (<strong>s1[i] \u2014&gt; s2[i]</strong>) in terms of numbers(subtracting \u2018a\u2019 from them), and then we will immediately come out of the loop.&nbsp;</li><li>This is only because we want the first differentiating character. Finally, we will get the adjacency list.</li><li>In short, we need to find the differentiating character for adjacent strings and create the graph.&nbsp;</li></ol></li><li>Once the graph is created, simply perform a <a href=\"https://takeuforward.org/data-structure/detect-a-cycle-in-directed-graph-topological-sort-kahns-algorithm-g-23/\" target=\"_blank\" rel=\"noopener\" title=\"\">topo sort</a>, whose steps are given below.&nbsp;</li><li>Then, we will calculate the indegree of each node and store it in the indegree array. We can iterate through the given adj list, and simply for every node u-&gt;v, we can increase the indegree of v by 1 in the indegree array.&nbsp;</li><li>Initially, there will be always at least a single node whose indegree is 0. So, we will push the node(s) with indegree 0 into the queue.</li><li>Then, we will pop a node from the queue including the node in our answer array, and for all its adjacent nodes, we will decrease the indegree of that node by one. For example, if node u that has been popped out from the queue has an edge towards node v(u-&gt;v), we will decrease indegree[v] by 1.</li><li>After that, if for any node the indegree becomes 0, we will push that node again into the queue.</li><li>We will repeat steps 3 and 4 until the queue is completely empty. Finally, completing the BFS we will get the linear ordering of the nodes in the answer array.<strong><br></strong></li><li>For the final answer, we will iterate on the answer array and add each element in terms of character(adding \u2018a\u2019 to each of them) to the final string. Then we will return the string as our final answer.</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Note</strong>: <em>If you wish to see the dry run of the above approach, you can watch the video attached to this article.</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    \n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\n\n\nclass Solution {\n\t// works for multiple components\nprivate:\n\tvector&lt;int&gt; topoSort(int V, vector&lt;int&gt; adj[])\n\t{\n\t\tint indegree[V] = {0};\n\t\tfor (int i = 0; i &lt; V; i++) {\n\t\t\tfor (auto it : adj[i]) {\n\t\t\t\tindegree[it]++;\n\t\t\t}\n\t\t}\n\n\t\tqueue&lt;int&gt; q;\n\t\tfor (int i = 0; i &lt; V; i++) {\n\t\t\tif (indegree[i] == 0) {\n\t\t\t\tq.push(i);\n\t\t\t}\n\t\t}\n\t\tvector&lt;int&gt; topo;\n\t\twhile (!q.empty()) {\n\t\t\tint node = q.front();\n\t\t\tq.pop();\n\t\t\ttopo.push_back(node);\n\t\t\t// node is in your topo sort\n\t\t\t// so please remove it from the indegree\n\n\t\t\tfor (auto it : adj[node]) {\n\t\t\t\tindegree[it]--;\n\t\t\t\tif (indegree[it] == 0) q.push(it);\n\t\t\t}\n\t\t}\n\n\t\treturn topo;\n\t}\npublic:\n\tstring findOrder(string dict[], int N, int K) {\n\t\tvector&lt;int&gt;adj[K];\n\t\tfor (int i = 0; i &lt; N - 1; i++) {\n\t\t\tstring s1 = dict[i];\n\t\t\tstring s2 = dict[i + 1];\n\t\t\tint len = min(s1.size(), s2.size());\n\t\t\tfor (int ptr = 0; ptr &lt; len; ptr++) {\n\t\t\t\tif (s1[ptr] != s2[ptr]) {\n\t\t\t\t\tadj[s1[ptr] - 'a'].push_back(s2[ptr] - 'a');\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvector&lt;int&gt; topo = topoSort(K, adj);\n\t\tstring ans = \"\";\n\t\tfor (auto it : topo) {\n\t\t\tans = ans + char(it + 'a');\n\t\t}\n\t\treturn ans;\n\t}\n};\n\nint main() {\n\n\tint N = 5, K = 4;\n\tstring dict[] = {\"baa\", \"abcd\", \"abca\", \"cab\", \"cad\"};\n\tSolution obj;\n\tstring ans = obj.findOrder(dict, N, K);\n\n\tfor (auto ch : ans)\n\t\tcout &lt;&lt; ch &lt;&lt; ' ';\n\tcout &lt;&lt; endl;\n\n\treturn 0;\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output: b d a c&nbsp;</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O(N*len)+O(K+E), where N is the number of words in the dictionary, \u2018len\u2019 is the length up to the index where the first inequality occurs, K = no. of nodes, and E = no. of edges.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(K) + O(K)+O(K)+O(K) ~ O(4K), O(K) for the indegree array, and O(K) for the queue data structure used in BFS(where K = no.of nodes), O(K) for the answer array and O(K) for the adjacency list used in the algorithm.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\n\n\nclass Solution {\n    private List&lt;Integer&gt; topoSort(int V, List&lt;List&lt;Integer&gt;&gt; adj) {\n        int indegree[] = new int[V];\n        for (int i = 0; i &lt; V; i++) {\n            for (int it : adj.get(i)) {\n                indegree[it]++;\n            }\n        }\n\n        Queue&lt;Integer&gt; q = new LinkedList&lt;&gt;();\n        for (int i = 0; i &lt; V; i++) {\n            if (indegree[i] == 0) {\n                q.add(i);\n            }\n        }\n        List&lt;Integer&gt; topo = new ArrayList&lt;&gt;();\n        while (!q.isEmpty()) {\n            int node = q.peek();\n            q.remove();\n            topo.add(node);\n            // node is in your topo sort\n            // so please remove it from the indegree\n\n            for (int it : adj.get(node)) {\n                indegree[it]--;\n                if (indegree[it] == 0) q.add(it);\n            }\n        }\n\n        return topo;\n    }\n    public String findOrder(String [] dict, int N, int K) {\n        List&lt;List&lt;Integer&gt;&gt; adj = new ArrayList&lt;&gt;();\n        for (int i = 0; i &lt; K; i++) {\n            adj.add(new ArrayList&lt;&gt;());\n        }\n\n\n        for (int i = 0; i &lt; N - 1; i++) {\n            String s1 = dict[i];\n            String s2 = dict[i + 1];\n            int len = Math.min(s1.length(), s2.length());\n            for (int ptr = 0; ptr &lt; len; ptr++) {\n                if (s1.charAt(ptr) != s2.charAt(ptr)) {\n                    adj.get(s1.charAt(ptr) - 'a').add(s2.charAt(ptr) - 'a');\n                    break;\n                }\n            }\n        }\n\n        List&lt;Integer&gt; topo = topoSort(K, adj);\n        String ans = \"\";\n        for (int it : topo) {\n            ans = ans + (char)(it + (int)('a'));\n        }\n\n        return ans;\n\n    }\n}\n\npublic class tUf {\n    public static void main(String[] args) {\n        int N = 5, K = 4;\n        String[] dict = {\"baa\", \"abcd\", \"abca\", \"cab\", \"cad\"};\n        Solution obj = new Solution();\n        String ans = obj.findOrder(dict, N, K);\n\n        for (int i = 0; i &lt; ans.length(); i++) {\n            System.out.print(ans.charAt(i) + \" \");\n        }\n        System.out.println(\"\");\n    }\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output: b d a c&nbsp;</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O(N*len)+O(K+E), where N is the number of words in the dictionary, \u2018len\u2019 is the length up to the index where the first inequality occurs, K = no. of nodes, and E = no. of edges.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(K) + O(K)+O(K)+O(K) ~ O(4K), O(K) for the indegree array, and O(K) for the queue data structure used in BFS(where K = no.of nodes), O(K) for the answer array and O(K) for the adjacency list used in the algorithm.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;<strong><a href=\"https://www.linkedin.com/in/kriti39/\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>KRITIDIPTA GHOSH</strong></a></strong>&nbsp;for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a>.&nbsp;<em>If you want to suggest any improvement/correction in this article please mail us at&nbsp;write4tuf@gmail.com</em></p></blockquote>\n<!-- /wp:quote -->"
}