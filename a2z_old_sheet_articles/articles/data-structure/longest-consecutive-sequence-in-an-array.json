{
    "dislikes": 21,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:09:23 GMT+0530 (India Standard Time)",
    "slug": "longest-consecutive-sequence-in-an-array",
    "aid": "1474",
    "title": "Longest Consecutive Sequence in an Array",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/longest-consecutive-sequence-in-an-array",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "hashing",
            "topic-title": "Hashing"
        },
        {
            "topic-id": "sorting",
            "topic-title": "Sorting"
        }
    ],
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement: </strong>You are given an array of \u2018N\u2019 integers. You need to find the length of the longest sequence which contains the consecutive elements.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n<details class=\"article_example_details\">\n<summary class=\"article_example_summary\">\n<span><strong>\nExamples\n</strong>\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"atricle_example_content\">\n<pre class=\"wp-block-preformatted\"><!-- Insert New Examples Here -->\n<pre class=\"wp-block-preformatted\"><strong>Example 1:</strong>\n\n<strong>Input:</strong> [100, 200, 1, 3, 2, 4]\n\n<strong>Output:</strong> 4\n\n<strong>Explanation:</strong> The longest consecutive subsequence is 1, 2, 3, and 4.\n\n<strong>Input:</strong> [3, 8, 5, 7, 6]\n\n<strong>Output:</strong> 4\n\n<strong>Explanation:</strong> The longest consecutive subsequence is 5, 6, 7, and 8.</pre>\n</pre>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Practice Section-->\n<div class=\"practice\">\n<span><strong>Practice: </strong></span>\n<div class=\"problem-buttons\">\n\n<!-- Add Problem Link inside href -->\n<a href=\"https://bit.ly/3Ob0Zgn\" target=\"_blank\" rel=\"noopener\">\n<span>Solve Problem</span>\n<img src=\"https://static.takeuforward.org/wp/uploads/2023/04/Group-11-5.png\" alt=\"code-studio\">\n</a>\n</div>\n</div>\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\nyourself first. </em></p>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<div class=\"horizontal_navbar_dsa_article\">\n<div class=\"grid_container_three\">\n<a href=\"#brute-force-approach\" class=\"three-boxes box-a\">\nBrute Force Approach\n</a>\n<a href=\"#better-approach\" class=\"three-boxes box-b\">\nOptimal Approach 1\n</a>\n<a href=\"#optimal-approach\" class=\"three-boxes box-c\">\nOptimal Approach 2\n</a>\n<a href=\"#dsa_article_video_explanation\" class=\"three-boxes box-d\">\n<svg width=\"26\" height=\"26\" viewBox=\"0 0 20 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M8 10L13.19 7L8 4V10ZM19.56 2.17C19.69 2.64 19.78 3.27 19.84 4.07C19.91 4.87 19.94 5.56 19.94 6.16L20 7C20 9.19 19.84 10.8 19.56 11.83C19.31 12.73 18.73 13.31 17.83 13.56C17.36 13.69 16.5 13.78 15.18 13.84C13.88 13.91 12.69 13.94 11.59 13.94L10 14C5.81 14 3.2 13.84 2.17 13.56C1.27 13.31 0.69 12.73 0.44 11.83C0.31 11.36 0.22 10.73 0.16 9.93C0.0900001 9.13 0.0599999 8.44 0.0599999 7.84L0 7C0 4.81 0.16 3.2 0.44 2.17C0.69 1.27 1.27 0.69 2.17 0.44C2.64 0.31 3.5 0.22 4.82 0.16C6.12 0.0899998 7.31 0.0599999 8.41 0.0599999L10 0C14.19 0 16.8 0.16 17.83 0.44C18.73 0.69 19.31 1.27 19.56 2.17Z\" fill=\"red\"></path>\n</svg>\n\n</a>\n<div class=\"box-e tooltip\">\n<svg viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M12.842 9.25L11.9577 10.17C11.2502 10.89 10.8081 11.5 10.8081 13H8.84297V12.5C8.84297 11.39 9.28511 10.39 9.99255 9.67L11.2109 8.41C11.5745 8.05 11.7906 7.55 11.7906 7C11.7906 6.46957 11.5836 5.96086 11.2151 5.58579C10.8465 5.21071 10.3467 5 9.82552 5C9.30434 5 8.80451 5.21071 8.43598 5.58579C8.06745 5.96086 7.86041 6.46957 7.86041 7H5.89531C5.89531 5.93913 6.30938 4.92172 7.04644 4.17157C7.7835 3.42143 8.78316 3 9.82552 3C10.8679 3 11.8675 3.42143 12.6046 4.17157C13.3417 4.92172 13.7557 5.93913 13.7557 7C13.7543 7.84324 13.4259 8.65183 12.842 9.25ZM10.8081 17H8.84297V15H10.8081M9.82552 0C8.53521 0 7.25754 0.258658 6.06545 0.761205C4.87337 1.26375 3.79021 2.00035 2.87783 2.92893C1.03519 4.8043 0 7.34784 0 10C0 12.6522 1.03519 15.1957 2.87783 17.0711C3.79021 17.9997 4.87337 18.7362 6.06545 19.2388C7.25754 19.7413 8.53521 20 9.82552 20C12.4314 20 14.9306 18.9464 16.7732 17.0711C18.6158 15.1957 19.651 12.6522 19.651 10C19.651 4.47 15.2296 0 9.82552 0Z\" fill=\"black\"></path>\n</svg>\n<div class=\"bottom\">\n<p>Expand any one approach by clicking the given options in the bar. Clicking one approach on bar,\ncloses all other expands. You can manually expand more than one approach at a time</p>\n<i></i>\n</div>\n\n</div>\n</div>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Approaches Drop-Down -->\n<div class=\"dsa_article_dropdown_approachs \">\n\n<!-- Brute Force Approach Starts from here -->\n<div id=\"brute-force-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nBrute Force Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n<h3><strong>Brute-force Approach</strong>:&nbsp;</h3>\n<p>A straightforward but basic solution is to examine consecutive sequences for each element in the given array. For every element x, we will try to find the consecutive elements, x+1, x+2, x+3, and so on using the <a href=\"https://takeuforward.org/data-structure/linear-search-in-c/\">linear search algorithm</a>. Thus, we will check the length of the longest consecutive subsequence we can build for every element x. Among all the lengths we will consider the maximum one.</p>\n<h3><strong>Algorithm:</strong></h3>\n<ol><li>To begin, we will utilize a loop to iterate through each element one by one.</li><li>Next, for every element x, we will try to find the consecutive elements like x+1, x+2, x+3, and so on using the <a href=\"https://takeuforward.org/data-structure/linear-search-in-c/\">linear search algorithm</a> in the given array.<ol><li>Within a loop, our objective is to locate the next consecutive element x+1.&nbsp;<ol><li>If this element is found, we increment x by 1 and continue the search for x+2.&nbsp;</li><li>Furthermore, we increment the length of the current sequence (<strong>cnt</strong>) by 1.&nbsp;</li></ol></li></ol></li></ol>\n<p>This process repeats until step 2.2 occurs.</p>\n<ol start=\"2\"><li>If a specific consecutive element, for example, x+i, is not found, we will halt the search for subsequent consecutive elements such as x+i+1, x+i+2, and so on. Instead, we will take into account the length of the current sequence (<strong>cnt</strong>).</li><li>Among all the lengths we get for all the given array elements, the maximum one will be the answer.</li></ol>\n<p><strong>Dry-run: </strong><em>Please refer to the </em><a href=\"https://youtu.be/oO5uLE7EUlM\"><em>video</em></a><em> for the dry-run.</em></p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n\n<!-- Insert C++ code of Brute Force Here -->\n#include &lt;bits/stdc++.h>\nusing namespace std;\n\nbool linearSearch(vector&lt;int>&amp;a, int num) {\n    int n = a.size(); //size of array\n    for (int i = 0; i &lt; n; i++) {\n        if (a[i] == num)\n            return true;\n    }\n    return false;\n}\nint longestSuccessiveElements(vector&lt;int>&amp;a) {\n    int n = a.size(); //size of array\n    int longest = 1;\n    //pick a element and search for its\n    //consecutive numbers:\n    for (int i = 0; i &lt; n; i++) {\n        int x = a[i];\n        int cnt = 1;\n        //search for consecutive numbers\n        //using linear search:\n        while (linearSearch(a, x + 1) == true) {\n            x += 1;\n            cnt += 1;\n        }\n\n        longest = max(longest, cnt);\n    }\n    return longest;\n}\n\nint main()\n{\n    vector&lt;int> a = {100, 200, 1, 2, 3, 4};\n    int ans = longestSuccessiveElements(a);\n    cout &lt;&lt; \"The longest consecutive sequence is \" &lt;&lt; ans &lt;&lt; \"\\n\";\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\n<!-- Insert Java code of Brute Force Here -->\nimport java.util.*;\n\npublic class tUf {\n    public static boolean linearSearch(int []a, int num) {\n        int n = a.length; //size of array\n        for (int i = 0; i &lt; n; i++) {\n            if (a[i] == num)\n                return true;\n        }\n        return false;\n    }\n    public static int longestSuccessiveElements(int []a) {\n        int n = a.length; //size of array\n        int longest = 1;\n        //pick a element and search for its\n        //consecutive numbers:\n        for (int i = 0; i &lt; n; i++) {\n            int x = a[i];\n            int cnt = 1;\n            //search for consecutive numbers\n            //using linear search:\n            while (linearSearch(a, x + 1) == true) {\n                x += 1;\n                cnt += 1;\n            }\n\n            longest = Math.max(longest, cnt);\n        }\n        return longest;\n    }\n\n    public static void main(String[] args) {\n        int[] a = {100, 200, 1, 2, 3, 4};\n        int ans = longestSuccessiveElements(a);\n        System.out.println(\"The longest consecutive sequence is \" + ans);\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\n<!-- Insert Python code of Brute Force Here -->\ndef linearSearch(a, num):\n    n = len(a)  # size of array\n    for i in range(n):\n        if a[i] == num:\n            return True\n    return False\n\n\ndef longestSuccessiveElements(a):\n    n = len(a)  # size of array\n    longest = 1\n    # pick an element and search for its consecutive numbers\n    for i in range(n):\n        x = a[i]\n        cnt = 1\n        # search for consecutive numbers using linear search\n        while linearSearch(a, x + 1):\n            x += 1\n            cnt += 1\n\n        longest = max(longest, cnt)\n    return longest\n\n\na = [100, 200, 1, 2, 3, 4]\nans = longestSuccessiveElements(a)\nprint(\"The longest consecutive sequence is\", ans)\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\n<!-- Insert JavaScript code of Brute Force Here -->\nfunction linearSearch(arr, num) {\n    let n = arr.length; // size of array\n    for (let i = 0; i &lt; n; i++) {\n        if (arr[i] === num)\n            return true;\n    }\n    return false;\n}\n\nfunction longestSuccessiveElements(arr) {\n    let n = arr.length; // size of array\n    let longest = 1;\n    // pick an element and search for its\n    // consecutive numbers:\n    for (let i = 0; i &lt; n; i++) {\n        let x = arr[i];\n        let cnt = 1;\n        // search for consecutive numbers\n        // using linear search:\n        while (linearSearch(arr, x + 1) === true) {\n            x += 1;\n            cnt += 1;\n        }\n\n        longest = Math.max(longest, cnt);\n    }\n    return longest;\n}\n\nlet arr = [100, 200, 1, 2, 3, 4];\nlet ans = longestSuccessiveElements(arr);\nconsole.log(\"The longest consecutive sequence is\", ans);\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Brute Force Here -->\n<p><strong>Output:</strong>   The longest consecutive sequence is 4.\n\n</p>\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n<!-- Insert Time and Space Complexity of Brute Force Here -->\n<p><strong>Time Complexity: </strong>O(N<sup>2</sup>), N = size of the given array.<br><strong>Reason: </strong>We are using nested loops each running for approximately N times.</p>\n<p><strong>Space Complexity:</strong> O(1), as we are not using any extra space to solve this problem.</p>\n</p>\n</details>\n</div>\n</details>\n</div>\n<!-- Brute Force Approach Ends here -->\n\n\n<!-- Better Approach Starts from here -->\n\n<div id=\"better-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nBetter Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition For Better Approach Here -->\n<h3><strong>Better Approach(Using sorting)</strong>:&nbsp;</h3>\n<p>We can simply <a href=\"https://takeuforward.org/c/c-stl/sort-in-c-stl/\">sort the array</a> and run a for loop to find the longest consecutive sequence.</p>\n<h3><strong>Algorithm:</strong></h3>\n<ul><li>We will consider 3 variables,&nbsp;<ul><li><strong>\u2018lastSmaller\u2019 \u2192</strong>(<em>to store the last included element of the current sequence</em>),&nbsp;</li><li><strong>\u2018cnt\u2019 \u2192 </strong>(<em>to store the length of the current sequence</em>),&nbsp;</li><li><strong>\u2018longest\u2019 \u2192 </strong>(<em>to store the maximum length</em>).</li></ul></li><li>Initialize \u2018lastSmaller\u2019 with \u2018INT_MIN\u2019, \u2018cnt\u2019 with 0, and \u2018longest\u2019 with 1(<em>as the minimum length of the sequence is 1</em>).</li></ul>\n<p>The steps are as follows:</p>\n<ol><li>First, we will sort the entire array.</li><li>To begin, we will utilize a loop(<strong>say i</strong>) to iterate through each element one by one.</li><li>For every element, we will check if this can be a part of the current sequence like the following:<ol><li><strong>If arr[i]-1 == lastSmaller: </strong>The last element in our sequence is labeled as 'lastSmaller' and the current element 'arr[i]' is exactly 'lastSmaller'+1. It indicates that 'arr[i]' is the next consecutive element. To incorporate it into the sequence, we update 'lastSmaller' with the value of 'arr[i]' and increment the length of the current sequence, denoted as <strong>'cnt'</strong>, by 1.<br></li><li><strong>If arr[i] == lastSmaller: </strong>If the current element, arr[i], matches the last element of the sequence (represented by <strong>'lastSmaller'</strong>), we can skip it since we have already included it before.<br></li><li><strong>Otherwise, if lastSmaller != arr[i]: </strong>On satisfying this condition, we can conclude that the current element, arr[i] &gt; lastSmaller+1. It indicates that arr[i] cannot be a part of the current sequence. So, we will start a new sequence from arr[i] by updating \u2018lastSmaller\u2019 with the value of arr[i]. And we will set the length of the current sequence(<strong>cnt</strong>) to 1.<br></li></ol></li><li>Every time, <strong>inside the loop</strong>, we will compare \u2018cnt\u2019 and \u2018longest\u2019 and update \u2018longest\u2019 with the maximum value. <strong>longest = max(longest, cnt)</strong></li><li>Finally, once the iteration is complete, we will have the answer stored in the variable <strong>\u2018longest\u2019</strong>.</li></ol>\n<p><strong>Note: </strong><em>Here, we are distorting the given array by sorting it.</em></p>\n<p><strong>Dry-run: </strong><em>Please refer to the </em><a href=\"https://youtu.be/oO5uLE7EUlM\"><em>video</em></a><em> for the dry-run.</em></p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n\n<!-- Insert C++ Code of Better Approach Here -->\n#include &lt;bits/stdc++.h>\nusing namespace std;\n\nint longestSuccessiveElements(vector&lt;int>&amp;a) {\n    int n = a.size();\n    if (n == 0) return 0;\n\n    //sort the array:\n    sort(a.begin(), a.end());\n    int lastSmaller = INT_MIN;\n    int cnt = 0;\n    int longest = 1;\n\n    //find longest sequence:\n    for (int i = 0; i &lt; n; i++) {\n        if (a[i] - 1 == lastSmaller) {\n            //a[i] is the next element of the\n            //current sequence.\n            cnt += 1;\n            lastSmaller = a[i];\n        }\n        else if (a[i] != lastSmaller) {\n            cnt = 1;\n            lastSmaller = a[i];\n        }\n        longest = max(longest, cnt);\n    }\n    return longest;\n\n}\n\nint main()\n{\n    vector&lt;int> a = {100, 200, 1, 2, 3, 4};\n    int ans = longestSuccessiveElements(a);\n    cout &lt;&lt; \"The longest consecutive sequence is \" &lt;&lt; ans &lt;&lt; \"\\n\";\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\n<!-- Insert Java Code of Better Approach Here -->\nimport java.util.*;\n\npublic class tUf {\n    public static int longestSuccessiveElements(int []a) {\n        int n = a.length;\n        if (n == 0) return 0;\n\n        //sort the array:\n        Arrays.sort(a);\n        int lastSmaller = Integer.MIN_VALUE;\n        int cnt = 0;\n        int longest = 1;\n\n        //find longest sequence:\n        for (int i = 0; i &lt; n; i++) {\n            if (a[i] - 1 == lastSmaller) {\n                //a[i] is the next element of the\n                //current sequence.\n                cnt += 1;\n                lastSmaller = a[i];\n            } else if (a[i] != lastSmaller) {\n                cnt = 1;\n                lastSmaller = a[i];\n            }\n            longest = Math.max(longest, cnt);\n        }\n        return longest;\n    }\n\n    public static void main(String[] args) {\n        int[] a = {100, 200, 1, 2, 3, 4};\n        int ans = longestSuccessiveElements(a);\n        System.out.println(\"The longest consecutive sequence is \" + ans);\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\n<!-- Insert Python Code of Better Approach Here -->\ndef longestSuccessiveElements(a):\n    n = len(a)\n    if n == 0:\n        return 0\n\n    # sort the array\n    a.sort()\n    lastSmaller = float('-inf')\n    cnt = 0\n    longest = 1\n\n    # find longest sequence\n    for i in range(n):\n        if a[i] - 1 == lastSmaller:\n            # a[i] is the next element of the\n            # current sequence\n            cnt += 1\n            lastSmaller = a[i]\n        elif a[i] != lastSmaller:\n            cnt = 1\n            lastSmaller = a[i]\n        longest = max(longest, cnt)\n    return longest\n\na = [100, 200, 1, 2, 3, 4]\nans = longestSuccessiveElements(a)\nprint(\"The longest consecutive sequence is\", ans)\n\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\n<!-- Insert javascript Code of Better Approach Here -->\nfunction longestSuccessiveElements(arr) {\n    let n = arr.length;\n    if (n === 0) return 0;\n\n    // sort the array:\n    arr.sort((a, b) => a - b);\n    let lastSmaller = -Infinity;\n    let cnt = 0;\n    let longest = 1;\n\n    // find longest sequence:\n    for (let i = 0; i &lt; n; i++) {\n        if (arr[i] - 1 === lastSmaller) {\n            // arr[i] is the next element of the\n            // current sequence.\n            cnt += 1;\n            lastSmaller = arr[i];\n        } else if (arr[i] !== lastSmaller) {\n            cnt = 1;\n            lastSmaller = arr[i];\n        }\n        longest = Math.max(longest, cnt);\n    }\n    return longest;\n}\n\nlet arr = [100, 200, 1, 2, 3, 4];\nlet ans = longestSuccessiveElements(arr);\nconsole.log(\"The longest consecutive sequence is\", ans);\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Better Approach Here -->\n<strong>Output:</strong>  The longest consecutive sequence is 4.\n\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Better Approach Here -->\n<p><strong>Time Complexity: </strong>O(NlogN) + O(N), N = size of the given array.<br><strong>Reason: </strong>O(NlogN) for sorting the array. To find the longest sequence, we are using a loop that results in O(N).</p>\n<p><strong>Space Complexity:</strong> O(1), as we are not using any extra space to solve this problem.</p>\n</p>\n</details>\n</div>\n</details>\n</div>\n<!-- Better Approach Ends from here -->\n\n\n<!-- Optimal Approach Starts from here -->\n\n<div id=\"optimal-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nOptimal Approach \n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm of Better Approach Here -->\n<h3><strong>Optimal Approach(Using Set data structure)</strong>:&nbsp;</h3>\n<p>We will adopt a similar approach to the brute-force method but with optimizations in the search process. Instead of searching sequences for every array element as in the brute-force approach, we will focus solely on finding sequences only for those numbers that can be the starting numbers of the sequences. This targeted approach narrows down our search and improves efficiency.</p>\n<p>We will do this with the help of the Set data structure.</p>\n<p><strong>How to identify if a number can be the starting number for a sequence:</strong></p>\n<ul><li>First, we will put all the array elements into the set data structure.</li><li>If a number, num, is a starting number, ideally, num-1 should not exist. So, for every element, x, in the set, we will check if x-1 exists inside the set. :<ul><li><strong>If x-1 exists: </strong>This means x cannot be a starting number and we will move on to the next element in the set.</li><li><strong>If x-1 does not exist: </strong>This means x is a starting number of a sequence. So, for number, x, we will start finding the consecutive elements.</li></ul></li></ul>\n<p><strong>How to search for consecutive elements for a number, x:</strong></p>\n<ul><li>Instead of using linear search, we will use the set data structure itself to search for the elements x+1, x+2, x+3, and so on.</li></ul>\n<p>Thus, using this method we can narrow down the search and optimize the approach.</p>\n<h3><strong>Algorithm:</strong></h3>\n<p>We will declare 2 variables,&nbsp;</p>\n<ul><li><strong>\u2018cnt\u2019 \u2192 </strong>(<em>to store the length of the current sequence</em>),\u00a0</li><li><strong>\u2018longest\u2019 \u2192 </strong>(<em>to store the maximum length</em>).</li></ul>\n<ol><li>First, we will put all the array elements into the set data structure.</li><li>For every element, x, that can be a starting number(<em>i.e. x-1 does not exist in the set</em>) we will do the following:<ol><li>We will set the length of the current sequence(<strong>cnt</strong>) to 1.</li><li>Then, again using the set, we will search for the consecutive elements such as x+1, x+2, and so on, and find the maximum possible length of the current sequence. This length will be stored in the variable \u2018cnt\u2019.</li><li>After that, we will compare \u2018cnt\u2019 and \u2018longest\u2019 and update the variable \u2018longest\u2019 with the maximum value (i.e. <strong>longest = max(longest, cnt)</strong>).</li></ol></li><li>Finally, we will have the answer i.e. \u2018longest\u2019.</li></ol>\n<p><strong>Dry-run: </strong><em>Please refer to the </em><a href=\"https://youtu.be/oO5uLE7EUlM\"><em>video</em></a><em> for the dry-run.</em></p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n\n<!-- Insert C++ code of Optimal Approach Here-->\n#include &lt;bits/stdc++.h>\nusing namespace std;\n\nint longestSuccessiveElements(vector&lt;int>&amp;a) {\n    int n = a.size();\n    if (n == 0) return 0;\n\n    int longest = 1;\n    unordered_set&lt;int> st;\n    //put all the array elements into set:\n    for (int i = 0; i &lt; n; i++) {\n        st.insert(a[i]);\n    }\n\n    //Find the longest sequence:\n    for (auto it : st) {\n        //if 'it' is a starting number:\n        if (st.find(it - 1) == st.end()) {\n            //find consecutive numbers:\n            int cnt = 1;\n            int x = it;\n            while (st.find(x + 1) != st.end()) {\n                x = x + 1;\n                cnt = cnt + 1;\n            }\n            longest = max(longest, cnt);\n        }\n    }\n    return longest;\n\n}\n\nint main()\n{\n    vector&lt;int> a = {100, 200, 1, 2, 3, 4};\n    int ans = longestSuccessiveElements(a);\n    cout &lt;&lt; \"The longest consecutive sequence is \" &lt;&lt; ans &lt;&lt; \"\\n\";\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\n<!-- Insert Java code of Optimal Approach Here -->\nimport java.util.*;\n\npublic class tUf {\n    public static int longestSuccessiveElements(int[] a) {\n        int n = a.length;\n        if (n == 0)\n            return 0;\n\n        int longest = 1;\n        Set&lt;Integer> set = new HashSet&lt;>();\n\n        // put all the array elements into set\n        for (int i = 0; i &lt; n; i++) {\n            set.add(a[i]);\n        }\n\n        // Find the longest sequence\n        for (int it : set) {\n            // if 'it' is a starting number\n            if (!set.contains(it - 1)) {\n                // find consecutive numbers\n                int cnt = 1;\n                int x = it;\n                while (set.contains(x + 1)) {\n                    x = x + 1;\n                    cnt = cnt + 1;\n                }\n                longest = Math.max(longest, cnt);\n            }\n        }\n        return longest;\n    }\n\n    public static void main(String[] args) {\n        int[] a = {100, 200, 1, 2, 3, 4};\n        int ans = longestSuccessiveElements(a);\n        System.out.println(\"The longest consecutive sequence is \" + ans);\n    }\n}\n\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\n<!-- Insert Python code of Optimal Approach Here -->\ndef longestSuccessiveElements(a):\n    n = len(a)\n    if n == 0:\n        return 0\n\n    longest = 1\n    st = set()\n    # put all the array elements into set\n    for i in range(n):\n        st.add(a[i])\n\n    # Find the longest sequence\n    for it in st:\n        # if 'it' is a starting number\n        if it - 1 not in st:\n            # find consecutive numbers\n            cnt = 1\n            x = it\n            while x + 1 in st:\n                x += 1\n                cnt += 1\n            longest = max(longest, cnt)\n    return longest\n\na = [100, 200, 1, 2, 3, 4]\nans = longestSuccessiveElements(a)\nprint(\"The longest consecutive sequence is\", ans)\n\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\n<!-- Insert Python code of Optimal Approach Here -->\nfunction longestSuccessiveElements(a) {\n    let n = a.length;\n    if (n === 0)\n        return 0;\n\n    let longest = 1;\n    let st = new Set();\n    \n    // put all the array elements into set\n    for (let i = 0; i &lt; n; i++) {\n        st.add(a[i]);\n    }\n\n    // Find the longest sequence\n    for (let it of st) {\n        // if 'it' is a starting number\n        if (!st.has(it - 1)) {\n            // find consecutive numbers\n            let cnt = 1;\n            let x = it;\n            while (st.has(x + 1)) {\n                x = x + 1;\n                cnt = cnt + 1;\n            }\n            longest = Math.max(longest, cnt);\n        }\n    }\n    return longest;\n}\n\nlet a = [100, 200, 1, 2, 3, 4];\nlet ans = longestSuccessiveElements(a);\nconsole.log(\"The longest consecutive sequence is\", ans);\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Optimal Apporach Here -->\n<strong>Output:</strong> The longest consecutive sequence is 4.\n\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Optimal Approach-->\n<p><strong>Time Complexity: </strong>O(N) + O(2*N) ~ O(3*N), where N = size of the array.<br><strong>Reason: </strong>O(N) for putting all the elements into the set data structure. After that for every starting element, we are finding the consecutive elements. Though we are using nested loops, the set will be traversed at most twice in the worst case. So, the time complexity is O(2*N) instead of O(N<sup>2</sup>).</p>\n<p><strong>Space Complexity: </strong>O(N), as we are using the set data structure to solve this problem.</p>\n<p><strong>Note:</strong> The time complexity is computed under the assumption that we are using unordered_set and it is taking O(1) for the set operations.&nbsp;</p>\n<ul><li>If we consider the worst case the set operations will take O(N) in that case and the total time complexity will be approximately O(N<sup>2</sup>).&nbsp;</li><li>And if we use the set instead of unordered_set, the time complexity for the set operations will be O(logN) and the total time complexity will be O(NlogN).</li></ul>\n</p>\n</details>\n</div>\n</details>\n</div>\n<!-- Optimal Approach Starts from here -->\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n<details>\n<summary class=\"main-summary\">\n<span>\nVideo Explanation\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"yt-video-wrapper\">\n\n<!-- Insert iframe embed Link of Youtube Video-->\n<iframe class=\"lazy-loaded\" loading=\"lazy\" title=\"Longest Consecutive Sequence in an Array\" width=\"810\" height=\"456\" data-lazy-type=\"iframe\" data-src=\"https://www.youtube.com/embed/oO5uLE7EUlM\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\" src=\"https://www.youtube.com/embed/oO5uLE7EUlM?feature=oembed\"></iframe><noscript>\n<iframe loading=\"lazy\" title=\"Longest Consecutive Sequence in an Array\" width=\"810\" height=\"456\" src=\"https://www.youtube.com/embed/oO5uLE7EUlM\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe></noscript>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script>\n\nconst codeSections = document.querySelectorAll('.code-section');\n\n// Get last selected language from localStorage or set default value\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\n// Update last selected language for all sections and store in localStorage\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\n// Handle copy button click event\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\n// Set initial state of the tabs\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<script>\nconst codeSections = document.querySelectorAll('.code-section');\n\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script src=\"https://takeuforward.org/UXApproachDropDowns/3ApproachJSScript.js\"></script>\n<!-- /wp:html -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to\u00a0<strong><strong>Nishant Rana</strong></strong><em>,\u00a0<em><a href=\"https://www.linkedin.com/in/imsudip/\" target=\"_blank\" rel=\"noreferrer noopener\">Sudip Ghosh</a> and <em><strong><a href=\"https://www.linkedin.com/in/kriti39/\" target=\"_blank\" rel=\"noreferrer noopener\">KRITIDIPTA GHOSH</a></strong></em></em></em>\u00a0for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,\u00a0</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->",
    "category_tag": "data-structure",
    "likes": 538,
    "preview": "Problem Statement: You are given an array of \u2018N\u2019 integers. You need to find the length of the longest sequence which contains the consecutive elements. Examples Example 1: Input: [100, 200, 1, 3, 2..."
}