{
    "dislikes": 2,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:10:07 GMT+0530 (India Standard Time)",
    "slug": "search-in-a-binary-search-tree-2",
    "aid": "1678",
    "tuf_plus": "",
    "title": "Search in a Binary Search Tree",
    "topics": [
        {
            "topic-id": "binary-search-tree",
            "topic-title": "Binary Search Tree"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "recursion",
            "topic-title": "Recursion"
        }
    ],
    "category_tag": "data-structure",
    "likes": 32,
    "preview": "Problem Statement: Given a Binary Search Tree and a key value return the node in the BST having data equal to \u2018key\u2019 otherwise return nullptr. Examples Example 1: Input:Binary Search Tree: 8 5 12 4...",
    "content": "<p><strong>Problem Statement: </strong>  Given a Binary Search Tree and a key value return the node in the BST having data equal to \u2018key\u2019 otherwise return nullptr.\n</p>\n<div id=\"article_examples\">\n    <details class=\"article_example_details\">\n        <summary class=\"article_example_summary\">\n            <span><strong>\n                    Examples\n                </strong>\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"atricle_example_content\">\n            <pre class=\"wp-block-preformatted\">\n                <span><strong>Example 1:</strong></span>\n\t\t\t\t<span><strong>Input:</strong>Binary Search Tree: 8 5 12 4 7 10 14 -1 -1 6 -1 -1 -1 13 -1, Key = 10\n\n\t\t\t\t</span>\n\t\t\t\t<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/search-in-bst-image1-fXzxqzjo\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n\t\t\t\t<span><strong>Output:</strong>True</span>\t\t\t\n\t\t\t\t<span><strong>Explanation: </strong> </span>\n\t\t\t\t<!--<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/serialise-deserialise-image2-hj-JRxqA\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>-->\n\t\t\t\t\n\t\t\t\t<span><strong>Example 2:</strong></span>\n\t\t\t\t<span><strong>Input:</strong>Binary Search Tree: 4 2 6 1 3 5 7, Key = 3\n\n\t\t\t\t</span>\n\t\t\t\t<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/search-in-bst-image3-nP0N15hP\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n\t\t\t\t<span><strong>Output :</strong>False</span>\n\t\t\t\t\n\t\t\t\t<span><strong>Explanation: </strong> </span>\n\t\t\t\t<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/search-in-bst-image4-DptF1M1k\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\t\t\n            </pre>\n        </div>\n    </details>\n</div>\n\n<!-- This is Practice Section-->\n<div class=\"practice\">\n    <span><strong>Practice: </strong></span>\n    <div class=\"problem-buttons\">\n\n        <!-- Add Problem Link inside href -->\n        <a href=\"https://www.codingninjas.com/studio/problems/search-in-bst_1402878?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf\" target=\"_blank\" rel=\"noopener\">\n            <span>Solve Problem</span>\n            <img src=\"https://takeuforward-content-images.s3.ap-south-1.amazonaws.com/content/Group-11-5-pFOq-8ga\"\n                alt=\"code-studio\">\n        </a>\n    </div>\n    <!--<div class=\"problem-buttons\">\n         Add Problem Link inside href \n        <a href=\"\" target=\"_blank\" rel=\"noopener\">\n            <span>Solve Problem</span>\n            <img src=\"https://cdn.iconscout.com/icon/free/png-256/free-leetcode-3521542-2944960.png?f=webp\"\n                alt=\"leetcode\">\n        </a>\n    </div>-->\n</div>\n\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\n        yourself first. </em></p>\n\n\n<div id=\"brute-force-approach\">\n    <details>\n        <summary class=\"main-summary\">\n            <span>\n                Optimal Approach \n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                </path>\n            </svg>\n        </summary>\n        <div class=\"common-drops\">\n            <details class=\"secondary-details\" open=\"\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Algorithm / Intuition\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <div class=\"approach-algorithm\">\n                    <!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n                    \n                    <p>Starting from the root, continuously compare the key value with the current node\u2019s value, traverse to left or right based on these comparisons.\n                    If the current node's value matches the target value, the algorithm stops and returns that node. Otherwise, it moves down the tree, choosing the left or right child depending on whether the target value is smaller or larger than the current node's value, respectively. \n                    This process continues until either the target value is found within a node or the algorithm reaches a nullptr node, indicating that the value is not present in the BST.</p>\n                    \n                    <h3>Algorithm: </h3>\n                    <p><strong>Step 1:</strong>Start at the root of the Binary Search Tree.</p>\n                    <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/search-in-bst-image5-7Pt1rqR8\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n                    <p><strong>Step 2: </strong>While the current node is not null and the current node\u2019s value is not equal to the key recursively travel the tree by:\n                    <ol><li>If the target value is less than the current node\u2019s value, move to the left child as smaller values are on the left subtree in the BST.</li><li>If the target value is greater than the current node\u2019s value, move to the right child as larger values are on the right subtree in the BST.</li></ol></p>\n                    <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/search-in-bst-image6-ORREpe-X\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>                   \n\n                    <p><strong>Step 3: </strong>\n                    Return the current node if it contains the target value, or NULL if the value is not found in the BST.</p>\n                    <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/search-in-bst-image7-pcjNE2m5\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>                          \n                    \n\n                    \n                </div>\n            </details>\n            <details class=\"code-section secondary-details\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Code\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <div class=\"code-tabs\">\n                    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n                    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n                    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n                    <button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n                    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\"\n                        xmlns=\"http://www.w3.org/2000/svg\">\n                        <path\n                            d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n                        </path>\n                    </svg>\n                </div>\n                <div class=\"code-content\">\n                    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;climits&gt; \nusing namespace std;\n\n// Definition of TreeNode structure\n// for a binary tree node\nstruct TreeNode {\n    // Value of the node\n    int val;\n    \n    // Pointer to the left child node\n    TreeNode* left;\n    \n    // Pointer to the right child node\n    TreeNode* right;\n\n    // Constructor to initialize the node with a\n    // value and set left and right pointers to null\n    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n};\n\nclass Solution {\npublic:\n    // This function searches for a node with\n    // a specified value in a Binary Search Tree (BST).\n    TreeNode* searchBST(TreeNode* root, int val){\n        // Loop until either the tree is\n        // exhausted (NULL) or the value is found.\n        while(root != NULL &amp;&amp; root-&gt;val != val){\n            // Check if the target value is\n            // less than the current node's value.\n            // If so, move to the left subtree\n            // (values smaller than the current node).\n            // Otherwise, move to the right subtree\n            // (values larger than the current node).\n            root = val &lt; root-&gt;val ? root-&gt;left : root-&gt;right;\n        }\n        // Return the node containing the target value,\n        // if found; otherwise, return NULL.\n        return root;\n    }\n};\n\n\n// Function to perform an in-order traversal\n// of a binary tree and print its nodes\nvoid printInOrder(TreeNode* root) {\n    // Check if the current node\n    // is null (base case for recursion)\n    if (root == nullptr) {\n        // If null, return and\n        // terminate the function\n        return;\n    }\n\n    // Recursively call printInOrder\n    // for the left subtree\n    printInOrder(root-&gt;left);\n\n    // Print the value of the current node\n    cout &lt;&lt; root-&gt;val &lt;&lt; &quot; &quot;;\n\n    // Recursively call printInOrder\n    // for the right subtree\n    printInOrder(root-&gt;right);\n}\n\nint main() {\n    // Creating a BST\n    TreeNode* root = new TreeNode(5);\n    root-&gt;left = new TreeNode(3);\n    root-&gt;right = new TreeNode(8);\n    root-&gt;left-&gt;left = new TreeNode(2);\n    root-&gt;left-&gt;right = new TreeNode(4);\n    root-&gt;right-&gt;left = new TreeNode(6);\n    root-&gt;right-&gt;right = new TreeNode(10);\n    \n    cout &lt;&lt; &quot;Binary Search Tree: &quot;&lt;&lt; endl;\n    printInOrder(root);\n    cout &lt;&lt; endl;\n\n    Solution solution;\n    \n    // Searching for a value in the BST\n    int target = 6;\n    TreeNode* result = solution.searchBST(root, target);\n\n    // Displaying the search result\n    if (result != nullptr) {\n        std::cout &lt;&lt; &quot;Value &quot; &lt;&lt; target &lt;&lt; &quot; found in the BST!&quot; &lt;&lt; std::endl;\n    } else {\n        std::cout &lt;&lt; &quot;Value &quot; &lt;&lt; target &lt;&lt; &quot; not found in the BST.&quot; &lt;&lt; std::endl;\n    }\n    \n    return 0;\n}\n                            </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block \" data-lang=\"java\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"java\" class=\"language-java\">\n// Importing required libraries\nimport java.util.*;\n\n// Definition of TreeNode structure\n// for a binary tree node\nclass TreeNode {\n    // Value of the node\n    int val;\n    \n    // Pointer to the left child node\n    TreeNode left;\n    \n    // Pointer to the right child node\n    TreeNode right;\n\n    // Constructor to initialize the node with a\n    // value and set left and right pointers to null\n    TreeNode(int x) {\n        val = x;\n        left = null;\n        right = null;\n    }\n}\n\nclass Solution {\n    // This function searches for a node with\n    // a specified value in a Binary Search Tree (BST).\n    public TreeNode searchBST(TreeNode root, int val) {\n        // Loop until either the tree is\n        // exhausted (null) or the value is found.\n        while (root != null &amp;&amp; root.val != val) {\n            // Check if the target value is\n            // less than the current node's value.\n            // If so, move to the left subtree\n            // (values smaller than the current node).\n            // Otherwise, move to the right subtree\n            // (values larger than the current node).\n            root = val &lt; root.val ? root.left : root.right;\n        }\n        // Return the node containing the target value,\n        // if found; otherwise, return null.\n        return root;\n    }\n}\n\npublic class Main {\n    // Function to perform an in-order traversal\n    // of a binary tree and print its nodes\n    public static void printInOrder(TreeNode root) {\n        // Check if the current node\n        // is null (base case for recursion)\n        if (root == null) {\n            // If null, return and\n            // terminate the function\n            return;\n        }\n\n        // Recursively call printInOrder\n        // for the left subtree\n        printInOrder(root.left);\n\n        // Print the value of the current node\n        System.out.print(root.val + &quot; &quot;);\n\n        // Recursively call printInOrder\n        // for the right subtree\n        printInOrder(root.right);\n    }\n\n    public static void main(String[] args) {\n        // Creating a BST\n        TreeNode root = new TreeNode(5);\n        root.left = new TreeNode(3);\n        root.right = new TreeNode(8);\n        root.left.left = new TreeNode(2);\n        root.left.right = new TreeNode(4);\n        root.right.left = new TreeNode(6);\n        root.right.right = new TreeNode(10);\n        \n        System.out.println(&quot;Binary Search Tree: &quot;);\n        printInOrder(root);\n        System.out.println();\n\n        Solution solution = new Solution();\n        \n        // Searching for a value in the BST\n        int target = 6;\n        TreeNode result = solution.searchBST(root, target);\n\n        // Displaying the search result\n        if (result != null) {\n            System.out.println(&quot;Value &quot; + target + &quot; found in the BST!&quot;);\n        } else {\n            System.out.println(&quot;Value &quot; + target + &quot; not found in the BST.&quot;);\n        }\n    }\n}\n                            </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block\" data-lang=\"python\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"python\" class=\"language-python\">\n# Definition of TreeNode structure\n# for a binary tree node\nclass TreeNode:\n    # Constructor to initialize the node with a\n    # value and set left and right pointers to None\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    # This function searches for a node with\n    # a specified value in a Binary Search Tree (BST).\n    def searchBST(self, root, val):\n        # Loop until either the tree is\n        # exhausted (None) or the value is found.\n        while root is not None and root.val != val:\n            # Check if the target value is\n            # less than the current node's value.\n            # If so, move to the left subtree\n            # (values smaller than the current node).\n            # Otherwise, move to the right subtree\n            # (values larger than the current node).\n            root = root.left if val &lt; root.val else root.right\n        # Return the node containing the target value,\n        # if found; otherwise, return None.\n        return root\n\n# Function to perform an in-order traversal\n# of a binary tree and print its nodes\ndef printInOrder(root):\n    # Check if the current node\n    # is None (base case for recursion)\n    if root is None:\n        # If None, return and\n        # terminate the function\n        return\n\n    # Recursively call printInOrder\n    # for the left subtree\n    printInOrder(root.left)\n\n    # Print the value of the current node\n    print(root.val, end=&quot; &quot;)\n\n    # Recursively call printInOrder\n    # for the right subtree\n    printInOrder(root.right)\n\n# Creating a BST\nroot = TreeNode(5)\nroot.left = TreeNode(3)\nroot.right = TreeNode(8)\nroot.left.left = TreeNode(2)\nroot.left.right = TreeNode(4)\nroot.right.left = TreeNode(6)\nroot.right.right = TreeNode(10)\n\nprint(&quot;Binary Search Tree:&quot;)\nprintInOrder(root)\nprint()\n\nsolution = Solution()\n\n# Searching for a value in the BST\ntarget = 6\nresult = solution.searchBST(root, target)\n\n# Displaying the search result\nif result is not None:\n    print(f&quot;Value {target} found in the BST!&quot;)\nelse:\n    print(f&quot;Value {target} not found in the BST.&quot;)\n                           </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block\" data-lang=\"javascript\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"javascript\" class=\"language-javascript\">\n// Definition of TreeNode structure\n// for a binary tree node\nclass TreeNode {\n    // Value of the node\n    constructor(val) {\n        this.val = val;\n        // Pointer to the left child node\n        this.left = null;\n        // Pointer to the right child node\n        this.right = null;\n    }\n}\n\nclass Solution {\n    // This function searches for a node with a\n    // specified value in a Binary Search Tree (BST).\n    searchBST(root, val) {\n        // Loop until either the tree is\n        // exhausted (null) or the value is found.\n        while (root !== null &amp;&amp; root.val !== val) {\n            // Check if the target value is less\n            // than the current node's value.\n            // If so, move to the left subtree\n            // (values smaller than the current node).\n            // Otherwise, move to the right subtree\n            // (values larger than the current node).\n            root = val &lt; root.val ? root.left : root.right;\n        }\n        // Return the node containing the target value,\n        // if found; otherwise, return null.\n        return root;\n    }\n}\n\n// Function to perform an in-order traversal\n// of a binary tree and print its nodes\nfunction printInOrder(root) {\n    // Check if the current node is\n    // null (base case for recursion)\n    if (root === null) {\n        // If null, return\n        // and terminate the function\n        return;\n    }\n\n    // Recursively call printInOrder\n    // for the left subtree\n    printInOrder(root.left);\n\n    // Print the value of the current node\n    console.log(root.val);\n\n    // Recursively call printInOrder\n    // for the right subtree\n    printInOrder(root.right);\n}\n\n// Creating a BST\nlet root = new TreeNode(5);\nroot.left = new TreeNode(3);\nroot.right = new TreeNode(8);\nroot.left.left = new TreeNode(2);\nroot.left.right = new TreeNode(4);\nroot.right.left = new TreeNode(6);\nroot.right.right = new TreeNode(10);\n\nconsole.log(&quot;Binary Search Tree: &quot;);\nprintInOrder(root);\n\nlet solution = new Solution();\n\n// Searching for a value in the BST\nlet target = 6;\nlet result = solution.searchBST(root, target);\n\n// Displaying the search result\nif (result !== null) {\n    console.log(`Value ${target} found in the BST!`);\n} else {\n    console.log(`Value ${target} not found in the BST.`);\n}\n\n                            </code>\n                        </pre>\n                    </div>\n                    <p>\n                       <strong>Output</strong> \n                      \tBinary Search Tree: 2 3 4 5 6 8 10, Value 6 found in the BST!\n\n                    </p>\n                </div>\n            </details>\n            <details class=\"secondary-details\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Complexity Analysis\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <p>\n                    <!-- Insert Time and Space Complexity  Here -->\n                    <p><strong>Time Complexity: O(log2N)</strong>\n                     where N is the number of nodes in the Binary Search Tree. In the best case scenario, where the tree is balanced, the time complexity is the height of the tree ie. log2N.\n                     In the worst-case scenario, where the tree is degenerate (linear), the time complexity becomes O(n), as it would require traversing all nodes along the path from the root to the leaf.</p>\n\n\t\t\t\t\t<p><strong>Space Complexity: O(1)</strong>   \n\t\t\t\t\tsince the algorithm does not use any additional space or data structures. The algorithm does use auxiliary stack space from recursion.\n\t\t\t\t\tIn the average and worst-case scenarios, the space complexity for recursive stack space is O(h), where 'h' represents the height of the tree.</p>\n\n                </p>\n            </details>\n        </div>\n    </details>\n</div>\n\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n    <details>\n        <summary class=\"main-summary\">\n            <span>\n                Video Explanation\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"yt-video-wrapper\">\n            <!-- Insert iframe embed Link of Youtube Video-->\n        <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/KcNt6v_56cc?si=AWvdtpvcMLbrOXdJ\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n        </div>\n    </details>\n</div>\n\n<blockquote class=\"wp-block-quote\">\n    Special thanks to <strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268\">Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,<strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\"> please check out this article</a></strong>\n</blockquote>\n\n<script>\n\n    const codeSections = document.querySelectorAll('.code-section');\n\n    // Get last selected language from localStorage or set default value\n    let lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp';\n\n    codeSections.forEach((section, sectionIndex) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n        const copyBtn = section.querySelector('.copy-btn');\n\n        codeTabs.forEach((tab) => {\n            tab.addEventListener('click', () => {\n                codeTabs.forEach((t) => {\n                    t.classList.remove('dsa_article_code_active');\n                });\n                tab.classList.add('dsa_article_code_active');\n\n                const lang = tab.dataset.lang;\n                const activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                codeBlocks.forEach((block) => {\n                    if (block === activeBlock) {\n                        block.classList.add('dsa_article_code_active');\n                    } else {\n                        block.classList.remove('dsa_article_code_active');\n                    }\n                });\n\n                // Update last selected language for all sections and store in localStorage\n                lastSelectedLanguage = lang;\n                localStorage.setItem('lastSelectedLanguage', lang);\n                codeSections.forEach((otherSection, otherIndex) => {\n                    if (otherIndex !== sectionIndex) {\n                        const otherTabs = otherSection.querySelectorAll('.code-tab');\n                        otherTabs.forEach((otherTab) => {\n                            if (otherTab.dataset.lang === lang) {\n                                otherTab.classList.add('dsa_article_code_active');\n                            } else {\n                                otherTab.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                        const otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                        const otherCodeBlocks = otherSection.querySelectorAll('.code-block');\n                        otherCodeBlocks.forEach((block) => {\n                            if (block === otherActiveBlock) {\n                                block.classList.add('dsa_article_code_active');\n                            } else {\n                                block.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                    }\n                });\n            });\n        });\n\n        // Handle copy button click event\n        copyBtn.addEventListener('click', () => {\n            const activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\n            navigator.clipboard.writeText(activeBlock.innerText);\n            copyBtn.classList.add('dsa_article_code_active');\n            setTimeout(() => {\n                copyBtn.classList.remove('dsa_article_code_active');\n            }, 1000);\n        });\n    });\n\n    // Set initial state of the tabs\n    codeSections.forEach((section) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n\n        codeTabs.forEach((tab) => {\n            if (tab.dataset.lang === lastSelectedLanguage) {\n                tab.classList.add('dsa_article_code_active');\n            } else {\n                tab.classList.remove('dsa_article_code_active');\n            }\n        });\n\n        codeBlocks.forEach((block) => {\n            if (block.dataset.lang === lastSelectedLanguage) {\n                block.classList.add('dsa_article_code_active');\n            } else {\n                block.classList.remove('dsa_article_code_active');\n            }\n        });\n    });\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>"
}