{
    "dislikes": 4,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:09:52 GMT+0530 (India Standard Time)",
    "slug": "starting-point-of-loop-in-a-linked-list",
    "aid": "1608",
    "title": "Starting point of loop in a Linked List",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/find-the-starting-point-in-ll",
    "topics": [
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "linked-list",
            "topic-title": "Linked List"
        }
    ],
    "content": "<p><strong>Problem Statement: </strong>  Given the head of a linked list that may contain a cycle, return the starting point of that cycle. If there is no cycle in the linked list return null.\n</p>\n\n\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n    <details class=\"article_example_details\">\n        <summary class=\"article_example_summary\">\n            <span><strong>\n                    Examples\n                </strong>\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"atricle_example_content\">\n            <pre class=\"wp-block-preformatted\">\n                <span><strong>Example 1:</strong></span>\n                <span><strong>Input:</strong> LL: 1  2  3  4  5 </span>\n                <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/starting-of-loop-image1-XPWzNyrz\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n                <span><strong>Output:</strong> 3</span>\n                \n                <span><strong>Explanation: </strong>This linked list contains a loop of size 3 starting at node with value 3.</span>\n                                         \n                <span><strong>Example 2:</strong></span>\n                <span><strong>Input:</strong> LL: LL: 1 -> 2 -> 3 -> 4 -> 9 -> 9\n                </span>                \n                <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/starting-of-loop-image2-DcJJZmdz\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n                <span><strong>Output: </strong>NULL</span>\n                \n                <span><strong>Explanation: </strong> This linked list does not contain  a loop hence has no starting point. </span>\n                              \n\n            </pre>\n        </div>\n    </details>\n</div>\n\n\n<!-- This is Practice Section-->\n<div class=\"practice\">\n    <span><strong>Practice: </strong></span>\n    <div class=\"problem-buttons\">\n\n         <!--Add Problem Link inside href -->\n        <a href=\"https://www.codingninjas.com/studio/problems/linked-list-cycle-ii_1112628?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf\" target=\"_blank\" rel=\"noopener\">\n            <span>Solve Problem</span>\n            <img src=\"https://takeuforward-content-images.s3.ap-south-1.amazonaws.com/content/Group-11-5-pFOq-8ga\" alt=\"code-studio\">\n        </a>\n    </div>\n    \n</div>\n\n\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out yourself first. </em></p>\n\n\n<!-- This is Approaches Drop-Down -->\n<div class=\"dsa_article_dropdown_approachs \">\n\n    <!-- Approach - 1 Starts from here -->\n    <div id=\"brute-force-approach\">\n        <details>\n            <summary class=\"main-summary\">\n                <span>\n                    <!-- Change Name Here -->\n                   Brute Force Approach \n                </span>\n                <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                    <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                    </path>\n                </svg>\n            </summary>\n            <div class=\"common-drops\">\n                <details class=\"secondary-details\" open=\"\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Algorithm / Intuition\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <div class=\"approach-algorithm\">\n                        \n                        <p>The starting point of a loop of the linked list is the first node we visit twice during its traversal. It's the point where we realise that we are no longer moving forward in the list but rather entering a cycle.</p>\n                        <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/starting-of-loop-image3-dWQqMJpH\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n                        <p><strong>Algorithm:</strong></p>\n                        <p><strong>Step 1:</strong>Traverse through the LL using the traversal technique of assigning a temp node to the head and iterating by moving to the next element till we reach null. </p>\n                        <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/starting-of-loop-image4-mi1EbLZz\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n                        <p><strong>Step 2:</strong> While traversing, keep a track of the visited nodes in the map data structure. </p>\n                        <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/starting-of-loop-image5-7zPqXJHQ\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n                        <p>Note: Storing the entire node in the map is essential to distinguish between nodes with identical values but different positions in the list. This ensures accurate loop detection and not just duplicate value checks.</p>                    \n                        <p><strong>Step 3:</strong> If a previously visited node is encountered again, that proves that there is a loop in the linked list hence return that node.</p>\n                        \n                        <p><strong>Step 4:</strong> If the traversal is completed, and we reach the last point of the LL which is null, it means there was no loop, hence we return null.</p>\n                        \n                    </div>\n                </details>\n                <details class=\"code-section secondary-details\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Code\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <div class=\"code-tabs\">\n                        <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n                        <button class=\"code-tab\" data-lang=\"java\">Java</button>\n                        <button class=\"code-tab\" data-lang=\"python\">Python</button>\n                        <button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n                        <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\"\n                            xmlns=\"http://www.w3.org/2000/svg\">\n                            <path\n                                d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n                            </path>\n                        </svg>\n                    </div>\n                    <div class=\"code-content\">\n                        <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n                            <pre class=\"wp-block-code\">\n                                <code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;iostream&gt;\n#include &lt;unordered_map&gt;\n\nusing namespace std;\n\n// Node class represents a node in a linked list\nclass Node {\npublic:\n    // Data stored in the node\n    int data;       \n    // Pointer to the next node in the list\n    Node* next;      \n\n    // Constructor with both data\n    // and next node as parameters\n    Node(int data1, Node* next1) {\n        data = data1;\n        next = next1;\n    }\n\n    // Constructor with only data as\n    // a parameter, sets next to nullptr\n    Node(int data1) {\n        data = data1;\n        next = nullptr;\n    }\n};\n\n// Function to detect a loop in a linked list\n// and return the starting node of the loop\nNode* detectLoop(Node* head) {\n    \n    // Use temp to traverse the linked list\n    Node* temp = head;\n    \n    // hashmap to store all visited nodes\n    unordered_map&lt;Node*, int&gt; mp;\n    \n    // Traverse the list using temp\n    while(temp!=NULL){\n        // check if temp has been encountered again\n        if(mp.count(temp)!=0){\n            // A loop is detected hence return temp\n            return temp;\n        }\n        // store temp as visited\n        mp[temp] = 1;\n        // iterate through the list\n        temp = temp-&gt;next;\n    }\n\n    // If no loop is detected, return nullptr\n    return nullptr; \n}\n\nint main() {\n    // Create a sample linked list with a loop\n    Node* node1 = new Node(1);\n    Node* node2 = new Node(2);\n    node1-&gt; next = node2;\n    Node* node3 = new Node(3);\n    node2-&gt; next = node3;\n    Node* node4 = new Node(4);\n    node3-&gt;next = node4;\n    Node* node5 = new Node(5);\n    node4-&gt; next = node5;\n\n    // Make a loop from node5 to node2\n    node5-&gt;next = node2;\n\n    // Set the head of the linked list\n    Node* head = node1;\n\n    // Detect the loop in the linked list\n    Node* loopStartNode = detectLoop(head);\n\n    if (loopStartNode) {\n        cout &lt;&lt; &quot;Loop detected. Starting node of the loop is: &quot; &lt;&lt; loopStartNode-&gt;data &lt;&lt; endl;\n    } else {\n        cout &lt;&lt; &quot;No loop detected in the linked list.&quot; &lt;&lt; endl;\n    }\n\n    return 0;\n}\n                                </code>\n                            </pre>\n                        </div>\n                        <div class=\"code-block \" data-lang=\"java\">\n                            <pre class=\"wp-block-code\">\n                                <code lang=\"java\" class=\"language-java\">\nimport java.util.HashMap;\n\n// Node class represents a\n// node in a linked list\nclass Node {\n     // Data stored in the node\n    int data;  \n    // Pointer to the next node in the list\n    Node next;   \n    \n    // Constructor with both data and\n    // next node as parameters\n    Node(int data1, Node next1) {\n        data = data1;\n        next = next1;\n    }\n\n    // Constructor with only data as a\n    // parameter, sets next to null\n    Node(int data1) {\n        data = data1;\n        next = null;\n    }\n}\n\npublic class LinkedListLoopDetection {\n    // Function to detect a loop in a linked list\n    // and return the starting node of the loop\n    public static Node detectLoop(Node head) {\n        // Use temp to traverse the linked list\n        Node temp = head;\n\n        // HashMap to store all visited nodes\n        HashMap&lt;Node, int&gt; nodeMap = new HashMap&lt;&gt;();\n\n        // Traverse the list using temp\n        while (temp != null) {\n            // Check if temp has been encountered again\n            if (nodeMap.containsKey(temp)) {\n                // A loop is detected, hence return temp\n                return temp;\n            }\n\n            // Store temp as visited\n            nodeMap.put(temp, 1);\n\n            // Iterate through the list\n            temp = temp.next;\n        }\n\n        // If no loop is detected, return null\n        return null;\n    }\n\n    public static void main(String[] args) {\n        // Create a sample linked list with a loop\n        Node node1 = new Node(1);\n        Node node2 = new Node(2);\n        node1.next = node2;\n        Node node3 = new Node(3);\n        node2.next = node3;\n        Node node4 = new Node(4);\n        node3.next = node4;\n        Node node5 = new Node(5);\n        node4.next = node5;\n\n        // Make a loop from node5 to node2\n        node5.next = node2;\n\n        // Set the head of the linked list\n        Node head = node1;\n\n        // Detect the loop in the linked list\n        Node loopStartNode = detectLoop(head);\n\n        if (loopStartNode != null) {\n            System.out.println(&quot;Loop detected. Starting node of the loop is: &quot; + loopStartNode.data);\n        } else {\n            System.out.println(&quot;No loop detected in the linked list.&quot;);\n        }\n    }\n}\n\n                                </code>\n                            </pre>\n                        </div>\n                        <div class=\"code-block\" data-lang=\"python\">\n                            <pre class=\"wp-block-code\">\n                                <code lang=\"python\" class=\"language-python\">\n# Node class represents a node in a linked list\nclass Node:\n    def __init__(self, data, next_node=None):\n        # Data stored in the node\n        self.data = data  \n         # Pointer to the next node in the list\n        self.next = next_node \n\n# Function to detect a loop in a linked list\n# and return the starting node of the loop\ndef detect_loop(head):\n    # Use temp to traverse the linked list\n    temp = head\n    \n    # Dictionary to store all visited nodes\n    node_map = {}\n    \n    # Traverse the list using temp\n    while temp is not None:\n        # Check if temp has been encountered again\n        if temp in node_map:\n            # A loop is detected, hence return temp\n            return temp\n        \n        # Store temp as visited\n        node_map[temp] = True\n        \n        # Iterate through the list\n        temp = temp.next\n\n    # If no loop is detected, return None\n    return None\n\n# Create a sample linked list with a loop\nnode1 = Node(1)\nnode2 = Node(2)\nnode1.next = node2\nnode3 = Node(3)\nnode2.next = node3\nnode4 = Node(4)\nnode3.next = node4\nnode5 = Node(5)\nnode4.next = node5\n\n# Make a loop from node5 to node2\nnode5.next = node2\n\n# Set the head of the linked list\nhead = node1\n\n# Detect the loop in the linked list\nloop_start_node = detect_loop(head)\n\nif loop_start_node:\n    print(&quot;Loop detected. Starting node of the loop is:&quot;, loop_start_node.data)\nelse:\n    print(&quot;No loop detected in the linked list.&quot;)\n                                </code>\n                            </pre>\n                        </div>\n                         <div class=\"code-block\" data-lang=\"javascript\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"javascript\" class=\"language-javascript\">\n// Node class represents a node in a linked list\nclass Node {\n  constructor(data, next = null) {\n    // Data stored in the node\n    this.data = data;     \n     // Pointer to the next node in the list\n    this.next = next;    \n  }\n}\n\n// Function to detect a loop in a linked list\n// and return the starting node of the loop\nfunction detectLoop(head) {\n  // Use temp to traverse the linked list\n  let temp = head;\n\n  // Map to store all visited nodes\n  const nodeMap = new Map();\n\n  // Traverse the list using temp\n  while (temp !== null) {\n    // Check if temp has been encountered again\n    if (nodeMap.has(temp)) {\n      // A loop is detected, hence return temp\n      return temp;\n    }\n\n    // Store temp as visited\n    nodeMap.set(temp, true);\n\n    // Iterate through the list\n    temp = temp.next;\n  }\n\n  // If no loop is detected, return null\n  return null;\n}\n\n// Create a sample linked list with a loop\nconst node1 = new Node(1);\nconst node2 = new Node(2);\nnode1.next = node2;\nconst node3 = new Node(3);\nnode2.next = node3;\nconst node4 = new Node(4);\nnode3.next = node4;\nconst node5 = new Node(5);\nnode4.next = node5;\n\n// Make a loop from node5 to node2\nnode5.next = node2;\n\n// Set the head of the linked list\nconst head = node1;\n\n// Detect the loop in the linked list\nconst loopStartNode = detectLoop(head);\n\nif (loopStartNode) {\n  console.log(&quot;Loop detected. Starting node of the loop is: &quot; + loopStartNode.data);\n} else {\n  console.log(&quot;No loop detected in the linked list.&quot;);\n}\n\n                            </code>\n                        </pre>\n                        </div>\n                        <p>\n                           <strong>Output: </strong>Loop detected. Starting node of the loop is: 2</p>\n\n                    </div>\n                </details>\n                <details class=\"secondary-details\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Complexity Analysis\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <p>\n                        <p><strong>Time Complexity: O(N)</strong>  The code traverses the entire linked list once, where 'N' is the number of nodes in the list. Therefore, the time complexity is linear, O(N).</p>\n\n                        <p><strong>Space Complexity : O(N)</strong> The code uses a hash map/dictionary to store encountered nodes, which can take up to O(N) additional space, where 'n' is the number of nodes in the list. Hence, the space complexity is O(N) due to the use of the map to track nodes.</p>\n\n                    </p>\n                </details>\n            </div>\n        </details>\n    </div>\n    <!-- Approach - 1 Ends here -->\n\n\n    <!-- Approach - 2 Starts from here -->\n\n    <div id=\"optimal-approach\">\n        <details>\n            <summary class=\"main-summary\">\n                <span>\n                    Optimal Approach \n                </span>\n                <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                    <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                    </path>\n                </svg>\n            </summary>\n            <div class=\"common-drops\">\n                <details class=\"secondary-details\" open=\"\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Algorithm / Intuition\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <div class=\"approach-algorithm\">\n                        <p>The previous method uses O(N) additional memory, which can become quite large as the linked list length grows. To enhance efficiency, the Tortoise and Hare Algorithm is introduced as an optimization.</p>\n                        <p>The Tortoise and Hare approach has been discussed in this<a href=\"https://takeuforward.org/data-structure/find-middle-element-in-a-linked-list/\"> article</a>. The key insight is that when the slow and fast pointers meet inside the loop, the distance travelled by each pointer can be used to calculate the starting point of the loop. </p>\n                        \n\n                        <p><strong>Algorithm</strong></p>\n                        <p><strong>Step 1: </strong>\n                        Initialise two pointers, `slow` and `fast`, to the head of the linked list. `slow` will advance one step at a time, while `fast` will advance two steps at a time. These pointers will move simultaneously.</p>\n                                                \n                        <p><strong>Step 2: </strong>\n                        Traverse the linked list with the `slow` and `fast` pointers. While traversing, repeatedly move `slow` one step and `fast` two steps at a time.\n                        </p>\n                        <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/starting-of-loop-image6-HTpYvsVD\" alt=\"\" class=\"wp-image-8107\" width=\"600\" height=\"1000\"/>                    \n                        <p><strong>Step 3: </strong> Continue this traversal until one of the following conditions is met:\n                        <ol><li>`fast` or `fast.next` reaches the end of the linked list (i.e., becomes null). In this case, there is no loop in the linked list, and the algorithm terminates by returning null.</li><li>`fast` and `slow` pointers meet at the same node. This indicates the presence of a loop in the linked list.</li></ol></p>\n\n                        <p><strong>Step 4:</strong> Reset the `slow` pointer to the head of the linked list. Move `fast` and `slow` one step at a time until they meet again. The point where they meet again is the starting point.</p>\n                        <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/starting-of-loop-image7-Iqeb2eA8\" alt=\"\" class=\"wp-image-8107\" width=\"600\" height=\"1000\"/>\n                        <p>You may be curious about the proof for this algorithm, and it hinges on the idea that the point where the slow and fast pointers converge can be leveraged to determine the starting point of the loop.</p>\n                        <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/starting-of-loop-image8-jG7vA1Si\" alt=\"\" class=\"wp-image-8107\" width=\"600\" height=\"1000\"/>\n                        <p>In the \"tortoise and hare\" algorithm for detecting loops in a linked list, when the slow pointer (tortoise) reaches the starting point of the loop, the fast pointer (hare) is positioned at a point that is twice the distance travelled by the slow pointer. This is because the hare moves at double the speed of the tortoise.</p>\n                        <p>If slow has travelled distance L1 then fast has travelled 2 x L1. Now that slow and fast have entered the loop, the distance fast will have to cover to catch up to slow is the total length of loop minus L1. Let this distance be d.</p>\n                        \n\n                        <pre class=\"wp-block-preformatted\">\n                            Distance travelled by slow = L1\n                            Distance travelled by fast = 2 * L1\n                            Total length of loop = L1 + d\n                        </pre>\n                        <p>In this configuration, the fast pointer advances toward the slow pointer with two jumps per step, while the slow pointer moves away with one jump per step. As a result, the gap between them decreases by 1 with each step. Given that the initial gap is d, it takes exactly d steps for them to meet.</p>\n                        <pre class=\"wp-block-preformatted\">\n                            Total length of loop = L1 + d\n                            Distance between slow and fast= d\n                        </pre>\n                        <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/starting-of-loop-image9-4izAdHOp\" alt=\"\" class=\"wp-image-8107\" width=\"600\" height=\"1000\"/>\n                        <p>During these d steps, the slow pointer effectively travels d steps from the starting point within the loop and fast travels 2 x d and they meet a specific point. Based on our previous calculations, the total length of the loop is L1 + d. And since the distance covered by the slow pointer within the loop is d, the remaining distance within the loop is equal to L1.</p>\n                        <p>Therefore, it is proven that the distance between the starting point of the loop and the point where the two pointers meet is indeed equal to the distance between the starting point and head of the linked list.</p>\n                        <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/starting-of-loop-image10-cXhoOmvV\" alt=\"\" class=\"wp-image-8107\" width=\"600\" height=\"1000\"/>\n                    </div>\n                </details>\n                <details class=\"code-section secondary-details\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Code\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <div class=\"code-tabs\">\n                        <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n                        <button class=\"code-tab\" data-lang=\"java\">Java</button>\n                        <button class=\"code-tab\" data-lang=\"python\">Python</button>\n                        <button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n                        <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\"\n                            xmlns=\"http://www.w3.org/2000/svg\">\n                            <path\n                                d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n                            </path>\n                        </svg>\n                    </div>\n                    <div class=\"code-content\">\n                        <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n                            <pre class=\"wp-block-code\">\n                                <code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;iostream&gt;\n#include &lt;unordered_map&gt;\n\nusing namespace std;\n\n// Node class represents a node\n// in a linked list\nclass Node {\npublic:\n    // Data stored in the node\n    int data;      \n    // Pointer to the next node in the list\n    Node* next;\n\n    // Constructor with both data\n    // and next node as parameters\n    Node(int data1, Node* next1) {\n        data = data1;\n        next = next1;\n    }\n\n    // Constructor with only data as a\n    // parameter, sets next to nullptr\n    Node(int data1) {\n        data = data1;\n        next = nullptr;\n    }\n};\n\n// Function to find the first node\n// of the loop in a linked list\nNode* firstNode(Node* head) {\n    \n    // Initialize a slow and fast \n    // pointers to the head of the list\n    Node* slow = head;  \n    Node* fast = head;  \n\n    // Phase 1: Detect the loop\n    while (fast != NULL &amp;&amp; fast-&gt;next != NULL) {\n        \n        // Move slow one step\n        slow = slow-&gt;next;        \n        \n        // Move fast two steps\n        fast = fast-&gt;next-&gt;next;  \n\n        // If slow and fast meet,\n        // a loop is detected\n        if (slow == fast) {\n            \n             // Reset the slow pointer\n             // to the head of the list\n            slow = head; \n\n            // Phase 2: Find the first node of the loop\n            while (slow != fast) {\n                \n                // Move slow and fast one step\n                // at a time\n                slow = slow-&gt;next;  \n                fast = fast-&gt;next;  \n\n                // When slow and fast meet again,\n                // it's the first node of the loop\n            }\n            \n            // Return the first node of the loop\n            return slow;  \n        }\n    }\n    \n     // If no loop is found, return NULL\n    return NULL; \n}\n\n\nint main() {\n    // Create a sample linked list with a loop\n    Node* node1 = new Node(1);\n    Node* node2 = new Node(2);\n    node1-&gt; next = node2;\n    Node* node3 = new Node(3);\n    node2-&gt; next = node3;\n    Node* node4 = new Node(4);\n    node3-&gt;next = node4;\n    Node* node5 = new Node(5);\n    node4-&gt; next = node5;\n\n    // Make a loop from node5 to node2\n    node5-&gt;next = node2;\n\n    // Set the head of the linked list\n    Node* head = node1;\n\n    // Detect the loop in the linked list\n    Node* loopStartNode = firstNode(head);\n\n    if (loopStartNode) {\n        cout &lt;&lt; &quot;Loop detected. Starting node of the loop is: &quot;&lt;&lt; loopStartNode-&gt;data &lt;&lt; endl;\n    } else {\n        cout &lt;&lt; &quot;No loop detected in the linked list.&quot; &lt;&lt; endl;\n    }\n\n    return 0;\n}\n                                </code>\n                            </pre>\n                        </div>\n                        <div class=\"code-block \" data-lang=\"java\">\n                            <pre class=\"wp-block-code\">\n                                <code lang=\"java\" class=\"language-java\">\nimport java.util.HashMap;\n\n// Node class represents a\n// node in a linked list\nclass Node {\n    // Data stored in the node\n    int data;        \n    // Pointer to the next node in the list\n    Node next;      \n\n    // Constructor with both data\n    // and next node as parameters\n    Node(int data1, Node next1) {\n        data = data1;\n        next = next1;\n    }\n\n    // Constructor with only data as\n    // a parameter, sets next to null\n    Node(int data1) {\n        data = data1;\n        next = null;\n    }\n}\n\npublic class LinkedListLoopDetection {\n    // Function to find the first node\n    // of the loop in a linked list\n\n    public static Node firstNode(Node head) {\n        // Initialize a slow and fast \n        // pointers to the head of the list\n        Node slow = head;  \n        Node fast = head;  \n    \n        // Phase 1: Detect the loop\n        while (fast != null &amp;&amp; fast.next != null) {\n            // Move slow one step\n            slow = slow.next;        \n            \n            // Move fast two steps\n            fast = fast.next.next;  \n    \n            // If slow and fast meet,\n            // a loop is detected\n            if (slow == fast) {\n                // Reset the slow pointer\n                // to the head of the list\n                slow = head; \n    \n                // Phase 2: Find the first node of the loop\n                while (slow != fast) {\n                    // Move slow and fast one step\n                    // at a time\n                    slow = slow.next;  \n                    fast = fast.next;  \n    \n                    // When slow and fast meet again,\n                    // it's the first node of the loop\n                }\n                \n                // Return the first node of the loop\n                return slow;  \n            }\n        }\n        \n        // If no loop is found, return null\n        return null; \n    }\n\n    public static void main(String[] args) {\n        // Create a sample linked list with a loop\n        Node node1 = new Node(1);\n        Node node2 = new Node(2);\n        node1.next = node2;\n        Node node3 = new Node(3);\n        node2.next = node3;\n        Node node4 = new Node(4);\n        node3.next = node4;\n        Node node5 = new Node(5);\n        node4.next = node5;\n\n        // Make a loop from node5 to node2\n        node5.next = node2;\n\n        // Set the head of the linked list\n        Node head = node1;\n\n        // Detect the loop in the linked list\n        Node loopStartNode = firstNode(head);\n\n        if (loopStartNode != null) {\n            System.out.println(&quot;Loop detected. Starting node of the loop is: &quot; + loopStartNode.data);\n        } else {\n            System.out.println(&quot;No loop detected in the linked list.&quot;);\n        }\n    }\n}\n                                </code>\n                            </pre>\n                        </div>\n                        <div class=\"code-block\" data-lang=\"python\">\n                            <pre class=\"wp-block-code\">\n                                <code lang=\"python\" class=\"language-python\">\n                     \n# Node class represents a\n# node in a linked list\nclass Node:\n    def __init__(self, data, next_node=None):\n        # Data stored in the node\n        self.data = data  \n        # Pointer to the next node in the list\n        self.next = next_node  \n\n# Function to find the first\n# node of the loop in a linked list\ndef first_node(head):\n    # Initialize a slow and fast\n    # pointers to the head of the list\n    slow = head\n    fast = head\n\n    # Phase 1: Detect the loop\n    while fast is not None and fast.next is not None:\n        # Move slow one step\n        slow = slow.next\n\n        # Move fast two steps\n        fast = fast.next.next\n\n        # If slow and fast meet,\n        # a loop is detected\n        if slow == fast:\n            # Reset the slow pointer\n            # to the head of the list\n            slow = head\n\n            # Phase 2: Find the first\n            # node of the loop\n            while slow != fast:\n                # Move slow and fast one\n                # step at a time\n                slow = slow.next\n                fast = fast.next\n\n                # When slow and fast meet again,\n                # it's the first node of the loop\n            return slow\n\n    # If no loop is found, return None\n    return None\n    \n# with a loop\nnode1 = Node(1)\nnode2 = Node(2)\nnode1.next = node2\nnode3 = Node(3)\nnode2.next = node3\nnode4 = Node(4)\nnode3.next = node4\nnode5 = Node(5)\nnode4.next = node5\n\n# Make a loop from node5 to node2\nnode5.next = node2\n\n# Set the head of the linked list\nhead = node1\n\n# Detect the loop in the linked list\nloop_start_node = first_node(head)\n\nif loop_start_node:\n    print(&quot;Loop detected. Starting node of the loop is:&quot;, loop_start_node.data)\nelse:\n    print(&quot;No loop detected in the linked list.&quot;)\n                                </code>\n                            </pre>\n                        </div>\n                         <div class=\"code-block\" data-lang=\"javascript\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"javascript\" class=\"language-javascript\">\n// Node class represents a\n// node in a linked list\nclass Node {\n  constructor(data, next = null) {\n    // Data stored in the node\n    this.data = data; \n    // Pointer to the next node in the list\n    this.next = next;      \n  }\n}\n\nfunction firstNode(head) {\n    // Initialize a slow and fast\n    // pointers to the head of the list\n    let slow = head;\n    let fast = head;\n\n    // Phase 1: Detect the loop\n    while (fast !== null &amp;&amp; fast.next !== null) {\n        // Move slow one step\n        slow = slow.next;\n        // Move fast two steps\n        fast = fast.next.next;\n\n        // If slow and fast meet,\n        // a loop is detected\n        if (slow === fast) {\n            // Reset the slow pointer\n            // to the head of the list\n            slow = head;\n\n            // Phase 2: Find the first\n            // node of the loop\n            while (slow !== fast) {\n                // Move slow and fast\n                // one step at a time\n                slow = slow.next;\n                fast = fast.next;\n\n                // When slow and fast meet again,\n                 // it's the first node of the loop\n            }\n\n            // Return the first node of the loop\n            return slow;\n        }\n    }\n\n    // If no loop is found, return null\n    return null;\n}\n\n// Create a sample linked list\n// with a loop\nconst node1 = new Node(1);\nconst node2 = new Node(2);\nnode1.next = node2;\nconst node3 = new Node(3);\nnode2.next = node3;\nconst node4 = new Node(4);\nnode3.next = node4;\nconst node5 = new Node(5);\nnode4.next = node5;\n\n// Make a loop from node5 to node2\nnode5.next = node2;\n\n// Set the head of the linked list\nconst head = node1;\n\n// Detect the loop in the linked list\nconst loopStartNode = firstNode(head);\n\nif (loopStartNode) {\n  console.log(&quot;Loop detected. Starting node of the loop is: &quot; + loopStartNode.data);\n} else {\n  console.log(&quot;No loop detected in the linked list.&quot;);\n}\n                            </code>\n                        </pre>\n                        </div>\n                        <p>\n                             <strong>Output: </strong>Loop detected. Starting node of the loop is: 2</p>\n                                               \n                    </div>\n                </details>\n                <details class=\"secondary-details\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Complexity Analysis\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <p>\n                        <p><strong>Time Complexity: O(N)</strong> The code traverses the entire linked list once, where 'n' is the number of nodes in the list. This traversal has a linear time complexity, O(n).</p>\n                        <p><strong>Space Complexity : O(1)</strong> The code uses only a constant amount of additional space, regardless of the linked list's length. This is achieved by using two pointers (slow and fast) to detect the loop without any significant extra memory usage, resulting in constant space complexity, O(1). </p>\n\n\n                    </p>\n                </details>\n            </div>\n        </details>\n    </div>\n</div>\n\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n    <details>\n        <summary class=\"main-summary\">\n            <span>\n                Video Explanation\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"yt-video-wrapper\">\n          <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/wiOo4DC5GGA?si=u07UNycrnear-Uuw\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n        </div>\n    </details>\n</div>\n\n<script src=\"https://takeuforward.org/UXApproachDropDowns/2ApproachJSScript.js\"></script>\n\n<blockquote class=\"wp-block-quote\">\n    Special thanks to <strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268\">Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,<strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\"> please check out this article</a></strong>\n</blockquote>\n\n\n<script>\n\n    const codeSections = document.querySelectorAll('.code-section');\n\n    // Get last selected language from localStorage or set default value\n    let lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp';\n\n    codeSections.forEach((section, sectionIndex) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n        const copyBtn = section.querySelector('.copy-btn');\n\n        codeTabs.forEach((tab) => {\n            tab.addEventListener('click', () => {\n                codeTabs.forEach((t) => {\n                    t.classList.remove('dsa_article_code_active');\n                });\n                tab.classList.add('dsa_article_code_active');\n\n                const lang = tab.dataset.lang;\n                const activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                codeBlocks.forEach((block) => {\n                    if (block === activeBlock) {\n                        block.classList.add('dsa_article_code_active');\n                    } else {\n                        block.classList.remove('dsa_article_code_active');\n                    }\n                });\n\n                // Update last selected language for all sections and store in localStorage\n                lastSelectedLanguage = lang;\n                localStorage.setItem('lastSelectedLanguage', lang);\n                codeSections.forEach((otherSection, otherIndex) => {\n                    if (otherIndex !== sectionIndex) {\n                        const otherTabs = otherSection.querySelectorAll('.code-tab');\n                        otherTabs.forEach((otherTab) => {\n                            if (otherTab.dataset.lang === lang) {\n                                otherTab.classList.add('dsa_article_code_active');\n                            } else {\n                                otherTab.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                        const otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                        const otherCodeBlocks = otherSection.querySelectorAll('.code-block');\n                        otherCodeBlocks.forEach((block) => {\n                            if (block === otherActiveBlock) {\n                                block.classList.add('dsa_article_code_active');\n                            } else {\n                                block.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                    }\n                });\n            });\n        });\n\n        // Handle copy button click event\n        copyBtn.addEventListener('click', () => {\n            const activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\n            navigator.clipboard.writeText(activeBlock.innerText);\n            copyBtn.classList.add('dsa_article_code_active');\n            setTimeout(() => {\n                copyBtn.classList.remove('dsa_article_code_active');\n            }, 1000);\n        });\n    });\n\n    // Set initial state of the tabs\n    codeSections.forEach((section) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n\n        codeTabs.forEach((tab) => {\n            if (tab.dataset.lang === lastSelectedLanguage) {\n                tab.classList.add('dsa_article_code_active');\n            } else {\n                tab.classList.remove('dsa_article_code_active');\n            }\n        });\n\n        codeBlocks.forEach((block) => {\n            if (block.dataset.lang === lastSelectedLanguage) {\n                block.classList.add('dsa_article_code_active');\n            } else {\n                block.classList.remove('dsa_article_code_active');\n            }\n        });\n    });\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>",
    "category_tag": "data-structure",
    "likes": 169,
    "preview": "Problem Statement: Given the head of a linked list that may contain a cycle, return the starting point of that cycle. If there is no cycle in the linked list return null. Examples Example 1: Input:..."
}