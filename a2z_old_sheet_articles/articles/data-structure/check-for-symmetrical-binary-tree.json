{
    "dislikes": 14,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:09:11 GMT+0530 (India Standard Time)",
    "slug": "check-for-symmetrical-binary-tree",
    "aid": "1415",
    "title": "Check for Symmetrical Binary Tree",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/check-for-symmetrical-bts",
    "topics": [
        {
            "topic-id": "binary-tree",
            "topic-title": "Binary Tree"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "recursion",
            "topic-title": "Recursion"
        }
    ],
    "content": "<p><strong>Problem Statement: </strong> Given a Binary Tree, determine whether the given tree is symmetric or not. A Binary Tree would be Symmetric, when its mirror image is exactly the same as the original tree.\nIf we were to draw a vertical line through the centre of the tree, the nodes on the left and right side would be mirror images of each other.\n\n</p>\n\n<div id=\"article_examples\">\n    <details class=\"article_example_details\">\n        <summary class=\"article_example_summary\">\n            <span><strong>\n                    Examples\n                </strong>\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"atricle_example_content\">\n            <pre class=\"wp-block-preformatted\">\n                <span><strong>Example 1:</strong></span>\n\t\t\t\t<span><strong>Input:</strong>Binary Tree: 1 2 2 3 4 4 3\n\t\t\t\t</span>\n\t\t\t\t<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/symmetric-tree-image1-ROcYfPPX\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n\t\t\t\t<span><strong>Output:</strong>True, this tree is symmetric.</span>\n\t\t\t\t<span><strong>Explanation: </strong>If we were to draw a vertical line through the centre of the tree, dividing it into left and right parts, we observe that the nodes on the left and right sides are mirror images of each other.\n\t\t\t\t<ol><li>The root node (1) is at the centre.</li><li>The left subtree has a node (2) on the left, and the right subtree has a corresponding node (2) on the right.</li><li>Further, the left subtree of (2) has nodes (3) and (4) from left to right, while the right subtree of (2) has nodes (4) and (3) from right to left.</li></ol>This mirroring pattern continues throughout the tree. The left and right subtrees are symmetrically arranged with respect to the central vertical line. Therefore, the given binary tree is symmetric.</span>\n\t\t\t\t<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/symmetric-tree-image2-SUmry2OP\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n\t\t\t\t<span><strong>Example 2:</strong></span>\n\t\t\t\t<span><strong>Input:</strong>Binary Tree: 1 2 2 -1 3 -1 3\n\t\t\t\t</span>\n\t\t\t\t<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/symmetric-tree-image3-0sAVyLsF\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n\t\t\t\t<span><strong>Output :</strong> False, this is not a symmetric Binary Tree.</span>\n\t\t\t\t<span><strong>Explanation: </strong>While the tree has a symmetric structure at the first level with nodes 2 and 2, the subtrees under nodes 2 and 2 are not symmetric. If we were to draw a vertical line through the centre of the tree, dividing it into left and right parts, we observe that the nodes on the left and right sides are not mirror images of each other.</span>\n\t\t\t\t<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/symmetric-tree-image4--hvMePlJ\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n\t\t\t\t\n            </pre>\n        </div>\n    </details>\n</div>\n\n<!-- This is Practice Section-->\n<div class=\"practice\">\n    <span><strong>Practice: </strong></span>\n    <div class=\"problem-buttons\">\n\n        <!-- Add Problem Link inside href -->\n        <a href=\"https://www.codingninjas.com/studio/problems/symmetric-tree_981177?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf\" target=\"_blank\" rel=\"noopener\">\n            <span>Solve Problem</span>\n            <img src=\"https://takeuforward-content-images.s3.ap-south-1.amazonaws.com/content/Group-11-5-pFOq-8ga\"\n                alt=\"code-studio\">\n        </a>\n    </div>\n    <!--<div class=\"problem-buttons\">\n         Add Problem Link inside href \n        <a href=\"\" target=\"_blank\" rel=\"noopener\">\n            <span>Solve Problem</span>\n            <img src=\"https://cdn.iconscout.com/icon/free/png-256/free-leetcode-3521542-2944960.png?f=webp\"\n                alt=\"leetcode\">\n        </a>\n    </div>-->\n</div>\n\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\n        yourself first. </em></p>\n\n\n<div id=\"brute-force-approach\">\n    <details>\n        <summary class=\"main-summary\">\n            <span>\n                Optimal Approach \n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                </path>\n            </svg>\n        </summary>\n        <div class=\"common-drops\">\n            <details class=\"secondary-details\" open=\"\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Algorithm / Intuition\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <div class=\"approach-algorithm\">\n                    <!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n                    <p>A tree is said to be symmetric when its structure exhibits a mirroring pattern, meaning that the left and right subtrees of any node are identical or mirror images of each other. In other words, if you could draw a vertical line through the centre of the tree, the nodes on the left side should be symmetrically aligned with the nodes on the right side.</p>\n                    <p><figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/symmetric-tree-image5-bdhH3k4V\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure></p>\n                    <p>For a binary tree to be symmetric:\n                    <ol><li>The root node and its two subtrees (left and right) must have the same value.</li><li>The left subtree of the root should be a mirror image of the right subtree.</li><li>This mirroring should be consistent throughout the entire tree, not just at the root level.</li></ol></p>\n                    <!--<p><figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/symmetric-tree-image5-bdhH3k4V\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure></p>-->\n                    <p>When recursively checking the left and right subtrees for symmetry in a binary tree, the traversals are mirrored. Specifically, the algorithm compares the left child of the left subtree with the right child of the right subtree and the right child of the left subtree with the left child of the right subtree.</p>\n                    \n                    <p><strong>Algorithm:</strong></p>\n                    <p><strong>Step 1:</strong>Check if the given tree is empty ie. root is null. If the tree is empty, it is considered symmetric by default and we return true.</p>\n                    \n                    <p><strong>Step 2:</strong> If the tree is not empty, we call a utility function `isSymmetricUtil`, passing the left and right subtrees of the root. This utility function handles the recursive checks for symmetry.</p>\n                    \n                    <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/symmetric-tree-image7-7-PsE3bA\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n                    <p><strong>Base Case:</strong> The base case for recursion is when both the left and right subtrees are empty, indicating a symmetric structure and we return true.\n                    If only one of the subtrees is empty (while the other is not), we return false as this violates the conditions of symmetry.</p>\n                    <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/symmetric-tree-image8-yfTigEwZ\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n                    <p><strong>Check for Symmetry:</strong>\n                    <ol><li>Compare the values of the current nodes from the left and right subtrees. For the binary tree to be symmetric, the corresponding nodes received should have equal values.</li><li>Recursively check the symmetry of these subtrees. We check if the left subtree of the left node is symmetric with the right subtree of the right node.</li><li>Similarly, also check the symmetry of the right subtree of the left node with the left subtree of the right node.</li></ol>\n                    Hence, we compare the node values and recursively explore the left and right subtrees in a mirrored fashion.</p>\n                    <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/symmetric-tree-image9-kcXKdO4I\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n\n                    <p><strong>Step 3:</strong>The final result of the isSymmetric function is based on the outcome of the utility function `isSymmetricUtil` recursive function for the roots left and right subtree.</p>\n                                                        \n                    \n                    \n                </div>\n            </details>\n            <details class=\"code-section secondary-details\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Code\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <div class=\"code-tabs\">\n                    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n                    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n                    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n                    <button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n                    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\"\n                        xmlns=\"http://www.w3.org/2000/svg\">\n                        <path\n                            d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n                        </path>\n                    </svg>\n                </div>\n                <div class=\"code-content\">\n                    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;set&gt;\n#include &lt;queue&gt;\n#include &lt;map&gt;\n\nusing namespace std;\n\n// Node structure for the binary tree\nstruct Node {\n    int data;\n    Node* left;\n    Node* right;\n    // Constructor to initialize\n    // the node with a value\n    Node(int val) : data(val), left(nullptr), right(nullptr) {}\n};\n\nclass Solution {\nprivate:\n    // Function to check if\n    // two subtrees are symmetric\n    bool isSymmetricUtil(Node* root1, Node* root2) {\n        // Check if either subtree is NULL\n        if (root1 == NULL || root2 == NULL) {\n            // If one subtree is NULL, the other\n            // must also be NULL for symmetry\n            return root1 == root2;\n        }\n        // Check if the data in the current nodes is equal\n        // and recursively check for symmetry in subtrees\n        return (root1-&gt;data == root2-&gt;data)\n            &amp;&amp; isSymmetricUtil(root1-&gt;left, root2-&gt;right)\n            &amp;&amp; isSymmetricUtil(root1-&gt;right, root2-&gt;left);\n    }\n\npublic:\n    // Public function to check if the\n    // entire binary tree is symmetric\n    bool isSymmetric(Node* root) {\n        // Check if the tree is empty\n        if (!root) {\n            // An empty tree is\n            // considered symmetric\n            return true;\n        }\n        // Call the utility function\n        // to check symmetry of subtrees\n        return isSymmetricUtil(root-&gt;left, root-&gt;right);\n    }\n};\n\n\n// Function to print the Inorder\n// Traversal of the Binary Tree\nvoid printInorder(Node* root){\n    if(!root){\n        return;\n    }\n    printInorder(root-&gt;left);\n    cout &lt;&lt; root-&gt;data &lt;&lt; &quot; &quot;;\n    printInorder(root-&gt;right);\n}\n\n\nint main() {\n    // Creating a sample binary tree\n    Node* root = new Node(1);\n    root-&gt;left = new Node(2);\n    root-&gt;right = new Node(2);\n    root-&gt;left-&gt;left = new Node(3);\n    root-&gt;right-&gt;right = new Node(3);\n    root-&gt;left-&gt;right = new Node(4);\n    root-&gt;right-&gt;left = new Node(4);\n\n    Solution solution;\n    \n    cout &lt;&lt; &quot;Binary Tree (Inorder): &quot;;\n    printInorder(root);\n    cout &lt;&lt; endl;\n\n    bool res;\n    res = solution.isSymmetric(root);\n    \n    if(res){\n        cout &lt;&lt; &quot;This Tree is Symmetrical&quot; &lt;&lt; endl;\n    }\n    else{\n        cout &lt;&lt; &quot;This Tree is NOT Symmetrical&quot; &lt;&lt; endl;\n    }\n\n    return 0;\n}\n                            </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block \" data-lang=\"java\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\n// Node structure for the binary tree\nclass Node {\n    int data;\n    Node left;\n    Node right;\n\n    // Constructor to initialize\n    // the node with a value\n    public Node(int val) {\n        data = val;\n        left = null;\n        right = null;\n    }\n}\n\nclass Solution {\n    // Function to check if\n    // two subtrees are symmetric\n    private boolean isSymmetricUtil(Node root1, Node root2) {\n        // Check if either subtree is null\n        if (root1 == null || root2 == null) {\n            // If one subtree is null, the other\n            // must also be null for symmetry\n            return root1 == root2;\n        }\n        // Check if the data in the current nodes is equal\n        // and recursively check for symmetry in subtrees\n        return (root1.data == root2.data)\n                &amp;&amp; isSymmetricUtil(root1.left, root2.right)\n                &amp;&amp; isSymmetricUtil(root1.right, root2.left);\n    }\n\n    // Public function to check if the\n    // entire binary tree is symmetric\n    public boolean isSymmetric(Node root) {\n        // Check if the tree is empty\n        if (root == null) {\n            // An empty tree is\n            // considered symmetric\n            return true;\n        }\n        // Call the utility function\n        // to check symmetry of subtrees\n        return isSymmetricUtil(root.left, root.right);\n    }\n}\n\npublic class Main {\n    // Function to print the Inorder\n    // Traversal of the Binary Tree\n    private static void printInorder(Node root) {\n        if (root == null) {\n            return;\n        }\n        printInorder(root.left);\n        System.out.print(root.data + &quot; &quot;);\n        printInorder(root.right);\n    }\n\n    public static void main(String[] args) {\n        // Creating a sample binary tree\n        Node root = new Node(1);\n        root.left = new Node(2);\n        root.right = new Node(2);\n        root.left.left = new Node(3);\n        root.right.right = new Node(3);\n        root.left.right = new Node(4);\n        root.right.left = new Node(4);\n\n        Solution solution = new Solution();\n\n        System.out.print(&quot;Binary Tree (Inorder): &quot;);\n        printInorder(root);\n        System.out.println();\n\n        boolean res = solution.isSymmetric(root);\n\n        if (res) {\n            System.out.println(&quot;This Tree is Symmetrical&quot;);\n        } else {\n            System.out.println(&quot;This Tree is NOT Symmetrical&quot;);\n        }\n    }\n}\n                            </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block\" data-lang=\"python\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"python\" class=\"language-python\">\n# Node class for the binary tree\nclass Node:\n    def __init__(self, val):\n        self.data = val\n        self.left = None\n        self.right = None\n\n# Solution class to find the\n# maximum depth of a binary tree\nclass Solution:\n    # Function to find the\n    # maximum depth of a binary tree\n    def maxDepth(self, root):\n        # If the root is None\n        # (empty tree), depth is 0\n        if root is None:\n            return 0\n        \n        # Recursive call to find the\n        # maximum depth of the left subtree\n        lh = self.maxDepth(root.left)\n        \n        # Recursive call to find the\n        # maximum depth of the right subtree\n        rh = self.maxDepth(root.right)\n        \n        # Return the maximum depth of the\n        # tree, adding 1 for the current node\n        return 1 + max(lh, rh)\n\n# Main function\nif __name__ == &quot;__main__&quot;:\n    # Creating a sample binary tree\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    root.left.left = Node(4)\n    root.left.right = Node(5)\n    root.left.right.right = Node(6)\n    root.left.right.right.right = Node(7)\n    \n    solution = Solution()\n    depth = solution.maxDepth(root)\n    \n    print(&quot;Maximum depth of the binary tree:&quot;, depth)\n                           </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block\" data-lang=\"javascript\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"javascript\" class=\"language-javascript\">\n// Node structure for the binary tree\nclass Node {\n    constructor(val) {\n        this.data = val;\n        this.left = null;\n        this.right = null;\n    }\n}\n\nclass Solution {\n    // Function to check if\n    // two subtrees are symmetric\n    isSymmetricUtil(root1, root2) {\n        // Check if either subtree is NULL\n        if (root1 === null || root2 === null) {\n            // If one subtree is NULL, the other\n            // must also be NULL for symmetry\n            return root1 === root2;\n        }\n        // Check if the data in the current nodes is equal\n        // and recursively check for symmetry in subtrees\n        return (\n            root1.data === root2.data &amp;&amp;\n            this.isSymmetricUtil(root1.left, root2.right) &amp;&amp;\n            this.isSymmetricUtil(root1.right, root2.left)\n        );\n    }\n\n    // Public function to check if the\n    // entire binary tree is symmetric\n    isSymmetric(root) {\n        // Check if the tree is empty\n        if (!root) {\n            // An empty tree is\n            // considered symmetric\n            return true;\n        }\n        // Call the utility function\n        // to check symmetry of subtrees\n        return this.isSymmetricUtil(root.left, root.right);\n    }\n}\n\n// Function to print the Inorder\n// Traversal of the Binary Tree\nfunction printInorder(root) {\n    if (!root) {\n        return;\n    }\n    printInorder(root.left);\n    console.log(root.data + ' ');\n    printInorder(root.right);\n}\n\n// Creating a sample binary tree\nconst root = new Node(1);\nroot.left = new Node(2);\nroot.right = new Node(2);\nroot.left.left = new Node(3);\nroot.right.right = new Node(3);\nroot.left.right = new Node(4);\nroot.right.left = new Node(4);\n\nconst solution = new Solution();\n\nconsole.log('Binary Tree (Inorder): ');\nprintInorder(root);\nconsole.log('');\n\nconst res = solution.isSymmetric(root);\n\nif (res) {\n    console.log('This Tree is Symmetrical');\n} else {\n    console.log('This Tree is NOT Symmetrical');\n}\n\n                            </code>\n                        </pre>\n                    </div>\n                    <p>\n                       <strong>Output</strong> \n                      \tBinary Tree (Inorder): 3 2 4 1 4 2 3\n                      \tThis Tree is Symmetrical \n                    </p>\n                </div>\n            </details>\n            <details class=\"secondary-details\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Complexity Analysis\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <p>\n                    <!-- Insert Time and Space Complexity  Here -->\n                    <p><strong>Time Complexity: O(N)</strong> where N is the number of nodes in the Binary Tree. This complexity arises from visiting each node exactly once during the traversal and the function compares the nodes in a symmetric manner.</p>\n\n\t\t\t\t\t<p><strong>Space Complexity:  O(1)</strong>  as no additional data structures or memory is allocated.\n\t\t\t\t\t<ol><li>O(H): Recursive Stack Space is used to calculate the height of the tree at each node which is proportional to the height of the tree. </li><li>The recursive nature of the getHeight function, which incurs space on the call stack for each recursive call until it reaches the leaf nodes or the height of the tree.</li></ol> </p>\n\n                </p>\n            </details>\n        </div>\n    </details>\n</div>\n\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n    <details>\n        <summary class=\"main-summary\">\n            <span>\n                Video Explanation\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"yt-video-wrapper\">\n            <!-- Insert iframe embed Link of Youtube Video-->\n          <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/nKggNAiEpBE?si=9FkFG5VqZ4TMXd0n\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n        </div>\n    </details>\n</div>\n\n<blockquote class=\"wp-block-quote\">\n    Special thanks to <strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268\">Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,<strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\"> please check out this article</a></strong>\n</blockquote>\n\n<script>\n\n    const codeSections = document.querySelectorAll('.code-section');\n\n    // Get last selected language from localStorage or set default value\n    let lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp';\n\n    codeSections.forEach((section, sectionIndex) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n        const copyBtn = section.querySelector('.copy-btn');\n\n        codeTabs.forEach((tab) => {\n            tab.addEventListener('click', () => {\n                codeTabs.forEach((t) => {\n                    t.classList.remove('dsa_article_code_active');\n                });\n                tab.classList.add('dsa_article_code_active');\n\n                const lang = tab.dataset.lang;\n                const activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                codeBlocks.forEach((block) => {\n                    if (block === activeBlock) {\n                        block.classList.add('dsa_article_code_active');\n                    } else {\n                        block.classList.remove('dsa_article_code_active');\n                    }\n                });\n\n                // Update last selected language for all sections and store in localStorage\n                lastSelectedLanguage = lang;\n                localStorage.setItem('lastSelectedLanguage', lang);\n                codeSections.forEach((otherSection, otherIndex) => {\n                    if (otherIndex !== sectionIndex) {\n                        const otherTabs = otherSection.querySelectorAll('.code-tab');\n                        otherTabs.forEach((otherTab) => {\n                            if (otherTab.dataset.lang === lang) {\n                                otherTab.classList.add('dsa_article_code_active');\n                            } else {\n                                otherTab.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                        const otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                        const otherCodeBlocks = otherSection.querySelectorAll('.code-block');\n                        otherCodeBlocks.forEach((block) => {\n                            if (block === otherActiveBlock) {\n                                block.classList.add('dsa_article_code_active');\n                            } else {\n                                block.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                    }\n                });\n            });\n        });\n\n        // Handle copy button click event\n        copyBtn.addEventListener('click', () => {\n            const activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\n            navigator.clipboard.writeText(activeBlock.innerText);\n            copyBtn.classList.add('dsa_article_code_active');\n            setTimeout(() => {\n                copyBtn.classList.remove('dsa_article_code_active');\n            }, 1000);\n        });\n    });\n\n    // Set initial state of the tabs\n    codeSections.forEach((section) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n\n        codeTabs.forEach((tab) => {\n            if (tab.dataset.lang === lastSelectedLanguage) {\n                tab.classList.add('dsa_article_code_active');\n            } else {\n                tab.classList.remove('dsa_article_code_active');\n            }\n        });\n\n        codeBlocks.forEach((block) => {\n            if (block.dataset.lang === lastSelectedLanguage) {\n                block.classList.add('dsa_article_code_active');\n            } else {\n                block.classList.remove('dsa_article_code_active');\n            }\n        });\n    });\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>",
    "category_tag": "data-structure",
    "likes": 41,
    "preview": "Problem Statement: Given a Binary Tree, determine whether the given tree is symmetric or not. A Binary Tree would be Symmetric, when its mirror image is exactly the same as the original tree. If we..."
}