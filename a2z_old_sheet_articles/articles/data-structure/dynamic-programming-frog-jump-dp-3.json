{
    "dislikes": 4,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:09:50 GMT+0530 (India Standard Time)",
    "slug": "dynamic-programming-frog-jump-dp-3",
    "aid": "1596",
    "title": "Dynamic Programming : Frog Jump (DP 3)",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/frog-jump",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "dynamic-programming",
            "topic-title": "Dynamic Programming"
        },
        {
            "topic-id": "recursion",
            "topic-title": "Recursion"
        }
    ],
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Given a number of stairs and a frog, the frog wants to climb from the 0th stair to the (N-1)th stair. At a time the frog can climb either one or two steps. A height[N] array is also given. Whenever the frog jumps from a stair i to stair j, the energy consumed in the jump is abs(height[i]- height[j]), where abs() means the absolute difference. We need to return the minimum energy that can be used by the frog to jump from stair 0 to stair N-1.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n<details class=\"article_example_details\">\n<summary class=\"article_example_summary\">\n<span><strong>\nExamples\n</strong>\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"atricle_example_content\">\n<pre class=\"wp-block-preformatted\"><!-- Insert New Examples Here -->\n<pre class=\"wp-block-preformatted\"><strong>Examples:</strong>\n\n<img width=\"644\" height=\"363\" src=\"https://lh6.googleusercontent.com/WLjOydAbeRWkwdBlTeAYyk5CIRu6d9foliQ1qwvBvcI5HLKo-dcLDJ84wCz8c8ZwdlZstoJmuFmJu-HhQXJYjCo8Ekym-wzX4zRQlTV40zsWoEGZl4OVnJugNp5sMCn2odSl9yoF\"></pre></pre>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Practice Section-->\n<div class=\"practice\">\n<span><strong>Practice: </strong></span>\n<div class=\"problem-buttons\">\n\n<!-- Add Problem Link inside href -->\n<a href=\"https://www.codingninjas.com/studio/problems/frog-jump_3621012?utm_source=striver&amp;utm_medium=website&amp;utm_campaign=a_zcoursetuf\" target=\"_blank\" rel=\"noopener\">\n<span>Solve Problem</span>\n<img src=\"https://static.takeuforward.org/wp/uploads/2023/04/Group-11-5.png\" alt=\"code-studio\">\n</a>\n</div>\n</div>\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\nyourself first. </em></p>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<div class=\"horizontal_navbar_dsa_article\">\n<div class=\"grid_container_three\">\n<a href=\"#brute-force-approach\" class=\"three-boxes box-a\">\nMemorization approach\n</a>\n<a href=\"#better-approach\" class=\"three-boxes box-b\">\nTabulation approach\n</a>\n<a href=\"#optimal-approach\" class=\"three-boxes box-c\">\nSpace Optimization\n</a>\n<a href=\"#dsa_article_video_explanation\" class=\"three-boxes box-d\">\n<svg width=\"26\" height=\"26\" viewBox=\"0 0 20 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M8 10L13.19 7L8 4V10ZM19.56 2.17C19.69 2.64 19.78 3.27 19.84 4.07C19.91 4.87 19.94 5.56 19.94 6.16L20 7C20 9.19 19.84 10.8 19.56 11.83C19.31 12.73 18.73 13.31 17.83 13.56C17.36 13.69 16.5 13.78 15.18 13.84C13.88 13.91 12.69 13.94 11.59 13.94L10 14C5.81 14 3.2 13.84 2.17 13.56C1.27 13.31 0.69 12.73 0.44 11.83C0.31 11.36 0.22 10.73 0.16 9.93C0.0900001 9.13 0.0599999 8.44 0.0599999 7.84L0 7C0 4.81 0.16 3.2 0.44 2.17C0.69 1.27 1.27 0.69 2.17 0.44C2.64 0.31 3.5 0.22 4.82 0.16C6.12 0.0899998 7.31 0.0599999 8.41 0.0599999L10 0C14.19 0 16.8 0.16 17.83 0.44C18.73 0.69 19.31 1.27 19.56 2.17Z\" fill=\"red\"></path>\n</svg>\n\n</a>\n<div class=\"box-e tooltip\">\n<svg viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M12.842 9.25L11.9577 10.17C11.2502 10.89 10.8081 11.5 10.8081 13H8.84297V12.5C8.84297 11.39 9.28511 10.39 9.99255 9.67L11.2109 8.41C11.5745 8.05 11.7906 7.55 11.7906 7C11.7906 6.46957 11.5836 5.96086 11.2151 5.58579C10.8465 5.21071 10.3467 5 9.82552 5C9.30434 5 8.80451 5.21071 8.43598 5.58579C8.06745 5.96086 7.86041 6.46957 7.86041 7H5.89531C5.89531 5.93913 6.30938 4.92172 7.04644 4.17157C7.7835 3.42143 8.78316 3 9.82552 3C10.8679 3 11.8675 3.42143 12.6046 4.17157C13.3417 4.92172 13.7557 5.93913 13.7557 7C13.7543 7.84324 13.4259 8.65183 12.842 9.25ZM10.8081 17H8.84297V15H10.8081M9.82552 0C8.53521 0 7.25754 0.258658 6.06545 0.761205C4.87337 1.26375 3.79021 2.00035 2.87783 2.92893C1.03519 4.8043 0 7.34784 0 10C0 12.6522 1.03519 15.1957 2.87783 17.0711C3.79021 17.9997 4.87337 18.7362 6.06545 19.2388C7.25754 19.7413 8.53521 20 9.82552 20C12.4314 20 14.9306 18.9464 16.7732 17.0711C18.6158 15.1957 19.651 12.6522 19.651 10C19.651 4.47 15.2296 0 9.82552 0Z\" fill=\"black\"></path>\n</svg>\n<div class=\"bottom\">\n<p>Expand any one approach by clicking the given options in the bar. Clicking one approach on bar,\ncloses all other expands. You can manually expand more than one approach at a time</p>\n<i></i>\n</div>\n\n</div>\n</div>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Approaches Drop-Down -->\n<div class=\"dsa_article_dropdown_approachs \">\n\n<!-- Brute Force Approach Starts from here -->\n<div id=\"brute-force-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nMemorization Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n<p>As the problem statement states to find the minimum energy required, two approaches should come to our mind, greedy and dynamic programming.</p>\n<p>First, we will see why a greedy approach will not work?</p>\n<p>The total energy required by the frog depends upon the path taken by the frog. If the frog just takes the cheapest path in every stage it can happen that it eventually takes a costlier path after a certain number of jumps. The following example will help to understand this.</p>\n<p><img width=\"624\" height=\"289\" src=\"https://lh5.googleusercontent.com/Rca-cQtxkVLxPpFol1V0yDJ6UhxnmeLrQC-VDFitc2jo0BqbZO2iREbAtlDLDuntsmGkWUqoQoVSkpLcjWjjYwoYaS09Nd4G-c_jgn361jMGYexa4e3AoDhlBeZy0C2OOSyrixBU\"></p>\n<p>Therefore a greedy solution will not work and we need to try all possible paths to find the answer.</p>\n<p><strong>Steps to form the recursive solution</strong></p>\n<p>We will recap the steps discussed in the <a href=\"https://takeuforward.org/data-structure/dynamic-programming-climbing-stairs/\">previous article</a> to form the recursive solution.</p>\n<p><strong>Step 1: </strong>Express the problem in terms of indexes</p>\n<ul><li>This can be easily done as there are array indexes [0,1,2,..., n-1].</li><li>We can say that f(n-1) signifies the minimum amount of energy required to move from stair 0 to stair n-1.&nbsp;</li><li>Therefore f(0) simply should give us the answer as 0(base case).</li></ul>\n<p><strong>Step 2: </strong>Try all the choices to reach the goal.</p>\n<p>The frog can jump either by one step or by two steps. We will calculate the cost of the jump from the height array. The rest of the cost will be returned by the recursive calls that we make</p>\n<p>Our pseudocode till this step will be:</p>\n<p><img width=\"387\" height=\"296\" src=\"https://lh4.googleusercontent.com/M4bkltR31TKXYoVtyjpyJ1B8qLiYiQ7AB4YE1gIBEfrTTMKC27s8qpajNMnJw89lSP33P4cfow3bUGKb9mMhDn1qL5YhMJDPXhX9jb3A9zk95kN7Imk5SZ5RJSeEtoaQZJogGBl_\"></p>\n<p><strong>Step 3: </strong>Take the minimum of all the choices</p>\n<p>As the problem statement asks to find the minimum total energy, we will return the minimum of two choices of step2.</p>\n<p>Also at ind=1, we can\u2019t try the second choice so we will only make one recursive call.</p>\n<p>The base case will be when we want to go to the 0th stair, then we have only one option.</p>\n<p>Our final pseudo-code will be:</p>\n<p><img width=\"396\" height=\"336\" src=\"https://lh4.googleusercontent.com/5CjwRHnZ3v0Frs42uTKPSSetuCmji_d-Fp8VoT_fLsGKYkT156tc91-oZvlDKMy4yHW46h4vRm3PrwwG4ruXRKEaL3HkPfHUDfFhSnJxL41vG1FsVy4lsquk1Xn3cGijjNGYzpuH\"></p>\n<p>Once we form the recursive solution, we can use the approach told in <a href=\"https://takeuforward.org/data-structure/dynamic-programming-introduction/\">Dynamic Programming Introduction</a> to convert it into a dynamic programming one.</p>\n<p><strong>Memoization approach</strong></p>\n<p><strong>Steps to convert Recursive code to memoization solution:</strong></p>\n<ul><li>Create a dp[n] array initialized to -1.</li><li>Whenever we want to find the answer of a particular value (say n), we first check whether the answer is already calculated using the dp array(i.e dp[n] != -1 ). If yes, simply return the value from the dp array.</li><li>If not, then we are finding the answer for the given value for the first time, we will use the recursive relation as usual but before returning from the function, we will set dp[n] to the solution we get.</li></ul>\n<p><strong>Recursion tree diagram:</strong></p>\n<p><img width=\"624\" height=\"351\" src=\"https://lh3.googleusercontent.com/_w5IvcsYohG_kLM-vSZddLFe5AbrSM40J5oC8UZ63fbkmxLhwVHqeKUqKDNXdEv_MnQSlVoAfZxontqdBqCmV_wHq4AssTQu9f8v1LO8M_xpiFCaILeruL-THce3stMY3GmnQaeN\"></p>\n<p><strong>Note: </strong>To watch a detailed dry run of this approach, please watch the video attached below</p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\nint solve(int ind, vector&lt;int&gt;&amp; height, vector&lt;int&gt;&amp; dp){\n    if(ind==0) return 0;\n    if(dp[ind]!=-1) return dp[ind];\n    int jumpTwo = INT_MAX;\n    int jumpOne= solve(ind-1, height,dp)+ abs(height[ind]-height[ind-1]);\n    if(ind&gt;1)\n        jumpTwo = solve(ind-2, height,dp)+ abs(height[ind]-height[ind-2]);\n    \n    return dp[ind]=min(jumpOne, jumpTwo);\n}\n\n\nint main() {\n\n  vector&lt;int&gt; height{30,10,60 , 10 , 60 , 50};\n  int n=height.size();\n  vector&lt;int&gt; dp(n,-1);\n  cout&lt;&lt;solve(n-1,height,dp);\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.*;\nclass TUF{\nstatic int solve(int ind,int[] height,int[] dp){\n    if(ind==0) return 0;\n    if(dp[ind]!=-1) return dp[ind];\n    int jumpTwo = Integer.MAX_VALUE;\n    int jumpOne= solve(ind-1, height,dp)+ Math.abs(height[ind]-height[ind-1]);\n    if(ind&gt;1)\n        jumpTwo = solve(ind-2, height,dp)+ Math.abs(height[ind]-height[ind-2]);\n    \n    return dp[ind]=Math.min(jumpOne, jumpTwo);\n}\n\n\npublic static void main(String args[]) {\n\n  int height[]={30,10,60 , 10 , 60 , 50};\n  int n=height.length;\n  int dp[]=new int[n];\n  Arrays.fill(dp,-1);\n  System.out.println(solve(n-1,height,dp));\n}\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\nimport sys\nimport math\n\ndef solve(ind, height, dp):\n    if ind == 0:\n        return 0\n    if dp[ind] != -1:\n        return dp[ind]\n    jumpTwo = sys.maxsize\n    jumpOne = solve(ind-1, height, dp) + abs(height[ind] - height[ind-1])\n    if ind &gt; 1:\n        jumpTwo = solve(ind-2, height, dp) + abs(height[ind] - height[ind-2])\n    dp[ind] = min(jumpOne, jumpTwo)\n    return dp[ind]\n\nif __name__ == \"__main__\":\n    height = [30, 10, 60, 10, 60, 50]\n    n = len(height)\n    dp = [-1] * n\n    print(solve(n-1, height, dp))\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\nfunction solve(ind, height, dp) {\n  if (ind === 0) return 0;\n  if (dp[ind] !== -1) return dp[ind];\n  let jumpTwo = Infinity;\n  let jumpOne = solve(ind - 1, height, dp) + Math.abs(height[ind] - height[ind - 1]);\n  if (ind &gt; 1)\n    jumpTwo = solve(ind - 2, height, dp) + Math.abs(height[ind] - height[ind - 2]);\n\n  return (dp[ind] = Math.min(jumpOne, jumpTwo));\n}\n\nfunction main() {\n  const height = [30, 10, 60, 10, 60, 50];\n  const n = height.length;\n  const dp = new Array(n).fill(-1);\n  console.log(solve(n - 1, height, dp));\n}\n\nmain();\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Brute Force Here -->\n</p><p><strong>Output:</strong> 40\n\n</p>\n<p></p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n<!-- Insert Time and Space Complexity of Brute Force Here -->\n</p><p><strong>Time Complexity: O(N)</strong></p>\n<p>Reason: The overlapping subproblems will return the answer in constant time O(1). Therefore the total number of new subproblems we solve is \u2018n\u2019. Hence total time complexity is O(N).</p>\n<p><strong>Space Complexity: O(N)</strong></p>\n<p>Reason: We are using a recursion stack space(O(N)) and an array (again O(N)). Therefore total space complexity will be O(N) + O(N) \u2248 O(N)</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Brute Force Approach Ends here -->\n\n\n<!-- Better Approach Starts from here -->\n\n<div id=\"better-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nTabulation Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition For Better Approach Here -->\n<p><strong>Tabulation approach</strong></p>\n<ul><li>Declare a dp[] array of size n.</li><li>First, initialize the base condition values, i.e dp[0] as 0.</li><li>Set an iterative loop that traverses the array( from index 1 to n-1) and for every index calculate jumpOne and jumpTwo and set dp[i] = min(jumpOne, jumpTwo).</li></ul>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\n\nint main() {\n\n  vector&lt;int&gt; height{30,10,60,10,60,50};\n  int n=height.size();\n  vector&lt;int&gt; dp(n,-1);\n  dp[0]=0;\n  for(int ind=1;ind&lt;n;ind++){\n      int jumpTwo = INT_MAX;\n        int jumpOne= dp[ind-1] + abs(height[ind]-height[ind-1]);\n        if(ind&gt;1)\n            jumpTwo = dp[ind-2] + abs(height[ind]-height[ind-2]);\n    \n        dp[ind]=min(jumpOne, jumpTwo);\n  }\n  cout&lt;&lt;dp[n-1];\n}\n\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.*;\nclass TUF{\npublic static void main(String args[]) {\n\n  int height[]={30,10,60,10,60,50};\n  int n=height.length;\n  int dp[]=new int[n];\n  Arrays.fill(dp,-1);\n  dp[0]=0;\n  for(int ind=1;ind&lt;n;ind++){\n      int jumpTwo = Integer.MAX_VALUE;\n        int jumpOne= dp[ind-1] + Math.abs(height[ind]-height[ind-1]);\n        if(ind&gt;1)\n            jumpTwo = dp[ind-2] + Math.abs(height[ind]-height[ind-2]);\n    \n        dp[ind]=Math.min(jumpOne, jumpTwo);\n  }\n  System.out.println(dp[n-1]);\n}\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\ndef main():\n    height = [30, 10, 60, 10, 60, 50]\n    n = len(height)\n    dp = [-1 for _ in range(n)]\n    dp[0] = 0\n    for ind in range(1, n):\n        jumpTwo = float('inf')\n        jumpOne = dp[ind-1] + abs(height[ind]-height[ind-1])\n        if ind &gt; 1:\n            jumpTwo = dp[ind-2] + abs(height[ind]-height[ind-2])\n        dp[ind] = min(jumpOne, jumpTwo)\n    print(dp[n-1])\n\nif __name__ == \"__main__\":\n    main()\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\nfunction main() {\n  const height = [30, 10, 60, 10, 60, 50];\n  const n = height.length;\n  const dp = new Array(n).fill(-1);\n  dp[0] = 0;\n\n  for (let ind = 1; ind &lt; n; ind++) {\n    let jumpTwo = Infinity;\n    let jumpOne = dp[ind - 1] + Math.abs(height[ind] - height[ind - 1]);\n    if (ind &gt; 1)\n      jumpTwo = dp[ind - 2] + Math.abs(height[ind] - height[ind - 2]);\n\n    dp[ind] = Math.min(jumpOne, jumpTwo);\n  }\n\n  console.log(dp[n - 1]);\n}\n\nmain();\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Better Approach Here -->\n<strong>Output:</strong>  40\n\n\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Better Approach Here -->\n</p><p><strong>Time Complexity: O(N)</strong></p>\n<p>Reason: We are running a simple iterative loop</p>\n<p><strong>Space Complexity: O(N)</strong></p>\n<p>Reason: We are using an external array of size \u2018n+1\u2019.</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Better Approach Ends from here -->\n\n\n<!-- Optimal Approach Starts from here -->\n\n<div id=\"optimal-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nSpace Optimization Approach \n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm of Better Approach Here -->\n<p>If we closely look at the values required at every iteration,</p>\n<p><strong>dp[i], dp[i-1], and&nbsp; dp[i-2]</strong></p>\n<p>we see that for any i, we do need only the last two values in the array. So is there a need to maintain a whole array for it?&nbsp;</p>\n<p>The answer is \u2018No\u2019. Let us call dp[i-1] as prev and dp[i-2] as prev2. Now understand the following illustration.</p>\n<p><img width=\"575\" height=\"348\" src=\"https://lh5.googleusercontent.com/Lt_uXsu9QMKcbxHiTAFmpsWlqzMtJhMmS4UBaWkWxd298fvbku5rSJDXZILtFtLJUR7bxPkyMNLLi4s3RkUc04yiQm7Ex63jzmMJOi3uMPA0GmFdhboOfPltnRJ_hv2ehOODCdsO\"></p>\n<ul><li>Each iteration\u2019s cur_i and prev becomes the next iteration\u2019s prev and prev2 respectively.</li><li>Therefore after calculating cur_i, if we update prev and prev2 according to the next step, we will always get the answer.&nbsp;</li><li>After the iterative loop has ended we can simply return prev as our answer.</li></ul>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\n\nint main() {\n\n  vector&lt;int&gt; height{30,10,60,10,60,50};\n  int n=height.size();\n  int prev=0;\n  int prev2=0;\n  for(int i=1;i&lt;n;i++){\n      \n      int jumpTwo = INT_MAX;\n      int jumpOne= prev + abs(height[i]-height[i-1]);\n      if(i&gt;1)\n        jumpTwo = prev2 + abs(height[i]-height[i-2]);\n    \n      int cur_i=min(jumpOne, jumpTwo);\n      prev2=prev;\n      prev=cur_i;\n        \n  }\n  cout&lt;&lt;prev;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.*;\nclass TUF{\npublic static void main(String args[]) {\n\n  int height[]={30,10,60,10,60,50};\n  int n=height.length;\n   int prev=0;\n  int prev2=0;\n  for(int i=1;i&lt;n;i++){\n      \n      int jumpTwo = Integer.MAX_VALUE;\n      int jumpOne= prev + Math.abs(height[i]-height[i-1]);\n      if(i&gt;1)\n        jumpTwo = prev2 + Math.abs(height[i]-height[i-2]);\n    \n      int cur_i=Math.min(jumpOne, jumpTwo);\n      prev2=prev;\n      prev=cur_i;\n        \n  }\n  System.out.println(prev);\n}\n}\n\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\nimport sys\ndef main():\n    height = [30, 10, 60, 10, 60, 50]\n    n = len(height)\n    prev = 0\n    prev2 = 0\n    for i in range(1, n):\n        jumpTwo = sys.maxsize\n        jumpOne = prev + abs(height[i] - height[i - 1])\n        if i &gt; 1:\n            jumpTwo = prev2 + abs(height[i] - height[i - 2])\n\n        cur_i = min(jumpOne, jumpTwo)\n        prev2 = prev\n        prev = cur_i\n\n    print(prev)\n\nif __name__ == \"__main__\":\n    main()\n\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\nfunction main() {\n  const height = [30, 10, 60, 10, 60, 50];\n  const n = height.length;\n  let prev = 0;\n  let prev2 = 0;\n\n  for (let i = 1; i &lt; n; i++) {\n    let jumpTwo = Infinity;\n    let jumpOne = prev + Math.abs(height[i] - height[i - 1]);\n    if (i &gt; 1)\n      jumpTwo = prev2 + Math.abs(height[i] - height[i - 2]);\n\n    let cur_i = Math.min(jumpOne, jumpTwo);\n    prev2 = prev;\n    prev = cur_i;\n  }\n\n  console.log(prev);\n}\n\nmain();\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Optimal Apporach Here -->\n<strong>Output:</strong> 40\n\n\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Optimal Approach-->\n</p><p><strong>Time Complexity: O(N)</strong></p>\n<p>Reason: We are running a simple iterative loop</p>\n<p><strong>Space Complexity: O(1)</strong></p>\n<p>Reason: We are not using any extra space.</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Optimal Approach Starts from here -->\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n<details>\n<summary class=\"main-summary\">\n<span>\nVideo Explanation\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"yt-video-wrapper\">\n\n<!-- Insert iframe embed Link of Youtube Video-->\n<iframe class=\"lazy-loaded\" loading=\"lazy\" title=\"Frog Jump\" width=\"810\" height=\"456\" data-lazy-type=\"iframe\" data-src=\"https://www.youtube.com/embed/EgG3jsGoPvQ?si=onimaVT4vJd2Uqen\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\" src=\"https://www.youtube.com/embed/EgG3jsGoPvQ?feature=oembed\"></iframe><noscript>\n<iframe loading=\"lazy\" title=\"Frog Jump\" width=\"810\" height=\"456\" src=\"https://www.youtube.com/embed/EgG3jsGoPvQ?si=onimaVT4vJd2Uqen\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe></noscript>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script>\n\nconst codeSections = document.querySelectorAll('.code-section');\n\n// Get last selected language from localStorage or set default value\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\n// Update last selected language for all sections and store in localStorage\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\n// Handle copy button click event\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\n// Set initial state of the tabs\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<script>\nconst codeSections = document.querySelectorAll('.code-section');\n\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script src=\"https://takeuforward.org/UXApproachDropDowns/3ApproachJSScript.js\"></script>\n<!-- /wp:html -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;<strong><a href=\"https://www.linkedin.com/in/anshuman-sharma-a1b245194/\" target=\"_blank\" rel=\"noreferrer noopener\">Anshuman Sharma</a></strong> <em>and&nbsp;<a href=\"https://www.linkedin.com/in/abhipsita-das-5b7069212/?originalSubdomain=in\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>Abhipsita Das</strong></a></em>&nbsp;for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->",
    "category_tag": "data-structure",
    "likes": 263,
    "preview": "Problem Statement: Given a number of stairs and a frog, the frog wants to climb from the 0th stair to the (N-1)th stair. At a time the frog can climb either one or two steps. A height[N] array is a..."
}