{
    "dislikes": 6,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:09:48 GMT+0530 (India Standard Time)",
    "slug": "check-if-two-strings-are-anagrams-of-each-other",
    "aid": "1587",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/valid-anagram",
    "title": "Check if two Strings are anagrams of each other",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "string",
            "topic-title": "String"
        }
    ],
    "category_tag": "data-structure",
    "likes": 101,
    "preview": "Problem Statement: Given two strings, check if two strings are anagrams of each other or not. Examples: Example 1: Input: CAT, ACT Output: true Explanation: Since the count of every letter of both...",
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement:</strong> Given two strings, check if two strings are anagrams of each other or not.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Examples:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\"><strong>Example 1:</strong>\n<strong>Input:</strong> CAT, ACT\n<strong>Output:</strong> true\n<strong>Explanation:</strong> Since the count of every letter of both strings are equal.\n\n<strong>Example 2:</strong>\n<strong>Input:</strong> RULES, LESRT \n<strong>Output:</strong> false\n<strong>Explanation:</strong> Since the count of U and T  is not equal in both strings.\n</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:heading -->\n<h2><strong>Solution</strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"textColor\":\"accent\"} -->\n<p class=\"has-accent-color has-text-color\"><strong><em>Disclaimer</em></strong>: <em>Don't jump directly to the solution, try it out yourself first.</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"624\" height=\"343\" src=\"https://lh4.googleusercontent.com/-W1LRbTxRE0UvE2WbGKYWHcD5oau00-dC05hX0MfXMdvecjFYwuPVQ35Misv01vBLaDXV5kc_zZyN0bCfsBTS27-kFchfu3UfiyvlnTjr3O395EnIFqTaJuBmXtlFlm-oCYxkFq_\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Solution 1:&nbsp;</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Approach</strong>: Sort both the string and compare each and every letter of both strings. If all letters matched then, print true. Otherwise, print false.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For Eg.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We have&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Str1 = \u201cINTEGER\u201d</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Str2=\u201dTEGERNI\u201d</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>After sorting Str1 and Str2, we find that both of the strings are</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Str1 =\u201d EEGINRT\u201d</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Str2=\u201d EEGINRT\u201d</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Since both of the strings are the same, this means both Str1 and Str2 are anagrams of each other.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    \n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\nbool CheckAnagrams(string str1, string str2)\n{\n  // Case 1: when both of the strings have different lengths\n  if (str1.length() != str2.length())\n    return false;\n \n  sort(str1.begin(), str1.end());\n  sort(str2.begin(), str2.end());\n \n  // Case 2: check if every character of str1 and str2 matches with each other\n  for (int i = 0; i &lt; str1.length(); i++)\n  {\n    if (str1[i] != str2[i])\n      return false;\n  }\n  return true;\n}\nint main()\n{\n  string Str1 = \"INTEGER\";\n  string Str2 = \"TEGERNI\";\n  if(CheckAnagrams(Str1, Str2))\n  cout &lt;&lt; \"True\" &lt;&lt; endl;\n  else\n  cout&lt;&lt;\"False\"&lt;&lt;endl;\n  return 0;\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> True</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity:</strong> O(nlogn) since sorting function requires nlogn iterations.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(1)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\npublic class Main\n{\npublic static String SortString(String str)\n  {\n    char c[] = str.toCharArray();\n    Arrays.sort(c);\n    return new String(c);\n  }\npublic static boolean checkAnagrams(String str1, String str2)\n  {\n    // Case 1: when both of the strings have different lengths\n    if (str1.length() != str2.length())\n      return false;\n \n    str1 = SortString(str1);\n    str2 = SortString(str2);\n \n    // Case 2: check if every character of str1 and str2 matches with each other\n    for (int i = 0; i &lt; str1.length(); i++)\n    {\n      if (str1.charAt(i) != str2.charAt(i))\n        return false;\n    }\n    return true;\n  }\npublic static void main(String args[])\n  {\n    String Str1 = \"INTEGER\";\n    String Str2 = \"TEGERNI\";\n    System.out.println(checkAnagrams(Str1, Str2));\n  }\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> True</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity:</strong> O(nlogn) since sorting function requires nlogn iterations.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(1)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Solution 2:&nbsp;</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Approach</strong>: Just count the frequency of every element in Str1 and iterate through Str2 and decrease the count of every element in the frequency array. Now iterate again, if the frequency at any point is not 0 this means, strings are not anagrams of each other.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For Eg,&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Str1 = \u201dINTEGER\u201d</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Str2 = \u201dNTEGERI\u201d</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Frequency array of every element :</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"624\" height=\"157\" src=\"https://lh5.googleusercontent.com/LGjOQr1pbmFtZObbbysdwuneQcE-vAyPTplg_8x1pLdkOQpbjB-dlOSYHi4Slr8KUd_rourPlZsAUoG4L2C-dYhvMQz32Sxw1BqXrWNg035wLKU0qGg_WREPYUji2NVxzQ5AYtpr\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We check for every element of Str2 and find that all elements are found, so return true.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    \n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\nbool CheckAnagrams(string str1, string str2)\n{\n  // when both of the strings have different lengths\n  if (str1.length() != str2.length())\n    return false;\n \n  int freq[26] = {0};\n  for (int i = 0; i &lt; str1.length(); i++)\n  {\n    freq[str1[i] - 'A']++;\n  }\n  for (int i = 0; i &lt; str2.length(); i++)\n  {\n    freq[str2[i] - 'A']--;\n  }\n  for (int i = 0; i &lt; 26; i++)\n  {\n    if (freq[i] != 0)\n      return false;\n  }\n  return true;\n}\nint main()\n{\n  string Str1 = \"INTEGER\";\n  string Str2 = \"TEGERNI\";\n  if(CheckAnagrams(Str1, Str2))\n  cout &lt;&lt; \"True\" &lt;&lt; endl;\n  else\n  cout&lt;&lt;\"False\"&lt;&lt;endl;\n  return 0;\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> True</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity:</strong> O(n) where n is the length of string</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(1)&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\npublic class Main {\n  public static boolean checkAnagrams(String str1, String str2) {\n    // when both of the strings have different lengths\n    if (str1.length() != str2.length())\n      return false;\n \n    int[] freq = new int[26];\n    for (int i = 0; i &lt; str1.length(); i++) {\n      freq[str1.charAt(i) - 'A']++;\n    }\n    for (int i = 0; i &lt; str2.length(); i++) {\n      freq[str2.charAt(i) - 'A']--;\n    }\n    for (int i = 0; i &lt; 26; i++) {\n      if (freq[i] != 0)\n        return false;\n    }\n    return true;\n  }\n  public static void main(String args[]) {\n    String Str1 = \"INTEGER\";\n    String Str2 = \"TEGERNI\";\n    System.out.println(checkAnagrams(Str1, Str2));\n  }\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> true</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity:</strong> O(n) where n is the length of string</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(1)&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to<strong><a href=\"https://www.linkedin.com/in/gurmeet-singh-630002201/\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>&nbsp;Gurmeet Singh</strong></a></strong>&nbsp;for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->"
}