{
    "dislikes": 8,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:10:59 GMT+0530 (India Standard Time)",
    "slug": "spiral-traversal-of-matrix",
    "aid": "1938",
    "title": "Spiral Traversal of Matrix",
    "tuf_plus": "",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        }
    ],
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement: </strong>Given a Matrix, print the given matrix in spiral order.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Examples:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\"><strong>Example 1:</strong>\n<strong>Input:</strong> Matrix[][] = { { 1, 2, 3, 4 },\n\t\t      { 5, 6, 7, 8 },\n\t\t      { 9, 10, 11, 12 },\n\t              { 13, 14, 15, 16 } }\n\n<strong>Outhput:</strong> 1, 2, 3, 4, 8, 12, 16, 15, 14, 13, 9, 5, 6, 7, 11, 10.\n<strong>Explanation:</strong> The output of matrix in spiral form.\n\n<strong>Example 2:</strong>\n<strong>Input:</strong> Matrix[][] = { { 1, 2, 3 },\n\t              { 4, 5, 6 },\n\t\t      { 7, 8, 9 } }\n\t\t\t    \n<strong>Output:</strong> 1, 2, 3, 6, 9, 8, 7, 4, 5.\n<strong>Explanation:</strong> The output of matrix in spiral form.\n</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Solution</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"textColor\":\"accent\"} -->\n<p class=\"has-accent-color has-text-color\"><strong><em>Disclaimer</em></strong>: <em>Don't jump directly to the solution, try it out yourself first.</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Approach: </strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Printing a matrix in spiral form is the same as peeling an onion layer by layer. Because we are printing the elements layer by layer starting from the outer layers.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><img width=\"602\" height=\"267\" src=\"https://lh5.googleusercontent.com/hZPzGMsKGm29AE34ZtOii2D76g2_M0mXxbnceTnuxSyodzJTUSYWJz3umCeyEWMas0OtAQVWE17WEDSQ_nbg6B_7m1mFyNfmzsN34GDhQjHDa4eV20u1wG4mBjPefJyRU53fAAe5hFQ2ZYChxw\"></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In this approach, we will be using <strong>four loops</strong> to print all four sides of the matrix.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>1st loop:</strong> This will print the elements from left to right.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>2nd loop: </strong>This will print the elements from top to bottom.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>3rd loop: </strong>This will print the elements from right to left.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>4th loop: </strong>This will print the elements from bottom to top.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Steps:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>Create and initialize variables top as starting row index, bottom as ending row index left as starting column index, and right as ending column index. As shown in the image given below.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><img width=\"583.5\" height=\"309\" src=\"https://lh4.googleusercontent.com/Xq3R-xwSRxUx3EEjKQIMaHTM9qGqj81nPFe2nGoSnxnd36bStjU989Sf-CsWAnFZf4jHS68xr4l49QqKXeo7o7lLF1V38SJYaxC1CWWNzvk-eBNevdWhduS6mBSX9QGXGATwQw0OkFXkP18JWw\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>In each outer loop traversal print the elements of a square in a clockwise manner.</li><li><strong>Print the top row</strong>, i.e. Print the elements of the top row from column index left to right and increase the count of the top so that it will move to the next row.</li><li><strong>Print the right column</strong>, i.e. Print the rightmost column from row index top to bottom and decrease the count of right.</li><li><strong>Print the bottom row</strong>, i.e. if top &lt;= bottom, then print the elements of a bottom row from column right to left and decrease the count of bottom</li><li><strong>Print the left column</strong>, i.e. if left &lt;= right, then print the elements of the left column from the bottom row to the top row and increase the count of left.</li><li>Run a loop until all the squares of loops are printed.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Note: </strong>As we can see in the code snippet below, two edge conditions are being added in the last two \u2018for\u2019 loops: when we are moving from right to left and from bottom to top.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>These conditions are added to check if the matrix is a single column or a single row. So, whenever the elements in a single row are traversed they cannot be traversed again backward so the condition is checked in the right-to-left loop. When a single column is present, the condition is checked in the bottom-to-top loop as elements from bottom to top cannot be traversed again.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n    <button class=\"code-tab\" data-lang=\"javascript\">Javascript</button>\n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include &lt;bits/stdc++.h>\n\nusing namespace std;\n\nvector&lt;int> printSpiral(vector&lt;vector&lt;int>> mat) {\n \n  // Define ans array to store the result.\n  vector&lt;int> ans;\n \n  int n = mat.size(); // no. of nows\n  int m = mat[0].size(); // no. of columns\n  \n  // Initialize the pointers reqd for traversal.\n  int top = 0, left = 0, bottom = n - 1, right = m - 1;\n\n  // Loop until all elements are not traversed.\n  while (top &lt;= bottom &amp;&amp; left &lt;= right) {\n      \n    // For moving left to right\n    for (int i = left; i &lt;= right; i++)\n      ans.push_back(mat[top][i]);\n\n    top++;\n\n    // For moving top to bottom.\n    for (int i = top; i &lt;= bottom; i++)\n      ans.push_back(mat[i][right]);\n\n    right--;\n    \n    // For moving right to left.\n    if (top &lt;= bottom) {\n      for (int i = right; i >= left; i--)\n       ans.push_back(mat[bottom][i]);\n\n      bottom--;\n    }\n\n    // For moving bottom to top.\n    if (left &lt;= right) {\n      for (int i = bottom; i >= top; i--)\n        ans.push_back(mat[i][left]);\n\n      left++;\n    }\n  }\n  return ans;\n}\n\nint main() {\n    \n  //Matrix initialization.\n  vector&lt;vector&lt;int>> mat   {{1, 2, 3, 4},\n                             {5, 6, 7, 8},\n\t                         {9, 10, 11, 12},\n\t\t                     {13, 14, 15, 16}};\n\t\t                     \n  vector&lt;int> ans = printSpiral(mat);\n\n  for(int i = 0;i&lt;ans.size();i++){\n      \n      cout&lt;&lt;ans[i]&lt;&lt;\" \";\n  }\n  \n  cout&lt;&lt;endl;\n  \n  return 0;\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>1 2 3 4 8 12 16 15 14 13 9 5 6 7 11 10</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(m x n) </strong>{ Since all the elements are being traversed once and there are total n x m elements ( m elements in each row and total n rows) so the time complexity will be O(n x m)}.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(n) </strong>{ Extra Space used for storing traversal in the ans array }.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    \n    public static List&lt;Integer> printSpiral(int[][] mat) {\n        \n        // Define ans list to store the result.\n        List&lt;Integer> ans = new ArrayList&lt;>();\n        \n        int n = mat.length; // no. of rows\n        int m = mat[0].length; // no. of columns\n        \n        // Initialize the pointers required for traversal.\n        int top = 0, left = 0, bottom = n - 1, right = m - 1;\n\n        // Loop until all elements are not traversed.\n        while (top &lt;= bottom &amp;&amp; left &lt;= right) {\n\n            // For moving left to right\n            for (int i = left; i &lt;= right; i++)\n                ans.add(mat[top][i]);\n\n            top++;\n\n            // For moving top to bottom.\n            for (int i = top; i &lt;= bottom; i++)\n                ans.add(mat[i][right]);\n\n            right--;\n\n            // For moving right to left.\n            if (top &lt;= bottom) {\n                for (int i = right; i >= left; i--)\n                    ans.add(mat[bottom][i]);\n\n                bottom--;\n            }\n\n            // For moving bottom to top.\n            if (left &lt;= right) {\n                for (int i = bottom; i >= top; i--)\n                    ans.add(mat[i][left]);\n\n                left++;\n            }\n        }\n        return ans;\n    }\n\n    public static void main(String[] args) {\n        \n        //Matrix initialization.\n        int[][] mat = {{1, 2, 3, 4},\n                       {5, 6, 7, 8},\n                       {9, 10, 11, 12},\n                       {13, 14, 15, 16}};\n        \n        List&lt;Integer> ans = printSpiral(mat);\n\n        for(int i = 0;i&lt;ans.size();i++){\n            System.out.print(ans.get(i) + \" \");\n        }\n\n        System.out.println();\n    }\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>1 2 3 4 8 12 16 15 14 13 9 5 6 7 11 10</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(m x n) </strong>{ Since all the elements are being traversed once and there are total n x m elements ( m elements in each row and total n rows) so the time complexity will be O(n x m)}.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(n) </strong>{ Extra Space used for storing traversal in the ans array }.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block\" data-lang=\"python\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">def printSpiral(mat):\n    # Define ans array to store the result.\n    ans = []\n \n    n = len(mat) # no. of rows\n    m = len(mat[0]) # no. of columns\n  \n    # Initialize the pointers reqd for traversal.\n    top = 0\n    left = 0\n    bottom = n - 1\n    right = m - 1\n\n    # Loop until all elements are not traversed.\n    while (top &lt;= bottom and left &lt;= right):\n        # For moving left to right\n        for i in range(left, right + 1):\n            ans.append(mat[top][i])\n\n        top += 1\n\n        # For moving top to bottom.\n        for i in range(top, bottom + 1):\n            ans.append(mat[i][right])\n\n        right -= 1\n\n        # For moving right to left.\n        if (top &lt;= bottom):\n            for i in range(right, left - 1, -1):\n                ans.append(mat[bottom][i])\n\n            bottom -= 1\n\n        # For moving bottom to top.\n        if (left &lt;= right):\n            for i in range(bottom, top - 1, -1):\n                ans.append(mat[i][left])\n\n            left += 1\n\n    return ans\n\n#Matrix initialization.\nmat = [[1, 2, 3, 4],\n       [5, 6, 7, 8],\n       [9, 10, 11, 12],\n       [13, 14, 15, 16]]\n                     \nans = printSpiral(mat)\n\nprint(ans)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>1 2 3 4 8 12 16 15 14 13 9 5 6 7 11 10</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(m x n) </strong>{ Since all the elements are being traversed once and there are total n x m elements ( m elements in each row and total n rows) so the time complexity will be O(n x m)}.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(n) </strong>{ Extra Space used for storing traversal in the ans array }.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block\" data-lang=\"javascript\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n// Define a function to print the matrix in a spiral order\nfunction printSpiral(mat) {\n  // Define ans array to store the result.\n  let ans = [];\n\n  // Determine the number of rows and columns\n  let n = mat.length; // no. of rows\n  let m = mat[0].length; // no. of columns\n\n  // Initialize the pointers reqd for traversal.\n  let top = 0, left = 0, bottom = n - 1, right = m - 1;\n\n  // Loop until all elements are not traversed.\n  while (top &lt;= bottom &amp;&amp; left &lt;= right) {\n    // For moving left to right\n    for (let i = left; i &lt;= right; i++)\n      ans.push(mat[top][i]);\n\n    top++;\n\n    // For moving top to bottom.\n    for (let i = top; i &lt;= bottom; i++)\n      ans.push(mat[i][right]);\n\n    right--;\n\n    // For moving right to left.\n    if (top &lt;= bottom) {\n      for (let i = right; i >= left; i--)\n       ans.push(mat[bottom][i]);\n\n      bottom--;\n    }\n\n    // For moving bottom to top.\n    if (left &lt;= right) {\n      for (let i = bottom; i >= top; i--)\n        ans.push(mat[i][left]);\n\n      left++;\n    }\n  }\n  return ans;\n}\n\n// Define the main function (not necessary in JavaScript)\n\n// Matrix initialization.\nlet mat = [[1, 2, 3, 4],\n           [5, 6, 7, 8],\n\t       [9, 10, 11, 12],\n\t\t   [13, 14, 15, 16]];\n    \nlet ans = printSpiral(mat);\n\nfor (let i = 0; i &lt; ans.length; i++) {\n  console.log(ans[i] + \" \");\n}\n\nconsole.log(); // Empty console.log() to print a newline\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>1 2 3 4 8 12 16 15 14 13 9 5 6 7 11 10</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(m x n) </strong>{ Since all the elements are being traversed once and there are total n x m elements ( m elements in each row and total n rows) so the time complexity will be O(n x m)}.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(n) </strong>{ Extra Space used for storing traversal in the ans array }.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to\u00a0<strong><a href=\"https://www.linkedin.com/in/abhishek-yadav-11a116212/\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>Abhishek Yadav</strong></a></strong>\u00a0and <strong><a href=\"https://www.linkedin.com/in/priyanshi-goel-7b6a42210/\" target=\"_blank\" rel=\"noopener\" title=\"\">Priyanshi Goel</a></strong></em> <em>for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,\u00a0</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:embed {\"url\":\"https://www.youtube.com/watch?v=3Zv-s9UUrFM\\u0026list=PLgUwDviBIf0oF6QL8m22w1hIDC1vJ_BHz\\u0026index=30\",\"type\":\"video\",\"providerNameSlug\":\"youtube\",\"responsive\":true,\"className\":\"wp-embed-aspect-16-9 wp-has-aspect-ratio\"} -->\n<figure class=\"wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio\"><div class=\"wp-block-embed__wrapper\">\nhttps://www.youtube.com/watch?v=3Zv-s9UUrFM&amp;list=PLgUwDviBIf0oF6QL8m22w1hIDC1vJ_BHz&amp;index=30\n</div></figure>\n<!-- /wp:embed -->",
    "category_tag": "data-structure",
    "likes": 334,
    "preview": "Problem Statement: Given a Matrix, print the given matrix in spiral order. Examples: Example 1: Input: Matrix[][] = { { 1, 2, 3, 4 }, { 5, 6, 7, 8 }, { 9, 10, 11, 12 }, { 13, 14, 15, 16 } } Outhput..."
}