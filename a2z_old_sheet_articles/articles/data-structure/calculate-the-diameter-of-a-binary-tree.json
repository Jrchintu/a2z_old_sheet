{
    "dislikes": 68,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:09:07 GMT+0530 (India Standard Time)",
    "slug": "calculate-the-diameter-of-a-binary-tree",
    "aid": "1396",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/diameter-of-binary-tree",
    "title": "Calculate the Diameter of a Binary Tree",
    "topics": [
        {
            "topic-id": "binary-tree",
            "topic-title": "Binary Tree"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "recursion",
            "topic-title": "Recursion"
        }
    ],
    "likes": 118,
    "category_tag": "data-structure",
    "preview": "Problem Statement: Given the root of the Binary Tree, return the length of its diameter. The Diameter of a Binary Tree is the longest distance between any two nodes of that tree. This path may or m...",
    "content": "<p><strong>Problem Statement: </strong> Given the root of the Binary Tree, return the length of its diameter.\nThe Diameter of a Binary Tree is the longest distance between any two nodes of that tree. This path may or may not pass through the root.</p>\n\n\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n    <details class=\"article_example_details\">\n        <summary class=\"article_example_summary\">\n            <span><strong>\n                    Examples\n                </strong>\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"atricle_example_content\">\n            <pre class=\"wp-block-preformatted\">\n                <span><strong>Example 1:</strong></span>\n                <span><strong>Input:</strong></span>\n                <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/diameter-tree-image1-rfCH6MsT\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n                <span><strong>Output:</strong> 4</span>\n                <span><strong>Explanation: </strong>The distance between the leftmost node 4 and the rightmost node 3 is 4, since this is the longest horizontal distance of the binary tree, hence its diameter.</span>\n                <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/diameter-tree-image2-eZz0n4yE\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n                <span><strong>Example 2:</strong></span>\n                <span><strong>Input:</strong>\n                </span>\n                <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/diameter-tree-image3-UlLQBXcW\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n                <span><strong>Output :</strong> 7</span>\n                <span><strong>Explanation: </strong>The distance between the leftmost node 4 and the rightmost node 3 is 4, since this is the longest horizontal distance of the binary tree, hence its diameter.</span>\n                <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/diameter-tree-image4-PF12eYNg\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n\n            </pre>\n        </div>\n    </details>\n</div>\n\n\n<!-- This is Practice Section-->\n<div class=\"practice\">\n    <span><strong>Practice: </strong></span>\n    <div class=\"problem-buttons\">\n\n        <!-- Add Problem Link inside href -->\n        <a href=\"https://www.codingninjas.com/studio/problems/diameter-of-binary-tree_920552?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf\" target=\"_blank\" rel=\"noopener\">\n            <span>Solve Problem</span>\n            <img src=\"https://takeuforward-content-images.s3.ap-south-1.amazonaws.com/content/Group-11-5-pFOq-8ga\" alt=\"code-studio\">\n        </a>\n    </div>\n    \n</div>\n\n\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out yourself first. </em></p>\n\n\n<!-- This is Approaches Drop-Down -->\n<div class=\"dsa_article_dropdown_approachs \">\n\n    <!-- Approach - 1 Starts from here -->\n    <div id=\"brute-force-approach\">\n        <details>\n            <summary class=\"main-summary\">\n                <span>\n                    <!-- Change Name Here -->\n                   Brute Force Approach \n                </span>\n                <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                    <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                    </path>\n                </svg>\n            </summary>\n            <div class=\"common-drops\">\n                <details class=\"secondary-details\" open=\"\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Algorithm / Intuition\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <div class=\"approach-algorithm\">\n                        <p>To find the diameter of a binary tree, we can think of every node as a potential `Curving Point` of the diameter path. This Curving Point is the node along the diameter path that holds the maximum height and from where the path curves uphill and downhill. </p>\n\n                        <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/diameter-tree-image5-f6hF8Rru\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n                        <p>Hence we can see that the diameter at a specific curving point is determined by adding the height of the left subtree to the height of the right subtree and adding 1 to account for the level of the curving point.\n                        Diameter = 1 + Left Subtree Height + Right Subtree Height\n                        Therefore, we can traverse the tree recursively considering each node as a potential Curving Point and calculate the height of the left and right subtrees at each node. This will give us the diameter for the current Curving Point.\n                        Throughout the traversal, we track the maximum diameter encountered and return it as the overall diameter of the Binary Tree.\n\n                        </p>\n                        <p><strong>Algorithm:</strong></p>\n                        <p><strong>Step 1:</strong> Create a global variable `diameter` to store the maximum diameter encountered. At every node, we will take the maximum of this variable and the current diameter to update it to be the maximum amongst all.</p>\n                    \n                        <p><strong>Step 2:</strong> Define the recursive function calculateHeight that takes in a node as an argument and calculate its <a href=\"https://takeuforward.org/data-structure/maximum-depth-of-a-binary-tree/\"> height in the Binary Tree.</a></p>\n                        <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/diameter-tree-image6-Ajzm4T-5\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n                        <p><strong>Step 3:</strong> Recursively start traversing from the root, consider the current node to be a potential Curving Point and for each node:\n                        <ol><li>Recursively calculate the height of its left and right subtrees.</li><li>Compute the diameter at the current node by summing heights of the left and right subtrees.</li><li>Update the global variable diameter as the max of the current diameter and the largest diameter encountered so far.</li></ol></p>\n                        <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/diameter-tree-image7-pmRGlIg6\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n                        <p><strong>Step 4:</strong> Return the maximum diameter found during traversal as the result.</p>\n\n                    </div>\n                </details>\n                <details class=\"code-section secondary-details\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Code\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <div class=\"code-tabs\">\n                        <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n                        <button class=\"code-tab\" data-lang=\"java\">Java</button>\n                        <button class=\"code-tab\" data-lang=\"python\">Python</button>\n                        <button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n                        <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\"\n                            xmlns=\"http://www.w3.org/2000/svg\">\n                            <path\n                                d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n                            </path>\n                        </svg>\n                    </div>\n                    <div class=\"code-content\">\n                        <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n                            <pre class=\"wp-block-code\">\n                                <code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n\nusing namespace std;\n\n// Node structure for\n// the binary tree\nstruct Node {\n    int data;\n    Node* left;\n    Node* right;\n    // Constructor to initialize\n    // the node with a value\n    Node(int val) : data(val), left(nullptr), right(nullptr) {}\n};\n\nclass Solution {\npublic:\n    // Global variable to\n    // store the diameter\n    int diameter = 0;  \n\n    // Function to calculate\n    // the height of a subtree\n    int calculateHeight(Node* node) {\n        if (node == nullptr) {\n            return 0;\n        }\n\n        // Recursively calculate the\n        // height of left and right subtrees\n        int leftHeight = calculateHeight(node-&gt;left);\n        int rightHeight = calculateHeight(node-&gt;right);\n\n        // Calculate the diameter at the current\n        // node and update the global variable\n        diameter = max(diameter, leftHeight + rightHeight);\n\n        // Return the height\n        // of the current subtree\n        return 1 + max(leftHeight, rightHeight);\n    }\n\n    // Function to find the\n    // diameter of a binary tree\n    int diameterOfBinaryTree(Node* root) {\n        // Start the recursive\n        // traversal from the root\n        calculateHeight(root);\n\n        // Return the maximum diameter\n        // found during traversal\n        return diameter;\n    }\n};\n\n\n\n// Main function\nint main() {\n    // Creating a sample binary tree\n    Node* root = new Node(1);\n    root-&gt;left = new Node(2);\n    root-&gt;right = new Node(3);\n    root-&gt;left-&gt;left = new Node(4);\n    root-&gt;left-&gt;right = new Node(5);\n    root-&gt;left-&gt;right-&gt;right = new Node(6);\n    root-&gt;left-&gt;right-&gt;right-&gt;right = new Node(7);\n\n    // Creating an instance of the Solution class\n    Solution solution;\n\n    // Calculate the diameter of the binary tree\n    int diameter = solution.diameterOfBinaryTree(root);\n\n    cout &lt;&lt; &quot;The diameter of the binary tree is: &quot; &lt;&lt; diameter &lt;&lt; endl;\n\n    return 0;\n}\n                                </code>\n                            </pre>\n                        </div>\n                        <div class=\"code-block \" data-lang=\"java\">\n                            <pre class=\"wp-block-code\">\n                                <code lang=\"java\" class=\"language-java\">\n// Importing necessary packages\nimport java.util.*;\n\n// Node class for the binary tree\nclass Node {\n    int data;\n    Node left;\n    Node right;\n\n    // Constructor to initialize\n    // the node with a value\n    Node(int val) {\n        data = val;\n        left = null;\n        right = null;\n    }\n}\n\n// Solution class\nclass Solution {\n    // Global variable to\n    // store the diameter\n    int diameter = 0;\n\n    // Function to calculate\n    // the height of a subtree\n    int calculateHeight(Node node) {\n        if (node == null) {\n            return 0;\n        }\n\n        // Recursively calculate the\n        // height of left and right subtrees\n        int leftHeight = calculateHeight(node.left);\n        int rightHeight = calculateHeight(node.right);\n\n        // Calculate the diameter at the current\n        // node and update the global variable\n        diameter = Math.max(diameter, leftHeight + rightHeight);\n\n        // Return the height\n        // of the current subtree\n        return 1 + Math.max(leftHeight, rightHeight);\n    }\n\n    // Function to find the\n    // diameter of a binary tree\n    int diameterOfBinaryTree(Node root) {\n        // Start the recursive\n        // traversal from the root\n        calculateHeight(root);\n\n        // Return the maximum diameter\n        // found during traversal\n        return diameter;\n    }\n}\n\n// Main class\npublic class Main {\n    // Main method\n    public static void main(String[] args) {\n        // Creating a sample binary tree\n        Node root = new Node(1);\n        root.left = new Node(2);\n        root.right = new Node(3);\n        root.left.left = new Node(4);\n        root.left.right = new Node(5);\n        root.left.right.right = new Node(6);\n        root.left.right.right.right = new Node(7);\n\n        // Creating an instance of the Solution class\n        Solution solution = new Solution();\n\n        // Calculate the diameter of the binary tree\n        int diameter = solution.diameterOfBinaryTree(root);\n\n        System.out.println(\"The diameter of the binary tree is: \" + diameter);\n    }\n}\n\n                                </code>\n                            </pre>\n                        </div>\n                        <div class=\"code-block\" data-lang=\"python\">\n                            <pre class=\"wp-block-code\">\n                                <code lang=\"python\" class=\"language-python\">\n# Node structure for\n# the binary tree\nclass Node:\n    def __init__(self, val):\n        self.data = val\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def __init__(self):\n        # Global variable to\n        # store the diameter\n        self.diameter = 0  \n\n    # Function to calculate\n    # the height of a subtree\n    def calculateHeight(self, node):\n        if node is None:\n            return 0\n\n        # Recursively calculate the\n        # height of left and right subtrees\n        left_height = self.calculateHeight(node.left)\n        right_height = self.calculateHeight(node.right)\n\n        # Calculate the diameter at the current\n        # node and update the global variable\n        self.diameter = max(self.diameter, left_height + right_height)\n\n        # Return the height\n        # of the current subtree\n        return 1 + max(left_height, right_height)\n\n    # Function to find the\n    # diameter of a binary tree\n    def diameterOfBinaryTree(self, root):\n        # Start the recursive\n        # traversal from the root\n        self.calculateHeight(root)\n\n        # Return the maximum diameter\n        # found during traversal\n        return self.diameter\n\n# Main function\nif __name__ == \"__main__\":\n    # Creating a sample binary tree\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    root.left.left = Node(4)\n    root.left.right = Node(5)\n    root.left.right.right = Node(6)\n    root.left.right.right.right = Node(7)\n\n    # Creating an instance of the Solution class\n    solution = Solution()\n\n    # Calculate the diameter of the binary tree\n    diameter = solution.diameterOfBinaryTree(root)\n\n    print(\"The diameter of the binary tree is:\", diameter)\n\n                                </code>\n                            </pre>\n                        </div>\n                         <div class=\"code-block\" data-lang=\"javascript\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"javascript\" class=\"language-javascript\">\n// Node structure for\n// the binary tree\nclass Node {\n    constructor(val) {\n        this.data = val;\n        this.left = null;\n        this.right = null;\n    }\n}\n\nclass Solution {\n    constructor() {\n        // Global variable to\n        // store the diameter\n        this.diameter = 0;\n    }\n\n    // Function to calculate\n    // the height of a subtree\n    calculateHeight(node) {\n        if (node === null) {\n            return 0;\n        }\n\n        // Recursively calculate the\n        // height of left and right subtrees\n        const leftHeight = this.calculateHeight(node.left);\n        const rightHeight = this.calculateHeight(node.right);\n\n        // Calculate the diameter at the current\n        // node and update the global variable\n        this.diameter = Math.max(this.diameter, leftHeight + rightHeight);\n\n        // Return the height\n        // of the current subtree\n        return 1 + Math.max(leftHeight, rightHeight);\n    }\n\n    // Function to find the\n    // diameter of a binary tree\n    diameterOfBinaryTree(root) {\n        // Start the recursive\n        // traversal from the root\n        this.calculateHeight(root);\n\n        // Return the maximum diameter\n        // found during traversal\n        return this.diameter;\n    }\n}\n\n// Main function\nfunction main() {\n    // Creating a sample binary tree\n    const root = new Node(1);\n    root.left = new Node(2);\n    root.right = new Node(3);\n    root.left.left = new Node(4);\n    root.left.right = new Node(5);\n    root.left.right.right = new Node(6);\n    root.left.right.right.right = new Node(7);\n\n    // Creating an instance of the Solution class\n    const solution = new Solution();\n\n    // Calculate the diameter of the binary tree\n    const diameter = solution.diameterOfBinaryTree(root);\n\n    console.log(\"The diameter of the binary tree is: \" + diameter);\n}\n\n// Run the main function\nmain();\n\n                            </code>\n                        </pre>\n                        </div>\n                        <p>\n                           <strong>Output: </strong> The tree is not balanced.\n                        </p>\n                    </div>\n                </details>\n                <details class=\"secondary-details\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Complexity Analysis\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <p>\n                        <p><strong>Time Complexity: O(N*N)</strong> where N is the number of nodes in the Binary Tree. \n                        <ol><li>\n                        This arises as we calculate the diameter of each node and to calculate the height of its left and right children, we traverse the tree which is proportional to the number of nodes. \n                        </li>\n                        <li>\n                        Since this calculation is performed for each node in the tree, the complexity becomes: O(N x N) ~ O(N2).\n                        </li></ol></p>\n\n                        <p><strong>Space Complexity : O(1)</strong> as no additional data structures or memory is allocated.O(H): Recursive Stack Space is used to calculate the height of the tree at each node which is proportional to the height of the tree.The recursive nature of the getHeight function, which incurs space on the call stack for each recursive call until it reaches the leaf nodes or the height of the tree.</p>\n\n                    </p>\n                </details>\n            </div>\n        </details>\n    </div>\n    <!-- Approach - 1 Ends here -->\n\n\n    <!-- Approach - 2 Starts from here -->\n\n    <div id=\"optimal-approach\">\n        <details>\n            <summary class=\"main-summary\">\n                <span>\n                    Optimal Approach \n                </span>\n                <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                    <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                    </path>\n                </svg>\n            </summary>\n            <div class=\"common-drops\">\n                <details class=\"secondary-details\" open=\"\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Algorithm / Intuition\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <div class=\"approach-algorithm\">\n                        <p>The O(N2) time complexity of the previous approach can be optimised by eliminating the steps of repeatedly calculating subtree heights. The heights of the left and right subtrees are computed multiple times for each node, which leads to redundant calculations.Instead, we can compute these heights in a bottom-up manner. The Postorder method allows us to validate balance conditions efficiently during the traversal.</p>\n                        <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/diameter-tree-image9-6w6e0gAs\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n                        <p>The postorder traversal operates in a bottom-up manner, calculating subtree information before moving to the parent node. We efficiently compute the heights of both the subtrees and at the same time calculate the diameter and update the maximum diameter encountered.</p>\n                        <p><strong>Algorithm:</strong></p>\n                        <p><strong>Step 1:</strong> Initialise a variable `diameter` to store the diameter of the tree. Create a function height that takes a node and a reference to the diameter variable as input.</p>\n                        \n                    \n                        <p><strong>Step 2: Base Case:</strong> If the node is null, return 0 indicating the height of an empty tree.</p>\n                    \n                        <p><strong>Step 3: Recursive Function: </strong> <ol><li>Recursively calculate the height of the left subtree then height of the right subtree. </li><li>Set the current diameter as the sum of left subtree, right subtree + 1 for the current level.</li><li>Update the diameter with the maximum of the current diameter and the global diameter.</li></ol></p>\n                        <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/diameter-tree-image8-DaOJSsGt\" alt=\"\" class=\"wp-image-8107\" width=\"600\" height=\"1000\"/></figure>\n                    \n                        <p><strong>Step 4:</strong> After the traversal if complete, return the maximum diameter found during the traversal as the result.</p>\n                        \n\n                    </div>\n                </details>\n                <details class=\"code-section secondary-details\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Code\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <div class=\"code-tabs\">\n                        <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n                        <button class=\"code-tab\" data-lang=\"java\">Java</button>\n                        <button class=\"code-tab\" data-lang=\"python\">Python</button>\n                        <button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n                        <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\"\n                            xmlns=\"http://www.w3.org/2000/svg\">\n                            <path\n                                d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n                            </path>\n                        </svg>\n                    </div>\n                    <div class=\"code-content\">\n                        <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n                            <pre class=\"wp-block-code\">\n                                <code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n\nusing namespace std;\n\n// Node structure for the binary tree\nstruct Node {\n    int data;\n    Node* left;\n    Node* right;\n    // Constructor to initialize\n    // the node with a value\n    Node(int val) : data(val), left(nullptr), right(nullptr) {}\n};\n\nclass Solution {\npublic:\n    // Function to find the\n    // diameter of a binary tree\n    int diameterOfBinaryTree(Node* root) {\n        // Initialize the variable to\n        // store the diameter of the tree\n        int diameter = 0;\n        // Call the height function to traverse\n        // the tree and calculate diameter\n        height(root, diameter);\n        // Return the calculated diameter\n        return diameter;\n    }\n\nprivate:\n    // Function to calculate the height of\n    // the tree and update the diameter\n    int height(Node* node, int&amp; diameter) {\n        // Base case: If the node is null,\n        // return 0 indicating the\n        // height of an empty tree\n        if (!node) {\n            return 0;\n        }\n\n        // Recursively calculate the\n        // height of left and right subtrees\n        int lh = height(node-&gt;left, diameter);\n        int rh = height(node-&gt;right, diameter);\n\n        // Update the diameter with the maximum\n        // of current diameter or sum of\n        // left and right heights\n        diameter = max(diameter, lh + rh);\n\n        // Return the height of\n        // the current node's subtree\n        return 1 + max(lh, rh);\n    }\n};\n\n\n// Main function\nint main() {\n    // Creating a sample binary tree\n    Node* root = new Node(1);\n    root-&gt;left = new Node(2);\n    root-&gt;right = new Node(3);\n    root-&gt;left-&gt;left = new Node(4);\n    root-&gt;left-&gt;right = new Node(5);\n    root-&gt;left-&gt;right-&gt;right = new Node(6);\n    root-&gt;left-&gt;right-&gt;right-&gt;right = new Node(7);\n\n    // Creating an instance of the Solution class\n    Solution solution;\n\n    // Calculate the diameter of the binary tree\n    int diameter = solution.diameterOfBinaryTree(root);\n\n    cout &lt;&lt; &quot;The diameter of the binary tree is: &quot; &lt;&lt; diameter &lt;&lt; endl;\n\n    return 0;\n}\n                                </code>\n                            </pre>\n                        </div>\n                        <div class=\"code-block \" data-lang=\"java\">\n                            <pre class=\"wp-block-code\">\n                                <code lang=\"java\" class=\"language-java\">\n// Node class for the binary tree\nclass Node {\n    int data;\n    Node left;\n    Node right;\n\n    // Constructor to initialize\n    // the node with a value\n    Node(int val) {\n        data = val;\n        left = null;\n        right = null;\n    }\n}\n\nclass Solution {\n    // Function to find the\n    // diameter of a binary tree\n    public int diameterOfBinaryTree(Node root) {\n        // Initialize the variable to\n        // store the diameter of the tree\n        int[] diameter = new int[1];\n        diameter[0] = 0;\n        // Call the height function to traverse\n        // the tree and calculate diameter\n        height(root, diameter);\n        // Return the calculated diameter\n        return diameter[0];\n    }\n\n    // Function to calculate the height of\n    // the tree and update the diameter\n    private int height(Node node, int[] diameter) {\n        // Base case: If the node is null,\n        // return 0 indicating the\n        // height of an empty tree\n        if (node == null) {\n            return 0;\n        }\n\n        // Recursively calculate the\n        // height of left and right subtrees\n        int[] lh = new int[1];\n        int[] rh = new int[1];\n        lh[0] = height(node.left, diameter);\n        rh[0] = height(node.right, diameter);\n\n        // Update the diameter with the maximum\n        // of current diameter or sum of\n        // left and right heights\n        diameter[0] = Math.max(diameter[0], lh[0] + rh[0]);\n\n        // Return the height of\n        // the current node's subtree\n        return 1 + Math.max(lh[0], rh[0]);\n    }\n}\n\n// Main class\npublic class Main {\n    // Main function\n    public static void main(String[] args) {\n        // Creating a sample binary tree\n        Node root = new Node(1);\n        root.left = new Node(2);\n        root.right = new Node(3);\n        root.left.left = new Node(4);\n        root.left.right = new Node(5);\n        root.left.right.right = new Node(6);\n        root.left.right.right.right = new Node(7);\n\n        // Creating an instance of the Solution class\n        Solution solution = new Solution();\n\n        // Calculate the diameter of the binary tree\n        int diameter = solution.diameterOfBinaryTree(root);\n\n        System.out.println(&quot;The diameter of the binary tree is: &quot; + diameter);\n    }\n}                                  \n\n                                </code>\n                            </pre>\n                        </div>\n                        <div class=\"code-block\" data-lang=\"python\">\n                            <pre class=\"wp-block-code\">\n                                <code lang=\"python\" class=\"language-python\">\n                     \n# Node class for the binary tree\nclass Node:\n    def __init__(self, val):\n        self.data = val\n        self.left = None\n        self.right = None\n\n# Solution class to find the diameter of the binary tree\nclass Solution:\n    def diameterOfBinaryTree(self, root):\n        # Initialize the variable to store the diameter of the tree\n        diameter = [0]\n        # Call the height function to traverse the tree and calculate diameter\n        self.height(root, diameter)\n        # Return the calculated diameter\n        return diameter[0]\n\n    # Function to calculate the height of the tree and update the diameter\n    def height(self, node, diameter):\n        # Base case: If the node is None, return 0 indicating the height of an empty tree\n        if not node:\n            return 0\n\n        # Recursively calculate the height of left and right subtrees\n        lh = self.height(node.left, diameter)\n        rh = self.height(node.right, diameter)\n\n        # Update the diameter with the maximum of current diameter or sum of left and right heights\n        diameter[0] = max(diameter[0], lh + rh)\n\n        # Return the height of the current node's subtree\n        return 1 + max(lh, rh)\n\n\n# Main function\nif __name__ == &quot;__main__&quot;:\n    # Creating a sample binary tree\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    root.left.left = Node(4)\n    root.left.right = Node(5)\n    root.left.right.right = Node(6)\n    root.left.right.right.right = Node(7)\n\n    # Creating an instance of the Solution class\n    solution = Solution()\n\n    # Calculate the diameter of the binary tree\n    diameter = solution.diameterOfBinaryTree(root)\n\n    print(&quot;The diameter of the binary tree is:&quot;, diameter)\n                                </code>\n                            </pre>\n                        </div>\n                         <div class=\"code-block\" data-lang=\"javascript\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"javascript\" class=\"language-javascript\">\n// Node structure for the binary tree\nclass Node {\n    constructor(val) {\n        this.data = val;\n        this.left = null;\n        this.right = null;\n    }\n}\n\nclass Solution {\n    // Function to find the\n    // diameter of a binary tree\n    diameterOfBinaryTree(root) {\n        // Initialize the variable to\n        // store the diameter of the tree\n        let diameter = 0;\n        // Call the height function to traverse\n        // the tree and calculate diameter\n        this.height(root, diameter);\n        // Return the calculated diameter\n        return diameter;\n    }\n\n    // Function to calculate the height of\n    // the tree and update the diameter\n    height(node, diameter) {\n        // Base case: If the node is null,\n        // return 0 indicating the\n        // height of an empty tree\n        if (!node) {\n            return 0;\n        }\n\n        // Recursively calculate the\n        // height of left and right subtrees\n        let lh = this.height(node.left, diameter);\n        let rh = this.height(node.right, diameter);\n\n        // Update the diameter with the maximum\n        // of current diameter or sum of\n        // left and right heights\n        diameter = Math.max(diameter, lh + rh);\n\n        // Return the height of\n        // the current node's subtree\n        return 1 + Math.max(lh, rh);\n    }\n}\n\n// Creating a sample binary tree\nlet root = new Node(1);\nroot.left = new Node(2);\nroot.right = new Node(3);\nroot.left.left = new Node(4);\nroot.left.right = new Node(5);\nroot.left.right.right = new Node(6);\nroot.left.right.right.right = new Node(7);\n\n// Creating an instance of the Solution class\nlet solution = new Solution();\n\n// Calculate the diameter of the binary tree\nlet diameter = solution.diameterOfBinaryTree(root);\n\nconsole.log(\"The diameter of the binary tree is: \" + diameter);\n                    \n                            </code>\n                        </pre>\n                        </div>\n                        <p>\n                            <strong>Output:</strong> The diameter of the binary tree is: 5\n                        </p>\n                    </div>\n                </details>\n                <details class=\"secondary-details\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Complexity Analysis\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <p>\n                        <p><strong>Time Complexity: O(N)</strong> where N is the number of nodes in the Binary Tree. This complexity arises from visiting each node exactly once during the postorder traversal.</p>\n                        <p><strong>Space Complexity : O(1)</strong> as no additional space or data structures is created that is proportional to the input size of the tree. O(H) Recursive Stack Auxiliary Space : The recursion stack space is determined by the maximum depth of the recursion, which is the height of the binary tree denoted as H. In the balanced case it is log2N and in the worst case its N.</p>\n\n\n                    </p>\n                </details>\n            </div>\n        </details>\n    </div>\n</div>\n\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n    <details>\n        <summary class=\"main-summary\">\n            <span>\n                Video Explanation\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"yt-video-wrapper\">\n            <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Rezetez59Nk?si=_RAQTcLlRsYG9jsf\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n        </div>\n    </details>\n</div>\n\n<script src=\"https://takeuforward.org/UXApproachDropDowns/2ApproachJSScript.js\"></script>\n\n<blockquote class=\"wp-block-quote\">\n    Special thanks to <strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268\">Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,<strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\"> please check out this article</a></strong>\n</blockquote>\n\n\n<script>\n\n    const codeSections = document.querySelectorAll('.code-section');\n\n    // Get last selected language from localStorage or set default value\n    let lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp';\n\n    codeSections.forEach((section, sectionIndex) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n        const copyBtn = section.querySelector('.copy-btn');\n\n        codeTabs.forEach((tab) => {\n            tab.addEventListener('click', () => {\n                codeTabs.forEach((t) => {\n                    t.classList.remove('dsa_article_code_active');\n                });\n                tab.classList.add('dsa_article_code_active');\n\n                const lang = tab.dataset.lang;\n                const activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                codeBlocks.forEach((block) => {\n                    if (block === activeBlock) {\n                        block.classList.add('dsa_article_code_active');\n                    } else {\n                        block.classList.remove('dsa_article_code_active');\n                    }\n                });\n\n                // Update last selected language for all sections and store in localStorage\n                lastSelectedLanguage = lang;\n                localStorage.setItem('lastSelectedLanguage', lang);\n                codeSections.forEach((otherSection, otherIndex) => {\n                    if (otherIndex !== sectionIndex) {\n                        const otherTabs = otherSection.querySelectorAll('.code-tab');\n                        otherTabs.forEach((otherTab) => {\n                            if (otherTab.dataset.lang === lang) {\n                                otherTab.classList.add('dsa_article_code_active');\n                            } else {\n                                otherTab.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                        const otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                        const otherCodeBlocks = otherSection.querySelectorAll('.code-block');\n                        otherCodeBlocks.forEach((block) => {\n                            if (block === otherActiveBlock) {\n                                block.classList.add('dsa_article_code_active');\n                            } else {\n                                block.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                    }\n                });\n            });\n        });\n\n        // Handle copy button click event\n        copyBtn.addEventListener('click', () => {\n            const activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\n            navigator.clipboard.writeText(activeBlock.innerText);\n            copyBtn.classList.add('dsa_article_code_active');\n            setTimeout(() => {\n                copyBtn.classList.remove('dsa_article_code_active');\n            }, 1000);\n        });\n    });\n\n    // Set initial state of the tabs\n    codeSections.forEach((section) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n\n        codeTabs.forEach((tab) => {\n            if (tab.dataset.lang === lastSelectedLanguage) {\n                tab.classList.add('dsa_article_code_active');\n            } else {\n                tab.classList.remove('dsa_article_code_active');\n            }\n        });\n\n        codeBlocks.forEach((block) => {\n            if (block.dataset.lang === lastSelectedLanguage) {\n                block.classList.add('dsa_article_code_active');\n            } else {\n                block.classList.remove('dsa_article_code_active');\n            }\n        });\n    });\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>"
}