{
    "dislikes": 18,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:09:34 GMT+0530 (India Standard Time)",
    "slug": "maximum-product-subarray-in-an-array",
    "aid": "1527",
    "title": "Maximum Product Subarray in an Array",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/maximum-product-subarray-in-an-array",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        }
    ],
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement: </strong>Given an array that contains both negative and positive integers, find the maximum product subarray.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n<details class=\"article_example_details\">\n<summary class=\"article_example_summary\">\n<span><strong>\nExamples\n</strong>\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"atricle_example_content\">\n<pre class=\"wp-block-preformatted\"><!-- Insert New Examples Here -->\n<pre class=\"wp-block-preformatted\"><strong>Example 1:</strong>\n<strong>Input:</strong>\n Nums = [1,2,3,4,5,0]\n<strong>Output:</strong>\n 120\n<strong>Explanation:</strong>\n In the given array, we can see 1\u00d72\u00d73\u00d74\u00d75 gives maximum product value.\n\n\n<strong>Example 2:</strong>\n<strong>Input:\n</strong> Nums = [1,2,-3,0,-4,-5]\n<strong>Output:</strong>\n 20\n<strong>Explanation:</strong>\n In the given array, we can see (-4)\u00d7(-5) gives maximum product value.\n</pre>\n</pre>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Practice Section-->\n<div class=\"practice\">\n<span><strong>Practice: </strong></span>\n<div class=\"problem-buttons\">\n\n<!-- Add Problem Link inside href -->\n<a href=\"https://bit.ly/3I7SrmM\" target=\"_blank\" rel=\"noopener\">\n<span>Solve Problem</span>\n<img src=\"https://static.takeuforward.org/wp/uploads/2023/04/Group-11-5.png\" alt=\"code-studio\">\n</a>\n</div>\n</div>\n\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\nyourself first. </em></p>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<div class=\"horizontal_navbar_dsa_article\">\n<div class=\"grid_container_four\">\n<a href=\"#brute-force-approach\" class=\"four-boxes box-a\">\nBrute Force Approach\n</a>\n<a href=\"#better-approach\" class=\"four-boxes box-a\">\nBetter Approach\n</a>\n<a href=\"#optimal-approach-1\" class=\"four-boxes box-c\">\nOptimal Approach 1\n</a>\n<a href=\"#optimal-approach-2\" class=\"four-boxes box-c-2\">\nOptimal Approach 2\n</a>\n<a href=\"#dsa_article_video_explanation\" class=\"three-boxes box-d\">\n<svg width=\"26\" height=\"26\" viewBox=\"0 0 20 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M8 10L13.19 7L8 4V10ZM19.56 2.17C19.69 2.64 19.78 3.27 19.84 4.07C19.91 4.87 19.94 5.56 19.94 6.16L20 7C20 9.19 19.84 10.8 19.56 11.83C19.31 12.73 18.73 13.31 17.83 13.56C17.36 13.69 16.5 13.78 15.18 13.84C13.88 13.91 12.69 13.94 11.59 13.94L10 14C5.81 14 3.2 13.84 2.17 13.56C1.27 13.31 0.69 12.73 0.44 11.83C0.31 11.36 0.22 10.73 0.16 9.93C0.0900001 9.13 0.0599999 8.44 0.0599999 7.84L0 7C0 4.81 0.16 3.2 0.44 2.17C0.69 1.27 1.27 0.69 2.17 0.44C2.64 0.31 3.5 0.22 4.82 0.16C6.12 0.0899998 7.31 0.0599999 8.41 0.0599999L10 0C14.19 0 16.8 0.16 17.83 0.44C18.73 0.69 19.31 1.27 19.56 2.17Z\" fill=\"red\"></path>\n</svg>\n\n</a>\n<div class=\"box-e tooltip\">\n<svg viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M12.842 9.25L11.9577 10.17C11.2502 10.89 10.8081 11.5 10.8081 13H8.84297V12.5C8.84297 11.39 9.28511 10.39 9.99255 9.67L11.2109 8.41C11.5745 8.05 11.7906 7.55 11.7906 7C11.7906 6.46957 11.5836 5.96086 11.2151 5.58579C10.8465 5.21071 10.3467 5 9.82552 5C9.30434 5 8.80451 5.21071 8.43598 5.58579C8.06745 5.96086 7.86041 6.46957 7.86041 7H5.89531C5.89531 5.93913 6.30938 4.92172 7.04644 4.17157C7.7835 3.42143 8.78316 3 9.82552 3C10.8679 3 11.8675 3.42143 12.6046 4.17157C13.3417 4.92172 13.7557 5.93913 13.7557 7C13.7543 7.84324 13.4259 8.65183 12.842 9.25ZM10.8081 17H8.84297V15H10.8081M9.82552 0C8.53521 0 7.25754 0.258658 6.06545 0.761205C4.87337 1.26375 3.79021 2.00035 2.87783 2.92893C1.03519 4.8043 0 7.34784 0 10C0 12.6522 1.03519 15.1957 2.87783 17.0711C3.79021 17.9997 4.87337 18.7362 6.06545 19.2388C7.25754 19.7413 8.53521 20 9.82552 20C12.4314 20 14.9306 18.9464 16.7732 17.0711C18.6158 15.1957 19.651 12.6522 19.651 10C19.651 4.47 15.2296 0 9.82552 0Z\" fill=\"black\"></path>\n</svg>\n<div class=\"bottom\">\n<p>Expand any one approach by clicking the given options in the bar. Clicking one approach on bar,\ncloses all other expands. You can manually expand more than one approach at a time</p>\n<i></i>\n</div>\n</div>\n</div>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<div class=\"dsa_article_dropdown_approachs \">\n\n<!-- Brute Force Approach Starts from here -->\n<div id=\"brute-force-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nBrute Force Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n<h3><strong>Approach:</strong></h3>\n<p>Find all possible subarrays of the given array. Find the product of each subarray. Return the maximum of all them.</p>\n<p>Following are the steps for the approach:-</p>\n<ul><li>Run a loop on the array to choose the start point for each subarray.</li><li>Run a nested loop to get the end point for each subarray.</li><li>Multiply elements present in the chosen range.</li></ul>\n<p><strong>Dry Run:</strong></p>\n<p><strong><img width=\"461\" height=\"260\" src=\"https://lh4.googleusercontent.com/FV3VuPiZsCm6YT8F9VK-KKdjMO0Yz0205NAFJihWyuZLyVMy1Yts_ql2YodgZxZ_yMJBrAJCnWlBDZyx_vCbjuG_o-7-2vSmPNoL0YuOUnEUDFgogQi8dFxOkL7JLLk8MvlX85Ih\"></strong></p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n\n<!-- Insert C++ code of Brute Force Here -->\n#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint maxProductSubArray(vector&lt;int&gt;&amp; nums) {\n    int result = INT_MIN;\n    for(int i=0;i&lt;nums.size()-1;i++) {\n        for(int j=i+1;j&lt;nums.size();j++) {\n            int prod = 1;\n            for(int k=i;k&lt;=j;k++) \n                prod *= nums[k];\n            result = max(result,prod);    \n        }\n    }\n    return result;\n}\n\nint main() {\n    vector&lt;int&gt; nums = {1,2,-3,0,-4,-5};\n    cout&lt;&lt;\"The maximum product subarray: \"&lt;&lt;maxProductSubArray(nums);\n    return 0;\n}\n\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\n<!-- Insert Java code of Brute Force Here -->\nimport java.util.*;\npublic class Main\n{\n\tstatic int maxProductSubArray(int arr[]) {\n\t    int result = Integer.MIN_VALUE;\n\t    for(int i=0;i&lt;arr.length-1;i++) \n\t        for(int j=i+1;j&lt;arr.length;j++) {\n\t            int prod = 1;\n\t            for(int k=i;k&lt;=j;k++) \n\t                prod *= arr[k];\n\t            result = Math.max(result,prod);\n\t        }\n\t   return result;     \n\t}\n\tpublic static void main(String[] args) {\n\t\tint nums[] = {1,2,-3,0,-4,-5};\n\t\tint answer = maxProductSubArray(nums);\n\t\tSystem.out.print(\"The maximum product subarray is: \"+answer);\n\t}\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\n<!-- Insert Python code of Brute Force Here -->\ndef maxProductSubArray(nums):\n    result = float('-inf')\n    for i in range(len(nums) - 1):\n        for j in range(i + 1, len(nums)):\n            prod = 1\n            for k in range(i, j + 1):\n                prod *= nums[k]\n            result = max(result, prod)\n    return result\n\nif __name__ == \"__main__\":\n    nums = [1, 2, -3, 0, -4, -5]\n    print(\"The maximum product subarray:\", maxProductSubArray(nums))\n\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\n<!-- Insert Javascript code of Brute Force Here -->\nfunction maxProductSubArray(nums) {\n    let result = Number.MIN_SAFE_INTEGER;\n    for (let i = 0; i &lt; nums.length - 1; i++) {\n        for (let j = i + 1; j &lt; nums.length; j++) {\n            let prod = 1;\n            for (let k = i; k &lt;= j; k++) {\n                prod *= nums[k];\n            }\n            result = Math.max(result, prod);\n        }\n    }\n    return result;\n}\n\nlet nums = [1, 2, -3, 0, -4, -5];\nconsole.log(\"The maximum product subarray: \" + maxProductSubArray(nums));\n\n</code>\n</pre>\n</div>\n\n<p>\n<!-- Insert Output of Brute Force Here -->\n<strong>Output:</strong> The maximum product subarray: 20\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n<!-- Insert Time and Space Complexity of Brute Force Here -->\n</p><p><strong>Time Complexity:</strong> O(N<sup>3</sup>)</p>\n<p><em>Reason</em>: We are using 3 nested loops for finding all possible subarrays and their product.</p>\n<p><strong>Space Complexity:</strong> O(1)</p>\n<p>Reason: No extra data structure was used</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Brute Force Approach Ends here -->\n\n\n<!-- Better Approach Starts from here -->\n<div id=\"better-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nBetter Approach \n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition For Better Approach Here -->\n<h3><strong>Approach:</strong></h3>\n<p>We can optimize the brute force by making 3 nested iterations to 2 nested iterations</p>\n<p>Following are the steps for the approach:</p>\n<ul><li>Run a loop to find the start of the subarrays.</li><li>Run another nested loop</li><li>Multiply each element and store the maximum value of all the subarray.</li></ul>\n<p><strong>Dry Run:</strong></p>\n<p><strong><img width=\"473\" height=\"266\" src=\"https://lh3.googleusercontent.com/9V08c6p3XSZ3dnUJGvY6ApJxz8xK8JemCHXThw6LQ330qODtXHhlkEiqlP1onrt7BfzEsqJWqxYo4hN4GVBzfMWl1LZkuR__i032SaDwdvl5x_ZZkidHXLM_4-I--IKm3OcXb62t\"></strong></p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n\n<!-- Insert C++ Code of Better Approach Here -->\n#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint maxProductSubArray(vector&lt;int&gt;&amp; nums) {\n    int result = nums[0];\n    for(int i=0;i&lt;nums.size()-1;i++) {\n        int p = nums[i];\n        for(int j=i+1;j&lt;nums.size();j++) {\n           result = max(result,p);\n           p *= nums[j];\n        }\n        result = max(result,p);//manages (n-1)th term \n    }\n    return result;\n}\n\nint main() {\n    vector&lt;int&gt; nums = {1,2,-3,0,-4,-5};\n    cout&lt;&lt;\"The maximum product subarray: \"&lt;&lt;maxProductSubArray(nums);\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\n<!-- Insert Java Code of Better Approach Here -->\nimport java.util.*;\npublic class Main\n{\n\tstatic int maxProductSubArray(int arr[]) {\n\t    int result = arr[0];\n\t    for(int i=0;i&lt;arr.length-1;i++) {\n\t        int p = arr[i];\n\t        for(int j=i+1;j&lt;arr.length;j++) {\n\t            result = Math.max(result,p);\n\t            p *= arr[j];\n\t        }\n\t        result = Math.max(result,p);\n\t    }\n\t   return result;     \n\t}\n\tpublic static void main(String[] args) {\n\t\tint nums[] = {1,2,-3,0,-4,-5};\n\t\tint answer = maxProductSubArray(nums);\n\t\tSystem.out.print(\"The maximum product subarray is: \"+answer);\n\t}\n}\n\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\n<!-- Insert Python Code of Better Approach Here -->\ndef maxProductSubArray(nums):\n    result = nums[0]\n    for i in range(len(nums) - 1):\n        p = nums[i]\n        for j in range(i + 1, len(nums)):\n            result = max(result, p)\n            p *= nums[j]\n        result = max(result, p)  # manages (n-1)th term\n    return result\n\nif __name__ == \"__main__\":\n    nums = [1, 2, -3, 0, -4, -5]\n    print(\"The maximum product subarray:\", maxProductSubArray(nums))\n\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\n<!-- Insert Javascript code of Brute Force Here -->\nfunction maxProductSubArray(nums) {\n    let result = nums[0];\n    for (let i = 0; i &lt; nums.length - 1; i++) {\n        let p = nums[i];\n        for (let j = i + 1; j &lt; nums.length; j++) {\n            result = Math.max(result, p);\n            p *= nums[j];\n        }\n        result = Math.max(result, p); // manages (n-1)th term\n    }\n    return result;\n}\n\nlet nums = [1, 2, -3, 0, -4, -5];\nconsole.log(\"The maximum product subarray: \" + maxProductSubArray(nums));\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Better Approach Here -->\n<strong>Output:</strong> The maximum product subarray: 20\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Better Approach Here -->\n</p><p><strong>Time Complexity:</strong> O(N<sup>2</sup>)</p>\n<p><em>Reason</em>: We are using two nested loops</p>\n<p><strong>Space Complexity:</strong> O(1)</p>\n<p><em>Reason</em>: No extra data structures are used for computation</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Better Approach Ends from here -->\n\n\n<!-- Optimal Approach - 1 Starts from here -->\n<div id=\"optimal-approach-1\">\n<details>\n<summary class=\"main-summary\">\n<span>\nOptimal Approach 1:\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm of Better Approach - 1 Here -->\n<p>We will optimize the solution through some observations.</p>\n<p><strong>Observations:</strong></p>\n<ol><li><strong>If the given array only contains positive numbers: </strong>If this is the case, we can confidently say that the maximum product subarray will be the entire array itself.</li><li><strong>If the given also array contains an even number of negative numbers: </strong>As we know, an even number of negative numbers always results in a positive number. So, also, in this case, the answer will be the entire array itself.</li></ol>\n<p><strong>If the given array also contains an odd number of negative numbers: </strong>Now, an odd number of negative numbers when multiplied result in a negative number. Removal of 1 negative number out of the odd number of negative numbers will leave us with an even number of negatives. Hence the idea is to remove 1 negative number from the result. Now we need to decide which 1 negative number to remove such that the remaining subarray yields the maximum product.</p>\n<p>For example, the given array is: {3, 2, -1, 4, -6, 3, -2, 6}<br>We will try to remove each possible negative number and check in which case the subarray yields the maximum product.</p>\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/08/Screenshot-2023-08-05-174139.png\" alt=\"\" class=\"wp-image-11762\"></figure>\n<ol><li>Upon observation, we notice that each chosen negative number divides the array into two parts.</li><li>The answer will either be the prefix or the suffix of that negative number.</li><li>To find the answer, we will check all possible prefix subarrays (starting from index 0) and all possible suffix subarrays (starting from index n-1).</li><li>The maximum product obtained from these prefix and suffix subarrays will be our final answer.</li><li><strong>If the array contains 0\u2019s as well: </strong>We should never consider 0\u2019s in our answer(<em>as considering 0 will always result in 0</em>) and we want to obtain the maximum possible product. So, we will divide the given array based on the location of the 0\u2019s and apply the logic of case 3 for each subarray.<br><br>For example, the given array is: {-2, 3, 4, -1, 0, -2, 3, 1, 4, 0, 4, 6, -1, 4}.<br><ol><li>In this case, we will divide the array into 3 different subarrays based on the 0\u2019s locations. So, the subarrays will be {-2, 3, 4, -1}, {-2, 3, 1, 4}, and {4, 6, -1, 4}.</li><li>In these 3 subarrays, we will apply the logic discussed in case 3. We will get 3 different answers for 3 different subarrays.</li><li>The maximum one among those 3 answers will be the final answer.</li></ol></li></ol>\n<p><strong>Summary: </strong>In real-life problems, we will not separate out the cases as we did in the observations. Instead, we can directly apply the logic discussed in the 4th observation to any given subarray, and it will automatically handle all the other cases.</p>\n<h3><strong>Algorithm:&nbsp;</strong></h3>\n<ol><li>We will first declare 2 variables i.e. \u2018pre\u2019(<em>stores the product of the prefix subarray</em>) and \u2018suff\u2019(<em>stores the product of the suffix subarray</em>). They both will be initialized with 1(<em>as we want to store the product</em>).</li><li>Now, we will use a loop(say <strong>i</strong>) that will run from 0 to n-1.</li><li>We have to check 2 cases to handle the presence of 0:<ol><li><strong>If pre = 0: </strong>This means the previous element was 0. So, we will consider the current element as a part of the new subarray. So, we will set \u2018pre\u2019 to 1.</li><li><strong>If suff = 0: </strong>This means the previous element was 0 in the suffix. So, we will consider the current element as a part of the new suffix subarray. So, we will set \u2018suff\u2019 to 1.</li></ol></li><li>Next, we will multiply the elements from the starting index with \u2018pre\u2019 and the elements from the end with \u2018suff\u2019. To incorporate both cases inside a single loop, we will do the following:<ol><li>We will multiply arr[i] with \u2018pre\u2019 i.e. pre *= arr[i].</li><li>We will multiply arr[n-i-1] with \u2018suff\u2019 i.e. suff *= arr[n-i-1].</li></ol></li><li>After each iteration, we will consider the maximum among the previous answer, \u2018pre\u2019 and \u2018suff\u2019 i.e. max(previous_answer, pre, suff).</li><li>Finally, we will return the maximum product.</li></ol>\n<p><strong>Note: </strong><em>For a better understanding of intuition, please watch the </em><a href=\"https://youtu.be/hnswaLJvr6g\"><em>video</em></a><em> at the bottom of the page.</em></p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n\n<!-- Insert C++ code of Optimal Approach - 1 Here-->\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint maxProductSubArray(vector&lt;int&gt; &amp;arr) {\n    int n = arr.size(); //size of array.\n\n    int pre = 1, suff = 1;\n    int ans = INT_MIN;\n    for (int i = 0; i &lt; n; i++) {\n        if (pre == 0) pre = 1;\n        if (suff == 0) suff = 1;\n        pre *= arr[i];\n        suff *= arr[n - i - 1];\n        ans = max(ans, max(pre, suff));\n    }\n    return ans;\n}\n\nint main()\n{\n    vector&lt;int&gt; arr = {1, 2, -3, 0, -4, -5};\n    cout &lt;&lt; \"The maximum product subarray is: \"\n         &lt;&lt; maxProductSubArray(arr) &lt;&lt; \"\\n\";\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\n<!-- Insert Java code of Optimal Approach - 1 Here -->\nimport java.util.*;\n\npublic class tUf {\n    public static int maxProductSubArray(int[] arr) {\n        int n = arr.length; //size of array.\n\n        int pre = 1, suff = 1;\n        int ans = Integer.MIN_VALUE;\n        for (int i = 0; i &lt; n; i++) {\n            if (pre == 0) pre = 1;\n            if (suff == 0) suff = 1;\n            pre *= arr[i];\n            suff *= arr[n - i - 1];\n            ans = Math.max(ans, Math.max(pre, suff));\n        }\n        return ans;\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {1, 2, -3, 0, -4, -5};\n        int answer = maxProductSubArray(arr);\n        System.out.println(\"The maximum product subarray is: \" + answer);\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\n<!-- Insert Python code of Optimal Approach - 1 Here -->\ndef maxProductSubArray(arr):\n    n = len(arr) # size of array.\n\n    pre, suff = 1, 1\n    ans = float('-inf')\n    for i in range(n):\n        if pre == 0:\n            pre = 1\n        if suff == 0:\n            suff = 1\n        pre *= arr[i]\n        suff *= arr[n - i - 1]\n        ans = max(ans, max(pre, suff))\n    return ans\n\narr = [1, 2, -3, 0, -4, -5]\nprint(\"The maximum product subarray is:\", maxProductSubArray(arr))\n\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\n<!-- Insert Javascript code of Brute Force Here -->\nfunction maxProductSubArray(arr) {\n    let n = arr.length; // size of array.\n\n    let pre = 1, suff = 1;\n    let ans = Number.MIN_SAFE_INTEGER;\n    for (let i = 0; i &lt; n; i++) {\n        if (pre === 0) pre = 1;\n        if (suff === 0) suff = 1;\n        pre *= arr[i];\n        suff *= arr[n - i - 1];\n        ans = Math.max(ans, Math.max(pre, suff));\n    }\n    return ans;\n}\n\nlet arr = [1, 2, -3, 0, -4, -5];\nconsole.log(\"The maximum product subarray is: \" + maxProductSubArray(arr));\n\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Optimal Apporach - 1 Here -->\n<strong>Output:</strong> The maximum product subarray: 20\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Optimal Approach -1 -->\n</p><p><strong>Time Complexity: </strong>O(N), N = size of the given array.<br><strong>Reason: </strong>We are using a single loop that runs for N times.</p>\n<p><strong>Space Complexity: </strong>O(1) as No extra data structures are used for computation.</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Optimal Approach - 1 ends from here -->\n\n<!-- Optimal Approach - 2 Starts from here -->\n<div id=\"optimal-approach-2\">\n<details>\n<summary class=\"main-summary\">\n<span>\nOptimal Approach 2\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm of Better Approach - 2 Here -->\n<h3><strong>Approach:</strong></h3>\n<p>The following approach is motivated by Kandane\u2019s algorithm. To know Kadane\u2019s Algorithm follow <strong><a href=\"https://takeuforward.org/data-structure/kadanes-algorithm-maximum-subarray-sum-in-an-array/\" target=\"_blank\" rel=\"noreferrer noopener\">Kadane's Algorithm</a></strong></p>\n<p>The pick point for this problem is that we can get the maximum product from the product of two negative numbers too.</p>\n<p>Following are the steps for the approach:</p>\n<ul><li>Initially store 0th index value in prod1, prod2 and result. </li><li>Traverse the array from 1st index.&nbsp;</li><li>For each element, update prod1 and prod2.</li><li>Prod1 is maximum of current element, product of current element and prod1, product of current element and prod2</li><li>Prod2 is minimum of current element, product of current element and prod1, product of current element and prod2</li><li>Return maximum of result and prod1</li></ul>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n\n<!-- Insert C++ code of Optimal Approach - 2 Here-->\n#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint maxProductSubArray(vector&lt;int&gt;&amp; nums) {\n    int prod1 = nums[0],prod2 = nums[0],result = nums[0];\n    \n    for(int i=1;i&lt;nums.size();i++) {\n        int temp = max({nums[i],prod1*nums[i],prod2*nums[i]});\n        prod2 = min({nums[i],prod1*nums[i],prod2*nums[i]});\n        prod1 = temp;\n        \n        result = max(result,prod1);\n    }\n    \n    return result;\n}\n\nint main() {\n    vector&lt;int&gt; nums = {1,2,-3,0,-4,-5};\n    cout&lt;&lt;\"The maximum product subarray: \"&lt;&lt;maxProductSubArray(nums);\n    return 0;\n}\n\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\n<!-- Insert Java code of Optimal Approach - 2 Here -->\nimport java.util.*;\npublic class Main\n{\n\tstatic int maxProductSubArray(int arr[]) {\n    int prod1 = arr[0],prod2 = arr[0],result = arr[0];\n    \n    for(int i=1;i&lt;arr.length;i++) {\n        int temp = Math.max(arr[i],Math.max(prod1*arr[i],prod2*arr[i]));\n        prod2 = Math.min(arr[i],Math.min(prod1*arr[i],prod2*arr[i]));\n        prod1 = temp;\n        \n        result = Math.max(result,prod1);\n    }\n    \n    return result;\n\t}\n\tpublic static void main(String[] args) {\n\t\tint nums[] = {1,2,-3,0,-4,-5};\n\t\tint answer = maxProductSubArray(nums);\n\t\tSystem.out.print(\"The maximum product subarray is: \"+answer);\n\t}\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\n<!-- Insert Python code of Optimal Approach - 2 Here -->\ndef maxProductSubArray(nums):\n    prod1 = nums[0]\n    prod2 = nums[0]\n    result = nums[0]\n\n    for i in range(1, len(nums)):\n        temp = max(nums[i], prod1 * nums[i], prod2 * nums[i])\n        prod2 = min(nums[i], prod1 * nums[i], prod2 * nums[i])\n        prod1 = temp\n\n        result = max(result, prod1)\n\n    return result\n\nif __name__ == \"__main__\":\n    nums = [1, 2, -3, 0, -4, -5]\n    print(\"The maximum product subarray:\", maxProductSubArray(nums))\n\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\n<!-- Insert Javascript code of Brute Force Here -->\nfunction maxProductSubArray(nums) {\n    let prod1 = nums[0], prod2 = nums[0], result = nums[0];\n\n    for (let i = 1; i &lt; nums.length; i++) {\n        let temp = Math.max(nums[i], prod1 * nums[i], prod2 * nums[i]);\n        prod2 = Math.min(nums[i], prod1 * nums[i], prod2 * nums[i]);\n        prod1 = temp;\n\n        result = Math.max(result, prod1);\n    }\n\n    return result;\n}\n\nlet nums = [1, 2, -3, 0, -4, -5];\nconsole.log(\"The maximum product subarray: \" + maxProductSubArray(nums));\n\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Optimal Apporach - 2 Here -->\n<strong>Output:</strong> The maximum product subarray: 20\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Optimal Approach - 2 -->\n</p><p><strong>Time Complexity:</strong> O(N)</p>\n<p><em>Reason</em>: A single iteration is used.</p>\n<p><strong>Space Complexity:</strong> O(1)</p>\n<p><em>Reason</em>: No extra data structure is used for computation</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Optimal Approach - 2 ends from here -->\n\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n<details>\n<summary class=\"main-summary\">\n<span>\nVideo Explanation\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"yt-video-wrapper\">\n\n<!-- Insert iframe embed Link of Youtube Video-->\n<iframe class=\"lazy-loaded\" loading=\"lazy\" title=\"Maximum Product Subarray\" width=\"810\" height=\"456\" data-lazy-type=\"iframe\" data-src=\"https://www.youtube.com/embed/hnswaLJvr6g\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\" src=\"https://www.youtube.com/embed/hnswaLJvr6g?feature=oembed\"></iframe><noscript>\n<iframe loading=\"lazy\" title=\"Maximum Product Subarray\" width=\"810\" height=\"456\" src=\"https://www.youtube.com/embed/hnswaLJvr6g\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe></noscript>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script>\n\nconst codeSections = document.querySelectorAll('.code-section');\n\n// Get last selected language from localStorage or set default value\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\n// Update last selected language for all sections and store in localStorage\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\n// Handle copy button click event\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\n// Set initial state of the tabs\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<script>\nconst codeSections = document.querySelectorAll('.code-section');\n\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script src=\"https://takeuforward.org/UXApproachDropDowns/4ApproachJSScript.js\"></script>\n<!-- /wp:html -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em><em>Special thanks to\u00a0<strong><a href=\"https://www.linkedin.com/in/dewanshi-paul-2515091b9\" target=\"_blank\" rel=\"noreferrer noopener\">Dewanshi Paul</a></strong>\u00a0and <strong><a href=\"https://www.linkedin.com/in/kriti39/\" title=\"\">KRITIDIPTA GHOSH</a></strong></em></em> <em><em>for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,\u00a0</em><a href=\"https://takeuforward.org/contribute/help-us-grow-takeuforward/\">please check out this articl</a></em>e</p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->",
    "category_tag": "data-structure",
    "likes": 309,
    "preview": "Problem Statement: Given an array that contains both negative and positive integers, find the maximum product subarray. Examples Example 1: Input: Nums = [1,2,3,4,5,0] Output: 120 Explanation: In t..."
}