{
    "dislikes": 3,
    "video": "OyZFFqQtu98",
    "publishedOn": "Sun Mar 24 2024 22:09:21 GMT+0530 (India Standard Time)",
    "slug": "combination-sum-1",
    "aid": "1463",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/combination-sum",
    "title": "Combination Sum - 1",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "recursion",
            "topic-title": "Recursion"
        }
    ],
    "category_tag": "data-structure",
    "likes": 158,
    "preview": "Problem Statement: Given an array of distinct integers and a target, you have to return the list of all unique combinations where the chosen numbers sum to target. You may return the combinations i...",
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement:</strong>&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Given an array of distinct integers and a<strong> target</strong>, you have to return <em>the list of all unique combinations where the chosen numbers sum to </em>target<em>.</em> You may return the combinations in any order.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The same number may be chosen from the given array an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It is guaranteed that the number of unique combinations that sum up to <strong>target</strong> is less than <strong>150 </strong>combinations for the given input.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Examples:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\"><strong>Example 1:</strong>\n\n<strong>Input:</strong> array = [2,3,6,7], target = 7\n\n<strong>Output:</strong> [[2,2,3],[7]]\n\n<strong>Explanation:</strong> 2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.\n             7 is a candidate, and 7 = 7.\n             These are the only two combinations.\n\n\n<strong>Example 2:</strong>\n\n<strong>Input:</strong> array = [2], target = 1\n\n<strong>Output:</strong> []\n\n<strong>Explaination:</strong> No combination is possible.</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Solution</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"textColor\":\"vivid-red\"} -->\n<p class=\"has-vivid-red-color has-text-color\"><strong><em>Disclaimer</em></strong>: <em>Don't jump directly to the solution, try it out yourself first.</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Solution: Recursion</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Intuition:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For questions like printing combinations or subsequences, the first thing that should strike your mind is recursion.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>How to think recursively?</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Whenever the problem is related to picking up elements from an array to form a combination, start thinking about the <strong>\u201cpick and non-pick\u201d </strong>approach.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Approach</strong>:&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Defining recursive function:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><img width=\"514\" height=\"269\" src=\"https://lh6.googleusercontent.com/0MkLF-E2sJeZl76MJeOmrZNrR8mp6hW8Rusu2705vDbfpkScaw92cRPlhqWe_r8zMLLpftrJxteoKmuE9CBAJuqY3MheJlxe8rVZ6Lrk4aC31x2ulkk7fXI8IIHp3VAKa2GySMbQ\"></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Initially, the index will be 0, target as given and the data structure(vector or list) will be empty</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now there are 2 options viz to <strong>pick or not pick </strong>the current index element.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If you <strong>pick</strong> the element, again come back at the same index as multiple occurrences of the same element is possible so the target reduces to target - arr[index] (where target -arr[index]&gt;=0)and also insert the current element into the data structure.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If you decide <strong>not to pick</strong> the current element, move on to the next index and the target value stays as it is. Also, the current element is not inserted into the data structure.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>While backtracking makes sure to pop the last element as shown in the recursion tree below.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Keep on repeating this process while index &lt; size of the array for a particular recursion call.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You can also stop the recursion when the target value is 0, but here a generalized version without adding too many conditions is considered.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Using this approach, we can get all the combinations.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Base condition</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>If index== size of array and&nbsp; target == 0 include the combination in our answer</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Diagrammatic representation for Example 1:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Case 1:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"531\" height=\"627\" src=\"https://lh4.googleusercontent.com/U5JtSW7Y521CQwZ88XkFdkY10h6uWeLVGNt9p6qTE4YpAWUwZhSzrThEg5iGs6EMVCgpE00Q0ilJY_Plu8CIalZ33zwu1hS0645TIE70h4LTKGisF9dx2lA6jzMykPG5NbD6SPmo\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Case 2:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"566\" height=\"793\" src=\"https://lh5.googleusercontent.com/Twqm92pZ90YWndETQxdFF4_1ycJ9OYBHUbGXXSY5ofhx1cV28EJ8YIfgmaUOWZ0pmYl1C_l6SkAsKYp7FAFC_7EQyhxSTrG34599mc7_MBbj5ip9tlTxgf6eJgow7taijc6Sj7nY\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include&lt;bits/stdc++.h&gt;\n\nusing namespace std;\nclass Solution {\n  public:\n    void findCombination(int ind, int target, vector &lt; int &gt; &amp; arr, vector &lt; vector &lt; int &gt;&gt; &amp; ans, vector &lt; int &gt; &amp; ds) {\n      if (ind == arr.size()) {\n        if (target == 0) {\n          ans.push_back(ds);\n        }\n        return;\n      }\n      // pick up the element \n      if (arr[ind] &lt;= target) {\n        ds.push_back(arr[ind]);\n        findCombination(ind, target - arr[ind], arr, ans, ds);\n        ds.pop_back();\n      }\n\n      findCombination(ind + 1, target, arr, ans, ds);\n\n    }\n  public:\n    vector &lt; vector &lt; int &gt;&gt; combinationSum(vector &lt; int &gt; &amp; candidates, int target) {\n      vector &lt; vector &lt; int &gt;&gt; ans;\n      vector &lt; int &gt; ds;\n      findCombination(0, target, candidates, ans, ds);\n      return ans;\n    }\n};\nint main() {\n  Solution obj;\n  vector &lt; int &gt; v {2,3,6,7};\n  int target = 7;\n\n  vector &lt; vector &lt; int &gt;&gt; ans = obj.combinationSum(v, target);\n  cout &lt;&lt; \"Combinations are: \" &lt;&lt; endl;\n  for (int i = 0; i &lt; ans.size(); i++) {\n    for (int j = 0; j &lt; ans[i].size(); j++)\n      cout &lt;&lt; ans[i][j] &lt;&lt; \" \";\n    cout &lt;&lt; endl;\n  }\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Combinations are:<br>2 2 3<br>7</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(2^t * k) </strong>where t is the<strong> </strong>target, k is the average length</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Reason:</strong> Assume if you were not allowed to pick a single element multiple times, every element will have a couple of options: pick or not pick which is 2^n different recursion calls, also assuming that the average length of every combination generated is k. (to put length k data structure into another data structure)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Why not (2^n) but (2^t) (where n is the size of an array)?</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Assume that there is 1 and the target you want to reach is 10 so 10 times you can \u201cpick or not pick\u201d an element.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(k*x)</strong>, k is the average length and x is the no. of combinations</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.io.*;\nimport java.util.*;\nclass Solution {\n\n    private void findCombinations(int ind, int[] arr, int target, List &lt; List &lt; Integer &gt;&gt; ans, List &lt; Integer &gt; ds) {\n        if (ind == arr.length) {\n            if (target == 0) {\n                ans.add(new ArrayList &lt; &gt; (ds));\n            }\n            return;\n        }\n\n        if (arr[ind] &lt;= target) {\n            ds.add(arr[ind]);\n            findCombinations(ind, arr, target - arr[ind], ans, ds);\n            ds.remove(ds.size() - 1);\n        }\n        findCombinations(ind + 1, arr, target, ans, ds);\n    }\n    public List &lt; List &lt; Integer &gt;&gt; combinationSum(int[] candidates, int target) {\n        List &lt; List &lt; Integer &gt;&gt; ans = new ArrayList &lt; &gt; ();\n        findCombinations(0, candidates, target, ans, new ArrayList &lt; &gt; ());\n        return ans;\n    }\n}\npublic class Main {\n    public static void main(String[] args) {\n        int arr[] = {2,3,6,7};\n        int target = 7;\n        Solution sol = new Solution();\n        List &lt; List &lt; Integer &gt;&gt; ls = sol.combinationSum(arr, target);\n        System.out.println(\"Combinations are: \");\n        for (int i = 0; i &lt; ls.size(); i++) {\n            for (int j = 0; j &lt; ls.get(i).size(); j++) {\n                System.out.print(ls.get(i).get(j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Combinations are:<br>2 2 3<br>7</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(2^t * k) </strong>where t is the<strong> </strong>target, k is the average length</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Reason:</strong> Assume if you were not allowed to pick a single element multiple times, every element will have a couple of options: pick or not pick which is 2^n different recursion calls, also assuming that the average length of every combination generated is k. (to put length k data structure into another data structure)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Why not (2^n) but (2^t) (where n is the size of an array)?</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Assume that there is 1 and the target you want to reach is 10 so 10 times you can \u201cpick or not pick\u201d an element.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(k*x)</strong>, k is the average length and x is the no. of combinations</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block\" data-lang=\"python\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">from typing import List\n\n\n\n\nclass Solution:\n    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:\n        ans = []\n        ds = []\n\n\n        def findCombination(ind: int, target: int):\n            if ind == len(candidates):\n                if target == 0:\n                    ans.append(ds[:])\n                return\n            if candidates[ind] &lt;= target:\n                ds.append(candidates[ind])\n                findCombination(ind, target - candidates[ind])\n                ds.pop()\n            findCombination(ind + 1, target)\n        findCombination(0, target)\n        return ans\n\n\n\n\nif __name__ == \"__main__\":\n    obj = Solution()\n    candidates = [2, 3, 6, 7]\n    target = 7\n    ans = obj.combinationSum(candidates, target)\n    print(\"Combinations are: \")\n    for i in range(len(ans)):\n        for j in range(len(ans[i])):\n            print(ans[i][j], end=\" \")\n        print()</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Combinations are:<br>2 2 3<br>7</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(2^t * k) </strong>where t is the<strong> </strong>target, k is the average length</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Reason:</strong> Assume if you were not allowed to pick a single element multiple times, every element will have a couple of options: pick or not pick which is 2^n different recursion calls, also assuming that the average length of every combination generated is k. (to put length k data structure into another data structure)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Why not (2^n) but (2^t) (where n is the size of an array)?</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Assume that there is 1 and the target you want to reach is 10 so 10 times you can \u201cpick or not pick\u201d an element.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(k*x)</strong>, k is the average length and x is the no. of combinations</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to\u00a0<strong><a href=\"https://www.linkedin.com/in/rishirajgirmal/\" target=\"_blank\" rel=\"noreferrer noopener nofollow\"><strong>Rishiraj Girmal</strong></a></strong>\u00a0<em><strong><em><strong>and\u00a0<em><a href=\"https://www.linkedin.com/in/imsudip/\" target=\"_blank\" rel=\"noreferrer noopener\">Sudip Ghosh</a></em></strong></em></strong></em></em> <em>for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,\u00a0</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->"
}