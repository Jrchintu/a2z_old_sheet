{
    "dislikes": 10,
    "video": "F_DDzYnxO14",
    "publishedOn": "Sun Mar 24 2024 22:09:26 GMT+0530 (India Standard Time)",
    "slug": "fractional-knapsack-problem-greedy-approach",
    "aid": "1486",
    "title": "Fractional Knapsack Problem : Greedy Approach",
    "tuf_plus": "",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "greedy",
            "topic-title": "Greedy"
        }
    ],
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement: </strong>The weight of <strong>N</strong> items and their corresponding values are given. We have to put these items in a knapsack of weight<strong> W</strong> such that the <strong>total value</strong> obtained is<strong> maximized.</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Note: </strong>We can either take the item as a whole or break it into smaller units.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\"><strong>Example</strong>:\n\n<strong>Input:</strong> N = 3, W = 50, values[] = {100,60,120}, weight[] = {20,10,30}.\n\n<strong>Output:</strong> 240.00\n\n<strong>Explanation:</strong> The first and second items  are taken as a whole  while only 20 units of the third item is taken. Total value = 100 + 60 + 80 = 240.00\n</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Solution</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong><em>Disclaimer</em></strong>: <em>Don't jump directly to the solution, try it out yourself first.</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Approach</strong>:&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The greedy method to maximize our answer will be to pick up the items with higher values. Since it is possible to break the items as well we should focus on picking up items having higher value /weight first. To achieve this, items should be sorted in decreasing order with respect to their value /weight. Once the items are sorted we can iterate. Pick up items with weight lesser than or equal to the current capacity of the knapsack. In the end, if the weight of an item becomes more than what we can carry, break the item into smaller units. Calculate its value according to our current capacity and add this new value to our answer.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Let's understand with an example:-</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>N = 3, W = 50, values[] = {100,60,120}, weight[] = {20,10,30}.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The value/weight of item 1 is <strong>(100/20) = 5</strong>,for item 2 is <strong>(60/10) = 6 </strong>and for item 3 is <strong>(120/30) = 4.</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Sorting them in decreasing order of value/weight we have&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"474\" height=\"158\" src=\"https://lh6.googleusercontent.com/MykKGYWNZV6LI1wrcKjxKS2BKfqj5yrjXp9N8RwCBi5_U151TwIIqrBIhQ47we4RmgJwgwKBpc9bVMqq2XpjUrR3atXB_FDjrAhCkk7u7ivLItr_lQmYiSpZccnjQTOgW1KN0QIe\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Initially capacity of bag(W)&nbsp; = 50, value = 0</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Item 1 has a weight of 10, we can pick it up.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Current weight = 50 - 10 = 40 ,Current value = 60.00</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Item 2&nbsp; has a weight of 20 , we can pick it up.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Current weight = 40 - 20 = 20 ,Current value = 60.00 + 100.00 = 160.00</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Item 3 has a weight of 30 , but current knapsack capacity is 20.Only a fraction of it is chosen.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Current weight = 20 - 20 = 0 ,Final value = 160.00 + (120/30 )*20 = 240.00</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\nstruct Item {\n   int value;\n   int weight;\n};\nclass Solution {\n   public:\n      bool static comp(Item a, Item b) {\n         double r1 = (double) a.value / (double) a.weight;\n         double r2 = (double) b.value / (double) b.weight;\n         return r1 &gt; r2;\n      }\n   // function to return fractionalweights\n   double fractionalKnapsack(int W, Item arr[], int n) {\n\n      sort(arr, arr + n, comp);\n\n      int curWeight = 0;\n      double finalvalue = 0.0;\n\n      for (int i = 0; i &lt; n; i++) {\n\n         if (curWeight + arr[i].weight &lt;= W) {\n            curWeight += arr[i].weight;\n            finalvalue += arr[i].value;\n         } else {\n            int remain = W - curWeight;\n            finalvalue += (arr[i].value / (double) arr[i].weight) * (double) remain;\n            break;\n         }\n      }\n\n      return finalvalue;\n\n   }\n};\nint main() {\n   int n = 3, weight = 50;\n   Item arr[n] = { {100,20},{60,10},{120,30} };\n   Solution obj;\n   double ans = obj.fractionalKnapsack(weight, arr, n);\n   cout &lt;&lt; \"The maximum value is \" &lt;&lt; setprecision(2) &lt;&lt; fixed &lt;&lt; ans;\n   return 0;\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The maximum value is 240.00</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(n log n + n). O(n log n) </strong>to sort the items and <strong>O(n) </strong>to iterate through all the items for calculating the answer.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(1), </strong>no additional data structure has been used.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\nclass Item {\n  int value, weight;\n  Item(int x, int y) {\n    this.value = x;\n    this.weight = y;\n  }\n}\n\nclass itemComparator implements Comparator&lt;Item&gt;\n{\n    @Override\n    public int compare(Item a, Item b) \n    {\n        double r1 = (double)(a.value) / (double)(a.weight); \n        double r2 = (double)(b.value) / (double)(b.weight); \n        if(r1 &lt; r2) return 1; \n        else if(r1 &gt; r2) return -1; \n        else return 0; \n    }\n}\npublic class solve{\n    static double fractionalKnapsack(int W, Item arr[], int n) {\n        Arrays.sort(arr, new itemComparator()); \n        \n        int curWeight = 0; \n        double finalvalue = 0.0; \n        \n        for (int i = 0; i &lt; n; i++) {\n       \n            if (curWeight + arr[i].weight &lt;= W) {\n                curWeight += arr[i].weight;\n                finalvalue += arr[i].value;\n            }\n     \n            else {\n                int remain = W - curWeight;\n                finalvalue += ((double)arr[i].value / (double)arr[i].weight) * (double)remain;\n                break;\n            }\n        }\n     \n        return finalvalue;\n        \n    }\n    public static void main(String args[])\n    {\n        int n = 3, weight = 50;\n        Item arr[] = {new Item (100,20),new Item(60,10),new Item(120,30)};\n        double ans = fractionalKnapsack(weight, arr, n);\n        System.out.println(\"The maximum value is \"+ans);\n    }\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The maximum value is 240.00</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(n log n + n). O(n log n) </strong>to sort the items and <strong>O(n) </strong>to iterate through all the items for calculating the answer.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(1), </strong>no additional data structure has been used.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block\" data-lang=\"python\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">class Item:\n    def __init__(self, value, weight):\n        self.value = value\n        self.weight = weight\n\n\n\n\nclass Solution:\n    def fractionalKnapsack(self, W, arr, n):\n        arr.sort(key=lambda x: x.value / x.weight, reverse=True)\n        curWeight = 0\n        finalvalue = 0.0\n        for i in range(n):\n            if curWeight + arr[i].weight &lt;= W:\n                curWeight += arr[i].weight\n                finalvalue += arr[i].value\n            else:\n                remain = W - curWeight\n                finalvalue += arr[i].value / arr[i].weight * remain\n                break\n        return finalvalue\n\n\n\n\nif __name__ == '__main__':\n    n = 3\n    W = 50\n    arr = [Item(60, 10), Item(100, 20), Item(120, 30)]\n    obj = Solution()\n    ans = obj.fractionalKnapsack(W, arr, n)\n    print(\"The maximum value is\", ans)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The maximum value is 240.00</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(n log n + n). O(n log n) </strong>to sort the items and <strong>O(n) </strong>to iterate through all the items for calculating the answer.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(1), </strong>no additional data structure has been used.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to\u00a0<strong><a href=\"https://www.linkedin.com/in/somparna-c-a724a5121/\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>Somparna Chakrabarti</strong></a></strong>\u00a0<em><strong><em><strong>and\u00a0<em><a href=\"https://www.linkedin.com/in/imsudip/\" target=\"_blank\" rel=\"noreferrer noopener\">Sudip Ghosh</a></em></strong></em></strong></em></em> <em>for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,\u00a0</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->",
    "category_tag": "data-structure",
    "likes": 185,
    "preview": "Problem Statement: The weight of N items and their corresponding values are given. We have to put these items in a knapsack of weight W such that the total value obtained is maximized. Note: We can..."
}