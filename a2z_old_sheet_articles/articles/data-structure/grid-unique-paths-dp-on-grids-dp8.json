{
    "dislikes": 0,
    "video": "sdE0A2Oxofw",
    "publishedOn": "Sun Mar 24 2024 22:09:57 GMT+0530 (India Standard Time)",
    "slug": "grid-unique-paths-dp-on-grids-dp8",
    "aid": "1631",
    "title": "Grid Unique Paths : DP on Grids (DP8)",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/grid-unique-paths",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "dynamic-programming",
            "topic-title": "Dynamic Programming"
        },
        {
            "topic-id": "recursion",
            "topic-title": "Recursion"
        }
    ],
    "content": "<!-- wp:paragraph -->\n<p>In this article, we will solve the most asked coding interview problem: Grid Unique Paths</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Given two values M and N, which represent a matrix[M][N]. We need to find the total unique paths from the top-left cell (matrix[0][0]) to the rightmost cell (matrix[M-1][N-1]).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>At any cell we are allowed to move in only two directions:- bottom and right.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n<details class=\"article_example_details\">\n<summary class=\"article_example_summary\">\n<span><strong>\nExamples\n</strong>\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"atricle_example_content\">\n<pre class=\"wp-block-preformatted\"><!-- Insert New Examples Here -->\n<pre class=\"wp-block-preformatted\"><strong>Example:</strong>\n\n<img width=\"417\" height=\"406\" src=\"https://lh3.googleusercontent.com/PDblNXbL7kmOxKoI7_0Yevnr7JF2FbXVr_0mKBpY8lza4066Gqz7yvw-4bn6NATQ9OaH9nn5uNeq6_P6fItMrWdEhs7fPUDBSoEKorJ9_lConrOtDUetBpq2s1bw4A9nIasR3dSJ\"></pre>\n</pre>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Practice Section-->\n<div class=\"practice\">\n<span><strong>Practice: </strong></span>\n<div class=\"problem-buttons\">\n\n<!-- Add Problem Link inside href -->\n<a href=\"https://www.codingninjas.com/studio/problems/unique-paths_1081470?utm_source=striver&amp;utm_medium=website&amp;utm_campaign=a_zcoursetuf\" target=\"_blank\" rel=\"noopener\">\n<span>Solve Problem</span>\n<img src=\"https://static.takeuforward.org/wp/uploads/2023/04/Group-11-5.png\" alt=\"code-studio\">\n</a>\n</div>\n</div>\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\nyourself first. </em></p>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<div class=\"horizontal_navbar_dsa_article\">\n<div class=\"grid_container_three\">\n<a href=\"#brute-force-approach\" class=\"three-boxes box-a\">\nMemorization approach\n</a>\n<a href=\"#better-approach\" class=\"three-boxes box-b\">\nTabulation approach\n</a>\n<a href=\"#optimal-approach\" class=\"three-boxes box-c\">\nSpace Optimization\n</a>\n<a href=\"#dsa_article_video_explanation\" class=\"three-boxes box-d\">\n<svg width=\"26\" height=\"26\" viewBox=\"0 0 20 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M8 10L13.19 7L8 4V10ZM19.56 2.17C19.69 2.64 19.78 3.27 19.84 4.07C19.91 4.87 19.94 5.56 19.94 6.16L20 7C20 9.19 19.84 10.8 19.56 11.83C19.31 12.73 18.73 13.31 17.83 13.56C17.36 13.69 16.5 13.78 15.18 13.84C13.88 13.91 12.69 13.94 11.59 13.94L10 14C5.81 14 3.2 13.84 2.17 13.56C1.27 13.31 0.69 12.73 0.44 11.83C0.31 11.36 0.22 10.73 0.16 9.93C0.0900001 9.13 0.0599999 8.44 0.0599999 7.84L0 7C0 4.81 0.16 3.2 0.44 2.17C0.69 1.27 1.27 0.69 2.17 0.44C2.64 0.31 3.5 0.22 4.82 0.16C6.12 0.0899998 7.31 0.0599999 8.41 0.0599999L10 0C14.19 0 16.8 0.16 17.83 0.44C18.73 0.69 19.31 1.27 19.56 2.17Z\" fill=\"red\"></path>\n</svg>\n\n</a>\n<div class=\"box-e tooltip\">\n<svg viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M12.842 9.25L11.9577 10.17C11.2502 10.89 10.8081 11.5 10.8081 13H8.84297V12.5C8.84297 11.39 9.28511 10.39 9.99255 9.67L11.2109 8.41C11.5745 8.05 11.7906 7.55 11.7906 7C11.7906 6.46957 11.5836 5.96086 11.2151 5.58579C10.8465 5.21071 10.3467 5 9.82552 5C9.30434 5 8.80451 5.21071 8.43598 5.58579C8.06745 5.96086 7.86041 6.46957 7.86041 7H5.89531C5.89531 5.93913 6.30938 4.92172 7.04644 4.17157C7.7835 3.42143 8.78316 3 9.82552 3C10.8679 3 11.8675 3.42143 12.6046 4.17157C13.3417 4.92172 13.7557 5.93913 13.7557 7C13.7543 7.84324 13.4259 8.65183 12.842 9.25ZM10.8081 17H8.84297V15H10.8081M9.82552 0C8.53521 0 7.25754 0.258658 6.06545 0.761205C4.87337 1.26375 3.79021 2.00035 2.87783 2.92893C1.03519 4.8043 0 7.34784 0 10C0 12.6522 1.03519 15.1957 2.87783 17.0711C3.79021 17.9997 4.87337 18.7362 6.06545 19.2388C7.25754 19.7413 8.53521 20 9.82552 20C12.4314 20 14.9306 18.9464 16.7732 17.0711C18.6158 15.1957 19.651 12.6522 19.651 10C19.651 4.47 15.2296 0 9.82552 0Z\" fill=\"black\"></path>\n</svg>\n<div class=\"bottom\">\n<p>Expand any one approach by clicking the given options in the bar. Clicking one approach on bar,\ncloses all other expands. You can manually expand more than one approach at a time</p>\n<i></i>\n</div>\n\n</div>\n</div>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Approaches Drop-Down -->\n<div class=\"dsa_article_dropdown_approachs \">\n\n<!-- Brute Force Approach Starts from here -->\n<div id=\"brute-force-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nMemorization Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n<p>As we have to count all possible ways to go from matrix[0,0] to matrix[m-1,n-1], we can try recursion to generate all possible paths.</p>\n<p><strong>Steps to form the recursive solution:&nbsp;</strong></p>\n<p>We will first form the recursive solution by the three points mentioned in <a href=\"https://takeuforward.org/data-structure/dynamic-programming-introduction/\">Dynamic Programming Introduction</a>.&nbsp;</p>\n<p><strong>Step 1: </strong>Express the problem in terms of indexes.</p>\n<p>We are given two variables M and N, representing the dimensions of a 2D matrix. For every different problem, this M and N will change.</p>\n<p>We can define the function with two parameters i and j, where i and j represent the row and column of the matrix.</p>\n<p><img width=\"548\" height=\"112\" src=\"https://lh4.googleusercontent.com/rikOHI3jLH8dmguJiYMVk_nWLKTPzObVATMhTpERJ_I7QK85nYAcFXXN2swpv0XqcHH-qaOfKUejfPHGmojevlz1h4ei3Y4yQAIXfZ37KE2AIoKd5OWAS99xJmsJdN326A0jiRvl\"></p>\n<p>f(i,j) will give us a sub-answer for the region (marked in blue) below:</p>\n<p><img width=\"317\" height=\"382\" src=\"https://lh3.googleusercontent.com/I1f_CFwzs3ZcrtZq0KXBmHVuQtNiD1-Z2N-dWshgdwnuv0HGJV_G3yinmPi80Jl0xBxct_Zp9wrPaSZIfhr4GIcP4moesTLppnBtpMZVSitIgQOFrXttLNuOFLEpKHZoZFkxx2CM\"></p>\n<p>We will be doing a top-down recursion, i.e we will move from the cell[M-1][N-1] and try to find our way to the cell[0][0]. Therefore at every index, we will try to move up and towards the left.</p>\n<p><strong>Base Case:</strong></p>\n<p>As discussed in&nbsp; <a href=\"https://www.youtube.com/watch?v=eQCS_v3bw0Q\">Patterns in Recursion</a>, there will be two base cases:</p>\n<ul><li>When i=0 and j=0, that is we have reached the destination so we can count the current path that is going on, hence we return 1.</li><li>When i&lt;0 and j&lt;0, it means that we have crossed the boundary of the matrix and we couldn\u2019t find a right path, hence we return 0.</li></ul>\n<p>The pseudocode till this step will be:</p>\n<p><img width=\"283\" height=\"246\" src=\"https://lh3.googleusercontent.com/HhUaf-_C-jdbmwHQDLD_iieUU_J6iZVY61AOo3Gr3DhuzmNbkbVnn_8qrYev0JJXEPqeBktyL3BDj3devLw1cuTtm471mhPRnEB9ForJj4Sloto5d_4ln_coXRuP3A9WiHKwzLeq\"></p>\n<p><strong>Step 2: </strong>Try out all possible choices at a given index.</p>\n<p>As we are writing a top-down recursion, at every index we have two choices, one to go up(\u2191) and the other to go left(\u2190). To go upwards, we will reduce i by 1, and move towards left we will reduce j by 1.</p>\n<p><img width=\"346\" height=\"392\" src=\"https://lh6.googleusercontent.com/mpOJ4iRYfIi7QLkYPKvFjwS06VqPd2vh-JoOLL_aoxwmjK0zz1K_KNbAcidUd0BmFnQ3bWKy7NYNY_82UK2qAFgtzqTSN6ch2xZ_DyS6Iq44LYVCQnn48k-U9X_-S35m2Jx-byRt\"></p>\n<p><strong>Step 3:&nbsp; Take the maximum of all choices</strong></p>\n<p>As we have to <strong>count </strong>all the possible unique paths, we will return the <strong>sum</strong> of the choices(up and left)&nbsp;</p>\n<p>The final pseudocode after steps 1, 2, and 3:</p>\n<p><img width=\"325\" height=\"368\" src=\"https://lh6.googleusercontent.com/d0vxg3CS6sC7sviqWnTc1D0FDoj1aUtEFAerqt5Hhb72VcNAVe-9shbA80Bz6VLThnT7-wK9lP_oGhjAsIUfQYEodpTp6QLce63wC_elvDKGJ3S70AikUtJVxU4huMS3Tc5O-Ab0\"></p>\n<p><strong>Steps to memoize a recursive solution:</strong></p>\n<p>If we draw the recursion tree, we will see that there are overlapping subproblems. In order to convert a recursive solution the following steps will be taken:</p>\n<ol><li>Create a dp array of size [m][n]</li><li>Whenever we want to find the answer of a particular row and column (say f(i,j)), we first check whether the answer is already calculated using the dp array(i.e dp[i][j]!= -1 ). If yes, simply return the value from the dp array.</li><li>If not, then we are finding the answer for the given values for the first time, we will use the recursive relation as usual but before returning from the function, we will set dp[i][j] to the solution we get.</li></ol>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h>\nusing namespace std;\n\n// Recursive function to count the number of ways to reach (i, j) from (0, 0)\n// in a grid of size m x n\nint countWaysUtil(int i, int j, vector&lt;vector&lt;int>>&amp; dp) {\n    // Base case: If we reach the top-left corner (0, 0), there is one way.\n    if (i == 0 &amp;&amp; j == 0)\n        return 1;\n\n    // If we go out of bounds or reach a blocked cell, there are no ways.\n    if (i &lt; 0 || j &lt; 0)\n        return 0;\n\n    // If we have already computed the number of ways for this cell, return it.\n    if (dp[i][j] != -1)\n        return dp[i][j];\n\n    // Calculate the number of ways by moving up and left recursively.\n    int up = countWaysUtil(i - 1, j, dp);\n    int left = countWaysUtil(i, j - 1, dp);\n\n    // Store the result in the dp table and return it.\n    return dp[i][j] = up + left;\n}\n\n// Function to count the number of ways to reach the bottom-right cell (m-1, n-1)\n// from the top-left cell (0, 0) in a grid of size m x n\nint countWays(int m, int n) {\n    // Create a memoization table (dp) to store the results of subproblems.\n    vector&lt;vector&lt;int>> dp(m, vector&lt;int>(n, -1));\n\n    // Call the utility function with the bottom-right cell as the starting point.\n    return countWaysUtil(m - 1, n - 1, dp);\n}\n\nint main() {\n    int m = 3;\n    int n = 2;\n\n    // Call the countWays function and print the result.\n    cout &lt;&lt; \"Number of ways to reach (\" &lt;&lt; m - 1 &lt;&lt; \", \" &lt;&lt; n - 1 &lt;&lt; \"): \" &lt;&lt; countWays(m, n) &lt;&lt; endl;\n\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\nclass TUF {\n    // Function to count the number of ways to reach cell (i, j)\n    static int countWaysUtil(int i, int j, int[][] dp) {\n        // If we reach the starting cell (0, 0), there's one way to reach it.\n        if (i == 0 &amp;&amp; j == 0)\n            return 1;\n        \n        // If we go out of bounds, there's no way to reach the cell.\n        if (i &lt; 0 || j &lt; 0)\n            return 0;\n\n        // If the value for this cell is already computed, return it.\n        if (dp[i][j] != -1)\n            return dp[i][j];\n\n        // Calculate the number of ways by moving up and moving left.\n        int up = countWaysUtil(i - 1, j, dp);\n        int left = countWaysUtil(i, j - 1, dp);\n\n        // Store the result in the DP array and return it.\n        return dp[i][j] = up + left;\n    }\n\n    // Function to count the number of ways to reach cell (m-1, n-1)\n    static int countWays(int m, int n) {\n        // Create a 2D DP array to store the results\n        int dp[][] = new int[m][n];\n        \n        // Initialize the DP array with -1 to indicate uncomputed values\n        for (int[] row : dp)\n            Arrays.fill(row, -1);\n\n        // Start the recursive calculation from the bottom-right cell (m-1, n-1)\n        return countWaysUtil(m - 1, n - 1, dp);\n    }\n\n    public static void main(String args[]) {\n        int m = 3;\n        int n = 2;\n\n        // Call the countWays function and print the result\n        System.out.println(countWays(m, n));\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\ndef countWaysUtil(i, j, dp):\n    # Base case: If we reach the top-left corner (i=0, j=0), there is one way to reach there.\n    if i == 0 and j == 0:\n        return 1\n    # If either i or j goes out of bounds (negative), there is no way to reach that cell.\n    if i &lt; 0 or j &lt; 0:\n        return 0\n    # If we have already calculated the number of ways for this cell, return it from the dp array.\n    if dp[i][j] != -1:\n        return dp[i][j]\n    \n    # Recursive calls to count the number of ways to reach the current cell.\n    up = countWaysUtil(i - 1, j, dp)    # Moving up one row.\n    left = countWaysUtil(i, j - 1, dp)  # Moving left one column.\n    \n    # Store the result in the dp array and return it.\n    dp[i][j] = up + left\n    return dp[i][j]\n\ndef countWays(m, n):\n    # Initialize a memoization (dp) array to store intermediate results.\n    dp = [[-1 for j in range(n)] for i in range(m)]\n    \n    # Call the utility function to compute the number of ways to reach the bottom-right cell (m-1, n-1).\n    return countWaysUtil(m - 1, n - 1, dp)\n\ndef main():\n    m = 3\n    n = 2\n    # Call the countWays function to calculate and print the number of ways to reach the destination.\n    print(countWays(m, n))\n\nif __name__ == '__main__':\n    main()\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n// Define a function to count the number of ways to reach cell (i, j) from the top-left corner (0, 0) in a grid of size m x n.\nfunction countWaysUtil(i, j, dp) {\n  // If we have reached the top-left corner, there is one way to reach it.\n  if (i === 0 && j === 0) {\n    return 1;\n  }\n\n  // If i or j is negative, we are out of bounds, so there are no ways to reach this cell.\n  if (i < 0 || j < 0) {\n    return 0;\n  }\n\n  // If we have already computed the number of ways to reach this cell, return it.\n  if (dp[i][j] !== -1) {\n    return dp[i][j];\n  }\n\n  // Calculate the number of ways to reach this cell by moving up and left.\n  const up = countWaysUtil(i - 1, j, dp);\n  const left = countWaysUtil(i, j - 1, dp);\n\n  // Store the result in the dp array and return it.\n  dp[i][j] = up + left;\n  return dp[i][j];\n}\n\n// Define a function to count the number of ways to reach the bottom-right corner (m-1, n-1) of a grid of size m x n.\nfunction countWays(m, n) {\n  // Create a 2D array to store the results of subproblems. Initialize it with -1.\n  const dp = Array.from(Array(m), () => Array(n).fill(-1));\n\n  // Call the utility function to compute the result.\n  return countWaysUtil(m - 1, n - 1, dp);\n}\n\n// Main function\nfunction main() {\n  const m = 3;\n  const n = 2;\n\n  // Call the countWays function and print the result.\n  console.log(countWays(m, n));\n}\n\n// Call the main function to start the program.\nmain();\n\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Brute Force Here -->\n</p><p><strong>Output:</strong> 3\n\n</p>\n<p></p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n<!-- Insert Time and Space Complexity of Brute Force Here -->\n<p><strong>Time Complexity: O(M*N)</strong></p>\n<p>Reason: At max, there will be M*N calls of recursion.</p>\n<p><strong>Space Complexity: O((N-1)+(M-1)) + O(M*N)</strong></p>\n<p>Reason: We are using a recursion stack space: O((N-1)+(M-1)), here (N-1)+(M-1) is the path length and an external DP Array of size \u2018M*N\u2019.</p>\n</p>\n</details>\n</div>\n</details>\n</div>\n<!-- Brute Force Approach Ends here -->\n\n\n<!-- Better Approach Starts from here -->\n\n<div id=\"better-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nTabulation Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition For Better Approach Here -->\n<p>Tabulation is the bottom-up approach, which means we will go from the base case to the main problem.</p>\n<p>The steps to convert to the tabular solution are given below:</p>\n<ul><li>Declare a dp[] array of size [m][n].</li><li>First initialize the base condition values, i.e dp[0][0] = 1</li><li>Our answer should get stored in dp[m-1][n-1]. We want to move from (0,0) to (m-1,n-1). But we can\u2019t move arbitrarily, we should move such that at a particular i and j, we have all the values required to compute dp[i][j].</li><li>If we see the memoized code, the values required for dp[i][j] are dp[i-1][j] and dp[i][j-1]. So we only use the previous row and column value.</li><li>We have already filled the top-left corner (i=0 and j=0), if we move in any of the two following ways(given below), at every cell we do have all the previous values required to compute its value.</li></ul>\n<p><img src=\"https://lh3.googleusercontent.com/K_u3y4_Fn1FkTA3ltnWUlEIDFhTvLcq1ZCX3xyXazicLyAaDml7R98-0nKIx8NOAfGoVi-qctljq3i89cW-GcjCJL3mfVEWhAPgoySuNL1y_zbvqvvP9XfyxRJdjp1Rc9hktZBzx\" width=\"624\" height=\"351\"></p>\n<ul><li>We can use two nested loops to have this traversal</li><li>At every cell we calculate up and left as we had done in the recursive solution and then assign the cell\u2019s value as (up+left)</li></ul>\n<p><strong>Note: </strong>For the first row and first column (except for the top-left cell), then up and left values will be zero respectively.</p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h>\nusing namespace std;\n\n// Function to count the number of ways to reach the bottom-right cell (m-1, n-1)\n// from the top-left cell (0, 0) in a grid of size m x n\nint countWaysUtil(int m, int n, vector&lt;vector&lt;int>>&amp; dp) {\n    // Loop through the grid using two nested loops\n    for (int i = 0; i &lt; m; i++) {\n        for (int j = 0; j &lt; n; j++) {\n            // Base condition: If we are at the top-left cell (0, 0), there is one way.\n            if (i == 0 &amp;&amp; j == 0) {\n                dp[i][j] = 1;\n                continue; // Skip the rest of the loop and continue with the next iteration.\n            }\n\n            // Initialize variables to store the number of ways from the cell above (up) and left (left).\n            int up = 0;\n            int left = 0;\n\n            // If we are not at the first row (i > 0), update 'up' with the value from the cell above.\n            if (i > 0)\n                up = dp[i - 1][j];\n\n            // If we are not at the first column (j > 0), update 'left' with the value from the cell to the left.\n            if (j > 0)\n                left = dp[i][j - 1];\n\n            // Calculate the number of ways to reach the current cell by adding 'up' and 'left'.\n            dp[i][j] = up + left;\n        }\n    }\n\n    // The result is stored in the bottom-right cell (m-1, n-1).\n    return dp[m - 1][n - 1];\n}\n\n// Function to count the number of ways to reach the bottom-right cell (m-1, n-1)\n// from the top-left cell (0, 0) in a grid of size m x n\nint countWays(int m, int n) {\n    // Create a memoization table (dp) to store the results of subproblems.\n    vector&lt;vector&lt;int>> dp(m, vector&lt;int>(n, -1));\n\n    // Call the utility function with the grid size and the memoization table.\n    return countWaysUtil(m, n, dp);\n}\n\nint main() {\n    int m = 3;\n    int n = 2;\n\n    // Call the countWays function and print the result.\n    cout &lt;&lt; \"Number of ways to reach (\" &lt;&lt; m - 1 &lt;&lt; \", \" &lt;&lt; n - 1 &lt;&lt; \"): \" &lt;&lt; countWays(m, n) &lt;&lt; endl;\n\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\nclass TUF {\n    // Function to count the number of ways to reach cell (m, n)\n    static int countWaysUtil(int m, int n, int[][] dp) {\n        // Loop through each cell in the grid\n        for (int i = 0; i &lt; m; i++) {\n            for (int j = 0; j &lt; n; j++) {\n                // Base condition: If we are at the top-left cell (0, 0), there's one way to reach it.\n                if (i == 0 &amp;&amp; j == 0) {\n                    dp[i][j] = 1;\n                    continue;\n                }\n\n                int up = 0;\n                int left = 0;\n\n                // Calculate the number of ways by moving up (if possible) and left (if possible)\n                if (i > 0)\n                    up = dp[i - 1][j];\n                if (j > 0)\n                    left = dp[i][j - 1];\n\n                // Store the total number of ways to reach the current cell in the DP array\n                dp[i][j] = up + left;\n            }\n        }\n\n        // Return the number of ways to reach the bottom-right cell (m-1, n-1)\n        return dp[m - 1][n - 1];\n    }\n\n    // Function to count the number of ways to reach cell (m, n)\n    static int countWays(int m, int n) {\n        // Create a 2D DP array to store the results\n        int dp[][] = new int[m][n];\n\n        // Initialize the DP array with -1 to indicate uncomputed values\n        for (int[] row : dp)\n            Arrays.fill(row, -1);\n\n        // Call the countWaysUtil function to calculate and return the result\n        return countWaysUtil(m, n, dp);\n    }\n\n    public static void main(String args[]) {\n        int m = 3;\n        int n = 2;\n\n        // Call the countWays function and print the result\n        System.out.println(countWays(m, n));\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\ndef countWaysUtil(m, n, dp):\n    # Loop through each cell in the grid\n    for i in range(m):\n        for j in range(n):\n            # Base condition: If we are at the top-left corner, there is one way to reach it.\n            if i == 0 and j == 0:\n                dp[i][j] = 1\n                continue\n            \n            # Initialize variables to store the number of ways from above and from the left.\n            up = 0\n            left = 0\n            \n            # Check if moving up is a valid option (not out of bounds).\n            if i > 0:\n                up = dp[i - 1][j]\n            \n            # Check if moving left is a valid option (not out of bounds).\n            if j > 0:\n                left = dp[i][j - 1]\n            \n            # Calculate and store the number of ways to reach the current cell.\n            dp[i][j] = up + left\n    \n    # The bottom-right cell (m-1, n-1) now contains the total number of ways to reach there.\n    return dp[m - 1][n - 1]\n\ndef countWays(m, n):\n    # Initialize a memoization (dp) array to store intermediate results.\n    dp = [[-1 for j in range(n)] for i in range(m)]\n    \n    # Call the utility function to compute the number of ways to reach the destination.\n    return countWaysUtil(m, n, dp)\n\ndef main():\n    m = 3\n    n = 2\n    # Call the countWays function to calculate and print the number of ways to reach the destination.\n    print(countWays(m, n))\n\nif __name__ == '__main__':\n    main()\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n// Define a function to count the number of ways to reach cell (m, n) in a grid.\nfunction countWaysUtil(m, n, dp) {\n  // Iterate through each cell in the grid.\n  for (let i = 0; i &lt; m; i++) {\n    for (let j = 0; j &lt; n; j++) {\n      // Base condition: If we are at the top-left cell (0, 0), there is only one way to reach it.\n      if (i === 0 &amp;&amp; j === 0) {\n        dp[i][j] = 1;\n        continue;\n      }\n\n      // Initialize variables to store the number of ways to reach the current cell by moving up and left.\n      let up = 0;\n      let left = 0;\n\n      // Check if we can move up (i > 0).\n      if (i > 0) {\n        up = dp[i - 1][j];\n      }\n\n      // Check if we can move left (j > 0).\n      if (j > 0) {\n        left = dp[i][j - 1];\n      }\n\n      // The total number of ways to reach the current cell is the sum of ways from above (up) and from the left (left).\n      dp[i][j] = up + left;\n    }\n  }\n\n  // The result is stored in the bottom-right cell of the grid (m-1, n-1).\n  return dp[m - 1][n - 1];\n}\n\n// Define a function to count the number of ways to reach cell (m, n) in an m x n grid.\nfunction countWays(m, n) {\n  // Create a 2D array to store the results of subproblems. Initialize it with -1.\n  const dp = Array.from(Array(m), () => Array(n).fill(-1));\n\n  // Call the utility function to compute the result.\n  return countWaysUtil(m, n, dp);\n}\n\n// Main function\nfunction main() {\n  const m = 3;\n  const n = 2;\n\n  // Call the countWays function and print the result.\n  console.log(countWays(m, n));\n}\n\n// Call the main function to start the program.\nmain();\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Better Approach Here -->\n<strong>Output:</strong> 3\n\n\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Better Approach Here -->\n<p><strong>Time Complexity: O(M*N)</strong></p>\n<p>Reason: There are two nested loops</p>\n<p><strong>Space Complexity: O(M*N)</strong></p>\n<p>Reason: We are using an external array of size \u2018M*N\u2019\u2019.</p>\n</p>\n</details>\n</div>\n</details>\n</div>\n<!-- Better Approach Ends from here -->\n\n\n<!-- Optimal Approach Starts from here -->\n\n<div id=\"optimal-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nSpace Optimization Approach \n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm of Better Approach Here -->\n<p><strong>Part 3: Space Optimization</strong></p>\n<p>If we closely look at the relationship,</p>\n<p><strong>dp[i][j] = dp[i-1][j] + dp[i][j-1])</strong></p>\n<p>We see that we only need the previous row and column, in order to calculate dp[i][j]. Therefore we can space optimize it.</p>\n<p>Initially, we can take a dummy row ( say prev) and initialize it as 0.</p>\n<p>Now the current row(say temp) <strong>only needs the </strong>previous row value and the current row\u2019s value in order to calculate dp[i][j].</p>\n<p><img width=\"624\" height=\"351\" src=\"https://lh4.googleusercontent.com/g2gzTWII_u4P7EgZxH4H7MFxQEqkQOMf15gPh8vNhZ17nO0CDP3ogflnKpsuVZxzeE5DFKHhi4P5pAw_pZICVCkq-PiU2-KFOMldpe_uGUZyODhCDhZikkWJBIpEg7rtN_tMzDkK\"></p>\n<p>At the next step, the temp array becomes the prev of the next step and using its values we can still calculate the next row\u2019s values.</p>\n<p><img width=\"624\" height=\"351\" src=\"https://lh5.googleusercontent.com/fB64i4GbNSti9qO6rtMTWMSBv1AZRz3NHzXcd4oCmNqdmiflbS3yiV3jjc7bf8RJ8yw-scsrAqCBr1HzkGCWjX7uE_XLvTcL1w3q4Hai1KG-uDlRySIHkWVw1RzwWczlsIyZALYb\"></p>\n<p>At last prev[n-1] will give us the required answer.</p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h>\nusing namespace std;\n\n// Function to count the number of ways to reach the bottom-right cell (m-1, n-1)\n// from the top-left cell (0, 0) in a grid of size m x n\nint countWays(int m, int n) {\n    // Create a vector to represent the previous row of the grid.\n    vector&lt;int> prev(n, 0);\n\n    // Iterate through the rows of the grid.\n    for (int i = 0; i &lt; m; i++) {\n        // Create a temporary vector to represent the current row.\n        vector&lt;int> temp(n, 0);\n\n        // Iterate through the columns of the grid.\n        for (int j = 0; j &lt; n; j++) {\n            // Base case: If we are at the top-left cell (0, 0), there is one way.\n            if (i == 0 &amp;&amp; j == 0) {\n                temp[j] = 1;\n                continue;\n            }\n\n            // Initialize variables to store the number of ways from the cell above (up) and left (left).\n            int up = 0;\n            int left = 0;\n\n            // If we are not at the first row (i > 0), update 'up' with the value from the previous row.\n            if (i > 0)\n                up = prev[j];\n\n            // If we are not at the first column (j > 0), update 'left' with the value from the current row.\n            if (j > 0)\n                left = temp[j - 1];\n\n            // Calculate the number of ways to reach the current cell by adding 'up' and 'left'.\n            temp[j] = up + left;\n        }\n\n        // Update the previous row with the values calculated for the current row.\n        prev = temp;\n    }\n\n    // The result is stored in the last cell of the previous row (n-1).\n    return prev[n - 1];\n}\n\nint main() {\n    int m = 3;\n    int n = 2;\n\n    // Call the countWays function and print the result.\n    cout &lt;&lt; \"Number of ways to reach (\" &lt;&lt; m - 1 &lt;&lt; \", \" &lt;&lt; n - 1 &lt;&lt; \"): \" &lt;&lt; countWays(m, n) &lt;&lt; endl;\n\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\nclass TUF {\n    // Function to count the number of ways to reach cell (m, n)\n    static int countWays(int m, int n) {\n        // Create an array to store the results for the previous row\n        int prev[] = new int[n];\n        \n        for (int i = 0; i &lt; m; i++) {\n            // Create a temporary array to store the results for the current row\n            int temp[] = new int[n];\n            \n            for (int j = 0; j &lt; n; j++) {\n                if (i == 0 &amp;&amp; j == 0) {\n                    // Base condition: There's one way to reach the top-left cell (0, 0)\n                    temp[j] = 1;\n                    continue;\n                }\n\n                int up = 0;\n                int left = 0;\n\n                // Calculate the number of ways by moving up (if possible) and left (if possible)\n                if (i > 0)\n                    up = prev[j];\n                if (j > 0)\n                    left = temp[j - 1];\n\n                // Store the total number of ways to reach the current cell in the temporary array\n                temp[j] = up + left;\n            }\n            \n            // Set the temporary array as the previous array for the next row\n            prev = temp;\n        }\n\n        // Return the number of ways to reach the bottom-right cell (m-1, n-1)\n        return prev[n - 1];\n    }\n\n    public static void main(String args[]) {\n        int m = 3;\n        int n = 2;\n\n        // Call the countWays function and print the result\n        System.out.println(countWays(m, n));\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\ndef countWays(m, n):\n    # Initialize a previous row to store intermediate results.\n    prev = [0] * n\n\n    # Loop through each row of the grid.\n    for i in range(m):\n        # Initialize a temporary row to store current row results.\n        temp = [0] * n\n        \n        # Loop through each column of the grid.\n        for j in range(n):\n            # Base case: If we are at the top-left corner, there is one way to reach it.\n            if i == 0 and j == 0:\n                temp[j] = 1\n                continue\n            \n            # Initialize variables to store the number of ways from above and from the left.\n            up = 0\n            left = 0\n            \n            # Check if moving up is a valid option (not out of bounds).\n            if i > 0:\n                up = prev[j]\n            \n            # Check if moving left is a valid option (not out of bounds).\n            if j > 0:\n                left = temp[j - 1]\n                \n            # Calculate and store the number of ways to reach the current cell.\n            temp[j] = up + left\n        \n        # Update the previous row with the current row results.\n        prev = temp\n    \n    # The last element in the previous row (prev) now contains the total number of ways to reach the destination.\n    return prev[n - 1]\n\ndef main():\n    m = 3\n    n = 2\n    # Call the countWays function to calculate and print the number of ways to reach the destination.\n    print(countWays(m, n))\n\nif __name__ == '__main__':\n    main()\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n// Define a function to count the number of ways to reach a specific cell (m, n) in a grid.\nfunction countWays(m, n) {\n  // Create an array 'prev' to store the previous row's values.\n  const prev = Array(n).fill(0);\n\n  // Iterate through each row of the grid.\n  for (let i = 0; i &lt; m; i++) {\n    // Create an array 'temp' to store the current row's values.\n    const temp = Array(n).fill(0);\n\n    // Iterate through each column of the grid.\n    for (let j = 0; j &lt; n; j++) {\n      // Base condition: If we are at the top-left cell (0, 0), there is only one way to reach it.\n      if (i === 0 &amp;&amp; j === 0) {\n        temp[j] = 1;\n        continue;\n      }\n\n      // Initialize variables to store the number of ways to reach the current cell by moving up and left.\n      let up = 0;\n      let left = 0;\n\n      // Check if we can move up (i > 0).\n      if (i > 0) {\n        up = prev[j];\n      }\n\n      // Check if we can move left (j > 0).\n      if (j > 0) {\n        left = temp[j - 1];\n      }\n\n      // The total number of ways to reach the current cell is the sum of ways from above (up) and from the left (left).\n      temp[j] = up + left;\n    }\n\n    // Update the 'prev' array with the values from the current row ('temp') for the next iteration.\n    prev.splice(0, n, ...temp);\n  }\n\n  // The result is stored in the last element of the 'prev' array.\n  return prev[n - 1];\n}\n\n// Main function\nfunction main() {\n  const m = 3;\n  const n = 2;\n\n  // Call the countWays function and print the result.\n  console.log(countWays(m, n));\n}\n\n// Call the main function to start the program.\nmain();\n\n\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Optimal Apporach Here -->\n<strong>Output:</strong>3\n\n\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Optimal Approach-->\n<p><strong>Time Complexity: O(M*N)</strong></p>\n<p>Reason: There are two nested loops</p>\n<p><strong>Space Complexity: O(N)</strong></p>\n<p>Reason: We are using an external array of size \u2018N\u2019 to store only one row.</p>\n</p>\n</details>\n</div>\n</details>\n</div>\n<!-- Optimal Approach Starts from here -->\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n<details>\n<summary class=\"main-summary\">\n<span>\nVideo Explanation\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"yt-video-wrapper\">\n\n<!-- Insert iframe embed Link of Youtube Video-->\n<iframe class=\"lazy-loaded\" loading=\"lazy\" title=\"Grid Unique Paths\" width=\"810\" height=\"456\" data-lazy-type=\"iframe\" data-src=\"https://www.youtube.com/embed/sdE0A2Oxofw?si=JAat1r2rOnDS2TAv\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\" src=\"https://www.youtube.com/embed/xvNwoz-ufXA?feature=oembed\"></iframe><noscript>\n<iframe loading=\"lazy\" title=\"Grid Unique Paths\" width=\"810\" height=\"456\" src=\"https://www.youtube.com/embed/sdE0A2Oxofw?si=JAat1r2rOnDS2TAv\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe></noscript>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script>\n\nconst codeSections = document.querySelectorAll('.code-section');\n\n// Get last selected language from localStorage or set default value\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\n// Update last selected language for all sections and store in localStorage\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\n// Handle copy button click event\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\n// Set initial state of the tabs\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<script>\nconst codeSections = document.querySelectorAll('.code-section');\n\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script src=\"https://takeuforward.org/UXApproachDropDowns/3ApproachJSScript.js\"></script>\n<!-- /wp:html -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;<strong><a href=\"https://www.linkedin.com/in/anshuman-sharma-a1b245194/\" target=\"_blank\" rel=\"noreferrer noopener\">Anshuman Sharma</a></strong> <em>and&nbsp;<a href=\"https://www.linkedin.com/in/abhipsita-das-5b7069212/?originalSubdomain=in\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>Abhipsita Das</strong></a></em>&nbsp;for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->",
    "category_tag": "data-structure",
    "likes": 96,
    "preview": "In this article, we will solve the most asked coding interview problem: Grid Unique Paths Given two values M and N, which represent a matrix[M][N]. We need to find the total unique paths from the t..."
}