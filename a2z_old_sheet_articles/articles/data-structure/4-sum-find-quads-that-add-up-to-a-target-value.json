{
    "dislikes": 6,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:09:09 GMT+0530 (India Standard Time)",
    "slug": "4-sum-find-quads-that-add-up-to-a-target-value",
    "aid": "1404",
    "title": "4 Sum | Find Quads that add up to a target value",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/4-sum",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "greedy",
            "topic-title": "Greedy"
        },
        {
            "topic-id": "sorting",
            "topic-title": "Sorting"
        },
        {
            "topic-id": "two-pointers",
            "topic-title": "Two Pointer"
        }
    ],
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement:</strong> Given an array of N integers, your task is to find unique quads that add up to give a target value. In short, you need to return an array of all the unique quadruplets [arr[a], arr[b], arr[c], arr[d]] such that their sum is equal to a given target.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Pre-req:</strong><em> </em><a href=\"https://takeuforward.org/data-structure/3-sum-find-triplets-that-add-up-to-a-zero/\" target=\"_blank\" rel=\"noopener\" title=\"\">3-sum problem</a> and <a href=\"https://takeuforward.org/data-structure/two-sum-check-if-a-pair-with-given-sum-exists-in-array/\" target=\"_blank\" rel=\"noopener\" title=\"\">2-sum problem</a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Note:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>0 &lt;= a, b, c, d &lt; n<br>a, b, c, and d are distinct.<br>arr[a] + arr[b] + arr[c] + arr[d] == target</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n<details class=\"article_example_details\">\n<summary class=\"article_example_summary\">\n<span><strong>\nExamples\n</strong>\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"atricle_example_content\">\n<pre class=\"wp-block-preformatted\"><!-- Insert New Examples Here -->\n<pre class=\"wp-block-preformatted\"><strong>Example 1:</strong>\n<strong>Input Format:</strong> arr[] = [1,0,-1,0,-2,2], target = 0\n<strong>Result:</strong> [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]\n<strong>Explanation:</strong> We have to find unique quadruplets from the array such that the sum of those elements is equal to the target sum given that is 0. The result obtained is such that the sum of the quadruplets yields 0.\n\n<strong>Example 2:</strong>\n<strong>Input Format:</strong> arr[] = [4,3,3,4,4,2,1,2,1,1], target = 9\n<strong>Result:</strong> [[1,1,3,4],[1,2,2,4],[1,2,3,3]]\n<strong>Explanation:</strong> The sum of all the quadruplets is equal to the target i.e. 9.\n</pre>\n</pre>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Practice Section-->\n<div class=\"practice\">\n<span><strong>Practice: </strong></span>\n<div class=\"problem-buttons\">\n\n<!-- Add Problem Link inside href -->\n<a href=\"https://bit.ly/3Bsovy2\" target=\"_blank\" rel=\"noopener\">\n<span>Solve Problem</span>\n<img src=\"https://static.takeuforward.org/wp/uploads/2023/04/Group-11-5.png\" alt=\"code-studio\">\n</a>\n</div>\n</div>\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\nyourself first. </em></p>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<div class=\"horizontal_navbar_dsa_article\">\n<div class=\"grid_container_three\">\n<a href=\"#brute-force-approach\" class=\"three-boxes box-a\">\nBrute Force Approach:\n</a>\n<a href=\"#better-approach\" class=\"three-boxes box-b\">\nBetter Approach:\n</a>\n<a href=\"#optimal-approach\" class=\"three-boxes box-c\">\nOptimal Approach:\n</a>\n<a href=\"#dsa_article_video_explanation\" class=\"three-boxes box-d\">\n<svg width=\"26\" height=\"26\" viewBox=\"0 0 20 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M8 10L13.19 7L8 4V10ZM19.56 2.17C19.69 2.64 19.78 3.27 19.84 4.07C19.91 4.87 19.94 5.56 19.94 6.16L20 7C20 9.19 19.84 10.8 19.56 11.83C19.31 12.73 18.73 13.31 17.83 13.56C17.36 13.69 16.5 13.78 15.18 13.84C13.88 13.91 12.69 13.94 11.59 13.94L10 14C5.81 14 3.2 13.84 2.17 13.56C1.27 13.31 0.69 12.73 0.44 11.83C0.31 11.36 0.22 10.73 0.16 9.93C0.0900001 9.13 0.0599999 8.44 0.0599999 7.84L0 7C0 4.81 0.16 3.2 0.44 2.17C0.69 1.27 1.27 0.69 2.17 0.44C2.64 0.31 3.5 0.22 4.82 0.16C6.12 0.0899998 7.31 0.0599999 8.41 0.0599999L10 0C14.19 0 16.8 0.16 17.83 0.44C18.73 0.69 19.31 1.27 19.56 2.17Z\" fill=\"red\"></path>\n</svg>\n\n</a>\n<div class=\"box-e tooltip\">\n<svg viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M12.842 9.25L11.9577 10.17C11.2502 10.89 10.8081 11.5 10.8081 13H8.84297V12.5C8.84297 11.39 9.28511 10.39 9.99255 9.67L11.2109 8.41C11.5745 8.05 11.7906 7.55 11.7906 7C11.7906 6.46957 11.5836 5.96086 11.2151 5.58579C10.8465 5.21071 10.3467 5 9.82552 5C9.30434 5 8.80451 5.21071 8.43598 5.58579C8.06745 5.96086 7.86041 6.46957 7.86041 7H5.89531C5.89531 5.93913 6.30938 4.92172 7.04644 4.17157C7.7835 3.42143 8.78316 3 9.82552 3C10.8679 3 11.8675 3.42143 12.6046 4.17157C13.3417 4.92172 13.7557 5.93913 13.7557 7C13.7543 7.84324 13.4259 8.65183 12.842 9.25ZM10.8081 17H8.84297V15H10.8081M9.82552 0C8.53521 0 7.25754 0.258658 6.06545 0.761205C4.87337 1.26375 3.79021 2.00035 2.87783 2.92893C1.03519 4.8043 0 7.34784 0 10C0 12.6522 1.03519 15.1957 2.87783 17.0711C3.79021 17.9997 4.87337 18.7362 6.06545 19.2388C7.25754 19.7413 8.53521 20 9.82552 20C12.4314 20 14.9306 18.9464 16.7732 17.0711C18.6158 15.1957 19.651 12.6522 19.651 10C19.651 4.47 15.2296 0 9.82552 0Z\" fill=\"black\"></path>\n</svg>\n<div class=\"bottom\">\n<p>Expand any one approach by clicking the given options in the bar. Clicking one approach on bar,\ncloses all other expands. You can manually expand more than one approach at a time</p>\n<i></i>\n</div>\n\n</div>\n</div>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Approaches Drop-Down -->\n<div class=\"dsa_article_dropdown_approachs \">\n\n<!-- Brute Force Approach Starts from here -->\n<div id=\"brute-force-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nBrute Force Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n<h3><strong>Solution:</strong></h3>\n<p>In the question, it is clearly stated that for each case the picked indices i.e. a, b, c, and d must be distinct. This means [arr[1], arr[1], arr[2], arr[3]] is not valid and also remember [arr[1], arr[0], arr[2], arr[3]] and [arr[0], arr[1], arr[2], arr[3]] will be considered same.</p>\n<h3><strong>Naive Approach (Brute-force)</strong>:&nbsp;</h3>\n<h3><strong>Approach:</strong></h3>\n<p>The steps are as follows:</p>\n<ol><li>First, we will declare a set data structure as we want unique quadruplets.</li><li>Then we will use the first loop(say i) that will run from 0 to n-1.</li><li>Inside it, there will be the second loop(say j) that will run from i+1 to n-1.</li><li>Then there will be the third loop(say k) that runs from j+1 to n-1.</li><li>Inside loop k, the fourth loop(say l) will run from k+1 to n-1.</li><li>Now, inside these four nested loops, we will check the sum i.e. arr[i]+arr[j]+arr[k]+arr[l], and if it is equal to the target we will sort this quadruplet and insert it in the set data structure.</li><li>Finally, we will return a list of stored quadruplets.</li></ol>\n<p><strong>Intuition: </strong>This approach is pretty straightforward. Here, we will check all possible quadruplets using 4 loops(<em>as we did in the </em><a href=\"https://takeuforward.org/data-structure/3-sum-find-triplets-that-add-up-to-a-zero/\" target=\"_blank\" rel=\"noopener\" title=\"\"><em>3-sum problem</em></a>) and among them, we will consider the ones whose sum is equal to the given target. And before considering them as our answer we need to sort the quadruplets in ascending order.</p>\n<p><strong>Note: </strong><em>For a better understanding of intuition, please watch the video at the bottom of the page.</em></p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n\n<!-- Insert C++ code of Brute Force Here -->\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvector&lt;vector&lt;int&gt;&gt; fourSum(vector&lt;int&gt;&amp; nums, int target) {\n    int n = nums.size(); //size of the array\n    set&lt;vector&lt;int&gt;&gt; st;\n\n    //checking all possible quadruplets:\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = i + 1; j &lt; n; j++) {\n            for (int k = j + 1; k &lt; n; k++) {\n                for (int l = k + 1; l &lt; n; l++) {\n                    // taking bigger data type\n                    // to avoid integer overflow:\n                    long long sum = nums[i] + nums[j];\n                    sum += nums[k];\n                    sum += nums[l];\n\n                    if (sum == target) {\n                        vector&lt;int&gt; temp = {nums[i], nums[j], nums[k], nums[l]};\n                        sort(temp.begin(), temp.end());\n                        st.insert(temp);\n                    }\n                }\n            }\n        }\n    }\n    vector&lt;vector&lt;int&gt;&gt; ans(st.begin(), st.end());\n    return ans;\n}\n\nint main()\n{\n    vector&lt;int&gt; nums = {4, 3, 3, 4, 4, 2, 1, 2, 1, 1};\n    int target = 9;\n    vector&lt;vector&lt;int&gt;&gt; ans = fourSum(nums, target);\n    cout &lt;&lt; \"The quadruplets are: \\n\";\n    for (auto it : ans) {\n        cout &lt;&lt; \"[\";\n        for (auto ele : it) {\n            cout &lt;&lt; ele &lt;&lt; \" \";\n        }\n        cout &lt;&lt; \"] \";\n    }\n    cout &lt;&lt; \"\\n\";\n    return 0;\n}\n\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\n<!-- Insert Java code of Brute Force Here -->\nimport java.util.*;\n\npublic class tUf {\n\n    public static List&lt;List&lt;Integer&gt;&gt; fourSum(int[] nums, int target) {\n        int n = nums.length; // size of the array\n        Set&lt;List&lt;Integer&gt;&gt; set = new HashSet&lt;&gt;();\n\n        // checking all possible quadruplets:\n        for (int i = 0; i &lt; n; i++) {\n            for (int j = i + 1; j &lt; n; j++) {\n                for (int k = j + 1; k &lt; n; k++) {\n                    for (int l = k + 1; l &lt; n; l++) {\n                        // taking bigger data type\n                        // to avoid integer overflow:\n                        long sum = (long)nums[i] + nums[j];\n                        sum += nums[k];\n                        sum += nums[l];\n\n                        if (sum == target) {\n                            List&lt;Integer&gt; temp = Arrays.asList(nums[i], nums[j], nums[k], nums[l]);\n                            Collections.sort(temp);\n                            set.add(temp);\n                        }\n                    }\n                }\n            }\n        }\n        List&lt;List&lt;Integer&gt;&gt; ans = new ArrayList&lt;&gt;(set);\n        return ans;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {4, 3, 3, 4, 4, 2, 1, 2, 1, 1};\n        int target = 9;\n        List&lt;List&lt;Integer&gt;&gt; ans = fourSum(nums, target);\n        System.out.println(\"The quadruplets are: \");\n        for (List&lt;Integer&gt; it : ans) {\n            System.out.print(\"[\");\n            for (int ele : it) {\n                System.out.print(ele + \" \");\n            }\n            System.out.print(\"] \");\n        }\n        System.out.println();\n    }\n}\n\n\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\n<!-- Insert Python code of Brute Force Here -->\nfrom typing import List\nfrom collections import deque\n\ndef fourSum(nums: List[int], target: int) -&gt; List[List[int]]:\n    n = len(nums) # size of the array\n    st = set()\n\n    # checking all possible quadruplets:\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                for l in range(k + 1, n):\n                    # taking bigger data type\n                    # to avoid integer overflow:\n                    sum = nums[i] + nums[j]\n                    sum += nums[k]\n                    sum += nums[l]\n\n                    if sum == target:\n                        temp = [nums[i], nums[j], nums[k], nums[l]]\n                        temp.sort()\n                        st.add(tuple(temp))\n\n    ans = [list(x) for x in st]\n    return ans\n\nif __name__ == '__main__':\n    nums = [4, 3, 3, 4, 4, 2, 1, 2, 1, 1]\n    target = 9\n    ans = fourSum(nums, target)\n    print(\"The quadruplets are:\")\n    for it in ans:\n        print(\"[\", end=\"\")\n        for ele in it:\n            print(ele, end=\" \")\n        print(\"]\", end=\" \")\n    print() \n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\n<!-- Insert JavaScript code of Brute Force Here -->\nfunction fourSum(nums, target) {\n  let n = nums.length;\n  let set = new Set();\n  \n  for (let i = 0; i &lt; n; i++) {\n    for (let j = i + 1; j &lt; n; j++) {\n      for (let k = j + 1; k &lt; n; k++) {\n        for (let l = k + 1; l &lt; n; l++) {\n          let sum = nums[i] + nums[j] + nums[k] + nums[l];\n          \n          if (sum === target) {\n            let temp = [nums[i], nums[j], nums[k], nums[l]];\n            temp.sort((a, b) => a - b);\n            set.add(temp);\n          }\n        }\n      }\n    }\n  }\n  \n  let ans = Array.from(set);\n  return ans;\n}\n\nlet nums = [4, 3, 3, 4, 4, 2, 1, 2, 1, 1];\nlet target = 9;\nlet ans = fourSum(nums, target);\n\nconsole.log(\"The quadruplets are: \");\nfor (let it of ans) {\n  process.stdout.write(\"[\");\n  for (let ele of it) {\n    process.stdout.write(ele + \" \");\n  }\n  process.stdout.write(\"] \");\n}\nconsole.log();\n\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Brute Force Here -->\n<p><strong>Output:</strong> The quadruplets are:\n[1 1 3 4 ] [1 2 2 4 ] [1 2 3 3 ]</p>\u00a0\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n<!-- Insert Time and Space Complexity of Brute Force Here -->\n<p><strong>Time Complexity: </strong>O(N<sup>4</sup>), where N = size of the array.<br><strong>Reason: </strong>Here, we are mainly using 4 nested loops. But we not considering the time complexity of sorting as we are just sorting 4 elements every time.</p>\n<p><strong>Space Complexity: </strong>O(2 * no. of the quadruplets) as we are using a set data structure and a list to store the quads.</p>\n</p>\n</details>\n</div>\n</details>\n</div>\n<!-- Brute Force Approach Ends here -->\n\n\n<!-- Better Approach Starts from here -->\n\n<div id=\"better-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nBetter Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition For Better Approach Here -->\n<h3><strong>Better Approach (Using 3 loops and set data structure)</strong>:&nbsp;</h3>\n<h3><strong>Approach:</strong></h3>\n<p>The steps are as follows:</p>\n<ol><li>First, we will declare a set data structure as we want unique quadruplets.</li><li>Then we will use the first loop(say i) that will run from 0 to n-1.</li><li>Inside it, there will be the second loop(say j) that will run from i+1 to n-1.</li><li>Before the third loop, we will declare a HashSet to store the specific array elements as we intend to search the fourth element in that HashSet.</li><li>Then there will be the third loop(say k) that runs from j+1 to n-1.</li><li>Inside the third loop, we will calculate the value of the fourth element i.e. target - (nums[i]+nums[j]+nums[k]).</li><li>If the fourth element exists in the HashSet, we will sort these four values i.e. nums[i], nums[j], nums[k], and the fourth element, and insert it in the set data structure declared in step 1.</li><li>After that, we will insert the k-th element i.e. nums[k] in the HashSet as we only want to insert those array elements that are in between indices j and k.</li><li>Finally, we will return a list of stored quadruplets stored in the set data structure.</li></ol>\n<h3><strong>Intuition: </strong></h3>\n<p>In the previous approach, we were using 4 loops but in this, we want to reduce that to 3 loops. We have to somehow manage to calculate nums[l] as we are planning to remove the fourth loop(i.e. l). In order to calculate nums[l], we can derive a formula like the following:</p>\n<pre class=\"wp-block-preformatted\">nums[l] = target - (nums[i]+nums[j]+nums[k])\n</pre>\n<p>So, we will first calculate the triplets nums[i], nums[j], and nums[k] using 3 loops and for the fourth one i.e. nums[l] we will not use another loop and instead we will look up the value target-(nums[i]+nums[j]+nums[k]) in the array. Thus we can remove the fourth loop from the algorithm.</p>\n<p>For implementing the search operation of the fourth element, we will use a similar technique as we used in the case of the<a href=\"https://takeuforward.org/data-structure/3-sum-find-triplets-that-add-up-to-a-zero/\" target=\"_blank\" rel=\"noopener\" title=\"\"><em> 3-sum problem</em></a>. We will store all the elements between the indices j and k in a HashSet and then we will search for the fourth element in the HashSet.</p>\n<p><strong>Why we are not inserting all the array elements in the HashSet and then searching for the fourth element:</strong></p>\n<p>Let\u2019s understand this intuition using an example. Assume the given array is {1, 2, -1, -2, 2, 0, -1} and the target = 0. Now, we will notice a situation like the following:</p>\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/04/Screenshot-2023-04-23-084157.png\" alt=\"\" class=\"wp-image-8329\"/></figure>\n<p>Now, the fourth element should be target-(nums[i]+nums[j]+nums[k]) = 0 - (1-1+0) = 0. Now, if all the array elements are in the HashSet and we search for 0, we will end up taking the 0 at index k again. The quadruplets will be {nums[i], nums[j], nums[k], nums[k]} but this is absolutely incorrect. That is why we need to only consider the elements that are in between the indices j and k.</p>\n<p><strong>Note: </strong><em>For a better understanding of intuition, please watch the video at the bottom of the page.</em></p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n\n<!-- Insert C++ Code of Better Approach Here -->\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvector&lt;vector&lt;int&gt;&gt; fourSum(vector&lt;int&gt;&amp; nums, int target) {\n    int n = nums.size(); //size of the array\n    set&lt;vector&lt;int&gt;&gt; st;\n\n    //checking all possible quadruplets:\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = i + 1; j &lt; n; j++) {\n            set&lt;long long&gt; hashset;\n            for (int k = j + 1; k &lt; n; k++) {\n                // taking bigger data type\n                // to avoid integer overflow:\n                long long sum = nums[i] + nums[j];\n                sum += nums[k];\n                long long fourth = target - sum;\n                if (hashset.find(fourth) != hashset.end()) {\n                    vector&lt;int&gt; temp = {nums[i], nums[j], nums[k], (int)(fourth)};\n                    sort(temp.begin(), temp.end());\n                    st.insert(temp);\n                }\n                // put the kth element into the hashset:\n                hashset.insert(nums[k]);\n            }\n        }\n    }\n    vector&lt;vector&lt;int&gt;&gt; ans(st.begin(), st.end());\n    return ans;\n}\n\nint main()\n{\n    vector&lt;int&gt; nums = {4, 3, 3, 4, 4, 2, 1, 2, 1, 1};\n    int target = 9;\n    vector&lt;vector&lt;int&gt;&gt; ans = fourSum(nums, target);\n    cout &lt;&lt; \"The quadruplets are: \\n\";\n    for (auto it : ans) {\n        cout &lt;&lt; \"[\";\n        for (auto ele : it) {\n            cout &lt;&lt; ele &lt;&lt; \" \";\n        }\n        cout &lt;&lt; \"] \";\n    }\n    cout &lt;&lt; \"\\n\";\n    return 0;\n}\n\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\n<!-- Insert Java Code of Better Approach Here -->\nimport java.util.*;\n\npublic class tUf {\n    public static List&lt;List&lt;Integer&gt;&gt; fourSum(int[] nums, int target) {\n        int n = nums.length; // size of the array\n        Set&lt;List&lt;Integer&gt;&gt; st = new HashSet&lt;&gt;();\n\n        // checking all possible quadruplets:\n        for (int i = 0; i &lt; n; i++) {\n            for (int j = i + 1; j &lt; n; j++) {\n                Set&lt;Long&gt; hashset = new HashSet&lt;&gt;();\n                for (int k = j + 1; k &lt; n; k++) {\n                    // taking bigger data type\n                    // to avoid integer overflow:\n                    long sum = nums[i] + nums[j];\n                    sum += nums[k];\n                    long fourth = target - sum;\n                    if (hashset.contains(fourth)) {\n                        List&lt;Integer&gt; temp = new ArrayList&lt;&gt;();\n                        temp.add(nums[i]);\n                        temp.add(nums[j]);\n                        temp.add(nums[k]);\n                        temp.add((int) fourth);\n                        temp.sort(Integer::compareTo);\n                        st.add(temp);\n                    }\n                    // put the kth element into the hashset:\n                    hashset.add((long) nums[k]);\n                }\n            }\n        }\n        List&lt;List&lt;Integer&gt;&gt; ans = new ArrayList&lt;&gt;(st);\n        return ans;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {4, 3, 3, 4, 4, 2, 1, 2, 1, 1};\n        int target = 9;\n        List&lt;List&lt;Integer&gt;&gt; ans = fourSum(nums, target);\n        System.out.println(\"The quadruplets are: \");\n        for (List&lt;Integer&gt; it : ans) {\n            System.out.print(\"[\");\n            for (Integer ele : it) {\n                System.out.print(ele + \" \");\n            }\n            System.out.print(\"] \");\n        }\n        System.out.println();\n    }\n} \n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\n<!-- Insert Python Code of Better Approach Here -->\nfrom typing import List\nimport itertools\n\ndef fourSum(nums: List[int], target: int) -&gt; List[List[int]]:\n    n = len(nums)\n    st = set()\n\n    # checking all possible quadruplets:\n    for i in range(n):\n        for j in range(i+1, n):\n            hashset = set()\n            for k in range(j+1, n):\n                # taking bigger data type to avoid integer overflow:\n                sum_ = nums[i] + nums[j] + nums[k]\n                fourth = target - sum_\n                if fourth in hashset:\n                    temp = [nums[i], nums[j], nums[k], fourth]\n                    temp.sort()\n                    st.add(tuple(temp))\n                # put the kth element into the hashset:\n                hashset.add(nums[k])\n\n    ans = [list(t) for t in st]\n    return ans\n\n\nif __name__ == '__main__':\n    nums = [4, 3, 3, 4, 4, 2, 1, 2, 1, 1]\n    target = 9\n    ans = fourSum(nums, target)\n    print(\"The quadruplets are:\")\n    for it in ans:\n        print(\"[\", end=\"\")\n        for ele in it:\n            print(ele, end=\" \")\n        print(\"]\", end=\" \")\n    print()\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\n<!-- Insert javascript Code of Better Approach Here -->\nfunction fourSum(nums, target) {\n  let n = nums.length;\n  let set = new Set();\n\n  for (let i = 0; i &lt; n; i++) {\n    for (let j = i + 1; j &lt; n; j++) {\n      let hashset = new Set();\n      for (let k = j + 1; k &lt; n; k++) {\n        let sum = nums[i] + nums[j];\n        sum += nums[k];\n        let fourth = target - sum;\n        if (hashset.has(fourth)) {\n          let temp = [nums[i], nums[j], nums[k], fourth];\n          temp.sort((a, b) => a - b);\n          set.add(temp);\n        }\n        hashset.add(nums[k]);\n      }\n    }\n  }\n\n  let ans = Array.from(set);\n  return ans;\n}\n\nlet nums = [4, 3, 3, 4, 4, 2, 1, 2, 1, 1];\nlet target = 9;\nlet ans = fourSum(nums, target);\n\nconsole.log(\"The quadruplets are: \");\nfor (let it of ans) {\n  process.stdout.write(\"[\");\n  for (let ele of it) {\n    process.stdout.write(ele + \" \");\n  }\n  process.stdout.write(\"] \");\n}\nconsole.log();\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Better Approach Here -->\n<p><strong>Output:</strong> The quadruplets are:\n[1 1 3 4 ] [1 2 2 4 ] [1 2 3 3 ]</p>\u00a0\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Better Approach Here -->\n<p><strong>Time Complexity: </strong>O(N<sup>3</sup>*log(M)), where N = size of the array, M = no. of elements in the set.<br><strong>Reason: </strong>Here, we are mainly using 3 nested loops, and inside the loops there are some operations on the set data structure which take log(M) time complexity.</p>\n<p><strong>Space Complexity: </strong>O(2 * no. of the quadruplets)+O(N)<br><strong>Reason: </strong>we are using a set data structure and a list to store the quads. This results in the first term. And the second space is taken by the set data structure we are using to store the array elements. At most, the set can contain approximately all the array elements and so the space complexity is O(N).</p>\n</p>\n</details>\n</div>\n</details>\n</div>\n<!-- Better Approach Ends from here -->\n\n\n<!-- Optimal Approach Starts from here -->\n\n<div id=\"optimal-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nOptimal Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm of Better Approach Here -->\n<h3><strong>Optimal Approach</strong>:&nbsp;</h3>\n<p>In this approach, we intend to get rid of two things i.e. the HashSet we were using for the look-up operation and the set data structure used to store the unique quadruplets.</p>\n<p>Again the solution to this will be similar to the optimal approach of the <em>&nbsp;</em><a href=\"https://takeuforward.org/data-structure/3-sum-find-triplets-that-add-up-to-a-zero/\"><em>3-sum problem</em></a>. In that approach, we had fixed a pointer i, and the rest 2 pointers were moving. Similarly, here, as we are dealing with quads instead of triplets we will fix 2 pointers i.e. i and j and the rest of the 2 pointers will be moving.</p>\n<p>Now, we need to first understand what the HashSet and the set were doing to make our algorithm work without them. So, the set data structure was basically storing the unique quadruplets in sorted order and the HashSet was used to search for the fourth element.</p>\n<p><strong>To get the quadruplets in sorted order, </strong>we will sort the entire array in the first step and <strong>to get the unique quads, </strong>we will simply skip the duplicate numbers while moving the pointers.</p>\n<p><strong>How to skip duplicate numbers:</strong><strong><br></strong>As the entire array is sorted, the duplicate numbers will be in consecutive places. So, while moving a pointer, we will check the current element and the adjacent element. Until they become different, we will move the pointer by 1 place. We will follow this process for all 4 pointers. Thus, we can easily skip the duplicate elements while moving the pointers.</p>\n<p>Now, we can also remove the HashSet as we have two moving pointers i.e. k and l that will find the appropriate value of nums[k] and nums[l]. So, we do not need the HashSet anymore.</p>\n<p>The process will look like the following:</p>\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/04/Screenshot-2023-04-23-085109.png\" alt=\"\" class=\"wp-image-8330\"/></figure>\n<p>Among the 4 pointers, 2 will be fixed and 2 will be moving. In each iteration, we will check if the sum i.e. nums[i]+nums[j]+nums[k]+nums[l] is equal to the target.&nbsp;</p>\n<ul><li><strong>If the sum is greater</strong>, then we need lesser elements and so we will decrease the value of l.&nbsp;</li><li><strong>If the sum is lesser than the target</strong>, we need a bigger value and so we will increase the value of k.&nbsp;</li><li><strong>If the sum is equal to the target,</strong> we will simply insert the quad i.e. nums[i], nums[j], nums[k], and nums[l] into our answer and move the pointers k and l skipping the duplicate elements.</li></ul>\n\n<p><strong>Approach:</strong></p>\n<p>The steps are as follows:</p>\n<ol><li>First, we will sort the entire array.</li><li>We will use a loop(say i) that will run from 0 to n-1. This i will represent one of the fixed pointers. In each iteration, this value will be fixed for all different values of the rest of the 3 pointers. Inside the loop, we will first check if the current and the previous element is the same and if it is we will do nothing and continue to the next value of i.</li><li>After checking inside the loop, we will introduce another fixed pointer j(runs from i+1 to n-1) using another loop. Inside this second loop, we will again check for duplicate elements and only perform any further operation if the elements are different.</li><li>Inside the second loop, there will be 2 moving pointers i.e. k(starts from j+1) and l(starts from the last index). The pointer k will move forward and the pointer l will move backward until they cross each other while the value of i and j will be fixed.<ol><li>Now we will check the sum i.e. nums[i]+nums[j]+nums[k]+nums[l].</li><li><strong>If the sum is greater</strong>, then we need lesser elements and so we will decrease the value of l.</li><li><strong>If the sum is lesser than the target</strong>, we need a bigger value and so we will increase the value of k.&nbsp;</li><li><strong>If the sum is equal to the target,</strong> we will simply insert the quad i.e. nums[i], nums[j], nums[k], and nums[l] into our answer and move the pointers k and l skipping the duplicate elements(<em>i.e. by checking the adjacent elements while moving the pointers</em>).</li></ol></li><li>Finally, we will have a list of unique quadruplets.</li></ol>\n<p><strong>Note: </strong><em>For a better understanding of intuition, please watch the video at the bottom of the page.</em></p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n\n<!-- Insert C++ code of Optimal Approach Here-->\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvector&lt;vector&lt;int&gt;&gt; fourSum(vector&lt;int&gt;&amp; nums, int target) {\n    int n = nums.size(); //size of the array\n    vector&lt;vector&lt;int&gt;&gt; ans;\n\n    // sort the given array:\n    sort(nums.begin(), nums.end());\n\n    //calculating the quadruplets:\n    for (int i = 0; i &lt; n; i++) {\n        // avoid the duplicates while moving i:\n        if (i &gt; 0 &amp;&amp; nums[i] == nums[i - 1]) continue;\n        for (int j = i + 1; j &lt; n; j++) {\n            // avoid the duplicates while moving j:\n            if (j &gt; i + 1 &amp;&amp; nums[j] == nums[j - 1]) continue;\n\n            // 2 pointers:\n            int k = j + 1;\n            int l = n - 1;\n            while (k &lt; l) {\n                long long sum = nums[i];\n                sum += nums[j];\n                sum += nums[k];\n                sum += nums[l];\n                if (sum == target) {\n                    vector&lt;int&gt; temp = {nums[i], nums[j], nums[k], nums[l]};\n                    ans.push_back(temp);\n                    k++; l--;\n\n                    //skip the duplicates:\n                    while (k &lt; l &amp;&amp; nums[k] == nums[k - 1]) k++;\n                    while (k &lt; l &amp;&amp; nums[l] == nums[l + 1]) l--;\n                }\n                else if (sum &lt; target) k++;\n                else l--;\n            }\n        }\n    }\n\n    return ans;\n}\n\nint main()\n{\n    vector&lt;int&gt; nums = {4, 3, 3, 4, 4, 2, 1, 2, 1, 1};\n    int target = 9;\n    vector&lt;vector&lt;int&gt;&gt; ans = fourSum(nums, target);\n    cout &lt;&lt; \"The quadruplets are: \\n\";\n    for (auto it : ans) {\n        cout &lt;&lt; \"[\";\n        for (auto ele : it) {\n            cout &lt;&lt; ele &lt;&lt; \" \";\n        }\n        cout &lt;&lt; \"] \";\n    }\n    cout &lt;&lt; \"\\n\";\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\n<!-- Insert Java code of Optimal Approach Here -->\nimport java.util.*;\n\npublic class tUf {\n    public static List&lt;List&lt;Integer&gt;&gt; fourSum(int[] nums, int target) {\n        int n = nums.length; // size of the array\n        List&lt;List&lt;Integer&gt;&gt; ans = new ArrayList&lt;&gt;();\n\n        // sort the given array:\n        Arrays.sort(nums);\n\n        // calculating the quadruplets:\n        for (int i = 0; i &lt; n; i++) {\n            // avoid the duplicates while moving i:\n            if (i &gt; 0 &amp;&amp; nums[i] == nums[i - 1]) continue;\n            for (int j = i + 1; j &lt; n; j++) {\n                // avoid the duplicates while moving j:\n                if (j &gt; i + 1 &amp;&amp; nums[j] == nums[j - 1]) continue;\n\n                // 2 pointers:\n                int k = j + 1;\n                int l = n - 1;\n                while (k &lt; l) {\n                    long sum = nums[i];\n                    sum += nums[j];\n                    sum += nums[k];\n                    sum += nums[l];\n                    if (sum == target) {\n                        List&lt;Integer&gt; temp = new ArrayList&lt;&gt;();\n                        temp.add(nums[i]);\n                        temp.add(nums[j]);\n                        temp.add(nums[k]);\n                        temp.add(nums[l]);\n                        ans.add(temp);\n                        k++;\n                        l--;\n\n                        // skip the duplicates:\n                        while (k &lt; l &amp;&amp; nums[k] == nums[k - 1]) k++;\n                        while (k &lt; l &amp;&amp; nums[l] == nums[l + 1]) l--;\n                    } else if (sum &lt; target) k++;\n                    else l--;\n                }\n            }\n        }\n\n        return ans;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {4, 3, 3, 4, 4, 2, 1, 2, 1, 1};\n        int target = 9;\n        List&lt;List&lt;Integer&gt;&gt; ans = fourSum(nums, target);\n        System.out.println(\"The quadruplets are: \");\n        for (List&lt;Integer&gt; it : ans) {\n            System.out.print(\"[\");\n            for (int ele : it) {\n                System.out.print(ele + \" \");\n            }\n            System.out.print(\"] \");\n        }\n        System.out.println();\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\n<!-- Insert Python code of Optimal Approach Here -->\nfrom typing import List\n\ndef fourSum(nums: List[int], target: int) -&gt; List[List[int]]:\n    n = len(nums) # size of the array\n    ans = []\n\n    # sort the given array:\n    nums.sort()\n\n    # calculating the quadruplets:\n    for i in range(n):\n        # avoid the duplicates while moving i:\n        if i &gt; 0 and nums[i] == nums[i - 1]:\n            continue\n        for j in range(i + 1, n):\n            # avoid the duplicates while moving j:\n            if j &gt; i + 1 and nums[j] == nums[j - 1]:\n                continue\n\n            # 2 pointers:\n            k = j + 1\n            l = n - 1\n            while k &lt; l:\n                _sum = nums[i] + nums[j] + nums[k] + nums[l]\n                if _sum == target:\n                    temp = [nums[i], nums[j], nums[k], nums[l]]\n                    ans.append(temp)\n                    k += 1\n                    l -= 1\n\n                    # skip the duplicates:\n                    while k &lt; l and nums[k] == nums[k - 1]:\n                        k += 1\n                    while k &lt; l and nums[l] == nums[l + 1]:\n                        l -= 1\n                elif _sum &lt; target:\n                    k += 1\n                else:\n                    l -= 1\n\n    return ans\n\n\nif __name__ == '__main__':\n    nums = [4, 3, 3, 4, 4, 2, 1, 2, 1, 1]\n    target = 9\n    ans = fourSum(nums, target)\n    print(\"The quadruplets are:\")\n    for it in ans:\n        print(\"[\", end=\"\")\n        for ele in it:\n            print(ele, end=\" \")\n        print(\"]\", end=\" \")\n    print()\n\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\n<!-- Insert Python code of Optimal Approach Here -->\nfunction majorityElement(v) {\n    let n = v.length; // size of the array\n\n    let cnt1 = 0, cnt2 = 0; // counts\n    let el1 = -Infinity; // element 1\n    let el2 = -Infinity; // element 2\n\n    // applying the Extended Boyer Moore's Voting Algorithm:\n    for (let i = 0; i &lt; n; i++) {\n        if (cnt1 === 0 &amp;&amp; el2 !== v[i]) {\n            cnt1 = 1;\n            el1 = v[i];\n        }\n        else if (cnt2 === 0 &amp;&amp; el1 !== v[i]) {\n            cnt2 = 1;\n            el2 = v[i];\n        }\n        else if (v[i] === el1) cnt1++;\n        else if (v[i] === el2) cnt2++;\n        else {\n            cnt1--, cnt2--;\n        }\n    }\n\n    let ls = []; // list of answers\n\n    // Manually check if the stored elements in\n    // el1 and el2 are the majority elements:\n    cnt1 = 0, cnt2 = 0;\n    for (let i = 0; i &lt; n; i++) {\n        if (v[i] === el1) cnt1++;\n        if (v[i] === el2) cnt2++;\n    }\n\n    let mini = Math.floor(n / 3) + 1;\n    if (cnt1 &gt;= mini) ls.push(el1);\n    if (cnt2 &gt;= mini) ls.push(el2);\n\n    // Uncomment the following line\n    // if it is told to sort the answer array:\n    // ls.sort(); // TC --&gt; O(2*log2) ~ O(1);\n\n    return ls;\n}\n\nlet arr = [11, 33, 33, 11, 33, 11];\nlet ans = majorityElement(arr);\nconsole.log(\"The majority elements are: \" + ans.join(\" \"));\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Optimal Apporach Here -->\n<p><strong>Output:</strong>The quadruplets are:\n[1 1 3 4 ] [1 2 2 4 ] [1 2 3 3 ]</p>\u00a0\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Optimal Approach-->\n<p><strong>Time Complexity: </strong>O(N<sup>3</sup>), where N = size of the array.<br><strong>Reason: </strong>Each of the pointers i and j, is running for approximately N times. And both the pointers k and l combined can run for approximately N times including the operation of skipping duplicates. So the total time complexity will be O(N<sup>3</sup>).&nbsp;</p>\n<p><strong>Space Complexity: </strong>O(no. of quadruplets), <strong><em>This space is only used to store the answer. We are not using any extra space to solve this problem.</em></strong> So, from that perspective, space complexity can be written as O(1).</p>\n</p>\n</details>\n</div>\n</details>\n</div>\n<!-- Optimal Approach Starts from here -->\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n<details>\n<summary class=\"main-summary\">\n<span>\nVideo Explanation\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"yt-video-wrapper\">\n\n<!-- Insert iframe embed Link of Youtube Video-->\n<iframe class=\"lazy-loaded\" loading=\"lazy\" title=\"4 SUM\" width=\"810\" height=\"456\" data-lazy-type=\"iframe\" data-src=\"https://www.youtube.com/embed/eD95WRfh81c\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\" src=\"https://www.youtube.com/embed/eD95WRfh81c?feature=oembed\"></iframe><noscript>\n<iframe loading=\"lazy\" title=\"4 SUM\" width=\"810\" height=\"456\" src=\"https://www.youtube.com/embed/eD95WRfh81c\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe></noscript>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script>\n\nconst codeSections = document.querySelectorAll('.code-section');\n\n// Get last selected language from localStorage or set default value\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\n// Update last selected language for all sections and store in localStorage\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\n// Handle copy button click event\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\n// Set initial state of the tabs\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<script>\nconst codeSections = document.querySelectorAll('.code-section');\n\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script src=\"https://takeuforward.org/UXApproachDropDowns/3ApproachJSScript.js\"></script>\n<!-- /wp:html -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to <a href=\"https://www.linkedin.com/in/rishirajgirmal/\" target=\"_blank\" rel=\"noreferrer noopener nofollow\" title=\"https://www.linkedin.com/in/rishirajgirmal/\">Rishiraj Girmal</a><em>, <em><a href=\"https://www.linkedin.com/in/imsudip/\" target=\"_blank\" rel=\"noreferrer noopener\">Sudip Ghosh</a></em></em>&nbsp;</em> and <strong><a href=\"https://www.linkedin.com/in/kriti39/\" target=\"_blank\" rel=\"noopener\" title=\"\">KRITIDIPTA GHOSH</a></strong> <em>for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->",
    "category_tag": "data-structure",
    "likes": 160,
    "preview": "Problem Statement: Given an array of N integers, your task is to find unique quads that add up to give a target value. In short, you need to return an array of all the unique quadruplets [arr[a], a..."
}