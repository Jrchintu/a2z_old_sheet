{
    "dislikes": 2,
    "video": "wkDfsKijrZ8",
    "publishedOn": "Sun Mar 24 2024 22:09:10 GMT+0530 (India Standard Time)",
    "slug": "check-for-balanced-parentheses",
    "aid": "1408",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/balanced-paranthesis",
    "title": "Check for Balanced Parentheses",
    "topics": [
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "stack",
            "topic-title": "Stack"
        }
    ],
    "category_tag": "data-structure",
    "likes": 112,
    "preview": "Problem Statement: Check Balanced Parentheses. Given string str containing just the characters '(', ')', '{', '}', '[' and ']', check if the input string is valid and return true if the string is b...",
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement: </strong>Check Balanced Parentheses. Given string str containing just the characters '(', ')', '{', '}', '[' and ']', check if the input string is valid and return true if the string is balanced otherwise return false.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Note</strong>: string str is valid if:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li>Open brackets must be closed by the same type of brackets.</li><li>Open brackets must be closed in the correct order.</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Example 1:</strong> </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\"><strong>Input:</strong> str = \u201c( )[ { } ( ) ]\u201d\n\n<strong>Output:</strong> True\n\n<strong>Explanation</strong>: As every open bracket has its corresponding \nclose bracket. Match parentheses are in correct order \nhence they are balanced.</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p><strong>Example 2:</strong> </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\"><strong>Input:</strong> str = \u201c[ ( )\u201d\n\n<strong>Output:</strong> False\n\n<strong>Explanation</strong>: As \u2018[\u2018 does not have \u2018]\u2019 hence it is \nnot valid and will return false.</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Solution</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"textColor\":\"vivid-red\"} -->\n<p class=\"has-vivid-red-color has-text-color\"><strong><em>Disclaimer</em></strong>:&nbsp;<em>Don\u2019t jump directly to the solution, try it out yourself first.</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Intuition: </strong>&nbsp;We have to keep track of previous as well as most recent opening brackets and also keep in mind the sequence, as after opening of the bracket there should be opposite pairs of brackets. Also handle the corner cases like [ ) ( ] where closing bracket occurs first and opening bracket after it, which is an invalid sequence, as well as [ ( ] ) where the most recent opening didn't get its opposite pair hence it will also not be valid.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So we have to use a data structure that will keep track of first in and last out, hence we will use the <strong>stack</strong>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Approach:&nbsp;</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>Whenever we get the opening bracket we will push it into the stack. I.e \u2018{\u2018, \u2019[\u2019, \u2019(\u2018.</li><li>Whenever we get the closing bracket we will check if the stack is non-empty or not.</li><li>If the stack is empty we will return false, else if it is nonempty then we will check if the topmost element of the stack is the opposite pair of the closing bracket or not.</li><li>If it is not the opposite pair of the closing bracket then return false, else move ahead.</li><li>After we move out of the string the stack has to be empty if it is non-empty then return it as invalid else it is a valid string.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong> </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nbool isValid(string s) {\n        stack&lt;char&gt;st; \n        for(auto it: s) {\n            if(it=='(' || it=='{' || it == '[') st.push(it); \n            else {\n                if(st.size() == 0) return false; \n                char ch = st.top(); \n                st.pop(); \n                if((it == ')' and ch == '(') or  (it == ']' and ch == '[') or (it == '}' and ch == '{')) continue;\n                else return false;\n            }\n        }\n        return st.empty(); \n    }\nint main()\n{\n    string s=\"()[{}()]\";\n    if(isValid(s))\n    cout&lt;&lt;\"True\"&lt;&lt;endl;\n    else\n    cout&lt;&lt;\"False\"&lt;&lt;endl;\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> True</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O(N)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(N)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\nclass TUF {\npublic static boolean isValid(String s) {\n        Stack&lt;Character&gt; st = new Stack&lt;Character&gt;();\n        for (char it : s.toCharArray()) {\n            if (it == '(' || it == '[' || it == '{')\n                st.push(it);\n            else {\n                if(st.isEmpty()) return false;\n                char ch = st.pop(); \n                if((it == ')' &amp;&amp; ch == '(') ||  (it == ']' &amp;&amp; ch == '[') || (it == '}' &amp;&amp; ch == '{')) continue;\n                else return false;\n            }\n        }\n        return st.isEmpty();\n    }\n\n public static void main (String[] args) {\n\t\t\n\t\tString s=\"()[{}()]\";\n\t\tif(isValid(s)==true)\n\t\tSystem.out.println(\"True\");\n\t\telse\n\t\tSystem.out.println(\"False\");\n\t}\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> True</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O(N)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(N)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block\" data-lang=\"python\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">def isValid(s: str) -> bool:\n    st = []\n    for it in s:\n        if it == '(' or it == '{' or it == '[':\n            st.append(it)\n        else:\n            if len(st) == 0:\n                return False\n            ch = st[-1]\n            st.pop()\n            if (it == ')' and ch == '(') or (it == ']' and ch == '[') or (it == '}' and ch == '{'):\n                continue\n            else:\n                return False\n    return len(st) == 0\n\n\n\n\nif __name__ == '__main__':\n    s = \"()[{}()]\"\n    if isValid(s):\n        print(\"True\")\n    else:\n        print(\"False\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> True</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O(N)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(N)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to\u00a0<strong><a href=\"https://www.linkedin.com/in/utkarsh-shrivastava-36260a171/\" target=\"_blank\" rel=\"noreferrer noopener\">Prashant Sahu</a></strong>\u00a0<em><em>and\u00a0<a href=\"https://www.linkedin.com/in/imsudip/\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>Sudip Ghosh</strong></a></em></em></em> <em>for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,\u00a0</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->"
}