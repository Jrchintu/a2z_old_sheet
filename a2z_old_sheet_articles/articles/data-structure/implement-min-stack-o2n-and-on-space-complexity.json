{
    "dislikes": 7,
    "video": "V09NfaGf2ao",
    "publishedOn": "Sun Mar 24 2024 22:09:16 GMT+0530 (India Standard Time)",
    "slug": "implement-min-stack-o2n-and-on-space-complexity",
    "aid": "1436",
    "title": "Implement Min Stack : O(2N) and O(N) Space Complexity",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/implement-min-stack",
    "topics": [
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "stack",
            "topic-title": "Stack"
        }
    ],
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement:</strong> Implement Min Stack | O(2N) and O(N) Space Complexity. Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Examples</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\"><strong>Input Format</strong>:[\"MinStack\", \"push\", \"push\", \"push\", \"getMin\", \"pop\", \"top\", \"getMin\"]\n[\n[ ], [-2], [0], [-3], [ ], [ ], [ ], [ ]\n]\n\n<strong>Result:</strong> [null, null, null, null, -3, null, 0, -2]\n<strong>Explanation:</strong> \nstack &lt; long long &gt; st\nst.push(-2); Push element in stack\nst.push(0); Push element in stack\nst.push(-3); Push element in stack\nst.getMin(); Get minimum element fromstack\nst.pop(); Pop the topmost element\nst.top(); Top element is 0\nst.getMin(); Minimum element is -2\n</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p><strong>Solution:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph {\"textColor\":\"vivid-red\"} -->\n<p class=\"has-vivid-red-color has-text-color\"><strong><em>Disclaimer</em></strong>: <em>Don't jump directly to the solution, try it out yourself first.</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Solution 1: </strong>Using pairs to store the value and minimum element till now.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Approach</strong>: The first element in the pair will store the value and the second element will store the minimum element till now.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When the first push operation comes in we will push the value and store it as minimum itself in the pair.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In the second push operation, we will check if the top element\u2019s minimum is less than the new value. If it is then we will push the value with minimum as the previous top\u2019s minimum. To get the getMin element to take the top\u2019s second element.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code: </strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    \n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">class MinStack {\n  stack &lt; pair &lt; int, int &gt;&gt; st;\n\n  public:\n    void push(int x) {\n      int min;\n      if (st.empty()) {\n        min = x;\n      } else {\n        min = std::min(st.top().second, x);\n      }\n      st.push({x,min});\n    }\n\n  void pop() {\n    st.pop();\n  }\n\n  int top() {\n    return st.top().first;\n  }\n\n  int getMin() {\n    return st.top().second;\n  }\n};</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(1)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(2N)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">class Pair {\n    int x, y;\n    Pair(int x, int y) {\n        this.x = x;\n        this.y = y;\n    }\n}\nclass MinStack {\n    Stack &lt; Pair &gt; st;\n    public MinStack() {\n        st = new Stack &lt; &gt; ();\n    }\n\n    public void push(int x) {\n        int min;\n        if (st.isEmpty()) {\n            min = x;\n        } else {\n            min = Math.min(st.peek().y, x);\n        }\n        st.push(new Pair(x, min));\n    }\n\n    public void pop() {\n        st.pop();\n    }\n\n    public int top() {\n        return st.peek().x;\n    }\n\n    public int getMin() {\n        return st.peek().y;\n    }\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(1)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(2N)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Solution 2:&nbsp;</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Approach:&nbsp;</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Let\u2019s take a variable that stores the minimum number. So whenever a push operation comes in just take that number put it in the stack and update the variable to the number.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Push operation:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now if there is a push operation just check whether that number is less than the min number. If it is smaller than min we will push a modified value which is a push(2 * Val - min) into the stack and will update min to the value of the original number. If it\u2019s not then we will just push it as it is.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>getMin() operation:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We will just return the value of min.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Top operation:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>While returning the top value we know that it is a modified value. We will check if the top value is lesser than min, If it is then we will return the min as the top value.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Pop operation:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>While making pop we will check if the top value is lesser than min, If it is then we must update our min to its previous value. In order to do that min = (2 * min) - (modified value) and we will pop the element.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    \n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">class MinStack {\n  stack &lt; long long > st;\n  long long mini;\n  public:\n    /** initialize your data structure here. */\n    MinStack() {\n      while (st.empty() == false) st.pop();\n      mini = INT_MAX;\n    }\n\n  void push(int value) {\n    long long val = Long.valuevalue;\n    if (st.empty()) {\n      mini = val;\n      st.push(val);\n    } else {\n      if (val &lt; mini) {\n        st.push(2 *val*1LL - mini);\n        mini = val;\n      } else {\n        st.push(val);\n      }\n    }\n  }\n\n  void pop() {\n    if (st.empty()) return;\n    long long el = st.top();\n    st.pop();\n\n    if (el &lt; mini) {\n      mini = 2 * mini - el;\n    }\n  }\n\n  int top() {\n    if (st.empty()) return -1;\n\n    long long el = st.top();\n    if (el &lt; mini) return mini;\n    return el;\n  }\n\n  int getMin() {\n    return mini;\n  }\n};</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(1)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(N)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">class MinStack {\n    Stack &lt; Long &gt; st = new Stack &lt; Long &gt; ();\n    Long mini;\n\n    /** initialize your data structure here. */\n    public MinStack() {\n        mini = Long.MAX_VALUE;\n    }\n\n    public void push(int value) {\n        Long val = Long.valueOf(value);\n        if (st.isEmpty()) {\n            mini = val;\n            st.push(val);\n        } else {\n            if (val &lt; mini) {\n                st.push(2 * val - mini);\n                mini = val;\n            } else {\n                st.push(val);\n            }\n        }\n    }\n\n    public void pop() {\n        if (st.isEmpty()) return;\n\n        Long val = st.pop();\n        if (val &lt; mini) {\n            mini = 2 * mini - val;\n        }\n    }\n\n    public int top() {\n        Long val = st.peek();\n        if (val &lt; mini) {\n            return mini.intValue();\n        }\n        return val.intValue();\n    }\n\n    public int getMin() {\n        return mini.intValue();\n    }\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(1)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(N)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em><em>Special thanks to <strong><a href=\"https://www.linkedin.com/in/rushikeshadhav\" target=\"_blank\" rel=\"noreferrer noopener nofollow\">Rushikesh Adhav</a></strong>&nbsp;for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/contribute/help-us-grow-takeuforward/\">please check out this articl</a><em>e</em></em></p></blockquote>\n<!-- /wp:quote -->",
    "category_tag": "data-structure",
    "likes": 117,
    "preview": "Problem Statement: Implement Min Stack | O(2N) and O(N) Space Complexity. Design a stack that supports push, pop, top, and retrieving the minimum element in constant time. Examples: Input Format:[\"..."
}