{
    "dislikes": 12,
    "video": "IexN60k62jo",
    "publishedOn": "Sun Mar 24 2024 22:09:22 GMT+0530 (India Standard Time)",
    "slug": "merge-overlapping-sub-intervals",
    "aid": "1466",
    "title": "Merge Overlapping Sub-intervals",
    "tuf_plus": "",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        }
    ],
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement:</strong> Given an array of intervals, merge all the overlapping intervals and return an array of non-overlapping intervals.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n<details class=\"article_example_details\">\n<summary class=\"article_example_summary\">\n<span><strong>\nExamples\n</strong>\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"atricle_example_content\">\n<pre class=\"wp-block-preformatted\"><!-- Insert New Examples Here -->\n<pre class=\"wp-block-preformatted\"><strong>Example 1:</strong>\n<pre class=\"wp-block-preformatted\"><strong>Example 1:</strong> \n\n<strong>Input:</strong> intervals=[[1,3],[2,6],[8,10],[15,18]]\n\n<strong>Output:</strong> [[1,6],[8,10],[15,18]]\n\n<strong>Explanation:</strong> Since intervals [1,3] and [2,6] are overlapping we can merge them to form [1,6]\n intervals.\n\n<strong>Example 2:</strong>\n\n<strong>Input:</strong> [[1,4],[4,5]]\n\n<strong>Output:</strong> [[1,5]]\n\n<strong>Explanation:</strong> Since intervals [1,4] and [4,5] are overlapping we can merge them to form [1,5].</pre></pre>\n</pre></div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Practice Section-->\n<div class=\"practice\">\n<span><strong>Practice: </strong></span>\n<div class=\"problem-buttons\">\n\n<!-- Add Problem Link inside href -->\n<a href=\"https://bit.ly/3pAeTyp\" target=\"_blank\" rel=\"noopener\">\n<span>Solve Problem</span>\n<img src=\"https://static.takeuforward.org/wp/uploads/2023/04/Group-11-5.png\" alt=\"code-studio\">\n</a>\n</div>\n</div>\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\nyourself first. </em></p>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<div class=\"horizontal_navbar_dsa_article\">\n<div class=\"grid_container_two\">\n<a href=\"#brute-force-approach\" class=\"two-boxes box-a\">\nBrute Force Approach\n</a>\n<a href=\"#optimal-approach\" class=\"two-boxes box-c\">\nOptimal Approach\n</a>\n<a href=\"#dsa_article_video_explanation\" class=\"three-boxes box-d\">\n<svg width=\"26\" height=\"26\" viewBox=\"0 0 20 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M8 10L13.19 7L8 4V10ZM19.56 2.17C19.69 2.64 19.78 3.27 19.84 4.07C19.91 4.87 19.94 5.56 19.94 6.16L20 7C20 9.19 19.84 10.8 19.56 11.83C19.31 12.73 18.73 13.31 17.83 13.56C17.36 13.69 16.5 13.78 15.18 13.84C13.88 13.91 12.69 13.94 11.59 13.94L10 14C5.81 14 3.2 13.84 2.17 13.56C1.27 13.31 0.69 12.73 0.44 11.83C0.31 11.36 0.22 10.73 0.16 9.93C0.0900001 9.13 0.0599999 8.44 0.0599999 7.84L0 7C0 4.81 0.16 3.2 0.44 2.17C0.69 1.27 1.27 0.69 2.17 0.44C2.64 0.31 3.5 0.22 4.82 0.16C6.12 0.0899998 7.31 0.0599999 8.41 0.0599999L10 0C14.19 0 16.8 0.16 17.83 0.44C18.73 0.69 19.31 1.27 19.56 2.17Z\" fill=\"red\"></path>\n</svg>\n\n</a>\n<div class=\"box-e tooltip\">\n<svg viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M12.842 9.25L11.9577 10.17C11.2502 10.89 10.8081 11.5 10.8081 13H8.84297V12.5C8.84297 11.39 9.28511 10.39 9.99255 9.67L11.2109 8.41C11.5745 8.05 11.7906 7.55 11.7906 7C11.7906 6.46957 11.5836 5.96086 11.2151 5.58579C10.8465 5.21071 10.3467 5 9.82552 5C9.30434 5 8.80451 5.21071 8.43598 5.58579C8.06745 5.96086 7.86041 6.46957 7.86041 7H5.89531C5.89531 5.93913 6.30938 4.92172 7.04644 4.17157C7.7835 3.42143 8.78316 3 9.82552 3C10.8679 3 11.8675 3.42143 12.6046 4.17157C13.3417 4.92172 13.7557 5.93913 13.7557 7C13.7543 7.84324 13.4259 8.65183 12.842 9.25ZM10.8081 17H8.84297V15H10.8081M9.82552 0C8.53521 0 7.25754 0.258658 6.06545 0.761205C4.87337 1.26375 3.79021 2.00035 2.87783 2.92893C1.03519 4.8043 0 7.34784 0 10C0 12.6522 1.03519 15.1957 2.87783 17.0711C3.79021 17.9997 4.87337 18.7362 6.06545 19.2388C7.25754 19.7413 8.53521 20 9.82552 20C12.4314 20 14.9306 18.9464 16.7732 17.0711C18.6158 15.1957 19.651 12.6522 19.651 10C19.651 4.47 15.2296 0 9.82552 0Z\" fill=\"black\"></path>\n</svg>\n<div class=\"bottom\">\n<p>Expand any one approach by clicking the given options in the bar. Clicking one approach on bar,\ncloses all other expands. You can manually expand more than one approach at a time</p>\n<i></i>\n</div>\n\n</div>\n</div>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Approaches Drop-Down -->\n<div class=\"dsa_article_dropdown_approachs \">\n\n<!-- Brute Force Approach Starts from here -->\n<div id=\"brute-force-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nBrute Force Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n<h3><strong>Solution:</strong></h3>\n<p>In this article, in order to understand the concept in a better way, we have assumed the intervals in the form<strong> (start, end)</strong>. The first and second elements of each interval can be assumed as the start and end of that particular interval. We are going to use this convention i.e. the names, start and end, throughout the article.</p>\n<h3><strong>Naive Approach (Brute-force)</strong>:&nbsp;</h3>\n<h3><strong>Approach:</strong></h3>\n<p>The steps are as follows:</p>\n<ol><li>First, we will group the closer intervals by sorting the given array of intervals(<em>if it is not already sorted</em>).</li><li>After that, we will select one interval at a time using a loop(<strong><em>say i</em></strong>) and insert it into our answer list(<em>if the answer list is empty or the current interval cannot be merged with the last interval of the answer list</em>). While traversing and inserting we will skip the intervals that lie in the last inserted interval of our answer list.</li><li>Now, for each interval arr[i], using another loop (<strong><em>say j</em></strong>) we are going to check the rest of the intervals(<em>i.e. From index i+1 to n-1</em>) if they can be merged with the selected interval.</li><li>Inside loop j, we will continue to merge all the intervals that lie in the selected interval.&nbsp;<ol><li><strong>How to check if the current interval can be merged with the selected interval: </strong><strong><br></strong>We will compare the current interval\u2019s start with the end of the selected interval. If the start is smaller or equal to the end, we can conclude the current interval can be a part of the selected interval. So, we will update the selected interval\u2019s end with the<strong><em> maximum(current interval\u2019s end, selected interval\u2019s end) </em></strong>in the answer list(<em>not in the original array</em>).</li></ol></li><li>We will break out of loop j, from the first element that cannot be a part of the selected interval.<ol><li><strong>How to check if the current interval is not a part of the selected interval:</strong><strong><br></strong>We will compare the current interval\u2019s start with the end of the selected interval. If the start is greater than the end, we can conclude the current interval cannot be a part of the selected interval.</li></ol></li><li>Finally, we will return the answer list.</li></ol>\n<h3><strong>Intuition: </strong></h3>\n<p>The intuition of this approach is pretty straightforward. We are just grouping close intervals by sorting the given array. After that, we merge an interval with the other by checking if one can be a part of the other interval. For this checking, we are first selecting a particular interval using a loop and then we are comparing the rest of the intervals using another loop.</p>\n<p><strong>Note: </strong><em>For a better understanding of intuition, please watch the video at the bottom of the page.</em></p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n\n<!-- Insert C++ code of Brute Force Here -->\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvector&lt;vector&lt;int&gt;&gt; mergeOverlappingIntervals(vector&lt;vector&lt;int&gt;&gt; &amp;arr) {\n    int n = arr.size(); // size of the array\n\n    //sort the given intervals:\n    sort(arr.begin(), arr.end());\n\n    vector&lt;vector&lt;int&gt;&gt; ans;\n\n    for (int i = 0; i &lt; n; i++) { // select an interval:\n        int start = arr[i][0];\n        int end = arr[i][1];\n\n        //Skip all the merged intervals:\n        if (!ans.empty() &amp;&amp; end &lt;= ans.back()[1]) {\n            continue;\n        }\n\n        //check the rest of the intervals:\n        for (int j = i + 1; j &lt; n; j++) {\n            if (arr[j][0] &lt;= end) {\n                end = max(end, arr[j][1]);\n            }\n            else {\n                break;\n            }\n        }\n        ans.push_back({start, end});\n    }\n    return ans;\n}\n\nint main()\n{\n    vector&lt;vector&lt;int&gt;&gt; arr = {{1, 3}, {8, 10}, {2, 6}, {15, 18}};\n    vector&lt;vector&lt;int&gt;&gt; ans = mergeOverlappingIntervals(arr);\n    cout &lt;&lt; \"The merged intervals are: \" &lt;&lt; \"\\n\";\n    for (auto it : ans) {\n        cout &lt;&lt; \"[\" &lt;&lt; it[0] &lt;&lt; \", \" &lt;&lt; it[1] &lt;&lt; \"] \";\n    }\n    cout &lt;&lt; endl;\n    return 0;\n}\n\n\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\n<!-- Insert Java code of Brute Force Here -->\nimport java.util.*;\n\npublic class tUf {\n\n    public static List&lt;List&lt;Integer&gt;&gt; mergeOverlappingIntervals(int[][] arr) {\n        int n = arr.length; // size of the array\n        //sort the given intervals:\n        Arrays.sort(arr, new Comparator&lt;int[]&gt;() {\n            public int compare(int[] a, int[] b) {\n                return a[0] - b[0];\n            }\n        });\n\n        List&lt;List&lt;Integer&gt;&gt; ans = new ArrayList&lt;&gt;();\n\n        for (int i = 0; i &lt; n; i++) { // select an interval:\n            int start = arr[i][0];\n            int end = arr[i][1];\n\n            //Skip all the merged intervals:\n            if (!ans.isEmpty() &amp;&amp; end &lt;= ans.get(ans.size() - 1).get(1)) {\n                continue;\n            }\n\n            //check the rest of the intervals:\n            for (int j = i + 1; j &lt; n; j++) {\n                if (arr[j][0] &lt;= end) {\n                    end = Math.max(end, arr[j][1]);\n                } else {\n                    break;\n                }\n            }\n            ans.add(Arrays.asList(start, end));\n        }\n        return ans;\n    }\n\n    public static void main(String[] args) {\n        int[][] arr = {{1, 3}, {8, 10}, {2, 6}, {15, 18}};\n        List&lt;List&lt;Integer&gt;&gt; ans = mergeOverlappingIntervals(arr);\n        System.out.print(\"The merged intervals are: \\n\");\n        for (List&lt;Integer&gt; it : ans) {\n            System.out.print(\"[\" + it.get(0) + \", \" + it.get(1) + \"] \");\n        }\n        System.out.println();\n    }\n\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\n<!-- Insert Python code of Brute Force Here -->\nfrom typing import List\n\ndef mergeOverlappingIntervals(arr: List[List[int]]) -&gt; List[List[int]]:\n    n = len(arr) # size of the array\n\n    # sort the given intervals:\n    arr.sort()\n\n    ans = []\n\n    for i in range(n): # select an interval:\n        start, end = arr[i][0], arr[i][1]\n\n        # Skip all the merged intervals:\n        if ans and end &lt;= ans[-1][1]:\n            continue\n\n        # check the rest of the intervals:\n        for j in range(i + 1, n):\n            if arr[j][0] &lt;= end:\n                end = max(end, arr[j][1])\n            else:\n                break\n        ans.append([start, end])\n    return ans\n\nif __name__ == '__main__':\n    arr = [[1, 3], [8, 10], [2, 6], [15, 18]]\n    ans = mergeOverlappingIntervals(arr)\n    print(\"The merged intervals are:\")\n    for it in ans:\n        print(f\"[{it[0]}, {it[1]}]\", end=\" \")\n    print()\n\n\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\n<!-- Insert javascript code of Brute Force Here -->\nfunction mergeOverlappingIntervals(arr) {\n  const n = arr.length; // size of the array\n\n  //sort the given intervals:\n  arr.sort((a, b) =&gt; a[0] - b[0]);\n\n  const ans = [];\n\n  for (let i = 0; i &lt; n; i++) { // select an interval:\n    let start = arr[i][0];\n    let end = arr[i][1];\n\n    //Skip all the merged intervals:\n    if (ans.length &amp;&amp; end &lt;= ans[ans.length - 1][1]) {\n      continue;\n    }\n\n    //check the rest of the intervals:\n    for (let j = i + 1; j &lt; n; j++) {\n      if (arr[j][0] &lt;= end) {\n        end = Math.max(end, arr[j][1]);\n      } else {\n        break;\n      }\n    }\n    ans.push([start, end]);\n  }\n  return ans;\n}\n\nconst arr = [[1, 3], [8, 10], [2, 6], [15, 18]];\nconst ans = mergeOverlappingIntervals(arr);\nconsole.log(\"The merged intervals are:\");\nfor (let it of ans) {\n  console.log(`[${it[0]}, ${it[1]}]`);\n}\n\n\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Brute Force Here -->\n<strong>Output:</strong> [[1,6],[8,10],[15,18]]\n\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n<!-- Insert Time and Space Complexity of Brute Force Here -->\n</p><p><strong>Time Complexity: </strong>O(N*logN) + O(2*N), where N = the size of the given array.<br><strong>Reason: </strong>Sorting the given array takes <strong>&nbsp;</strong>O(N*logN) time complexity. Now, after that, we are using 2 loops i and j. But while using loop i, we skip all the intervals that are merged with loop j. So, we can conclude that every interval is roughly visited twice(roughly, once for checking or skipping and once for merging). So, the time complexity will be 2*N instead of N<sup>2</sup>.</p>\n<p><strong>Space Complexity: </strong>O(N), as we are using an answer list to store the merged intervals. Except for the answer array, we are not using any extra space.</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Brute Force Approach Ends here -->\n\n\n<!-- Optimal Approach Starts from here -->\n\n<div id=\"optimal-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nOptimal Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm of Better Approach Here -->\n<h3><strong>Optimal Approach</strong>:&nbsp;</h3>\n<h3><strong>Intuition: </strong></h3>\n<p>In the previous approach, while checking the intervals, we first selected an interval using a loop and then compared it with others using another loop. But in this approach, we will try to do the same using a single loop. Let\u2019s understand how:</p>\n<p>We will start traversing the given array with a single loop. At the first index, as our answer list is empty, we will insert the first element into the answer list. While traversing afterward we can find two different cases:</p>\n<p><strong>Case 1: If the current interval can be merged with the last inserted interval of the answer list:</strong><strong><br></strong>In this case, we will update the end of the last inserted interval with the <strong><em>maximum(current interval\u2019s end, last inserted interval\u2019s end) </em></strong>and continue moving afterward<strong><em>.&nbsp;</em></strong></p>\n<p><strong>Case 2: If the current interval cannot be merged with the last inserted interval of the answer list:</strong><strong><br></strong>In this case, we will insert the current interval in the answer array as it is. And after this insertion, the last inserted interval of the answer list will obviously be updated to the current interval.</p>\n<p><strong>Note:</strong> <em>Within the previous approach,</em><strong><em> </em></strong><em>we have already discussed</em> <em>how to check if the current interval can or cannot be merged with the other interval</em>.</p>\n<h3><strong>Approach:</strong></h3>\n<p>The steps are as follows:</p>\n<ol><li>First, we will group the closer intervals by sorting the given array of intervals(<em>if it is not already sorted</em>).</li><li>After that, we will start traversing the array using a loop(<strong><em>say i</em></strong>) and insert the first element into our answer list(<em>as the answer list is empty</em>).</li><li>Now, while traversing we will face two different cases:<ol><li><strong>Case 1: If the current interval can be merged with the last inserted interval of the answer list:</strong><strong><br></strong>In this case, we will update the end of the last inserted interval with the <strong><em>maximum(current interval\u2019s end, last inserted interval\u2019s end) </em></strong>and continue moving afterward<strong><em>.&nbsp;</em></strong></li><li><strong>Case 2: If the current interval cannot be merged with the last inserted interval of the answer list:</strong><strong><br></strong>In this case, we will insert the current interval in the answer array as it is. And after this insertion, the last inserted interval of the answer list will obviously be updated to the current interval.</li></ol></li><li>Thus the answer list will be updated with the merged intervals and finally, we will return the answer list.</li></ol>\n<p><strong>Intuition: </strong>Since we have sorted the intervals, the intervals which will be merging are bound to be adjacent. We kept on merging simultaneously as we were traversing through the array and when the element was non-overlapping we simply inserted the element in our answer list.</p>\n<h3><strong>Dry Run:</strong></h3>\n<p>This dry run will further simplify the concept:</p>\n<p>The selected interval at each step is marked with yellow.</p>\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/05/Screenshot-2023-05-07-200230.png\" alt=\"\" class=\"wp-image-8427\"></figure>\n<p><strong>Note: </strong><em>For a better understanding of intuition, please watch the video at the bottom of the page.</em></p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n\n<!-- Insert C++ code of Optimal Approach Here-->\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvector&lt;vector&lt;int&gt;&gt; mergeOverlappingIntervals(vector&lt;vector&lt;int&gt;&gt; &amp;arr) {\n    int n = arr.size(); // size of the array\n\n    //sort the given intervals:\n    sort(arr.begin(), arr.end());\n\n    vector&lt;vector&lt;int&gt;&gt; ans;\n\n    for (int i = 0; i &lt; n; i++) {\n        // if the current interval does not\n        // lie in the last interval:\n        if (ans.empty() || arr[i][0] &gt; ans.back()[1]) {\n            ans.push_back(arr[i]);\n        }\n        // if the current interval\n        // lies in the last interval:\n        else {\n            ans.back()[1] = max(ans.back()[1], arr[i][1]);\n        }\n    }\n    return ans;\n}\n\nint main()\n{\n    vector&lt;vector&lt;int&gt;&gt; arr = {{1, 3}, {8, 10}, {2, 6}, {15, 18}};\n    vector&lt;vector&lt;int&gt;&gt; ans = mergeOverlappingIntervals(arr);\n    cout &lt;&lt; \"The merged intervals are: \" &lt;&lt; \"\\n\";\n    for (auto it : ans) {\n        cout &lt;&lt; \"[\" &lt;&lt; it[0] &lt;&lt; \", \" &lt;&lt; it[1] &lt;&lt; \"] \";\n    }\n    cout &lt;&lt; endl;\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\n<!-- Insert Java code of Optimal Approach Here -->\nimport java.util.*;\n\npublic class Main {\n\n    public static List&lt;List&lt;Integer&gt;&gt; mergeOverlappingIntervals(int[][] arr) {\n        int n = arr.length; // size of the array\n        //sort the given intervals:\n        Arrays.sort(arr, new Comparator&lt;int[]&gt;() {\n            public int compare(int[] a, int[] b) {\n                return a[0] - b[0];\n            }\n        });\n\n        List&lt;List&lt;Integer&gt;&gt; ans = new ArrayList&lt;&gt;();\n\n        for (int i = 0; i &lt; n; i++) {\n            // if the current interval does not\n            // lie in the last interval:\n            if (ans.isEmpty() || arr[i][0] &gt; ans.get(ans.size() - 1).get(1)) {\n                ans.add(Arrays.asList(arr[i][0], arr[i][1]));\n            }\n            // if the current interval\n            // lies in the last interval:\n            else {\n                ans.get(ans.size() - 1).set(1,\n                                            Math.max(ans.get(ans.size() - 1).get(1), arr[i][1]));\n            }\n        }\n        return ans;\n    }\n\n    public static void main(String[] args) {\n        int[][] arr = {{1, 3}, {8, 10}, {2, 6}, {15, 18}};\n        List&lt;List&lt;Integer&gt;&gt; ans = mergeOverlappingIntervals(arr);\n        System.out.print(\"The merged intervals are: \\n\");\n        for (List&lt;Integer&gt; it : ans) {\n            System.out.print(\"[\" + it.get(0) + \", \" + it.get(1) + \"] \");\n        }\n        System.out.println();\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\n<!-- Insert Python code of Optimal Approach Here -->\nfrom typing import List\n\ndef mergeOverlappingIntervals(arr: List[List[int]]) -&gt; List[List[int]]:\n    n = len(arr) # size of the array\n\n    # sort the given intervals:\n    arr.sort()\n\n    ans = []\n\n    for i in range(n):\n        # if the current interval does not\n        # lie in the last interval:\n        if not ans or arr[i][0] &gt; ans[-1][1]:\n            ans.append(arr[i])\n        # if the current interval\n        # lies in the last interval:\n        else:\n            ans[-1][1] = max(ans[-1][1], arr[i][1])\n    return ans\n\nif __name__ == '__main__':\n    arr = [[1, 3], [8, 10], [2, 6], [15, 18]]\n    ans = mergeOverlappingIntervals(arr)\n    print(\"The merged intervals are:\")\n    for it in ans:\n        print(f\"[{it[0]}, {it[1]}]\", end=\" \")\n    print()\n\n\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\n<!-- Insert javascript code of Brute Force Here -->\nfunction mergeOverlappingIntervals(arr) {\n  const n = arr.length;\n  \n  // sort the given intervals\n  arr.sort((a, b) =&gt; a[0] - b[0]);\n  \n  const ans = [arr[0]];\n  \n  for (let i = 1; i &lt; n; i++) {\n    const last = ans[ans.length - 1];\n    const curr = arr[i];\n    \n    // if the current interval overlaps with the last interval\n    if (curr[0] &lt;= last[1]) {\n      last[1] = Math.max(last[1], curr[1]);\n    }\n    // if the current interval does not overlap with the last interval\n    else {\n      ans.push(curr);\n    }\n  }\n  \n  return ans;\n}\n\nconst arr = [[1, 3], [8, 10], [2, 6], [15, 18]];\nconst ans = mergeOverlappingIntervals(arr);\nconsole.log(\"The merged intervals are:\");\nfor (let it of ans) {\n  console.log(`[${it[0]}, ${it[1]}]`);\n}\n\n\n\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Optimal Apporach Here -->\n<strong>Output:</strong> [[1,6],[8,10],[15,18]]\n\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Optimal Approach-->\n</p><p><strong>Time Complexity: </strong>O(N*logN) + O(N), where N = the size of the given array.<br><strong>Reason: </strong>Sorting the given array takes <strong>&nbsp;</strong>O(N*logN) time complexity. Now, after that, we are just using a single loop that runs for N times. So, the time complexity will be O(N).</p>\n<p><strong>Space Complexity: </strong>O(N), as we are using an answer list to store the merged intervals. Except for the answer array, we are not using any extra space.</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Optimal Approach Starts from here -->\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n<details>\n<summary class=\"main-summary\">\n<span>\nVideo Explanation\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"yt-video-wrapper\">\n\n<!-- Insert iframe embed Link of Youtube Video-->\n<iframe class=\"lazy-loaded\" loading=\"lazy\" title=\"Merge Overlapping SubInterval\" width=\"810\" height=\"456\" data-lazy-type=\"iframe\" data-src=\"https://www.youtube.com/embed/IexN60k62jo\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\" src=\"https://www.youtube.com/embed/IexN60k62jo?feature=oembed\"></iframe><noscript>\n<iframe loading=\"lazy\" title=\"Merge Overlapping SubInterval\" width=\"810\" height=\"456\" src=\"https://www.youtube.com/embed/IexN60k62jo\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe></noscript>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script>\n\nconst codeSections = document.querySelectorAll('.code-section');\n\n// Get last selected language from localStorage or set default value\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\n// Update last selected language for all sections and store in localStorage\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\n// Handle copy button click event\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\n// Set initial state of the tabs\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<script>\nconst codeSections = document.querySelectorAll('.code-section');\n\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script src=\"https://takeuforward.org/UXApproachDropDowns/2ApproachJSScript.js\"></script>\n<!-- /wp:html -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;<a href=\"https://www.linkedin.com/in/pranav-padawe-9486241ba/\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>Pranav Padawe</strong></a><em><em>,&nbsp;<a href=\"https://www.linkedin.com/in/imsudip/\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>Sudip Ghosh</strong></a> and <strong><a href=\"https://www.linkedin.com/in/kriti39/\" target=\"_blank\" rel=\"noopener\" title=\"\">KRITIDIPTA GHOSH</a></strong></em></em></em> <em>for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->",
    "category_tag": "data-structure",
    "likes": 313,
    "preview": "Problem Statement: Given an array of intervals, merge all the overlapping intervals and return an array of non-overlapping intervals. Examples Example 1: Example 1: Input: intervals=[[1,3],[2,6],[8..."
}