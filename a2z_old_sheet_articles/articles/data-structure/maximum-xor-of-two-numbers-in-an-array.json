{
    "dislikes": 0,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:09:28 GMT+0530 (India Standard Time)",
    "slug": "maximum-xor-of-two-numbers-in-an-array",
    "aid": "1500",
    "title": "Maximum XOR of Two Numbers in an Array",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/maximum-xor-of-two-numbers-in-an-array",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "trie",
            "topic-title": "Trie"
        }
    ],
    "content": "<p><strong>Problem Statement: </strong>Given two arrays of non-negative integers. FInd the maximum possible value of A XOR B where A and B are elements from the arr1 and arr2 array respectively and XOR represents the Bitwise XOR operation.\n</p>\n<div id=\"article_examples\">\n    <details class=\"article_example_details\">\n        <summary class=\"article_example_summary\">\n            <span><strong>\n                    Examples\n                </strong>\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"atricle_example_content\">\n            <pre class=\"wp-block-preformatted\">\n                <span><strong>Example 1:</strong></span>\n\t\t\t\t<span><strong>Input:</strong>Arr1: 3 10 5 25 2, Arr2: 8 1 2 12 7 </span>\t\t\n\t\t\t\t\n\t\t\t\t<span><strong>Output: </strong>Maximum XOR value: 30</span>\n\t\t\t\t\t\t\n\t\t\t\t<span><strong>Explanation: </strong>The maximum XOR value is 30, which occurs when XORing 7 and 25.</span>\n\t\t\t\t\n\t\t\t\t<span><strong>Example 2:</strong></span>\n\t\t\t\t<span><strong>Input:</strong>Arr1:  9, 8, 7, 5, 4, Arr2: 12, 44, 22, 10</span>\t\t\n\t\t\t\t\n\t\t\t\t<span><strong>Output: </strong>Maximum XOR value: 43</span>\n\t\t\t\t\t\t\n\t\t\t\t<span><strong>Explanation: </strong>The maximum XOR value is 43, which occurs when XORing 44 and 7.</span>\n\t\t\t\t\t\t\n\t\t\t\t\t\n            </pre>\n        </div>\n    </details>\n</div>\n\n<!-- This is Practice Section-->\n<div class=\"practice\">\n    <span><strong>Practice: </strong></span>\n    <div class=\"problem-buttons\">\n\n        <!-- Add Problem Link inside href -->\n        <a href=\"https://www.codingninjas.com/codestudio/problems/maximum-xor_3119012?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf\" target=\"_blank\" rel=\"noopener\">\n            <span>Solve Problem</span>\n            <img src=\"https://takeuforward-content-images.s3.ap-south-1.amazonaws.com/content/Group-11-5-pFOq-8ga\"\n                alt=\"code-studio\">\n        </a>\n    </div>\n    <!--<div class=\"problem-buttons\">\n         Add Problem Link inside href \n        <a href=\"\" target=\"_blank\" rel=\"noopener\">\n            <span>Solve Problem</span>\n            <img src=\"https://cdn.iconscout.com/icon/free/png-256/free-leetcode-3521542-2944960.png?f=webp\"\n                alt=\"leetcode\">\n        </a>\n    </div>-->\n</div>\n\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\n        yourself first. </em></p>\n\n\n<div id=\"brute-force-approach\">\n    <details>\n        <summary class=\"main-summary\">\n            <span>\n                Optimal Approach \n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                </path>\n            </svg>\n        </summary>\n        <div class=\"common-drops\">\n            <details class=\"secondary-details\" open=\"\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Algorithm / Intuition\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <div class=\"approach-algorithm\">\n                    <!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n                    \n                    <p>XOR, or exclusive OR, is a binary bitwise operation that returns true (1) only when the operands differ. If the bits are the same, the result is 0. If the bits are different, the result is 1.</p>\n                    <p>Here is the truth table for XOR:</p>\n                    <style>\n                    table, th, td {\n  \t\t\t\t\tborder: 1px solid black;\n  \t\t\t\t\tborder-collapse: collapse;\n\t\t\t\t\t}\n\t\t\t\t\t</style>\n\t\t\t\t\t<table >\n  \t\t\t\t\t<tr>\n    \t\t\t\t<th>Input 1</th>\n    \t\t\t\t<th>Input 2</th>\n    \t\t\t\t<th>Output</th>\n  \t\t\t\t\t</tr>\n  \t\t\t\t\t<tr>\n    \t\t\t\t<td>0</td>\n    \t\t\t\t<td>0</td>\n    \t\t\t\t<td>0</td>\n  \t\t\t\t\t</tr>\n  \t\t\t\t\t<tr>\n    \t\t\t\t<td>0</td>\n    \t\t\t\t<td>1</td>\n    \t\t\t\t<td>1</td>\n  \t\t\t\t\t</tr>\n  \t\t\t\t\t<tr>\n  \t\t\t\t\t<td>1</td>\n \t\t\t\t\t<td>0</td>\n    \t\t\t\t<td>1</td>\n  \t\t\t\t\t</tr>\n  \t\t\t\t\t<tr>\n    \t\t\t\t<td>1</td>\n    \t\t\t\t<td>1</td>\n    \t\t\t\t<td>0</td>\n  \t\t\t\t\t</tr>\n\t\t\t\t\t</table>\n                    \n                    <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/xor-of-two-number-image1-9wmhfpAx\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n                    <p>The goal is to maximise the XOR result between two numbers This is achieved by ensuring for each bit position, the XOR result is maximum hence we want to maximise the number of opposite bits between the numbers.</p>\n                    <p>We use a Trie which allows us to iterate through each bit of the numbers in the array and maximise XOR value by selecting the opposite bit when available hence ensuring the highest possible XOR result.</p>                                      \n\n                    <h3>Algorithm 1: </h3>\n                    <p><strong>Step 1:</strong>Create a Trie Node Structure. This structure represents a node in the Trie.\n                    <ol><li>It contains an array (\u2018links\u2019) to store links to child nodes (0 and 1).</li><li>Provides methods to interact with the child nodes like \u2018containsKey\u2019, \u2018get\u2019 and \u2018put\u2019.</li></ol></p>\n                   \t<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/xor-of-two-number-image2-IWOY42Vd\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure> \n                    <p><strong>Step 2: </strong>Iterate through the given array and insert its bit values into the Trie from left to right.\n                    <ol><li>For each number, check if the current node has a child node with the current bit. If not, create a new child node with the current bit.</li><li>Move to the child node corresponding to the current bit.</li></ol></p> \n                   \t<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/xor-of-two-number-image3--LlOwF8_\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure> \n                    <p><strong>Step 3: </strong>\n                    Start from the root node. Initialise the maximum XOR values as 0.</p>\n                    \n                    <p><strong>Step 4: </strong>Iterate through each bit of the number (from left to right). Check if the complement of the current bit exists in the Trie. If so:\n                    <ol><li>Update the maximum XOR value with the current bit.</li><li>Moves to the child node corresponding to the complement of the current bit.</li></ol>.\n                    If the complement of the current bit doesn\u2019t exist in the Trie, move to the child node corresponding to the current bit.</p> \n                    <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/xor-of-two-number-image4-nRWwumq5\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure> \n                    <p><strong>Return the maximum XOR value.</strong></p>          \n                </div>\n            </details>\n            <details class=\"code-section secondary-details\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Code\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <div class=\"code-tabs\">\n                    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n                    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n                    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n                    <button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n                    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\"\n                        xmlns=\"http://www.w3.org/2000/svg\">\n                        <path\n                            d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n                        </path>\n                    </svg>\n                </div>\n                <div class=\"code-content\">\n                    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nusing namespace std;\n\n// Node structure \n// for the Trie\nstruct Node {\n    // Array to store links\n    // to child nodes (0 and 1)\n    Node* links[2]; \n    \n    // Method to check if a specific\n    // bit key is present in the child nodes\n    bool containsKey(int bit) {\n        \n        // Returns true if the link at\n        // index 'bit' is not NULL\n        return (links[bit] != NULL); \n    }\n    \n    // Method to get the child node\n    // corresponding to a specific bit\n    Node* get(int bit) {\n        \n        // Returns the child\n        // node at index 'bit'\n        return links[bit]; \n    }\n    \n    // Method to set a child node at a\n    // specific index in the links array\n    void put(int bit, Node* node) {\n        \n        // Sets the child node at index\n        // 'bit' to the provided node\n        links[bit] = node; \n    }\n};\n\n// Trie class\nclass Trie {\nprivate:\n    // Root node of the Trie\n    Node* root;\npublic:\n    // Constructor to initialize\n    // the Trie with a root node\n    Trie() {\n         // Creates a new root\n         // node for the Trie\n        root = new Node();\n    }\n    \n    // Method to insert a number into the Trie\n    void insert(int num) {\n        // Start from the root node\n        Node* node = root; \n        // Iterate through each bit of the\n        // number (from left to right)\n        for (int i = 31; i &gt;= 0; i--) { \n            // Extract the i-th bit of the number\n            int bit = (num &gt;&gt; i) &amp; 1; \n            \n            // If the current node doesn't have a\n            // child node with the current bit\n            if (!node-&gt;containsKey(bit)) { \n                \n                // Create a new child node\n                // with the current bit\n                node-&gt;put(bit, new Node()); \n            }\n            \n            // Move to the child node\n            // corresponding to the current bit\n            node = node-&gt;get(bit); \n        }\n    }\n    \n    // Method to find the maximum\n    // XOR value for a given number\n    int getMax(int num) {\n         // Start from the root node\n        Node* node = root;\n        \n        // Initialize the maximum XOR value\n        int maxNum = 0; \n        \n        // Iterate through each bit of\n        // the number (from left to right)\n        for (int i = 31; i &gt;= 0; i--) { \n            \n            // Extract the i-th\n            // bit of the number\n            int bit = (num &gt;&gt; i) &amp; 1; \n            \n            // If the complement of the current\n            // bit exists in the Trie\n            if (node-&gt;containsKey(1 - bit)) { \n                \n                // Update the maximum XOR\n                // value with the current bit\n                maxNum |= (1 &lt;&lt; i); \n                \n                 // Move to the child node corresponding\n                 // to the complement of the current bit\n                node = node-&gt;get(1 - bit);\n            } else {\n                \n                 // Move to the child node\n                 // corresponding to the current bit\n                node = node-&gt;get(bit);\n            }\n        }\n        \n        // Return the maximum XOR value\n        return maxNum; \n    }\n};\n\n// Function to find the maximum XOR\n// value between two sets of numbers\nint maxXOR(int n, int m, vector&lt;int&gt;&amp; arr1, vector&lt;int&gt;&amp; arr2) {\n    // Create a Trie object\n    Trie trie; \n    // Insert each number from\n    // the first set into the Trie\n    for (auto&amp; it : arr1) { \n        trie.insert(it);\n    }\n    \n    // Initialize the maximum XOR value\n    int maxi = 0; \n    \n    // Iterate through each\n    // number in the second set\n    for (auto&amp; it : arr2) { \n         // Update the maximum XOR value\n         // with the result from the Trie\n        maxi = max(maxi, trie.getMax(it));\n    }\n     // Return the\n     // maximum XOR value\n    return maxi;\n}\n\n// Function to print the \n// Input Arrays\nvoid printArr(vector&lt;int&gt; arr){\n    for(auto it: arr){\n        cout &lt;&lt; it &lt;&lt; &quot; &quot;;\n    }\n    cout &lt;&lt; endl;\n}\n\nint main() {\n    vector&lt;int&gt; arr1 = {3, 10, 5, 25, 2};\n    vector&lt;int&gt; arr2 = {8, 1, 2, 12, 7};\n    int n = arr1.size();\n    int m = arr2.size();\n    \n    cout &lt;&lt; &quot;Arr1: &quot;;\n    printArr(arr1);\n    cout &lt;&lt; &quot;Arr2: &quot;;\n    printArr(arr2);\n    \n\n    int result = maxXOR(n, m, arr1, arr2);\n    cout &lt;&lt; &quot;Maximum XOR value: &quot; &lt;&lt; result &lt;&lt; endl;\n\n    return 0;\n}\n                            </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block \" data-lang=\"java\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"java\" class=\"language-java\">\nimport java.util.ArrayList;\n\n// Node class\n// for the Trie\nclass Node {\n    // Array to store links\n    // to child nodes (0 and 1)\n    Node[] links;\n    \n    // Constructor\n    Node() {\n        links = new Node[2];\n    }\n\n    // Method to check if a specific\n    // bit key is present in the child nodes\n    boolean containsKey(int bit) {\n        // Returns true if the link at\n        // index 'bit' is not null\n        return links[bit] != null;\n    }\n\n    // Method to get the child node\n    // corresponding to a specific bit\n    Node get(int bit) {\n        // Returns the child\n        // node at index 'bit'\n        return links[bit];\n    }\n\n    // Method to set a child node at a\n    // specific index in the links array\n    void put(int bit, Node node) {\n        // Sets the child node at index\n        // 'bit' to the provided node\n        links[bit] = node;\n    }\n}\n\n// Trie class\nclass Trie {\n    // Root node of the Trie\n    Node root;\n\n    // Constructor to initialize\n    // the Trie with a root node\n    Trie() {\n        // Creates a new root\n        // node for the Trie\n        root = new Node();\n    }\n\n    // Method to insert a number into the Trie\n    void insert(int num) {\n        // Start from the root node\n        Node node = root;\n        // Iterate through each bit of the\n        // number (from left to right)\n        for (int i = 31; i &gt;= 0; i--) {\n            // Extract the i-th bit of the number\n            int bit = (num &gt;&gt; i) &amp; 1;\n\n            // If the current node doesn't have a\n            // child node with the current bit\n            if (!node.containsKey(bit)) {\n\n                // Create a new child node\n                // with the current bit\n                node.put(bit, new Node());\n            }\n\n            // Move to the child node\n            // corresponding to the current bit\n            node = node.get(bit);\n        }\n    }\n\n    // Method to find the maximum\n    // XOR value for a given number\n    int getMax(int num) {\n        // Start from the root node\n        Node node = root;\n\n        // Initialize the maximum XOR value\n        int maxNum = 0;\n\n        // Iterate through each bit of\n        // the number (from left to right)\n        for (int i = 31; i &gt;= 0; i--) {\n\n            // Extract the i-th\n            // bit of the number\n            int bit = (num &gt;&gt; i) &amp; 1;\n\n            // If the complement of the current\n            // bit exists in the Trie\n            if (node.containsKey(1 - bit)) {\n\n                // Update the maximum XOR\n                // value with the current bit\n                maxNum |= (1 &lt;&lt; i);\n\n                // Move to the child node corresponding\n                // to the complement of the current bit\n                node = node.get(1 - bit);\n            } else {\n\n                // Move to the child node\n                // corresponding to the current bit\n                node = node.get(bit);\n            }\n        }\n\n        // Return the maximum XOR value\n        return maxNum;\n    }\n}\n\npublic class Main {\n    // Function to find the maximum XOR\n    // value between two sets of numbers\n    static int maxXOR(int n, int m, ArrayList&lt;Integer&gt; arr1, ArrayList&lt;Integer&gt; arr2) {\n        // Create a Trie object\n        Trie trie = new Trie();\n        // Insert each number from\n        // the first set into the Trie\n        for (int it : arr1) {\n            trie.insert(it);\n        }\n\n        // Initialize the maximum XOR value\n        int maxi = 0;\n\n        // Iterate through each\n        // number in the second set\n        for (int it : arr2) {\n            // Update the maximum XOR value\n            // with the result from the Trie\n            maxi = Math.max(maxi, trie.getMax(it));\n        }\n        // Return the\n        // maximum XOR value\n        return maxi;\n    }\n\n    // Function to print the\n    // Input Arrays\n    static void printArr(ArrayList&lt;Integer&gt; arr) {\n        for (int it : arr) {\n            System.out.print(it + &quot; &quot;);\n        }\n        System.out.println();\n    }\n\n    public static void main(String[] args) {\n        ArrayList&lt;Integer&gt; arr1 = new ArrayList&lt;&gt;(java.util.Arrays.asList(3, 10, 5, 25, 2));\n        ArrayList&lt;Integer&gt; arr2 = new ArrayList&lt;&gt;(java.util.Arrays.asList(8, 1, 2, 12, 7));\n        int n = arr1.size();\n        int m = arr2.size();\n\n        System.out.print(&quot;Arr1: &quot;);\n        printArr(arr1);\n        System.out.print(&quot;Arr2: &quot;);\n        printArr(arr2);\n\n        int result = maxXOR(n, m, arr1, arr2);\n        System.out.println(&quot;Maximum XOR value: &quot; + result);\n    }\n}\n                            </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block\" data-lang=\"python\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"python\" class=\"language-python\">\nclass Node:\n    &quot;&quot;&quot;Node structure for the Trie&quot;&quot;&quot;\n\n    def __init__(self):\n        # Array to store links\n        # to child nodes (0 and 1)\n        self.links = [None, None]\n\n    def contains_key(self, bit):\n        # Method to check if a specific\n        # bit key is present in the child nodes\n        # Returns True if the link at\n        # index 'bit' is not None\n        return self.links[bit] is not None\n\n    def get(self, bit):\n        # Method to get the child node\n        # corresponding to a specific bit\n        # Returns the child\n        # node at index 'bit'\n        return self.links[bit]\n\n    def put(self, bit, node):\n        # Method to set a child node at a\n        # specific index in the links array\n        # Sets the child node at index\n        # 'bit' to the provided node\n        self.links[bit] = node\n\n\nclass Trie:\n    &quot;&quot;&quot;Trie class&quot;&quot;&quot;\n\n    def __init__(self):\n        # Constructor to initialize\n        # the Trie with a root node\n        # Creates a new root\n        # node for the Trie\n        self.root = Node()\n\n    def insert(self, num):\n        # Method to insert a number into the Trie\n        # Start from the root node\n        node = self.root\n        # Iterate through each bit of the\n        # number (from left to right)\n        for i in range(31, -1, -1):\n            # Extract the i-th bit of the number\n            bit = (num &gt;&gt; i) &amp; 1\n\n            # If the current node doesn't have a\n            # child node with the current bit\n            if not node.contains_key(bit):\n                # Create a new child node\n                # with the current bit\n                node.put(bit, Node())\n\n            # Move to the child node\n            # corresponding to the current bit\n            node = node.get(bit)\n\n    def get_max(self, num):\n        # Method to find the maximum\n        # XOR value for a given number\n        # Start from the root node\n        node = self.root\n\n        # Initialize the maximum XOR value\n        max_num = 0\n\n        # Iterate through each bit of\n        # the number (from left to right)\n        for i in range(31, -1, -1):\n            # Extract the i-th\n            # bit of the number\n            bit = (num &gt;&gt; i) &amp; 1\n\n            # If the complement of the current\n            # bit exists in the Trie\n            if node.contains_key(1 - bit):\n                # Update the maximum XOR\n                # value with the current bit\n                max_num |= (1 &lt;&lt; i)\n\n                # Move to the child node corresponding\n                # to the complement of the current bit\n                node = node.get(1 - bit)\n            else:\n                # Move to the child node\n                # corresponding to the current bit\n                node = node.get(bit)\n\n        # Return the maximum XOR value\n        return max_num\n\n\ndef max_xor(n, m, arr1, arr2):\n    # Function to find the maximum XOR\n    # value between two sets of numbers\n    # Create a Trie object\n    trie = Trie()\n    # Insert each number from\n    # the first set into the Trie\n    for num in arr1:\n        trie.insert(num)\n\n    # Initialize the maximum XOR value\n    maxi = 0\n\n    # Iterate through each\n    # number in the second set\n    for num in arr2:\n        # Update the maximum XOR value\n        # with the result from the Trie\n        maxi = max(maxi, trie.get_max(num))\n\n    # Return the\n    # maximum XOR value\n    return maxi\n\n\ndef print_arr(arr):\n    # Function to print the\n    # Input Arrays\n    for item in arr:\n        print(item, end=&quot; &quot;)\n    print()\n\n\nif __name__ == &quot;__main__&quot;:\n    arr1 = [3, 10, 5, 25, 2]\n    arr2 = [8, 1, 2, 12, 7]\n    n = len(arr1)\n    m = len(arr2)\n\n    print(&quot;Arr1: &quot;, end=&quot;&quot;)\n    print_arr(arr1)\n    print(&quot;Arr2: &quot;, end=&quot;&quot;)\n    print_arr(arr2)\n\n    result = max_xor(n, m, arr1, arr2)\n    print(&quot;Maximum XOR value:&quot;, result)\n                           </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block\" data-lang=\"javascript\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"javascript\" class=\"language-javascript\">\n// Node structure \n// for the Trie\nclass Node {\n    constructor() {\n        // Array to store links\n        // to child nodes (0 and 1)\n        this.links = [null, null];\n    }\n    \n    // Method to check if a specific\n    // bit key is present in the child nodes\n    containsKey(bit) {\n        // Returns true if the link at\n        // index 'bit' is not null\n        return this.links[bit] !== null;\n    }\n    \n    // Method to get the child node\n    // corresponding to a specific bit\n    get(bit) {\n        // Returns the child\n        // node at index 'bit'\n        return this.links[bit];\n    }\n    \n    // Method to set a child node at a\n    // specific index in the links array\n    put(bit, node) {\n        // Sets the child node at index\n        // 'bit' to the provided node\n        this.links[bit] = node;\n    }\n}\n\n// Trie class\nclass Trie {\n    constructor() {\n        // Root node of the Trie\n        this.root = new Node();\n    }\n    \n    // Method to insert a number into the Trie\n    insert(num) {\n        // Start from the root node\n        let node = this.root;\n        // Iterate through each bit of the\n        // number (from left to right)\n        for (let i = 31; i &gt;= 0; i--) {\n            // Extract the i-th bit of the number\n            const bit = (num &gt;&gt; i) &amp; 1;\n            // If the current node doesn't have a\n            // child node with the current bit\n            if (!node.containsKey(bit)) {\n                // Create a new child node\n                // with the current bit\n                node.put(bit, new Node());\n            }\n            // Move to the child node\n            // corresponding to the current bit\n            node = node.get(bit);\n        }\n    }\n    \n    // Method to find the maximum\n    // XOR value for a given number\n    getMax(num) {\n        // Start from the root node\n        let node = this.root;\n        // Initialize the maximum XOR value\n        let maxNum = 0;\n        // Iterate through each bit of\n        // the number (from left to right)\n        for (let i = 31; i &gt;= 0; i--) {\n            // Extract the i-th\n            // bit of the number\n            const bit = (num &gt;&gt; i) &amp; 1;\n            // If the complement of the current\n            // bit exists in the Trie\n            if (node.containsKey(1 - bit)) {\n                // Update the maximum XOR\n                // value with the current bit\n                maxNum |= (1 &lt;&lt; i);\n                // Move to the child node corresponding\n                // to the complement of the current bit\n                node = node.get(1 - bit);\n            } else {\n                // Move to the child node\n                // corresponding to the current bit\n                node = node.get(bit);\n            }\n        }\n        // Return the maximum XOR value\n        return maxNum;\n    }\n}\n\n// Function to find the maximum XOR\n// value between two sets of numbers\nfunction maxXOR(n, m, arr1, arr2) {\n    // Create a Trie object\n    const trie = new Trie();\n    // Insert each number from\n    // the first set into the Trie\n    for (const num of arr1) {\n        trie.insert(num);\n    }\n    // Initialize the maximum XOR value\n    let maxi = 0;\n    // Iterate through each\n    // number in the second set\n    for (const num of arr2) {\n        // Update the maximum XOR value\n        // with the result from the Trie\n        maxi = Math.max(maxi, trie.getMax(num));\n    }\n    // Return the\n    // maximum XOR value\n    return maxi;\n}\n\n// Function to print the \n// Input Arrays\nfunction printArr(arr) {\n    for (const num of arr) {\n        console.log(num + &quot; &quot;);\n    }\n    console.log();\n}\n\nconst arr1 = [3, 10, 5, 25, 2];\nconst arr2 = [8, 1, 2, 12, 7];\nconst n = arr1.length;\nconst m = arr2.length;\n\nconsole.log(&quot;Arr1: &quot;);\nprintArr(arr1);\nconsole.log(&quot;Arr2: &quot;);\nprintArr(arr2);\n\nconst result = maxXOR(n, m, arr1, arr2);\nconsole.log(&quot;Maximum XOR value: &quot; + result);\n                            </code>\n                        </pre>\n                    </div>\n                    <p>\n                       <strong>Output</strong> Arr1: 3 10 5 25 2</p>\n                       <p>Arr2: 8 1 2 12 7 </p>\n                       <p>Maximum XOR value: 30</p>\n                    \n                </div>\n            </details>\n            <details class=\"secondary-details\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Complexity Analysis\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <p>\n                    <!-- Insert Time and Space Complexity  Here -->\n                    <p><strong>Time Complexity: O(32*N + 32*M)</strong>\n                     where N is the length of the input array.\n                     <ol><li>Insertion: The time complexity of inserting each number into the Trie is O(32) as each number is composed of 32 bits in the Binary Representation. This operation is performed for each of the N numbers in the first array.</li><li>Finding Maximum XOR Operation: To find the maximum XOR value for each number, we iterate through its 32 bits performing constant-time operations for each bit. This is performed for all M numbers in the second array hence this operation accounts for the second time complexity of O(32*N).</li></ol></p>\n\n\t\t\t\t\t<p><strong>Space Complexity: O(32N)</strong>   \n\t\t\t\t\t where N is the length of the input array. This algorithm has a linear space complexity with respect to the size of the input array and each number takes up space proportional to 32 which is the size in Binary Representation.</p>\n\n                </p>\n            </details>\n        </div>\n    </details>\n</div>\n\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n    <details>\n        <summary class=\"main-summary\">\n            <span>\n                Video Explanation\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"yt-video-wrapper\">\n            <!-- Insert iframe embed Link of Youtube Video-->\n        <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/EIhAwfHubE8?si=10-PiAQbVBfxHfkE\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n        </div>\n    </details>\n</div>\n\n<blockquote class=\"wp-block-quote\">\n    Special thanks to <strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268\">Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,<strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\"> please check out this article</a></strong>\n</blockquote>\n\n<script>\n\n    const codeSections = document.querySelectorAll('.code-section');\n\n    // Get last selected language from localStorage or set default value\n    let lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp';\n\n    codeSections.forEach((section, sectionIndex) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n        const copyBtn = section.querySelector('.copy-btn');\n\n        codeTabs.forEach((tab) => {\n            tab.addEventListener('click', () => {\n                codeTabs.forEach((t) => {\n                    t.classList.remove('dsa_article_code_active');\n                });\n                tab.classList.add('dsa_article_code_active');\n\n                const lang = tab.dataset.lang;\n                const activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                codeBlocks.forEach((block) => {\n                    if (block === activeBlock) {\n                        block.classList.add('dsa_article_code_active');\n                    } else {\n                        block.classList.remove('dsa_article_code_active');\n                    }\n                });\n\n                // Update last selected language for all sections and store in localStorage\n                lastSelectedLanguage = lang;\n                localStorage.setItem('lastSelectedLanguage', lang);\n                codeSections.forEach((otherSection, otherIndex) => {\n                    if (otherIndex !== sectionIndex) {\n                        const otherTabs = otherSection.querySelectorAll('.code-tab');\n                        otherTabs.forEach((otherTab) => {\n                            if (otherTab.dataset.lang === lang) {\n                                otherTab.classList.add('dsa_article_code_active');\n                            } else {\n                                otherTab.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                        const otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                        const otherCodeBlocks = otherSection.querySelectorAll('.code-block');\n                        otherCodeBlocks.forEach((block) => {\n                            if (block === otherActiveBlock) {\n                                block.classList.add('dsa_article_code_active');\n                            } else {\n                                block.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                    }\n                });\n            });\n        });\n\n        // Handle copy button click event\n        copyBtn.addEventListener('click', () => {\n            const activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\n            navigator.clipboard.writeText(activeBlock.innerText);\n            copyBtn.classList.add('dsa_article_code_active');\n            setTimeout(() => {\n                copyBtn.classList.remove('dsa_article_code_active');\n            }, 1000);\n        });\n    });\n\n    // Set initial state of the tabs\n    codeSections.forEach((section) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n\n        codeTabs.forEach((tab) => {\n            if (tab.dataset.lang === lastSelectedLanguage) {\n                tab.classList.add('dsa_article_code_active');\n            } else {\n                tab.classList.remove('dsa_article_code_active');\n            }\n        });\n\n        codeBlocks.forEach((block) => {\n            if (block.dataset.lang === lastSelectedLanguage) {\n                block.classList.add('dsa_article_code_active');\n            } else {\n                block.classList.remove('dsa_article_code_active');\n            }\n        });\n    });\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>",
    "category_tag": "data-structure",
    "likes": 21,
    "preview": "Problem Statement: Given two arrays of non-negative integers. FInd the maximum possible value of A XOR B where A and B are elements from the arr1 and arr2 array respectively and XOR represents the..."
}