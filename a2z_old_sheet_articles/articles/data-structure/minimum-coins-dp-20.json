{
    "dislikes": 2,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:10:14 GMT+0530 (India Standard Time)",
    "slug": "minimum-coins-dp-20",
    "aid": "1715",
    "title": "Minimum Coins (DP - 20)",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/minimum-coins",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "dynamic-programming",
            "topic-title": "Dynamic Programming"
        },
        {
            "topic-id": "recursion",
            "topic-title": "Recursion"
        }
    ],
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement:&nbsp;</strong> <strong>Minimum Coins</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Problem Link: </strong><a href=\"https://www.codingninjas.com/codestudio/problems/minimum-elements_3843091?leftPanelTab=0\" target=\"_blank\" rel=\"noreferrer noopener nofollow\"><strong>Minimum Coins</strong></a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We are given a target sum of \u2018X\u2019 and \u2018N\u2019 distinct numbers denoting the coin denominations. We need to tell the minimum number of coins required to reach the target sum. We can pick a coin denomination for any number of times we want.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n<details class=\"article_example_details\">\n<summary class=\"article_example_summary\">\n<span><strong>\nExamples\n</strong>\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"atricle_example_content\">\n<pre class=\"wp-block-preformatted\"><!-- Insert New Examples Here -->\n<pre class=\"wp-block-preformatted\"><strong>Example:</strong>\n<img width=\"401\" height=\"320\" src=\"https://lh3.googleusercontent.com/vjYc2Da63eMYCY65kP0Q_mrE1Uf7F-CReNgdvGiidaz2nAdR6-jPxSspcMrvzM9UONzBYjcCMdaIwF2z_t7idvIwNQQy4cCbDQN0YRgI3A6NPI6GoA6KrjEUavSlUfOGYnFI1cKy\">\n</pre>\n</pre>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Practice Section-->\n<div class=\"practice\">\n<span><strong>Practice: </strong></span>\n<div class=\"problem-buttons\">\n\n<!-- Add Problem Link inside href -->\n<a href=\"https://www.codingninjas.com/studio/problems/minimum-elements_3843091?utm_source=striver&amp;utm_medium=website&amp;utm_campaign=a_zcoursetuf\" target=\"_blank\" rel=\"noopener\">\n<span>Solve Problem</span>\n<img src=\"https://static.takeuforward.org/wp/uploads/2023/04/Group-11-5.png\" alt=\"code-studio\">\n</a>\n</div>\n</div>\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\nyourself first. </em></p>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<div class=\"horizontal_navbar_dsa_article\">\n<div class=\"grid_container_three\">\n<a href=\"#brute-force-approach\" class=\"three-boxes box-a\">\nMemorization approach\n</a>\n<a href=\"#better-approach\" class=\"three-boxes box-b\">\nTabulation approach\n</a>\n<a href=\"#optimal-approach\" class=\"three-boxes box-c\">\nSpace Optimization\n</a>\n<a href=\"#dsa_article_video_explanation\" class=\"three-boxes box-d\">\n<svg width=\"26\" height=\"26\" viewBox=\"0 0 20 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M8 10L13.19 7L8 4V10ZM19.56 2.17C19.69 2.64 19.78 3.27 19.84 4.07C19.91 4.87 19.94 5.56 19.94 6.16L20 7C20 9.19 19.84 10.8 19.56 11.83C19.31 12.73 18.73 13.31 17.83 13.56C17.36 13.69 16.5 13.78 15.18 13.84C13.88 13.91 12.69 13.94 11.59 13.94L10 14C5.81 14 3.2 13.84 2.17 13.56C1.27 13.31 0.69 12.73 0.44 11.83C0.31 11.36 0.22 10.73 0.16 9.93C0.0900001 9.13 0.0599999 8.44 0.0599999 7.84L0 7C0 4.81 0.16 3.2 0.44 2.17C0.69 1.27 1.27 0.69 2.17 0.44C2.64 0.31 3.5 0.22 4.82 0.16C6.12 0.0899998 7.31 0.0599999 8.41 0.0599999L10 0C14.19 0 16.8 0.16 17.83 0.44C18.73 0.69 19.31 1.27 19.56 2.17Z\" fill=\"red\"></path>\n</svg>\n\n</a>\n<div class=\"box-e tooltip\">\n<svg viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M12.842 9.25L11.9577 10.17C11.2502 10.89 10.8081 11.5 10.8081 13H8.84297V12.5C8.84297 11.39 9.28511 10.39 9.99255 9.67L11.2109 8.41C11.5745 8.05 11.7906 7.55 11.7906 7C11.7906 6.46957 11.5836 5.96086 11.2151 5.58579C10.8465 5.21071 10.3467 5 9.82552 5C9.30434 5 8.80451 5.21071 8.43598 5.58579C8.06745 5.96086 7.86041 6.46957 7.86041 7H5.89531C5.89531 5.93913 6.30938 4.92172 7.04644 4.17157C7.7835 3.42143 8.78316 3 9.82552 3C10.8679 3 11.8675 3.42143 12.6046 4.17157C13.3417 4.92172 13.7557 5.93913 13.7557 7C13.7543 7.84324 13.4259 8.65183 12.842 9.25ZM10.8081 17H8.84297V15H10.8081M9.82552 0C8.53521 0 7.25754 0.258658 6.06545 0.761205C4.87337 1.26375 3.79021 2.00035 2.87783 2.92893C1.03519 4.8043 0 7.34784 0 10C0 12.6522 1.03519 15.1957 2.87783 17.0711C3.79021 17.9997 4.87337 18.7362 6.06545 19.2388C7.25754 19.7413 8.53521 20 9.82552 20C12.4314 20 14.9306 18.9464 16.7732 17.0711C18.6158 15.1957 19.651 12.6522 19.651 10C19.651 4.47 15.2296 0 9.82552 0Z\" fill=\"black\"></path>\n</svg>\n<div class=\"bottom\">\n<p>Expand any one approach by clicking the given options in the bar. Clicking one approach on bar,\ncloses all other expands. You can manually expand more than one approach at a time</p>\n<i></i>\n</div>\n\n</div>\n</div>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Approaches Drop-Down -->\n<div class=\"dsa_article_dropdown_approachs \">\n\n<!-- Brute Force Approach Starts from here -->\n<div id=\"brute-force-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nMemorization Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n<p><strong>Why a Greedy Solution doesn\u2019t work?</strong></p>\n<p>The first approach that comes to our mind is greedy. A greedy solution will fail in this problem because there is no <strong>\u2018uniformity\u2019 </strong>in data. While selecting a local better choice we may choose an item that will in the long term give less value.</p>\n<p>Let us understand this with help of an example:</p>\n<p><img width=\"428\" height=\"222\" src=\"https://lh6.googleusercontent.com/AMQNJDA2ycCQZ-WIM5HRHQYAjq1xn5MpQcL3n7R9sWXFrLxqJpENp8LEof1f1e8ptxkuxltR6gQK1iGbPSFw5L_-2pBfC8jq5bym3fn7XBDV5qFguNbDiKCSrClyLrGZq0LrjXIi\"></p>\n<p>A Greedy solution will be to take the highest denomination coin first, so we will take an item on index 0, with a value of 9. Now the remaining target sum will be 2. Therefore we can only consider coins with a value of 1. We will take 2 coins of value 1 to meet the target. So a greedy<strong> solution</strong> gives us the answer <strong>3 {9,1,1}</strong>.</p>\n<p>Now we can clearly see that a<strong> non-greedy solution </strong>of taking <strong>2</strong> coins valued <strong>6 and 5</strong> will give us a better option. So we can say that the greedy solution doesn\u2019t work for this problem.&nbsp;</p>\n<p>As the greedy approach doesn\u2019t work, we will try to generate all possible combinations using <strong>recursion</strong> and select the combination which gives us the <strong>minimum</strong> number of coins.</p>\n<p><strong>Steps to form the recursive solution:&nbsp;</strong></p>\n<p>We will first form the recursive solution by the three points mentioned in <a href=\"https://takeuforward.org/data-structure/dynamic-programming-introduction/\" target=\"_blank\" rel=\"noreferrer noopener\">Dynamic Programming Introduction</a>.&nbsp;</p>\n<p><strong>Step 1: </strong>Express the problem in terms of indexes.</p>\n<p>We are given \u2018n\u2019 distinct numbers. Their denomination is represented by the \u2018arr\u2019 array. So clearly one parameter will be \u2018ind\u2019, i.e index up to which the array items are being considered.</p>\n<p>There is one more parameter \u201cT\u201d. We need to know the given target that we want to achieve.</p>\n<p>So, we can say that initially, we need to find f(n-1, T) where T is the initial target given to us. f(n-1, T) means we are finding the minimum number of coins required to form the target sum by considering coins from index 0 to n-1.</p>\n<p><img width=\"584\" height=\"126\" src=\"https://lh5.googleusercontent.com/z6FWWOnB1HOFe9jOxqS2MExzAKgjIgz2CSBv_cZHBg_Llit4N7cahko2NjRenQRKSEJkE-JkYquIClq_PmjxtSiB0d1WpGcvj4UOFhpoF2y1M1svecfJAyWuqFpNm6yPeBHjzfAy\"></p>\n<p><strong>Base Cases:</strong></p>\n<p>If ind==0, it means we are at the first item, so in that case, the following cases can arise:</p>\n<ul><li><strong>arr[0] = 4</strong> and <strong>T = 12</strong></li></ul>\n<p>In such a case where the target is divisible by the coin element, we will return <strong>T%arr[0].</strong></p>\n<ul><li><strong>arr[0] =4 and T=1 , arr[0]=3 T=10</strong></li></ul>\n<p>&nbsp;In all other cases, we will not be able to form a solution, so we will return a big number like <strong>1e9</strong></p>\n<p><img width=\"373\" height=\"334\" src=\"https://lh6.googleusercontent.com/WkEJPVb_Y8uDnttcNO-WCEGh6T4sepOjwS-SvES6oZENjg3FmCXc7umF3z6QEXCsxhZj5I8DwzCw8Msu9PD1MgUOnFIk-pQo5OHdKsKIqnkCquVTYMJsU-2FrslTD_e8GDl7NgBy\"></p>\n<p><strong>Step 2: </strong>Try out all possible choices at a given index.</p>\n<p>We need to generate all the subsequences. We will use the pick/non-pick technique as discussed in this video \u201c<a href=\"https://www.youtube.com/watch?v=AxNNVECce8c\">Recursion on Subsequences</a>\u201d. There will be a slight change for this question which is discussed below.</p>\n<p>We have two choices:</p>\n<ul><li><strong>Exclude the current element in the subsequence: </strong>We first try to find a subsequence without considering the current index coin. If we exclude the current coin, the target sum will not be affected and the number of coins added to the solution will be <strong>0</strong>. So we will call the recursive function <strong>f(ind-1,T)</strong></li><li><strong>Include the current element in the subsequence:</strong> We will try to find a subsequence by considering the current icoin. As we have included the coin, the target sum will be updated to T-arr[ind] and we have considered <strong>1 </strong>coin to our solution.<br></li></ul>\n<p>Now here is the catch, as there is an unlimited supply of coins, we want to again form a solution with the same coin value. So we <strong>will not</strong> recursively call for f(ind-1, T-arr[ind]) rather we will stay at that index only and call for f(ind<strong>, T-arr[ind])</strong> to find the answer.<br><strong>Note</strong>: We will consider the current coin only when its denomination value (arr[ind]) is less than or equal to the target T.</p>\n<p><img width=\"462\" height=\"544\" src=\"https://lh3.googleusercontent.com/3vdGXt6XyAaZQWDLyI8JNy3ts7w7dEVKnxmjL-Z7nguWAjs8XppvJvc7OhlWaagdlzH2kWy1XAWjTsKD23b0DMWQYMXrpPnXh3ttTJdssc6ix14I0dI3xP80J6Wz7UM9vMP3fWPB\"></p>\n<p><strong>Step 3:&nbsp; Return the minimum of take and notTake</strong></p>\n<p>As we have to return the minimum number of coins, we will return the minimum of take and notTake as our answer.</p>\n<p>The final pseudocode after steps 1, 2, and 3:</p>\n<p><img width=\"436\" height=\"560\" src=\"https://lh4.googleusercontent.com/W44WpxJhdAnuy-9acVdJ-7T0XGyjWOgtwf95WZE3c8nz7uTMqK7bAjNpTa2d-egXof3ba_gEs1_daIxnSIXbWtC30BwPFEQ3Z6lQxoZUyXg5VjBAtpUBt8NybIoDrZ6bUGHPt4ia\"></p>\n<p><strong>Steps to memoize a recursive solution:</strong></p>\n<p>If we draw the recursion tree, we will see that there are overlapping subproblems. In order to convert a recursive solution the following steps will be taken:</p>\n<ol><li>Create a dp array of size [n][T+1]. The size of the input array is \u2018N\u2019, so the index will always lie between \u20180\u2019 and \u2018n-1\u2019. The target Sum can take any value between \u20180\u2019 and \u2018T\u2019. Therefore we take the dp array as dp[n][T+1]</li><li>We initialize the dp array to -1.</li><li>Whenever we want to find the answer of particular parameters (say f(ind,T)), we first check whether the answer is already calculated using the dp array(i.e dp[ind][T]!= -1 ). If yes, simply return the value from the dp array.</li><li>If not, then we are finding the answer for the given value for the first time, we will use the recursive relation as usual but before returning from the function, we will set dp[ind][target] to the solution we get.</li></ol>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h&gt; // Include necessary libraries\n\nusing namespace std;\n\n// Function to calculate the minimum number of elements to form the target sum\nint minimumElementsUtil(vector&lt;int&gt;&amp; arr, int ind, int T, vector&lt;vector&lt;int&gt;&gt;&amp; dp){\n\n    // Base case: If we're at the first element\n    if(ind == 0){\n        // Check if the target sum is divisible by the first element\n        if(T % arr[0] == 0)\n            return T / arr[0]; // If yes, return the quotient as the answer\n        else\n            return 1e9; // Otherwise, return a very large value to indicate it's not possible\n    }\n    \n    // If the result for this index and target sum is already calculated, return it\n    if(dp[ind][T] != -1)\n        return dp[ind][T];\n        \n    // Calculate the minimum elements needed without taking the current element\n    int notTaken = 0 + minimumElementsUtil(arr, ind - 1, T, dp);\n    \n    // Calculate the minimum elements needed by taking the current element\n    int taken = 1e9; // Initialize 'taken' to a very large value\n    if(arr[ind] &lt;= T)\n        taken = 1 + minimumElementsUtil(arr, ind, T - arr[ind], dp);\n        \n    // Store the minimum of 'notTaken' and 'taken' in the DP array and return it\n    return dp[ind][T] = min(notTaken, taken);\n}\n\n// Function to find the minimum number of elements needed to form the target sum\nint minimumElements(vector&lt;int&gt;&amp; arr, int T){\n    \n    int n = arr.size();\n    \n    // Create a DP (Dynamic Programming) table with n rows and T+1 columns and initialize it with -1\n    vector&lt;vector&lt;int&gt;&gt; dp(n, vector&lt;int&gt;(T + 1, -1));\n    \n    // Call the utility function to calculate the answer\n    int ans =  minimumElementsUtil(arr, n - 1, T, dp);\n    \n    // If 'ans' is still very large, it means it's not possible to form the target sum\n    if(ans &gt;= 1e9)\n        return -1;\n    return ans; // Return the minimum number of elements needed\n}\n\nint main() {\n\n    vector&lt;int&gt; arr = {1, 2, 3};\n    int T = 7;\n                                 \n    cout &lt;&lt; \"The minimum number of coins required to form the target sum is \" &lt;&lt; minimumElements(arr, T);\n\n    return 0; // Return 0 to indicate successful program execution\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\nclass TUF {\n    // Recursive function to find the minimum number of elements to achieve the target sum\n    static int minimumElementsUtil(int[] arr, int ind, int T, int[][] dp) {\n        // Base case: If the current index is 0\n        if (ind == 0) {\n            // If T is divisible by the first element of the array, return the quotient\n            if (T % arr[0] == 0)\n                return T / arr[0];\n            else\n                // If not, return a large value to indicate it's not possible\n                return (int) Math.pow(10, 9);\n        }\n\n        // If the result for this subproblem has already been calculated, return it\n        if (dp[ind][T] != -1)\n            return dp[ind][T];\n\n        // Calculate the minimum number of elements needed without taking the current element\n        int notTaken = 0 + minimumElementsUtil(arr, ind - 1, T, dp);\n\n        // Initialize the minimum number of elements needed taking the current element\n        int taken = (int) Math.pow(10, 9);\n\n        // If the current element is less than or equal to T, calculate the minimum taking it\n        if (arr[ind] &lt;= T)\n            taken = 1 + minimumElementsUtil(arr, ind, T - arr[ind], dp);\n\n        // Store the minimum result in the dp array and return it\n        return dp[ind][T] = Math.min(notTaken, taken);\n    }\n\n    // Function to find the minimum number of elements to achieve the target sum\n    static int minimumElements(int[] arr, int T) {\n        int n = arr.length;\n\n        // Create a 2D array to store results of subproblems\n        int[][] dp = new int[n][T + 1];\n\n        // Initialize the dp array with -1 to indicate that subproblems are not solved yet\n        for (int row[] : dp)\n            Arrays.fill(row, -1);\n\n        // Calculate the minimum number of elements to achieve the target sum\n        int ans = minimumElementsUtil(arr, n - 1, T, dp);\n\n        // If it's not possible to achieve the target sum, return -1\n        if (ans &gt;= (int) Math.pow(10, 9))\n            return -1;\n        return ans;\n    }\n\n    public static void main(String args[]) {\n        int arr[] = { 1, 2, 3 };\n        int T = 7;\n\n        // Call the minimumElements function and print the result\n        System.out.println(\"The minimum number of coins required to form the target sum is \" + minimumElements(arr, T));\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\ndef minimumElementsUtil(arr, ind, T, dp):\n    # Base case: If we have reached the first element in the array.\n    if ind == 0:\n        # If the target T is divisible by the first element, return the quotient as the minimum number of coins.\n        if T % arr[0] == 0:\n            return T // arr[0]\n        else:\n            # If not, it's not possible to achieve the target sum, so return a very large value.\n            return int(1e9)\n\n    # If the result for this state is already calculated, return it.\n    if dp[ind][T] != -1:\n        return dp[ind][T]\n\n    # Initialize variables for cases when we don't take the current element.\n    notTaken = 0 + minimumElementsUtil(arr, ind - 1, T, dp)\n\n    # Initialize a variable for the case when we take the current element.\n    taken = int(1e9)\n\n    # Check if the current element can be used to reduce the target sum.\n    if arr[ind] &lt;= T:\n        taken = 1 + minimumElementsUtil(arr, ind, T - arr[ind], dp)\n\n    # Store the minimum of the two cases in the DP table.\n    dp[ind][T] = min(notTaken, taken)\n    return dp[ind][T]\n\ndef minimumElements(arr, T):\n    n = len(arr)\n    # Initialize a DP table with -1 values.\n    dp = [[-1 for j in range(T + 1)] for i in range(n)]\n    # Calculate the minimum number of coins required using the helper function.\n    ans = minimumElementsUtil(arr, n - 1, T, dp)\n\n    # If the result is still equal to a very large value, it means it's not possible to achieve the target sum.\n    if ans &gt;= int(1e9):\n        return -1\n    return ans\n\ndef main():\n    arr = [1, 2, 3]\n    T = 7\n    print(\"The minimum number of coins required to form the target sum is\", minimumElements(arr, T))\n\nif __name__ == '__main__':\n    main()\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\nfunction minimumElements(arr, T) {\n    const n = arr.length;\n    \n    // Create a 2D array to store dynamic programming results, initialized with -1\n    const dp = Array.from({ length: n }, () =&gt; Array(T + 1).fill(-1));\n    \n    // Helper function for dynamic programming\n    function minimumElementsUtil(ind, T) {\n        // Base case: If the index is 0, check if T is divisible by arr[0]\n        if (ind === 0) {\n            if (T % arr[0] === 0) return T / arr[0];\n            else return Infinity; // Use Infinity to represent an impossible case\n        }\n        \n        // If the result for this combination of 'ind' and 'T' has already been calculated, return it\n        if (dp[ind][T] !== -1)\n            return dp[ind][T];\n        \n        // Initialize variables to store results\n        let notTaken = 0 + minimumElementsUtil(ind - 1, T);\n        let taken = Infinity;\n        \n        // If the current element is less than or equal to 'T', consider taking it\n        if (arr[ind] &lt;= T)\n            taken = 1 + minimumElementsUtil(ind, T - arr[ind]);\n        \n        // Store the minimum result and return it\n        return dp[ind][T] = Math.min(notTaken, taken);\n    }\n    \n    // Call the helper function to calculate the result\n    const ans = minimumElementsUtil(n - 1, T);\n    \n    // If it's impossible to reach the target, return -1\n    if (ans === Infinity) return -1;\n    \n    return ans;\n}\n\n// Main function\nfunction main() {\n    const arr = [1, 2, 3];\n    const T = 7;\n    \n    // Call the minimumElements function and print the result\n    console.log(\"The minimum number of elements required to form the target sum is \" + minimumElements(arr, T));\n}\n\n// Call the main function to start the program\nmain();\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Brute Force Here -->\n</p><p><strong>Output:</strong> The minimum number of coins required to form the target sum is 3\n\n\n</p>\n<p></p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n<!-- Insert Time and Space Complexity of Brute Force Here -->\n</p><p><strong>Time Complexity: O(N*T)</strong></p>\n<p>Reason: There are N*T states therefore at max \u2018N*T\u2019 new problems will be solved.</p>\n<p><strong>Space Complexity: O(N*T) + O(N)</strong></p>\n<p>Reason: We are using a recursion stack space(O(N)) and a 2D array ( O(N*T)).</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Brute Force Approach Ends here -->\n\n\n<!-- Better Approach Starts from here -->\n\n<div id=\"better-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nTabulation Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition For Better Approach Here -->\n<p><strong>Steps to convert Recursive Solution to Tabulation one.</strong></p>\n<p>To convert the memoization approach to a tabulation one, create a dp array with the same size as done in memoization. We can initialize it as 0.</p>\n<p>First, we need to initialize the base conditions of the recursive solution.</p>\n<ul><li>At ind==0, we are considering the first element, if T%arr[0] ==0, we initialize it to T/arr[0] else we initialize it to 1e9.</li><li>Next, we are done for the first row, so our \u2018ind\u2019 variable will move from 1 to n-1, whereas our \u2018target\u2019 variable will move from 0 to \u2018T\u2019. We will set the nested loops to traverse the dp array.</li><li>Inside the nested loops we will apply the recursive logic to find the answer of each cell.</li><li>When the nested loop execution has ended, we will return dp[n-1][T] as our answer.</li></ul>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\n// Function to find the minimum number of elements needed to form the target sum\nint minimumElements(vector&lt;int&gt;&amp; arr, int T) {\n    int n = arr.size();\n    \n    // Create a 2D DP (Dynamic Programming) table with n rows and T+1 columns\n    vector&lt;vector&lt;int&gt;&gt; dp(n, vector&lt;int&gt;(T + 1, 0));\n    \n    // Initialize the first row of the DP table\n    for (int i = 0; i &lt;= T; i++) {\n        if (i % arr[0] == 0)\n            dp[0][i] = i / arr[0];\n        else\n            dp[0][i] = 1e9; // Set it to a very large value if not possible\n    }\n    \n    // Fill the DP table using a bottom-up approach\n    for (int ind = 1; ind &lt; n; ind++) {\n        for (int target = 0; target &lt;= T; target++) {\n            // Calculate the minimum elements needed without taking the current element\n            int notTake = dp[ind - 1][target];\n            \n            // Calculate the minimum elements needed by taking the current element\n            int take = 1e9; // Initialize 'take' to a very large value\n            if (arr[ind] &lt;= target)\n                take = 1 + dp[ind][target - arr[ind]];\n                \n            // Store the minimum of 'notTake' and 'take' in the DP table\n            dp[ind][target] = min(notTake, take);\n        }\n    }\n    \n    // The answer is in the bottom-right cell of the DP table\n    int ans = dp[n - 1][T];\n    \n    // If 'ans' is still very large, it means it's not possible to form the target sum\n    if (ans &gt;= 1e9)\n        return -1;\n    \n    return ans; // Return the minimum number of elements needed\n}\n\nint main() {\n    vector&lt;int&gt; arr = {1, 2, 3};\n    int T = 7;\n    \n    // Call the function to find the minimum number of elements needed\n    int result = minimumElements(arr, T);\n    \n    // Output the result\n    cout &lt;&lt; \"The minimum number of coins required to form the target sum is \" &lt;&lt; result &lt;&lt; endl;\n    \n    return 0; // Return 0 to indicate successful program execution\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\nclass TUF {\n    // Function to find the minimum number of elements to achieve the target sum\n    static int minimumElements(int[] arr, int T) {\n        int n = arr.length;\n\n        // Create a 2D array to store results of subproblems\n        int dp[][] = new int[n][T + 1];\n\n        // Initialize the dp array for the first element of the array\n        for (int i = 0; i &lt;= T; i++) {\n            if (i % arr[0] == 0)\n                dp[0][i] = i / arr[0];\n            else\n                dp[0][i] = (int) Math.pow(10, 9);\n        }\n\n        // Fill the dp array using dynamic programming\n        for (int ind = 1; ind &lt; n; ind++) {\n            for (int target = 0; target &lt;= T; target++) {\n                int notTake = 0 + dp[ind - 1][target];\n                int take = (int) Math.pow(10, 9);\n\n                // If the current element is less than or equal to the target, calculate 'take'\n                if (arr[ind] &lt;= target)\n                    take = 1 + dp[ind][target - arr[ind]];\n\n                // Store the minimum result in the dp array\n                dp[ind][target] = Math.min(notTake, take);\n            }\n        }\n\n        // Get the minimum number of elements needed for the target sum\n        int ans = dp[n - 1][T];\n\n        // If it's not possible to achieve the target sum, return -1\n        if (ans &gt;= (int) Math.pow(10, 9))\n            return -1;\n        return ans;\n    }\n\n    public static void main(String args[]) {\n        int arr[] = { 1, 2, 3 };\n        int T = 7;\n\n        // Call the minimumElements function and print the result\n        System.out.println(\"The minimum number of coins required to form the target sum is \" + minimumElements(arr, T));\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\ndef minimumElements(arr, T):\n    n = len(arr)\n    # Initialize a DP table with 0 values for bottom-up dynamic programming.\n    dp = [[0 for _ in range(T + 1)] for _ in range(n)]\n\n    # Fill in the DP table for the first element in the array (base case).\n    for i in range(T + 1):\n        if i % arr[0] == 0:\n            dp[0][i] = i // arr[0]\n        else:\n            # Set an initial large value to indicate that it's not possible to achieve the target sum.\n            dp[0][i] = int(1e9)\n\n    # Iterate over the array elements and target values to fill in the DP table.\n    for ind in range(1, n):\n        for target in range(T + 1):\n            # Calculate the minimum number of elements needed to achieve the current target.\n            notTake = dp[ind - 1][target]  # Option: Don't take the current element.\n            take = int(1e9)  # Initialize as a large value.\n            if arr[ind] &lt;= target:\n                # Option: Take the current element, reduce the target, and add 1 to the count.\n                take = 1 + dp[ind][target - arr[ind]]\n            # Store the minimum of the two options in the DP table.\n            dp[ind][target] = min(notTake, take)\n\n    # The result is stored in the last cell of the DP table.\n    ans = dp[n - 1][T]\n    # If the result is still equal to a very large value, it means it's not possible to achieve the target sum.\n    if ans &gt;= int(1e9):\n        return -1\n    return ans\n\ndef main():\n    arr = [1, 2, 3]\n    T = 7\n    print(\"The minimum number of coins required to form the target sum is\", minimumElements(arr, T))\n\nif __name__ == \"__main__\":\n    main()\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\nfunction minimumElements(arr, T) {\n    const n = arr.length;\n    \n    // Create a 2D array to store dynamic programming results, initialized with 0\n    const dp = Array.from({ length: n }, () =&gt; Array(T + 1).fill(0));\n    \n    // Initialize the first row of the dp table\n    for (let i = 0; i &lt;= T; i++) {\n        if (i % arr[0] === 0)  \n            dp[0][i] = i / arr[0];\n        else\n            dp[0][i] = Infinity; // Use Infinity to represent an impossible case\n    }\n    \n    // Populate the dp table using a nested loop\n    for (let ind = 1; ind &lt; n; ind++) {\n        for (let target = 0; target &lt;= T; target++) {\n            \n            const notTake = 0 + dp[ind - 1][target];\n            let take = Infinity;\n            \n            // If the current element is less than or equal to 'target', consider taking it\n            if (arr[ind] &lt;= target)\n                take = 1 + dp[ind][target - arr[ind]];\n                \n             dp[ind][target] = Math.min(notTake, take);\n        }\n    }\n    \n    const ans = dp[n - 1][T];\n    \n    // If it's impossible to reach the target, return -1\n    if (ans === Infinity) return -1;\n    \n    return ans;\n}\n\n// Main function\nfunction main() {\n    const arr = [1, 2, 3];\n    const T = 7;\n    \n    // Call the minimumElements function and print the result\n    console.log(\"The minimum number of elements required to form the target sum is \" + minimumElements(arr, T));\n}\n\n// Call the main function to start the program\nmain();\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Better Approach Here -->\n<strong>Output:</strong> The minimum number of coins required to form the target sum is 3\n\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Better Approach Here -->\n</p><p><strong>Time Complexity: O(N*T)</strong></p>\n<p>Reason: There are two nested loops</p>\n<p><strong>Space Complexity: O(N*T)</strong></p>\n<p>Reason: We are using an external array of size \u2018N*T\u2019. Stack Space is eliminated.</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Better Approach Ends from here -->\n\n\n<!-- Optimal Approach Starts from here -->\n\n<div id=\"optimal-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nSpace Optimization Approach \n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm of Better Approach Here -->\n<p>If we closely look the relation,</p>\n<p><strong>dp[ind][target] =&nbsp; dp[ind-1][target] + dp[ind-1][target-arr[ind]]</strong></p>\n<p>We see that to calculate a value of a cell of the dp array, we need only the previous row values (say prev). So, we don\u2019t need to store an entire array. Hence we can space optimize it.</p>\n<p><strong>Note: </strong>We first need to initialize the first row as we had done in the tabulation approach.</p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\n// Function to find the minimum number of elements needed to form the target sum\nint minimumElements(vector&lt;int&gt;&amp; arr, int T) {\n    int n = arr.size();\n    \n    // Create two vectors to store the previous and current DP states\n    vector&lt;int&gt; prev(T + 1, 0);\n    vector&lt;int&gt; cur(T + 1, 0);\n    \n    // Initialize the first row of the DP table\n    for (int i = 0; i &lt;= T; i++) {\n        if (i % arr[0] == 0)\n            prev[i] = i / arr[0];\n        else\n            prev[i] = 1e9; // Set it to a very large value if not possible\n    }\n    \n    // Fill the DP table using a bottom-up approach\n    for (int ind = 1; ind &lt; n; ind++) {\n        for (int target = 0; target &lt;= T; target++) {\n            // Calculate the minimum elements needed without taking the current element\n            int notTake = prev[target];\n            \n            // Calculate the minimum elements needed by taking the current element\n            int take = 1e9; // Initialize 'take' to a very large value\n            if (arr[ind] &lt;= target)\n                take = 1 + cur[target - arr[ind]];\n                \n            // Store the minimum of 'notTake' and 'take' in the current DP state\n            cur[target] = min(notTake, take);\n        }\n        // Update the previous DP state with the current state for the next iteration\n        prev = cur;\n    }\n    \n    // The answer is in the last row of the DP table\n    int ans = prev[T];\n    \n    // If 'ans' is still very large, it means it's not possible to form the target sum\n    if (ans &gt;= 1e9)\n        return -1;\n    \n    return ans; // Return the minimum number of elements needed\n}\n\nint main() {\n    vector&lt;int&gt; arr = {1, 2, 3};\n    int T = 7;\n    \n    // Call the function to find the minimum number of elements needed\n    int result = minimumElements(arr, T);\n    \n    // Output the result\n    cout &lt;&lt; \"The minimum number of coins required to form the target sum is \" &lt;&lt; result &lt;&lt; endl;\n    \n    return 0; // Return 0 to indicate successful program execution\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\nclass TUF {\n    // Function to find the minimum number of elements to achieve the target sum\n    static int minimumElements(int[] arr, int T) {\n        int n = arr.length;\n\n        // Create two arrays to store results of subproblems: prev and cur\n        int prev[] = new int[T + 1];\n        int cur[] = new int[T + 1];\n\n        // Initialize the prev array for the first element of the array\n        for (int i = 0; i &lt;= T; i++) {\n            if (i % arr[0] == 0)\n                prev[i] = i / arr[0];\n            else\n                prev[i] = (int) Math.pow(10, 9);\n        }\n\n        // Fill the cur array using dynamic programming\n        for (int ind = 1; ind &lt; n; ind++) {\n            for (int target = 0; target &lt;= T; target++) {\n                int notTake = 0 + prev[target];\n                int take = (int) Math.pow(10, 9);\n\n                // If the current element is less than or equal to the target, calculate 'take'\n                if (arr[ind] &lt;= target)\n                    take = 1 + cur[target - arr[ind]];\n\n                // Store the minimum result in the cur array\n                cur[target] = Math.min(notTake, take);\n            }\n\n            // Update prev with cur for the next iteration\n            prev = cur.clone();\n        }\n\n        // Get the minimum number of elements needed for the target sum\n        int ans = prev[T];\n\n        // If it's not possible to achieve the target sum, return -1\n        if (ans &gt;= (int) Math.pow(10, 9))\n            return -1;\n        return ans;\n    }\n\n    public static void main(String args[]) {\n        int arr[] = { 1, 2, 3 };\n        int T = 7;\n\n        // Call the minimumElements function and print the result\n        System.out.println(\"The minimum number of coins required to form the target sum is \" + minimumElements(arr, T));\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\ndef minimumElements(arr, T):\n    n = len(arr)\n    \n    # Initialize two lists: 'prev' and 'cur' for dynamic programming.\n    prev = [0] * (T + 1)  # To store results for the previous element.\n    cur = [0] * (T + 1)   # To store results for the current element.\n\n    # Fill in the DP table for the first element in the array (base case).\n    for i in range(0, 1 + T):\n        if i % arr[0] == 0:\n            prev[i] = i // arr[0]\n        else:\n            # Set an initial large value to indicate that it's not possible to achieve the target sum.\n            prev[i] = int(1e9)\n\n    # Iterate over the array elements and target values to fill in the DP table.\n    for ind in range(1, n):\n        for target in range(T + 1):\n            # Calculate the minimum number of elements needed to achieve the current target.\n            not_take = prev[target]  # Option: Don't take the current element.\n            take = int(1e9)          # Initialize as a large value.\n            \n            if arr[ind] &lt;= target:\n                # Option: Take the current element, reduce the target, and add 1 to the count.\n                take = 1 + cur[target - arr[ind]]\n                \n            cur[target] = min(not_take, take)  # Store the minimum of the two options in the 'cur' list.\n\n        prev = cur  # Update the 'prev' list with the values from the 'cur' list for the next iteration.\n\n    # The result is stored in the 'prev' list for the target T.\n    ans = prev[T]\n    \n    # If the result is still equal to a very large value, it means it's not possible to achieve the target sum.\n    if ans &gt;= int(1e9):\n        return -1\n    return ans\n\ndef main():\n    arr = [1, 2, 3]\n    T = 7\n\n    print(\"The minimum number of coins required to form the target sum is\", minimumElements(arr, T))\n\nif __name__ == \"__main__\":\n    main()\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\nfunction minimumElements(arr, T) {\n    const n = arr.length;\n\n    // Initialize two arrays: 'prev' and 'cur' to store DP values\n    let prev = new Array(T + 1).fill(0);\n    let cur = new Array(T + 1).fill(0);\n\n    // Initialize the first row of the 'prev' array\n    for (let i = 0; i &lt;= T; i++) {\n        if (i % arr[0] === 0)\n            prev[i] = i / arr[0];\n        else\n            prev[i] = Infinity; // Use Infinity to represent an impossible case\n    }\n\n    // Populate the 'cur' array using a nested loop\n    for (let ind = 1; ind &lt; n; ind++) {\n        for (let target = 0; target &lt;= T; target++) {\n\n            const notTake = 0 + prev[target];\n            let take = Infinity;\n\n            // If the current element is less than or equal to 'target', consider taking it\n            if (arr[ind] &lt;= target)\n                take = 1 + cur[target - arr[ind]];\n\n            cur[target] = Math.min(notTake, take);\n        }\n\n        // Update 'prev' to be the same as 'cur' for the next iteration\n        prev = [...cur];\n    }\n\n    const ans = prev[T];\n\n    // If it's impossible to reach the target, return -1\n    if (ans === Infinity) return -1;\n\n    return ans;\n}\n\n// Main function\nfunction main() {\n    const arr = [1, 2, 3];\n    const T = 7;\n\n    // Call the minimumElements function and print the result\n    console.log(\"The minimum number of elements required to form the target sum is \" + minimumElements(arr, T));\n}\n\n// Call the main function to start the program\nmain();\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Optimal Apporach Here -->\n<strong>Output:</strong>The minimum number of coins required to form the target sum is 3\n\n\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Optimal Approach-->\n</p><p><strong>Time Complexity: O(N*T)</strong></p>\n<p>Reason: There are two nested loops.</p>\n<p><strong>Space Complexity: O(T)</strong></p>\n<p>Reason: We are using two external arrays of size \u2018T+1\u2019.</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Optimal Approach Starts from here -->\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n<details>\n<summary class=\"main-summary\">\n<span>\nVideo Explanation\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"yt-video-wrapper\">\n\n<!-- Insert iframe embed Link of Youtube Video-->\n<iframe class=\"lazy-loaded\" loading=\"lazy\" title=\"Minimum Number of Coins\" width=\"810\" height=\"456\" data-lazy-type=\"iframe\" data-src=\"https://www.youtube.com/embed/myPeWb3Y68A?si=1Kbx3dl3jKeEz-bM\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\" src=\"https://www.youtube.com/embed/myPeWb3Y68A?feature=oembed\"></iframe><noscript>\n<iframe loading=\"lazy\" title=\"Minimum Number of Coins\" width=\"810\" height=\"456\" src=\"https://www.youtube.com/embed/myPeWb3Y68A?si=1Kbx3dl3jKeEz-bM\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe></noscript>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script>\n\nconst codeSections = document.querySelectorAll('.code-section');\n\n// Get last selected language from localStorage or set default value\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\n// Update last selected language for all sections and store in localStorage\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\n// Handle copy button click event\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\n// Set initial state of the tabs\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<script>\nconst codeSections = document.querySelectorAll('.code-section');\n\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script src=\"https://takeuforward.org/UXApproachDropDowns/3ApproachJSScript.js\"></script>\n<!-- /wp:html -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;<strong><a href=\"https://www.linkedin.com/in/anshuman-sharma-a1b245194/\" target=\"_blank\" rel=\"noreferrer noopener\">Anshuman Sharma</a></strong> <em>and&nbsp;<a href=\"https://www.linkedin.com/in/abhipsita-das-5b7069212/?originalSubdomain=in\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>Abhipsita Das</strong></a></em>&nbsp;for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->",
    "category_tag": "data-structure",
    "likes": 56,
    "preview": "Problem Statement: Minimum Coins Problem Link: Minimum Coins We are given a target sum of \u2018X\u2019 and \u2018N\u2019 distinct numbers denoting the coin denominations. We need to tell the minimum number of coins r..."
}