{
    "dislikes": 22,
    "video": "Du881K7Jtk8",
    "publishedOn": "Sun Mar 24 2024 22:09:16 GMT+0530 (India Standard Time)",
    "slug": "next-greater-element-using-stack",
    "aid": "1438",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/next-greater-element",
    "title": "Next Greater Element Using Stack",
    "topics": [
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "stack",
            "topic-title": "Stack"
        }
    ],
    "category_tag": "data-structure",
    "likes": 264,
    "preview": "Problem Statement: Given a circular integer array A, return the next greater element for every element in A. The next greater element for an element x is the first element greater than x that we co...",
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement:</strong> Given a circular integer array <strong>A</strong>, return the next greater element for every element in A. The next greater element for an element x is the first element greater than x that we come across while traversing the array in a clockwise manner. If it doesn't exist, return -1 for this element.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Examples</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\"><strong>Example 1: </strong>\n\n<strong>Input:</strong> N = 11, A[] = {3,10,4,2,1,2,6,1,7,2,9}\n\n<strong>Output:</strong> 10,-1,6,6,2,6,7,7,9,9,10\n\n<strong>Explanation:</strong> For the first element in A ,i.e, 3, the greater element which comes next to it while traversing and is closest to it is 10. Hence,10 is present on index 0 in the resultant array. Now for the second element,i.e, 10, there is no greater number and hence -1 is it\u2019s next greater element (NGE). Similarly, we got the NGEs for all other elements present in A.  \n\n\n<strong>Example 2:</strong>\n\n<strong>Input:</strong>  N = 6, A[] = {5,7,1,7,6,0}\n\n<strong>Output:</strong> 7,-1,7,-1,7,5</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Solution</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"textColor\":\"vivid-red\"} -->\n<p class=\"has-vivid-red-color has-text-color\"><strong><em>Disclaimer</em></strong>: <em>Don't jump directly to the solution, try it out yourself first.</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Approach:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This problem can be solved easily and efficiently by using the stack data structure as it is based on the Last in First out (LIFO) principle.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To make it a bit easier let\u2019s first try to solve without considering the array as circular. To find the next greater element we start traversing the given array from the right. As for the rightmost element, there is no other element at its right. Hence, we assign -1 at its index in the resultant array. Since this can be the next greater element (NGE) for some other element, we push it in the stack S. We keep checking for other elements. Let\u2019s say we are checking for an element at index i. We keep popping from the stack until the element at the top of the stack is smaller than A[i]. The main intuition behind popping them is that these elements can never be the NGE for any element present at the left of A[i] because A[i] is greater than these elements. Now, if the top element of S is greater than A[i] then this is NGE of A[i] and we will assign it to res[i], where res is the resultant array. If the stack becomes empty then it implies that no element at the right of A[i] is greater than it and we assign -1. At last, we push A[i] in S.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Dry run:</strong> Let\u2019s apply this algorithm for A[] = {5,7,1,2,6,0}:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":763,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2021/12/image.png\" alt=\"\" class=\"wp-image-763\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><br>So, the resultant array is {7,-1,2,6,-1,-1}. Remember that we have considered the array to be non-circular. For a circular array, the resultant array should be {7,-1,2,6,7,5}.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now we need to make this algorithm work for a circular array. The only difference between a circular and non-circular array is that while searching for the next greater element in a non-circular array we don\u2019t consider the elements left to the concerned element. This can be easily done by inserting the elements of the array A at the end of A, thus making its size double. But we actually don\u2019t require any extra space. We can just traverse the array twice. We actually run a loop 2*N times, where N is the size of the given array. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include&lt;bits/stdc++.h&gt;\n\nusing namespace std;\nclass Solution {\n  public:\n    vector &lt; int &gt; nextGreaterElements(vector &lt; int &gt; &amp; nums) {\n      int n = nums.size();\n      vector &lt; int &gt; nge(n, -1);\n      stack &lt; int &gt; st;\n      for (int i = 2 * n - 1; i &gt;= 0; i--) {\n        while (!st.empty() &amp;&amp; st.top() &lt;= nums[i % n]) {\n          st.pop();\n        }\n\n        if (i &lt; n) {\n          if (!st.empty()) nge[i] = st.top();\n        }\n        st.push(nums[i % n]);\n      }\n      return nge;\n    }\n};\nint main() {\n  Solution obj;\n  vector &lt; int &gt; v {5,7,1,2,6,0};\n  vector &lt; int &gt; res = obj.nextGreaterElements(v);\n  cout &lt;&lt; \"The next greater elements are\" &lt;&lt; endl;\n  for (int i = 0; i &lt; res.size(); i++) {\n    cout &lt;&lt; res[i] &lt;&lt; \" \";\n  }\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The next greater elements are<br>7 -1 2 6 7 5</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(N)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(N)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.io.*;\nimport java.util.*;\nclass TUF {\n    public static int[] nextGreaterElements(int[] nums) {\n        int n = nums.length;\n        int nge[] = new int[n];\n        Stack &lt; Integer &gt; st = new Stack &lt; &gt; ();\n        for (int i = 2 * n - 1; i &gt;= 0; i--) {\n            while (st.isEmpty() == false &amp;&amp; st.peek() &lt;= nums[i % n]) {\n                st.pop();\n            }\n\n            if (i &lt; n) {\n                if (st.isEmpty() == false) nge[i] = st.peek();\n                else nge[i] = -1;\n            }\n\n            st.push(nums[i % n]);\n        }\n        return nge;\n    }\n    public static void main(String args[]) {\n        int arr[]={5,7,1,2,6,0};\n\n        int arr2[] = nextGreaterElements(arr);\n        System.out.println(\"The next greater elements are \");\n        for (int i = 0; i &lt; arr2.length; i++) {\n            System.out.print(arr2[i] + \" \");\n        }\n\n    }\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The next greater elements are<br>7 -1 2 6 7 5</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(N)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(N)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block\" data-lang=\"python\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">from typing import List\n\n\n\n\nclass Solution:\n    def nextGreaterElements(self, nums: List[int]) -> List[int]:\n        n = len(nums)\n        nge = [-1] * n\n        st = []\n\n\n        for i in range(2 * n - 1, -1, -1):\n            while st and st[-1] &lt;= nums[i % n]:\n                st.pop()\n\n\n            if i &lt; n:\n                if st:\n                    nge[i] = st[-1]\n            st.append(nums[i % n])\n        return nge\n\n\n\n\nif __name__ == '__main__':\n    obj = Solution()\n    v = [5, 7, 1, 2, 6, 0]\n    res = obj.nextGreaterElements(v)\n    print(\"The next greater elements are\")\n    print(*res)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The next greater elements are<br>7 -1 2 6 7 5</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(N)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(N)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em><em>Special thanks to\u00a0<strong><strong><a href=\"http://www.linkedin.com/in/astha-yadav-6468661b1\" target=\"_blank\" rel=\"noreferrer noopener nofollow\">Astha Yadav</a></strong></strong>\u00a0<em><em>and\u00a0<a href=\"https://www.linkedin.com/in/imsudip/\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>Sudip Ghosh</strong></a></em></em></em></em> <em><em>for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,\u00a0</em><a href=\"https://takeuforward.org/contribute/help-us-grow-takeuforward/\">please check out this articl</a><em>e</em></em></p></blockquote>\n<!-- /wp:quote -->"
}