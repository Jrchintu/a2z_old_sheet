{
    "dislikes": 5,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:08:07 GMT+0530 (India Standard Time)",
    "slug": "sort-an-array-of-0s-1s-and-2s",
    "aid": "1373",
    "title": "Sort an array of 0s, 1s and 2s",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/sort-an-array-of-0's-1's-and-2's",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "greedy",
            "topic-title": "Greedy"
        },
        {
            "topic-id": "sorting",
            "topic-title": "Sorting"
        }
    ],
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement:</strong> Given an array consisting of only 0s, 1s, and 2s. Write a program to in-place sort the array without using inbuilt sort functions. ( Expected: Single pass-O(N) and constant space)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n<details class=\"article_example_details\">\n<summary class=\"article_example_summary\">\n<span><strong>\nExamples\n</strong>\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"atricle_example_content\">\n<pre class=\"wp-block-preformatted\">\n<strong>Input:</strong> nums = [2,0,2,1,1,0]\n<strong>Output</strong>: [0,0,1,1,2,2]\n\n<strong>Input:</strong> nums = [2,0,1]\n<strong>Output:</strong> [0,1,2]\n\n<strong>Input:</strong> nums = [0]\n<strong>Output:</strong> [0]\n</pre>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Practice Section-->\n<div class=\"practice\">\n<span><strong>Practice: </strong></span>\n<div class=\"problem-buttons\">\n\n<!-- Add Codestudio Problem Link inside href -->\n<a href=\"https://bit.ly/3tlM60B\" target=\"_blank\" rel=\"noopener\">\n<span>Solve Problem</span>\n<img src=\"https://static.takeuforward.org/wp/uploads/2023/04/Group-11-5.png\" alt=\"code-studio\">\n</a>\n</div>\n\n\n<div class=\"problem-buttons\">\n<!-- Add Leetcode Problem Link inside href -->\n<a href=\"https://leetcode.com/problems/sort-colors/\" target=\"_blank\" rel=\"noopener\">\n<span>Solve Problem</span>\n<img src=\"https://cdn.iconscout.com/icon/free/png-256/free-leetcode-3521542-2944960.png?f=webp\" alt=\"leetcode\">\n</a>\n</div>\n</div>\n\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\nyourself first. </em></p>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<div class=\"horizontal_navbar_dsa_article\">\n<div class=\"grid_container_three\">\n<a href=\"#brute-force-approach\" class=\"three-boxes box-a\">\nBrute Force Approach\n</a>\n<a href=\"#better-approach\" class=\"three-boxes box-b\">\nBetter Approach\n</a>\n<a href=\"#optimal-approach\" class=\"three-boxes box-c\">\nOptimal Approach\n</a>\n<a href=\"#dsa_article_video_explanation\" class=\"three-boxes box-d\">\n<svg width=\"26\" height=\"26\" viewBox=\"0 0 20 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M8 10L13.19 7L8 4V10ZM19.56 2.17C19.69 2.64 19.78 3.27 19.84 4.07C19.91 4.87 19.94 5.56 19.94 6.16L20 7C20 9.19 19.84 10.8 19.56 11.83C19.31 12.73 18.73 13.31 17.83 13.56C17.36 13.69 16.5 13.78 15.18 13.84C13.88 13.91 12.69 13.94 11.59 13.94L10 14C5.81 14 3.2 13.84 2.17 13.56C1.27 13.31 0.69 12.73 0.44 11.83C0.31 11.36 0.22 10.73 0.16 9.93C0.0900001 9.13 0.0599999 8.44 0.0599999 7.84L0 7C0 4.81 0.16 3.2 0.44 2.17C0.69 1.27 1.27 0.69 2.17 0.44C2.64 0.31 3.5 0.22 4.82 0.16C6.12 0.0899998 7.31 0.0599999 8.41 0.0599999L10 0C14.19 0 16.8 0.16 17.83 0.44C18.73 0.69 19.31 1.27 19.56 2.17Z\" fill=\"red\"></path>\n</svg>\n\n</a>\n<div class=\"box-e tooltip\">\n<svg viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M12.842 9.25L11.9577 10.17C11.2502 10.89 10.8081 11.5 10.8081 13H8.84297V12.5C8.84297 11.39 9.28511 10.39 9.99255 9.67L11.2109 8.41C11.5745 8.05 11.7906 7.55 11.7906 7C11.7906 6.46957 11.5836 5.96086 11.2151 5.58579C10.8465 5.21071 10.3467 5 9.82552 5C9.30434 5 8.80451 5.21071 8.43598 5.58579C8.06745 5.96086 7.86041 6.46957 7.86041 7H5.89531C5.89531 5.93913 6.30938 4.92172 7.04644 4.17157C7.7835 3.42143 8.78316 3 9.82552 3C10.8679 3 11.8675 3.42143 12.6046 4.17157C13.3417 4.92172 13.7557 5.93913 13.7557 7C13.7543 7.84324 13.4259 8.65183 12.842 9.25ZM10.8081 17H8.84297V15H10.8081M9.82552 0C8.53521 0 7.25754 0.258658 6.06545 0.761205C4.87337 1.26375 3.79021 2.00035 2.87783 2.92893C1.03519 4.8043 0 7.34784 0 10C0 12.6522 1.03519 15.1957 2.87783 17.0711C3.79021 17.9997 4.87337 18.7362 6.06545 19.2388C7.25754 19.7413 8.53521 20 9.82552 20C12.4314 20 14.9306 18.9464 16.7732 17.0711C18.6158 15.1957 19.651 12.6522 19.651 10C19.651 4.47 15.2296 0 9.82552 0Z\" fill=\"black\"></path>\n</svg>\n<div class=\"bottom\">\n<p>Expand any one approach by clicking the given options in the bar. Clicking one approach on bar,\ncloses all other expands. You can manually expand more than one approach at a time</p>\n<i></i>\n</div>\n\n</div>\n</div>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Approaches Drop-Down -->\n<div class=\"dsa_article_dropdown_approachs \">\n\n<!-- Brute Force Approach Starts from here -->\n<div id=\"brute-force-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nBrute Force Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n<p>Sorting ( even if it is not the expected solution here but it can be considered as one of the approaches). Since the <a href=\"https://takeuforward.org/c/multidimensional-arrays-in-cpp/\" target=\"_blank\" rel=\"noreferrer noopener\">array</a> contains only 3 integers, 0, 1, and 2. Simply <a href=\"https://takeuforward.org/data-structure/merge-sort-algorithm/\" target=\"_blank\" rel=\"noreferrer noopener\">sorting the array</a> would arrange the elements in increasing order. </p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n<p><strong>Time Complexity: </strong>O(N*logN)</p>\n<p><strong>Space Complexity: </strong>O(1)</p>\n</p>\n</details>\n</div>\n</details>\n</div>\n\n\n<div id=\"better-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nBetter Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n<p>Keeping count of values</p>\n<p><strong>Intuition: </strong>Since in this case there are only 3 distinct values in the <a href=\"https://takeuforward.org/java/multidimensional-array-in-java/\" target=\"_blank\" rel=\"noreferrer noopener\">array</a> so it's easy to maintain the count of all, Like the count of 0, 1, and 2. This can be followed by overwriting the array based on the frequency(count) of the values.</p>\n<p><strong>Approach:&nbsp;</strong></p>\n<ol><li>Take 3 variables to maintain the count of 0, 1 and 2.</li><li>Travel the array once and increment the corresponding counting variables</li></ol>\n<p>( let's consider <strong>count_0 = a, count_1 = b, count_2 = c</strong> )</p>\n<ol start=\"3\"><li>In 2nd traversal of array, we will now over write the first \u2018a\u2019 indices / positions in array with \u20190\u2019, the next \u2018b\u2019 with \u20181\u2019 and the remaining \u2018c\u2019 with \u20182\u2019.</li></ol>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvoid sortArray(vector&lt;int&gt;&amp; arr, int n) {\n\n    int cnt0 = 0, cnt1 = 0, cnt2 = 0;\n\n    for (int i = 0; i &lt; n; i++) {\n        if (arr[i] == 0) cnt0++;\n        else if (arr[i] == 1) cnt1++;\n        else cnt2++;\n    }\n\n    //Replace the places in the original array:\n    for (int i = 0; i &lt; cnt0; i++) arr[i] = 0; // replacing 0's\n\n    for (int i = cnt0; i &lt; cnt0 + cnt1; i++) arr[i] = 1; // replacing 1's\n\n    for (int i = cnt0 + cnt1; i &lt; n; i++) arr[i] = 2; // replacing 2's\n\n}\n\nint main()\n{\n    int n = 6;\n    vector&lt;int&gt; arr = {0, 2, 1, 2, 0, 1};\n    sortArray(arr, n);\n    cout &lt;&lt; \"After sorting:\" &lt;&lt; endl;\n    for (int i = 0; i &lt; n; i++) {\n        cout &lt;&lt; arr[i] &lt;&lt; \" \";\n    }\n    cout &lt;&lt; endl;\n    return 0;\n}\n</code>\n</pre>\n<p>\n<p><strong>Output: </strong><strong><br></strong>After sorting:<br>0 0 1 1 2 2&nbsp;</p>\n</p>\n\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\npublic class Main {\n    public static void sortArray(ArrayList&lt;Integer&gt; arr, int n) {\n        int cnt0 = 0, cnt1 = 0, cnt2 = 0;\n\n        for (int i = 0; i &lt; n; i++) {\n            if (arr.get(i) == 0) cnt0++;\n            else if (arr.get(i) == 1) cnt1++;\n            else cnt2++;\n        }\n\n        //Replace the places in the original array:\n        for (int i = 0; i &lt; cnt0; i++) arr.set(i, 0); // replacing 0's\n\n        for (int i = cnt0; i &lt; cnt0 + cnt1; i++) arr.set(i, 1); // replacing 1's\n\n        for (int i = cnt0 + cnt1; i &lt; n; i++) arr.set(i, 2); // replacing 2's\n    }\n\n    public static void main(String args[]) {\n        int n = 6;\n        ArrayList&lt;Integer&gt; arr = new ArrayList&lt;&gt;(Arrays.asList(new Integer[] {0, 2, 1, 2, 0, 1}));\n        sortArray(arr, n);\n        System.out.println(\"After sorting:\");\n        for (int i = 0; i &lt; n; i++) {\n            System.out.print(arr.get(i) + \" \");\n        }\n        System.out.println();\n\n    }\n\n}\n</code>\n</pre>\n<p>\n<p><strong>Output: </strong><strong><br></strong>After sorting:<br>0 0 1 1 2 2&nbsp;</p>\n</p>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\ndef sortArray(arr):\n    cnt0 = 0\n    cnt1 = 0\n    cnt2 = 0\n\n    for num in arr:\n        if num == 0:\n            cnt0 += 1\n        elif num == 1:\n            cnt1 += 1\n        else:\n            cnt2 += 1\n\n    for i in range(cnt0):\n        arr[i] = 0\n\n    for i in range(cnt0, cnt0 + cnt1):\n        arr[i] = 1\n\n    for i in range(cnt0 + cnt1, len(arr)):\n        arr[i] = 2\n\nn = 6\narr = [0, 2, 1, 2, 0, 1]\nsortArray(arr)\nprint(\"After sorting:\")\nfor num in arr:\n    print(num, end=\" \")\nprint()\n</code>\n</pre>\n<p>\n<p><strong>Output: </strong><strong><br></strong>After sorting:<br>0 0 1 1 2 2&nbsp;</p>\n</p>\n</div>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n<p><strong>Time Complexity: </strong>O(N) + O(N), where N = size of the array. First O(N) for counting the number of 0\u2019s, 1\u2019s, 2\u2019s, and second O(N) for placing them correctly in the original array.</p>\n<p><strong>Space Complexity: </strong>O(1) as we are not using any extra space.</p>\n</p>\n</details>\n</div>\n</details>\n</div>\n<!-- Better Approach Ends from here -->\n\n\n<!-- Optimal Approach Starts from here -->\n\n<div id=\"optimal-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nOptimal Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n<p><em>This problem is a variation of the popular </em><strong><em>Dutch National flag algorithm</em></strong><em>.</em>&nbsp;</p>\n\n<p>This algorithm contains 3 pointers i.e. low, mid, and high, and 3 main rules.&nbsp; The rules are the following:</p>\n\n<ul><li>arr[0\u2026.low-1] contains 0. [Extreme left part]</li><li>arr[low\u2026.mid-1] contains 1.</li><li>arr[high+1\u2026.n-1] contains 2. [Extreme right part], n = size of the array</li></ul>\n<p>The middle part i.e. arr[mid\u2026.high] is the unsorted segment. So, hypothetically the array with different markers will look like the following:</p>\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/03/Screenshot-2023-03-18-171206.png\" alt=\"\" class=\"wp-image-7992\"/></figure>\n<p>In our case, we can assume that the entire given array is unsorted and so we will place the pointers accordingly. For example, if the given array is: [2,0,2,1,1,0], the array with the 3 pointers will look like the following:</p>\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/03/Screenshot-2023-03-18-171326.png\" alt=\"\" class=\"wp-image-7993\"/></figure>\n<p>Here, as the entire array is unsorted, we have placed the mid pointer in the first index and the high pointer in the last index. The low is also pointing to the first index as we have no other index before 0. Here, we are mostly interested in placing the \u2018mid\u2019 pointer and the \u2018high\u2019 pointer as they represent the unsorted part in the hypothetical array.</p>\n<p>Now, let\u2019s understand how the pointers will work to make the array sorted.</p>\n<p><strong>Approach:</strong></p>\n<p><strong>Note: </strong><em>Here in this tutorial we will work based on the value of the mid pointer.</em></p>\n<p>The steps will be the following:</p>\n<ol><li>First, we will run a loop that will continue until <strong>mid &lt;= high</strong>.</li><li>There can be three different values of mid pointer i.e. arr[mid]<ol><li><strong>If arr[mid] == 0, </strong>we will swap arr[low] and arr[mid] and will increment both low and mid. Now the subarray from index 0 to (low-1) only contains 0.</li><li><strong>If arr[mid] == 1, </strong>we will just increment the mid pointer and then the index (mid-1) will point to 1 as it should according to the rules.</li><li><strong>If arr[mid] == 2, </strong>we will swap arr[mid] and arr[high] and will decrement high. Now the subarray from index high+1 to (n-1) only contains 2.<br>In this step, we will do nothing to the mid-pointer as even after swapping, the subarray from mid to high(<em>after decrementing high</em>) might be unsorted. So, we will check the value of mid again in the next iteration.</li></ol></li><li>Finally, our array should be sorted.</li></ol>\n<p><strong>Dry Run:</strong></p>\n<p>Assume the given array is [2,0,2,1,1,0]. The algorithm will be the following:</p>\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/03/Screenshot-2023-03-18-171428.png\" alt=\"\" class=\"wp-image-7994\"/></figure>\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/03/Screenshot-2023-03-18-173242.png\" alt=\"\" class=\"wp-image-7995\"/></figure>\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/03/Screenshot-2023-03-18-173322.png\" alt=\"\" class=\"wp-image-7996\"/></figure>\n<p>In each iteration, if we check, the rules are always valid. This is how the algorithm works.</p>\n<p><strong>Note: </strong><em>For a better understanding of intuition, please watch the video at the bottom of the page.</em></p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvoid sortArray(vector&lt;int&gt;&amp; arr, int n) {\n\n    int low = 0, mid = 0, high = n - 1; // 3 pointers\n\n    while (mid &lt;= high) {\n        if (arr[mid] == 0) {\n            swap(arr[low], arr[mid]);\n            low++;\n            mid++;\n        }\n        else if (arr[mid] == 1) {\n            mid++;\n        }\n        else {\n            swap(arr[mid], arr[high]);\n            high--;\n        }\n    }\n}\n\nint main()\n{\n    int n = 6;\n    vector&lt;int&gt; arr = {0, 2, 1, 2, 0, 1};\n    sortArray(arr, n);\n    cout &lt;&lt; \"After sorting:\" &lt;&lt; endl;\n    for (int i = 0; i &lt; n; i++) {\n        cout &lt;&lt; arr[i] &lt;&lt; \" \";\n    }\n    cout &lt;&lt; endl;\n    return 0;\n}\n</code>\n</pre>\n<p>\n<p><strong>Output: </strong><strong><br></strong>After sorting:<br>0 0 1 1 2 2 <strong>&nbsp;</strong></p>\n</p>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\npublic class Main {\n    public static void sortArray(ArrayList&lt;Integer&gt; arr, int n) {\n        int low = 0, mid = 0, high = n - 1; // 3 pointers\n\n        while (mid &lt;= high) {\n            if (arr.get(mid) == 0) {\n                // swapping arr[low] and arr[mid]\n                int temp = arr.get(low);\n                arr.set(low, arr.get(mid));\n                arr.set(mid, temp);\n\n                low++;\n                mid++;\n\n            } else if (arr.get(mid) == 1) {\n                mid++;\n\n            } else {\n                // swapping arr[mid] and arr[high]\n                int temp = arr.get(mid);\n                arr.set(mid, arr.get(high));\n                arr.set(high, temp);\n\n                high--;\n            }\n        }\n    }\n\n    public static void main(String args[]) {\n        int n = 6;\n        ArrayList&lt;Integer&gt; arr = new ArrayList&lt;&gt;(Arrays.asList(new Integer[] {0, 2, 1, 2, 0, 1}));\n        sortArray(arr, n);\n        System.out.println(\"After sorting:\");\n        for (int i = 0; i &lt; n; i++) {\n            System.out.print(arr.get(i) + \" \");\n        }\n        System.out.println();\n\n    }\n\n}\n</code>\n</pre>\n<p>\n<p><strong>Output: </strong><strong><br></strong>After sorting:<br>0 0 1 1 2 2 <strong>&nbsp;</strong></p>\n</p>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\ndef sortArray(arr):\n    low = 0\n    mid = 0\n    high = len(arr) - 1\n\n    while mid <= high:\n        if arr[mid] == 0:\n            arr[low], arr[mid] = arr[mid], arr[low]\n            low += 1\n            mid += 1\n        elif arr[mid] == 1:\n            mid += 1\n        else:\n            arr[mid], arr[high] = arr[high], arr[mid]\n            high -= 1\n\nn = 6\narr = [0, 2, 1, 2, 0, 1]\nsortArray(arr)\nprint(\"After sorting:\")\nfor num in arr:\n    print(num, end=\" \")\nprint()\n</code>\n</pre>\n<p>\n<p><strong>Output: </strong><strong><br></strong>After sorting:<br>0 0 1 1 2 2 <strong>&nbsp;</strong></p>\n</p>\n</div>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n<p><strong>Time Complexity: </strong>O(N), where N = size of the given array.<br><strong>Reason: </strong>We are using a single loop that can run at most N times.</p>\n<p><strong>Space Complexity: </strong>O(1) as we are not using any extra space.</p>\n</p>\n</details>\n</div>\n</details>\n</div>\n<!-- Optimal Approach Starts from here -->\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n<details>\n<summary class=\"main-summary\">\n<span>\nVideo Explanation\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"yt-video-wrapper\">\n<!-- Insert iframe embed Link of Youtube Video-->\n<iframe width=\"810\" height=\"456\" src=\"https://www.youtube.com/embed/tp8JIuCXBaU?start=1\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script src=\"https://takeuforward.org/UXApproachDropDowns/3ApproachJSScript.js\"></script>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script>\n\nconst codeSections = document.querySelectorAll('.code-section');\n\n// Get last selected language from localStorage or set default value\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\n// Update last selected language for all sections and store in localStorage\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\n// Handle copy button click event\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\n// Set initial state of the tabs\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<script>\nconst codeSections = document.querySelectorAll('.code-section');\n\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>\n<!-- /wp:html -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;</em><strong><a rel=\"noreferrer noopener\" href=\"https://www.linkedin.com/in/aditya-shahare-970b20186/\" target=\"_blank\">Aditya Shahare</a></strong><em>,&nbsp;<em><em><a href=\"https://www.linkedin.com/in/imsudip/\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>Sudip Ghosh</strong></a></em></em>&nbsp;</em>and <strong><a href=\"https://www.linkedin.com/in/kriti39/\" target=\"_blank\" rel=\"noopener\" title=\"\">KRITIDIPTA GHOSH</a></strong> <em>for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/contribute/help-us-grow-takeuforward/\">please check out this article</a><em>.</em></p></blockquote>\n<!-- /wp:quote -->",
    "category_tag": "data-structure",
    "likes": 635,
    "preview": "Problem Statement: Given an array consisting of only 0s, 1s, and 2s. Write a program to in-place sort the array without using inbuilt sort functions. ( Expected: Single pass-O(N) and constant space..."
}