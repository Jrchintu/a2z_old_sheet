{
    "dislikes": 2,
    "video": "G1fRTGRxXU8",
    "publishedOn": "Sun Mar 24 2024 22:09:51 GMT+0530 (India Standard Time)",
    "slug": "combination-sum-ii-find-all-unique-combinations",
    "aid": "1603",
    "title": "Combination Sum II - Find all unique combinations",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/combination-sum-ii",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "recursion",
            "topic-title": "Recursion"
        }
    ],
    "content": "<!-- wp:paragraph -->\n<p>In this article we will solve the most asked interview question \"Combination Sum II - Find all unique combinations\".</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Problem Statement: </strong>Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target. Each number in candidates may only be used once in the combination.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Note: The solution set must not contain duplicate combinations</strong>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Examples:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\"><strong>Example 1:</strong>\n\n<strong>Input:</strong> candidates = [10,1,2,7,6,1,5], target = 8\n\n<strong>Output:</strong> \n[\n[1,1,6],\n[1,2,5],\n[1,7],\n[2,6]]\n\n\n<strong>Explanation:</strong> These are the unique combinations whose sum is equal to target.\n \n<strong>Example 2:</strong>\n\n<strong>Input:</strong> candidates = [2,5,2,1,2], target = 5\n\n<strong>Output:</strong> [[1,2,2],[5]]\n\n<strong>Explanation:</strong> These are the unique combinations whose sum is equal to target.</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p><strong>Solution:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph {\"textColor\":\"vivid-red\"} -->\n<p class=\"has-vivid-red-color has-text-color\"><strong><em>Disclaimer</em></strong><em>: Don\u2019t jump directly to the solution, try it out yourself first.</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Solution 1: Using extra space and time complexity&nbsp;</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Approach:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Defining the Recursive Function:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img src=\"https://lh5.googleusercontent.com/f1diRM3f00UrQ5WvMCk2dgpAqvRUzDKA12KD9ofKACDADXYy7bVccUUyR5wpem_Ox1OWRIwaKts6c_WimDQDJ5swY3JNU3LyT3KrS5sYqZgqNGv6xCOjq-2naESqNTdwJfpHX3yR\" width=\"624\" height=\"297\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Before starting the recursive call make sure to sort the elements because the ans should contain the combinations in sorted order and should not be repeated.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Initially, We start with the index 0, At index 0 we have n - 1 way<strong> to pick the first element of our subsequence.</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Check if the current index value can be added to our ds. If yes add it to the ds and move the index by 1. while moving the index skip the consecutive repeated elements because they will form duplicate sequences.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reduce the target by arr[i],call the recursive call for f(idx + 1,target - 1,ds,ans) after the call make sure to pop the element from the ds.(By seeing the example recursive You will understand).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>if(arr[i] &gt; target) then terminate the recursive call because there is no use to check as the array is sorted in the next recursive call the index will be moving by 1 all the elements to its<strong> right will be in increasing order.</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Base Condition:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Whenever the target value is zero add the ds to the ans return.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Representation of Recursive call for the example given below:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><img src=\"https://lh6.googleusercontent.com/xsb46oCfbNclHzkzuOZqiGDcST0giAlFSAjWC-FcXA4oYidD7n6DHq3qj4oJ4_qqSk4dzrozFM1V1yF5N237h5oo2rbQo3Y752QRDtZhyTGsEAz0_cEafV0V5uVF6kZmRpQbgetd\" width=\"624\" height=\"397\"></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>If we observe the recursive call for f(2,2,[1,1]) when it is returning the ds doesn\u2019t include 1 so make sure to remove it from ds after the call.</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include&lt;bits/stdc++.h&gt;\n\nusing namespace std;\nvoid findCombination(int ind, int target, vector &lt; int &gt; &amp; arr, vector &lt; vector &lt; int &gt;&gt; &amp; ans, vector &lt; int &gt; &amp; ds) {\n  if (target == 0) {\n    ans.push_back(ds);\n    return;\n  }\n  for (int i = ind; i &lt; arr.size(); i++) {\n    if (i &gt; ind &amp;&amp; arr[i] == arr[i - 1]) continue;\n    if (arr[i] &gt; target) break;\n    ds.push_back(arr[i]);\n    findCombination(i + 1, target - arr[i], arr, ans, ds);\n    ds.pop_back();\n  }\n}\nvector &lt; vector &lt; int &gt;&gt; combinationSum2(vector &lt; int &gt; &amp; candidates, int target) {\n  sort(candidates.begin(), candidates.end());\n  vector &lt; vector &lt; int &gt;&gt; ans;\n  vector &lt; int &gt; ds;\n  findCombination(0, target, candidates, ans, ds);\n  return ans;\n}\nint main() {\n  vector&lt;int&gt; v{10,1,2,7,6,1,5};\n  vector &lt; vector &lt; int &gt;&gt; comb = combinationSum2(v, 8);\n  cout &lt;&lt; \"[ \";\n  for (int i = 0; i &lt; comb.size(); i++) {\n    cout &lt;&lt; \"[ \";\n    for (int j = 0; j &lt; comb[i].size(); j++) {\n      cout &lt;&lt; comb[i][j] &lt;&lt; \" \";\n    }\n    cout &lt;&lt; \"]\";\n  }\n  cout &lt;&lt; \" ]\";\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>[ [ 1 1 6 ][ 1 2 5 ][ 1 7 ][ 2 6 ] ]</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity:O(2^n*k)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Reason: </strong>Assume if all the elements in the array are unique then the no. of subsequence you will get will be O(2^n). we also add the ds to our ans when we reach the base case that will take \u201ck\u201d//average space for the ds.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity:O(k*x)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Reason:</strong> if we have x combinations then space will be x*k where k is the average length of the combination.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\nclass TUF {\n    static void findCombinations(int ind, int[] arr, int target, List &lt; List &lt; Integer &gt;&gt; ans, List &lt; Integer &gt; ds) {\n        if (target == 0) {\n            ans.add(new ArrayList &lt; &gt; (ds));\n            return;\n        }\n\n        for (int i = ind; i &lt; arr.length; i++) {\n            if (i &gt; ind &amp;&amp; arr[i] == arr[i - 1]) continue;\n            if (arr[i] &gt; target) break;\n\n            ds.add(arr[i]);\n            findCombinations(i + 1, arr, target - arr[i], ans, ds);\n            ds.remove(ds.size() - 1);\n        }\n    }\n    public static List &lt; List &lt; Integer &gt;&gt; combinationSum2(int[] candidates, int target) {\n        List &lt; List &lt; Integer &gt;&gt; ans = new ArrayList &lt; &gt; ();\n        Arrays.sort(candidates);\n        findCombinations(0, candidates, target, ans, new ArrayList &lt; &gt; ());\n        return ans;\n    }\n\n    public static void main(String args[]) {\n        int v[]={10,1,2,7,6,1,5};\n        List &lt; List &lt; Integer &gt;&gt; comb = combinationSum2(v, 8);\n        System.out.println(comb.toString().replace(\",\", \" \"));\n    }\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>[ [ 1 1 6 ][ 1 2 5 ][ 1 7 ][ 2 6 ] ]</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity:O(2^n*k)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Reason: </strong>Assume if all the elements in the array are unique then the no. of subsequence you will get will be O(2^n). we also add the ds to our ans when we reach the base case that will take \u201ck\u201d//average space for the ds.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity:O(k*x)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Reason:</strong> if we have x combinations then space will be x*k where k is the average length of the combination.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block\" data-lang=\"python\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">from typing import List\n\n\n\n\ndef combinationSum2(candidates: List[int], target: int) -> List[List[int]]:\n    ans = []\n    ds = []\n    candidates.sort()\n\n\n    def findCombination(ind: int, target: int):\n        if target == 0:\n            ans.append(ds[:])\n            return\n        for i in range(ind, len(candidates)):\n            if i > ind and candidates[i] == candidates[i - 1]:\n                continue\n            if candidates[i] > target:\n                break\n            ds.append(candidates[i])\n            findCombination(i + 1, target - candidates[i])\n            ds.pop()\n\n\n    findCombination(0, target)\n    return ans\n\n\n\n\nif __name__ == \"__main__\":\n    v = [10, 1, 2, 7, 6, 1, 5]\n    comb = combinationSum2(v, 8)\n    print(*comb)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>[ [ 1 1 6 ][ 1 2 5 ][ 1 7 ][ 2 6 ] ]</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity:O(2^n*k)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Reason: </strong>Assume if all the elements in the array are unique then the no. of subsequence you will get will be O(2^n). we also add the ds to our ans when we reach the base case that will take \u201ck\u201d//average space for the ds.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity:O(k*x)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Reason:</strong> if we have x combinations then space will be x*k where k is the average length of the combination.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to\u00a0<a href=\"https://www.linkedin.com/in/bhuvaneshwari-pamarthy-chiranjeevi-a788a1201\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>P.C.Bhuvaneshwari</strong></a>\u00a0 <em><strong><em><strong>and\u00a0<em><a href=\"https://www.linkedin.com/in/imsudip/\" target=\"_blank\" rel=\"noreferrer noopener\">Sudip Ghosh</a></em></strong></em></strong></em></em> <em>for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,\u00a0</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->",
    "category_tag": "data-structure",
    "likes": 133,
    "preview": "In this article we will solve the most asked interview question \"Combination Sum II - Find all unique combinations\". Problem Statement: Given a collection of candidate numbers (candidates) and a ta..."
}