{
    "dislikes": 2,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:09:14 GMT+0530 (India Standard Time)",
    "slug": "serialize-and-deserialize-a-binary-tree",
    "aid": "1431",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/serialize-and-de-serialize-bt",
    "title": "Serialize And Deserialize a Binary Tree",
    "topics": [
        {
            "topic-id": "binary-tree",
            "topic-title": "Binary Tree"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        }
    ],
    "likes": 46,
    "category_tag": "data-structure",
    "preview": "Problem Statement: Given a Binary Tree, design an algorithm to serialise and deserialise it. There is no restriction on how the serialisation and deserialization takes place. But it needs to be ens...",
    "content": "<p><strong>Problem Statement: </strong>  Given a Binary Tree, design an algorithm to serialise and deserialise it. There is no restriction on how the serialisation and deserialization takes place. But it needs to be ensured that the serialised binary tree can be deserialized to the original tree structure. \nSerialisation is the process of translating a data structure or object state into a format that can be stored or transmitted (for example, across a computer network) and reconstructed later. The opposite operation, that is, extracting a data structure from stored information, is deserialization.\n\n</p>\n<div id=\"article_examples\">\n    <details class=\"article_example_details\">\n        <summary class=\"article_example_summary\">\n            <span><strong>\n                    Examples\n                </strong>\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"atricle_example_content\">\n            <pre class=\"wp-block-preformatted\">\n                <span><strong>Example 1:</strong></span>\n\t\t\t\t<span><strong>Input:</strong>Binary Tree: 1 2 3 -1 -1 4 5\n\t\t\t\t</span>\n\t\t\t\t<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/serialise-deserialise-image1-JlgfjezE\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n\t\t\t\t<span><strong>Output:</strong>After Serialisation: 1,2,3,#,#,4,5,#,#,#,#, After Deserialization: (Original Tree Back)</span>\t\t\t\n\t\t\t\t<span><strong>Explanation: </strong> Any algorithm that compresses this binary tree to a string which can be transmitted and from which the binary tree can be reconstructed later can be used.\n\t\t\t\tHere we have used a serialisation algorithm based on level order traversal where comma separates the nodes and # denotes null nodes.</span>\n\t\t\t\t<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/serialise-deserialise-image2-hj-JRxqA\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n\t\t\t\t\n\t\t\t\t<span><strong>Example 2:</strong></span>\n\t\t\t\t<span><strong>Input:</strong>Binary Tree: 1 2 3 -1 4 5 -1\n\t\t\t\t</span>\n\t\t\t\t<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/serialise-deserialise-image3-wsB5QMn-\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n\t\t\t\t<span><strong>Output :</strong>After Serialisation: 1,2,3,#,4,5,#, After Deserialization: (Original Tree Back)</span>\n\t\t\t\t\n\t\t\t\t<span><strong>Explanation: </strong> Any algorithm that compresses this binary tree to a string which can be transmitted and from which the binary tree can be reconstructed later can be used.\n\t\t\t\tHere we have used a serialisation algorithm based on level order traversal where comma separates the nodes and # denotes null nodes. </span>\n\t\t\t\t<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/serialise-deserialise-image4-p7vxY_Di\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\t\t\n            </pre>\n        </div>\n    </details>\n</div>\n\n<!-- This is Practice Section-->\n<div class=\"practice\">\n    <span><strong>Practice: </strong></span>\n    <div class=\"problem-buttons\">\n\n        <!-- Add Problem Link inside href -->\n        <a href=\"https://www.codingninjas.com/studio/problems/serialize-and-deserialize-binary-tree_920328?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf\" target=\"_blank\" rel=\"noopener\">\n            <span>Solve Problem</span>\n            <img src=\"https://takeuforward-content-images.s3.ap-south-1.amazonaws.com/content/Group-11-5-pFOq-8ga\"\n                alt=\"code-studio\">\n        </a>\n    </div>\n    <!--<div class=\"problem-buttons\">\n         Add Problem Link inside href \n        <a href=\"\" target=\"_blank\" rel=\"noopener\">\n            <span>Solve Problem</span>\n            <img src=\"https://cdn.iconscout.com/icon/free/png-256/free-leetcode-3521542-2944960.png?f=webp\"\n                alt=\"leetcode\">\n        </a>\n    </div>-->\n</div>\n\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\n        yourself first. </em></p>\n\n\n<div id=\"brute-force-approach\">\n    <details>\n        <summary class=\"main-summary\">\n            <span>\n                Optimal Approach \n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                </path>\n            </svg>\n        </summary>\n        <div class=\"common-drops\">\n            <details class=\"secondary-details\" open=\"\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Algorithm / Intuition\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <div class=\"approach-algorithm\">\n                    <!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n                    <h3>Serialisation:</h3>\n                    <p><strong>Step 1:</strong> Check if the tree is empty: If the root is null, return an empty string.</p>\n                    <p><strong>Step 2:</strong> Initialise an empty string: This string will store the serialised binary tree.</p>\n                    <p><strong>Step 3:</strong> Use a queue for level-order traversal: Initialise a queue and enqueue the root.</p>\n                    <p><figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/serialise-deserialise-image5-rCwIAtKs\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure></p>\n                    <p><strong>Step 4:</strong> Within the level-order traversal loop:\n                    <ol><li>Dequeue a node from the queue.</li><li>If the node is null, append \"#\" to the string.</li><li>If the node is not null, append its data value along with a \u2018,\u2019 (comma) to the string.  This comma acts as a delimiter that separates the different node values in the string. Enqueue its left and right children.</li></ol></p>\n                    <p><figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/serialise-deserialise-image6-1042nyt8\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure></p>\n                    <p><strong>Step 5:</strong> Return the final string containing the serialised representation of the tree.</p>\n                    \n                    <h3>Deserialization: </h3>\n                    <p><strong>Step 1:</strong>Check if the serialised data is empty: If it is, return null.</p>\n                    <p><strong>Step 2: </strong>Tokenize the serialised data: Use a stringstream to tokenize the input string using the comma as a delimiter. </p>                   \n\n                    <p><strong>Step 3: </strong>\n                    Read the root value: Read the first token and create the root node with this value.</p>\n                                               \n                    <p><strong>Step 4: </strong>\n                    Use a queue for level-order traversal: Initialise a queue and enqueue the root.</p>\n                \t<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/serialise-deserialise-image7-SNFH3lNR\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n                \t<p><strong>Step 5: </strong>\n                   \tWithin the level-order traversal loop:\n                   \t<ol><li>Dequeue a node from the queue.</li><li>Read the value for the left child from the stringstream.</li><li>If it is \"#\", set the left child to null. If it's not \"#\", create a new node with the value and set it as the left child.</li><li>Read the next value in the stringstream for the right child.</li><li>If it is \"#\", set the right child to null. If it's not \"#\", create a new node with the value and set it as the right child.</li><li>Enqueue the left and right children into the queue for further traversal.</li></ol></p>\n                    <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/serialise-deserialise-image8-dhXCl_uH\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n                \t<p><strong>Step 6: </strong>\n                    Return the reconstructed root: The final result is the root of the reconstructed tree.</p>\n\n                    \n                </div>\n            </details>\n            <details class=\"code-section secondary-details\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Code\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <div class=\"code-tabs\">\n                    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n                    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n                    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n                    <button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n                    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\"\n                        xmlns=\"http://www.w3.org/2000/svg\">\n                        <path\n                            d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n                        </path>\n                    </svg>\n                </div>\n                <div class=\"code-content\">\n                    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;iostream&gt;\n#include &lt;queue&gt;\n#include &lt;sstream&gt;\nusing namespace std;\n\n// Definition for a\n// binary tree node.\nstruct TreeNode {\n    int val;\n    TreeNode* left;\n    TreeNode* right;\n    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n};\n\nclass Solution {\npublic:\n    // Encodes the tree into a single string\n    string serialize(TreeNode* root) {\n        // Check if the tree is empty\n        if (!root) {\n            return &quot;&quot;;\n        }\n\n        // Initialize an empty string\n        // to store the serialized data\n        string s = &quot;&quot;;\n        // Use a queue for\n        // level-order traversal\n        queue&lt;TreeNode*&gt; q;\n        // Start with the root node\n        q.push(root);\n\n        // Perform level-order traversal\n        while (!q.empty()) {\n            // Get the front node in the queue\n            TreeNode* curNode = q.front();\n            q.pop();\n\n            // Check if the current node is\n            // null and append &quot;#&quot; to the string\n            if (curNode == nullptr) {\n                s += &quot;#,&quot;;\n            } else {\n                // Append the value of the\n                // current node to the string\n                s += to_string(curNode-&gt;val) + &quot;,&quot;;\n                // Push the left and right children\n                // to the queue for further traversal\n                q.push(curNode-&gt;left);\n                q.push(curNode-&gt;right);\n            }\n        }\n\n        // Return the\n        // serialized string\n        return s;\n    }\n\n    // Decode the encoded\n    // data to a tree\n    TreeNode* deserialize(string data) {\n        // Check if the\n        // serialized data is empty\n        if (data.empty()) {\n            return nullptr;\n        }\n\n        // Use a stringstream to\n        // tokenize the serialized data\n        stringstream s(data);\n        string str;\n        // Read the root value\n        // from the serialized data\n        getline(s, str, ',');\n        TreeNode* root = new TreeNode(stoi(str));\n\n        // Use a queue for \n        // level-order traversal\n        queue&lt;TreeNode*&gt; q;\n        // Start with the root node\n        q.push(root);\n\n        // Perform level-order traversal\n        // to reconstruct the tree\n        while (!q.empty()) {\n            // Get the front node in the queue\n            TreeNode* node = q.front();\n            q.pop();\n\n            // Read the value of the left\n            // child from the serialized data\n            getline(s, str, ',');\n            // If the value is not &quot;#&quot;, create a new\n            // left child and push it to the queue\n            if (str != &quot;#&quot;) {\n                TreeNode* leftNode = new TreeNode(stoi(str));\n                node-&gt;left = leftNode;\n                q.push(leftNode);\n            }\n\n            // Read the value of the right child\n            // from the serialized data\n            getline(s, str, ',');\n            // If the value is not &quot;#&quot;, create a\n            // new right child and push it to the queue\n            if (str != &quot;#&quot;) {\n                TreeNode* rightNode = new TreeNode(stoi(str));\n                node-&gt;right = rightNode;\n                q.push(rightNode);\n            }\n        }\n\n        // Return the reconstructed\n        // root of the tree\n        return root;\n    }\n};\n\n\nvoid inorder(TreeNode* root){\n    if(!root){\n        return;\n    }\n    inorder(root-&gt;left);\n    cout &lt;&lt; root-&gt;val &lt;&lt; &quot; &quot;;\n    inorder(root-&gt;right);\n}\n\nint main() {\n    TreeNode* root = new TreeNode(1);\n    root-&gt;left = new TreeNode(2);\n    root-&gt;right = new TreeNode(3);\n    root-&gt;right-&gt;left = new TreeNode(4);\n    root-&gt;right-&gt;right = new TreeNode(5);\n\n    Solution solution;\n    cout &lt;&lt; &quot;Orignal Tree: &quot;;\n    inorder(root);\n    cout &lt;&lt; endl;\n\n    string serialized = solution.serialize(root);\n    cout &lt;&lt; &quot;Serialized: &quot; &lt;&lt; serialized &lt;&lt; endl;\n\n    TreeNode* deserialized = solution.deserialize(serialized);\n    cout &lt;&lt; &quot;Tree after deserialisation: &quot;;\n    inorder(deserialized);\n    cout &lt;&lt; endl;\n\n    return 0;\n}\n                            </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block \" data-lang=\"java\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"java\" class=\"language-java\">\nimport java.util.LinkedList;\nimport java.util.Queue;\n\n// Definition for a binary tree node.\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n    TreeNode(int x) { val = x; }\n}\n\npublic class Solution {\n\n    // Encodes the tree into a single string\n    public String serialize(TreeNode root) {\n        // Check if the tree is empty\n        if (root == null) {\n            return &quot;&quot;;\n        }\n\n        // Initialize an empty string\n        // to store the serialized data\n        StringBuilder sb = new StringBuilder();\n        // Use a queue for\n        // level-order traversal\n        Queue&lt;TreeNode&gt; q = new LinkedList&lt;&gt;();\n        // Start with the root node\n        q.offer(root);\n\n        // Perform level-order traversal\n        while (!q.isEmpty()) {\n            // Get the front node in the queue\n            TreeNode curNode = q.poll();\n\n            // Check if the current node is\n            // null and append &quot;#&quot; to the string\n            if (curNode == null) {\n                sb.append(&quot;#,&quot;);\n            } else {\n                // Append the value of the\n                // current node to the string\n                sb.append(curNode.val).append(&quot;,&quot;);\n                // Push the left and right children\n                // to the queue for further traversal\n                q.offer(curNode.left);\n                q.offer(curNode.right);\n            }\n        }\n\n        // Return the\n        // serialized string\n        return sb.toString();\n    }\n\n    // Decode the encoded\n    // data to a tree\n    public TreeNode deserialize(String data) {\n        // Check if the\n        // serialized data is empty\n        if (data.isEmpty()) {\n            return null;\n        }\n\n        // Use a StringBuilder to\n        // tokenize the serialized data\n        StringBuilder s = new StringBuilder(data);\n        // Read the root value\n        // from the serialized data\n        int commaIndex = s.indexOf(&quot;,&quot;);\n        String str = s.substring(0, commaIndex);\n        s.delete(0, commaIndex + 1);\n        TreeNode root = new TreeNode(Integer.parseInt(str));\n\n        // Use a queue for \n        // level-order traversal\n        Queue&lt;TreeNode&gt; q = new LinkedList&lt;&gt;();\n        // Start with the root node\n        q.offer(root);\n\n        // Perform level-order traversal\n        // to reconstruct the tree\n        while (!q.isEmpty()) {\n            // Get the front node in the queue\n            TreeNode node = q.poll();\n\n            // Read the value of the left\n            // child from the serialized data\n            commaIndex = s.indexOf(&quot;,&quot;);\n            str = s.substring(0, commaIndex);\n            s.delete(0, commaIndex + 1);\n            // If the value is not &quot;#&quot;, create a new\n            // left child and push it to the queue\n            if (!str.equals(&quot;#&quot;)) {\n                TreeNode leftNode = new TreeNode(Integer.parseInt(str));\n                node.left = leftNode;\n                q.offer(leftNode);\n            }\n\n            // Read the value of the right child\n            // from the serialized data\n            commaIndex = s.indexOf(&quot;,&quot;);\n            str = s.substring(0, commaIndex);\n            s.delete(0, commaIndex + 1);\n            // If the value is not &quot;#&quot;, create a\n            // new right child and push it to the queue\n            if (!str.equals(&quot;#&quot;)) {\n                TreeNode rightNode = new TreeNode(Integer.parseInt(str));\n                node.right = rightNode;\n                q.offer(rightNode);\n            }\n        }\n\n        // Return the reconstructed\n        // root of the tree\n        return root;\n    }\n\n    public static void inorder(TreeNode root) {\n        if (root == null) {\n            return;\n        }\n        inorder(root.left);\n        System.out.print(root.val + &quot; &quot;);\n        inorder(root.right);\n    }\n\n    public static void main(String[] args) {\n        TreeNode root = new TreeNode(1);\n        root.left = new TreeNode(2);\n        root.right = new TreeNode(3);\n        root.right.left = new TreeNode(4);\n        root.right.right = new TreeNode(5);\n\n        Solution solution = new Solution();\n        System.out.print(&quot;Orignal Tree: &quot;);\n        inorder(root);\n        System.out.println();\n\n        String serialized = solution.serialize(root);\n        System.out.println(&quot;Serialized: &quot; + serialized);\n\n        TreeNode deserialized = solution.deserialize(serialized);\n        System.out.print(&quot;Tree after deserialization: &quot;);\n        inorder(deserialized);\n        System.out.println();\n    }\n}\n                            </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block\" data-lang=\"python\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"python\" class=\"language-python\">\nfrom queue import Queue\nfrom typing import Optional\n\n# Definition for a\n# binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def serialize(self, root: Optional[TreeNode]) -&gt; str:\n        # Check if the tree is empty\n        if not root:\n            return &quot;&quot;\n\n        # Initialize an empty string\n        # to store the serialized data\n        s = &quot;&quot;\n        # Use a queue for\n        # level-order traversal\n        q = Queue()\n        # Start with the root node\n        q.put(root)\n\n        # Perform level-order traversal\n        while not q.empty():\n            # Get the front node in the queue\n            cur_node = q.get()\n\n            # Check if the current node is\n            # null and append &quot;#&quot; to the string\n            if not cur_node:\n                s += &quot;#,&quot;\n            else:\n                # Append the value of the\n                # current node to the string\n                s += str(cur_node.val) + &quot;,&quot;\n                # Push the left and right children\n                # to the queue for further traversal\n                q.put(cur_node.left)\n                q.put(cur_node.right)\n\n        # Return the\n        # serialized string\n        return s\n\n    def deserialize(self, data: str) -&gt; Optional[TreeNode]:\n        # Check if the\n        # serialized data is empty\n        if not data:\n            return None\n\n        # Use a queue for\n        # level-order traversal\n        q = Queue()\n        # Use a list to store tokens\n        tokens = data.split(',')\n        # Read the root value\n        # from the serialized data\n        root_val = int(tokens.pop(0))\n        root = TreeNode(root_val)\n        q.put(root)\n\n        # Perform level-order traversal\n        # to reconstruct the tree\n        while not q.empty():\n            # Get the front node in the queue\n            node = q.get()\n\n            # Read the value of the left\n            # child from the serialized data\n            left_val = tokens.pop(0)\n            # If the value is not &quot;#&quot;, create a new\n            # left child and push it to the queue\n            if left_val != &quot;#&quot;:\n                left_node = TreeNode(int(left_val))\n                node.left = left_node\n                q.put(left_node)\n\n            # Read the value of the right child\n            # from the serialized data\n            right_val = tokens.pop(0)\n            # If the value is not &quot;#&quot;, create a\n            # new right child and push it to the queue\n            if right_val != &quot;#&quot;:\n                right_node = TreeNode(int(right_val))\n                node.right = right_node\n                q.put(right_node)\n\n        # Return the reconstructed\n        # root of the tree\n        return root\n\ndef inorder(root):\n    if not root:\n        return\n    inorder(root.left)\n    print(root.val, end=&quot; &quot;)\n    inorder(root.right)\n\nif __name__ == &quot;__main__&quot;:\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.right.left = TreeNode(4)\n    root.right.right = TreeNode(5)\n\n    solution = Solution()\n    print(&quot;Original Tree: &quot;, end=&quot;&quot;)\n    inorder(root)\n    print()\n\n    serialized = solution.serialize(root)\n    print(&quot;Serialized: &quot; + serialized)\n\n    deserialized = solution.deserialize(serialized)\n    print(&quot;Tree after deserialization: &quot;, end=&quot;&quot;)\n    inorder(deserialized)\n    print()\n                           </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block\" data-lang=\"javascript\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"javascript\" class=\"language-javascript\">\n// Definition for a binary tree node.\nclass TreeNode {\n    constructor(val) {\n        this.val = val;\n        this.left = this.right = null;\n    }\n}\n\nclass Solution {\n    // Encodes the tree into a single string\n    serialize(root) {\n        // Check if the tree is empty\n        if (!root) {\n            return \"\";\n        }\n\n        // Initialize an empty string\n        // to store the serialized data\n        let s = \"\";\n        // Use a queue for\n        // level-order traversal\n        let q = [];\n        // Start with the root node\n        q.push(root);\n\n        // Perform level-order traversal\n        while (q.length > 0) {\n            // Get the front node in the queue\n            let curNode = q.shift();\n\n            // Check if the current node is\n            // null and append \"#\" to the string\n            if (curNode === null) {\n                s += \"#,\";\n            } else {\n                // Append the value of the\n                // current node to the string\n                s += curNode.val + \",\";\n                // Push the left and right children\n                // to the queue for further traversal\n                q.push(curNode.left);\n                q.push(curNode.right);\n            }\n        }\n\n        // Return the\n        // serialized string\n        return s;\n    }\n\n    // Decode the encoded\n    // data to a tree\n    deserialize(data) {\n        // Check if the\n        // serialized data is empty\n        if (data === \"\") {\n            return null;\n        }\n\n        // Use a stringstream to\n        // tokenize the serialized data\n        let s = data.split(\",\");\n        // Read the root value\n        // from the serialized data\n        let rootVal = s.shift();\n        let root = new TreeNode(parseInt(rootVal));\n\n        // Use a queue for \n        // level-order traversal\n        let q = [];\n        // Start with the root node\n        q.push(root);\n\n        // Perform level-order traversal\n        // to reconstruct the tree\n        while (q.length > 0) {\n            // Get the front node in the queue\n            let node = q.shift();\n\n            // Read the value of the left\n            // child from the serialized data\n            let leftVal = s.shift();\n            // If the value is not \"#\", create a new\n            // left child and push it to the queue\n            if (leftVal !== \"#\") {\n                let leftNode = new TreeNode(parseInt(leftVal));\n                node.left = leftNode;\n                q.push(leftNode);\n            }\n\n            // Read the value of the right child\n            // from the serialized data\n            let rightVal = s.shift();\n            // If the value is not \"#\", create a\n            // new right child and push it to the queue\n            if (rightVal !== \"#\") {\n                let rightNode = new TreeNode(parseInt(rightVal));\n                node.right = rightNode;\n                q.push(rightNode);\n            }\n        }\n\n        // Return the reconstructed\n        // root of the tree\n        return root;\n    }\n}\n\nfunction inorder(root) {\n    if (!root) {\n        return;\n    }\n    inorder(root.left);\n    console.log(root.val + \" \");\n    inorder(root.right);\n}\n\n// Main function\nfunction main() {\n    let root = new TreeNode(1);\n    root.left = new TreeNode(2);\n    root.right = new TreeNode(3);\n    root.right.left = new TreeNode(4);\n    root.right.right = new TreeNode(5);\n\n    let solution = new Solution();\n    console.log(\"Original Tree: \");\n    inorder(root);\n    console.log(\"\\n\");\n\n    let serialized = solution.serialize(root);\n    console.log(\"Serialized: \" + serialized + \"\\n\");\n\n    let deserialized = solution.deserialize(serialized);\n    console.log(\"Tree after deserialization: \");\n    inorder(deserialized);\n    console.log(\"\\n\");\n}\n\n// Run the main function\nmain();\n\n                            </code>\n                        </pre>\n                    </div>\n                    <p>\n                       <strong>Output</strong> \n                      \tOriginal Tree: 2 1 4 3 5, Serialized: 1,2,3,#,#,4,5,#,#,#,#, Tree after deserialization: 2 1 4 3 5 \n                    </p>\n                </div>\n            </details>\n            <details class=\"secondary-details\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Complexity Analysis\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <p>\n                    <!-- Insert Time and Space Complexity  Here -->\n                    <p><strong>Time Complexity: O(N)</strong>\n                    <ol><li>serialize function: O(N), where N is the number of nodes in the tree. This is because the function performs a level-order traversal of the tree, visiting each node once.</li><li>deserialize function: O(N), where N is the number of nodes in the tree. Similar to the serialize function, it processes each node once while reconstructing the tree.</li></ol></p>\n\n\t\t\t\t\t<p><strong>Space Complexity: O(N)</strong>   \n\t\t\t\t\t<ol><li>serialize function: O(N), where N is the maximum number of nodes at any level in the tree. In the worst case, the queue can hold all nodes at the last level of the tree.</li><li>deserialize function: O(N), where N is the maximum number of nodes at any level in the tree. The queue is used to store nodes during the reconstruction process, and in the worst case, it may hold all nodes at the last level.</li></ol></p>\n\n                </p>\n            </details>\n        </div>\n    </details>\n</div>\n\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n    <details>\n        <summary class=\"main-summary\">\n            <span>\n                Video Explanation\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"yt-video-wrapper\">\n            <!-- Insert iframe embed Link of Youtube Video-->\n        <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/-YbXySKJsX8?si=-Yyd-M1gR_yHYuq6\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n        </div>\n    </details>\n</div>\n\n<blockquote class=\"wp-block-quote\">\n    Special thanks to <strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268\">Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,<strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\"> please check out this article</a></strong>\n</blockquote>\n\n<script>\n\n    const codeSections = document.querySelectorAll('.code-section');\n\n    // Get last selected language from localStorage or set default value\n    let lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp';\n\n    codeSections.forEach((section, sectionIndex) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n        const copyBtn = section.querySelector('.copy-btn');\n\n        codeTabs.forEach((tab) => {\n            tab.addEventListener('click', () => {\n                codeTabs.forEach((t) => {\n                    t.classList.remove('dsa_article_code_active');\n                });\n                tab.classList.add('dsa_article_code_active');\n\n                const lang = tab.dataset.lang;\n                const activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                codeBlocks.forEach((block) => {\n                    if (block === activeBlock) {\n                        block.classList.add('dsa_article_code_active');\n                    } else {\n                        block.classList.remove('dsa_article_code_active');\n                    }\n                });\n\n                // Update last selected language for all sections and store in localStorage\n                lastSelectedLanguage = lang;\n                localStorage.setItem('lastSelectedLanguage', lang);\n                codeSections.forEach((otherSection, otherIndex) => {\n                    if (otherIndex !== sectionIndex) {\n                        const otherTabs = otherSection.querySelectorAll('.code-tab');\n                        otherTabs.forEach((otherTab) => {\n                            if (otherTab.dataset.lang === lang) {\n                                otherTab.classList.add('dsa_article_code_active');\n                            } else {\n                                otherTab.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                        const otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                        const otherCodeBlocks = otherSection.querySelectorAll('.code-block');\n                        otherCodeBlocks.forEach((block) => {\n                            if (block === otherActiveBlock) {\n                                block.classList.add('dsa_article_code_active');\n                            } else {\n                                block.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                    }\n                });\n            });\n        });\n\n        // Handle copy button click event\n        copyBtn.addEventListener('click', () => {\n            const activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\n            navigator.clipboard.writeText(activeBlock.innerText);\n            copyBtn.classList.add('dsa_article_code_active');\n            setTimeout(() => {\n                copyBtn.classList.remove('dsa_article_code_active');\n            }, 1000);\n        });\n    });\n\n    // Set initial state of the tabs\n    codeSections.forEach((section) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n\n        codeTabs.forEach((tab) => {\n            if (tab.dataset.lang === lastSelectedLanguage) {\n                tab.classList.add('dsa_article_code_active');\n            } else {\n                tab.classList.remove('dsa_article_code_active');\n            }\n        });\n\n        codeBlocks.forEach((block) => {\n            if (block.dataset.lang === lastSelectedLanguage) {\n                block.classList.add('dsa_article_code_active');\n            } else {\n                block.classList.remove('dsa_article_code_active');\n            }\n        });\n    });\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>"
}