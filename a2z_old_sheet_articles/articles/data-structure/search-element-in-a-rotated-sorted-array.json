{
    "dislikes": 5,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:09:12 GMT+0530 (India Standard Time)",
    "slug": "search-element-in-a-rotated-sorted-array",
    "aid": "1419",
    "title": "Search Element in a Rotated Sorted Array",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/search-in-rotated-sorted-array-i",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "binary-search",
            "topic-title": "Binary Search"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        }
    ],
    "content": "<!-- wp:paragraph -->\n<p><strong><strong>Problem Statement:</strong> </strong>Given an integer array arr of size N, sorted in ascending order (with distinct values) and a target value k. Now the array is rotated at some pivot point unknown to you. Find the index at which k is present and if k is not present return -1.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n<details class=\"article_example_details\">\n<summary class=\"article_example_summary\">\n<span><strong>\nExamples\n</strong>\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"atricle_example_content\">\n<pre class=\"wp-block-preformatted\"><!-- Insert New Examples Here -->\n<pre class=\"wp-block-preformatted\">Example 1:\nInput Format: arr = [4,5,6,7,0,1,2,3], k = 0\nResult: 4\nExplanation: Here, the target is 0. We can see that 0 is present in the given rotated sorted array, nums. Thus, we get output as 4, which is the index at which 0 is present in the array.\n\nExample 2:\nInput Format: arr = [4,5,6,7,0,1,2], k = 3\nResult: -1\nExplanation: Here, the target is 3. Since 3 is not present in the given rotated sorted array. Thus, we get the output as -1.\n</pre>\n</pre>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Solution:</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>How does the rotation occur in a sorted array?</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Let's consider a sorted array: {1, 2, 3, 4, 5}. If we rotate this array at index 3, it will become: {4, 5, 1, 2, 3}. In essence, we moved the element at the last index to the front, while shifting the remaining elements to the right. We performed this process twice.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":11373,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/06/Screenshot-2023-06-20-234958.png\" alt=\"\" class=\"wp-image-11373\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:html -->\n<!-- This is Practice Section-->\n<div class=\"practice\">\n<span><strong>Practice: </strong></span>\n<div class=\"problem-buttons\">\n\n<!-- Add Problem Link inside href -->\n<a href=\"https://bit.ly/3MrHDlT\" target=\"_blank\" rel=\"noopener\">\n<span>Solve Problem</span>\n<img src=\"https://static.takeuforward.org/wp/uploads/2023/04/Group-11-5.png\" alt=\"code-studio\">\n</a>\n</div>\n</div>\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\nyourself first. </em></p>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<div class=\"horizontal_navbar_dsa_article\">\n<div class=\"grid_container_two\">\n<a href=\"#brute-force-approach\" class=\"two-boxes box-a\">\nBrute Force Approach\n</a>\n<a href=\"#optimal-approach\" class=\"two-boxes box-c\">\nOptimal Approach\n</a>\n<a href=\"#dsa_article_video_explanation\" class=\"three-boxes box-d\">\n<svg width=\"26\" height=\"26\" viewBox=\"0 0 20 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M8 10L13.19 7L8 4V10ZM19.56 2.17C19.69 2.64 19.78 3.27 19.84 4.07C19.91 4.87 19.94 5.56 19.94 6.16L20 7C20 9.19 19.84 10.8 19.56 11.83C19.31 12.73 18.73 13.31 17.83 13.56C17.36 13.69 16.5 13.78 15.18 13.84C13.88 13.91 12.69 13.94 11.59 13.94L10 14C5.81 14 3.2 13.84 2.17 13.56C1.27 13.31 0.69 12.73 0.44 11.83C0.31 11.36 0.22 10.73 0.16 9.93C0.0900001 9.13 0.0599999 8.44 0.0599999 7.84L0 7C0 4.81 0.16 3.2 0.44 2.17C0.69 1.27 1.27 0.69 2.17 0.44C2.64 0.31 3.5 0.22 4.82 0.16C6.12 0.0899998 7.31 0.0599999 8.41 0.0599999L10 0C14.19 0 16.8 0.16 17.83 0.44C18.73 0.69 19.31 1.27 19.56 2.17Z\" fill=\"red\"></path>\n</svg>\n\n</a>\n<div class=\"box-e tooltip\">\n<svg viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M12.842 9.25L11.9577 10.17C11.2502 10.89 10.8081 11.5 10.8081 13H8.84297V12.5C8.84297 11.39 9.28511 10.39 9.99255 9.67L11.2109 8.41C11.5745 8.05 11.7906 7.55 11.7906 7C11.7906 6.46957 11.5836 5.96086 11.2151 5.58579C10.8465 5.21071 10.3467 5 9.82552 5C9.30434 5 8.80451 5.21071 8.43598 5.58579C8.06745 5.96086 7.86041 6.46957 7.86041 7H5.89531C5.89531 5.93913 6.30938 4.92172 7.04644 4.17157C7.7835 3.42143 8.78316 3 9.82552 3C10.8679 3 11.8675 3.42143 12.6046 4.17157C13.3417 4.92172 13.7557 5.93913 13.7557 7C13.7543 7.84324 13.4259 8.65183 12.842 9.25ZM10.8081 17H8.84297V15H10.8081M9.82552 0C8.53521 0 7.25754 0.258658 6.06545 0.761205C4.87337 1.26375 3.79021 2.00035 2.87783 2.92893C1.03519 4.8043 0 7.34784 0 10C0 12.6522 1.03519 15.1957 2.87783 17.0711C3.79021 17.9997 4.87337 18.7362 6.06545 19.2388C7.25754 19.7413 8.53521 20 9.82552 20C12.4314 20 14.9306 18.9464 16.7732 17.0711C18.6158 15.1957 19.651 12.6522 19.651 10C19.651 4.47 15.2296 0 9.82552 0Z\" fill=\"black\"></path>\n</svg>\n<div class=\"bottom\">\n<p>Expand any one approach by clicking the given options in the bar. Clicking one approach on bar,\ncloses all other expands. You can manually expand more than one approach at a time</p>\n<i></i>\n</div>\n\n</div>\n</div>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<div class=\"dsa_article_dropdown_approachs \">\n\n<!-- Brute Force Approach Starts from here -->\n<div id=\"brute-force-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nBrute Force Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n<h3><strong>Naive Approach (Brute force)</strong>:&nbsp;</h3>\n<p>One straightforward approach we can consider is using the <a href=\"https://takeuforward.org/data-structure/linear-search-in-c/\">linear search algorithm</a>. Using this method, we will traverse the array to find the location of the target value. If it is found we will simply return the index and otherwise, we will return -1.</p>\n<h3><strong>Algorithm:</strong></h3>\n<ul><li>We will traverse the array and check every element if it is equal to k. If we find any element, we will return its index.</li><li><strong>Otherwise, </strong>we will return -1.</li></ul>\n\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint search(vector&lt;int&gt;&amp; arr, int n, int k) {\n    for (int i = 0; i &lt; n; i++) {\n        if (arr[i] == k)\n            return i;\n    }\n    return -1;\n}\n\nint main()\n{\n    vector&lt;int&gt; arr = {7, 8, 9, 1, 2, 3, 4, 5, 6};\n    int n = 9, k = 1;\n    int ans = search(arr, n, k);\n    if (ans == -1)\n        cout &lt;&lt; \"Target is not present.\\n\";\n    else\n        cout &lt;&lt; \"The index is: \" &lt;&lt; ans &lt;&lt; \"\\n\";\n    return 0;\n}\n</code>\n</pre>\n<p>\nOutput: The index is: 3\n</p>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\npublic class tUf {\n    public static int search(ArrayList&lt;Integer&gt; arr, int n, int k) {\n        for (int i = 0; i &lt; n; i++) {\n            if (arr.get(i) == k)\n                return i;\n        }\n        return -1;\n    }\n\n    public static void main(String[] args) {\n        ArrayList&lt;Integer&gt; arr = new ArrayList&lt;&gt;(Arrays.asList(7, 8, 9, 1, 2, 3, 4, 5, 6));\n        int n = 9, k = 1;\n        int ans = search(arr, n, k);\n        if (ans == -1)\n            System.out.println(\"Target is not present.\");\n        else\n            System.out.println(\"The index is: \" + ans);\n    }\n}\n</code>\n</pre>\n<p>\nOutput: The index is: 3\n</p>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\ndef search(arr, n, k):\n    for i in range(n):\n        if arr[i] == k:\n            return i\n    return -1\n\nif __name__ == \"__main__\":\n    arr = [7, 8, 9, 1, 2, 3, 4, 5, 6]\n    n = 9\n    k = 1\n    ans = search(arr, n, k)\n    if ans == -1:\n        print(\"Target is not present.\")\n    else:\n        print(\"The index is:\", ans)\n\n</code>\n</pre>\n<p>\nOutput: The index is: 3\n</p>\n</div>\n<div class=\"code-block \" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\nfunction search(arr, n, k) {\n    for (let i = 0; i &lt; n; i++) {\n        if (arr[i] === k)\n            return i;\n    }\n    return -1;\n}\n\nlet arr = [7, 8, 9, 1, 2, 3, 4, 5, 6];\nlet n = 9, k = 1;\nlet ans = search(arr, n, k);\nif (ans === -1)\n    console.log(\"Target is not present.\");\nelse\n    console.log(\"The index is:\", ans);\n\n</code>\n</pre>\n<p>\nOutput: The index is: 3\n</p>\n</div>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n</p><p><strong>Time Complexity: </strong>O(N), N = size of the given array.<strong><br></strong><strong>Reason: </strong>We have to iterate through the entire array to check if the target is present in the array.</p>\n<p><strong>Space Complexity: </strong>O(1)<strong><br></strong><strong>Reason: </strong>We have not used any extra data structures, this makes space complexity, even in the worst case as O(1).</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Brute Force Approach Ends here -->\n\n<!-- Optimal Approach Starts from here -->\n\n<div id=\"optimal-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nOptimal Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n<h3><strong>Optimal Approach(Using Binary Search)</strong>:&nbsp;</h3>\n<p>Here, we can easily observe, that we have to search in a sorted array. That is why, we can think of using the <a href=\"https://takeuforward.org/data-structure/binary-search-explained/\">Binary Search algorithm</a> to solve this problem.</p>\n<p><em>The primary objective of the Binary Search algorithm is to efficiently determine the appropriate half to eliminate, thereby reducing the search space by half. It does this by determining a specific condition that ensures that the target is not present in that half.</em></p>\n<h3><strong>Observation:&nbsp;</strong></h3>\n<p>To utilize the binary search algorithm effectively, it is crucial to ensure that the input array is sorted. By having a sorted array, we guarantee that each index divides the array into two sorted halves. In the search process, we compare the target value with the middle element, i.e. arr[mid], and then eliminate either the left or right half accordingly. This elimination becomes feasible due to the inherent property of the sorted halves(<em>i.e. Both halves always remain sorted</em>).</p>\n<p>However, in this case, the array is both rotated and sorted. As a result, the property of having sorted halves no longer holds. This disruption in the sorting order affects the elimination process, making it unreliable to determine the target's location by solely comparing it with arr[mid]. To illustrate this situation, consider the following example:</p>\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/06/Screenshot-2023-06-21-001049.png\" alt=\"\" class=\"wp-image-11374\"></figure>\n<p><strong>Key Observation: </strong>Though the array is rotated, we can clearly notice that for every index, one of the 2 halves will always be sorted. In the above example, the right half of the index mid is sorted.</p>\n<p>So, to efficiently search for a target value using this observation, we will follow a simple two-step process.&nbsp;</p>\n<ul><li>First, we identify the sorted half of the array.&nbsp;</li><li>Once found, we determine if the target is located within this sorted half.&nbsp;<ul><li>If not, we eliminate that half from further consideration.&nbsp;</li><li>Conversely, if the target does exist in the sorted half, we eliminate the other half.</li></ul></li></ul>\n<h3><strong>Algorithm:</strong></h3>\n<p>The steps are as follows:</p>\n<ol><li><strong>Place the 2 pointers i.e. low and high: </strong>Initially, we will place the pointers like this: low will point to the first index, and high will point to the last index.<br></li><li><strong>Calculate the \u2018mid\u2019: </strong>Now, inside a loop, we will calculate the value of \u2018mid\u2019 using the following formula:<br><strong>mid = (low+high) // 2 ( \u2018//\u2019 refers to integer division)</strong></li><li><strong>Check if arr[mid] == target: </strong>If it is, return the index mid.</li><li>Identify the sorted half, check where the target is located, and then eliminate one half accordingly:<ol><li><strong>If arr[low] &lt;= arr[mid]: </strong>This condition ensures that the left part is sorted.<ol><li><strong>If arr[low] &lt;= target &amp;&amp; target &lt;= arr[mid]: </strong>It signifies that the target is in this sorted half. So, we will eliminate the right half (<strong><em>high = mid-1</em></strong>).</li><li><strong>Otherwise, </strong>the target does not exist in the sorted half. So, we will eliminate this left half by doing <strong>low = mid+1</strong>.</li></ol></li><li><strong>Otherwise, if the right half is sorted:</strong><ol><li><strong>If arr[mid] &lt;= target &amp;&amp; target &lt;= arr[high]: </strong>It signifies that the target is in this sorted right half. So, we will eliminate the left half (<strong><em>low = mid+1</em></strong>).</li><li><strong>Otherwise, </strong>the target does not exist in this sorted half. So, we will eliminate this right half by doing <strong>high = mid-1</strong>.</li></ol></li></ol></li><li>Once, the \u2018mid\u2019 points to the target, the index will be returned.</li><li>This process will be inside a loop and the loop will continue until low crosses high. If no index is found, we will return -1.</li></ol>\n<p><strong>Dry-run: </strong><em>Please refer to the </em><a href=\"https://youtu.be/5qGrJbHhqFs\"><em>video</em></a><em> for it.</em></p>\n\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint search(vector&lt;int&gt;&amp; arr, int n, int k) {\n    int low = 0, high = n - 1;\n    while (low &lt;= high) {\n        int mid = (low + high) / 2;\n\n        //if mid points the target\n        if (arr[mid] == k) return mid;\n\n        //if left part is sorted:\n        if (arr[low] &lt;= arr[mid]) {\n            if (arr[low] &lt;= k &amp;&amp; k &lt;= arr[mid]) {\n                //element exists:\n                high = mid - 1;\n            }\n            else {\n                //element does not exist:\n                low = mid + 1;\n            }\n        }\n        else { //if right part is sorted:\n            if (arr[mid] &lt;= k &amp;&amp; k &lt;= arr[high]) {\n                //element exists:\n                low = mid + 1;\n            }\n            else {\n                //element does not exist:\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\nint main()\n{\n    vector&lt;int&gt; arr = {7, 8, 9, 1, 2, 3, 4, 5, 6};\n    int n = 9, k = 1;\n    int ans = search(arr, n, k);\n    if (ans == -1)\n        cout &lt;&lt; \"Target is not present.\\n\";\n    else\n        cout &lt;&lt; \"The index is: \" &lt;&lt; ans &lt;&lt; \"\\n\";\n    return 0;\n}\n\n</code>\n</pre>\n<p>\nOutput: The index is: 3\n\n</p>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\nimport java.util.*;\n\npublic class tUf {\n    public static int search(ArrayList&lt;Integer&gt; arr, int n, int k) {\n        int low = 0, high = n - 1;\n        while (low &lt;= high) {\n            int mid = (low + high) / 2;\n\n            // if mid points to the target\n            if (arr.get(mid) == k)\n                return mid;\n\n            // if left part is sorted\n            if (arr.get(low) &lt;= arr.get(mid)) {\n                if (arr.get(low) &lt;= k &amp;&amp; k &lt;= arr.get(mid)) {\n                    // element exists\n                    high = mid - 1;\n                } else {\n                    // element does not exist\n                    low = mid + 1;\n                }\n            } else { // if right part is sorted\n                if (arr.get(mid) &lt;= k &amp;&amp; k &lt;= arr.get(high)) {\n                    // element exists\n                    low = mid + 1;\n                } else {\n                    // element does not exist\n                    high = mid - 1;\n                }\n            }\n        }\n        return -1;\n    }\n\n    public static void main(String[] args) {\n        ArrayList&lt;Integer&gt; arr = new ArrayList&lt;&gt;(Arrays.asList(7, 8, 9, 1, 2, 3, 4, 5, 6));\n        int n = 9, k = 1;\n        int ans = search(arr, n, k);\n        if (ans == -1)\n            System.out.println(\"Target is not present.\");\n        else\n            System.out.println(\"The index is: \" + ans);\n    }\n}\n</code>\n</pre>\n<p>\nOutput: The index is: 3\n\n</p>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\ndef search(arr, n, k):\n    low = 0\n    high = n - 1\n    while low &lt;= high:\n        mid = (low + high) // 2\n\n        # if mid points the target\n        if arr[mid] == k:\n            return mid\n\n        # if left part is sorted\n        if arr[low] &lt;= arr[mid]:\n            if arr[low] &lt;= k and k &lt;= arr[mid]:\n                # element exists\n                high = mid - 1\n            else:\n                # element does not exist\n                low = mid + 1\n        else:  # if right part is sorted\n            if arr[mid] &lt;= k and k &lt;= arr[high]:\n                # element exists\n                low = mid + 1\n            else:\n                # element does not exist\n                high = mid - 1\n    return -1\n\nif __name__ == \"__main__\":\n    arr = [7, 8, 9, 1, 2, 3, 4, 5, 6]\n    n = 9\n    k = 1\n    ans = search(arr, n, k)\n    if ans == -1:\n        print(\"Target is not present.\")\n    else:\n        print(\"The index is:\", ans)\n</code>\n</pre>\n<p>\nOutput: The index is: 3\n\n</p>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\nfunction search(arr, n, k) {\n    let low = 0, high = n - 1;\n    while (low &lt;= high) {\n        let mid = Math.floor((low + high) / 2);\n\n        // if mid points to the target\n        if (arr[mid] === k) return mid;\n\n        // if left part is sorted\n        if (arr[low] &lt;= arr[mid]) {\n            if (arr[low] &lt;= k &amp;&amp; k &lt;= arr[mid]) {\n                // element exists\n                high = mid - 1;\n            } else {\n                // element does not exist\n                low = mid + 1;\n            }\n        } else { // if right part is sorted\n            if (arr[mid] &lt;= k &amp;&amp; k &lt;= arr[high]) {\n                // element exists\n                low = mid + 1;\n            } else {\n                // element does not exist\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\nlet arr = [7, 8, 9, 1, 2, 3, 4, 5, 6];\nlet n = 9, k = 1;\nlet ans = search(arr, n, k);\nif (ans === -1)\n    console.log(\"Target is not present.\");\nelse\n    console.log(\"The index is:\", ans);\n\n</code>\n</pre>\n<p>\nOutput: The index is: 3\n\n</p>\n</div>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n</p><p><strong>Time Complexity: </strong>O(logN), N = size of the given array.<strong><br></strong><strong>Reason: </strong>We are using binary search to search the target.</p>\n<p><strong>Space Complexity: </strong>O(1)<strong><br></strong><strong>Reason: </strong>We have not used any extra data structures, this makes space complexity, even in the worst case as O(1).</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Optimal Approach Starts from here -->\n\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n<details>\n<summary class=\"main-summary\">\n<span>\nVideo Explanation\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"yt-video-wrapper\">\n\n<!-- Insert iframe embed Link of Youtube Video-->\n<iframe class=\"lazy-loaded\" loading=\"lazy\" title=\"Search in a Rotated Sorted Array\" width=\"810\" height=\"456\" data-lazy-type=\"iframe\" data-src=\"https://www.youtube.com/embed/5qGrJbHhqFs\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\" src=\"https://www.youtube.com/embed/5qGrJbHhqFs?feature=oembed\"></iframe><noscript>\n<iframe loading=\"lazy\" title=\"Search in a Rotated Sorted Array\" width=\"810\" height=\"456\" src=\"https://www.youtube.com/embed/5qGrJbHhqFs\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe></noscript>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script>\n\nconst codeSections = document.querySelectorAll('.code-section');\n\n// Get last selected language from localStorage or set default value\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\n// Update last selected language for all sections and store in localStorage\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\n// Handle copy button click event\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\n// Set initial state of the tabs\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<script>\nconst codeSections = document.querySelectorAll('.code-section');\n\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script src=\"https://takeuforward.org/UXApproachDropDowns/2ApproachJSScript.js\"></script>\n<!-- /wp:html -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to\u00a0<strong><a href=\"https://www.linkedin.com/in/dewanshi-paul-2515091b9\" target=\"_blank\" rel=\"noreferrer noopener\">Dewanshi Paul</a></strong><em><em>,\u00a0<a href=\"https://www.linkedin.com/in/imsudip/\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>Sudip Ghosh</strong></a></em></em></em> <em>and <em><strong><a href=\"https://www.linkedin.com/in/kriti39/\" target=\"_blank\" rel=\"noreferrer noopener\">KRITIDIPTA GHOSH</a></strong></em></em> <em>for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,\u00a0</em><a href=\"https://takeuforward.org/contribute/help-us-grow-takeuforward/\">please check out this articl</a><em>e</em></p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->",
    "category_tag": "data-structure",
    "likes": 359,
    "preview": "Problem Statement: Given an integer array arr of size N, sorted in ascending order (with distinct values) and a target value k. Now the array is rotated at some pivot point unknown to you. Find the..."
}