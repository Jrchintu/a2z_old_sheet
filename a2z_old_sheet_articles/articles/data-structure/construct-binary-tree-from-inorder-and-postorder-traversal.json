{
    "dislikes": 3,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:09:58 GMT+0530 (India Standard Time)",
    "slug": "construct-binary-tree-from-inorder-and-postorder-traversal",
    "aid": "1634",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/construct-a-bt-from-postorder-and-inorder",
    "title": "Construct Binary Tree from Inorder and PostOrder Traversal",
    "topics": [
        {
            "topic-id": "binary-tree",
            "topic-title": "Binary Tree"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "recursion",
            "topic-title": "Recursion"
        }
    ],
    "likes": 27,
    "category_tag": "data-structure",
    "preview": "Problem Statement: Given the Postorder and Inorder traversal of a Binary Tree, construct the Unique Binary Tree represented by them. Examples Example : Input: Inorder: [ 40, 20 , 50, 10, 60, 30], P...",
    "content": "<p><strong>Problem Statement: </strong> Given the Postorder and Inorder traversal of a Binary Tree, construct the Unique Binary Tree represented by them.\n\n</p>\n<div id=\"article_examples\">\n    <details class=\"article_example_details\">\n        <summary class=\"article_example_summary\">\n            <span><strong>\n                    Examples\n                </strong>\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"atricle_example_content\">\n            <pre class=\"wp-block-preformatted\">\n                <span><strong>Example :</strong></span>\n                <span><strong>Input:</strong> Inorder: [ 40, 20 , 50, 10, 60, 30], Postorder: [40, 50, 20, 60, 30, 10]</span>\n               \n                <span><strong>Output:</strong></span>\n\n                <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/Construct-inorder-postorder-image1-2xiIMUti\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n                \n                <span><strong>Explanation: </strong> The unique Binary Tree hence created has inorder traversal: [40, 20, 50, 10, 60, 30] and postorder traversal: [40, 50, 20, 60, 30, 10].</span>\n                                      \n                <span><strong>Example :</strong></span>\n                <span><strong>Input:</strong> Inorder: [9, 3, 15, 20, 7], Postorder: [9, 15, 7, 20, 3]</span>\n               \n                <span><strong>Output:</strong></span>\n\n                <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/Construct-inorder-postorder-image2-A5QS0cAi\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n                \n                <span><strong>Explanation: </strong> The unique Binary Tree hence created has inorder traversal: [9, 3, 15, 20, 7] and postorder traversal: [9, 15, 7, 20, 3].</span>\t\t\t\t\t\t\t\t\n\t\t\t\t\t\n            </pre>\n        </div>\n    </details>\n</div>\n\n<!-- This is Practice Section\n<div class=\"practice\">\n    <span><strong>Practice: </strong></span>\n    <div class=\"problem-buttons\">\n\n        \n        <a href=\"https://www.codingninjas.com/studio/problems/check-armstrong_589?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf\" target=\"_blank\" rel=\"noopener\">\n            <span>Solve Problem</span>\n            <img src=\"https://takeuforward-content-images.s3.ap-south-1.amazonaws.com/content/Group-11-5-pFOq-8ga\"\n                alt=\"code-studio\">\n        </a>\n    </div>\n    \n</div>-->\n\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\n        yourself first. </em></p>\n\n\n<div id=\"brute-force-approach\">\n    <details>\n        <summary class=\"main-summary\">\n            <span>\n                Optimal Approach \n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                </path>\n            </svg>\n        </summary>\n        <div class=\"common-drops\">\n            <details class=\"secondary-details\" open=\"\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Algorithm / Intuition\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <div class=\"approach-algorithm\">\n                    <!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n                    <p><a href=\"https://takeuforward.org/data-structure/construct-a-binary-tree-from-inorder-and-preorder-traversal/\">Construct Binary Tree from Inorder and Preorder</a> is a prerequisite to this problem as the core approach remains recursively focusing on creating one node at a time We identify a node from the postorder array, locate it in the inorder traversal which splits the array into the left and right subtree.</p>\n\n                    <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/Construct-inorder-postorder-image3-Jv-0mdmy\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n\n                    <p>To avoid unnecessary array duplication, we use variables (inStart, inEnd) and (postStart, postEnd) on the inorder and postorder arrays, respectively. These variables effectively define the boundaries of the current subtree within the original inorder and postorder traversals.</p>\n                    <p>Similar to the previous algorithm, we employ a hashmap to store the index of each element in the inorder traversal, transforming the search operation into a constant-time lookup.</p>\n\n                    <h4>Algorithm </h4>\n                    <p><strong>Step 1:</strong>Create an empty map to store the indices of elements in the inorder traversal. Iterate through each element in the inorder traversal and store its index in the map (inMap) using the element as the key and its index as the value.</p>\n                   \t<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/Construct-inorder-postorder-image4-phOdoBl0\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>                    \n\n                    <p><strong>Step 2: </strong>\n                   \t Create a recursive helper function buildTree with the following parameters:\n                   \t <ol><li>Postorder vector</li><li>Start index of postorder (postStart), initially set to 0</li><li>End index of postorder (postEnd), initially set to postorder.size() - 1</li><li>Inorder vector</li><li>Start index of inorder (inStart), initially set to 0</li><li>End index of inorder (inEnd), initially set to inorder.size() - 1</li><li>Map for efficient root index lookup in the inorder traversal.</li></ol></p>\n\n                   \t<p><strong>Step 3:</strong> Base Case: Check if postStart is greater than postEnd or inStart is greater than inEnd. If true, return NULL, indicating an empty subtree/node.</p>\n\n                   \t<p><strong>Step 4: </strong>\n                   \tThe root node for the current subtree is the last element in the postorder traversal (postorder[postEnd]).</p>\n\n                   \t<p><strong>Step 5: </strong>\n                   \tFind the index of this root node in the inorder traversal using the map (inMap[rootValue]). This is the rootIndex.</p>\n\n                   \t<p><strong>Step 6: </strong>\n                   \tHence, the left subtree ranges from inStart to rootIndex. Subtracting these indexes gives us the leftSubtreeSize.</p>\n\n                   \t<p><strong>Step 7: </strong>\n                   \tMake two recursive calls to buildTree to build the left and right subtrees:</p>\n                   \t<p>For the left subtree:\n                   \t<ol><li>Update postStart to postEnd - leftSubtreeSize (moving to the next element in postorder)</li><li>Update postEnd to postEnd - 1 (end of left subtree in postorder)</li><li>Update inEnd to rootIndex - 1 (end of left subtree in inorder)</li></ol></p>\n                   \t<p>For the right subtree:\n                   \t<ol><li>Update postStart to postStart (moving to the next element in postorder)</li><li>Update postEnd to postEnd - leftSubtreeSize - 1 (end of right subtree in postorder)</li><li>Update inStart to rootIndex + 1 (start of right subtree in inorder)</li></ol></p>\n\n                   \t<p><strong>Step 8: </strong>\n                   \tReturn the root node constructed for the current subtree.</p>\n                   \t\n                   \t                       \n                </div>\n            </details>\n            <details class=\"code-section secondary-details\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Code\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <div class=\"code-tabs\">\n                    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n                    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n                    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n                    <button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n                    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\"\n                        xmlns=\"http://www.w3.org/2000/svg\">\n                        <path\n                            d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n                        </path>\n                    </svg>\n                </div>\n                <div class=\"code-content\">\n                    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;iostream&gt;\n#include &lt;unordered_map&gt;\n#include &lt;vector&gt;\n#include &lt;queue&gt;\n#include &lt;map&gt;\n\nusing namespace std;\n\n// TreeNode structure\nstruct TreeNode {\n    int val;\n    TreeNode *left;\n    TreeNode *right;\n    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n};\n\nclass Solution {\npublic:\n    // Function to build a binary tree\n    // from inorder and postorder traversals\n    TreeNode* buildTree(vector&lt;int&gt;&amp; inorder, vector&lt;int&gt;&amp; postorder) {\n        if (inorder.size() != postorder.size()) {\n            return NULL;\n        }\n\n        // Create a map to store the indices\n        // of elements in the inorder traversal\n        map&lt;int, int&gt; hm;\n        for (int i = 0; i &lt; inorder.size(); i++) {\n            hm[inorder[i]] = i;\n        }\n\n        // Call the recursive function\n        // to build the binary tree\n        return buildTreePostIn(inorder, 0, inorder.size() - 1, postorder, 0,\n            postorder.size() - 1, hm);\n    }\n\n    // Recursive function to build a binary\n    // tree from inorder and postorder traversals\n    TreeNode* buildTreePostIn(vector&lt;int&gt;&amp; inorder, int is, int ie,\n        vector&lt;int&gt;&amp; postorder, int ps, int pe, map&lt;int, int&gt;&amp; hm) {\n\n        // Base case: If the subtree\n        // is empty, return NULL\n        if (ps &gt; pe || is &gt; ie) {\n            return NULL;\n        }\n\n        // Create a new TreeNode\n        // with the root value from postorder\n        TreeNode* root = new TreeNode(postorder[pe]);\n\n        // Find the index of the root\n        // value in inorder traversal\n        int inRoot = hm[postorder[pe]];\n        \n        // Number of nodes in the left subtree\n        int numsLeft = inRoot - is; \n\n        // Recursively build the\n        // left and right subtrees\n        root-&gt;left = buildTreePostIn(inorder, is, inRoot - 1, postorder,\n            ps, ps + numsLeft - 1, hm);\n\n        root-&gt;right = buildTreePostIn(inorder, inRoot + 1, ie, postorder,\n            ps + numsLeft, pe - 1, hm);\n\n        // Return the root of\n        // the constructed subtree\n        return root;\n    }\n};\n\n// Function to print the\n// inorder traversal of a tree\nvoid printInorder(TreeNode* root) {\n    if (!root) {\n        return;\n    }\n    printInorder(root-&gt;left);\n    cout &lt;&lt; root-&gt;val &lt;&lt; &quot; &quot;;\n    printInorder(root-&gt;right);\n}\n\n// Function to print the given vector\nvoid printVector(vector&lt;int&gt;&amp; vec) {\n    for (int i = 0; i &lt; vec.size(); i++) {\n        cout &lt;&lt; vec[i] &lt;&lt; &quot; &quot;;\n    }\n    cout &lt;&lt; endl;\n}\n\nint main() {\n    // Example input vectors\n    vector&lt;int&gt; inorder = {40, 20, 50, 10, 60, 30};\n    vector&lt;int&gt; postorder = {40, 50, 20, 60, 30, 10};\n\n    // Display the input vectors\n    cout &lt;&lt; &quot;Inorder Vector: &quot;;\n    printVector(inorder);\n\n    cout &lt;&lt; &quot;Postorder Vector: &quot;;\n    printVector(postorder);\n\n    Solution sol;\n\n    // Build the binary tree and\n    // print its inorder traversal\n    TreeNode* root = sol.buildTree(inorder, postorder);\n\n    cout &lt;&lt; &quot;Inorder of Unique Binary Tree Created: &quot; &lt;&lt; endl;\n    printInorder(root);\n    cout &lt;&lt; endl;\n\n    return 0;\n}\n\n                            </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block \" data-lang=\"java\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"java\" class=\"language-java\">\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Vector;\n\n// TreeNode structure\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    public TreeNode(int x) {\n        val = x;\n        left = null;\n        right = null;\n    }\n}\n\nclass Solution {\n    public TreeNode buildTree(Vector&lt;Integer&gt; inorder, Vector&lt;Integer&gt; postorder) {\n        if (inorder.size() != postorder.size()) {\n            return null;\n        }\n\n        // Create a map to store the indices\n        // of elements in the inorder traversal\n        Map&lt;Integer, Integer&gt; hm = new HashMap&lt;&gt;();\n        for (int i = 0; i &lt; inorder.size(); i++) {\n            hm.put(inorder.get(i), i);\n        }\n\n        // Call the recursive function\n        // to build the binary tree\n        return buildTreePostIn(inorder, 0, inorder.size() - 1, postorder, 0,\n                postorder.size() - 1, hm);\n    }\n\n    public TreeNode buildTreePostIn(Vector&lt;Integer&gt; inorder, int is, int ie,\n                                     Vector&lt;Integer&gt; postorder, int ps, int pe, Map&lt;Integer, Integer&gt; hm) {\n\n        // Base case: If the subtree\n        // is empty, return null\n        if (ps &gt; pe || is &gt; ie) {\n            return null;\n        }\n\n        // Create a new TreeNode\n        // with the root value from postorder\n        TreeNode root = new TreeNode(postorder.get(pe));\n\n        // Find the index of the root\n        // value in inorder traversal\n        int inRoot = hm.get(postorder.get(pe));\n\n        // Number of nodes in the left subtree\n        int numsLeft = inRoot - is;\n\n        // Recursively build the\n        // left and right subtrees\n        root.left = buildTreePostIn(inorder, is, inRoot - 1, postorder,\n                ps, ps + numsLeft - 1, hm);\n\n        root.right = buildTreePostIn(inorder, inRoot + 1, ie, postorder,\n                ps + numsLeft, pe - 1, hm);\n\n        // Return the root of\n        // the constructed subtree\n        return root;\n    }\n}\n\n// Function to print the\n// inorder traversal of a tree\nclass TreeTraversal {\n    public static void printInorder(TreeNode root) {\n        if (root == null) {\n            return;\n        }\n        printInorder(root.left);\n        System.out.print(root.val + &quot; &quot;);\n        printInorder(root.right);\n    }\n}\n\npublic class Main {\n    // Function to print the given vector\n    public static void printVector(Vector&lt;Integer&gt; vec) {\n        for (int i = 0; i &lt; vec.size(); i++) {\n            System.out.print(vec.get(i) + &quot; &quot;);\n        }\n        System.out.println();\n    }\n\n    public static void main(String[] args) {\n        // Example input vectors\n        Vector&lt;Integer&gt; inorder = new Vector&lt;&gt;(Vector.of(40, 20, 50, 10, 60, 30));\n        Vector&lt;Integer&gt; postorder = new Vector&lt;&gt;(Vector.of(40, 50, 20, 60, 30, 10));\n\n        // Display the input vectors\n        System.out.print(&quot;Inorder Vector: &quot;);\n        printVector(inorder);\n\n        System.out.print(&quot;Postorder Vector: &quot;);\n        printVector(postorder);\n\n        Solution sol = new Solution();\n\n        // Build the binary tree and\n        // print its inorder traversal\n        TreeNode root = sol.buildTree(inorder, postorder);\n\n        System.out.println(&quot;Inorder of Unique Binary Tree Created: &quot;);\n        TreeTraversal.printInorder(root);\n        System.out.println();\n    }\n}\n                            </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block\" data-lang=\"python\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"python\" class=\"language-python\">\nfrom typing import List\n\n# TreeNode class definition\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def buildTree(self, inorder: List[int], postorder: List[int]) -&gt; TreeNode:\n        &quot;&quot;&quot;\n        Function to build a binary tree\n        from inorder and postorder traversals\n        &quot;&quot;&quot;\n        if len(inorder) != len(postorder):\n            return None\n\n        # Create a map to store the indices\n        # of elements in the inorder traversal\n        hm = {val: i for i, val in enumerate(inorder)}\n\n        # Call the recursive function\n        # to build the binary tree\n        return self.buildTreePostIn(inorder, 0, len(inorder) - 1, postorder, 0,\n                                     len(postorder) - 1, hm)\n\n    def buildTreePostIn(self, inorder: List[int], is_, ie, postorder: List[int], ps, pe, hm):\n        &quot;&quot;&quot;\n        Recursive function to build a binary\n        tree from inorder and postorder traversals\n        &quot;&quot;&quot;\n        # Base case: If the subtree\n        # is empty, return None\n        if ps &gt; pe or is_ &gt; ie:\n            return None\n\n        # Create a new TreeNode\n        # with the root value from postorder\n        root = TreeNode(postorder[pe])\n\n        # Find the index of the root\n        # value in inorder traversal\n        inRoot = hm[postorder[pe]]\n\n        # Number of nodes in the left subtree\n        numsLeft = inRoot - is_\n\n        # Recursively build the\n        # left and right subtrees\n        root.left = self.buildTreePostIn(inorder, is_, inRoot - 1, postorder,\n                                         ps, ps + numsLeft - 1, hm)\n\n        root.right = self.buildTreePostIn(inorder, inRoot + 1, ie, postorder,\n                                          ps + numsLeft, pe - 1, hm)\n\n        # Return the root of\n        # the constructed subtree\n        return root\n\n# Function to print the\n# inorder traversal of a tree\ndef printInorder(root):\n    if not root:\n        return\n    printInorder(root.left)\n    print(root.val, end=&quot; &quot;)\n    printInorder(root.right)\n\n# Function to print the given list\ndef printList(lst):\n    for item in lst:\n        print(item, end=&quot; &quot;)\n    print()\n\n# Example input lists\ninorder = [40, 20, 50, 10, 60, 30]\npostorder = [40, 50, 20, 60, 30, 10]\n\n# Display the input lists\nprint(&quot;Inorder List: &quot;, end=&quot;&quot;)\nprintList(inorder)\n\nprint(&quot;Postorder List: &quot;, end=&quot;&quot;)\nprintList(postorder)\n\nsol = Solution()\n\n# Build the binary tree and\n# print its inorder traversal\nroot = sol.buildTree(inorder, postorder)\n\nprint(&quot;Inorder of Unique Binary Tree Created:&quot;)\nprintInorder(root)\nprint()\n\n                           </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block\" data-lang=\"javascript\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"javascript\" class=\"language-javascript\">\n// TreeNode structure\nclass TreeNode {\n    constructor(x) {\n        this.val = x;\n        this.left = null;\n        this.right = null;\n    }\n}\n\nclass Solution {\n    // Function to build a binary tree\n    // from inorder and postorder traversals\n    buildTree(inorder, postorder) {\n        if (inorder.length !== postorder.length) {\n            return null;\n        }\n\n        // Create a map to store the indices\n        // of elements in the inorder traversal\n        const hm = new Map();\n        inorder.forEach((val, index) =&gt; {\n            hm.set(val, index);\n        });\n\n        // Call the recursive function\n        // to build the binary tree\n        return this.buildTreePostIn(inorder, 0, inorder.length - 1, postorder, 0,\n            postorder.length - 1, hm);\n    }\n\n    // Recursive function to build a binary\n    // tree from inorder and postorder traversals\n    buildTreePostIn(inorder, is, ie, postorder, ps, pe, hm) {\n        // Base case: If the subtree\n        // is empty, return null\n        if (ps &gt; pe || is &gt; ie) {\n            return null;\n        }\n\n        // Create a new TreeNode\n        // with the root value from postorder\n        const root = new TreeNode(postorder[pe]);\n\n        // Find the index of the root\n        // value in inorder traversal\n        const inRoot = hm.get(postorder[pe]);\n\n        // Number of nodes in the left subtree\n        const numsLeft = inRoot - is;\n\n        // Recursively build the\n        // left and right subtrees\n        root.left = this.buildTreePostIn(inorder, is, inRoot - 1, postorder,\n            ps, ps + numsLeft - 1, hm);\n\n        root.right = this.buildTreePostIn(inorder, inRoot + 1, ie, postorder,\n            ps + numsLeft, pe - 1, hm);\n\n        // Return the root of\n        // the constructed subtree\n        return root;\n    }\n}\n\n// Function to print the\n// inorder traversal of a tree\nfunction printInorder(root) {\n    if (!root) {\n        return;\n    }\n    printInorder(root.left);\n    console.log(root.val + &quot; &quot;);\n    printInorder(root.right);\n}\n\n// Function to print the given array\nfunction printArray(arr) {\n    arr.forEach(element =&gt; {\n        console.log(element + &quot; &quot;);\n    });\n    console.log();\n}\n\n// Example input arrays\nconst inorder = [40, 20, 50, 10, 60, 30];\nconst postorder = [40, 50, 20, 60, 30, 10];\n\n// Display the input arrays\nconsole.log(&quot;Inorder Array: &quot;);\nprintArray(inorder);\n\nconsole.log(&quot;Postorder Array: &quot;);\nprintArray(postorder);\n\nconst sol = new Solution();\n\n// Build the binary tree and\n// print its inorder traversal\nconst root = sol.buildTree(inorder, postorder);\n\nconsole.log(&quot;Inorder of Unique Binary Tree Created: &quot;);\nprintInorder(root);\n\n                            </code>\n                        </pre>\n                    </div>\n                    <span><strong>Output:</strong> Inorder Vector: 40 20 50 10 60 30 </span>\n                    <span>Postorder Vector: 40 50 20 60 30 10</span>\n                    <span>Inorder of Unique Binary Tree Created: 40 20 50 10 60 30</span>\n\n                                   \n                </div>\n            </details>\n            <details class=\"secondary-details\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Complexity Analysis\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <p>\n                    <!-- Insert Time and Space Complexity  Here -->\n                    <p><strong>Time Complexity: O(N)</strong>\n                     where N is the number of nodes in the Binary Tree. This is because each node is processed and visited exactly once.\n                     <ol><li>The algorithm processes each element in the inorder traversal and for each element it performs constant-time operations (lookup in the hashmap, recursive calls and variable operations).</li></ol></p>\n\n\t\t\t\t\t<p><strong>Space Complexity: O(N + log<sub>2</sub>N)</strong>   \n\t\t\t\t\twhere N is the number of elements in the iwhere N is the number of nodes in the Binary Tree. \n\t\t\t\t\t<ol><li>This complexity arises from the space used by the recursion stack during the recursive calls. In the worst case, the maximum depth of the recursion stack would be equal to the height of the Binary Tree and in the optimal case the recursion stack complexity would be O(log<sub>2</sub>N).</li></ol></p>\n\n                </p>\n            </details>\n        </div>\n    </details>\n</div>\n\n\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n    <details>\n        <summary class=\"main-summary\">\n            <span>\n                Video Explanation\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"yt-video-wrapper\">\n            <!-- Insert iframe embed Link of Youtube Video-->\n        <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/LgLRTaEMRVc?si=U-R2dYSjqAQJcLwk\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n        </div>\n    </details>\n</div>\n\n<blockquote class=\"wp-block-quote\">\n    Special thanks to <strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268\">Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,<strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\"> please check out this article</a></strong>\n</blockquote>\n\n<script>\n\n    const codeSections = document.querySelectorAll('.code-section');\n\n    // Get last selected language from localStorage or set default value\n    let lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp';\n\n    codeSections.forEach((section, sectionIndex) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n        const copyBtn = section.querySelector('.copy-btn');\n\n        codeTabs.forEach((tab) => {\n            tab.addEventListener('click', () => {\n                codeTabs.forEach((t) => {\n                    t.classList.remove('dsa_article_code_active');\n                });\n                tab.classList.add('dsa_article_code_active');\n\n                const lang = tab.dataset.lang;\n                const activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                codeBlocks.forEach((block) => {\n                    if (block === activeBlock) {\n                        block.classList.add('dsa_article_code_active');\n                    } else {\n                        block.classList.remove('dsa_article_code_active');\n                    }\n                });\n\n                // Update last selected language for all sections and store in localStorage\n                lastSelectedLanguage = lang;\n                localStorage.setItem('lastSelectedLanguage', lang);\n                codeSections.forEach((otherSection, otherIndex) => {\n                    if (otherIndex !== sectionIndex) {\n                        const otherTabs = otherSection.querySelectorAll('.code-tab');\n                        otherTabs.forEach((otherTab) => {\n                            if (otherTab.dataset.lang === lang) {\n                                otherTab.classList.add('dsa_article_code_active');\n                            } else {\n                                otherTab.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                        const otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                        const otherCodeBlocks = otherSection.querySelectorAll('.code-block');\n                        otherCodeBlocks.forEach((block) => {\n                            if (block === otherActiveBlock) {\n                                block.classList.add('dsa_article_code_active');\n                            } else {\n                                block.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                    }\n                });\n            });\n        });\n\n        // Handle copy button click event\n        copyBtn.addEventListener('click', () => {\n            const activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\n            navigator.clipboard.writeText(activeBlock.innerText);\n            copyBtn.classList.add('dsa_article_code_active');\n            setTimeout(() => {\n                copyBtn.classList.remove('dsa_article_code_active');\n            }, 1000);\n        });\n    });\n\n    // Set initial state of the tabs\n    codeSections.forEach((section) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n\n        codeTabs.forEach((tab) => {\n            if (tab.dataset.lang === lastSelectedLanguage) {\n                tab.classList.add('dsa_article_code_active');\n            } else {\n                tab.classList.remove('dsa_article_code_active');\n            }\n        });\n\n        codeBlocks.forEach((block) => {\n            if (block.dataset.lang === lastSelectedLanguage) {\n                block.classList.add('dsa_article_code_active');\n            } else {\n                block.classList.remove('dsa_article_code_active');\n            }\n        });\n    });\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>"
}