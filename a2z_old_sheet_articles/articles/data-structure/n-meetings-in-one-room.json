{
    "dislikes": 8,
    "video": "II6ziNnub1Q",
    "publishedOn": "Sun Mar 24 2024 22:09:25 GMT+0530 (India Standard Time)",
    "slug": "n-meetings-in-one-room",
    "aid": "1485",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/n-meetings-in-one-room",
    "title": "N meetings in one room",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "greedy",
            "topic-title": "Greedy"
        }
    ],
    "likes": 173,
    "category_tag": "data-structure",
    "preview": "Problem Statement: There is one meeting room in a firm. You are given two arrays, start and end each of size N.For an index \u2018i\u2019, start[i] denotes the starting time of the ith meeting while end[i] w...",
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement:</strong> There is <strong>one </strong>meeting room in a firm. You are given two arrays, start and end each of size N.For an index \u2018i\u2019, start[i] denotes the starting time of the ith meeting while end[i]&nbsp; will denote the ending time of the ith meeting. Find the maximum number of meetings that can be accommodated if only one meeting can happen in the room at a&nbsp; particular time. Print the order in which these meetings will be performed.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\"><strong>Example:</strong>\n\n<strong>Input:</strong>  N = 6,  start[] = {1,3,0,5,8,5}, end[] =  {2,4,5,7,9,9}\n\n<strong>Output:</strong> 1 2 4 5\n\n<strong>Explanation:</strong> See the figure for a better understanding. \n\n<img width=\"615\" height=\"142\" src=\"https://lh3.googleusercontent.com/TtxJefJFSrt-O3yH53CFJ8udcDt02PkBduRCvO6XvndajetZ2LUEgNhrSIcbSBtHLodGgPfuJeEuIP4azq0dZaN5XQ9Zgz5BWKnGAQu25YDPuLqIcHT1aFA66Lvz8Q\"></pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:heading {\"level\":1} -->\n<h1>Solution:</h1>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"textColor\":\"vivid-red\"} -->\n<p class=\"has-vivid-red-color has-text-color\"><strong><em>Disclaimer</em></strong>: <em>Don't jump directly to the solution, try it out yourself first.</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Initial Thought Process:-</strong><br>Say if you have two meetings, one which gets over early and another which gets over late. Which one should we choose?&nbsp; If our meeting lasts longer the room stays occupied and we lose our time. On the other hand, if we choose a meeting that finishes early we can accommodate more meetings. Hence we should <strong>choose meetings that end early</strong> and utilize the remaining time for more meetings.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Approach</strong>:&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To proceed we need a vector of three quantities: the starting time, ending time, meeting number. Sort this data structure in ascending order of end time.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We need a variable to store the answer. Initially, the answer is 1 because the first meeting can always be performed. Make another variable, say limit that keeps track of the ending time of the meeting that was last performed. Initially set limit as the end time of the first meeting.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Start iterating from the second meeting. At every position we have two possibilities:-</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>If the start time of a meeting is&nbsp; strictly greater than <strong><em>limit</em></strong> we can perform the meeting. Update the answer.Our new <strong><em>limit </em></strong>is the ending time of the current meeting&nbsp; since it was last performed.Also update <strong><em>limit.&nbsp;&nbsp;</em></strong></li><li>&nbsp;If the start time is less than or equal to <strong><em>limit </em></strong>&nbsp;,skip and move ahead.&nbsp;</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Let's have a dry run by taking the following example.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>N = 6,&nbsp; start[] = {1,3,0,5,8,5}, end[] =&nbsp; {2,4,5,7,9,9}</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Initially set answer =[1],limit = 2.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em><strong>For Position 2 -&nbsp;</strong></em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Start time of meeting no. 2 = 3 &gt; limit. Update answer and limit.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Answer = [1, 2], limit = 4.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em><strong>For Position 3 -</strong></em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Start time of meeting no. 3 = 0 &lt; limit.Nothing is changed.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em><strong>For Position 4 -</strong></em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Start time of meeting no. 4 = 5 &gt; limit. Update answer and limit.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Answer = [1,2,4], limit = 7.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em><strong>For Position 5 -</strong></em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Start time of meeting no. 5 = 8 &gt; limit.Update answer and limit.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Answer = [1,2,4,5], limit = 9.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em><strong>For Position 6 -</strong></em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Start time of meeting no. 6 = 8 &lt; limit.Nothing is changed.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Final answer&nbsp; =&nbsp; [1,2,4,5]</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2><strong>Code:</strong></h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nstruct meeting {\n   int start;\n   int end;\n   int pos;\n};\n\nclass Solution {\n   public:\n      bool static comparator(struct meeting m1, meeting m2) {\n         if (m1.end &lt; m2.end) return true;\n         else if (m1.end &gt; m2.end) return false;\n         else if (m1.pos &lt; m2.pos) return true;\n         return false;\n      }\n   void maxMeetings(int s[], int e[], int n) {\n      struct meeting meet[n];\n      for (int i = 0; i &lt; n; i++) {\n         meet[i].start = s[i], meet[i].end = e[i], meet[i].pos = i + 1;\n      }\n\n      sort(meet, meet + n, comparator);\n\n      vector &lt; int &gt; answer;\n\n      int limit = meet[0].end;\n      answer.push_back(meet[0].pos);\n\n      for (int i = 1; i &lt; n; i++) {\n         if (meet[i].start &gt; limit) {\n            limit = meet[i].end;\n            answer.push_back(meet[i].pos);\n         }\n      }\n      cout&lt;&lt;\"The order in which the meetings will be performed is \"&lt;&lt;endl;\n      for (int i = 0; i &lt; answer.size(); i++) {\n         cout &lt;&lt; answer[i] &lt;&lt; \" \";\n      }\n\n   }\n\n};\nint main() {\n   Solution obj;\n   int n = 6;\n   int start[] = {1,3,0,5,8,5};\n   int end[] = {2,4,5,7,9,9};\n   obj.maxMeetings(start, end, n);\n   return 0;\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The order in which the meetings will be performed is<br>1 2 4 5</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(n) </strong>to iterate through every position and insert them in a data structure<strong>. O(n log n)&nbsp; </strong>to sort the data structure in ascending order of end time<strong>. O(n)&nbsp; </strong>to iterate through the positions and check which meeting can be performed.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Overall : O(n) +O(n log n) + O(n) ~O(n log n)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(n)&nbsp; </strong>since we used an additional data structure for storing the start time, end time, and meeting no.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\nclass meeting {\n    int start;\n    int end;\n    int pos;\n     \n    meeting(int start, int end, int pos)\n    {\n        this.start = start;\n        this.end = end;\n        this.pos = pos;\n    }\n}\nclass meetingComparator implements Comparator&lt;meeting&gt;\n{\n    @Override\n    public int compare(meeting o1, meeting o2) \n    {\n        if (o1.end &lt; o2.end)\n            return -1;\n        else if (o1.end &gt; o2.end)\n            return 1;\n        else if(o1.pos &lt; o2.pos)\n            return -1;\n        return 1; \n    }\n}\npublic class Meeting {\n    static void maxMeetings(int start[], int end[], int n) {\n        ArrayList&lt;meeting&gt; meet = new ArrayList&lt;&gt;();\n        \n        for(int i = 0; i &lt; start.length; i++)\n            meet.add(new meeting(start[i], end[i], i+1));\n        \n        meetingComparator mc = new meetingComparator(); \n        Collections.sort(meet, mc); \n        ArrayList&lt;Integer&gt; answer = new ArrayList&lt;&gt;();\n        answer.add(meet.get(0).pos);\n        int limit = meet.get(0).end; \n        \n        for(int i = 1;i&lt;start.length;i++) {\n            if(meet.get(i).start &gt; limit) {\n                limit = meet.get(i).end; \n                answer.add(meet.get(i).pos);\n            }\n        }\n        System.out.println(\"The order in which the meetings will be performed is \");\n        for(int i = 0;i&lt;answer.size(); i++) {\n            System.out.print(answer.get(i) + \" \");\n        }\n    }\n    public static void main(String args[])\n    {\n        int n = 6;\n        int start[] = {1,3,0,5,8,5};\n        int end[] = {2,4,5,7,9,9};\n        maxMeetings(start,end,n);\n        \n    }\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The order in which the meetings will be performed is<br>1 2 4 5</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(n) </strong>to iterate through every position and insert them in a data structure<strong>. O(n log n)&nbsp; </strong>to sort the data structure in ascending order of end time<strong>. O(n)&nbsp; </strong>to iterate through the positions and check which meeting can be performed.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Overall : O(n) +O(n log n) + O(n) ~O(n log n)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(n)&nbsp; </strong>since we used an additional data structure for storing the start time, end time, and meeting no.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block\" data-lang=\"python\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">from typing import List\n\n\n\n\nclass meeting:\n    def __init__(self, start, end, pos):\n        self.start = start\n        self.end = end\n        self.pos = pos\n\n\n\n\nclass Solution:\n\n\n    def maxMeetings(self, s: List[int], e: List[int], n: int) -> None:\n        meet = [meeting(s[i], e[i], i + 1) for i in range(n)]\n        sorted(meet, key=lambda x: (x.end, x.pos))\n        answer = []\n        limit = meet[0].end\n        answer.append(meet[0].pos)\n        for i in range(1, n):\n            if meet[i].start > limit:\n                limit = meet[i].end\n                answer.append(meet[i].pos)\n        print(\"The order in which the meetings will be performed is \")\n        for i in answer:\n            print(i, end=\" \")\n\n\n\n\nif __name__ == \"__main__\":\n    obj = Solution()\n    n = 6\n    start = [1, 3, 0, 5, 8, 5]\n    end = [2, 4, 5, 7, 9, 9]\n    obj.maxMeetings(start, end, n)</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The order in which the meetings will be performed is<br>1 2 4 5</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(n) </strong>to iterate through every position and insert them in a data structure<strong>. O(n log n)&nbsp; </strong>to sort the data structure in ascending order of end time<strong>. O(n)&nbsp; </strong>to iterate through the positions and check which meeting can be performed.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Overall : O(n) +O(n log n) + O(n) ~O(n log n)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(n)\u00a0 </strong>since we used an additional data structure for storing the start time, end time, and meeting no.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to\u00a0<strong><a href=\"https://www.linkedin.com/in/somparna-c-a724a5121/\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>Somparna Chakrabarti</strong></a> <em><em><strong>and\u00a0<em><a href=\"https://www.linkedin.com/in/imsudip/\" target=\"_blank\" rel=\"noreferrer noopener\">Sudip Ghosh</a></em></strong></em></em></strong>\u00a0for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,\u00a0</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->"
}