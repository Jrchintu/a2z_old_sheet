{
    "dislikes": 3,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:11:29 GMT+0530 (India Standard Time)",
    "slug": "minimum-in-rotated-sorted-array",
    "aid": "2082",
    "tuf_plus": "",
    "title": "Minimum in Rotated Sorted Array",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "binary-search",
            "topic-title": "Binary Search"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        }
    ],
    "category_tag": "data-structure",
    "likes": 143,
    "preview": "Problem Statement: Given an integer array arr of size N, sorted in ascending order (with distinct values). Now the array is rotated between 1 to N times which is unknown. Find the minimum element i...",
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement:</strong> Given an integer array <strong>arr</strong> of size <strong>N</strong>, sorted in ascending order (<strong>with distinct values</strong>). Now the array is rotated between 1 to N times which is unknown. Find the minimum element in the array.\u00a0</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Pre-requisites: </strong><a href=\"https://takeuforward.org/data-structure/search-element-in-a-rotated-sorted-array/\" target=\"_blank\" rel=\"noopener\" title=\"\">Search in Rotated Sorted Array I</a>,\u00a0 <a href=\"https://takeuforward.org/arrays/search-element-in-rotated-sorted-array-ii/\" target=\"_blank\" rel=\"noopener\" title=\"\">Search in Rotated Sorted Array II</a> &amp; <a href=\"https://takeuforward.org/data-structure/binary-search-explained/\" target=\"_blank\" rel=\"noopener\" title=\"\">Binary Search algorithm</a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n<details class=\"article_example_details\">\n<summary class=\"article_example_summary\">\n<span><strong>\nExamples\n</strong>\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"atricle_example_content\">\n<pre class=\"wp-block-preformatted\"><!-- Insert New Examples Here -->\n<pre class=\"wp-block-preformatted\"><strong>Example 1:</strong>\n<strong>Input Format:</strong> arr = [4,5,6,7,0,1,2,3]\n<strong>Result:</strong> 0\n<strong>Explanation:</strong> Here, the element 0 is the minimum element in the array.\n\n<strong>Example 2:</strong>\n<strong>Input Format:</strong> arr = [3,4,5,1,2]\n<strong>Result:</strong> 1\n<strong>Explanation:</strong> Here, the element 1 is the minimum element in the array.\n</pre>\n</pre>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Solution:</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>How does the rotation occur in a sorted array?</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Let's consider a sorted array: {1, 2, 3, 4, 5}. If we rotate this array at index 3, it will become: {4, 5, 1, 2, 3}. In essence, we moved the element at the last index to the front, while shifting the remaining elements to the right. We performed this process twice.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":11384,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/06/Screenshot-2023-06-21-014143.png\" alt=\"\" class=\"wp-image-11384\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<!-- This is Practice Section-->\n<div class=\"practice\">\n<span><strong>Practice: </strong></span>\n<div class=\"problem-buttons\">\n\n<!-- Add Problem Link inside href -->\n<a href=\"https://bit.ly/42ChjLM\" target=\"_blank\" rel=\"noopener\">\n<span>Solve Problem</span>\n<img src=\"https://static.takeuforward.org/wp/uploads/2023/04/Group-11-5.png\" alt=\"code-studio\">\n</a>\n</div>\n</div>\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\nyourself first. </em></p>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<div class=\"horizontal_navbar_dsa_article\">\n<div class=\"grid_container_three\">\n<a href=\"#brute-force-approach\" class=\"three-boxes box-a\">\nSolution 1\n</a>\n<a href=\"#better-approach\" class=\"three-boxes box-b\">\nSolution 2\n</a>\n<a href=\"#optimal-approach\" class=\"three-boxes box-c\">\nSolution 3\n</a>\n<a href=\"#dsa_article_video_explanation\" class=\"three-boxes box-d\">\n<svg width=\"26\" height=\"26\" viewBox=\"0 0 20 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M8 10L13.19 7L8 4V10ZM19.56 2.17C19.69 2.64 19.78 3.27 19.84 4.07C19.91 4.87 19.94 5.56 19.94 6.16L20 7C20 9.19 19.84 10.8 19.56 11.83C19.31 12.73 18.73 13.31 17.83 13.56C17.36 13.69 16.5 13.78 15.18 13.84C13.88 13.91 12.69 13.94 11.59 13.94L10 14C5.81 14 3.2 13.84 2.17 13.56C1.27 13.31 0.69 12.73 0.44 11.83C0.31 11.36 0.22 10.73 0.16 9.93C0.0900001 9.13 0.0599999 8.44 0.0599999 7.84L0 7C0 4.81 0.16 3.2 0.44 2.17C0.69 1.27 1.27 0.69 2.17 0.44C2.64 0.31 3.5 0.22 4.82 0.16C6.12 0.0899998 7.31 0.0599999 8.41 0.0599999L10 0C14.19 0 16.8 0.16 17.83 0.44C18.73 0.69 19.31 1.27 19.56 2.17Z\" fill=\"red\"></path>\n</svg>\n\n</a>\n<div class=\"box-e tooltip\">\n<svg viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M12.842 9.25L11.9577 10.17C11.2502 10.89 10.8081 11.5 10.8081 13H8.84297V12.5C8.84297 11.39 9.28511 10.39 9.99255 9.67L11.2109 8.41C11.5745 8.05 11.7906 7.55 11.7906 7C11.7906 6.46957 11.5836 5.96086 11.2151 5.58579C10.8465 5.21071 10.3467 5 9.82552 5C9.30434 5 8.80451 5.21071 8.43598 5.58579C8.06745 5.96086 7.86041 6.46957 7.86041 7H5.89531C5.89531 5.93913 6.30938 4.92172 7.04644 4.17157C7.7835 3.42143 8.78316 3 9.82552 3C10.8679 3 11.8675 3.42143 12.6046 4.17157C13.3417 4.92172 13.7557 5.93913 13.7557 7C13.7543 7.84324 13.4259 8.65183 12.842 9.25ZM10.8081 17H8.84297V15H10.8081M9.82552 0C8.53521 0 7.25754 0.258658 6.06545 0.761205C4.87337 1.26375 3.79021 2.00035 2.87783 2.92893C1.03519 4.8043 0 7.34784 0 10C0 12.6522 1.03519 15.1957 2.87783 17.0711C3.79021 17.9997 4.87337 18.7362 6.06545 19.2388C7.25754 19.7413 8.53521 20 9.82552 20C12.4314 20 14.9306 18.9464 16.7732 17.0711C18.6158 15.1957 19.651 12.6522 19.651 10C19.651 4.47 15.2296 0 9.82552 0Z\" fill=\"black\"></path>\n</svg>\n<div class=\"bottom\">\n<p>Expand any one approach by clicking the given options in the bar. Clicking one approach on bar,\ncloses all other expands. You can manually expand more than one approach at a time</p>\n<i></i>\n</div>\n\n</div>\n</div>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Approaches Drop-Down -->\n<div class=\"dsa_article_dropdown_approachs \">\n\n<!-- Brute Force Approach Starts from here -->\n<div id=\"brute-force-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nSolution 1:\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<h3><strong>Naive Approach (Brute force)</strong>:&nbsp;</h3>\n<p>One straightforward approach, we can consider is using the <a href=\"https://takeuforward.org/data-structure/linear-search-in-c/\">linear search algorithm</a>. Using this method, we will find the minimum number from the array.</p>\n<h3><strong>Algorithm:</strong></h3>\n<ul><li>First, we will declare a \u2018mini\u2019 variable initialized with a large number.</li><li>After that, we will traverse the array and compare each element with the \u2018mini\u2019 variable. Each time the \u2018mini\u2019 variable will be updated with the minimum value i.e. min(mini, arr[i]).</li><li>Finally, we will return \u2018mini\u2019 as our answer.</li></ul>\n\n\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint findMin(vector&lt;int&gt;&amp; arr) {\n    int n = arr.size(); // size of the array.\n    int mini = INT_MAX;\n    for (int i = 0; i &lt; n; i++) {\n        // Always keep the minimum.\n        mini = min(mini, arr[i]);\n    }\n    return mini;\n}\n\nint main()\n{\n    vector&lt;int&gt; arr = {4, 5, 6, 7, 0, 1, 2, 3};\n    int ans = findMin(arr);\n    cout &lt;&lt; \"The minimum element is: \" &lt;&lt; ans &lt;&lt; \"\\n\";\n    return 0;\n}\n\n</code>\n</pre>\n<p>\nOutput: The minimum element is: 0\n\n</p>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\npublic class tUf {\n    public static int findMin(int []arr) {\n        int n = arr.length; // size of the array.\n        int mini = Integer.MAX_VALUE;\n        for (int i = 0; i &lt; n; i++) {\n            // Always keep the minimum.\n            mini = Math.min(mini, arr[i]);\n        }\n        return mini;\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {4, 5, 6, 7, 0, 1, 2, 3};\n        int ans = findMin(arr);\n        System.out.println(\"The minimum element is: \" + ans );\n    }\n}\n</code>\n</pre>\n<p>\nOutput: The minimum element is: 0\n\n\n</p>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\nimport sys\ndef findMin(arr: [int]):\n    n = len(arr)  # size of the array.\n    mini = sys.maxsize\n    for i in range(n):\n        # Always keep the minimum.\n        mini = min(mini, arr[i])\n    return mini\n\nif __name__ == \"__main__\":\n    arr = [4, 5, 6, 7, 0, 1, 2, 3]\n    ans = findMin(arr)\n    print(\"The minimum element is:\", ans)\n</code>\n</pre>\n<p>\nOutput: The minimum element is: 0\n\n\n</p>\n</div>\n<div class=\"code-block \" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\nfunction findMin(arr) {\n    let n = arr.length; // size of the array.\n    let mini = Infinity;\n    for (let i = 0; i &lt; n; i++) {\n        // Always keep the minimum.\n        mini = Math.min(mini, arr[i]);\n    }\n    return mini;\n}\n\nlet arr = [4, 5, 6, 7, 0, 1, 2, 3];\nlet ans = findMin(arr);\nconsole.log(\"The minimum element is: \" + ans);\n\n</code>\n</pre>\n<p>\nOutput: The minimum element is: 0\n\n\n</p>\n</div>\n\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n</p><p><strong>Time Complexity: </strong>O(N), N = size of the given array.<strong><br></strong><strong>Reason: </strong>We have to iterate through the entire array to check if the target is present in the array.</p>\n<p><strong>Space Complexity: </strong>O(1)<strong><br></strong><strong>Reason: </strong>We have not used any extra data structures, this makes space complexity, even in the worst case as O(1).</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Brute Force Approach Ends here -->\n\n\n<!-- Better Approach Starts from here -->\n\n<div id=\"better-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nSolution 2:\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<h3><strong>Optimal Approach(Using Binary Search)</strong>:&nbsp;</h3>\n<p>Here, we can easily observe, that we have to find the minimum in a sorted array. That is why, we can think of using the <a href=\"https://takeuforward.org/data-structure/binary-search-explained/\" target=\"_blank\" rel=\"noopener\" title=\"\">Binary Search algorithm</a> to solve this problem.</p>\n<p><em>The primary objective of the Binary Search algorithm is to efficiently determine the appropriate half to eliminate, thereby reducing the search space by half. It does this by determining a specific condition that ensures that the target is not present in that half.</em></p>\n<p><strong>Key Observation: </strong>If an array is rotated and sorted, we already know that for every index, one of the 2 halves of the array will always be sorted.</p>\n<p>Based on this observation, we adopted a straightforward two-step process to eliminate one-half of the rotated sorted array.&nbsp;</p>\n<ul><li>First, we identify the sorted half of the array.&nbsp;</li><li>Once found, we determine if the target is located within this sorted half.&nbsp;<ul><li>If not, we eliminate that half from further consideration.&nbsp;</li><li>Conversely, if the target does exist in the sorted half, we eliminate the other half.</li></ul></li></ul>\n<p><strong>Let\u2019s observe how we identify the sorted half:</strong></p>\n<p>We basically compare arr[mid] with arr[low] and arr[high] in the following way:</p>\n<ul><li><strong>If arr[low] &lt;= arr[mid]: </strong>In this case, we identified that the left half is sorted.</li><li><strong>If arr[mid] &lt;= arr[high]: </strong>In this case, we identified that the right half is sorted.</li></ul>\n<p><strong>Let\u2019s observe how we will find the minimum element:</strong></p>\n<p>In this situation, we have two possibilities to consider. The sorted half of the array may or may not include the minimum value. However, we can leverage the property of the sorted half, specifically that the leftmost element of the sorted half will always be the minimum element within that particular half.</p>\n<p><strong><em>During each iteration, we will select the leftmost element from the sorted half and discard that half from further consideration. Among all the selected elements, the minimum value will serve as our answer.</em></strong></p>\n<p>To facilitate this process, we will declare a variable called 'ans' and initialize it with a large number. Then, at each step, after selecting the leftmost element from the sorted half, we will compare it with 'ans' and update 'ans' with the smaller value (i.e., min(ans, leftmost_element)).</p>\n<p><strong>Note:</strong><strong><em> </em></strong><em>If, at any index, both the left and right halves of the array are sorted, we have the flexibility to select the minimum value from either half and eliminate that particular half (in this case, the left half is chosen first). The algorithm already takes care of this case, so there is no need for explicit handling.</em></p>\n<h3><strong>Algorithm:</strong></h3>\n<p>The steps are as follows:</p>\n<p>We will declare the \u2018ans\u2019 variable and initialize it with the largest value possible. With that, as usual, we will declare 2 pointers i.e. low and high.</p>\n<ol><li><strong>Place the 2 pointers i.e. low and high: </strong>Initially, we will place the pointers like this: low will point to the first index and high will point to the last index.<br></li><li><strong>Calculate the \u2018mid\u2019: </strong>Now, inside a loop, we will calculate the value of \u2018mid\u2019 using the following formula:<br><strong>mid = (low+high) // 2 ( \u2018//\u2019 refers to integer division)</strong><br></li><li>Identify the sorted half, and after picking the leftmost element, eliminate that half.<ol><li><strong>If arr[low] &lt;= arr[mid]: </strong>This condition ensures that the left part is sorted. So, we will pick the leftmost element i.e. <strong>arr[low]</strong>. Now, we will compare it with 'ans' and update 'ans' with the smaller value (i.e., <strong>min(ans, arr[low])</strong>). Now, we will eliminate this left half(i.e. low = mid+1).<br></li><li><strong>Otherwise, if the right half is sorted:&nbsp; </strong>This condition ensures that the right half is sorted. So, we will pick the leftmost element i.e. <strong>arr[mid]</strong>. Now, we will compare it with 'ans' and update 'ans' with the smaller value (i.e., <strong>min(ans, arr[mid])</strong>). Now, we will eliminate this right half(i.e. high = mid-1).<br></li></ol></li><li>This process will be inside a loop and the loop will continue until low crosses high. Finally, we will return the \u2018ans\u2019 variable that stores the minimum element.</li></ol>\n<p><strong>Dry-run: </strong><em>Please refer to the </em><a href=\"https://youtu.be/nhEMDKMB44g\"><em>video</em></a><em> for a detailed explanation.</em><em></em></p>\n<pre class=\"wp-block-preformatted\"><strong>Example:{4,5,1,2,3}</strong>\nlow=0,high=4,mid=2\nCheck if arr[low] &lt;= arr[mid], its not, \nSo right part is sorted. \nWe take ans=min(ans,arr[2]) =&gt; ans=1, and high = mid-1.\n\nlow=0,high=1,mid=0;\narr[low]&lt;=arr[mid] = true. \nSo we update ans as min(ans,arr[0]) =&gt; ans=1; \nSince the left part was sorted low=mid+1. Which makes low = high = 1.\n\nlow=1,high=1,mid=1\narr[low] &lt;= arr[mid] = true. \nSo we update ans as min(ans,arr[1]) =&gt; ans=1;  \nSince the left part was sorted low=mid+1. Which makes low = 2. Loop Stops.\n\n</pre></div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint findMin(vector&lt;int&gt;&amp; arr) {\n    int low = 0, high = arr.size() - 1;\n    int ans = INT_MAX;\n    while (low &lt;= high) {\n        int mid = (low + high) / 2;\n\n        //if left part is sorted:\n        if (arr[low] &lt;= arr[mid]) {\n            // keep the minimum:\n            ans = min(ans, arr[low]);\n\n            // Eliminate left half:\n            low = mid + 1;\n        }\n        else { //if right part is sorted:\n\n            // keep the minimum:\n            ans = min(ans, arr[mid]);\n\n            // Eliminate right half:\n            high = mid - 1;\n        }\n    }\n    return ans;\n}\n\nint main()\n{\n    vector&lt;int&gt; arr = {4, 5, 6, 7, 0, 1, 2, 3};\n    int ans = findMin(arr);\n    cout &lt;&lt; \"The minimum element is: \" &lt;&lt; ans &lt;&lt; \"\\n\";\n    return 0;\n}\n</code>\n</pre>\n<p>\nOutput: The minimum element is: 0\n\n\n</p>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\npublic class tUf {\n    public static int findMin(int []arr) {\n        int low = 0, high = arr.length - 1;\n        int ans = Integer.MAX_VALUE;\n        while (low &lt;= high) {\n            int mid = (low + high) / 2;\n\n            //if left part is sorted:\n            if (arr[low] &lt;= arr[mid]) {\n                // keep the minimum:\n                ans = Math.min(ans, arr[low]);\n\n                // Eliminate left half:\n                low = mid + 1;\n\n            } else { //if right part is sorted:\n\n                // keep the minimum:\n                ans = Math.min(ans, arr[mid]);\n\n                // Eliminate right half:\n                high = mid - 1;\n            }\n        }\n        return ans;\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {4, 5, 6, 7, 0, 1, 2, 3};\n        int ans = findMin(arr);\n        System.out.println(\"The minimum element is: \" + ans );\n    }\n}\n\n\n</code>\n</pre>\n<p>\nOutput: The minimum element is: 0\n\n</p>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\nimport sys\ndef findMin(arr: [int]):\n    low = 0\n    high = len(arr) - 1\n    ans = sys.maxsize\n\n    while low &lt;= high:\n        mid = (low + high) // 2\n\n        if arr[low] &lt;= arr[mid]:  # if left part is sorted\n            ans = min(ans, arr[low])  # keep the minimum\n            low = mid + 1  # eliminate left half\n            \n        else:  # if right part is sorted\n            ans = min(ans, arr[mid])  # keep the minimum\n            high = mid - 1  # eliminate right half\n\n    return ans\n\nif __name__ == \"__main__\":\n    arr = [4, 5, 6, 7, 0, 1, 2, 3]\n    ans = findMin(arr)\n    print(\"The minimum element is:\", ans)\n\n</code>\n</pre>\n<p>\nOutput: The minimum element is: 0\n\n\n</p>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\nfunction findMin(arr) {\n    let low = 0, high = arr.length - 1;\n    let ans = Infinity;\n    while (low &lt;= high) {\n        let mid = Math.floor((low + high) / 2);\n\n        // If left part is sorted:\n        if (arr[low] &lt;= arr[mid]) {\n            // Keep the minimum:\n            ans = Math.min(ans, arr[low]);\n\n            // Eliminate left half:\n            low = mid + 1;\n        } else { // If right part is sorted:\n            // Keep the minimum:\n            ans = Math.min(ans, arr[mid]);\n\n            // Eliminate right half:\n            high = mid - 1;\n        }\n    }\n    return ans;\n}\n\nlet arr = [4, 5, 6, 7, 0, 1, 2, 3];\nlet ans = findMin(arr);\nconsole.log(\"The minimum element is: \" + ans);\n}\n</code>\n</pre>\n<p>\nOutput: The minimum element is: 0\n\n\n</p>\n</div>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n</p><p><strong>Time Complexity: </strong>O(logN), N = size of the given array.<strong><br></strong><strong>Reason: </strong>We are basically using binary search to find the minimum.</p>\n<p><strong>Space Complexity: </strong>O(1)<strong><br></strong><strong>Reason: </strong>We have not used any extra data structures, this makes space complexity, even in the worst case as O(1).</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Better Approach Ends from here -->\n\n\n<!-- Optimal Approach Starts from here -->\n\n<div id=\"optimal-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nSolution 3:\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n<h3><strong>Further Optimization(Using Binary Search):</strong></h3>\n<p>If both the left and right halves of an index are sorted, it implies that the entire search space between the low and high indices is also sorted. In this case, there is no need to conduct a binary search within that segment to determine the minimum value. Instead, we can simply select the leftmost element as the minimum.</p>\n<p>The condition to check will be <strong>arr[low] &lt;= arr[mid] &amp;&amp; arr[mid] &lt;= arr[high]</strong>. We can shorten this into <strong>arr[low] &lt;= arr[high] </strong>as well.</p>\n<p><strong>If arr[low] &lt;= arr[high]: </strong>In this case, the array from index low to high is completely sorted. Therefore, we can simply select the minimum element, arr[low], and update the 'ans' variable with the minimum value i.e. min(ans, arr[low]). Once this is done, there is no need to continue with the binary search algorithm.</p>\n<h3><strong>Algorithm:</strong></h3>\n<p>The steps are as follows:</p>\n<p>We will declare the \u2018ans\u2019 variable and initialize it with the largest value possible. With that, as usual, we will declare 2 pointers i.e. low and high.</p>\n<ol><li><strong>Place the 2 pointers i.e. low and high: </strong>Initially, we will place the pointers like this: low will point to the first index, and high will point to the last index.<br></li><li><strong>Calculate the \u2018mid\u2019: </strong>Now, inside a loop, we will calculate the value of \u2018mid\u2019 using the following formula:<br><strong>mid = (low+high) // 2 ( \u2018//\u2019 refers to integer division)</strong><br></li><li><strong>If arr[low] &lt;= arr[high]: </strong>In this case, the array from index low to high is completely sorted. Therefore, we can select the minimum element, arr[low], and update the 'ans' variable with the minimum value i.e. min(ans, arr[low]). Once this is done, there is no need to continue with the binary search algorithm. So, we will <strong>break </strong>from this step.</li><li>Identify the sorted half, and after picking the leftmost element, eliminate that half.<ol><li><strong>If arr[low] &lt;= arr[mid]: </strong>This condition ensures that the left part is sorted. So, we will pick the leftmost element i.e. <strong>arr[low]</strong>. Now, we will compare it with 'ans' and update 'ans' with the smaller value (i.e., <strong>min(ans, arr[low])</strong>). Now, we will eliminate this left half(i.e. low = mid+1).<br></li><li><strong>Otherwise, if the right half is sorted:&nbsp; </strong>This condition ensures that the right half is sorted. So, we will pick the leftmost element i.e. <strong>arr[mid]</strong>. Now, we will compare it with 'ans' and update 'ans' with the smaller value (i.e., <strong>min(ans, arr[mid])</strong>). Now, we will eliminate this right half(i.e. high = mid-1).<br></li></ol></li><li>This process will be inside a loop and the loop will continue until low crosses high. Finally, we will return the \u2018ans\u2019 variable that stores the minimum element.</li></ol>\n<p><strong>Dry-run: </strong><em>Please refer to the </em><a href=\"https://youtu.be/nhEMDKMB44g\"><em>video</em></a><em> for a detailed explanation.</em></p>\n<p><strong>Note: </strong><em>Though the time complexity of the following code is the same as the previous one, this code will run slightly faster.</em></p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n\n<!-- Insert C++ code of Optimal Approach Here-->\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint findMin(vector&lt;int&gt;&amp; arr) {\n    int low = 0, high = arr.size() - 1;\n    int ans = INT_MAX;\n    while (low &lt;= high) {\n        int mid = (low + high) / 2;\n        //search space is already sorted\n        //then arr[low] will always be\n        //the minimum in that search space:\n        if (arr[low] &lt;= arr[high]) {\n            ans = min(ans, arr[low]);\n            break;\n        }\n\n        //if left part is sorted:\n        if (arr[low] &lt;= arr[mid]) {\n            // keep the minimum:\n            ans = min(ans, arr[low]);\n\n            // Eliminate left half:\n            low = mid + 1;\n        }\n        else { //if right part is sorted:\n\n            // keep the minimum:\n            ans = min(ans, arr[mid]);\n\n            // Eliminate right half:\n            high = mid - 1;\n        }\n    }\n    return ans;\n}\n\nint main()\n{\n    vector&lt;int&gt; arr = {4, 5, 6, 7, 0, 1, 2, 3};\n    int ans = findMin(arr);\n    cout &lt;&lt; \"The minimum element is: \" &lt;&lt; ans &lt;&lt; \"\\n\";\n    return 0;\n}\n</code>\n</pre>\n<p>\n<!-- Insert Output of Optimal Apporach Here -->\nOutput: The minimum element is: 0\n\n</p>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\n<!-- Insert Java code of Optimal Approach Here -->\nimport java.util.*;\n\npublic class tUf {\n    public static int findMin(int []arr) {\n        int low = 0, high = arr.length - 1;\n        int ans = Integer.MAX_VALUE;\n        while (low &lt;= high) {\n            int mid = (low + high) / 2;\n\n            //search space is already sorted\n            //then arr[low] will always be\n            //the minimum in that search space:\n            if (arr[low] &lt;= arr[high]) {\n                ans = Math.min(ans, arr[low]);\n                break;\n            }\n\n            //if left part is sorted:\n            if (arr[low] &lt;= arr[mid]) {\n                // keep the minimum:\n                ans = Math.min(ans, arr[low]);\n\n                // Eliminate left half:\n                low = mid + 1;\n\n            } else { //if right part is sorted:\n\n                // keep the minimum:\n                ans = Math.min(ans, arr[mid]);\n\n                // Eliminate right half:\n                high = mid - 1;\n            }\n        }\n        return ans;\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {4, 5, 6, 7, 0, 1, 2, 3};\n        int ans = findMin(arr);\n        System.out.println(\"The minimum element is: \" + ans );\n    }\n}\n</code>\n</pre>\n<p>\n<!-- Insert Output of Optimal Apporach Here -->\nOutput: The minimum element is: 0\n\n</p>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\n<!-- Insert Python code of Optimal Approach Here -->\nimport sys\ndef findMin(arr: [int]):\n    low = 0\n    high = len(arr) - 1\n    ans = sys.maxsize\n\n    while low &lt;= high:\n        mid = (low + high) // 2\n\n        # search space is already sorted\n        # then arr[low] will always be\n        # the minimum in that search space:\n        if arr[low] &lt;= arr[high]:\n            ans = min(ans, arr[low])\n            break\n            \n        if arr[low] &lt;= arr[mid]:  # if left part is sorted\n            ans = min(ans, arr[low])  # keep the minimum\n            low = mid + 1  # eliminate left half\n\n        else:  # if right part is sorted\n            ans = min(ans, arr[mid])  # keep the minimum\n            high = mid - 1  # eliminate right half\n\n    return ans\n\nif __name__ == \"__main__\":\n    arr = [4, 5, 6, 7, 0, 1, 2, 3]\n    ans = findMin(arr)\n    print(\"The minimum element is:\", ans)\n</code>\n</pre>\n<p>\n<!-- Insert Output of Optimal Apporach Here -->\nOutput: The minimum element is: 0\n\n</p>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\n<!-- Insert Python Code of Better Approach Here -->\nfunction findMin(arr) {\n    let low = 0, high = arr.length - 1;\n    let ans = Infinity;\n    while (low &lt;= high) {\n        let mid = Math.floor((low + high) / 2);\n        \n        //search space is already sorted\n        //then arr[low] will always be\n        //the minimum in that search space:\n        if (arr[low] &lt;= arr[high]) {\n            ans = Math.min(ans, arr[low]);\n            break;\n        }\n        \n        // If left part is sorted:\n        if (arr[low] &lt;= arr[mid]) {\n            // Keep the minimum:\n            ans = Math.min(ans, arr[low]);\n\n            // Eliminate left half:\n            low = mid + 1;\n        } else { // If right part is sorted:\n            // Keep the minimum:\n            ans = Math.min(ans, arr[mid]);\n\n            // Eliminate right half:\n            high = mid - 1;\n        }\n    }\n    return ans;\n}\n\nlet arr = [4, 5, 6, 7, 0, 1, 2, 3];\nlet ans = findMin(arr);\nconsole.log(\"The minimum element is: \" + ans);\n\n</code>\n</pre>\n<p>\n<!-- Insert Output of Better Approach Here -->\nOutput: The minimum element is: 0\n</p>\n</div>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Optimal Approach-->\n</p><p><strong>Time Complexity: </strong>O(logN), N = size of the given array.<strong><br>Reason: </strong>We are basically using binary search to find the minimum.&nbsp;</p>\n<p><strong>Space Complexity: </strong>O(1)<strong><br>Reason: </strong>We have not used any extra data structures, this makes space complexity, even in the worst case as O(1).</p>\n\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Optimal Approach Starts from here -->\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n<details>\n<summary class=\"main-summary\">\n<span>\nVideo Explanation\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"yt-video-wrapper\">\n\n<!-- Insert iframe embed Link of Youtube Video-->\n<iframe class=\"lazy-loaded\" loading=\"lazy\" title=\"Minimum in Rotated Sorted Array\" width=\"810\" height=\"456\" data-lazy-type=\"iframe\" data-src=\"https://www.youtube.com/embed/nhEMDKMB44g\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\" src=\"https://www.youtube.com/embed/nhEMDKMB44g?feature=oembed\"></iframe><noscript>\n<iframe loading=\"lazy\" title=\"Minimum in Rotated Sorted Array\" width=\"810\" height=\"456\" src=\"https://www.youtube.com/embed/nhEMDKMB44g\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe></noscript>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script>\n\nconst codeSections = document.querySelectorAll('.code-section');\n\n// Get last selected language from localStorage or set default value\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\n// Update last selected language for all sections and store in localStorage\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\n// Handle copy button click event\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\n// Set initial state of the tabs\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<script>\nconst codeSections = document.querySelectorAll('.code-section');\n\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script src=\"https://takeuforward.org/UXApproachDropDowns/3ApproachJSScript.js\"></script>\n<!-- /wp:html -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to <strong><a href=\"https://www.linkedin.com/in/kriti39/\" target=\"_blank\" rel=\"noreferrer noopener\">KRITIDIPTA GHOSH</a></strong></em> <em>for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->"
}