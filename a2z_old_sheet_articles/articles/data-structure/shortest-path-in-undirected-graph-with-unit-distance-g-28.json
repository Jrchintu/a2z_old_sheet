{
    "dislikes": 6,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:11:43 GMT+0530 (India Standard Time)",
    "slug": "shortest-path-in-undirected-graph-with-unit-distance-g-28",
    "aid": "2148",
    "title": "Shortest Path in Undirected Graph with unit distance: G-28",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/shortest-path-in-undirected-graph-with-unit-weights",
    "topics": [
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "graph",
            "topic-title": "Graph"
        }
    ],
    "content": "<!-- wp:paragraph -->\n<p>Given an Undirected Graph having <strong>unit weight</strong>, find the shortest path from the source to all other nodes in this graph. In this problem statement, we have assumed the source vertex to be \u20180\u2019. If a vertex is unreachable from the source node, then return -1 for that vertex.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Example 1:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<pre><figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2022/10/image-19.png\" alt=\"\" class=\"wp-image-6785\"></figure>\n<b>Input</b>:\nn = 9, m = 10\nedges = [[0,1],[0,3],[3,4],[4 ,5],[5, 6],[1,2],[2,6],[6,7],[7,8],[6,8]]\nsrc=0 \n\n<b>Output:</b> 0 1 2 1 2 3 3 4 4\n\n<b>Explanation:</b>\nThe above output array shows the shortest path to all \nthe nodes from the source vertex (0), Dist[0] = 0, \nDist[1] = 1 , Dist[2] = 2 , \u2026. Dist[8] = 4 \nWhere Dist[node] is the shortest path between src and \nthe node. For a node, if the value of Dist[node]= -1, \nthen we conclude that the node is unreachable from \nthe src node.\n</pre>\n<!-- /wp:html -->\n\n<!-- wp:paragraph -->\n<p><strong>Example 2:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<pre>\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2022/10/image-20.png\" alt=\"\" class=\"wp-image-6786\"/></figure>\n<b>Input:</b>\nn = 8, m = 10\nEdges =[[1,0],[2,1],[0,3],[3,7],[3,4],[7,4],[7,6],[4,5],[4,6],[6,5]]\nsrc=0\n\n<b>Output:</b> 0 1 2 1 2 3 3 2\n\n<b>Explanation: </b>\nThe above output list shows the shortest path to all the \nnodes from the source vertex (0),  Dist[0] = 0, \nDist[1] = 1, Dist[2] = 2,.....Dist[7] = 2\n</pre>\n<!-- /wp:html -->\n\n<!-- wp:paragraph -->\n<p><strong>Solution</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph {\"textColor\":\"accent\"} -->\n<p class=\"has-accent-color has-text-color\"><em><strong>Disclaimer</strong></em>: <em>Don\u2019t jump directly to the solution, try it out yourself first</em>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Approach:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>According to intuition, we will calculate the shortest path in an undirected graph having unit weights by using the Breadth First Search. BFS is a traversal technique where we visit the nodes level-wise, i.e., it visits the same level nodes simultaneously, and then moves to the next level.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Initial configuration:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>Adjacency List:</strong> Create an adjacency list of the formed vector of pairs of size \u2018N\u2019, where each index denotes a node \u2018u\u2019 and contains a vector that consists of pairs denoting the adjacent nodes \u2018v\u2019 and the distance to that adjacent node from initial node \u2018u\u2019.</li><li><strong>Queue: </strong>Define a queue data structure to store the BFS traversal.</li><li><strong>Distance Array: </strong>Initialise this array by Max Integer value and then update the value for each node successively while calculating the shortest distance between the source and the current node.</li><li><strong>Resultant Array: </strong>Initialised with -1, this array stores the updated shortest distances from the source node after completion of the algorithm. The index which remains as -1 is said to be unreachable from the source node. This is required to return the answer according to the question.&nbsp;</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>The shortest path in an undirected graph can be calculated by the following steps:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>Firstly, we convert the graph into an adjacency list which displays the adjacent nodes for each index represented by a node.</li><li>Now, we create a <strong>dist</strong> array of size N initialized with a very large number which can never be the answer to indicate that initially, all the nodes are untraversed.</li><li>Then, perform the standard <a href=\"https://takeuforward.org/graph/breadth-first-search-bfs-level-order-traversal/\">BFS traversal</a>.&nbsp;</li><li>In every iteration, pick up the front() node, and then traverse for its adjacent nodes.&nbsp; For every adjacent node, we will relax the distance to the adjacent node if (dist[node] + 1 &lt; dist[adjNode]). Here dist[node] means the distance taken to reach the current node, and \u20181\u2019 is the edge weight between the node and the adjNode. We will relax the edges if this distance is shorter than the previously taken distance. Every time a distance is updated for the adjacent node, we push that into the Queue with the increased distance.&nbsp;</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Let us understand it using an example below,</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":6787,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2022/10/image-21.png\" alt=\"\" class=\"wp-image-6787\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Where nodes \u20181\u2019 and \u20183\u2019 are adjacent to node \u20180\u2019.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>Once all the nodes have been iterated, the dist[] array will store the shortest paths.</li><li>Create a resultant array and initialize it by -1 and put all the distances which are updated in the resultant array. If anyone still holds the Large Integer value which we assigned at the start, it means it is not reachable, and we don\u2019t update our resultant array. The node which still remains marked as -1 is unreachable from the source node.&nbsp;</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Intuition:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For finding the shortest path in an undirected graph with unit weight, the technique we use is the Breadth-First Search (BFS). Now, the question arises why do we use the BFS technique in finding the shortest path here when we could\u2019ve easily used other standard graph shortest path algorithms to implement the same? If we start traversal from the src node, we move to other adjacent nodes, everyone is at a distance of 1, so everyone goes into the queue, then subsequently we get the next set of nodes at 1 more distance, making the distance to 2, and if you look at the queue closely, it will look something like below. Queue here acts as a sorted Queue, hence we don\u2019t need any sorted ds which we generally require in the other graph algorithms.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":6788,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2022/10/image-22.png\" alt=\"\" class=\"wp-image-6788\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong><em>Note: If you wish to see the dry run of the above approach, you can watch the video attached to this article.</em></strong>&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    \n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nclass Solution {\n  public:\n    vector&lt;int&gt; shortestPath(vector&lt;vector&lt;int&gt;&gt;&amp; edges, int N,int M, int src){\n    //Create an adjacency list of size N for storing the undirected graph.\n        vector&lt;int&gt; adj[N]; \n        for(auto it : edges) {\n            adj[it[0]].push_back(it[1]); \n            adj[it[1]].push_back(it[0]); \n        }\n\n        //A dist array of size N initialised with a large number to \n        //indicate that initially all the nodes are untraversed.    \n    \n        int dist[N];\n        for(int i = 0;i&lt;N;i++) dist[i] = 1e9;\n        // BFS Implementation.\n        dist[src] = 0; \n        queue&lt;int&gt; q;\n        q.push(src); \n        while(!q.empty()) {\n            int node = q.front(); \n            q.pop(); \n            for(auto it : adj[node]) {\n                if(dist[node] + 1 &lt; dist[it]) {\n                    dist[it] = 1 + dist[node]; \n                    q.push(it); \n                }\n            }\n        }\n        // Updated shortest distances are stored in the resultant array \u2018ans\u2019.\n        // Unreachable nodes are marked as -1. \n        vector&lt;int&gt; ans(N, -1);\n        for(int i = 0;i&lt;N;i++) {\n            if(dist[i] != 1e9) {\n                ans[i] = dist[i]; \n            }\n        }\n        return ans; \n    }\n};\n\nint main(){\n\nint N=9, M=10;\nvector&lt;vector&lt;int&gt;&gt; edges= {{0,1},{0,3},{3,4},{4,5},{5,6},{1,2},{2,6},{6,7},{7,8},{6,8}};\n\nSolution obj;\nvector&lt;int&gt; ans = obj.shortestPath(edges,N,M,0);\n\nfor(int i=0;i&lt;ans.size();i++){\n    \n    cout&lt;&lt;ans[i]&lt;&lt;\" \";\n}\n\nreturn 0;\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output</strong>:&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>0 1 2 1 2 3 3 4 4&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O(M) { for creating the adjacency list from given list \u2018edges\u2019} + O(N + 2M) { for the BFS Algorithm} + O(N) { for adding the final values of the shortest path in the resultant array} ~ O(N+2M).&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Where N= number of vertices and M= number of edges.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity:&nbsp; </strong>O( N) {for the stack storing the BFS} + O(N) {for the resultant array} + O(N) {for the dist array storing updated shortest paths} + O( N+2M) {for the adjacency list} ~ O(N+M) .</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Where N= number of vertices and M= number of edges.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\nimport java.lang.*;\nimport java.io.*;\n\nclass Main{\n    \n    public static void main(String[] args) throws IOException{\n        int n=9, m=10;\n        int[][] edge = {{0,1},{0,3},{3,4},{4,5},{5,6},{1,2},{2,6},{6,7},{7,8},{6,8}};\n          \n        Solution obj = new Solution();\n        int res[] = obj.shortestPath(edge,n,m,0);\n        for(int i=0;i&lt;n;i++){\n            System.out.print(res[i]+\" \");\n        }\n        System.out.println();\n    }\n}\n\nclass Solution {\n    \n    public int[] shortestPath(int[][] edges,int n,int m ,int src) {\n    //Create an adjacency list of size N for storing the undirected graph.\n        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; adj = new ArrayList&lt;&gt;(); \n        for(int i = 0;i&lt;n;i++) {\n            adj.add(new ArrayList&lt;&gt;()); \n        }\n        for(int i = 0;i&lt;m;i++) {\n            adj.get(edges[i][0]).add(edges[i][1]); \n            adj.get(edges[i][1]).add(edges[i][0]); \n        }\n    //A dist array of size N initialised with a large number to \n    //indicate that initially all the nodes are untraversed. \n        int dist[] = new int[n];\n        for(int i = 0;i&lt;n;i++) dist[i] = (int)1e9;\n        dist[src] = 0; \n\n    // BFS Implementation\n        Queue&lt;Integer&gt; q = new LinkedList&lt;&gt;();\n        q.add(src); \n        while(!q.isEmpty()) {\n            int node = q.peek(); \n            q.remove(); \n            for(int it : adj.get(node)) {\n                if(dist[node] + 1 &lt; dist[it]) {\n                    dist[it] = 1 + dist[node]; \n                    q.add(it); \n                }\n            }\n        }\n        // Updated shortest distances are stored in the resultant array \u2018ans\u2019.\n        // Unreachable nodes are marked as -1. \n        for(int i = 0;i&lt;n;i++) {\n            if(dist[i] == 1e9) {\n                dist[i] = -1; \n            }\n        }\n        return dist; \n    }\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output</strong>:&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>0 1 2 1 2 3 3 4 4&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O(M) { for creating the adjacency list from given list \u2018edges\u2019} + O(N + 2M) { for the BFS Algorithm} + O(N) { for adding the final values of the shortest path in the resultant array} ~ O(N+2M).&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Where N= number of vertices and M= number of edges.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity:&nbsp; </strong>O( N) {for the stack storing the BFS} + O(N) {for the resultant array} + O(N) {for the dist array storing updated shortest paths} + O( N+2M) {for the adjacency list} ~ O(N+M) .</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Where N= number of vertices and M= number of edges.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;<strong><a href=\"https://www.linkedin.com/in/priyanshi-goel-7b6a42210/\" target=\"_blank\" rel=\"noopener\" title=\"\">Priyanshi Goel</a></strong>&nbsp;for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\" target=\"_blank\" rel=\"noopener\" title=\"\">please check out this article</a>.&nbsp;<em>If you want to suggest any improvement/correction in this article please mail us at&nbsp;write4tuf@gmail.com</em></p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:embed {\"url\":\"https://www.youtube.com/watch?v=C4gxoTaI71U\\u0026list=PLgUwDviBIf0oE3gA41TKO2H5bHpPd7fzn\\u0026index=28\",\"type\":\"video\",\"providerNameSlug\":\"youtube\",\"responsive\":true,\"className\":\"wp-embed-aspect-16-9 wp-has-aspect-ratio\"} -->\n<figure class=\"wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio\"><div class=\"wp-block-embed__wrapper\">\nhttps://www.youtube.com/watch?v=C4gxoTaI71U&amp;list=PLgUwDviBIf0oE3gA41TKO2H5bHpPd7fzn&amp;index=28\n</div></figure>\n<!-- /wp:embed -->",
    "category_tag": "data-structure",
    "likes": 125,
    "preview": "Given an Undirected Graph having unit weight, find the shortest path from the source to all other nodes in this graph. In this problem statement, we have assumed the source vertex to be \u20180\u2019. If a v..."
}