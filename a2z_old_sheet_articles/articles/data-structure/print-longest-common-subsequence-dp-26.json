{
    "dislikes": 73,
    "video": "-zI4mrF2Pb4",
    "publishedOn": "Sun Mar 24 2024 22:10:26 GMT+0530 (India Standard Time)",
    "slug": "print-longest-common-subsequence-dp-26",
    "aid": "1776",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/longest-common-subsequence",
    "title": "Print Longest Common Subsequence | (DP - 26)",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "dynamic-programming",
            "topic-title": "Dynamic Programming"
        },
        {
            "topic-id": "recursion",
            "topic-title": "Recursion"
        }
    ],
    "likes": 94,
    "category_tag": "data-structure",
    "preview": "Problem Statement: Print Longest Common Subsequence In the previous article Longest Common Subsequence, we learned to print the length of the longest common subsequence of two strings. In this arti...",
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement:&nbsp;</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Print Longest Common Subsequence</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In the previous article <a href=\"https://takeuforward.org/data-structure/longest-common-subsequence-dp-25/\" target=\"_blank\" rel=\"noreferrer noopener\">Longest Common Subsequence</a>, we learned to print the length of the longest common subsequence of two strings. In this article, we will learn to print the actual string of the longest common subsequence.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Prereq: </strong><a href=\"https://takeuforward.org/data-structure/longest-common-subsequence-dp-25/\" target=\"_blank\" rel=\"noreferrer noopener\">Longest Common Subsequence</a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Intuition:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Let us consider the following example:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><img width=\"512\" height=\"166\" src=\"https://lh3.googleusercontent.com/rzY1hPZD4poztbgaEVhEqVUcaNmdMm6UQL0opF87uE9ALhBJIrHMsdZZ61J_e0cEiyKFrzeaf-eMdo8er2W2opBEh1SPNd5GJJac3GrS6h4yDQoEW5OPBTQ5Wsu68FCnN_zRv-Gz\"></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We will continue from where we left in the article DP-25. There in the tabulation approach, we declared a dp array and dp[n][m] will have the length of the longest common subsequence., i.e dp[n][m] = 3.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now, with help of two nested loops, if we print the dp array, it will look like this:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"393\" height=\"386\" src=\"https://lh3.googleusercontent.com/XPif_h3iwCWTWw4CQ1fxCpqVwqoEGHZN62GdGHtyuYPbUpMLHcowtKTN9LhoKf56VQb2ND2ePHpFW89YDc7GU6-jbJMhVvjwB6wGlxLq0vLBTI1V1IQI4ey4hlj1rYSt6irhD_fS\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Here dp[5][5] gives us the length of the longest common subsequence: 3.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now let us try to form the string itself. We know its length already. We give it the name str.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"310\" height=\"135\" src=\"https://lh5.googleusercontent.com/pl0PJz7QQ7PIqD_e8kKNBIFtfdCfWOvFaNV5UvcyGyhggcrEjQl4abOxt-sV0Iy5KG3gAuAaRbAKYpdmbmviutkVKkMkGweH9hcj63X7Kqh6hF_WyhjNrB8cVhiO43lHqGhXJJeF\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We will use the dp array to form the LCS string. For that, we need to think, about how did the dp array was originally filled. The tabulation approach used <strong>1-based indexing</strong>. We also write the characters corresponding to the indexes of the dp array:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"476\" height=\"567\" src=\"https://lh3.googleusercontent.com/4LF1jQwEDzCw1TERCNeeTttL8zSpEF2q489vx4MSjB57UBUdSwmpPBIuB3pGYTZmkzY8WAUIP2y6Ynr1z_L2Babv4-I-q9yUIgaZKjxcz1q98wlBNXDEDXETFlXRup-Q1j78a-Xu\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now, let us see what were the conditions that we used while forming the dp array:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>if(S1[i-1] == S2[j-1]), </strong>then return 1 + dp[i-1][j-1]</li><li><strong>if(S1[i-1] != S2[j-1]) </strong>, then return 0 + max(dp[i-1][j],dp[i][j-1])</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>These two conditions along with the dp array give us all the required information required to print the LCS string.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Approach:</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The algorithm approach is stated below:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>We will fill the string str from the last by maintaining a pointer.&nbsp;</li><li>We will start from the right-most cell of the dp array, initially i=n and j=m.</li><li>At every cell, we will check if S1[i-1] == S2[j-1], if it is then it means this character is a part of the longest common substring. So we will push it to the str (at last). Then we will move to the diagonally top-left(\u2196)&nbsp; cell by assigning i to i-1 and j to j-1.</li><li>Else, this character is not a part of the longest common subsequence. It means that originally this cell got its value from its left cell (\u2190) or from its top cell (\u2191). Whichever cell\u2019s value will be more of the two, we will move to that cell.</li><li>We will continue till i&gt;0 and j&gt;0, failing it we will break from the loop.</li><li>At last we will get our lcs string in \u201cstr\u201d.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Dry Run:</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><img width=\"624\" height=\"455\" src=\"https://lh5.googleusercontent.com/ZQVbxBXnGNeG8wSFaA_PBb9x6UfFuhQvFx2B9G41voVrzb2dxK8LLimbKvenQbN4u2v2OdgK5SQf3XQ-ZNX3BW34fJQS30S9QGo9cBD7NWHBvXZDD8937o3yUpL9gKNJ05ed1vzk\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>At starting i=5 and j=5.</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>As S1[4] != S2[4], we move to the left side (\u2190) as it\u2019s value is greater than the top value(\u2191), therefore i=5 and j=4</li><li>As S1[4] == S2[3], we add the current character to the str string(at last) and move to i-1 and j-1 cell i.e top-left(\u2196), therefore i=4 and j=3.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><img width=\"624\" height=\"441\" src=\"https://lh3.googleusercontent.com/1XDLXAHMmyq67-JvyIm5eOLNjbG3X_LvXyfX0U6-TXmGcRnS4upehRJRe1DUvk6qQu2JblMvABQNb4UloUJJ9fVKieJ-D8KIwrLLV4pu1ibQJhN2Aj_iFniarPidla7F7h1m9H2P\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>As S1[3] != S2[2], we move to the left cell (\u2190) as its value is larger than the top cell(\u2191), i becomes 4 and j becomes 2.</li><li>As S1[3] == S2[1], we will add this character to str string and we will move to the top-left cell (\u2196) i becomes 3 and j becomes 1 </li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><img width=\"624\" height=\"432\" src=\"https://lh6.googleusercontent.com/hnMLlX51-NoLyaN6D6yl-FCmmhK-tjni-BCfMpQozJ6BiYKbNfy14BSjQ96x2u9ETF-ity9_8EPeyAuCJzSln3joFGLcRQC_D9-rCpJ-dvoF1GFRhzylptH2Uz2b82Af4hfnx7Re\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>As S1[2] != S2[1], we will move to the top cell (\u2191) as its value is greater than the left cell (\u2190). Now i become 2 and j remains 1.</li><li>As S1[1] == S2[0], we will add this character to str string and we will move to the top-left cell (\u2196) i becomes 1 and j becomes 1 and j becomes 0.</li><li>As j is zero, we have hit the exit condition so we will break out of the loop and str contains the longest common subsequence.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\nvoid lcs(string s1, string s2) {\n\n  int n = s1.size();\n  int m = s2.size();\n\n  vector &lt; vector &lt; int &gt;&gt; dp(n + 1, vector &lt; int &gt; (m + 1, 0));\n  for (int i = 0; i &lt;= n; i++) {\n    dp[i][0] = 0;\n  }\n  for (int i = 0; i &lt;= m; i++) {\n    dp[0][i] = 0;\n  }\n\n  for (int ind1 = 1; ind1 &lt;= n; ind1++) {\n    for (int ind2 = 1; ind2 &lt;= m; ind2++) {\n      if (s1[ind1 - 1] == s2[ind2 - 1])\n        dp[ind1][ind2] = 1 + dp[ind1 - 1][ind2 - 1];\n      else\n        dp[ind1][ind2] = 0 + max(dp[ind1 - 1][ind2], dp[ind1][ind2 - 1]);\n    }\n  }\n\n  int len = dp[n][m];\n  int i = n;\n  int j = m;\n\n  int index = len - 1;\n  string str = \"\";\n  for (int k = 1; k &lt;= len; k++) {\n    str += \"$\"; // dummy string\n  }\n\n  while (i &gt; 0 &amp;&amp; j &gt; 0) {\n    if (s1[i - 1] == s2[j - 1]) {\n      str[index] = s1[i - 1];\n      index--;\n      i--;\n      j--;\n    } else if (s1[i - 1] &gt; s2[j - 1]) {\n      i--;\n    } else j--;\n  }\n  cout &lt;&lt; str;\n}\n\nint main() {\n\n  string s1 = \"abcde\";\n  string s2 = \"bdgek\";\n\n  cout &lt;&lt; \"The Longest Common Subsequence is \";\n  lcs(s1, s2);\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> The Longest Common Subsequence is bde</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(N*M)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reason: There are two nested loops</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(N*M)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reason: We are using an external array of size \u2018N*M\u2019. Stack Space is eliminated.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\n\nclass TUF{\nstatic void lcs(String s1, String s2) {\n    \n    int n=s1.length();\n    int m=s2.length();\n\n    int dp[][]=new int[n+1][m+1];\n    for(int i=0;i&lt;=n;i++){\n        dp[i][0] = 0;\n    }\n    for(int i=0;i&lt;=m;i++){\n        dp[0][i] = 0;\n    }\n    \n    for(int ind1=1;ind1&lt;=n;ind1++){\n        for(int ind2=1;ind2&lt;=m;ind2++){\n            if(s1.charAt(ind1-1)==s2.charAt(ind2-1))\n                dp[ind1][ind2] = 1 + dp[ind1-1][ind2-1];\n            else\n                dp[ind1][ind2] = 0 + Math.max(dp[ind1-1][ind2],dp[ind1][ind2-1]);\n        }\n    }\n    \n    int len=dp[n][m];\n    int i=n;\n    int j=m;\n    \n    int index = len-1;\n    String str=\"\";\n    for(int k=1; k&lt;=len;k++){\n        str +=\"$\"; // dummy string\n    }\n    StringBuilder ss= new StringBuilder(s1);\n    StringBuilder str2=new StringBuilder(str);\n    while(i&gt;0 &amp;&amp; j&gt;0){\n        if(ss.charAt(i-1) == s2.charAt(j-1)){\n            str2.setCharAt(index,ss.charAt(i-1) ); \n            index--;\n            i--;\n            j--;\n        }\n        else if(ss.charAt(i-1)&gt;s2.charAt(j-1)){\n            i--;\n        }\n        else j--;\n    }\n    System.out.println(str2);\n}\n\npublic static void main(String args[]) {\n\n  String s1= \"abcde\";\n  String s2= \"bdgek\";\n                                 \n  System.out.print(\"The Longest Common Subsequence is \");\n  lcs(s1,s2);\n}\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> The Longest Common Subsequence is bde</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(N*M)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reason: There are two nested loops</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(N*M)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reason: We are using an external array of size \u2018N*M\u2019. Stack Space is eliminated.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block\" data-lang=\"python\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">def lcs(s1, s2):\n    n = len(s1)\n    m = len(s2)\n    \n    dp = [[0 for j in range(m + 1)] for i in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = 0\n    for i in range(m + 1):\n        dp[0][i] = 0\n\n    for ind1 in range(1, n + 1):\n        for ind2 in range(1, m + 1):\n            if s1[ind1 - 1] == s2[ind2 - 1]:\n                dp[ind1][ind2] = 1 + dp[ind1 - 1][ind2 - 1]\n            else:\n                dp[ind1][ind2] = 0+max(dp[ind1 - 1][ind2], dp[ind1][ind2 - 1])\n\n    len_ = dp[n][m]\n    i = n\n    j = m\n    \n    index = len_ - 1\n    str_ = \"\"\n    for k in range(1,1+len_):\n      str_+=\"$\" #dummy string\n    \n    while i &gt; 0 and j &gt; 0:\n        if s1[i - 1] == s2[j - 1]:\n            str_ = s1[i - 1] + str_[:-1]\n            index -= 1\n            i -= 1\n            j -= 1\n        elif s1[i - 1] &gt; s2[j - 1]:\n            i -= 1\n        else:\n            j -= 1\n    \n    print(\"The Longest Common Subsequence is\", str_)\n\ndef main():\n    s1 = \"abcde\"\n    s2 = \"bdgek\"\n    \n    lcs(s1, s2)\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> The Longest Common Subsequence is bde</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(N*M)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reason: There are two nested loops</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(N*M)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reason: We are using an external array of size \u2018N*M\u2019. Stack Space is eliminated.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;<strong><a href=\"https://www.linkedin.com/in/anshuman-sharma-a1b245194/\" target=\"_blank\" rel=\"noreferrer noopener\">Anshuman Sharma</a></strong>&nbsp;<em>and&nbsp;<a href=\"https://www.linkedin.com/in/abhipsita-das-5b7069212/?originalSubdomain=in\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>Abhipsita Das</strong></a></em></em> <em>for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->\n\n"
}