{
    "dislikes": 3,
    "video": "YbY8cVwWAvw",
    "publishedOn": "Sun Mar 24 2024 22:11:47 GMT+0530 (India Standard Time)",
    "slug": "floyd-warshall-algorithm-g-42",
    "aid": "2161",
    "title": "Floyd Warshall Algorithm: G-42",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/floyd-warshall-algorithm",
    "topics": [
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "graph",
            "topic-title": "Graph"
        }
    ],
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement:</strong> The problem is to find the shortest distances between every pair of vertices in a given edge-weighted directed graph. The graph is represented as an adjacency matrix of size n*n. Matrix[i][j] denotes the weight of the edge from i to j. If Matrix[i][j]=-1, it means there is no edge from i to j.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Do it in place.</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Example 1</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<pre><b>Input Format:</b> \nmatrix[][] = { {0, 2, -1, -1},\n        {1, 0, 3, -1},{-1, -1, 0, -1},{3, 5, 4, 0} }\n\n<b>Result:</b>\n0 2 5 -1 \n1 0 3 -1 \n-1 -1 0 -1 \n3 5 4 0 \n<strong>Explanation</strong>: In this example, the final matrix \nis storing the shortest distances. For example, matrix[i][j] is \nstoring the shortest distance from node i to j.\n</pre>\n<!-- /wp:html -->\n\n<!-- wp:paragraph -->\n<p><strong>Example 2</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<pre><b>Input Format</b>: \nmatrix[][] = {{0,25},\n              {-1,0}}\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2022/11/image-6.png\" alt=\"\" class=\"wp-image-6957\"></figure>\n<b>Result:</b>   \n0 25  \n-1 0\ufeff\n<b>Explanation:</b> In this example, the shortest distance \nis already given (if it exists).\n</pre>\n<!-- /wp:html -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Solution</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong><em>Disclaimer</em></strong>: <em>Don't jump directly to the solution, try it out yourself first. </em><a href=\"https://practice.geeksforgeeks.org/problems/implementing-floyd-warshall2042/1?utm_source=youtube&amp;utm_medium=collab_striver_ytdescription&amp;utm_campaign=implementing-floyd-warshall\"><em>Problem link</em></a><em>.</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Solution:</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In this article, we will be discussing Floyd Warshall Algorithm which is very much different from the two which we have previously learned: Dijkstra's Shortest Path algorithm and the Bellman-Ford algorithm.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Dijkstra's Shortest Path algorithm and Bellman-Ford algorithm are <strong><em>single-source shortest path algorithms</em></strong> where we are given a single source node and are asked to find out the shortest path to every other node from that given source. But in the Floyd Warshall algorithm, we need to figure out the shortest distance from each node to every other node.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Basically, the Floyd Warshall algorithm is a <strong><em>multi-source shortest path algorithm</em></strong> and it <strong><em>helps</em></strong> <strong><em>to detect negative cycles as well</em></strong>. The <strong><em>shortest path</em></strong> between node u and v necessarily means the path(from u to v) for which the sum of the edge weights is minimum.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In Floyd Warshall's algorithm, we need to check every possible path going via each possible node. And after checking every possible path, we will figure out the shortest path(a kind of brute force approach to find the shortest path). Let\u2019s understand it using the following illustration:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":6958,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2022/11/Screenshot-2022-11-23-175537.png\" alt=\"\" class=\"wp-image-6958\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>From the above example we can derive the following formula:<br><strong>matrix[i][j] =min(matrix[i][j], matrix[i ][k]+matrix[k][j]), where i = source node, j = destination node, and k = the node via which we are reaching from i to j.</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Here we will calculate dist[i][j] for every possible node k (k = 0, 1\u2026.V, where V = no. of nodes), and will select the minimum value as our result.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In order to apply this algorithm to an undirected graph, we just need to convert the undirected edges into directed edges like the following:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":6959,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2022/11/Screenshot-2022-11-23-175701.png\" alt=\"\" class=\"wp-image-6959\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>Explanation:</strong> An undirected edge between nodes u and v necessarily means that there are two opposite-directed edges, one towards node u and the other towards node v. So the above conversion is valid.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Note:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>&nbsp;</strong><em>Until now, to store a graph we have used the adjacency list. But in this algorithm, we are going to use the </em><strong><em>adjacency matrix</em></strong><em> method.&nbsp;</em></li><li><em>One additional point to remember is that the cost of reaching a node from itself must always be 0 i.e. </em><em>dist[i][i] = 0, where i = current node.</em></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong><br></strong><strong>Intuition:</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>&nbsp;</strong><em>The intuition is to check all possible paths between every possible pair of nodes and to choose the shortest one. Checking all possible paths means going via each and every possible node.&nbsp;&nbsp;</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>The follow-up questions for interviews:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong><em>How to detect a negative cycle using the Floyd Warshall algorithm?</em></strong></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>Negative Cycle: </em></strong><em>A cycle is called a negative cycle if the sum of all its weights becomes negative. The following illustration is an example of a negative cycle:</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":6960,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2022/11/Screenshot-2022-11-23-175903.png\" alt=\"\" class=\"wp-image-6960\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:list -->\n<ul><li><em>We have previously said that the cost of reaching a node from itself must be 0. But in the above graph, if we try to reach node 0 from itself we can follow the path: 0-&gt;1-&gt;2-&gt;0. In this case, the cost to reach node 0 from itself becomes -3 which is less than 0. This is only possible if the graph contains a negative cycle.</em></li><li><em>So, if we find that the cost of reaching any node from itself is less than 0, we can conclude that the graph has a negative cycle.</em></li><li><strong><em>What will happen if we will apply Dijkstra\u2019s algorithm for this purpose?</em></strong><ul><li><strong><em>If the graph has a negative cycle:</em></strong><em> We cannot apply Dijkstra\u2019s algorithm to the graph which contains a negative cycle. It will give TLE error in that case.</em><em><br></em></li><li><strong><em>If the graph does not contain a negative cycle: </em></strong><em>In this case, we will apply Dijkstra\u2019s algorithm for every possible node to make it work like a multi-source shortest path algorithm like Floyd Warshall. The time complexity of </em><strong><em>Floyd Warshall is O(V</em></strong><strong><em><sup>3</sup></em></strong><strong><em>)</em></strong><em>(Which we will discuss later in this article) whereas if we apply </em><strong><em>Dijkstra\u2019s algorithm </em></strong><em>for the same purpose the time complexity reduces to </em><strong><em>O(V*(E*logV))</em></strong><em> (where v = no. of vertices).&nbsp;</em></li></ul></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Approach</strong>:&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The algorithm is not much intuitive as the other ones\u2019. It is more of a brute force, where all combinations of paths have been tried to get the shortest paths. Nothing to panic much with the intuition, it is a simple brute force approach on all paths. Focus on the three<em> \u2018for\u2019</em> loops.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Formula:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>matrix[i][j] =min(matrix[i][j], matrix[i ][k]+matrix[k][j]), where i = source node,</strong><strong><br></strong><strong> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; j = destination node and k = the node via which we are reaching from i to j.</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The algorithm steps are as follows:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Initial Configuration:&nbsp;</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Adjacency Matrix: </strong>The adjacency matrix should store the edge weights for the given edges and the rest of the cells must be initialized with infinity().</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li>After having set the adjacency matrix accordingly, we will run a loop from 0 to V-1(V = no. of vertices). In the k<sup>th</sup> iteration, this loop will help us to check the path via node k for every possible pair of nodes. Basically, this loop will change the value of k in the formula.</li><li>Inside the loop, there will be two nested loops for generating every possible pair of nodes(Nothing but to visit each cell of a 2D matrix using the nested loop). Among these two loops, the first loop will change the value of i and the second one will change the value of j in the formula.</li><li>Inside these nested loops, we will apply the above formula to calculate the shortest distance between the pair of nodes.</li><li>Finally, the adjacency matrix will store all the shortest paths. For example, matrix[i][j] will store the shortest path from node i to node j.</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>If we want to check for a negative cycle:</strong><strong><br></strong>After completing the steps(outside those three loops), we will run a loop and check if any cell having the row and column the same(i = j) contains a value less than 0.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Note</strong>: <em>If you wish to see the dry run of the above approach, you can watch the video attached to this article.</em><strong><br>Code</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    \n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\n\nclass Solution {\npublic:\n\tvoid shortest_distance(vector&lt;vector&lt;int&gt;&gt;&amp;matrix) {\n\t\tint n = matrix.size();\n\t\tfor (int i = 0; i &lt; n; i++) {\n\t\t\tfor (int j = 0; j &lt; n; j++) {\n\t\t\t\tif (matrix[i][j] == -1) {\n\t\t\t\t\tmatrix[i][j] = 1e9;\n\t\t\t\t}\n\t\t\t\tif (i == j) matrix[i][j] = 0;\n\t\t\t}\n\t\t}\n\n\t\tfor (int k = 0; k &lt; n; k++) {\n\t\t\tfor (int i = 0; i &lt; n; i++) {\n\t\t\t\tfor (int j = 0; j &lt; n; j++) {\n\t\t\t\t\tmatrix[i][j] = min(matrix[i][j],\n\t\t\t\t\t                   matrix[i][k] + matrix[k][j]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\n\n\t\tfor (int i = 0; i &lt; n; i++) {\n\t\t\tfor (int j = 0; j &lt; n; j++) {\n\t\t\t\tif (matrix[i][j] == 1e9) {\n\t\t\t\t\tmatrix[i][j] = -1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n\nint main() {\n\n\tint V = 4;\n\tvector&lt;vector&lt;int&gt;&gt; matrix(V, vector&lt;int&gt;(V, -1));\n\tmatrix[0][1] = 2;\n\tmatrix[1][0] = 1;\n\tmatrix[1][2] = 3;\n\tmatrix[3][0] = 3;\n\tmatrix[3][1] = 5;\n\tmatrix[3][2] = 4;\n\n\tSolution obj;\n\tobj.shortest_distance(matrix);\n\n\tfor (auto row : matrix) {\n\t\tfor (auto cell : row) {\n\t\t\tcout &lt;&lt; cell &lt;&lt; \" \";\n\t\t}\n\t\tcout &lt;&lt; endl;\n\t}\n\n\treturn 0;\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>0 2 5 -1<br>1 0 3 -1<br>-1 -1 0 -1<br>3 5 4 0</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O(V<sup>3</sup>), as we have three nested loops each running for V times, where V = no. of vertices.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(V<sup>2</sup>), where V = no. of vertices. This space complexity is due to storing the adjacency matrix of the given graph.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\n\n\n//User function template for JAVA\n\nclass Solution {\n    public void shortest_distance(int[][] matrix) {\n        int n = matrix.length;\n        for (int i = 0; i &lt; n; i++) {\n            for (int j = 0; j &lt; n; j++) {\n                if (matrix[i][j] == -1) {\n                    matrix[i][j] = (int)(1e9);\n                }\n                if (i == j) matrix[i][j] = 0;\n            }\n        }\n\n        for (int k = 0; k &lt; n; k++) {\n            for (int i = 0; i &lt; n; i++) {\n                for (int j = 0; j &lt; n; j++) {\n                    matrix[i][j] = Math.min(matrix[i][j],\n                                            matrix[i][k] + matrix[k][j]);\n                }\n            }\n        }\n\n        for (int i = 0; i &lt; n; i++) {\n            for (int j = 0; j &lt; n; j++) {\n                if (matrix[i][j] == (int)(1e9)) {\n                    matrix[i][j] = -1;\n                }\n            }\n        }\n    }\n}\n\npublic class tUf {\n    public static void main(String[] args) {\n        int V = 4;\n        int[][] matrix = new int[V][V];\n\n        for (int i = 0; i &lt; V; i++) {\n            for (int j = 0; j &lt; V; j++) {\n                matrix[i][j] = -1;\n            }\n        }\n\n        matrix[0][1] = 2;\n        matrix[1][0] = 1;\n        matrix[1][2] = 3;\n        matrix[3][0] = 3;\n        matrix[3][1] = 5;\n        matrix[3][2] = 4;\n\n        Solution obj = new Solution();\n        obj.shortest_distance(matrix);\n\n        for (int i = 0; i &lt; V; i++) {\n            for (int j = 0; j &lt; V; j++) {\n                System.out.print(matrix[i][j] + \" \");\n            }\n            System.out.println(\"\");\n        }\n    }\n} \n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>0 2 5 -1<br>1 0 3 -1<br>-1 -1 0 -1<br>3 5 4 0</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O(V<sup>3</sup>), as we have three nested loops each running for V times, where V = no. of vertices.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(V<sup>2</sup>), where V = no. of vertices. This space complexity is due to storing the adjacency matrix of the given graph.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;<strong><a href=\"https://www.linkedin.com/in/kriti39/\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>KRITIDIPTA GHOSH</strong></a></strong>&nbsp;for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a>.&nbsp;<em>If you want to suggest any improvement/correction in this article please mail us at&nbsp;write4tuf@gmail.com</em></p></blockquote>\n<!-- /wp:quote -->",
    "category_tag": "data-structure",
    "likes": 83,
    "preview": "Problem Statement: The problem is to find the shortest distances between every pair of vertices in a given edge-weighted directed graph. The graph is represented as an adjacency matrix of size n*n...."
}