{
    "dislikes": 22,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:09:40 GMT+0530 (India Standard Time)",
    "slug": "find-gcd-of-two-numbers",
    "aid": "1550",
    "title": "Find GCD of two numbers",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/gcd-of-two-numbers",
    "topics": [
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "maths",
            "topic-title": "Maths"
        }
    ],
    "content": "<p><strong>Problem Statement: </strong>  Given two integers N1 and N2, find their greatest common divisor.</p>\n<p>\nThe Greatest Common Divisor of any two integers is the largest number that divides both integers.\n</p>\n\n\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n    <details class=\"article_example_details\">\n        <summary class=\"article_example_summary\">\n            <span><strong>\n                    Examples\n                </strong>\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"atricle_example_content\">\n            <pre class=\"wp-block-preformatted\">\n                <span><strong>Example 1:</strong></span>\n                <span><strong>Input:</strong>N1 = 9, N2 = 12\n                </span>\n                \n                <span><strong>Output:</strong>3</span>\n                <span><strong>Explanation:</strong>Factors of 9: 1, 3 and 9</span>\n                <span>Factors of 12: 1, 2, 3, 4, 6, 12</span>\n                <span>Common Factors: 1, 3 out of which 3 is the greatest hence it is the GCD.</span>\n\n\n</span>\n                                \n                <span><strong>Example 2:</strong></span>\n                <span><strong>Input:</strong>N1 = 20, N2 = 15\n                </span>\n                \n                <span><strong>Output: </strong>5</span>\n                <span><strong>Explanation:</strong>Factors of 20: 1, 2, 4, 5</span>\n                <span>Factors of 15: 1, 3, 5</span>\n                <span>Common Factors: 1, 5 out of which 5 is the greatest hence it is the GCD.</span>\n                \n                \n\n            </pre>\n        </div>\n    </details>\n</div>\n\n\n<!-- This is Practice Section\n<div class=\"practice\">\n    <span><strong>Practice: </strong></span>\n    <div class=\"problem-buttons\">\n\n        \n        <a href=\"https://www.codingninjas.com/studio/problems/predecessor-and-successor-in-bst_893049?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf\" target=\"_blank\" rel=\"noopener\">\n            <span>Solve Problem</span>\n            <img src=\"https://takeuforward-content-images.s3.ap-south-1.amazonaws.com/content/Group-11-5-pFOq-8ga\" alt=\"code-studio\">\n        </a>\n    </div>\n    \n</div>-->\n\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\n        yourself first. </em></p>\n\n\n<!-- This is Approaches Drop-Down -->\n<div class=\"dsa_article_dropdown_approachs \">\n    <!-- Approach - 1 Starts from here -->\n    <div id=\"brute-force-approach\">\n        <details>\n            <summary class=\"main-summary\">\n                <span>\n                    Brute Force Approach\n                </span>\n                <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                    <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                    </path>\n                </svg>\n            </summary>\n            <div class=\"common-drops\">\n                <details class=\"secondary-details\" open=\"\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Algorithm / Intuition\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <div class=\"approach-algorithm\">\n                    <p>The GCD of two numbers is the largest number that divides both of them without leaving a remainder. We iterate through all numbers from 1 up to the minimum of the two input numbers, checking if each number is a common factor of both input numbers.</p>\n                    <p>If a number is a common factor, we update our gcd variable to that number. This process continues until we have iterated through all possible common factors. Finally, we return the gcd variable, which will hold the greatest common divisor of the two input numbers.</p>\n                    \n                    <h4>Algorithm: </h4>\n                    <p><strong>Step 1: </strong>Initialise a variable gcd to 1. This variable will store the greatest common divisor of the input numbers n1 and n2.</p>\n                    \n                    <p><strong>Step 2: </strong> Iterate from 1 to the minimum of n1 and n2.\n                    <ol><li>We start from 1 because the GCD of any two numbers is at least 1, and it cannot be greater than the smaller of the two numbers.</li></ol></p>\n                    \n                    <p><strong>Step 3: </strong>At each iteration, if i is a common factor of both n1 and n2 update the gcd variable to i. We keep updating gcd as long as we find common factors.</p>\n                    <p><strong>Step 4: </strong> After the iteration, the gcd variable will store the greatest common divisor of n1 and n2. Return this value as the output of the function.</p>\n                    </div>\n                </details>\n                <details class=\"code-section secondary-details\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Code\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <div class=\"code-tabs\">\n                        <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n                        <button class=\"code-tab\" data-lang=\"java\">Java</button>\n                        <button class=\"code-tab\" data-lang=\"python\">Python</button>\n                        <button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n\n                        <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\"\n                            xmlns=\"http://www.w3.org/2000/svg\">\n                            <path\n                                d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n                            </path>\n                        </svg>\n                    </div>\n                    <div class=\"code-content\">\n                        <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n                            <pre class=\"wp-block-code\">\n                                <code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n\nusing namespace std;\n\nint findGcd(int n1, int n2) {\n    // Initialize gcd to 1\n    int gcd = 1;\n\n    // Iterate from 1 up to\n    // the minimum of n1 and n2\n    for(int i = 1; i &lt;= min(n1, n2); i++) {\n        // Check if i is a common\n        // factor of both n1 and n2\n        if(n1 % i == 0 &amp;&amp; n2 % i == 0) {\n            // Update gcd to the\n            // current common factor i\n            gcd = i;\n        }\n    }\n\n    // Return the greatest\n    // common divisor (gcd)\n    return gcd;\n}\n\n\nint main() {\n    int n1 = 20, n2 = 15;\n    \n    // Find the GCD of n1 and n2\n    int gcd = findGcd(n1, n2);\n\n    cout &lt;&lt; &quot;GCD of &quot; &lt;&lt; n1 &lt;&lt; &quot; and &quot; &lt;&lt; n2 &lt;&lt; &quot; is: &quot; &lt;&lt; gcd &lt;&lt; endl;\n\n    return 0;\n}\n                                </code>\n                            </pre>\n                        </div>\n                        <div class=\"code-block \" data-lang=\"java\">\n                            <pre class=\"wp-block-code\">\n                                <code lang=\"java\" class=\"language-java\">\npublic class Main {\n    public static int findGcd(int n1, int n2) {\n        // Initialize gcd to 1\n        int gcd = 1;\n\n        // Iterate from 1 up to\n        // the minimum of n1 and n2\n        for (int i = 1; i &lt;= Math.min(n1, n2); i++) {\n            // Check if i is a common\n            // factor of both n1 and n2\n            if (n1 % i == 0 &amp;&amp; n2 % i == 0) {\n                // Update gcd to the\n                // current common factor i\n                gcd = i;\n            }\n        }\n\n        // Return the greatest\n        // common divisor (gcd)\n        return gcd;\n    }\n\n    public static void main(String[] args) {\n        int n1 = 20, n2 = 15;\n\n        // Find the GCD of n1 and n2\n        int gcd = findGcd(n1, n2);\n\n        System.out.println(&quot;GCD of &quot; + n1 + &quot; and &quot; + n2 + &quot; is: &quot; + gcd);\n    }\n}\n                                </code>\n                            </pre>\n                        </div>\n                        <div class=\"code-block\" data-lang=\"python\">\n                            <pre class=\"wp-block-code\">\n                                <code lang=\"python\" class=\"language-python\">\ndef find_gcd(n1, n2):\n    # Initialize gcd to 1\n    gcd = 1\n\n    # Iterate from 1 up to\n    # the minimum of n1 and n2\n    for i in range(1, min(n1, n2) + 1):\n        # Check if i is a common\n        # factor of both n1 and n2\n        if n1 % i == 0 and n2 % i == 0:\n            # Update gcd to the\n            # current common factor i\n            gcd = i\n\n    # Return the greatest\n    # common divisor (gcd)\n    return gcd\n\nif __name__ == &quot;__main__&quot;:\n    n1, n2 = 20, 15\n    \n    # Find the GCD of n1 and n2\n    gcd = find_gcd(n1, n2)\n\n    print(&quot;GCD of&quot;, n1, &quot;and&quot;, n2, &quot;is:&quot;, gcd)\n    \n                                </code>\n                            </pre>\n                        </div>\n                        <div class=\"code-block\" data-lang=\"javascript\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"javascript\" class=\"language-javascript\">\nfunction findGcd(n1, n2) {\n    // Initialize gcd to 1\n    let gcd = 1;\n\n    // Iterate from 1 up to\n    // the minimum of n1 and n2\n    for (let i = 1; i &lt;= Math.min(n1, n2); i++) {\n        // Check if i is a common\n        // factor of both n1 and n2\n        if (n1 % i === 0 &amp;&amp; n2 % i === 0) {\n            // Update gcd to the\n            // current common factor i\n            gcd = i;\n        }\n    }\n\n    // Return the greatest\n    // common divisor (gcd)\n    return gcd;\n}\n\n// Main function\nfunction main() {\n    let n1 = 20, n2 = 15;\n    \n    // Find the GCD of n1 and n2\n    let gcd = findGcd(n1, n2);\n\n    console.log(&quot;GCD of &quot; + n1 + &quot; and &quot; + n2 + &quot; is: &quot; + gcd);\n}\n\n// Call the main function\nmain();\n\n\n                            </code>\n                        </pre>\n                      </div>\n                        <p>\n                           <strong>Output</strong> GCD of 20 and 15 is: 5 </p>\n                    </div>\n                </details>\n                <details class=\"secondary-details\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Complexity Analysis\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <p>\n                        <p><strong>Time Complexity:  O(min(N<sub>1</sub>, N<sub>2</sub>))</strong>  where N1 and N2 is the input number. The algorithm iterates from 1 to the minimum of N1 and N2 and each iteration checks whether both the numbers are divisible by the current number (constant time operations).</p>\n                        <p><strong>Space Complexity: O(1)</strong>as the space complexity remains constant and independent of the input size. Only a fixed amount of memory is required to store the integer variables.</p>\n                    </p>\n                </details>\n            </div>\n        </details>\n    </div>\n    <!-- Approach -1 Ends here -->\n\n\n    <!-- Approach - 2 Starts from here -->\n\n    <div id=\"better-approach\">\n        <details>\n            <summary class=\"main-summary\">\n                <span>\n                    Better Approach\n                </span>\n                <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                    <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                    </path>\n                </svg>\n            </summary>\n            <div class=\"common-drops\">\n                <details class=\"secondary-details\" open=\"\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Algorithm / Intuition\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <div class=\"approach-algorithm\">\n                    <p>We can optimise the time complexity of the previous approach. In the worst case, the loop iterates from 1 up to the minimum of N1 and N2. This could potentially result in a large number of iterations, especially when one input number is significantly larger than the other.</p>\n                    <p>If we iterate from the minimum of N1 and N2 down to 1, we reduce the number of iterations because we start from the potentially largest common factor and work downwards.</p>\n                    <p>The time complexity of this approach remains O(min(N1, N2)) but in practice, it will execute fewer iterations on average.</p>\n                    \n\n                    <h4>Algorithm: </h4>\n                    <p><strong>Step 1: </strong>Iterate from the minimum of n1 and n2 because the greatest common divisor of two numbers cannot exceed the smaller number. </p>\n                    \n                    <p><strong>Step 2: </strong> For each i in the iteration, we check if it is a common factor of both n1 and n2.\n                    <ol><li>If a common factor i is found, we return it as the gcd as we are iterating from the largest potential gcd to 1, the first common factor we encounter will be the greatest common divisor.</li></ol></p>\n                    \n                    <p><strong>Step 3: </strong>  If the loop completes without finding any common factors we return 1. This is because 1 is always a divisor of any number any number hence is also the GCD of any pair of numbers where no other common factors exist.</p>\n                    </div>\n                </details>\n                <details class=\"code-section secondary-details\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Code\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <div class=\"code-tabs\">\n                        <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n                        <button class=\"code-tab\" data-lang=\"java\">Java</button>\n                        <button class=\"code-tab\" data-lang=\"python\">Python</button>\n                        <button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n\n                        <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\"\n                            xmlns=\"http://www.w3.org/2000/svg\">\n                            <path\n                                d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n                            </path>\n                        </svg>\n                    </div>\n                    <div class=\"code-content\">\n                        <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n                            <pre class=\"wp-block-code\">\n                                <code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n\nusing namespace std;\n\nint findGcd(int n1, int n2) {\n    // Iterate from the minimum of\n    // n1 and n2 down to 1\n    // Start from the minimum of n1 and n2\n    // because the GCD cannot\n    // exceed the smaller number\n    \n    for(int i = min(n1, n2); i &gt; 0; i--) {\n        // Check if i is a common\n        // factor of both n1 and n2\n        if(n1 % i == 0 &amp;&amp; n2 % i == 0) {\n            // If i is a common factor,\n            // return it as the GCD\n            return i;\n        }\n    }\n    // If no common factors are found,\n    // return 1 (as 1 is always a\n    // divisor of any number)\n    return 1;\n}\n\n\nint main() {\n    int n1 = 20, n2 = 15;\n    \n    // Find the GCD of n1 and n2\n    int gcd = findGcd(n1, n2);\n\n    cout &lt;&lt; &quot;GCD of &quot; &lt;&lt; n1 &lt;&lt; &quot; and &quot; &lt;&lt; n2 &lt;&lt; &quot; is: &quot; &lt;&lt; gcd &lt;&lt; endl;\n\n    return 0;\n}\n\n\n                                </code>\n                            </pre>\n                        </div>\n                        <div class=\"code-block \" data-lang=\"java\">\n                            <pre class=\"wp-block-code\">\n                                <code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\npublic class Main {\n    public static int findGcd(int n1, int n2) {\n        // Iterate from the minimum of\n        // n1 and n2 down to 1\n        // Start from the minimum of n1 and n2\n        // because the GCD cannot\n        // exceed the smaller number\n        \n        for (int i = Math.min(n1, n2); i &amp;gt; 0; i--) {\n            // Check if i is a common\n            // factor of both n1 and n2\n            if (n1 % i == 0 &amp;amp;&amp;amp; n2 % i == 0) {\n                // If i is a common factor,\n                // return it as the GCD\n                return i;\n            }\n        }\n        // If no common factors are found,\n        // return 1 (as 1 is always a\n        // divisor of any number)\n        return 1;\n    }\n\n    public static void main(String[] args) {\n        int n1 = 20, n2 = 15;\n        \n        // Find the GCD of n1 and n2\n        int gcd = findGcd(n1, n2);\n\n        System.out.println(&amp;quot;GCD of &amp;quot; + n1 + &amp;quot; and &amp;quot; + n2 + &amp;quot; is: &amp;quot; + gcd);\n    }\n}\n    \n                                </code>\n                            </pre>\n                        </div>\n                        <div class=\"code-block\" data-lang=\"python\">\n                            <pre class=\"wp-block-code\">\n                                <code lang=\"python\" class=\"language-python\">\ndef findGcd(n1, n2):\n    # Iterate from the minimum of\n    # n1 and n2 down to 1\n    # Start from the minimum of n1 and n2\n    # because the GCD cannot\n    # exceed the smaller number\n    \n    for i in range(min(n1, n2), 0, -1):\n        # Check if i is a common\n        # factor of both n1 and n2\n        if n1 % i == 0 and n2 % i == 0:\n            # If i is a common factor,\n            # return it as the GCD\n            return i\n    # If no common factors are found,\n    # return 1 (as 1 is always a\n    # divisor of any number)\n    return 1\n\n\ndef main():\n    n1 = 20\n    n2 = 15\n    \n    # Find the GCD of n1 and n2\n    gcd = findGcd(n1, n2)\n\n    print(&quot;GCD of&quot;, n1, &quot;and&quot;, n2, &quot;is:&quot;, gcd)\n\n\nif __name__ == &quot;__main__&quot;:\n    main()\n    \n                                </code>\n                            </pre>\n                        </div>\n                        <div class=\"code-block\" data-lang=\"javascript\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"javascript\" class=\"language-javascript\">\nfunction findGcd(n1, n2) {\n    // Iterate from the minimum of\n    // n1 and n2 down to 1\n    // Start from the minimum of n1 and n2\n    // because the GCD cannot\n    // exceed the smaller number\n    for (let i = Math.min(n1, n2); i &gt; 0; i--) {\n        // Check if i is a common\n        // factor of both n1 and n2\n        if (n1 % i === 0 &amp;&amp; n2 % i === 0) {\n            // If i is a common factor,\n            // return it as the GCD\n            return i;\n        }\n    }\n    // If no common factors are found,\n    // return 1 (as 1 is always a\n    // divisor of any number)\n    return 1;\n}\n\nlet n1 = 20, n2 = 15;\n\n// Find the GCD of n1 and n2\nlet gcd = findGcd(n1, n2);\n\nconsole.log(&quot;GCD of &quot; + n1 + &quot; and &quot; + n2 + &quot; is: &quot; + gcd);\n\n                            </code>\n                        </pre>\n                        </div>\n                        <p>\n                            <strong>Output</strong> GCD of 20 and 15 is: 5</p>\n                    </div>\n                </details>\n                 <details class=\"secondary-details\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Complexity Analysis\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <p>\n                        <p><strong>Time Complexity:  O(min(N<sub>1</sub>, N<sub>2</sub>))</strong>   where N1 and N2 is the input number. The algorithm iterates from the minimum of N1 and N2 to 1 and each iteration checks whether both the numbers are divisible by the current number (constant time operations).</p>\n\n                        <p><strong>Space Complexity: O(1)</strong> as the space complexity remains constant and independent of the input size. Only a fixed amount of memory is required to store the integer variables.</p>\n\n\n                    </p>\n                </details>\n            </div>\n        </details>\n    </div>\n    <!-- Approach - 2 Ends from here -->\n\n\n    <!-- Approach - 3 Starts from here -->\n\n    <div id=\"optimal-approach\">\n        <details>\n            <summary class=\"main-summary\">\n                <span>\n                    Optimal Approach\n                </span>\n                <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                    <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                    </path>\n                </svg>\n            </summary>\n            <div class=\"common-drops\">\n                <details class=\"secondary-details\" open=\"\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Algorithm / Intuition\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <div class=\"approach-algorithm\">\n                    <p>The Euclidean Algorithm is a method for finding the greatest common divisor of two numbers. It operates on the principle that the GCD of two numbers remains the same even if the smaller number is subtracted from the larger number.</p>\n                    <p>To find the GCD of n1 and n2 where n1 > n2:\n                    <ol><li>Repeatedly subtract the smaller number from the larger number until one of them becomes 0.</li><li>Once one of them becomes 0, the other number is the GCD of the original numbers.</li></ol>\n                    <p> Eg, n1 = 20, n2 = 15:</p>\n                    <p>gcd(20, 15) = gcd(20-15, 15) = gcd(5, 15)</p>\n                    <p>gcd(5, 15) = gcd(15-5, 5) = gcd(10, 5)</p>\n                    <p>gcd(10, 5) = gcd(10-5, 5) = gcd(5, 5)</p>\n                    <p>gcd(5, 5) = gcd(5-5, 5) = gcd(0, 5)</p>\n                    <p>Hence, return 5 as the gcd.</p>\n\n                    \n                    </div>\n                </details>\n                <details class=\"code-section secondary-details\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Code\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <div class=\"code-tabs\">\n                        <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n                        <button class=\"code-tab\" data-lang=\"java\">Java</button>\n                        <button class=\"code-tab\" data-lang=\"python\">Python</button>\n                        <button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n                        <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\"\n                            xmlns=\"http://www.w3.org/2000/svg\">\n                            <path\n                                d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n                            </path>\n                        </svg>\n                    </div>\n                    <div class=\"code-content\">\n                        <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n                            <pre class=\"wp-block-code\">\n                                <code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n\nusing namespace std;\n\nint findGcd(int a, int b) {\n    // Continue loop as long as both\n    // a and b are greater than 0\n    while(a &gt; 0 &amp;&amp; b &gt; 0) {\n        // If a is greater than b,\n        // subtract b from a and update a\n        if(a &gt; b) {\n             // Update a to the remainder\n             // of a divided by b\n            a = a % b;\n        }\n        // If b is greater than or equal\n        // to a, subtract a from b and update b\n        else {\n            // Update b to the remainder\n            // of b divided by a\n            b = b % a; \n        }\n    }\n    // Check if a becomes 0,\n    // if so, return b as the GCD\n    if(a == 0) {\n        return b;\n    }\n    // If a is not 0,\n    // return a as the GCD\n    return a;\n}\n\n\n\n\nint main() {\n    int n1 = 20, n2 = 15;\n    \n    // Find the GCD of n1 and n2\n    int gcd = findGcd(n1, n2);\n\n    cout &lt;&lt; &quot;GCD of &quot; &lt;&lt; n1 &lt;&lt; &quot; and &quot; &lt;&lt; n2 &lt;&lt; &quot; is: &quot; &lt;&lt; gcd &lt;&lt; endl;\n\n    return 0;\n}\n    \n                                </code>\n                            </pre>\n                        </div>\n                        <div class=\"code-block \" data-lang=\"java\">\n                            <pre class=\"wp-block-code\">\n                                <code lang=\"java\" class=\"language-java\">\npublic class Main {\n    // Continue loop as long as both\n    // a and b are greater than 0\n    public static int findGcd(int a, int b) {\n        while(a &gt; 0 &amp;&amp; b &gt; 0) {\n            // If a is greater than b,\n            // subtract b from a and update a\n            if(a &gt; b) {\n                // Update a to the remainder\n                // of a divided by b\n                a = a % b;\n            }\n            // If b is greater than or equal\n            // to a, subtract a from b and update b\n            else {\n                // Update b to the remainder\n                // of b divided by a\n                b = b % a;\n            }\n        }\n        // Check if a becomes 0,\n        // if so, return b as the GCD\n        if(a == 0) {\n            return b;\n        }\n        // If a is not 0,\n        // return a as the GCD\n        return a;\n    }\n\n    public static void main(String[] args) {\n        int n1 = 20, n2 = 15;\n\n        // Find the GCD of n1 and n2\n        int gcd = findGcd(n1, n2);\n\n        System.out.println(&quot;GCD of &quot; + n1 + &quot; and &quot; + n2 + &quot; is: &quot; + gcd);\n    }\n}\n    \n                                </code>\n                            </pre>\n                        </div>\n                        <div class=\"code-block\" data-lang=\"python\">\n                            <pre class=\"wp-block-code\">\n                                <code lang=\"python\" class=\"language-python\">\ndef find_gcd(a, b):\n    # Continue loop as long as both\n    # a and b are greater than 0\n    while a &gt; 0 and b &gt; 0:\n        # If a is greater than b,\n        # subtract b from a and update a\n        if a &gt; b:\n            # Update a to the remainder\n            # of a divided by b\n            a = a % b\n        # If b is greater than or equal\n        # to a, subtract a from b and update b\n        else:\n            # Update b to the remainder\n            # of b divided by a\n            b = b % a\n    # Check if a becomes 0,\n    # if so, return b as the GCD\n    if a == 0:\n        return b\n    # If a is not 0,\n    # return a as the GCD\n    return a\n\n\ndef main():\n    n1 = 20\n    n2 = 15\n\n    # Find the GCD of n1 and n2\n    gcd = find_gcd(n1, n2)\n\n    print(f&quot;GCD of {n1} and {n2} is: {gcd}&quot;)\n\n\nif __name__ == &quot;__main__&quot;:\n    main()\n    \n                                </code>\n                            </pre>\n                        </div>\n                        <div class=\"code-block\" data-lang=\"javascript\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"javascript\" class=\"language-javascript\">\nfunction findGcd(a, b) {\n    // Continue loop as long as both\n    // a and b are greater than 0\n    while (a &gt; 0 &amp;&amp; b &gt; 0) {\n        // If a is greater than b,\n        // subtract b from a and update a\n        if (a &gt; b) {\n            // Update a to the remainder\n            // of a divided by b\n            a = a % b;\n        }\n        // If b is greater than or equal\n        // to a, subtract a from b and update b\n        else {\n            // Update b to the remainder\n            // of b divided by a\n            b = b % a;\n        }\n    }\n    // Check if a becomes 0,\n    // if so, return b as the GCD\n    if (a === 0) {\n        return b;\n    }\n    // If a is not 0,\n    // return a as the GCD\n    return a;\n}\n\n// Set the values of n1 and n2\nlet n1 = 20, n2 = 15;\n\n// Find the GCD of n1 and n2\nlet gcd = findGcd(n1, n2);\n\n// Output the result\nconsole.log(&quot;GCD of&quot;, n1, &quot;and&quot;, n2, &quot;is:&quot;, gcd);\n\n                            </code>\n                        </pre>\n                    </div>\n                        <p>\n                            <strong>Output: </strong>GCD of 20 and 15 is: 5 </p>\n                    </div>\n                </details>\n                <details class=\"secondary-details\">\n                    <summary class=\"secondary-summary\">\n                        <span>\n                            Complexity Analysis\n                        </span>\n                        <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                            </path>\n                        </svg>\n                    </summary>\n                    <p>\n                        <p><strong>Time Complexity: O(min(N<sub>1</sub>, N<sub>2</sub>))</strong> where N1 and N2 is the input number. The algorithm iterates from the minimum of N1 and N2 to 1 and each iteration checks whether both the numbers are divisible by the current number (constant time operations). </p>\n                        <p><strong>Space Complexity: O(1)</strong> as the space complexity remains constant and independent of the input size. Only a fixed amount of memory is required to store the integer variable</p>\n                    </p>\n                </details>\n            </div>\n        </details>\n    </div>\n</div>\n\n\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n    <details>\n        <summary class=\"main-summary\">\n            <span>\n                Video Explanation\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"yt-video-wrapper\">\n           <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/1xNbjMdbjug?si=W7pJ_33A4CunxTPl\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n        </div>\n    </details>\n</div>\n\n<script src=\"https://takeuforward.org/UXApproachDropDowns/3ApproachJSScript.js\"></script>\n\n<blockquote class=\"wp-block-quote\">\n    Special thanks to <strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268\">Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,<strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\"> please check out this article</a></strong>\n</blockquote>\n\n\n<script>\n\n    const codeSections = document.querySelectorAll('.code-section');\n\n    // Get last selected language from localStorage or set default value\n    let lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp';\n\n    codeSections.forEach((section, sectionIndex) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n        const copyBtn = section.querySelector('.copy-btn');\n\n        codeTabs.forEach((tab) => {\n            tab.addEventListener('click', () => {\n                codeTabs.forEach((t) => {\n                    t.classList.remove('dsa_article_code_active');\n                });\n                tab.classList.add('dsa_article_code_active');\n\n                const lang = tab.dataset.lang;\n                const activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                codeBlocks.forEach((block) => {\n                    if (block === activeBlock) {\n                        block.classList.add('dsa_article_code_active');\n                    } else {\n                        block.classList.remove('dsa_article_code_active');\n                    }\n                });\n\n                // Update last selected language for all sections and store in localStorage\n                lastSelectedLanguage = lang;\n                localStorage.setItem('lastSelectedLanguage', lang);\n                codeSections.forEach((otherSection, otherIndex) => {\n                    if (otherIndex !== sectionIndex) {\n                        const otherTabs = otherSection.querySelectorAll('.code-tab');\n                        otherTabs.forEach((otherTab) => {\n                            if (otherTab.dataset.lang === lang) {\n                                otherTab.classList.add('dsa_article_code_active');\n                            } else {\n                                otherTab.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                        const otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                        const otherCodeBlocks = otherSection.querySelectorAll('.code-block');\n                        otherCodeBlocks.forEach((block) => {\n                            if (block === otherActiveBlock) {\n                                block.classList.add('dsa_article_code_active');\n                            } else {\n                                block.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                    }\n                });\n            });\n        });\n\n        // Handle copy button click event\n        copyBtn.addEventListener('click', () => {\n            const activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\n            navigator.clipboard.writeText(activeBlock.innerText);\n            copyBtn.classList.add('dsa_article_code_active');\n            setTimeout(() => {\n                copyBtn.classList.remove('dsa_article_code_active');\n            }, 1000);\n        });\n    });\n\n    // Set initial state of the tabs\n    codeSections.forEach((section) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n\n        codeTabs.forEach((tab) => {\n            if (tab.dataset.lang === lastSelectedLanguage) {\n                tab.classList.add('dsa_article_code_active');\n            } else {\n                tab.classList.remove('dsa_article_code_active');\n            }\n        });\n\n        codeBlocks.forEach((block) => {\n            if (block.dataset.lang === lastSelectedLanguage) {\n                block.classList.add('dsa_article_code_active');\n            } else {\n                block.classList.remove('dsa_article_code_active');\n            }\n        });\n    });\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>",
    "category_tag": "data-structure",
    "likes": 515,
    "preview": "Problem Statement: Given two integers N1 and N2, find their greatest common divisor. The Greatest Common Divisor of any two integers is the largest number that divides both integers. Examples Examp..."
}