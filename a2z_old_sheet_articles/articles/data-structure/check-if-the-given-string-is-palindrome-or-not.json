{
    "dislikes": 12,
    "video": "twuC1F6gLI8",
    "publishedOn": "Sun Mar 24 2024 22:09:43 GMT+0530 (India Standard Time)",
    "slug": "check-if-the-given-string-is-palindrome-or-not",
    "aid": "1566",
    "title": "Check if the given String is Palindrome or not",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/check-if-string-is-palindrome-or-not-",
    "topics": [
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "recursion",
            "topic-title": "Recursion"
        },
        {
            "topic-id": "string",
            "topic-title": "String"
        }
    ],
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement:</strong> \"Given a string, check if the string is palindrome or not.\"&nbsp; A string is said to be palindrome if the reverse of the string is the same as the string.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Examples:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\"><strong>Example 1:</strong>\n<strong>Input:</strong> Str =  \u201cABCDCBA\u201d\n<strong>Output:</strong> Palindrome\n<strong>Explanation:</strong> String when reversed is the same as string.\n\n<strong>Example 2:</strong>\n<strong>Input:</strong> Str = \u201cTAKE U FORWARD\u201d\n<strong>Output:</strong> Not Palindrome\n<strong>Explanation:</strong> String when reversed is not the same as string.</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Solution</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"textColor\":\"accent\"} -->\n<p class=\"has-accent-color has-text-color\"><strong><em>Disclaimer</em></strong>: <em>Don't jump directly to the solution, try it out yourself first.</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Approach</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Run a for loop till half the length of the string in order to check the first and last character of the string.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>And check if the first and last elements of the string are equal. And then move both pointers first pointer forward and last pointer backward.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Here we are achieving this with the help of \u2018i\u2019 which moves with them for a loop. First element can be get by str[i] and last element by str[str.length() - i - 1]). If this condition gets executed then it is not palindrome and returns false.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If the loop ends after traversing elements till half of the length then, it is Palindrome and returns false.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"624\" height=\"129\" src=\"https://lh3.googleusercontent.com/WjEhoZ8yTZv_aWThfdipAJNpco0cKELiJqzOT7p3YV_czEtPygyI5YfCtWChRgce9jTC1apwZp9d-ViMGgj7C-W3bVvs2V4NNk3rPe5TweWweW4ygktPyZHcDUN24k8vOB54Nr9s\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"624\" height=\"136\" src=\"https://lh5.googleusercontent.com/VIjNyAjm-9F_vlZacNTouIh40x-EWnUFE7PaKFjEfKhD82sKCGyNbOsk4WIYqQbtcRazKF-6gTNA3yAjShpuHWLoaLPuNCtuEOBsjedq6nQohJ-JjuL-_T4GxJ04yiSIXKKy9pLC\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include&lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\nbool isPalindrome(string s) {\n\n        int left = 0, right = s.length()-1;\n        while(left&lt;right)\n        {\n            if(!isalnum(s[left])) \n                left++;\n            else if(!isalnum(s[right])) \n                right--;\n            else if(tolower(s[left])!=tolower(s[right])) \n                return false;\n            else {\n                left++; \n                right--;\n            }\n        }\n        return true;\n\n}\nint main() {\n\n  string str = \"ABCDCBA\";\n  bool ans = isPalindrome(str);\n\n  if (ans == true) {\n    cout &lt;&lt; \"Palindrome\";\n  } else {\n    cout &lt;&lt; \"Not Palindrome\";\n  }\n  return 0;\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> Palindrome</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity:&nbsp; O(N)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(1)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.io.*;\nimport java.util.Arrays;\nclass Test {\n  static private boolean isPalindrome(String s) {\n    int left = 0, right = s.length()-1;\n        while(left&lt;right)\n        {\n            char l = s.charAt(left), r = s.charAt(right);\n            if(!Character.isLetterOrDigit(l)) \n                left++;\n            else if(!Character.isLetterOrDigit(r)) \n                right--;\n            else if(Character.toLowerCase(l)!=Character.toLowerCase(r)) \n                return false;\n            else {\n                left++; \n                right--;\n            }\n        }\n        return true;\n  }\n  public static void main(String[] args) {\n    String str = \"ABCDCBA\";\n    boolean ans = isPalindrome(str);\n\n    if (ans == true) {\n      System.out.println(\"Palindrome\");\n    } else {\n      System.out.println(\"Not Palindrome\");\n    }\n  }\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> Palindrome</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity:&nbsp; O(N)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(1)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block\" data-lang=\"python\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">def isPalindrome(s):\n    left = 0\n    right = len(s)-1\n    while left &lt; right:\n        if not s[left].isalnum():\n            left += 1\n        elif not s[right].isalnum():\n            right -= 1\n        elif s[left].lower() != s[right].lower():\n            return False\n        else:\n            left += 1\n            right -= 1\n    return True\n\n\n\nif __name__ == \"__main__\":\n    str = \"ABCDCBA\"\n    ans = isPalindrome(str)\n\n\n    if ans == True:\n        print(\"Palindrome\")\n    else:\n        print(\"Not Palindrome\")</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> Palindrome</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity:&nbsp; O(N)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(1)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Recursive Approach:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>In this approach, we check the string using functional recursion where firstly, the letters on the two ends of the string (start, end) are compared to see if they\u2019re the same or not.</li><li>If they\u2019re the same then we simply call recursion for the next elements (start+1, end-1) and so on until the start becomes greater than or equal to the end.&nbsp;</li><li>If at any point the start and the end differ, we return false stating that the string is not a palindrome.</li><li>Otherwise, if the base condition is reached, then the string is obviously a palindrome and we return true.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Let us understand it through a recursive code:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include &lt;iostream&gt;\nusing namespace std;\n\nbool palindrome(int i, string&amp; s){\n    \n    // Base Condition\n    // If i exceeds half of the string means all the elements \n    // are compared, we return true.\n    if(i&gt;=s.length()/2) return true;\n    \n    // If the start is not equal to the end, not the palindrome.\n    if(s[i]!=s[s.length()-i-1]) return false;\n    \n    // If both characters are the same, increment i and check start+1 and end-1.\n    return palindrome(i+1,s);\n}\n\nint main() {\n\t\n\t// Example string.\n\tstring s = \"madam\";\n\tcout&lt;&lt;palindrome(0,s);\n\tcout&lt;&lt;endl;\n\treturn 0;\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>True</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O(N) { Precisely, O(N/2) as we compare the elements N/2 times and swap them}.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity:</strong> O(1) { The elements of the given array are swapped in place so no extra space is required}.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">class Recursion {\n    \n    static boolean palindrome(int i, String s){\n        \n            // Base Condition\n            // If i exceeds half of the string, means all the elements \n            // are compared, we return true.\n            if(i&gt;=s.length()/2) return true;\n            \n            // If start is not equal to end, not palindrome.\n            if(s.charAt(i)!=s.charAt(s.length()-i-1)) return false;\n            \n            // If both characters are same, increment i and check start+1 and end-1.\n            return palindrome(i+1,s);\n            \n\n    }\n    public static void main(String[] args) {\n\n       // Example string.\n       String s = \"madam\";\n       System.out.println(palindrome(0,s));\n    }\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>True</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O(N) { Precisely, O(N/2) as we compare the elements N/2 times and swap them}.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity:</strong> O(1) { The elements of the given array are swapped in place so no extra space is required}.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;<strong><a href=\"https://www.linkedin.com/in/rushikeshadhav/\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>Rushikesh Adhav</strong></a></strong>&nbsp;and <strong><a href=\"https://www.linkedin.com/in/priyanshi-goel-7b6a42210/\" target=\"_blank\" rel=\"noopener\" title=\"\">Priyanshi Goel</a></strong></em> <em>for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->\n\n",
    "category_tag": "data-structure",
    "likes": 250,
    "preview": "Problem Statement: \"Given a string, check if the string is palindrome or not.\" A string is said to be palindrome if the reverse of the string is the same as the string. Examples: Example 1: Input:..."
}