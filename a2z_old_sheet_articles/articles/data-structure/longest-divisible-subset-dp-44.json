{
    "dislikes": 1,
    "video": "gDuZwBW9VvM",
    "publishedOn": "Sun Mar 24 2024 22:11:30 GMT+0530 (India Standard Time)",
    "slug": "longest-divisible-subset-dp-44",
    "aid": "2088",
    "title": "Longest Divisible Subset | (DP-44)",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/largest-divisible-subset",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "dynamic-programming",
            "topic-title": "Dynamic Programming"
        },
        {
            "topic-id": "recursion",
            "topic-title": "Recursion"
        }
    ],
    "content": "<!-- wp:paragraph -->\n<p><em><strong>Prerequisite</strong>: </em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><a href=\"https://takeuforward.org/data-structure/longest-increasing-subsequence-dp-41/\" target=\"_blank\" rel=\"noreferrer noopener\" title=\"Longest Increasing Subsequence\">Longest Increasing Subsequence</a></li><li><a href=\"https://takeuforward.org/data-structure/printing-longest-increasing-subsequence-dp-42/\" target=\"_blank\" rel=\"noreferrer noopener\" title=\"Printing longest increasing subsequence\">Printing longest increasing subsequence</a></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Problem Link: </strong><a href=\"https://www.codingninjas.com/codestudio/problems/divisible-set_3754960?source=youtube&amp;campaign=striver_dp_videos&amp;utm_source=youtube&amp;utm_medium=affiliate&amp;utm_campaign=striver_dp_videos\"><strong>Divisible Set</strong></a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Let us first understand the difference between subset and subsequence.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https://lh4.googleusercontent.com/CcjICS62cNUAA76cfKr8jJY3-wyKsQ0n10kn-tYhOWe23rYHVAoelzOUOjKrmNJBtLC9b_iqii5x74-OllOGGfF4wAeJZ2VwniFU-yGwCEeiTYbvzXuG0e2eGUnk14vaNMl0RTsVPjFHm-QqFdc\" alt=\"\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>In a subsequence, the elements need to follow the order of the original array whereas in a subset there is no constraint on the order of the elements.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Divisible Subset</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>A divisible subset is the one in which if we pick two elements i and j from the subset, then either arr[i]%arr[j] == 0 or arr[j] % arr[i] == 0. For example, [16,8,4] is a divisible subset.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https://lh6.googleusercontent.com/dKMYYr36wXVvzBelVKI7B8C6AbjBpXj2XeFYrrI5DdM1yeCF_6IN0VJNibs-P7S6zPNUEJrHake5pdqXWIhWDw1rbgw_T_LSbPmlfYDWo1W3BKPhU7lswUvQITxcpOfpS0QVOlRBJSbr1_1tLG0\" alt=\"\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Given an array with distinct elements, we need to print its longest divisible subset. We can print any answer.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https://lh6.googleusercontent.com/_Bvvi8L-YiG-qfRx5JwCuSsDkkWNJrnsnfn33Q6k0JTfK_llX8q3GqbRGF4KGcxybIHBUYjzKjwbGQPayGWC-mfl4GCutmjNuHDpfvx52dgXiSwiEpFnFAGZfaw4UHQ2K090rsJkYOAU5_viOwY\" alt=\"\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>Solution:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Intuition:&nbsp;</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>As here we are finding the subsets, we can change the order of the original array. Let us sort it out first.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https://lh5.googleusercontent.com/5eHqbslPM7UNs5_oDtC2LN8HtYqyv3ZdOgL22nLDoh7tFNl7G-EsXIDFpaazc-DPgKON4JGGRspXrMQ0Pyrt7Nxf7z7NctbaNiA0NR8jodRrZ7YB7yyzN14JdaNRTPgHaxRVvTiLUNjrT9OzLLM\" alt=\"\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Now, we can start thinking in terms of subsequences questions solved earlier.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Let us pick the first index element in an array (say temp) and move to the next index.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https://lh5.googleusercontent.com/0aUeEFHwQ-4tGJgxIot_qFiYErRvId21DngIEXNbI9JyqunDAUoeVi_cekyfw3XcWklLSvF7m_-5ru2Cs4XavCYue0-Nt9z3M0gE3GnhVLw7VfKdV0qiL-qnFSwvR3BuwpI13pQ00OnO7MbWFJA\" alt=\"\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Now, i = 1 and arr[i] = 4. We can again push this into the array as 4%1 == 0.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https://lh3.googleusercontent.com/4HtEwMxXpUhf3Za_CNYf_9hjgrOIYruVx1nE8ihsFcEPSKMv6fX-ppwBhrGvRUyjfeyLIk6rSL2PbDum9w7Jklqee4sVALk2SUz4g9A7caUz9rxaQ7V512zkjzy03bDP4GBKYmUbVo-_azNkq4c\" alt=\"\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>For i=2, arr[i] = 7. We can\u2019t push it in the temp array as 7%4 != 0 . Now, i = 3 and arr[i] = 8. We can again push this into the array as 8%4 == 0.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https://lh5.googleusercontent.com/PJjdMjoaShvNF9jDldlEaikPPHw59nVVdMHKmtDzsFVikrRTA5QLXVIPvR6NN7VxtOAEfo7OiSMFbN-eFqaZTLwmzsoERLCpR64mNecORoWJfE84hZRvNoKQYDw-Fc1rCjRlvJbgdWgl86vy0lE\" alt=\"\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Now as the elements in the temp array were sorted, we only checked that element 8 was divisible by the last element of the tamp array i.e 4. But we know that 4 is divisible by the first element of the temp array i.e 4%1 == 0. As the array is sorted and 8%4 == 0. And 4%1==0. We can automatically imply that 8%1==0. Hence this temp array formed is a <strong>divisible subsequence.</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Let us take another case to make it more clear.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>As i = 4, arr[i] = 16. Now 16 is divisible by the last element of the temp array which is 8, so we can push 16 into the temp array.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"https://lh6.googleusercontent.com/T6Ul6lLlQQ55Dw6OlEioOynMHJuLNZUYr9eAA3FsEu8A4-iiPW7wrX5OPAtnymik4OpZlCsgSeDn6UBfAcl5ZUe9_8i1uBSSF60AKlUuEb9OiOg52ToJpJbKX0rJZvrstQNc874XHKNiOcYxXOE\" alt=\"\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>To summarize:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>Whenever the current index element (arr[i]) is divisible by the last element of the temp array(say temp[last]), we can push that element to the temp array.</li><li>As the temp array formed will always be sorted, and arr[i] is divisible by the temp[last], we can say that arr[i] will be divisible by every element before the temp[last] of the temp array.</li><li>Therefore, this temp array will be a divisible subsequence and we just need to find the longest divisible subsequence of the array.&nbsp;</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Approach</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The algorithm approach is stated as follows:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>First of all sort the array,</li><li>Then find the longest divisible subsequence of the array.</li><li>In order to find the longest divisible subsequence, we will follow the algorithm used to find the longest increasing subsequence discussed in the/** link to dp-42 **/.</li><li>The distinguishing factor between longest increasing subsequence and longest divisible subsequence is that we used to insert the element if arr[i] &gt; arr[prev] but here we will insert the element when arr[i] % arr[prev] == 0.</li><li>At last return the hash array as the answer.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:image {\"width\":669,\"height\":363} -->\n<figure class=\"wp-block-image is-resized\"><img src=\"https://lh5.googleusercontent.com/0TPXe9tbJJF4LfwaZCbKUzx-R4mbcXkIwP749on-i4o8iuul7orpe68MtxusLUNwwlKjn2GVFYu7GfVMz_dERYztqm9K1ix3X2aqgq9otbKFuVPZNBojBy4rJrqNYbsz2Z_7QjGVcyBts6sBQUA\" alt=\"\" width=\"669\" height=\"363\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include&lt;bits/stdc++.h>\nusing namespace std;\n\n// Function to find the longest divisible subset\nvector&lt;int> divisibleSet(vector&lt;int>&amp; arr) {\n    int n = arr.size();\n\n    // Sort the array in ascending order\n    sort(arr.begin(), arr.end());\n\n    vector&lt;int> dp(n, 1);   // dp[i] stores the length of the divisible subset ending at arr[i]\n    vector&lt;int> hash(n, i); // hash[i] stores the previous index in the divisible subset ending at arr[i]\n\n    for (int i = 0; i &lt; n; i++) {\n        hash[i] = i; // Initialize with the current index\n        for (int prev_index = 0; prev_index &lt; i; prev_index++) {\n            if (arr[i] % arr[prev_index] == 0 &amp;&amp; 1 + dp[prev_index] > dp[i]) {\n                dp[i] = 1 + dp[prev_index];\n                hash[i] = prev_index;\n            }\n        }\n    }\n\n    int ans = -1;\n    int lastIndex = -1;\n\n    for (int i = 0; i &lt; n; i++) {\n        if (dp[i] > ans) {\n            ans = dp[i];\n            lastIndex = i;\n        }\n    }\n\n    vector&lt;int> temp;\n    temp.push_back(arr[lastIndex]);\n\n    // Reconstruct the divisible subset using the hash table\n    while (hash[lastIndex] != lastIndex) {\n        lastIndex = hash[lastIndex];\n        temp.push_back(arr[lastIndex]);\n    }\n\n    // Reverse the array to get the correct order\n    reverse(temp.begin(), temp.end());\n\n    return temp;\n}\n\nint main() {\n    vector&lt;int> arr = {1, 16, 7, 8, 4};\n\n    vector&lt;int> ans = divisibleSet(arr);\n\n    cout &lt;&lt; \"The longest divisible subset elements are: \";\n\n    for (int i = 0; i &lt; ans.size(); i++) {\n        cout &lt;&lt; ans[i] &lt;&lt; \" \";\n    }\n\n    return 0;\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>&nbsp;The longest divisible subset elements are: 1 4 8 16</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(N*N)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reason: There are two nested loops.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(N)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reason: We are only using two rows of size n.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\n\nclass DivisibleSet {\n    // Function to find the longest divisible subset\n    static List&lt;Integer> divisibleSet(List&lt;Integer> arr) {\n        int n = arr.size();\n\n        // Sort the array\n        Collections.sort(arr);\n\n        List&lt;Integer> dp = new ArrayList&lt;>(Collections.nCopies(n, 1));\n        List&lt;Integer> hash = new ArrayList&lt;>(Collections.nCopies(n, 0));\n\n        for (int i = 0; i &lt; n; i++) {\n            hash.set(i, i); // Initializing with current index\n            for (int prev_index = 0; prev_index &lt;= i - 1; prev_index++) {\n                if (arr.get(i) % arr.get(prev_index) == 0 &amp;&amp; 1 + dp.get(prev_index) > dp.get(i)) {\n                    dp.set(i, 1 + dp.get(prev_index));\n                    hash.set(i, prev_index);\n                }\n            }\n        }\n\n        int ans = -1;\n        int lastIndex = -1;\n\n        for (int i = 0; i &lt; n; i++) {\n            if (dp.get(i) > ans) {\n                ans = dp.get(i);\n                lastIndex = i;\n            }\n        }\n\n        List&lt;Integer> temp = new ArrayList&lt;>();\n        temp.add(arr.get(lastIndex));\n\n        while (hash.get(lastIndex) != lastIndex) {\n            lastIndex = hash.get(lastIndex);\n            temp.add(arr.get(lastIndex));\n        }\n\n        // Reverse the array\n        Collections.reverse(temp);\n\n        return temp;\n    }\n\n    public static void main(String[] args) {\n\n        List&lt;Integer> arr = Arrays.asList(1, 16, 7, 8, 4);\n\n        List&lt;Integer> ans = divisibleSet(arr);\n\n        System.out.print(\"The longest divisible subset elements are: \");\n        for (int i = 0; i &lt; ans.size(); i++) {\n            System.out.print(ans.get(i) + \" \");\n        }\n    }\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>&nbsp;The longest divisible subset elements are: 1 4 8 16</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(N*N)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reason: There are two nested loops.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(N)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reason: We are only using two rows of size n.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block\" data-lang=\"python\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">def longest_divisible_subset(arr):\n    n = len(arr)\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize dp and hash arrays with 1s\n    dp = [1] * n\n    hash_arr = list(range(n))\n\n    # Iterate through the array\n    for i in range(n):\n        for prev_index in range(i):\n            if arr[i] % arr[prev_index] == 0 and 1 + dp[prev_index] > dp[i]:\n                dp[i] = 1 + dp[prev_index]\n                hash_arr[i] = prev_index\n\n    ans = -1\n    last_index = -1\n\n    # Find the maximum length and its corresponding index\n    for i in range(n):\n        if dp[i] > ans:\n            ans = dp[i]\n            last_index = i\n\n    # Reconstruct the divisible subset\n    result = [arr[last_index]]\n\n    while hash_arr[last_index] != last_index:\n        last_index = hash_arr[last_index]\n        result.append(arr[last_index])\n\n    return result\n\n\nif __name__ == \"__main__\":\n    arr = [1, 16, 7, 8, 4]\n\n    ans = longest_divisible_subset(arr)\n\n    print(\"The longest divisible subset elements are:\", ans)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>&nbsp;The longest divisible subset elements are: 1 4 8 16</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(N*N)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reason: There are two nested loops.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(N)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reason: We are only using two rows of size n.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>[tabby title=\"JavaScript Code\"]</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">function divisibleSet(arr) {\n    const n = arr.length;\n\n    // Sort the input array in ascending order\n    arr.sort((a, b) => a - b);\n\n    // Initialize two arrays for dynamic programming: dp and hash\n    const dp = new Array(n).fill(1);\n    const hash = new Array(n).fill(0);\n\n    // Iterate through the elements of the input array\n    for (let i = 0; i &lt; n; i++) {\n        hash[i] = i; // Initialize hash with the current index\n        for (let prevIndex = 0; prevIndex &lt; i; prevIndex++) {\n            if (arr[i] % arr[prevIndex] === 0 &amp;&amp; 1 + dp[prevIndex] > dp[i]) {\n                dp[i] = 1 + dp[prevIndex];\n                hash[i] = prevIndex;\n            }\n        }\n    }\n\n    // Find the maximum length and its corresponding index in dp\n    let ans = -1;\n    let lastIndex = -1;\n    for (let i = 0; i &lt; n; i++) {\n        if (dp[i] > ans) {\n            ans = dp[i];\n            lastIndex = i;\n        }\n    }\n\n    // Reconstruct the longest divisible subset using hash and lastIndex\n    const temp = [];\n    temp.push(arr[lastIndex]);\n\n    while (hash[lastIndex] !== lastIndex) {\n        lastIndex = hash[lastIndex];\n        temp.push(arr[lastIndex]);\n    }\n\n    // Reverse the array 'temp' to get the correct order\n    temp.reverse();\n\n    return temp;\n}\n\n// Main function\nfunction main() {\n    const arr = [1, 16, 7, 8, 4];\n\n    const ans = divisibleSet(arr);\n    console.log(\"The longest divisible subset elements are:\", ans.join(\" \"));\n}\n\n// Call the main function\nmain();\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>&nbsp;The longest divisible subset elements are: 1 4 8 16</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: O(N*N)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reason: There are two nested loops.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: O(N)</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Reason: We are only using two rows of size n.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;<strong><a href=\"https://www.linkedin.com/in/anshuman-sharma-a1b245194/\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>Anshuman Sharma</strong></a></strong>&nbsp;for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a>.&nbsp;<em>If you want to suggest any improvement/correction in this article please mail us at&nbsp;write4tuf@gmail.com</em></p></blockquote>\n<!-- /wp:quote -->",
    "category_tag": "data-structure",
    "likes": 48,
    "preview": "Prerequisite: * Longest Increasing Subsequence * Printing longest increasing subsequence Problem Link: Divisible Set Let us first understand the difference between subset and subsequence. In a subs..."
}