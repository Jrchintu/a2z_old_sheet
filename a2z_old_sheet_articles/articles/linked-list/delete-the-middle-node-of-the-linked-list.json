{
    "dislikes": 2,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:12:14 GMT+0530 (India Standard Time)",
    "slug": "delete-the-middle-node-of-the-linked-list",
    "aid": "2288",
    "title": "Delete the Middle Node of the Linked List",
    "tuf_plus": "",
    "topics": [
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "linked-list",
            "topic-title": "Linked List"
        }
    ],
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement:</strong> Given the head of a<strong> linked list </strong>of integers,<strong> </strong>delete the <strong>middle node</strong> of the linked list and return the modified head. However, if the linked list has an <strong>even</strong> number of nodes, delete the <strong>second</strong> middle node.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n<details class=\"article_example_details\">\n<summary class=\"article_example_summary\">\n<span><strong>\nExamples\n</strong>\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"atricle_example_content\">\n<pre class=\"wp-block-preformatted\"><!-- Insert New Examples Here -->\n<p><strong>Example 1:</strong></p>\n<p><strong>Input Format</strong>:</p>\n<p>LL: 1&nbsp; 2&nbsp; 3&nbsp; 4&nbsp; 5&nbsp;</p>\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/12/Screenshot-2023-12-01-at-10.45.25-PM-1024x212.png\" alt=\"\" class=\"wp-image-13038\" width=\"768\" height=\"159\"></figure>\n<p><strong>Output</strong>: 1 2 4 5</p>\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/12/Screenshot-2023-12-01-at-10.46.52-PM-1024x208.png\" alt=\"\" class=\"wp-image-13039\" width=\"768\" height=\"156\"></figure>\n<p><strong>Explanation</strong>: Node with value 3 is at the middle node and deleted.</p>\n<p><strong>Example 2:</strong></p>\n<p><strong>Input Format:</strong></p>\n<p>LL: 1&nbsp; 2&nbsp; 3&nbsp; 4</p>\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/12/Screenshot-2023-12-01-at-10.50.42-PM-1024x233.png\" alt=\"\" class=\"wp-image-13040\" width=\"768\" height=\"175\"></figure>\n<p><strong>Output: </strong>1 2 4</p>\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/12/Copy-of-Screenshot-2023-12-01-at-10.50.47-PM-1024x236.png\" alt=\"\" class=\"wp-image-13041\" width=\"768\" height=\"177\"></figure>\n<p><strong>Explanation</strong>: In this example, the linked list has an even number of nodes hence we return the second middle node which is 3.</p>\n</pre>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Practice Section-->\n<div class=\"practice\">\n<span><strong>Practice: </strong></span>\n<div class=\"problem-buttons\">\n\n<!-- Add Problem Link inside href -->\n<a href=\"https://tinyurl.com/y2r52yz8\" target=\"_blank\" rel=\"noopener\">\n<span>Solve Problem</span>\n<img src=\"https://static.takeuforward.org/wp/uploads/2023/04/Group-11-5.png\" alt=\"code-studio\">\n</a>\n</div>\n</div>\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\nyourself first. </em></p>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<div class=\"horizontal_navbar_dsa_article\">\n<div class=\"grid_container_two\">\n<a href=\"#brute-force-approach\" class=\"two-boxes box-a\">\nBrute Force Approach\n</a>\n<a href=\"#optimal-approach\" class=\"two-boxes box-c\">\nOptimal Approach\n</a>\n<a href=\"#dsa_article_video_explanation\" class=\"three-boxes box-d\">\n<svg width=\"26\" height=\"26\" viewBox=\"0 0 20 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M8 10L13.19 7L8 4V10ZM19.56 2.17C19.69 2.64 19.78 3.27 19.84 4.07C19.91 4.87 19.94 5.56 19.94 6.16L20 7C20 9.19 19.84 10.8 19.56 11.83C19.31 12.73 18.73 13.31 17.83 13.56C17.36 13.69 16.5 13.78 15.18 13.84C13.88 13.91 12.69 13.94 11.59 13.94L10 14C5.81 14 3.2 13.84 2.17 13.56C1.27 13.31 0.69 12.73 0.44 11.83C0.31 11.36 0.22 10.73 0.16 9.93C0.0900001 9.13 0.0599999 8.44 0.0599999 7.84L0 7C0 4.81 0.16 3.2 0.44 2.17C0.69 1.27 1.27 0.69 2.17 0.44C2.64 0.31 3.5 0.22 4.82 0.16C6.12 0.0899998 7.31 0.0599999 8.41 0.0599999L10 0C14.19 0 16.8 0.16 17.83 0.44C18.73 0.69 19.31 1.27 19.56 2.17Z\" fill=\"red\"></path>\n</svg>\n\n</a>\n<div class=\"box-e tooltip\">\n<svg viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M12.842 9.25L11.9577 10.17C11.2502 10.89 10.8081 11.5 10.8081 13H8.84297V12.5C8.84297 11.39 9.28511 10.39 9.99255 9.67L11.2109 8.41C11.5745 8.05 11.7906 7.55 11.7906 7C11.7906 6.46957 11.5836 5.96086 11.2151 5.58579C10.8465 5.21071 10.3467 5 9.82552 5C9.30434 5 8.80451 5.21071 8.43598 5.58579C8.06745 5.96086 7.86041 6.46957 7.86041 7H5.89531C5.89531 5.93913 6.30938 4.92172 7.04644 4.17157C7.7835 3.42143 8.78316 3 9.82552 3C10.8679 3 11.8675 3.42143 12.6046 4.17157C13.3417 4.92172 13.7557 5.93913 13.7557 7C13.7543 7.84324 13.4259 8.65183 12.842 9.25ZM10.8081 17H8.84297V15H10.8081M9.82552 0C8.53521 0 7.25754 0.258658 6.06545 0.761205C4.87337 1.26375 3.79021 2.00035 2.87783 2.92893C1.03519 4.8043 0 7.34784 0 10C0 12.6522 1.03519 15.1957 2.87783 17.0711C3.79021 17.9997 4.87337 18.7362 6.06545 19.2388C7.25754 19.7413 8.53521 20 9.82552 20C12.4314 20 14.9306 18.9464 16.7732 17.0711C18.6158 15.1957 19.651 12.6522 19.651 10C19.651 4.47 15.2296 0 9.82552 0Z\" fill=\"black\"></path>\n</svg>\n<div class=\"bottom\">\n<p>Expand any one approach by clicking the given options in the bar. Clicking one approach on bar,\ncloses all other expands. You can manually expand more than one approach at a time</p>\n<i></i>\n</div>\n\n</div>\n</div>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Approaches Drop-Down -->\n<div class=\"dsa_article_dropdown_approachs \">\n\n<!-- Brute Force Approach Starts from here -->\n<div id=\"brute-force-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nBrute Force Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n<p>Using the brute force approach, the middle node of a linked list can be determined by <strong>traversing</strong> the <strong>entire</strong> <strong>linked</strong> <strong>list</strong> initially to find the total number of nodes, denoted as <strong>`n`</strong>. Then we <strong>reset</strong> the temporary node <strong>`temp`</strong> to the head of the linked list and proceed to traverse to the node positioned at index <strong>`[n/2]`</strong>, which represents either the <strong>middle</strong> <strong>node</strong> in an <strong>odd-lengthed</strong> <strong>list</strong> or the node just before the middle node in an <strong>even-lengthed </strong>linked list.</p>\n<h3><strong>Algorithm:</strong></h3>\n<p><strong>Step 1: Traverse</strong> the linked list to <strong>count</strong> the number of nodes and store the length as <strong>`n`. </strong>Calculate the index of the <strong>middle node</strong> by <strong>dividing</strong> the total number of nodes by <strong>2.</strong></p>\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/12/tuxpi.com_.1701450374-1024x245.jpg\" alt=\"\" class=\"wp-image-13042\" width=\"768\" height=\"184\"></figure>\n<p><strong>Step 2: Traverse</strong> the linked list <strong>again</strong> while keeping track of the node count to <strong>reach </strong>the middle node.&nbsp;</p>\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/12/Screenshot-2023-12-17-235852-1024x273.png\" alt=\"\" class=\"wp-image-13044\" width=\"768\" height=\"205\"></figure>\n<p><strong>Step 3: </strong>Once reaching the middle node, delete it by setting the <strong>next </strong>pointer of the <strong>previous node</strong> directly to the node after the <strong>middle</strong> <strong>node</strong>. <strong>Free </strong>the <strong>memory allocated </strong>to the middle node.</p>\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/12/Screenshot-2023-12-02-at-9.33.42-PM-1024x649.png\" alt=\"\" class=\"wp-image-13045\" width=\"768\" height=\"487\"></figure>\n\n\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;iostream&gt;\n#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\n// Node class represents a node in a linked list\nclass Node {\npublic:\n\n    // Data stored in the node\n    int data;  \n    \n     // Pointer to the next node in the list\n    Node* next;     \n\n    // Constructor with both data\n    // and next node as parameters\n    Node(int data1, Node* next1) {\n        data = data1;\n        next = next1;\n    }\n\n    // Constructor with only data as\n    // a parameter, sets next to nullptr\n    Node(int data1) {\n        data = data1;\n        next = nullptr;\n    }\n};\n\n// Function to delete the\n// middle node of a linked list\nNode *deleteMiddle(Node *head) {\n    // Initialize a temporary node\n    // to traverse the linked list\n    Node* temp = head;\n    \n    // Variable to hold the number\n    // of nodes in the linked list\n    int n = 0;\n    \n    // Loop to count the number of\n    // nodes in the linked list\n    while(temp!=NULL){\n        n++;\n        temp = temp-&gt;next;\n    }\n    \n    // Calculate the index of the middle node\n    int res = n/2;\n    \n    // Reset the temporary node to\n    // the beginning of the linked list\n    temp = head;\n    \n    // Loop to find the\n    // middle node to delete\n    while(temp!=NULL){\n        \n        res --;\n        \n        // If the middle node is found\n        if(res==0){\n            \n            // Create a pointer\n            // to the middle node\n            Node* middle = temp-&gt;next;\n            \n            // Adjust pointers to\n            // skip the middle node\n            temp-&gt;next = temp-&gt;next-&gt;next;\n            \n            // Free the memory allocated\n            // to the middle node\n            free(middle);\n            \n            // Exit the loop after\n            // deleting the middle node\n            break;\n        }\n        // Move to the next node\n        // in the linked list\n        temp = temp-&gt;next;\n    }\n    // Return the head of the\n    // modified linked list\n    return head;\n}\n\n\nvoid printLL(Node* head){\n    \n    Node *temp = head;\n    while(temp!=NULL){\n        cout &lt;&lt; temp-&gt;data &lt;&lt; \" \";\n        temp = temp-&gt;next;\n    }\n    cout &lt;&lt; endl;\n }\n\nint main() {\n    // Creating a sample linked list: \n    Node* head = new Node(1);\n    head-&gt;next = new Node(2);\n    head-&gt;next-&gt;next = new Node(3);\n    head-&gt;next-&gt;next-&gt;next = new Node(4);\n    head-&gt;next-&gt;next-&gt;next-&gt;next = new Node(5);\n    \n    // Display the orignal linked list\n    cout &lt;&lt; \"Orginal Linked List: \";\n    printLL(head);\n\n    // Deleting the middle node\n    head = deleteMiddle(head);\n\n    // Displaying the updated linked list\n    cout &lt;&lt; \"Orginal Linked List: \";\n    printLL(head);\n\n    return 0;\n}\n\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\n// Node class represents a node in a linked list\nclass Node {\n    // Data stored in the node\n    int data; \n     // Pointer to the next node in the list\n    Node next;     \n\n    // Constructor with both data\n    // and next node as parameters\n    Node(int data, Node next) {\n        this.data = data;\n        this.next = next;\n    }\n\n    // Constructor with only data as\n    // a parameter, sets next to null\n    Node(int data) {\n        this.data = data;\n        this.next = null;\n    }\n}\n\npublic class Main {\n    \n    // Function to delete the\n    // middle node of a linked list\n    public Node deleteMiddle(Node head) {\n        // Initialize a temporary node\n        // to traverse the linked list\n        Node temp = head;\n        \n        // Variable to hold the number\n        // of nodes in the linked list\n        int n = 0;\n        \n        // Loop to count the number of\n        // nodes in the linked list\n        while (temp != null) {\n            n++;\n            temp = temp.next;\n        }\n        \n        // Calculate the index of the middle node\n        int res = n / 2;\n        \n        // Reset the temporary node to\n        // the beginning of the linked list\n        temp = head;\n        \n        // Loop to find the\n        // middle node to delete\n        while (temp != null) {\n            \n            res--;\n            \n            // If the middle node is found\n            if (res == 0) {\n                \n                // Create a pointer\n                // to the middle node\n                Node middle = temp.next;\n                \n                // Adjust pointers to\n                // skip the middle node\n                temp.next = temp.next.next;\n                \n                // No need to explicitly free memory in Java,\n                // as it's managed by the garbage collector\n                \n                // Exit the loop after\n                // deleting the middle node\n                break;\n            }\n            // Move to the next node\n            // in the linked list\n            temp = temp.next;\n        }\n        // Return the head of the\n        // modified linked list\n        return head;\n    }\n\n\n    static void printLL(Node head) {\n        Node temp = head;\n        while (temp != null) {\n            System.out.print(temp.data + \" \");\n            temp = temp.next;\n        }\n        System.out.println();\n    }\n\n    public static void main(String[] args) {\n        \n        Main main = new Main();\n        \n        // Creating a sample linked list:\n        Node head = new Node(1);\n        head.next = new Node(2);\n        head.next.next = new Node(3);\n        head.next.next.next = new Node(4);\n        head.next.next.next.next = new Node(5);\n\n        // Display the original linked list\n        System.out.print(\"Original Linked List: \");\n        printLL(head);\n\n        // Deleting the middle node\n        head = main.deleteMiddle(head);\n\n        // Displaying the updated linked list\n        System.out.print(\"Updated Linked List: \");\n        printLL(head);\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n# Node class represents a node in \n# a linked list\n\nclass Node:\n    def __init__(self, data, next_node=None):\n        # Data stored in the node\n        self.data = data       \n        # Pointer to the next node in the list\n        self.next = next_node  \n\n# Function to delete the\n# middle node of a linked list\ndef delete_middle(head):\n    # Initialize a temporary node\n    # to traverse the linked list\n    temp = head\n    \n    # Variable to hold the number\n    # of nodes in the linked list\n    n = 0\n    \n    # Loop to count the number of\n    # nodes in the linked list\n    while temp is not None:\n        n += 1\n        temp = temp.next\n    \n    # Calculate the index of the middle node\n    res = n // 2\n    \n    # Reset the temporary node to\n    # the beginning of the linked list\n    temp = head\n    \n    # Loop to find the\n    # middle node to delete\n    while temp is not None:\n        res -= 1\n        \n        # If the middle node is found\n        if res == 0:\n            \n            # Create a pointer\n            # to the middle node\n            middle = temp.next\n            \n            # Adjust pointers to\n            # skip the middle node\n            temp.next = temp.next.next\n            \n            # Delete the middle node\n            # (Python handles memory management)\n            # No explicit free() needed\n            \n            # Exit the loop after\n            # deleting the middle node\n            break\n        \n        # Move to the next node\n        # in the linked list\n        temp = temp.next\n    \n    # Return the head of the\n    # modified linked list\n    return head\n\n\ndef print_linked_list(head):\n    temp = head\n    while temp:\n        print(temp.data, end=\" \")\n        temp = temp.next\n    print()\n\n# Creating a sample linked list\nhead = Node(1)\nhead.next = Node(2)\nhead.next.next = Node(3)\nhead.next.next.next = Node(4)\nhead.next.next.next.next = Node(5)\n\n# Display the original linked list\nprint(\"Original Linked List: \", end=\"\")\nprint_linked_list(head)\n\n# Deleting the middle node\nhead = delete_middle(head)\n\n# Displaying the updated linked list\nprint(\"Updated Linked List: \", end=\"\")\nprint_linked_list(head)\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n// Node class represents a node\n// in a linked list\nclass Node {\n    constructor(data, next) {\n        // Data stored in the node\n        this.data = data;   \n        // Pointer to the next node in the list\n        this.next = next;    \n    }\n}\n\n// Function to delete the\n// middle node of a linked list\nfunction deleteMiddle(head) {\n    // Initialize a temporary node\n    // to traverse the linked list\n    let temp = head;\n    \n    // Variable to hold the number\n    // of nodes in the linked list\n    let n = 0;\n    \n    // Loop to count the number of\n    // nodes in the linked list\n    while(temp !== null){\n        n++;\n        temp = temp.next;\n    }\n    \n    // Calculate the index of the middle node\n    let res = Math.floor(n / 2);\n    \n    // Reset the temporary node to\n    // the beginning of the linked list\n    temp = head;\n    \n    // Loop to find the\n    // middle node to delete\n    while(temp !== null){\n        \n        res --;\n        \n        // If the middle node is found\n        if(res === 0){\n            \n            // Create a pointer\n            // to the middle node\n            let middle = temp.next;\n            \n            // Adjust pointers to\n            // skip the middle node\n            temp.next = temp.next.next;\n            \n            // Free the memory allocated\n            // to the middle node\n            // (JavaScript automatically handles memory)\n            \n            // Exit the loop after\n            // deleting the middle node\n            break;\n        }\n        // Move to the next node\n        // in the linked list\n        temp = temp.next;\n    }\n    // Return the head of the\n    // modified linked list\n    return head;\n}\n\n\nfunction printLL(head) {\n    let temp = head;\n    while (temp !== null) {\n        console.log(temp.data + \" \");\n        temp = temp.next;\n    }\n    console.log(\"\\n\");\n}\n\n// Creating a sample linked list\nlet head = new Node(1);\nhead.next = new Node(2);\nhead.next.next = new Node(3);\nhead.next.next.next = new Node(4);\nhead.next.next.next.next = new Node(5);\n\n// Display the original linked list\nconsole.log(\"Original Linked List: \");\nprintLL(head);\n\n// Deleting the middle node\nhead = deleteMiddle(head);\n\n// Displaying the updated linked list\nconsole.log(\"Updated Linked List: \");\nprintLL(head);\n\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Brute Force Here -->\n<strong>Output:</strong> \nOriginal Linked List: 1 2 3 4 5&nbsp;\nUpdated Linked List: 1 2 4 5&nbsp;\n\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n<!-- Insert Time and Space Complexity of Brute Force Here -->\n</p><p><strong>Time Complexity: O(N + N/2) </strong>The loop traverses the <strong>entire</strong> <strong>linked</strong> <strong>list</strong> once to count the total number of nodes then the loop iterates halfway through the linked list to reach the <strong>middle</strong> <strong>node</strong>. Hence, the time complexity is <strong>O(N + N/2) ~ O(N)</strong>.</p>\n<p><strong>Space Complexity : O(1) </strong>The algorithm uses a <strong>constant</strong> <strong>amount</strong> of <strong>extra</strong> <strong>space</strong> regardless of the size of the input (linked list). It doesn't use any <strong>additional</strong> <strong>data</strong> <strong>structures</strong> in proportion to the input size. Thus, the space complexity is<strong> O(1) (constant space)</strong>.&nbsp;</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Brute Force Approach Ends here -->\n\n\n<!-- Optimal Approach Starts from here -->\n\n<div id=\"optimal-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nOptimal Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm of Better Approach Here -->\n<p>The previous method requires the traversal of the linked list <strong>twice</strong>. To enhance efficiency, the <strong>Tortoise</strong> and <strong>Hare</strong> <strong>Algorithm</strong> is introduced as an <strong>optimization</strong> where the <strong>middle</strong> <strong>node</strong> can be found in just one <strong>traversal</strong>.</p>\n<p>The <strong>'slow'</strong> pointer <strong>advances</strong> <strong>one</strong> <strong>node</strong> at a time while the <strong>'fast'</strong> pointer moves <strong>two</strong> <strong>nodes</strong> at a time. By doing so, when the <strong>'fast'</strong> pointer reaches the <strong>end</strong> of the list, the <strong>'slow'</strong> pointer will be at the <strong>middle</strong> <strong>node</strong>.</p>\n<p><em>Since we require </em><strong><em>`slow`</em></strong><em> to reach the node </em><strong><em>before the middle node</em></strong><em>, we give </em><strong><em>`fast` </em></strong><em>a </em><strong><em>head start!</em></strong></p>\n<h3><strong>Algorithm</strong></h3>\n<p><strong>Step 1:</strong> Check if the list is <strong>empty</strong> or contains <strong>only</strong> <strong>one</strong> <strong>node</strong>. If so, no <strong>middle</strong> <strong>node</strong> exists to delete, return <strong>NULL</strong>. Initialise <strong>'slow'</strong> and <strong>'fast'</strong> pointers at the head of the list.</p>\n<p>Move <strong>\u2018fast\u2019 two</strong> nodes <strong>ahead</strong> for the initial position as we have to reach the node <strong>previous</strong> to the <strong>middle</strong> <strong>node</strong> via <strong>slow.</strong></p>\n<p><strong>Step 2: </strong>Move the <strong>'fast'</strong> pointer<strong> </strong>two nodes ahead and the <strong>'slow'</strong> pointer one node ahead in each iteration. Continue this process until the 'fast' pointer <strong>reaches</strong> <strong>the</strong> <strong>end</strong> of the list.</p>\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/12/Screenshot-2023-12-02-at-9.50.35-PM-1024x373.png\" alt=\"\" class=\"wp-image-13046\" width=\"768\" height=\"280\"></figure>\n<p><strong>Step 3: </strong>Once the <strong>'fast'</strong> pointer reaches the end, the <strong>'slow'</strong> pointer will be at the <strong>middle</strong> <strong>node</strong>. Delete the middle node by <strong>skipping</strong> <strong>it</strong> from the linked list.&nbsp;</p>\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/12/Screenshot-2023-12-02-at-10.00.37-PM-1024x468.png\" alt=\"\" class=\"wp-image-13047\" width=\"768\" height=\"351\"></figure>\n<p><strong>Step 4: </strong>Return the <strong>head</strong> of the modified linked list.</p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;iostream&gt;\n#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\n// Node class represents a node in a linked list\nclass Node {\npublic:\n\n    // Data stored in the node\n    int data;  \n    \n     // Pointer to the next node in the list\n    Node* next;     \n\n    // Constructor with both data\n    // and next node as parameters\n    Node(int data1, Node* next1) {\n        data = data1;\n        next = next1;\n    }\n\n    // Constructor with only data as\n    // a parameter, sets next to nullptr\n    Node(int data1) {\n        data = data1;\n        next = nullptr;\n    }\n};\n\n// Function to delete the\n// middle node of a linked list\nNode *deleteMiddle(Node *head) {\n    // If the list is empty or has only one node,\n    // return NULL as there is no middle node to delete\n    if (head == NULL || head-&gt;next == NULL) {\n        return NULL;\n    }\n\n    // Initialize slow and fast pointers\n    Node* slow = head;\n    Node* fast = head;\n    fast = head-&gt;next-&gt;next;\n\n    // Move 'fast' pointer twice as fast as 'slow'\n    while (fast != NULL &amp;&amp; fast-&gt;next != NULL) {\n        slow = slow-&gt;next;\n        fast = fast-&gt;next-&gt;next;\n    }\n\n    // Delete the middle node by skipping it\n    slow-&gt;next = slow-&gt;next-&gt;next;\n    return head;\n}\n\nvoid printLL(Node* head){\n    \n    Node *temp = head;\n    while(temp!=NULL){\n        cout &lt;&lt; temp-&gt;data &lt;&lt; \" \";\n        temp = temp-&gt;next;\n    }\n    cout &lt;&lt; endl;\n }\n\nint main() {\n    // Creating a sample linked list: \n    Node* head = new Node(1);\n    head-&gt;next = new Node(2);\n    head-&gt;next-&gt;next = new Node(3);\n    head-&gt;next-&gt;next-&gt;next = new Node(4);\n    head-&gt;next-&gt;next-&gt;next-&gt;next = new Node(5);\n    \n    // Display the orignal linked list\n    cout &lt;&lt; \"Orginal Linked List: \";\n    printLL(head);\n\n    // Deleting the middle node\n    head = deleteMiddle(head);\n\n    // Displaying the updated linked list\n    cout &lt;&lt; \"Orginal Linked List: \";\n    printLL(head);\n\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\n// Node class represents a node in a linked list\nclass Node {\n    // Data stored in the node\n    int data; \n     // Pointer to the next node in the list\n    Node next;     \n\n    // Constructor with both data\n    // and next node as parameters\n    Node(int data, Node next) {\n        this.data = data;\n        this.next = next;\n    }\n\n    // Constructor with only data as\n    // a parameter, sets next to null\n    Node(int data) {\n        this.data = data;\n        this.next = null;\n    }\n}\n\npublic class Main {\n    \n    // Function to delete the\n    // middle node of a linked list\n    static Node deleteMiddle(Node head) {\n        /* If the list is empty or has only one node,\n           return null as there is no middle node to delete */\n        if (head == null || head.next == null) {\n            return null;\n        }\n\n        // Initialize slow and fast pointers\n        Node slow = head;\n        Node fast = head;\n        fast = head.next.next;\n\n        // Move 'fast' pointer twice as fast as 'slow'\n        while (fast != null &amp;&amp; fast.next != null) {\n            slow = slow.next;\n            fast = fast.next.next;\n        }\n\n        // Delete the middle node by skipping it\n        if (slow.next != null) {\n            slow.next = slow.next.next;\n        }\n        return head;\n    }\n\n    static void printLL(Node head) {\n        Node temp = head;\n        while (temp != null) {\n            System.out.print(temp.data + \" \");\n            temp = temp.next;\n        }\n        System.out.println();\n    }\n\n    public static void main(String[] args) {\n        // Creating a sample linked list:\n        Node head = new Node(1);\n        head.next = new Node(2);\n        head.next.next = new Node(3);\n        head.next.next.next = new Node(4);\n        head.next.next.next.next = new Node(5);\n\n        // Display the original linked list\n        System.out.print(\"Original Linked List: \");\n        printLL(head);\n\n        // Deleting the middle node\n        head = deleteMiddle(head);\n\n        // Displaying the updated linked list\n        System.out.print(\"Updated Linked List: \");\n        printLL(head);\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n# Node class represents a node in \n# a linked list\n\nclass Node:\n    def __init__(self, data, next_node=None):\n        # Data stored in the node\n        self.data = data       \n        # Pointer to the next node in the list\n        self.next = next_node  \n\n# Function to delete the middle\n# node of a linked list\ndef delete_middle(head):\n    \"\"\"\n    If the list is empty or has only one node,\n    return None as there is no middle node to delete\n    \"\"\"\n    if head is None or head.next is None:\n        return None\n\n    # Initialize slow and fast pointers\n    slow = head\n    fast = head.next.next if head.next else None\n\n    # Move 'fast' pointer twice as fast as 'slow'\n    while fast and fast.next:\n        slow = slow.next\n        fast = fast.next.next\n\n    # Delete the middle node by skipping it\n    slow.next = slow.next.next\n    return head\n\ndef print_linked_list(head):\n    temp = head\n    while temp:\n        print(temp.data, end=\" \")\n        temp = temp.next\n    print()\n\n# Creating a sample linked list\nhead = Node(1)\nhead.next = Node(2)\nhead.next.next = Node(3)\nhead.next.next.next = Node(4)\nhead.next.next.next.next = Node(5)\n\n# Display the original linked list\nprint(\"Original Linked List: \", end=\"\")\nprint_linked_list(head)\n\n# Deleting the middle node\nhead = delete_middle(head)\n\n# Displaying the updated linked list\nprint(\"Updated Linked List: \", end=\"\")\nprint_linked_list(head)\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n// Node class represents a node\n// in a linked list\nclass Node {\n    constructor(data, next) {\n        // Data stored in the node\n        this.data = data;   \n        // Pointer to the next node in the list\n        this.next = next;    \n    }\n}\n\n// Function to delete the\n// middle node of a linked list\nfunction deleteMiddle(head) {\n    /* If the list is empty or has only,\n     * one node return null as there is no\n     * middle node to delete */\n    if (head === null || head.next === null) {\n        return null;\n    }\n\n    // Initialize slow and fast pointers\n    let slow = head;\n    let fast = head;\n    fast = head.next.next;\n\n    // Move 'fast' pointer twice as fast as 'slow'\n    while (fast !== null &amp;&amp; fast.next !== null) {\n        slow = slow.next;\n        fast = fast.next.next;\n    }\n\n    // Delete the middle node by skipping it\n    slow.next = slow.next.next;\n    return head;\n}\n\nfunction printLL(head) {\n    let temp = head;\n    while (temp !== null) {\n        console.log(temp.data + \" \");\n        temp = temp.next;\n    }\n    console.log(\"\\n\");\n}\n\n// Creating a sample linked list\nlet head = new Node(1);\nhead.next = new Node(2);\nhead.next.next = new Node(3);\nhead.next.next.next = new Node(4);\nhead.next.next.next.next = new Node(5);\n\n// Display the original linked list\nconsole.log(\"Original Linked List: \");\nprintLL(head);\n\n// Deleting the middle node\nhead = deleteMiddle(head);\n\n// Displaying the updated linked list\nconsole.log(\"Updated Linked List: \");\nprintLL(head);\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Optimal Apporach Here -->\n<strong>Output:</strong> \nOriginal Linked List: 1 2 3 4 5\nUpdated Linked List: 1 2 4 5\n\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Optimal Approach-->\n</p><p><strong>Time Complexity: O(N/2) </strong>The algorithm <strong>traverses</strong> the linked list using the Tortoise and Hare approach. The code increments both <strong>'slow'</strong> and <strong>'fast'</strong> <strong>pointers</strong> at different rates, effectively covering about <strong>half</strong> the <strong>list</strong> before reaching the <strong>midpoint</strong>, hence the time complexity of the algorithm is <strong>O(N/2) ~ O(N)</strong>.</p>\n<p><strong>Space Complexity: O(1) </strong>The algorithm uses a <strong>constant</strong> <strong>amount</strong> of <strong>extra</strong> <strong>space</strong> regardless of the size of the input (linked list). It doesn't use any <strong>additional</strong> <strong>data</strong> <strong>structures</strong> in proportion to the input size. Thus, the space complexity is<strong> O(1) (constant space)</strong>.&nbsp;</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Optimal Approach Starts from here -->\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n<details>\n<summary class=\"main-summary\">\n<span>\nVideo Explanation\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"yt-video-wrapper\">\n\n<!-- Insert iframe embed Link of Youtube Video-->\n<iframe class=\"lazy-loaded\" loading=\"lazy\" title=\"Delete the Middle of the Linked List\" width=\"810\" height=\"456\" data-lazy-type=\"iframe\" data-src=\"https://www.youtube.com/embed/ePpV-_pfOeI?si=EBlKFHmbZo_SIB9S\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\" src=\"https://www.youtube.com/embed/xvNwoz-ufXA?feature=oembed\"></iframe><noscript>\n<iframe loading=\"lazy\" title=\"Delete the Middle of the Linked List\" width=\"810\" height=\"456\" src=\"https://www.youtube.com/embed/ePpV-_pfOeI?si=EBlKFHmbZo_SIB9S\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe></noscript>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script>\n\nconst codeSections = document.querySelectorAll('.code-section');\n\n// Get last selected language from localStorage or set default value\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\n// Update last selected language for all sections and store in localStorage\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\n// Handle copy button click event\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\n// Set initial state of the tabs\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<script>\nconst codeSections = document.querySelectorAll('.code-section');\n\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script src=\"https://takeuforward.org/UXApproachDropDowns/2ApproachJSScript.js\"></script>\n<!-- /wp:html -->\n\n<!-- wp:paragraph -->\n<p>In case you are learning DSA, you should definitely check out our free&nbsp;<a href=\"https://takeuforward.org/strivers-a2z-dsa-course/strivers-a2z-dsa-course-sheet-2/\" target=\"_blank\" rel=\"noreferrer noopener\">A2Z DSA Course</a>&nbsp;with videos and blogs.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;</em><strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268\" target=\"_blank\" rel=\"noreferrer noopener\">Gauri Tomar</a></strong><em>&nbsp;for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\" target=\"_blank\" rel=\"noreferrer noopener\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->",
    "category_tag": "linked-list",
    "likes": 52,
    "preview": "Problem Statement: Given the head of a linked list of integers, delete the middle node of the linked list and return the modified head. However, if the linked list has an even number of nodes, dele..."
}