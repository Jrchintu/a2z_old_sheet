{
    "dislikes": 2,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:12:12 GMT+0530 (India Standard Time)",
    "slug": "find-the-length-of-a-linked-list",
    "aid": "2280",
    "tuf_plus": "",
    "title": "Find the Length of a Linked List",
    "topics": [
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "linked-list",
            "topic-title": "Linked List"
        }
    ],
    "category_tag": "linked-list",
    "likes": 71,
    "preview": "Problem Statement: Given the head of a linked list, print the length of the linked list. Examples Example 1: Input Format: 0->1->2 Result: 3 Explanation: The list has a total of 3 nodes, thus the l...",
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement</strong>: Given the <strong>head</strong> of a linked list, print the length of the linked list.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n<details class=\"article_example_details\">\n<summary class=\"article_example_summary\">\n<span><strong>\nExamples\n</strong>\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"atricle_example_content\">\n<pre class=\"wp-block-preformatted\"><!-- Insert New Examples Here -->\n<p><strong>Example 1:</strong></p>\n<p><strong>Input Format:</strong> 0-&gt;1-&gt;2</p>\n<p><strong>Result:</strong> 3</p>\n<p><strong>Explanation:</strong> The list has a total of 3 nodes, thus the length of the list is 3.</p>\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/10/LengthLL1.jpg\" alt=\"\" class=\"wp-image-12867\"></figure>\n<p><strong>Example 2:</strong></p>\n<p><strong>Input Format:</strong> 2-&gt;5-&gt;8-&gt;7</p>\n<p><strong>Result:</strong> 4</p>\n<p><strong>Explanation:</strong> Again, the list has 4 nodes, hence, the list length is 4.</p>\n</pre>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Solution:</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"textColor\":\"accent\"} -->\n<p class=\"has-accent-color has-text-color\"><strong><em>Disclaimer</em></strong>: <em>Don't jump directly to the solution, try it out yourself first.</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Approach</strong>: </h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The most naive method to find the length of a linked list is to count the number of nodes in the list by doing a traversal in the Linked list.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Algorithm:</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><li>Start by<strong> initializing a pointer </strong>to the<strong> head</strong> that will be used for traversing and initializing a <strong>cnt </strong>variable to 0.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:image {\"id\":12868,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/10/LengthLL2.jpg\" alt=\"\" class=\"wp-image-12868\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:list -->\n<ul><li><strong>Traverse</strong> the linked list using the pointer, and at <strong>every node, increment cnt</strong>.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:image {\"id\":12869,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/10/LengthLL3.jpg\" alt=\"\" class=\"wp-image-12869\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:list -->\n<ul><li>After reaching the end of the linked list,<strong> return cnt</strong>, this will be your total number of nodes which is the length of the linked list.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:image {\"id\":12870,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/10/LengthLL4.jpg\" alt=\"\" class=\"wp-image-12870\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">class Node {\npublic:\n    int data;\n    Node* next;\n    public:\n    Node(int data1, Node* next1) {\n        data = data1;\n        next = next1;\n    }\n    public:\n    Node(int data1) {\n        data = data1;\n        next = nullptr;\n    }\n};\n// Function to calculate the length of a linked list\nint lengthOfLinkedList(Node* head) {\n    Node* temp = head;\n    int cnt = 0;\n    // Traverse the linked list and count nodes\n    while (temp != NULL) {\n        temp = temp->next;\n        cnt++; // increment cnt for every node traversed\n    }\n    return cnt;\n}\n\nint main() {\n    vector&lt;int> arr = {2, 5, 8, 7};\n    \n    // Create a linked list\n    Node* head = new Node(arr[0]);\n    head->next = new Node(arr[1]);\n    head->next->next = new Node(arr[2]);\n    head->next->next->next = new Node(arr[3]);\n    \n    // Print the length of the linked list\n    cout &lt;&lt; lengthOfLinkedList(head) &lt;&lt; '\\n';\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output: 4</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity:</strong>&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Since we are iterating over the entire list,&nbsp; time complexity is O(N).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We are not using any extra space, thus space complexity is O(1) or constant.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">class Node{\n    int data;\n    Node next;\n    Node(int data1, Node next1){\n        this.data=data1;\n        this.next=next1;\n    }\n    Node(int data1){\n        this.data=data1;\n        this.next=null;\n    }\n};\npublic class LinkedList{\n    // Function to calculate the length of a linked list\n    private static int lengthofaLL(Node head){\n        int cnt=0;\n        Node temp=head;\n        // Traverse the linked list and count nodes\n        while(temp!=null){\n            temp = temp.next;\n            cnt++;// increment cnt for every node traversed\n        }\n        return cnt;\n    }\n    public static void main(String[] args) {\n        int[]arr={2,5,8,7};\n        Node head = new Node(arr[0]);\n        head.next= new Node(arr[1]);\n        head.next.next= new Node(arr[2]);\n        head.next.next.next= new Node(arr[3]);\n        // Print the length of the linked list\n        System.out.println(lengthofaLL(head));\n    }\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output: 4</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity:</strong>&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Since we are iterating over the entire list,&nbsp; time complexity is O(N).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We are not using any extra space, thus space complexity is O(1) or constant.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block\" data-lang=\"python\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">class Node:\n    def __init__(self, data, next_node=None):\n        self.data = data\n        self.next = next_node\n# Function to calculate the length of a linked list\ndef length_of_linked_list(head):\n    cnt = 0\n    temp = head\n    \n    # Traverse the linked list and count nodes\n    while temp is not None:\n        temp = temp.next\n        cnt += 1\n  \n    return cnt\n# Main function\ndef main():\n    arr = [2, 5, 8, 7]\n    # Create a linked list\n    head = Node(arr[0])\n    head.next = Node(arr[1])\n    head.next.next = Node(arr[2])\n    head.next.next.next = Node(arr[3])\n    # Print the length of the linked list\n    print(\"Length of the linked list:\", length_of_linked_list(head))\nmain()\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output: 4</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity:</strong>&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Since we are iterating over the entire list,&nbsp; time complexity is O(N).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We are not using any extra space, thus space complexity is O(1) or constant.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>[tabby title=\"JavaScript Code\"]</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">class Node {\n    constructor(data, next) {\n        this.data = data;\n        this.next = next;\n    }\n}\n\n// Function to calculate the length of a linked list\nfunction lengthOfLinkedList(head) {\n    let cnt = 0;\n    let temp = head;\n    \n    // Traverse the linked list and count nodes\n    while (temp !== null) {\n        temp = temp.next;\n        cnt++;\n    }\n    \n    return cnt;\n}\n\n// Main function\nfunction main() {\n    const arr = [2, 5, 8, 7];\n    \n    // Create a linked list\n    const head = new Node(arr[0]);\n    head.next = new Node(arr[1]);\n    head.next.next = new Node(arr[2]);\n    head.next.next.next = new Node(arr[3]);\n    \n    // Print the length of the linked list\n    console.log(lengthOfLinkedList(head));\n}\nmain();\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output: 4</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity:</strong>&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Since we are iterating over the entire list,&nbsp; time complexity is O(N).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We are not using any extra space, thus space complexity is O(1) or constant.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In case you are learning DSA, you should definitely check out our free\u00a0<a href=\"https://takeuforward.org/strivers-a2z-dsa-course/strivers-a2z-dsa-course-sheet-2/\">A2Z DSA Course</a>\u00a0with videos and blogs.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to\u00a0</em><strong><a href=\"https://www.linkedin.com/in/neerav-sethi-0b6047103\" target=\"_blank\" rel=\"noreferrer noopener\">Neerav Sethi</a></strong><em>\u00a0for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,\u00a0</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->"
}