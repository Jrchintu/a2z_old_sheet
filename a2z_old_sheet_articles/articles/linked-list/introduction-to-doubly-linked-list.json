{
    "dislikes": 3,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:12:10 GMT+0530 (India Standard Time)",
    "slug": "introduction-to-doubly-linked-list",
    "aid": "2270",
    "title": "Introduction to Doubly Linked List",
    "tuf_plus": "",
    "topics": [
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "linked-list",
            "topic-title": "Linked List"
        }
    ],
    "content": "<!-- wp:paragraph -->\n<p>In the realm of data structures, it's essential to grasp the intricacies of doubly linked lists. These data structures are characterized by their ability to efficiently<strong> navigate in both forward and backward directions</strong>. Before diving into the depths of doubly linked lists, it's beneficial to recap our understanding of linked lists, and their precursor.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<!-- This is Practice Section-->\n<div class=\"practice\">\n<span><strong>Practice: </strong></span>\n<div class=\"problem-buttons\">\n\n<!-- Add Problem Link inside href -->\n<a href=\"https://www.codingninjas.com/studio/problems/introduction-to-doubly-linked-list_8160413?utm_source=striver&amp;utm_medium=website&amp;utm_campaign=a_zcoursetuf\" target=\"_blank\" rel=\"noopener\">\n<span>Solve Problem</span>\n<img src=\"https://static.takeuforward.org/wp/uploads/2023/04/Group-11-5.png\" alt=\"code-studio\">\n</a>\n</div>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:paragraph -->\n<p><strong>Recap on Linked List</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":12751,\"width\":768,\"height\":168,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/10/singly-linked-list-1-1024x224.png\" alt=\"\" class=\"wp-image-12751\" width=\"768\" height=\"168\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Before exploring doubly linked lists, let's refresh our knowledge of linked lists. Linked lists are linear data structures consisting of nodes, <strong>each containing data and a reference (or pointer) to the next node. </strong>This setup allows for dynamic memory allocation and efficient insertions and deletions.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>A significant characteristic of singly linked lists is their <strong>unidirectional</strong> <strong>nature</strong>, allowing <strong>traversal in only one direction</strong>: <strong>forward</strong>. Moving backward, such as going from node 1 to node 3, is not possible because each node in a singly linked list holds two pieces of information -<strong> the data</strong> (an integer value in this case) and <strong>a pointer </strong>that indicates the address <strong>of the next node</strong>. This structure enables efficient forward navigation, but the absence of a backward pointer restricts reverse traversal.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Doubly Linked Lists,&nbsp; as the name suggests, take the concept of<strong> 2-way traversal </strong>by <strong>introducing two pointers in each node</strong>. This<strong> enables seamless traversal in both directions</strong>, making them a valuable tool for various advanced data structure applications.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    \n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">class Node {\npublic:\n    int data;       // Data stored in the node\n    Node* next;     // Pointer to the next node in the list\n\n    // Constructor for a Node with both data and a reference to the next node\n    Node(int data1, Node* next1) {\n        data = data1;\n        next = next1;\n    }\n\n    // Constructor for a Node with data and no reference to the next node (end of the list)\n    Node(int data1) {\n        data = data1;\n        next = nullptr;\n    }\n};\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">public class Node {\n    public int data;      // Data stored in the node\n    public Node next;    // Reference to the next node in the list\n\n    // Constructor for a Node with both data and a reference to the next node\n    public Node(int data, Node next) {\n        this.data = data;\n        this.next = next;\n    }\n\n    // Constructor for a Node with data and no reference to the next node (end of the list)\n    public Node(int data) {\n        this.data = data;\n        this.next = null;\n    }\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The code for Singly Linked List creates a class Node which has two <strong>member variables:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>int data:</strong> This holds the data value that the node stores, which can be of any data type (in this case, an integer).</li><li><strong>Node* next:</strong> This is a pointer to the next node in the linked list. It allows the nodes to be linked together, forming a sequence.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>The class has two <strong>constructors</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>The first constructor takes<strong> both the data and a pointer to the next node</strong> as parameters. It initializes the data and the next node accordingly.</li><li>The second constructor takes only the <strong>data as a parameter</strong> and <strong>sets it next to nullptr. </strong>It could be that this node is the end of the list since there is no reference to the next node. We can append the next of this node later <strong>adding more nodes to the linked list.</strong></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Here is the code for the doubly linked list</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    \n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">class Node {\npublic:\n    int data;       // Data stored in the node\n    Node* next;     // Pointer to the next node in the list (forward direction)\n    Node* back;     // Pointer to the previous node in the list (backward direction)\n\n    // Constructor for a Node with both data, a reference to the next node, and a reference to the previous node\n    Node(int data1, Node* next1, Node* back1) {\n        data = data1;\n        next = next1; // Similar to a singly linked list, but now with a 'back' pointer.\n        back = back1; // Addition of 'back' pointer for the doubly linked list.\n    }\n\n    // Constructor for a Node with data, and no references to the next and previous nodes (end of the list)\n    Node(int data1) {\n        data = data1;\n        next = nullptr; // Similar to a singly linked list.\n        back = nullptr; // Addition of 'back' pointer initialization.\n    }\n};\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">public class Node {\n    public int data;       // Data stored in the node\n    public Node next;      // Reference to the next node in the list (forward direction)\n    public Node back;      // Reference to the previous node in the list (backward direction)\n\n    // Constructor for a Node with both data, a reference to the next node, and a reference to the previous node\n    public Node(int data, Node next, Node back) {\n        this.data = data;\n        this.next = next;\n        this.back = back;\n    }\n\n    // Constructor for a Node with data, and no references to the next and previous nodes (end of the list)\n    public Node(int data) {\n        this.data = data;\n        this.next = null;\n        this.back = null;\n    }\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>Node* back; :</strong> The introduction of the back pointer is the key change from a singly linked list node. This pointer allows <strong>traversal in the backward direction</strong>, making it suitable for doubly linked lists.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:list -->\n<ul><li><strong>Constructors:</strong> Both constructors have been updated to initialize the new back pointer. In the first constructor, Node(int data1, Node* next1, Node* back1), back is initialized with the provided value. In the second constructor, Node(int data1),<strong> the back is initialized to nullptr, just like the next.</strong></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>These changes differentiate the Node class for a doubly linked list, allowing it to maintain <strong>bidirectional links between nodes</strong>, as opposed to the unidirectional links in a singly linked list node.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":12756,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/10/Screenshot-2023-10-14-at-12.48.03-AM-1024x300.png\" alt=\"\" class=\"wp-image-12756\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em><em>Special thanks to&nbsp;</em><strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268\" target=\"_blank\" rel=\"noreferrer noopener\">Gauri Tomar</a></strong><em>&nbsp;for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></em></p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>In case you are learning DSA, you should definitely check out our free&nbsp;<a href=\"https://takeuforward.org/strivers-a2z-dsa-course/strivers-a2z-dsa-course-sheet-2/\">A2Z DSA Course</a>&nbsp;with videos and blogs.</p>\n<!-- /wp:paragraph -->",
    "category_tag": "linked-list",
    "likes": 143,
    "preview": "In the realm of data structures, it's essential to grasp the intricacies of doubly linked lists. These data structures are characterized by their ability to efficiently navigate in both forward and..."
}