{
    "dislikes": 9,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:10:04 GMT+0530 (India Standard Time)",
    "slug": "linked-list-introduction",
    "aid": "1664",
    "title": "Linked List : Introduction",
    "tuf_plus": "",
    "topics": [
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "linked-list",
            "topic-title": "Linked List"
        }
    ],
    "content": "<!-- wp:paragraph -->\n<p>Imagine you are given a task where you have to maintain a data entry of cars entering a parking lot. Since the number of cars entering will be different and may change daily, constructing a <strong>fixed-sized data structure</strong> like an array might not be helpful. This is when<strong> linked lists</strong> come into the picture, which allows us to add and remove cars easily. Unlike arrays, <strong>linked lists </strong>have a <strong>variable size</strong> and can be <strong>modified to our needs.</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3>What is a Linked List?</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>It is a linear data structure that can be visualized as a <strong>chain</strong> with different <span style=\"background-color: rgba(48, 48, 48, 0.2);\"><b>nodes co</b></span><strong>nnected</strong>, where each <strong>node</strong> represents a different element. The difference between arrays and linked lists is that, unlike arrays, the elements are not stored at a contiguous location.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Since for any element to be added in an array, we need the exact next memory location to be empty, and it is impossible to guarantee that it is possible. Hence adding elements to an array is not possible after the initial assignment of size.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":12844,\"width\":761,\"height\":240,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/10/IntroLL1f.png\" alt=\"\" class=\"wp-image-12844\" width=\"761\" height=\"240\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>A linked list is a data structure containing two crucial pieces of information, the first being the <strong>data</strong> and the other being <strong>the pointer to the next element</strong>. The <strong>\u2018head\u2019</strong> is the <strong>first node</strong>, and the <strong>\u2018tail\u2019</strong> is the<strong> last node</strong> in a linked list.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":12845,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/10/IntroLL2f.png\" alt=\"\" class=\"wp-image-12845\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Creating a Linked List</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>There are two information sets to store at every node, thus there is a need to create a self-defined data type to handle them. Therefore, we will use the help of <strong>structs</strong> and <strong>classes</strong>. To learn about <a href=\"https://takeuforward.org/structure/classes-and-structures-in-c/\" target=\"_blank\" rel=\"noopener\" title=\"\">structs and classes</a>, you can refer to this article.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To understand linked lists better, let\u2019s take the help of an example:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">class Node{\n    Public: // access modifier\n    int data; // the data value\n    Node* next; // the pointer to the next value\n    Public:\n    // constructor\n    Node (int data1, Node* next1){\n        data=data1;  // Initialize data with the provided value\n        next=next1;  // Initialize next with the provided\n    }\n    Node (int data1){\n        data=data1;  // Initialize data with the provided value\n        next=nullptr;  // Initialize next as null since it's the end of the list\n\n    }\n};\nint main(){\n    vector&lt;int> arr={2,5,8,7};\n    Node* y= new Node(arr[0]);\n    cout&lt;&lt;y&lt;&lt;'\\n'; // returns the memory value\n    cout&lt;&lt;y->data&lt;&lt;'\\n'; // returns the data stored at that memory point\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>0x11b7f90<br>2</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">class Node {\n    int data;      // the data value\n    Node next;      // the reference to the next Node in the linked list\n    // Constructors\n    Node(int data1, Node next1) {\n        this.data = data1;  // Initialize data with the provided value\n        this.next = next1;  // Initialize next with the provided reference\n    }\n    Node(int data1) {\n        this.data = data1;  // Initialize data with the provided value\n        this.next = null;   // Initialize next as null since it's the end of the list\n    }\n}\npublic class LinkedList {\n    public static void main(String[] args) {\n        int[] arr = {2, 5, 8, 7};\n        // Creating a new Node with the value from the array\n        Node y = new Node(arr[0]);\n        // Printing the data stored in the Node\n        System.out.println(y.data);\n    }\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> 2</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block\" data-lang=\"python\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">class Node:\n    def __init__(self, data1, next1=None):\n        self.data = data1\n        self.next = next1\n# Creating a new Node with the value from the array\ny = Node(2)\n# Printing the data stored in the Node\nprint(y.data)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> 2</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>[tabby title=\"JavaScript Code\"]</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">class Node {\n    constructor(data1, next1 = null) {\n        this.data = data1;\n        this.next = next1;\n    }\n}\n// Creating a new Node with the value from the array\nlet y = new Node(2);\n// Printing the data stored in the Node\nconsole.log(y.data);\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> 2</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Let's break this example to understand how it works:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li>The struct has two data types: <strong>data</strong> which contains the value of the node and a <strong>pointer next</strong>, which points to the next node in the list.</li><li>There is a <strong>constructor</strong> which assigns the values to a new node.</li><li>A <strong>new</strong> keyword is used to dynamically allocate memory to a node with data as arr[0].</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>The combination of the given parameters and functions initializes a linked list.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Understanding Pointers</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A <strong>pointer</strong> is a variable that <strong>stores the memory address</strong> of another variable. In simpler terms, it \"<strong>points</strong>\" to the<strong> location in memory</strong> where data is stored. This allows you to indirectly access and manipulate data by referring to its <strong>memory address.</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">int main(){\n    int x=2;\n    int* y=&amp;x; // y reference x\n    cout&lt;&lt;y&lt;&lt;'\\n';\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> 0x61ff0c</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Java does not explicitly use pointers or take the address of variables as you do in C++. Instead, we have <strong>reference variables</strong>. These reference variables do not directly contain memory addresses like pointers in languages such as C or C++. Instead, they <strong>hold references</strong> to <strong>objects</strong> <strong>in memory.</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Understanding the difference between Node and Node*:</strong> A <strong>node</strong> refers to <strong>the structure</strong> that contains data and the pointer to the next node. In contrast, Node<strong>* (Node pointer)</strong> specifically denotes a pointer variable that stores the <strong>address of the Node</strong> it is pointing to.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":12846,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/10/IntroLLDiffer.png\" alt=\"\" class=\"wp-image-12846\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">class Node {\n    public:\n        int data;         // Data stored in the node\n        Node* next;       // Pointer to the next node in the linked list\n        // Constructors\n        Node(int data1, Node* next1) {\n            data = data1;\n            next = next1;\n        }\n        // Constructor\n        Node(int data1) {\n            data = data1;\n            next = nullptr;\n        }\n};\nint main() {\n    vector&lt;int> arr = {2, 5, 8, 7};\n    // Create a Node 'x' with the first element of the vector and a null next reference\n    Node x = Node(arr[0], nullptr);\n    // Create a pointer 'y' pointing to the Node 'x'\n    Node* y = &amp;x;\n    // Print the memory address of the Node 'x' using the pointer 'y'\n    cout &lt;&lt; y &lt;&lt; '\\n';\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> 0x61fee4</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">class Node {\n    int data;         // Data stored in the node\n    Node next;        // Reference to the next node in the linked list\n    // Constructor\n    public Node(int data1, Node next1) {\n        this.data = data1;\n        this.next = next1;\n    }\n    // Constructor\n    public Node(int data1) {\n        this.data = data1;\n        this.next = null;\n    }\n}\npublic class Main {\n    public static void main(String[] args) {\n        int[] arr = {2, 5, 8, 7};\n        // Create a Node 'x' with the first element of the array\n        Node x = new Node(arr[0]);\n        // Create a reference 'y' pointing to the same Node 'x'\n        Node y = x;\n        // Print the reference 'y', which represents the memory address of the Node 'x'\n        System.out.println(y);\n    }\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> 1dbd16a6</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block\" data-lang=\"python\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">class Node:\n    def __init__(self, data1, next1=None):\n        self.data = data1\n        self.next = next1\n# Creating a Node 'x' with the first element of the array\nx = Node(2)\n# Creating a reference 'y' pointing to the same Node 'x'\ny = x\n# Printing the reference 'y', which represents the memory address of the Node 'x'\nprint(y)\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> 0x7fde9de582e0</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>[tabby title=\"JavaScript Code\"]</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">class Node {\n    constructor(data1, next1 = null) {\n        this.data = data1;\n        this.next = next1;\n    }\n}\n// Creating a Node 'x' with the first element of the array\nlet x = new Node(2);\n// Creating a reference 'y' pointing to the same Node 'x'\nlet y = x;\n// Printing the reference 'y', which represents the memory address of the Node 'x'\nconsole.log(y);\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> 1f776h</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Memory Space</strong>: </h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Let\u2019s talk about assuming the data stored is integer. Another main difference between an array and a linked list is the memory used. In the case of an array, we are storing integers that consume 4 Bytes for every int, whereas in a linked list, we are <strong>storing data</strong> and <strong>a pointer at every node</strong>, so the memory used up will depend on the configuration of the system. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:table -->\n<figure class=\"wp-block-table\"><table><tbody><tr><td class=\"has-text-align-center\" data-align=\"center\"><strong>32 Bit System</strong></td><td class=\"has-text-align-center\" data-align=\"center\"><strong>64 Bit System</strong></td></tr><tr><td class=\"has-text-align-center\" data-align=\"center\">Int - 4 Bytes</td><td class=\"has-text-align-center\" data-align=\"center\">Int - 4 Bytes</td></tr><tr><td class=\"has-text-align-center\" data-align=\"center\">Pointer - 4 Bytes</td><td class=\"has-text-align-center\" data-align=\"center\">Pointer - 8 Bytes</td></tr><tr><td class=\"has-text-align-center\" data-align=\"center\">Overall - 8 Bytes</td><td class=\"has-text-align-center\" data-align=\"center\">Overall - 12 Bytes</td></tr></tbody></table></figure>\n<!-- /wp:table -->\n\n<!-- wp:paragraph -->\n<p>Therefore, in the case of a 64 Bit system, it occupies or consumes more space than a 32 Bit system.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Applications of Linked Lists:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Creating Data Structures</strong>: Linked lists serve as the foundation for building other dynamic data structures, such as stacks and queues.</li><li><strong>Dynamic Memory Allocation</strong>: Dynamic memory allocation relies on linked lists to manage and allocate memory blocks efficiently.</li><li><strong>Web Browser</strong> is one important application of Linked List.</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Types of Linked Lists:</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:list -->\n<ul><li><strong>Singly Linked Lists</strong>: In a singly linked list, each node points to the next node in the sequence. Traversal is straightforward but limited to moving in one direction, from the head to the tail.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:image {\"id\":12847,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/10/IntroLLSingly.png\" alt=\"\" class=\"wp-image-12847\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:list -->\n<ul><li><strong>Doubly Linked Lists:</strong> In this each node points to both the next node and the previous node, thus allowing it for bidirectional connectivity.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:image {\"id\":12848,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/10/IntroLLDoubly.png\" alt=\"\" class=\"wp-image-12848\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:list -->\n<ul><li><strong>Circular Linked Lists</strong>: In a circular linked list, the last node points back to the head node, forming a closed loop.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:image {\"id\":12849,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/10/IntroLLCircular.png\" alt=\"\" class=\"wp-image-12849\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>In case you are learning DSA, you should definitely check out our free\u00a0<a href=\"https://takeuforward.org/strivers-a2z-dsa-course/strivers-a2z-dsa-course-sheet-2/\">A2Z DSA Course</a>\u00a0with videos and blogs.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to\u00a0</em><strong><a href=\"https://www.linkedin.com/in/neerav-sethi-0b6047103\" target=\"_blank\" rel=\"noreferrer noopener\">Neerav Sethi</a></strong><em>\u00a0for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,\u00a0</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->",
    "category_tag": "linked-list",
    "likes": 722,
    "preview": "Imagine you are given a task where you have to maintain a data entry of cars entering a parking lot. Since the number of cars entering will be different and may change daily, constructing a fixed-s..."
}