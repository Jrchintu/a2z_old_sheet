{
    "dislikes": 7,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:12:14 GMT+0530 (India Standard Time)",
    "slug": "length-of-loop-in-linked-list",
    "aid": "2289",
    "tuf_plus": "",
    "title": "Length of Loop in Linked List",
    "topics": [
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "linked-list",
            "topic-title": "Linked List"
        }
    ],
    "category_tag": "linked-list",
    "likes": 77,
    "preview": "Problem Statement: Given the head of a linked list, determine the length of a loop present in the linked list; if not present, return 0. Examples Example 1: Input Format: LL: 1 2 3 4 5 Output: 3 Ex...",
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement:</strong> Given the head of a<strong> linked list</strong>,<strong> </strong>determine the <strong>length</strong> of a <strong>loop</strong> present in the linked list; if not present, return <strong>0.</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n<details class=\"article_example_details\">\n<summary class=\"article_example_summary\">\n<span><strong>\nExamples\n</strong>\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"atricle_example_content\">\n<pre class=\"wp-block-preformatted\"><!-- Insert New Examples Here -->\n<p><strong>Example 1:</strong></p>\n<p><strong>Input Format</strong>:</p>\n<p>LL: 1&nbsp; 2&nbsp; 3&nbsp; 4&nbsp; 5&nbsp;</p>\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/12/tuxpi.com_.1698730326-1024x537.jpg\" alt=\"\" class=\"wp-image-13003\" width=\"512\" height=\"269\"></figure>\n<p><strong>Output</strong>: 3<br><strong>Explanation</strong>: A cycle exists in the linked list starting at node 3 -&gt; 4 -&gt; 5 and then back to 3. There are 3 nodes present in this cycle.</p>\n<p><strong>Example 2:</strong></p>\n<p><strong>Input Format:</strong></p>\n<p>LL: 1&nbsp; 2&nbsp; 3&nbsp; 4&nbsp; 9&nbsp; 9</p>\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/12/tuxpi.com_.1698730362-1024x268.jpg\" alt=\"\" class=\"wp-image-13004\" width=\"512\" height=\"134\"></figure>\n<p><strong>Output: </strong>0</p>\n<p><strong>Explanation</strong>: In this example, the linked list is linear and does not have a loop hence return 0.</p>\n</pre>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Practice Section-->\n<div class=\"practice\">\n<span><strong>Practice: </strong></span>\n<div class=\"problem-buttons\">\n\n<!-- Add Problem Link inside href -->\n<a href=\"https://tinyurl.com/5n78kcda\" target=\"_blank\" rel=\"noopener\">\n<span>Solve Problem</span>\n<img src=\"https://static.takeuforward.org/wp/uploads/2023/04/Group-11-5.png\" alt=\"code-studio\">\n</a>\n</div>\n</div>\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\nyourself first. </em></p>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<div class=\"horizontal_navbar_dsa_article\">\n<div class=\"grid_container_two\">\n<a href=\"#brute-force-approach\" class=\"two-boxes box-a\">\nBrute Force Approach\n</a>\n<a href=\"#optimal-approach\" class=\"two-boxes box-c\">\nOptimal Approach\n</a>\n<a href=\"#dsa_article_video_explanation\" class=\"three-boxes box-d\">\n<svg width=\"26\" height=\"26\" viewBox=\"0 0 20 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M8 10L13.19 7L8 4V10ZM19.56 2.17C19.69 2.64 19.78 3.27 19.84 4.07C19.91 4.87 19.94 5.56 19.94 6.16L20 7C20 9.19 19.84 10.8 19.56 11.83C19.31 12.73 18.73 13.31 17.83 13.56C17.36 13.69 16.5 13.78 15.18 13.84C13.88 13.91 12.69 13.94 11.59 13.94L10 14C5.81 14 3.2 13.84 2.17 13.56C1.27 13.31 0.69 12.73 0.44 11.83C0.31 11.36 0.22 10.73 0.16 9.93C0.0900001 9.13 0.0599999 8.44 0.0599999 7.84L0 7C0 4.81 0.16 3.2 0.44 2.17C0.69 1.27 1.27 0.69 2.17 0.44C2.64 0.31 3.5 0.22 4.82 0.16C6.12 0.0899998 7.31 0.0599999 8.41 0.0599999L10 0C14.19 0 16.8 0.16 17.83 0.44C18.73 0.69 19.31 1.27 19.56 2.17Z\" fill=\"red\"></path>\n</svg>\n\n</a>\n<div class=\"box-e tooltip\">\n<svg viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M12.842 9.25L11.9577 10.17C11.2502 10.89 10.8081 11.5 10.8081 13H8.84297V12.5C8.84297 11.39 9.28511 10.39 9.99255 9.67L11.2109 8.41C11.5745 8.05 11.7906 7.55 11.7906 7C11.7906 6.46957 11.5836 5.96086 11.2151 5.58579C10.8465 5.21071 10.3467 5 9.82552 5C9.30434 5 8.80451 5.21071 8.43598 5.58579C8.06745 5.96086 7.86041 6.46957 7.86041 7H5.89531C5.89531 5.93913 6.30938 4.92172 7.04644 4.17157C7.7835 3.42143 8.78316 3 9.82552 3C10.8679 3 11.8675 3.42143 12.6046 4.17157C13.3417 4.92172 13.7557 5.93913 13.7557 7C13.7543 7.84324 13.4259 8.65183 12.842 9.25ZM10.8081 17H8.84297V15H10.8081M9.82552 0C8.53521 0 7.25754 0.258658 6.06545 0.761205C4.87337 1.26375 3.79021 2.00035 2.87783 2.92893C1.03519 4.8043 0 7.34784 0 10C0 12.6522 1.03519 15.1957 2.87783 17.0711C3.79021 17.9997 4.87337 18.7362 6.06545 19.2388C7.25754 19.7413 8.53521 20 9.82552 20C12.4314 20 14.9306 18.9464 16.7732 17.0711C18.6158 15.1957 19.651 12.6522 19.651 10C19.651 4.47 15.2296 0 9.82552 0Z\" fill=\"black\"></path>\n</svg>\n<div class=\"bottom\">\n<p>Expand any one approach by clicking the given options in the bar. Clicking one approach on bar,\ncloses all other expands. You can manually expand more than one approach at a time</p>\n<i></i>\n</div>\n\n</div>\n</div>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Approaches Drop-Down -->\n<div class=\"dsa_article_dropdown_approachs \">\n\n<!-- Brute Force Approach Starts from here -->\n<div id=\"brute-force-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nBrute Force Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n\n<p>Finding the length of the loop of a linked list is an extension of<a href=\"https://docs.google.com/document/d/1EWzYN4C7zm-AkKCKi_RtCqHbbYXU75qBxC-zP2MVqOM/edit?usp=sharing\" target=\"_blank\" rel=\"noopener\" title=\"\"> Detection of Loop</a> so review that article and make sure you are thorough with its approaches.</p>\n<p>In recap, a loop in a linked list occurs when there is at least one node that, when used as a starting point, allows us to return to it during traversal.</p>\n<h3><strong>Approach 1: Brute Force Hashing</strong></h3>\n<p>While traversing the linked list, employ a<strong> timer</strong> against each node to keep <strong>track</strong> of the number of nodes you've visited before it. Once a <strong>previously</strong> <strong>visited</strong> <strong>node</strong> is <strong>encountered</strong> <strong>again</strong>, the length of the loop can be determined by <strong>subtracting</strong> the <strong>timer</strong> <strong>values</strong> at the two instances of visiting that particular node.</p>\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/12/tuxpi.com_.1698730756-1024x683.jpg\" alt=\"\" class=\"wp-image-13005\" width=\"768\" height=\"512\"></figure>\n<p>Hence it's important to keep <strong>track</strong> of <strong>nodes</strong> and the <strong>timer</strong> <strong>value</strong> associated with them. This can be implemented using a <strong>hashmap</strong> with nodes as the key and the timer as the value.</p>\n<h3><strong>Algorithm:</strong></h3>\n<p><strong>Step 1: Traverse</strong> through the LL using the traversal technique of assigning a <strong>temp</strong> node to the head and <strong>iterating</strong> by moving to the next element till we reach <strong>null</strong>. While traversing, keep track of the <strong>Visited nodes</strong> and the <strong>timer value</strong> associated in the map data structure.</p>\n<figure class=\"wp-block-image size-large\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/12/ll-45-692x1024.jpg\" alt=\"\" class=\"wp-image-13006\"></figure>\n<p><strong>Step 2: </strong>Continue<strong> </strong>traversing<strong> </strong>till a node that has <strong>already</strong> been <strong>visited</strong> is found. The <strong>difference</strong> between its <strong>timer</strong> <strong>value</strong> in the hashmap and the <strong>current</strong> <strong>timers</strong> <strong>value</strong> will be the length of the linked list.</p>\n<p><strong>Step 3:</strong> If the <strong>traversal</strong> is <strong>completed</strong>, and we reach the last point of the linked list which is <strong>null</strong>, it means there was <strong>no</strong> <strong>loop</strong>, hence we return <strong>false</strong>.</p>\n\n\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;iostream&gt;\n#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\n// Node class represents a\n// node in a linked list\nclass Node {\npublic:\n    // Data stored in the node\n    int data;   \n    \n    // Pointer to the next node in the list\n    Node* next;      \n\n    // Constructor with both data and\n    // next node as parameters\n    Node(int data1, Node* next1) {\n        data = data1;\n        next = next1;\n    }\n\n    // Constructor with only data as a\n    // parameter, sets next to nullptr\n    Node(int data1) {\n        data = data1;\n        next = nullptr;\n    }\n};\n\n// Function to return the length \n// of loop using hashing\n\nint lengthOfLoop(Node* head) {\n    // Hashmap to store visited\n    // nodes and their timer values\n    unordered_map&lt;Node*, int&gt; visitedNodes; \n    \n    // Initialize pointer to\n    // traverse the linked list\n    Node* temp = head; \n    \n    // Initialize timer to track\n    // visited nodes\n    int timer = 0; \n\n    // Traverse the linked list till\n    // temp reaches nullptr\n    while (temp != NULL) {\n        \n        // If revisiting a node return\n        // the difference of timer values\n        if (visitedNodes.find(temp) != visitedNodes.end()) {\n            // Calculate the length of the loop\n            int loopLength = timer - visitedNodes[temp];\n            \n            // Return the length of the loop\n            return loopLength; \n        }\n        // Store the current node and\n        // its timer value in the hashmap\n        visitedNodes[temp] = timer;\n        \n        // Move to the next node\n        temp = temp-&gt;next;\n        \n         // Increment the timer\n        timer++;\n    }\n\n    // If traversal is completed and\n    // we reach the end of the list (null)\n    // means there is no loop\n    return 0;\n}\n\n\n\nint main() {\n    // Create a sample linked\n    // list with a loop\n    \n    Node* head = new Node(1);\n    Node* second = new Node(2);\n    Node* third = new Node(3);\n    Node* fourth = new Node(4);\n    Node* fifth = new Node(5);\n\n    // Create a loop from\n    // fifth to second\n    head-&gt;next = second;\n    second-&gt;next = third;\n    third-&gt;next = fourth;\n    fourth-&gt;next = fifth;\n    \n    // This creates a loop\n    fifth-&gt;next = second; \n\n    int loopLength = lengthOfLoop(head);\n    if (loopLength &gt; 0) {\n        cout &lt;&lt; \"Length of the loop: \" &lt;&lt; loopLength &lt;&lt; endl;\n    } else {\n        cout &lt;&lt; \"No loop found in the linked list.\" &lt;&lt; endl;\n    }\n\n    return 0;\n}\n\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.HashMap;\nimport java.util.Map;\n\n// Node class represents a node\n// in a linked list\nclass Node {\n    // Data stored in the node\n    int data;        \n    // Pointer to the next node in the list\n    Node next;      \n\n    // Constructor with both data\n    // and next node as parameters\n    Node(int data1, Node next1) {\n        data = data1;\n        next = next1;\n    }\n\n    // Constructor with only data as\n    // a parameter, sets next to null\n    Node(int data1) {\n        data = data1;\n        next = null;\n    }\n}\n\npublic class Main {\n    // Function to return the length\n    // of loop using hashing\n    public static int lengthOfLoop(Node head) {\n        // Hashmap to store visited nodes\n        // and their timer values\n        Map&lt;Node, Integer&gt; visitedNodes = new HashMap&lt;&gt;();\n        \n        // Initialize pointer to \n        // raverse the linked list\n        Node temp = head;\n        \n        // Initialize timer to\n        // track visited nodes\n        int timer = 0;\n\n        // Traverse the linked list\n        // till temp reaches null\n        while (temp != null) {\n            // If revisiting a node, return\n            // the difference of timer values\n            if (visitedNodes.containsKey(temp)) {\n                // Calculate the length of the loop\n                int loopLength = timer - visitedNodes.get(temp);\n                \n                // Return the length of the loop\n                return loopLength;\n            }\n            // Store the current node and\n            // its timer value in the hashmap\n            visitedNodes.put(temp, timer);\n            \n            // Move to the next node\n            temp = temp.next;\n            \n            // Increment the timer\n            timer++;\n        }\n\n        // If traversal is completed and we\n        // reach the end of the list (null),\n        // means there is no loop\n        return 0;\n    }\n\n    public static void main(String[] args) {\n        // Create a linked list with a loop\n        Node head = new Node(1);\n        Node second = new Node(2);\n        Node third = new Node(3);\n        Node fourth = new Node(4);\n        Node fifth = new Node(5);\n\n        // Create a loop from fifth to second\n        head.next = second;\n        second.next = third;\n        third.next = fourth;\n        fourth.next = fifth;\n        \n        // This creates a loop\n        fifth.next = second; \n\n        int loopLength = lengthOfLoop(head);\n\n        if (loopLength &gt; 0) {\n            System.out.println(\"Length of the loop: \" + loopLength);\n        } else {\n            System.out.println(\"No loop found in the linked list.\");\n        }\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\nclass Node:\n    def __init__(self, data1, next1=None):\n        # Data stored in the node\n        self.data = data1\n        # Pointer to the next node\n        # in the list\n        self.next = next1\n        \n# Function to return the lenght\n# of loop when slow and fast are\n# on the same node\ndef find_length(slow, fast):\n    \n    # count to keep track of \n    # nodes encountered in loop\n    cnt = 1\n    \n    # move fast by one step\n    fast = fast.next\n    \n    # traverse fast till it \n    # reaches back to slow\n    while slow != fast:\n        \n        # at each node increase\n        # count by 1 and move fast\n        # forward by one step\n        \n        cnt += 1\n        fast = fast.next\n    \n    # loop terminates when fast reaches\n    # slow again and the count is returned\n    return cnt\n    \n# Function to find the length\n# of the loop in a linked list\ndef length_of_loop(head):\n    slow = head\n    fast = head\n    \n    # Step 1: Traverse the list to detect a loop\n    while fast is not None and fast.next is not None:\n        # Move slow one step\n        slow = slow.next\n        # Move fast two steps\n        fast = fast.next.next\n        \n        # Step 2: If the slow and fast pointers\n        # meet, there is a loop\n        if slow == fast:\n            \n            # return the number of nodes\n            # in the loop\n            return find_length(slow, fast)\n    \n    return 0\n\n\n# Create a linked list with a loop\nhead = Node(1)\nsecond = Node(2)\nthird = Node(3)\nfourth = Node(4)\nfifth = Node(5)\n\n# Create a loop from fifth to second\nhead.next = second\nsecond.next = third\nthird.next = fourth\nfourth.next = fifth\n\n# This creates a loop\nfifth.next = second\n\nloopLength = length_of_loop(head)\n\nif loopLength &gt; 0:\n    print(\"Length of the loop:\", loopLength)\nelse:\n    print(\"No loop found in the linked list.\")\n\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\nfunction Node(data1, next1) {\n    // Data stored in the node\n    this.data = data1;\n    // Pointer to the next node\n    // in the list\n    this.next = next1 || null;\n}\n\n// Function to return the\n// length of loop using hashing\nfunction lengthOfLoop(head) {\n    // Hashmap to store visited nodes\n    // and their timer values\n    var visitedNodes = {};\n    \n    // Initialize pointer to\n    // traverse the linked list\n    var temp = head;\n    \n    // Initialize timer to\n    // track visited nodes\n    var timer = 0;\n\n    // Traverse the linked list\n    // until temp reaches null\n    while (temp !== null) {\n        // If revisiting a node, return\n        // the difference of timer values\n        if (visitedNodes.hasOwnProperty(temp)) {\n            // Calculate the length of the loop\n            var loopLength = timer - visitedNodes[temp];\n            \n            // Return the length of the loop\n            return loopLength;\n        }\n        // Store the current node and\n        // its timer value in the hashmap\n        visitedNodes[temp] = timer;\n        \n        // Move to the next node\n        temp = temp.next;\n        \n        // Increment the timer\n        timer++;\n    }\n\n    // If traversal is completed and we\n    // reach the end of the list (null),\n    // it means there is no loop\n    return 0;\n}\n\n// Create a sample linked list with a loop\nvar head = new Node(1);\nvar second = new Node(2);\nvar third = new Node(3);\nvar fourth = new Node(4);\nvar fifth = new Node(5);\n\n// Create a loop from fifth to second\nhead.next = second;\nsecond.next = third;\nthird.next = fourth;\nfourth.next = fifth;\n\n// This creates a loop\nfifth.next = second;\n\nvar loopLength = lengthOfLoop(head);\n\nif (loopLength &gt; 0) {\n    console.log(\"Length of the loop:\", loopLength);\n} else {\n    console.log(\"No loop found in the linked list.\");\n}\n\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Brute Force Here -->\n<strong>Output:</strong> \nLength of the loop: 4\n\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n<!-- Insert Time and Space Complexity of Brute Force Here -->\n</p><p><strong>Time Complexity: O(N)</strong> The code <strong>traverses</strong> the <strong>entire</strong> <strong>linked</strong> <strong>list</strong> at least once, where 'N' is the number of nodes in the list. Therefore, the time complexity is <strong>linear</strong>, O(N).</p>\n<p><strong>Space Complexity: O(N) </strong>The code uses a <strong>hashmap</strong>/<strong>dictionary</strong> to store encountered nodes, which can take up to O(N) <strong>additional space</strong>, where \u2018N' is the number of nodes in the list. Hence, the <strong>space complexity</strong> is O(N) due to the use of the map to track nodes.</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Brute Force Approach Ends here -->\n\n\n<!-- Optimal Approach Starts from here -->\n\n<div id=\"optimal-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nOptimal Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm of Better Approach Here -->\n<h3><strong>Approach 2: Tortoise and Hare Algorithm</strong></h3>\n<p>The previous method uses O(N) <strong>additional</strong> <strong>memory</strong>. To enhance efficiency, the <strong>Tortoise</strong> and <strong>Hare</strong> <strong>Algorithm</strong> is introduced as an <strong>optimization</strong>.</p>\n<p>The Tortoise and Hare approach has been discussed in this <a href=\"https://takeuforward.org/data-structure/find-middle-element-in-a-linked-list/\" target=\"_blank\" rel=\"noopener\" title=\"\">article</a>.&nbsp;</p>\n<h3><strong>Algorithm</strong></h3>\n<p><strong>Step 1:</strong> Initialise two pointers, <strong>`slow`</strong> and <strong>`fast`</strong>, to the head of the linked list. <strong>`slow`</strong> will advance <strong>one</strong> <strong>step</strong> at a time, while <strong>`fast`</strong> will advance <strong>two</strong> <strong>steps</strong> at a time. These pointers will move <strong>simultaneously</strong>.</p>\n<p><strong>Step 2: </strong>Traverse the linked list with the <strong>`slow`</strong> and <strong>`fast`</strong> pointers. While traversing, repeatedly move <strong>`slow`</strong> <strong>one</strong> <strong>step</strong> and <strong>`fast`</strong> <strong>two</strong> <strong>steps</strong> at a time.</p>\n<p><strong>Step 3: </strong>Continue this traversal until one of the following conditions is met:</p>\n<ol><li><strong>`fast</strong>` or<strong> `fast.next`</strong> reaches the end of the linked list (i.e., becomes <strong>null</strong>). In this case, there is <strong>no loop</strong> in the linked list hence it is <strong>linear</strong>, and the algorithm terminates by returning <strong>0.</strong></li><li><strong>`fast`</strong> and <strong>`slow`</strong> pointers meet at the same node. This indicates the presence of a <strong>loop</strong> in the linked list as we have seen in the detection of loop.</li></ol>\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/12/WhatsApp-Image-2023-12-17-at-18.16.06-867x1024.jpg\" alt=\"\" class=\"wp-image-13074\" width=\"650\" height=\"768\"/></figure>\n<p>This is the point where the slow and fast have met proving that there is a loop in the linked list. From here onwards we start counting for the length of this loop.</p>\n<p><strong>Step 4:</strong> Initialise a <strong>counter</strong> with zero and traverse the linked list using the `<strong>fast`</strong> pointer again, but this time only move <strong>one</strong> <strong>step</strong> at a time while <strong>incrementing</strong> the counter with each node visited. As the fast pointer reaches back at the <strong>slow</strong> pointer, the value of the <strong>counter</strong> will represent the length of the loop.</p>\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/12/WhatsApp-Image-2023-12-17-at-18.20.52-922x1024.jpeg\" alt=\"\" class=\"wp-image-13068\" width=\"692\" height=\"768\"/></figure>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;iostream&gt;\n#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\n// Node class represents a\n// node in a linked list\nclass Node {\npublic:\n    // Data stored in the node\n    int data;   \n    \n    // Pointer to the next node in the list\n    Node* next;      \n\n    // Constructor with both data and\n    // next node as parameters\n    Node(int data1, Node* next1) {\n        data = data1;\n        next = next1;\n    }\n\n    // Constructor with only data as a\n    // parameter, sets next to nullptr\n    Node(int data1) {\n        data = data1;\n        next = nullptr;\n    }\n};\n\n// Function to return the lenght\n// of loop when slow and fast are\n// on the same node\nint findLength(Node* slow, Node* fast){\n    \n    // count to keep track of \n    // nodes encountered in loop\n    int cnt = 1;\n    \n    // move fast by one step\n    fast = fast-&gt;next;\n    \n    // traverse fast till it \n    // reaches back to slow\n    while(slow!=fast){\n        \n        // at each node increase\n        // count by 1 and move fast\n        // forward by one step\n        cnt++;\n        fast = fast-&gt;next;\n    }\n    \n    // loop terminates when fast reaches\n    // slow again and the count is returned\n    return cnt;\n}\n// Function to find the length\n// of the loop in a linked list\nint lengthOfLoop(Node* head) {\n    Node* slow = head;\n    Node* fast = head;\n\n    // Step 1: Traverse the list to detect a loop\n    while (fast != nullptr &amp;&amp; fast-&gt;next != nullptr) {\n        // Move slow one step\n        slow = slow-&gt;next;     \n        // Move fast two steps\n        fast = fast-&gt;next-&gt;next;\n\n        // Step 2: If the slow and fast pointers\n        // meet, there is a loop\n        if (slow == fast) {\n            // return the number of nodes\n            // in the loop\n            return findLength(slow, fast);\n        }\n    }\n\n    // Step 3: If the fast pointer\n    // reaches the end, there is no loop\n    return 0; \n}\n\n\nint main() {\n    // Create a sample linked\n    // list with a loop\n    \n    Node* head = new Node(1);\n    Node* second = new Node(2);\n    Node* third = new Node(3);\n    Node* fourth = new Node(4);\n    Node* fifth = new Node(5);\n\n    // Create a loop from\n    // fifth to second\n    head-&gt;next = second;\n    second-&gt;next = third;\n    third-&gt;next = fourth;\n    fourth-&gt;next = fifth;\n    \n    // This creates a loop\n    fifth-&gt;next = second; \n\n    int loopLength = lengthOfLoop(head);\n    if (loopLength &gt; 0) {\n        cout &lt;&lt; \"Length of the loop: \" &lt;&lt; loopLength &lt;&lt; endl;\n    } else {\n        cout &lt;&lt; \"No loop found in the linked list.\" &lt;&lt; endl;\n    }\n\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\nimport java.util.HashMap;\n\n// Node class represents a node\n// in a linked list\nclass Node {\n    // Data stored in the node\n    int data;        \n    // Pointer to the next node in the list\n    Node next;      \n\n    // Constructor with both data\n    // and next node as parameters\n    Node(int data1, Node next1) {\n        data = data1;\n        next = next1;\n    }\n\n    // Constructor with only data as\n    // a parameter, sets next to null\n    Node(int data1) {\n        data = data1;\n        next = null;\n    }\n}\n\npublic class LinkedListLoopLength {\n    \n    // Function to return the lenght\n    // of loop when slow and fast are\n    // on the same node\n    static int findLength(Node slow, Node fast){\n        \n        // count to keep track of \n        // nodes encountered in loop\n        int cnt = 1;\n        \n        // move fast by one step\n        fast = fast.next;\n        \n        // traverse fast till it \n        // reaches back to slow\n        while(slow!=fast){\n            \n            // at each node increase\n            // count by 1 and move fast\n            // forward by one step\n            cnt++;\n            fast = fast.next;\n        }\n        \n        // loop terminates when fast reaches\n        // slow again and the count is returned\n        return cnt;\n    }\n\n    // Function to find the length\n    // of the loop in a linked list\n    static int lengthOfLoop(Node head) {\n        Node slow = head;\n        Node fast = head;\n\n        // Step 1: Traverse the list to detect a loop\n        while (fast != null &amp;&amp; fast.next != null) {\n            // Move slow one step\n            slow = slow.next;  \n            \n            // Move fast two steps\n            fast = fast.next.next; \n\n            // Step 2: If the slow and fast\n            // pointers meet, there is a loop\n            if (slow == fast) {\n                return findLength(slow, fast);\n            }\n        }\n\n        // Step 3: If the fast pointer reaches the end\n        // there is no loop\n        \n        return 0; \n    }\n\n\n    public static void main(String[] args) {\n        // Create a sample linked list with a loop\n        Node head = new Node(1);\n        Node second = new Node(2);\n        Node third = new Node(3);\n        Node fourth = new Node(4);\n        Node fifth = new Node(5);\n\n        // Create a loop from fifth to second\n        head.next = second;\n        second.next = third;\n        third.next = fourth;\n        fourth.next = fifth;\n        // This creates a loop\n        fifth.next = second; \n\n        int loopLength = lengthOfLoop(head);\n        if (loopLength &gt; 0) {\n            System.out.println(\"Length of the loop: \" + loopLength);\n        } else {\n            System.out.println(\"No loop found in the linked list.\");\n        }\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\nclass Node:\n    def __init__(self, data, next=None):\n        self.data = data\n        self.next = next\n\n# Function to detect a loop in a\n# linked list using the Tortoise and Hare Algorithm\n\ndef detect_loop(head):\n    # Initialize the slow pointer at the head\n    slow = head  \n    \n     # Initialize the fast pointer at the head\n    fast = head \n\n    # Step 1: Traverse the list to detect a loop\n    while fast is not None and fast.next is not None:\n        # Move slow one step\n        slow = slow.next  \n        # Move fast two steps\n        fast = fast.next.next  \n\n        # Step 2: If the slow and fast\n        # pointers meet, there is a loop\n        if slow == fast:\n            return True\n\n    # Step 3: If the fast pointer\n    # reaches the end, there is no loop\n    return False\n\n# Function to find the length\n# of the loop in a linked list\ndef find_loop_length(head):\n    slow = head\n    fast = head\n\n    # Step 1: Traverse the list to detect a loop\n    while fast is not None and fast.next is not None:\n        # Move slow one step\n        slow = slow.next     \n        # Move fast two steps\n        fast = fast.next.next  \n\n        # Step 2: If the slow and fast\n        # pointers meet, there is a loop\n        if slow == fast:\n            # Initialize the loop length\n            length = 1  \n             # Move fast one step\n            fast = fast.next \n\n            # Step 4: Initialize a counter\n            # and traverse using the fast pointer\n            while slow != fast:\n                # Move fast one step\n                fast = fast.next  \n                # Increment the counter\n                length += 1  \n\n            # Step 6: Return the \n            # length of the loop\n            return length\n\n    # Step 3: If the fast pointer\n    # reaches the end, there is no loop\n    return 0  \n\n# Create a linked list with a loop for testing\nhead = Node(1)\nnode2 = Node(2)\nnode3 = Node(3)\nnode4 = Node(4)\nnode5 = Node(5)\n\nhead.next = node2\nnode2.next = node3\nnode3.next = node4\nnode4.next = node5\nnode5.next = node3  # Creating a loop\n\n# Check if there is a loop in the linked list\nif detect_loop(head):\n    # If there is a loop, find its length\n    length = find_loop_length(head)\n    print(f\"The length of the loop is: {length}\")\nelse:\n    print(\"No loop found in the linked list.\")\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\nfunction Node(data1, next1) {\n    // Data stored in the node\n    this.data = data1;\n    // Pointer to the next node\n    // in the list\n    this.next = next1 || null;\n}\n\n// Function to return the lenght\n// of loop when slow and fast are\n// on the same node\nfunction findLength(slow, fast) {\n    // count to keep track of \n    // nodes encountered in loop\n    let cnt = 1;\n\n    // move fast by one step\n    fast = fast.next;\n    \n    // traverse fast till it \n    // reaches back to slow\n    while (slow !== fast) {\n        \n        // at each node increase\n        // count by 1 and move fast\n        // forward by one step\n        cnt++;\n        fast = fast.next;\n    }\n    \n    // loop terminates when fast reaches\n    // slow again and the count is returned\n\n    return cnt;\n}\n\n// Function to find the length\n// of the loop in a linked list\nfunction lengthOfLoop(head) {\n    let slow = head;\n    let fast = head;\n\n    // Step 1: Traverse the list to detect a loop\n    while (fast !== null &amp;&amp; fast.next !== null) {\n        // Move slow one step\n        slow = slow.next;\n\n        // Move fast two steps\n        fast = fast.next.next;\n\n        // Step 2: If the slow and fast pointers\n        // meet, there is a loop\n        if (slow === fast) {\n            // return the number of nodes\n            // in the loop\n            return findLength(slow, fast);\n        }\n    }\n    \n    // Step 3: If the fast pointer\n    // reaches the end, there is no loop\n    return 0;\n}\n\n// Create a sample linked list with a loop\nvar head = new Node(1);\nvar second = new Node(2);\nvar third = new Node(3);\nvar fourth = new Node(4);\nvar fifth = new Node(5);\n\n// Create a loop from fifth to second\nhead.next = second;\nsecond.next = third;\nthird.next = fourth;\nfourth.next = fifth;\n\n// This creates a loop\nfifth.next = second;\n\nvar loopLength = lengthOfLoop(head);\n\nif (loopLength &gt; 0) {\n    console.log(\"Length of the loop:\", loopLength);\n} else {\n    console.log(\"No loop found in the linked list.\");\n}\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Optimal Apporach Here -->\n<strong>Output:</strong> \nLength of the loop: 4\n\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Optimal Approach-->\n</p><p><strong>Time Complexity: O(N) </strong>The code <strong>traverses</strong> the <strong>entire</strong> <strong>linked</strong> <strong>list</strong> once, where 'n' is the number of nodes in the list. This traversal has a <strong>linear</strong> <strong>time</strong> <strong>complexity</strong>, O(n).</p>\n<p><strong>Space Complexity: O(1)</strong> The code uses only a <strong>constant</strong> <strong>amount</strong> of <strong>additional</strong> <strong>space</strong>, regardless of the linked list's length. This is achieved by using two pointers (<strong>slow</strong> and <strong>fast</strong>) to detect the loop without any significant extra memory usage, resulting in <strong>constant</strong> <strong>space</strong> complexity, O(1).</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Optimal Approach Starts from here -->\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n<details>\n<summary class=\"main-summary\">\n<span>\nVideo Explanation\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"yt-video-wrapper\">\n\n<!-- Insert iframe embed Link of Youtube Video-->\n<iframe class=\"lazy-loaded\" loading=\"lazy\" title=\"Find the length of a Loop in a Linked List\" width=\"810\" height=\"456\" data-lazy-type=\"iframe\" data-src=\"https://www.youtube.com/embed/I4g1qbkTPus?si=KEGtiW6TYtjQsm61\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\" src=\"https://www.youtube.com/embed/xvNwoz-ufXA?feature=oembed\"></iframe><noscript>\n<iframe loading=\"lazy\" title=\"Find the length of a Loop in a Linked List\" width=\"810\" height=\"456\" src=\"https://www.youtube.com/embed/I4g1qbkTPus?si=KEGtiW6TYtjQsm61\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe></noscript>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script>\n\nconst codeSections = document.querySelectorAll('.code-section');\n\n// Get last selected language from localStorage or set default value\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\n// Update last selected language for all sections and store in localStorage\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\n// Handle copy button click event\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\n// Set initial state of the tabs\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<script>\nconst codeSections = document.querySelectorAll('.code-section');\n\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script src=\"https://takeuforward.org/UXApproachDropDowns/2ApproachJSScript.js\"></script>\n<!-- /wp:html -->\n\n<!-- wp:paragraph -->\n<p>In case you are learning DSA, you should definitely check out our free&nbsp;<a href=\"https://takeuforward.org/strivers-a2z-dsa-course/strivers-a2z-dsa-course-sheet-2/\" target=\"_blank\" rel=\"noopener\" title=\"\">A2Z DSA Course</a>&nbsp;with videos and blogs.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;</em><strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268\" target=\"_blank\" rel=\"noreferrer noopener\">Gauri Tomar</a></strong><em>&nbsp;for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\" target=\"_blank\" rel=\"noopener\" title=\"\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->"
}