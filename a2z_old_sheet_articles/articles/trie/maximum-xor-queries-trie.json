{
    "dislikes": 1,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:10:00 GMT+0530 (India Standard Time)",
    "slug": "maximum-xor-queries-trie",
    "aid": "1647",
    "title": "Maximum Xor Queries | Trie",
    "tuf_plus": "",
    "topics": [
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "trie",
            "topic-title": "Trie"
        }
    ],
    "content": "<p><strong>Problem Statement: </strong>  Given an array of non-negative integers and an array of queries where each query is a pair of two non-negative integers ie. [Xi, Ai]</p>\n<p>The answer to the ith query is the maximum bitwise XOR value of the Xi with any integer less than or equal to Ai in the array.</p>\n<p>Return an array consisting of the results of these queries.\nNote: If all integers are greater than \u2018Ai\u2019 in array/list \u2018ARR\u2019  then the answer to this with the query will be -1.</p>\n<div id=\"article_examples\">\n    <details class=\"article_example_details\">\n        <summary class=\"article_example_summary\">\n            <span><strong>\n                    Examples\n                </strong>\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"atricle_example_content\">\n            <pre class=\"wp-block-preformatted\">\n                <span><strong>Example :</strong></span>\n                <span><strong>Input:</strong> Given Array: [3, 10, 5, 25, 2, 8], Queries: [(0, 1), (1, 2), (0, 3), (3, 3)] </span>\n               \n                <span><strong>Output:</strong>[-1, 3, 3, 1]</span>\n                \n                <span><strong>Explanation: </strong>Result of Max XOR Queries:</span>\n                <span>Query (0,1):\n                <ol><li>We need to find the maximum XOR value of 0 with any integer less than or equal to 1 in the array.</li><li>The integers in the array less than or equal to 1 are: None.</li><li>Since there are no integers less than or equal to 1 in the array, the answer is -1.</li></ol></span>\n                <span>Query (1, 2):\n                <ol><li>We need to find the maximum XOR value of 1 with any integer less than or equal to 2 in the array.</li><li>The integers in the array less than or equal to 2 are: 2.</li><li>The XOR value is : 1 XOR 2 = 3.</li><li>The maximum XOR value is 3.</li></ol></span>\n                <span>Query (0, 3):\n                <ol><li>We need to find the maximum XOR value of 0 with any integer less than or equal to 3 in the array.</li><li>The integers in the array less than or equal to 3 are: 3, 2.</li><li>The XOR values are: 0 XOR 3 = 3, 0 XOR 2 = 2</li><li>The maximum XOR value is 3.</li></ol></span>\n                <span>Query (3, 3):\n                <ol><li>We need to find the maximum XOR value of 3 with any integer less than or equal to 3 in the array.</li><li>The integers in the array less than or equal to 3 are: 3, 2.</li><li>The XOR values are: 3 XOR 3 = 0, 3 XOR 2 = 1</li><li>The maximum XOR value is 1.</li></ol></span>\n                <span>Therefore, the output for the given example is [-1, 3, 3, 1].</span>\n\n                                      \n                <span><strong>Example 2:</strong></span>\n                <span><strong>Input:</strong> Given Array: [4, 6, 7, 10, 12], Queries: 1 5 2 10 5 3 0 7</span>\n               \n                <span><strong>Output:</strong>[7, 14, -1, 7]</span>\n                     \n                <span><strong>Explanation: </strong> Result of Max XOR Queries:</span>\n                <span>Query (1, 5):\n                <ol><li>We need to find the maximum XOR value of 1 with any integer less than or equal to 5 in the array.</li><li>The integers in the array less than or equal to 5 are 4.</li><li>The XOR values are: 1 XOR 4 = 5</li><li>The maximum XOR value is 5</li></ol></span>\n                <span>Query (2, 10):\n                <ol><li>We need to find the maximum XOR value of 2 with any integer less than or equal to 10 in the array.</li><li>The integers in the array less than or equal to 10 are 4, 6, 7, 10.</li><li>The XOR values are: 2 XOR 4 = 6, 2 XOR 6 = 4, 2 XOR 7 = 5, 2 XOR 10 = 8</li><li>The maximum XOR value is 8.</li></ol></span>\t\n                <span>Query (5, 3):\n                <ol><li>We need to find the maximum XOR value of 5 with any integer less than or equal to 3 in the array.</li><li>There are no integers in the array less than or equal to 3.</li><li>Hence the answer is -1.</li></ol></span>\n\n                <span>Query (0, 7):\n                <ol><li>We need to find the maximum XOR value of 0 with any integer less than or equal to 7 in the array.</li><li>The integers in the array less than or equal to 7 are 4, 6, 7.</li><li>The XOR values are: 0 XOR 4 = 4, 0 XOR 6 = 6, 0 XOR 7 = 7</li></ol></span>\n                <span>The maximum XOR value is 7.</span>\t\t\t\t\t\t\n\t\t\t\t\t\n            </pre>\n        </div>\n    </details>\n</div>\n\n<!-- This is Practice Section\n<div class=\"practice\">\n    <span><strong>Practice: </strong></span>\n    <div class=\"problem-buttons\">\n\n        \n        <a href=\"https://www.codingninjas.com/studio/problems/check-armstrong_589?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf\" target=\"_blank\" rel=\"noopener\">\n            <span>Solve Problem</span>\n            <img src=\"https://takeuforward-content-images.s3.ap-south-1.amazonaws.com/content/Group-11-5-pFOq-8ga\"\n                alt=\"code-studio\">\n        </a>\n    </div>\n    \n</div>-->\n\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\n        yourself first. </em></p>\n\n\n<div id=\"brute-force-approach\">\n    <details>\n        <summary class=\"main-summary\">\n            <span>\n                Optimal Approach \n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                </path>\n            </svg>\n        </summary>\n        <div class=\"common-drops\">\n            <details class=\"secondary-details\" open=\"\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Algorithm / Intuition\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <div class=\"approach-algorithm\">\n                    <!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n                    <p>This problem can be efficiently solved using a Trie where each node will represent a bit and paths from the root to the leaves will represent binary numbers.</p>\n                    <p>The XOR operation between two bits results in 1 if the bits are different and 0 if they are the same. To maximise the XOR value between two numbers, we should aim to have as many different bits as possible. This means that for each bit of the number in question, we should try to find the opposite bit in the Trie to maximise the result.</p>\n                    <p>Instead of inserting all numbers into the Trie at once, we can insert numbers incrementally and only up to the value required by the current query. This reduces unnecessary operations.</p>                    \n\n                    <h4>Algorithm </h4>\n                    <p><strong>Step 1:</strong>Create a Trie Node Structure. This structure represents a node in the Trie.\n                    <ol><li>It contains an array (\u2018links\u2019) to store links to child nodes (0 and 1).</li><li>It also contains methods for inserting numbers into the Trie and finding the maximum XOR value achievable with a given number.</li></ol></p>\n\n                   \t<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/xor-queries-image1-9qbDPXkb\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>                    \n                   \t<p>Read more about this Implementation here: <a href=\"https://takeuforward.org/data-structure/maximum-xor-of-two-numbers-in-an-array/\">Maximum XOR of Two Numbers in an Array</a></p>\n                    <p><strong>Step 2: </strong>\n                   \tInitialise a vector to store the result of queries. Sort the array of numbers and queries based on their end points. \n                   \t<ol><li>We sort the queries based on their end point so that we insert numbers into the Trie only up to the point where it is necessary for answering the current query.</li><li>This optimisation reduces the number of unnecessary Trie operations of insertion again and again.</li></ol></p>\n\n                   \t<p><strong>Step 3:</strong>  Iterate through the array of numbers and queries and for each query:\n                   \t<ol><li>Insert numbers into the Tree until the current query\u2019s endpoint then find the maximum XOR value for the query range using the Trie.</li></ol></p>\n\n                   \t<p><strong>Step 4: </strong>\n                   \tReturn the result of all queries..</p>\n\n                   \t\n                                      \t\n                   \t                       \n                </div>\n            </details>\n            <details class=\"code-section secondary-details\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Code\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <div class=\"code-tabs\">\n                    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n                    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n                    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n                    <button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n                    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\"\n                        xmlns=\"http://www.w3.org/2000/svg\">\n                        <path\n                            d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n                        </path>\n                    </svg>\n                </div>\n                <div class=\"code-content\">\n                    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"cpp\" class=\"language-cpp\">\n#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\n// Define a node structure for a trie,\n// which contains links to child nodes.\nstruct Node {\n    // Array to hold links\n    // to child nodes (0 and 1)\n    Node *links[2]; \n\n    // Function to check if a child node\n    // exists at a given index (0 or 1)\n    bool containsKey(int ind) {\n        return (links[ind] != NULL); \n    }\n\n    // Function to get the child\n    // node at a given index (0 or 1)\n    Node* get(int ind) {\n        return links[ind]; \n    }\n\n    // Function to set the child\n    // node at a given index (0 or 1)\n    void put(int ind, Node* node) {\n        links[ind] = node; \n    }\n}; \n\n// Class definition for\n// Trie data structure\nclass Trie {\nprivate: \n    // Pointer to the root\n    // node of the trie\n    Node* root; \n\npublic:\n    // Constructor to initialize the\n    // trie with an empty root node\n    Trie() {\n        root = new Node(); \n    }\n    \npublic:\n    // Function to insert a\n    // number into the trie\n    void insert(int num) {\n        // Start traversal\n        // from the root node\n        Node* node = root; \n        \n        // Traverse each bit of the number\n        // from the most significant bit\n        // to the least significant bit\n        for(int i = 31; i &gt;= 0; i--) {\n            // Extract the i-th\n            // bit of the number\n            int bit = (num &gt;&gt; i) &amp; 1; \n            \n            // If the current node doesn't\n            // have a child node at the\n            // current bit, create one\n            if(!node-&gt;containsKey(bit)) {\n                node-&gt;put(bit, new Node()); \n            }\n            \n            // Move to the child node\n            // corresponding to the current bit\n            node = node-&gt;get(bit); \n        }\n    }\n\npublic:\n    // Function to find the maximum XOR\n    // value achievable with a given number\n    int findMax(int num) {\n        // Start traversal from the root node\n        Node* node = root; \n        \n        // Initialize the maximum XOR value\n        int maxNum = 0; \n        \n        // Traverse each bit of the number\n        // from the most significant bit to\n        // the least significant bit\n        for(int i = 31; i &gt;= 0; i--) {\n            \n             // Extract the i-th\n             // bit of the number\n            int bit = (num &gt;&gt; i) &amp; 1;\n            \n            // If there exists a different bit\n            // in the trie at the current position,\n            // choose it to maximize XOR\n            if(node-&gt;containsKey(!bit)) {\n                \n                 // Set the corresponding\n                 // bit in the result\n                maxNum = maxNum | (1 &lt;&lt; i);\n                // Move to the child node\n                // with the different bit\n                node = node-&gt;get(!bit); \n            }\n            else {\n                \n                // Move to the child node\n                // with the same bit\n                node = node-&gt;get(bit); \n            }\n        }\n        \n        // Return the maximum XOR value\n        return maxNum; \n    }\n};\n\n// Function to perform offline\n// maximum XOR queries\nvector&lt;int&gt; maxXorQueries(vector&lt;int&gt; &amp;arr, vector&lt;vector&lt;int&gt;&gt; &amp;queries){\n    \n    // Initialize vector to\n    // store results of queries\n    vector&lt;int&gt; ans(queries.size(), 0); \n    \n     // Vector to store offline queries\n    vector&lt;pair&lt;int, pair&lt;int,int&gt;&gt;&gt; offlineQueries;\n    // Sort the array of numbers\n    sort(arr.begin(), arr.end()); \n    \n    int index = 0;\n    \n    // Convert queries to offline\n    // queries and store them in a vector\n    for(auto &amp;it: queries) {\n        offlineQueries.push_back({it[1],{it[0], index++}}); \n    }\n    \n    // Sort offline queries\n    // based on their end points\n    sort(offlineQueries.begin(), offlineQueries.end());\n    \n    // Pointer to iterate through\n    // the array of numbers\n    int i = 0; \n    \n    // Number of elements in the array\n    int n = arr.size(); \n    \n    // Create an instance of\n    // the Trie data structure\n    Trie trie; \n    \n    // Process each offline query\n    for(auto &amp;it : offlineQueries) {\n        // Insert numbers into the trie\n        // until the current query's end point\n        while(i &lt; n &amp;&amp; arr[i] &lt;= it.first) {\n            trie.insert(arr[i]); \n            i++; \n        }\n        \n        // If there are numbers inserted\n        // into the trie, find the maximum\n        // XOR value for the query range\n        if(i != 0) \n            ans[it.second.second] = trie.findMax(it.second.first); \n        else \n            // If no numbers inserted,\n            // set result to -1\n            ans[it.second.second] = -1; \n    }\n    // Return the results\n    // of all queries\n    return ans; \n}\n\n\nint main() {\n    vector&lt;int&gt; arr = {3, 10, 5, 25, 2, 8}; \n    cout &lt;&lt; &quot;Given Array: &quot;;\n    for(int i =0; i&lt; arr.size(); i++){\n        cout &lt;&lt; arr[i] &lt;&lt; &quot; &quot;;\n    }\n    cout &lt;&lt; endl;\n    vector&lt;vector&lt;int&gt;&gt; queries = {{0, 1}, {1, 2}, {0, 3}, {3, 3}};\n    \n    cout &lt;&lt; &quot;Queries: &quot;;\n    for(auto query: queries){\n       cout &lt;&lt; query[0] &lt;&lt; &quot; &quot; &lt;&lt; query[1] &lt;&lt; &quot;, &quot;;\n    }\n    cout &lt;&lt; endl;\n    \n    vector&lt;int&gt; result = maxXorQueries(arr, queries);\n\n    cout &lt;&lt; &quot;Result of Max XOR Queries:&quot; &lt;&lt; endl;\n    for (int i = 0; i &lt; result.size(); ++i) {\n        cout &lt;&lt; &quot;Query &quot; &lt;&lt; i+1 &lt;&lt; &quot;: &quot; &lt;&lt; result[i] &lt;&lt; endl;\n    }\n\n    return 0;\n}\n\n                            </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block \" data-lang=\"java\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\n// Define a node structure for a trie,\n// which contains links to child nodes.\nclass Node {\n    // Array to hold links\n    // to child nodes (0 and 1)\n    Node[] links;\n\n    // Constructor to initialize\n    // the array of links\n    Node() {\n        links = new Node[2];\n    }\n\n    // Function to check if a child node\n    // exists at a given index (0 or 1)\n    boolean containsKey(int ind) {\n        return (links[ind] != null);\n    }\n\n    // Function to get the child\n    // node at a given index (0 or 1)\n    Node get(int ind) {\n        return links[ind];\n    }\n\n    // Function to set the child\n    // node at a given index (0 or 1)\n    void put(int ind, Node node) {\n        links[ind] = node;\n    }\n}\n\n// Class definition for\n// Trie data structure\nclass Trie {\n    // Pointer to the root\n    // node of the trie\n    Node root;\n\n    // Constructor to initialize the\n    // trie with an empty root node\n    Trie() {\n        root = new Node();\n    }\n\n    // Function to insert a\n    // number into the trie\n    void insert(int num) {\n        // Start traversal\n        // from the root node\n        Node node = root;\n\n        // Traverse each bit of the number\n        // from the most significant bit\n        // to the least significant bit\n        for (int i = 31; i &gt;= 0; i--) {\n            // Extract the i-th\n            // bit of the number\n            int bit = (num &gt;&gt; i) &amp; 1;\n\n            // If the current node doesn't\n            // have a child node at the\n            // current bit, create one\n            if (!node.containsKey(bit)) {\n                node.put(bit, new Node());\n            }\n\n            // Move to the child node\n            // corresponding to the current bit\n            node = node.get(bit);\n        }\n    }\n\n    // Function to find the maximum XOR\n    // value achievable with a given number\n    int findMax(int num) {\n        // Start traversal from the root node\n        Node node = root;\n\n        // Initialize the maximum XOR value\n        int maxNum = 0;\n\n        // Traverse each bit of the number\n        // from the most significant bit to\n        // the least significant bit\n        for (int i = 31; i &gt;= 0; i--) {\n\n            // Extract the i-th\n            // bit of the number\n            int bit = (num &gt;&gt; i) &amp; 1;\n\n            // If there exists a different bit\n            // in the trie at the current position,\n            // choose it to maximize XOR\n            if (node.containsKey(1 - bit)) {\n\n                // Set the corresponding\n                // bit in the result\n                maxNum = maxNum | (1 &lt;&lt; i);\n                // Move to the child node\n                // with the different bit\n                node = node.get(1 - bit);\n            } else {\n\n                // Move to the child node\n                // with the same bit\n                node = node.get(bit);\n            }\n        }\n\n        // Return the maximum XOR value\n        return maxNum;\n    }\n}\n\npublic class Main {\n    // Function to perform offline\n    // maximum XOR queries\n    static int[] maxXorQueries(int[] arr, int[][] queries) {\n\n        // Initialize array to\n        // store results of queries\n        int[] ans = new int[queries.length];\n\n        // Vector to store offline queries\n        ArrayList&lt;Pair&lt;Integer, Pair&lt;Integer, Integer&gt;&gt;&gt; offlineQueries = new ArrayList&lt;&gt;();\n        // Sort the array of numbers\n        Arrays.sort(arr);\n\n        int index = 0;\n\n        // Convert queries to offline\n        // queries and store them in a vector\n        for (int[] it : queries) {\n            offlineQueries.add(new Pair&lt;&gt;(it[1], new Pair&lt;&gt;(it[0], index++)));\n        }\n\n        // Sort offline queries\n        // based on their end points\n        Collections.sort(offlineQueries);\n\n        // Pointer to iterate through\n        // the array of numbers\n        int i = 0;\n\n        // Number of elements in the array\n        int n = arr.length;\n\n        // Create an instance of\n        // the Trie data structure\n        Trie trie = new Trie();\n\n        // Process each offline query\n        for (Pair&lt;Integer, Pair&lt;Integer, Integer&gt;&gt; it : offlineQueries) {\n            // Insert numbers into the trie\n            // until the current query's end point\n            while (i &lt; n &amp;&amp; arr[i] &lt;= it.first) {\n                trie.insert(arr[i]);\n                i++;\n            }\n\n            // If there are numbers inserted\n            // into the trie, find the maximum\n            // XOR value for the query range\n            if (i != 0)\n                ans[it.second.second] = trie.findMax(it.second.first);\n            else\n                // If no numbers inserted,\n                // set result to -1\n                ans[it.second.second] = -1;\n        }\n        // Return the results\n        // of all queries\n        return ans;\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {3, 10, 5, 25, 2, 8};\n        System.out.print(&quot;Given Array: &quot;);\n        for (int i = 0; i &lt; arr.length; i++) {\n            System.out.print(arr[i] + &quot; &quot;);\n        }\n        System.out.println();\n\n        int[][] queries = {{0, 1}, {1, 2}, {0, 3}, {3, 3}};\n\n        System.out.print(&quot;Queries: &quot;);\n        for (int[] query : queries) {\n            System.out.print(query[0] + &quot; &quot; + query[1] + &quot;, &quot;);\n        }\n        System.out.println();\n\n        int[] result = maxXorQueries(arr, queries);\n\n        System.out.println(&quot;Result of Max XOR Queries:&quot;);\n        for (int i = 0; i &lt; result.length; ++i) {\n            System.out.println(&quot;Query &quot; + (i + 1) + &quot;: &quot; + result[i]);\n        }\n    }\n}\n                            </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block\" data-lang=\"python\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"python\" class=\"language-python\">\nclass Node:\n    def __init__(self):\n        # Array to hold links\n        # to child nodes (0 and 1)\n        self.links = [None, None]\n\n    # Function to check if a child node\n    # exists at a given index (0 or 1)\n    def containsKey(self, ind):\n        return self.links[ind] is not None\n\n    # Function to get the child\n    # node at a given index (0 or 1)\n    def get(self, ind):\n        return self.links[ind]\n\n    # Function to set the child\n    # node at a given index (0 or 1)\n    def put(self, ind, node):\n        self.links[ind] = node\n\n\nclass Trie:\n    def __init__(self):\n        # Pointer to the root\n        # node of the trie\n        self.root = Node()\n\n    # Function to insert a\n    # number into the trie\n    def insert(self, num):\n        # Start traversal\n        # from the root node\n        node = self.root\n\n        # Traverse each bit of the number\n        # from the most significant bit\n        # to the least significant bit\n        for i in range(31, -1, -1):\n            # Extract the i-th\n            # bit of the number\n            bit = (num &gt;&gt; i) &amp; 1\n\n            # If the current node doesn't\n            # have a child node at the\n            # current bit, create one\n            if not node.containsKey(bit):\n                node.put(bit, Node())\n\n            # Move to the child node\n            # corresponding to the current bit\n            node = node.get(bit)\n\n    # Function to find the maximum XOR\n    # value achievable with a given number\n    def findMax(self, num):\n        # Start traversal from the root node\n        node = self.root\n\n        # Initialize the maximum XOR value\n        maxNum = 0\n\n        # Traverse each bit of the number\n        # from the most significant bit to\n        # the least significant bit\n        for i in range(31, -1, -1):\n            # Extract the i-th\n            # bit of the number\n            bit = (num &gt;&gt; i) &amp; 1\n\n            # If there exists a different bit\n            # in the trie at the current position,\n            # choose it to maximize XOR\n            if node.containsKey(not bit):\n                # Set the corresponding\n                # bit in the result\n                maxNum |= (1 &lt;&lt; i)\n                # Move to the child node\n                # with the different bit\n                node = node.get(not bit)\n            else:\n                # Move to the child node\n                # with the same bit\n                node = node.get(bit)\n\n        # Return the maximum XOR value\n        return maxNum\n\n\n# Function to perform offline\n# maximum XOR queries\ndef maxXorQueries(arr, queries):\n    # Initialize list to\n    # store results of queries\n    ans = [0] * len(queries)\n\n    # Vector to store offline queries\n    offlineQueries = []\n\n    # Sort the array of numbers\n    arr.sort()\n\n    # Convert queries to offline\n    # queries and store them in a list\n    index = 0\n    for query in queries:\n        offlineQueries.append((query[1], (query[0], index)))\n        index += 1\n\n    # Sort offline queries\n    # based on their end points\n    offlineQueries.sort()\n\n    # Pointer to iterate through\n    # the array of numbers\n    i = 0\n\n    # Number of elements in the array\n    n = len(arr)\n\n    # Create an instance of\n    # the Trie data structure\n    trie = Trie()\n\n    # Process each offline query\n    for end, (start, queryIndex) in offlineQueries:\n        # Insert numbers into the trie\n        # until the current query's end point\n        while i &lt; n and arr[i] &lt;= end:\n            trie.insert(arr[i])\n            i += 1\n\n        # If there are numbers inserted\n        # into the trie, find the maximum\n        # XOR value for the query range\n        if i != 0:\n            ans[queryIndex] = trie.findMax(start)\n        else:\n            # If no numbers inserted,\n            # set result to -1\n            ans[queryIndex] = -1\n\n    # Return the results\n    # of all queries\n    return ans\n\n\nif __name__ == &quot;__main__&quot;:\n    arr = [3, 10, 5, 25, 2, 8]\n    print(&quot;Given Array:&quot;, arr)\n    queries = [[0, 1], [1, 2], [0, 3], [3, 3]]\n    print(&quot;Queries:&quot;, queries)\n\n    result = maxXorQueries(arr, queries)\n\n    print(&quot;Result of Max XOR Queries:&quot;)\n    for i, res in enumerate(result):\n        print(f&quot;Query {i+1}: {res}&quot;)\n\n                           </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block\" data-lang=\"javascript\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"javascript\" class=\"language-javascript\">\n// Define a node structure for a trie,\n// which contains links to child nodes.\nclass Node {\n    constructor() {\n        // Array to hold links\n        // to child nodes (0 and 1)\n        this.links = [null, null];\n    }\n\n    // Function to check if a child node\n    // exists at a given index (0 or 1)\n    containsKey(ind) {\n        return this.links[ind] !== null;\n    }\n\n    // Function to get the child\n    // node at a given index (0 or 1)\n    get(ind) {\n        return this.links[ind];\n    }\n\n    // Function to set the child\n    // node at a given index (0 or 1)\n    put(ind, node) {\n        this.links[ind] = node;\n    }\n}\n\n// Class definition for\n// Trie data structure\nclass Trie {\n    constructor() {\n        // Pointer to the root\n        // node of the trie\n        this.root = new Node();\n    }\n\n    // Function to insert a\n    // number into the trie\n    insert(num) {\n        // Start traversal\n        // from the root node\n        let node = this.root;\n\n        // Traverse each bit of the number\n        // from the most significant bit\n        // to the least significant bit\n        for (let i = 31; i &gt;= 0; i--) {\n            // Extract the i-th\n            // bit of the number\n            const bit = (num &gt;&gt; i) &amp; 1;\n\n            // If the current node doesn't\n            // have a child node at the\n            // current bit, create one\n            if (!node.containsKey(bit)) {\n                node.put(bit, new Node());\n            }\n\n            // Move to the child node\n            // corresponding to the current bit\n            node = node.get(bit);\n        }\n    }\n\n    // Function to find the maximum XOR\n    // value achievable with a given number\n    findMax(num) {\n        // Start traversal from the root node\n        let node = this.root;\n\n        // Initialize the maximum XOR value\n        let maxNum = 0;\n\n        // Traverse each bit of the number\n        // from the most significant bit to\n        // the least significant bit\n        for (let i = 31; i &gt;= 0; i--) {\n\n            // Extract the i-th\n            // bit of the number\n            const bit = (num &gt;&gt; i) &amp; 1;\n\n            // If there exists a different bit\n            // in the trie at the current position,\n            // choose it to maximize XOR\n            if (node.containsKey(!bit)) {\n\n                // Set the corresponding\n                // bit in the result\n                maxNum |= (1 &lt;&lt; i);\n                // Move to the child node\n                // with the different bit\n                node = node.get(!bit);\n            } else {\n\n                // Move to the child node\n                // with the same bit\n                node = node.get(bit);\n            }\n        }\n\n        // Return the maximum XOR value\n        return maxNum;\n    }\n}\n\n// Function to perform offline\n// maximum XOR queries\nfunction maxXorQueries(arr, queries) {\n\n    // Initialize vector to\n    // store results of queries\n    const ans = new Array(queries.length).fill(0);\n\n    // Vector to store offline queries\n    const offlineQueries = [];\n\n    // Sort the array of numbers\n    arr.sort((a, b) =&gt; a - b);\n\n    let index = 0;\n\n    // Convert queries to offline\n    // queries and store them in a vector\n    for (const it of queries) {\n        offlineQueries.push([it[1], [it[0], index++]]);\n    }\n\n    // Sort offline queries\n    // based on their end points\n    offlineQueries.sort((a, b) =&gt; a[0] - b[0]);\n\n    // Pointer to iterate through\n    // the array of numbers\n    let i = 0;\n\n    // Number of elements in the array\n    const n = arr.length;\n\n    // Create an instance of\n    // the Trie data structure\n    const trie = new Trie();\n\n    // Process each offline query\n    for (const it of offlineQueries) {\n        // Insert numbers into the trie\n        // until the current query's end point\n        while (i &lt; n &amp;&amp; arr[i] &lt;= it[0]) {\n            trie.insert(arr[i]);\n            i++;\n        }\n\n        // If there are numbers inserted\n        // into the trie, find the maximum\n        // XOR value for the query range\n        if (i !== 0)\n            ans[it[1][1]] = trie.findMax(it[1][0]);\n        else\n            // If no numbers inserted,\n            // set result to -1\n            ans[it[1][1]] = -1;\n    }\n    // Return the results\n    // of all queries\n    return ans;\n}\n\nconst arr = [3, 10, 5, 25, 2, 8];\nconsole.log(&quot;Given Array: &quot; + arr.join(&quot; &quot;));\nconst queries = [[0, 1], [1, 2], [0, 3], [3, 3]];\n\nconsole.log(&quot;Queries: &quot; + queries.map(query =&gt; query.join(&quot; &quot;)).join(&quot;, &quot;));\n\nconst result = maxXorQueries(arr, queries);\n\nconsole.log(&quot;Result of Max XOR Queries:&quot;);\nresult.forEach((value, index) =&gt; {\n    console.log(`Query ${index+1}: ${value}`);\n});\n\n                            </code>\n                        </pre>\n                    </div>\n                    <span><strong>Output:</strong> Given Array: 3 10 5 25 2 8 </span>\n                    <span>Queries: 0 1, 1 2, 0 3, 3 3</span>\n \t\t\t\t\t<span>Result of Max XOR Queries: Query 1: -1, Query 2: 3, Query 3: 3, Query 4: 1</span>\n\n                                   \n                </div>\n            </details>\n            <details class=\"secondary-details\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Complexity Analysis\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <p>\n                    <!-- Insert Time and Space Complexity  Here -->\n                    <p><strong>Time Complexity: O(32*N + Q(logQ) + 32*Q)</strong>\n                     where N is the size of the input array and Q is the number of queries.\n                    <ol><li>For each number in the input array, we traverse its bits from left to right (total of 32 bits). Since there are \u2018N\u2019 numbers in the array, the total time complexity is O(32*N).</li><li>Sorting the offline queries based on their endpoints requires O(Q log(Q) time using the inbuilt library for sorting.</li><li>For each query, we traverse the bits of the numbers in the Trie to find the maximum XOR value. Since each number has 32 bits and there are Q Queries, the total time complexity for processing is O(32*Q).</li></ol></p>\n\n\t\t\t\t\t<p><strong>Space Complexity: O(32*N + Q)</strong>   \n\t\t\t\t\twhere N is the size of the input array and Q is the number of queries.\n\t\t\t\t\t<ol><li>The space complexity of the Trie depends on the number of bits required to represent the numbers in the input array. Each number is represented as a sequence of 32 bits hence the space required by the Trie is O(32*N).</li><li>We store the queries and sort them based on the endpoint of each query. This requires an additional space complexity of O(Q).</li></ol></p>\n            </details>\n        </div>\n    </details>\n</div>\n\n\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n    <details>\n        <summary class=\"main-summary\">\n            <span>\n                Video Explanation\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"yt-video-wrapper\">\n            <!-- Insert iframe embed Link of Youtube Video-->\n        <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Q8LhG9Pi5KM?si=FzgoR2bPsd7Cf8BB\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n        </div>\n    </details>\n</div>\n\n<blockquote class=\"wp-block-quote\">\n    Special thanks to <strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268\">Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,<strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\"> please check out this article</a></strong>\n</blockquote>\n\n<script>\n\n    const codeSections = document.querySelectorAll('.code-section');\n\n    // Get last selected language from localStorage or set default value\n    let lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp';\n\n    codeSections.forEach((section, sectionIndex) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n        const copyBtn = section.querySelector('.copy-btn');\n\n        codeTabs.forEach((tab) => {\n            tab.addEventListener('click', () => {\n                codeTabs.forEach((t) => {\n                    t.classList.remove('dsa_article_code_active');\n                });\n                tab.classList.add('dsa_article_code_active');\n\n                const lang = tab.dataset.lang;\n                const activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                codeBlocks.forEach((block) => {\n                    if (block === activeBlock) {\n                        block.classList.add('dsa_article_code_active');\n                    } else {\n                        block.classList.remove('dsa_article_code_active');\n                    }\n                });\n\n                // Update last selected language for all sections and store in localStorage\n                lastSelectedLanguage = lang;\n                localStorage.setItem('lastSelectedLanguage', lang);\n                codeSections.forEach((otherSection, otherIndex) => {\n                    if (otherIndex !== sectionIndex) {\n                        const otherTabs = otherSection.querySelectorAll('.code-tab');\n                        otherTabs.forEach((otherTab) => {\n                            if (otherTab.dataset.lang === lang) {\n                                otherTab.classList.add('dsa_article_code_active');\n                            } else {\n                                otherTab.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                        const otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                        const otherCodeBlocks = otherSection.querySelectorAll('.code-block');\n                        otherCodeBlocks.forEach((block) => {\n                            if (block === otherActiveBlock) {\n                                block.classList.add('dsa_article_code_active');\n                            } else {\n                                block.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                    }\n                });\n            });\n        });\n\n        // Handle copy button click event\n        copyBtn.addEventListener('click', () => {\n            const activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\n            navigator.clipboard.writeText(activeBlock.innerText);\n            copyBtn.classList.add('dsa_article_code_active');\n            setTimeout(() => {\n                copyBtn.classList.remove('dsa_article_code_active');\n            }, 1000);\n        });\n    });\n\n    // Set initial state of the tabs\n    codeSections.forEach((section) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n\n        codeTabs.forEach((tab) => {\n            if (tab.dataset.lang === lastSelectedLanguage) {\n                tab.classList.add('dsa_article_code_active');\n            } else {\n                tab.classList.remove('dsa_article_code_active');\n            }\n        });\n\n        codeBlocks.forEach((block) => {\n            if (block.dataset.lang === lastSelectedLanguage) {\n                block.classList.add('dsa_article_code_active');\n            } else {\n                block.classList.remove('dsa_article_code_active');\n            }\n        });\n    });\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>",
    "category_tag": "trie",
    "likes": 10,
    "preview": "Problem Statement: Given an array of non-negative integers and an array of queries where each query is a pair of two non-negative integers ie. [Xi, Ai] The answer to the ith query is the maximum bi..."
}