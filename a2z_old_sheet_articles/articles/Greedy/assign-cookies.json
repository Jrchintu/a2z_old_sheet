{
    "dislikes": 5,
    "video": "",
    "publishedOn": "Sat Jul 06 2024 19:07:32 GMT+0530 (India Standard Time)",
    "slug": "assign-cookies",
    "aid": "2410",
    "title": "Assign Cookies",
    "tuf_plus": "",
    "topics": [
        {
            "topic-id": "greedy",
            "topic-title": "Greedy"
        }
    ],
    "content": "<p><strong>Problem Statement: </strong> Given two arrays representing children\u2019s green factor and cookie sizes, the goal is to maximise the number of content children.</p>\n<p>Each child i has a greed factor of g[i], which is the minimum size of a cookie that will make the child content. Each cookie j has a size of s[j]. If s[j] >= g[j], we can assign cookie j to child i, making the child content. Each child can only receive one cookie.</p>\n\n<div id=\"article_examples\">\n    <details class=\"article_example_details\">\n        <summary class=\"article_example_summary\">\n            <span><strong>\n                    Examples\n                </strong>\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"atricle_example_content\">\n            <pre class=\"wp-block-preformatted\">\n                <span><strong>Example 1:</strong></span>\n                <span><strong>Input:</strong>g = [1, 2, 3], s = [1, 1]\n                </span>\n                <span><strong>Output: </strong>1</span>           \n                <span><strong>Explanation: </strong> We have 3 children and 2 cookies. The greed factors of the 3 children are 1, 2, 3. The sizes of the 2 cookies are both 1. We can only make the child with greed factor 1 content. Hence, the output is 1.</span>\n                <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/assign-cookies-image1-7hfZ2T_T\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n                \n                <span><strong>Example 2:</strong></span>\n                <span><strong>Input:</strong>g = [1, 5, 3, 3, 4], s = [4, 2, 1, 2, 1, 3]\n                </span>\n                \n                <span><strong>Output: </strong>0</span>\n\n                <span><strong>Explanation: </strong>You have 5 children and 6 cookies. The greed factors of the 5 children are 1, 5, 3, 3, and 4. The sizes of the 6 cookies are 4, 2, 1, 2, 1, and 3.\n                <ol><li>The child with greed factor 1 can be satisfied with the cookie of size 1.</li><li>One child with greed factor 3 can be satisfied with the cookie of size 3.</li><li>One child with greed factor 4 can be satisfied with the cookie of size 4.</li></ol>\n                Hence, the output is 3. </span>\n                <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/assign-cookies-image2-54fpX9PR\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n                    \n            </pre>\n        </div>\n    </details>\n</div>\n\n<!-- This is Practice Section\n<div class=\"practice\">\n    <span><strong>Practice: </strong></span>\n    <div class=\"problem-buttons\">\n\n        \n        <a href=\"https://www.codingninjas.com/studio/problems/inorder-traversal_3839605?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf\" target=\"_blank\" rel=\"noopener\">\n            <span>Solve Problem</span>\n            <img src=\"https://takeuforward-content-images.s3.ap-south-1.amazonaws.com/content/Group-11-5-pFOq-8ga\"\n                alt=\"code-studio\">\n        </a>\n    </div>\n    <!--<div class=\"problem-buttons\">\n         Add Problem Link inside href \n        <a href=\"\" target=\"_blank\" rel=\"noopener\">\n            <span>Solve Problem</span>\n            <img src=\"https://cdn.iconscout.com/icon/free/png-256/free-leetcode-3521542-2944960.png?f=webp\"\n                alt=\"leetcode\">\n        </a>\n    </div>\n</div>-->\n\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\n        yourself first. </em></p>\n\n\n<div id=\"brute-force-approach\">\n    <details>\n        <summary class=\"main-summary\">\n            <span>\n                Optimal Approach \n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                </path>\n            </svg>\n        </summary>\n        <div class=\"common-drops\">\n            <details class=\"secondary-details\" open=\"\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Algorithm / Intuition\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <div class=\"approach-algorithm\">\n                    <!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n                    \n                    <p>Greedy Algorithms are approached to solve problems by making the current best choice at each stage with the hope of getting the best answer overall as well. At each step of the algorithm, we choose the best possible option available without considering the consequences of the choice in future steps.</p>\n                    <p>To solve this question, we sort the greed and cookies array to easily make decisions about which cookie to assign to which child. We then iterate over the sorted arrays comparing elements and assigning the smallest available cookie with the least greedy child.</p>\n                    <p>This way we are able to leave larger cookies for potentially gredier children so that we are able to maximise the overall satisfaction.</p>\n\n                    <h3>Algorithm: </h3>\n                    <p><strong>Step 1:</strong>Sort both the greed and cookieSize array. By sorting, we are able to pair the smallest cookies with the least greedy children, maximising overall content.</p>\n                    \n                    <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/assign-cookies-image3-LjLGwFFk\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n\n                    <p><strong>Step 2: </strong>Use two pointers, l and r to iterate through the cookieSize and greed arrays. These pointers represent the positions of the smallest available cookie and the least greedy child.</p>\n                                    \n                    <p><strong>Step 3: </strong>\n                     We iterate through the arrays, checking if the current cookie can satisfy the current child&rsquo;s greed. Ie. cookieSize[l] &gt;= greed[r].\n                     <ol><li>If the current cookie can satisfy the current child&rsquo;s greed, we move to the next child.</li>\n                     <li>Regardless of whether a child is satisfied or not, we move to the next cookie.</li></ol></p>\n                    <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/assign-cookies-image4-3rRUKxuf\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure> \n                    <p><strong>Step 4: </strong>At the end, the value of r, represents the number of children that were satisfied as we increment it each time a child\u2019s greed is satisfied. We return this value as the total number of satisfied children.</p>          \n                </div>\n            </details>\n            <details class=\"code-section secondary-details\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Code\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <div class=\"code-tabs\">\n                    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n                    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n                    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n                    <button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n                    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\"\n                        xmlns=\"http://www.w3.org/2000/svg\">\n                        <path\n                            d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n                        </path>\n                    </svg>\n                </div>\n                <div class=\"code-content\">\n                    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;vector&gt;   \n#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\n\nusing namespace std;\n\n// Function to find the maximum\n// number of content children\nint findContentChildren(vector&lt;int&gt;&amp; greed, vector&lt;int&gt;&amp; cookieSize) {\n    // Get the size of\n    // the greed array\n    int n = greed.size();\n\n    // Get the size of\n    // the cookieSize array\n    int m = cookieSize.size();\n\n    // Sort the greed factors in ascending\n    // order to try and satisfy the\n    // least greedy children first\n    sort(greed.begin(), greed.end());\n\n    // Sort the cookie sizes in ascending\n    // order to use the smallest cookies first\n    sort(cookieSize.begin(), cookieSize.end());\n\n    // Initialize a pointer for the\n    // cookieSize array, starting\n    // from the first cookie\n    int l = 0;\n\n    // Initialize a pointer for the\n    // greed array, starting from\n    // the first child\n    int r = 0;\n\n    // Iterate while there are\n    // cookies and children\n    // left to consider\n    while (l &lt; m &amp;&amp; r &lt; n) {\n        // If the current cookie can\n        // satisfy the current child's greed\n        if (greed[r] &lt;= cookieSize[l]) {\n            // Move to the next child,\n            // as the current child is satisfied\n            r++;\n        }\n        // Always move to the next cookie\n        // whether the current child\n        // was satisfied or not\n        l++;\n    }\n\n    // The value of r at the end of\n    // the loop represents the number\n    // of children that were satisfied\n    return r;\n}\n\n\nint main() {\n    vector&lt;int&gt; greed = {1, 5, 3, 3, 4};\n    vector&lt;int&gt; cookieSize = {4, 2, 1, 2, 1, 3};\n    \n    cout &lt;&lt; &quot;Array Representing Greed: &quot;;\n    for(int i = 0; i &lt; greed.size(); i++){\n        cout &lt;&lt; greed[i] &lt;&lt; &quot; &quot;;\n    }\n    cout &lt;&lt; endl;\n    cout &lt;&lt; &quot;Array Representing Cookie Size: &quot;;\n    for(int i = 0; i &lt; cookieSize.size(); i++){\n        cout &lt;&lt; cookieSize[i] &lt;&lt; &quot; &quot;;\n    }\n    \n    int ans = findContentChildren(greed, cookieSize);\n    \n    cout &lt;&lt; endl &lt;&lt; &quot;No. of kids assigned cookies &quot;&lt;&lt; ans;\n    cout &lt;&lt; endl;\n\n    return 0;\n}\n                            </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block \" data-lang=\"java\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"java\" class=\"language-java\">\nimport java.util.Arrays;\n\npublic class AssignCookies {\n    // Function to find the maximum\n    // number of content children\n    public static int findContentChildren(int[] greed, int[] cookieSize) {\n        // Get the size of\n        // the greed array\n        int n = greed.length;\n\n        // Get the size of\n        // the cookieSize array\n        int m = cookieSize.length;\n\n        // Sort the greed factors in ascending\n        // order to try and satisfy the\n        // least greedy children first\n        Arrays.sort(greed);\n\n        // Sort the cookie sizes in ascending\n        // order to use the smallest cookies first\n        Arrays.sort(cookieSize);\n\n        // Initialize a pointer for the\n        // cookieSize array, starting\n        // from the first cookie\n        int l = 0;\n\n        // Initialize a pointer for the\n        // greed array, starting from\n        // the first child\n        int r = 0;\n\n        // Iterate while there are\n        // cookies and children\n        // left to consider\n        while (l &lt; m &amp;&amp; r &lt; n) {\n            // If the current cookie can\n            // satisfy the current child's greed\n            if (greed[r] &lt;= cookieSize[l]) {\n                // Move to the next child,\n                // as the current child is satisfied\n                r++;\n            }\n            // Always move to the next cookie\n            // whether the current child\n            // was satisfied or not\n            l++;\n        }\n\n        // The value of r at the end of\n        // the loop represents the number\n        // of children that were satisfied\n        return r;\n    }\n\n    public static void main(String[] args) {\n        int[] greed = {1, 5, 3, 3, 4};\n        int[] cookieSize = {4, 2, 1, 2, 1, 3};\n        \n        System.out.print(&quot;Array Representing Greed: &quot;);\n        for (int i = 0; i &lt; greed.length; i++) {\n            System.out.print(greed[i] + &quot; &quot;);\n        }\n        System.out.println();\n        \n        System.out.print(&quot;Array Representing Cookie Size: &quot;);\n        for (int i = 0; i &lt; cookieSize.length; i++) {\n            System.out.print(cookieSize[i] + &quot; &quot;);\n        }\n\n        int ans = findContentChildren(greed, cookieSize);\n\n        System.out.println();\n        System.out.println(&quot;No. of kids assigned cookies &quot; + ans);\n        System.out.println();\n    }\n}\n                            </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block\" data-lang=\"python\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"python\" class=\"language-python\">\nfrom typing import List\n\n# Function to find the maximum\n# number of content children\ndef findContentChildren(greed: List[int], cookieSize: List[int]) -&gt; int:\n    # Get the size of\n    # the greed array\n    n = len(greed)\n\n    # Get the size of\n    # the cookieSize array\n    m = len(cookieSize)\n\n    # Sort the greed factors in ascending\n    # order to try and satisfy the\n    # least greedy children first\n    greed.sort()\n\n    # Sort the cookie sizes in ascending\n    # order to use the smallest cookies first\n    cookieSize.sort()\n\n    # Initialize a pointer for the\n    # cookieSize array, starting\n    # from the first cookie\n    l = 0\n\n    # Initialize a pointer for the\n    # greed array, starting from\n    # the first child\n    r = 0\n\n    # Iterate while there are\n    # cookies and children\n    # left to consider\n    while l &lt; m and r &lt; n:\n        # If the current cookie can\n        # satisfy the current child's greed\n        if greed[r] &lt;= cookieSize[l]:\n            # Move to the next child,\n            # as the current child is satisfied\n            r += 1\n        # Always move to the next cookie\n        # whether the current child\n        # was satisfied or not\n        l += 1\n\n    # The value of r at the end of\n    # the loop represents the number\n    # of children that were satisfied\n    return r\n\nif __name__ == &quot;__main__&quot;:\n    greed = [1, 5, 3, 3, 4]\n    cookieSize = [4, 2, 1, 2, 1, 3]\n    \n    print(&quot;Array Representing Greed: &quot;, end=&quot;&quot;)\n    for g in greed:\n        print(g, end=&quot; &quot;)\n    print()\n    \n    print(&quot;Array Representing Cookie Size: &quot;, end=&quot;&quot;)\n    for c in cookieSize:\n        print(c, end=&quot; &quot;)\n    print()\n    \n    ans = findContentChildren(greed, cookieSize)\n    \n    print(f&quot;\\nNo. of kids assigned cookies {ans}&quot;)\n                           </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block\" data-lang=\"javascript\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"javascript\" class=\"language-javascript\">\n// Function to find the maximum number of content children\nfunction findContentChildren(greed, cookieSize) {\n    // Get the size of the greed array\n    let n = greed.length;\n\n    // Get the size of the cookieSize array\n    let m = cookieSize.length;\n\n    // Sort the greed factors in ascending order\n    greed.sort((a, b) =&gt; a - b);\n\n    // Sort the cookie sizes in ascending order\n    cookieSize.sort((a, b) =&gt; a - b);\n\n    // Initialize pointers\n    let l = 0; // Pointer for cookieSize array\n    let r = 0; // Pointer for greed array\n\n    // Initialize variable to count satisfied children\n    let satisfiedChildren = 0;\n\n    // Iterate while there are cookies and children left to consider\n    while (l &lt; m &amp;&amp; r &lt; n) {\n        // If the current cookie can satisfy the current child's greed\n        if (greed[r] &lt;= cookieSize[l]) {\n            // Move to the next child\n            r++;\n            // Increment count of satisfied children\n            satisfiedChildren++;\n        }\n        // Move to the next cookie\n        l++;\n    }\n\n    // Return the number of children that were satisfied\n    return satisfiedChildren;\n}\n\n// Main function to test the findContentChildren function\nfunction main() {\n    let greed = [1, 5, 3, 3, 4];\n    let cookieSize = [4, 2, 1, 2, 1, 3];\n\n    console.log(&quot;Array Representing Greed: &quot; + greed.join(&quot; &quot;));\n    console.log(&quot;Array Representing Cookie Size: &quot; + cookieSize.join(&quot; &quot;));\n\n    let ans = findContentChildren(greed, cookieSize);\n\n    console.log(&quot;No. of kids assigned cookies: &quot; + ans);\n}\n\n// Call the main function to test the code\nmain();\n                            </code>\n                        </pre>\n                    </div>\n                    <p>\n                       <strong>Output</strong> \n                       Array Representing Greed: 1 5 3 3 4 </p>\n                       <p>Array Representing Cookie Size: 4 2 1 2 1 3</p>\n                       <p>No. of kids assigned cookies 3</p>\n                </div>\n            </details>\n            <details class=\"secondary-details\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Complexity Analysis\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <p>\n                    <!-- Insert Time and Space Complexity  Here -->\n                    <p><strong>Time Complexity: O(N logN + M logM + M)</strong>\n                     where N is the length of the greedy array, M is the length of the cookies array. To sort the greedy and cookies array, the complexity is O(N logN) and O(M logM).\n                    <ol><li>After sorting, we iterate over the arrays at most M times as M is the total number of cookies.</li><li>Since each child and each cookie is considered at most once, the time complexity of this part is linear in terms of the size of the cookie array, which is O(M).</li></ol></p>\n\n                    <p><strong>Space Complexity: O(1)</strong>  as the algorithm uses only a constant amount of extra space regardless of the size of the input array. It does not require any additional data structures that scale with the input size.</p>\n\n                </p>\n            </details>\n        </div>\n    </details>\n</div>\n\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n    <details>\n        <summary class=\"main-summary\">\n            <span>\n                Video Explanation\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"yt-video-wrapper\">\n            <!-- Insert iframe embed Link of Youtube Video-->\n        <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/DIX2p7vb9co?si=9cQEtMEmcdWe3i2b\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n        </div>\n    </details>\n</div>\n\n<blockquote class=\"wp-block-quote\">\n    Special thanks to <strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268\">Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,<strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\"> please check out this article</a></strong>\n</blockquote>\n\n<script>\n\n    const codeSections = document.querySelectorAll('.code-section');\n\n    // Get last selected language from localStorage or set default value\n    let lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp';\n\n    codeSections.forEach((section, sectionIndex) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n        const copyBtn = section.querySelector('.copy-btn');\n\n        codeTabs.forEach((tab) => {\n            tab.addEventListener('click', () => {\n                codeTabs.forEach((t) => {\n                    t.classList.remove('dsa_article_code_active');\n                });\n                tab.classList.add('dsa_article_code_active');\n\n                const lang = tab.dataset.lang;\n                const activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                codeBlocks.forEach((block) => {\n                    if (block === activeBlock) {\n                        block.classList.add('dsa_article_code_active');\n                    } else {\n                        block.classList.remove('dsa_article_code_active');\n                    }\n                });\n\n                // Update last selected language for all sections and store in localStorage\n                lastSelectedLanguage = lang;\n                localStorage.setItem('lastSelectedLanguage', lang);\n                codeSections.forEach((otherSection, otherIndex) => {\n                    if (otherIndex !== sectionIndex) {\n                        const otherTabs = otherSection.querySelectorAll('.code-tab');\n                        otherTabs.forEach((otherTab) => {\n                            if (otherTab.dataset.lang === lang) {\n                                otherTab.classList.add('dsa_article_code_active');\n                            } else {\n                                otherTab.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                        const otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                        const otherCodeBlocks = otherSection.querySelectorAll('.code-block');\n                        otherCodeBlocks.forEach((block) => {\n                            if (block === otherActiveBlock) {\n                                block.classList.add('dsa_article_code_active');\n                            } else {\n                                block.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                    }\n                });\n            });\n        });\n\n        // Handle copy button click event\n        copyBtn.addEventListener('click', () => {\n            const activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\n            navigator.clipboard.writeText(activeBlock.innerText);\n            copyBtn.classList.add('dsa_article_code_active');\n            setTimeout(() => {\n                copyBtn.classList.remove('dsa_article_code_active');\n            }, 1000);\n        });\n    });\n\n    // Set initial state of the tabs\n    codeSections.forEach((section) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n\n        codeTabs.forEach((tab) => {\n            if (tab.dataset.lang === lastSelectedLanguage) {\n                tab.classList.add('dsa_article_code_active');\n            } else {\n                tab.classList.remove('dsa_article_code_active');\n            }\n        });\n\n        codeBlocks.forEach((block) => {\n            if (block.dataset.lang === lastSelectedLanguage) {\n                block.classList.add('dsa_article_code_active');\n            } else {\n                block.classList.remove('dsa_article_code_active');\n            }\n        });\n    });\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>",
    "category_tag": "Greedy",
    "likes": 107,
    "preview": "Problem Statement: Given two arrays representing children\u2019s green factor and cookie sizes, the goal is to maximise the number of content children. Each child i has a greed factor of g[i], which is..."
}