{
    "dislikes": 4,
    "video": "",
    "publishedOn": "Sat Jul 06 2024 21:57:18 GMT+0530 (India Standard Time)",
    "slug": "lemonade-change",
    "aid": "2411",
    "title": "Lemonade Change",
    "tuf_plus": "",
    "topics": [
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "greedy",
            "topic-title": "Greedy"
        }
    ],
    "content": "<p><strong>Problem Statement: </strong> Given an array representing a queue of customers and the value of bills they hold, determine if it is possible to provide correct change to each customer. Customers can only pay with 5$, 10$ or 20$ bills and we initially do not have any change at hand.\nReturn true, if it is possible to provide correct change for each customer otherwise return false.\n</p>\n\n<div id=\"article_examples\">\n    <details class=\"article_example_details\">\n        <summary class=\"article_example_summary\">\n            <span><strong>\n                    Examples\n                </strong>\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"atricle_example_content\">\n            <pre class=\"wp-block-preformatted\">\n                <span><strong>Example 1:</strong></span>\n                <span><strong>Input: </strong>bills = [5, 5, 5, 10, 20]\n                </span>\n                <span><strong>Output: </strong>True</span>           \n                <span><strong>Explanation: </strong>\n                <ol><li>Initially we have 0 change and the queue of customers is [5, 5, 5, 10, 20].</li><li>First Customer pays 5$, no change required.</li><li>Second Customer pays 5$, no change required.</li><li>Third Customer pays 5$, no change required.</li><li>The Fourth Customer pays 10$, out of the three 5$ bills we have, we pay a 5$ bill and accept the 10$ bill.</li><li>Fifth Customer pays 20$, out of the two 5$ bills and one 10$ bill we have, we pay 15$ in change and have one 5$ bill left.</li></ol></span>\n                <span>Hence, it is possible to provide change to all customers.</span>\n                <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/lemonade-change-image1-DoABYpdQ\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n                \n                <span><strong>Example 2:</strong></span>\n                <span><strong>Input: </strong>bills = [5, 5, 10, 10, 20]\n                </span>\n                \n                <span><strong>Output: </strong>False</span>\n\n                <span><strong>Explanation: </strong>\n                <ol><li>Initially, we have 0 change and the queue of customers is [5,5,10,10,20].</li><li>The first customer pays 5$, no change required.</li><li>The second customer pays 5$, no change required.</li><li>The third customer pays 10$, we collect a 5$ bill and give back a 5$ bill.</li><li>The fourth customer pays 10$, we collect a 5$ bill and give back a 5$ bill.</li><li>The fifth customer pays 20$, we cannot give the change of $15 back because we only have two $10 bills.</li><li>Since not every customer received the correct change, the answer is false.</li></ol></span>\n                <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/lemonade-change-image2-o322D2dj\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n                    \n            </pre>\n        </div>\n    </details>\n</div>\n\n<!-- This is Practice Section\n<div class=\"practice\">\n    <span><strong>Practice: </strong></span>\n    <div class=\"problem-buttons\">\n\n        \n        <a href=\"https://www.codingninjas.com/studio/problems/inorder-traversal_3839605?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf\" target=\"_blank\" rel=\"noopener\">\n            <span>Solve Problem</span>\n            <img src=\"https://takeuforward-content-images.s3.ap-south-1.amazonaws.com/content/Group-11-5-pFOq-8ga\"\n                alt=\"code-studio\">\n        </a>\n    </div>\n    <div class=\"problem-buttons\">\n         Add Problem Link inside href \n        <a href=\"\" target=\"_blank\" rel=\"noopener\">\n            <span>Solve Problem</span>\n            <img src=\"https://cdn.iconscout.com/icon/free/png-256/free-leetcode-3521542-2944960.png?f=webp\"\n                alt=\"leetcode\">\n        </a>\n    </div>\n</div>-->\n\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\n        yourself first. </em></p>\n\n\n<div id=\"brute-force-approach\">\n    <details>\n        <summary class=\"main-summary\">\n            <span>\n                Optimal Approach \n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                </path>\n            </svg>\n        </summary>\n        <div class=\"common-drops\">\n            <details class=\"secondary-details\" open=\"\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Algorithm / Intuition\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <div class=\"approach-algorithm\">\n                    <!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n                    \n                    <p>We can approach this question by maintaining two counters to keep track of the available 5$ and 10$ bills. We iterate through the customers and provide change accordingly.</p>\n                    <p>If a customer pays with a 5$ bill, we simply keep it as we will not have to provide any change. If the customer pays with a 10$ bill, we check if there is at least one 5$ bill available to provide change and decrement the counter.</p>\n                    <p>If the customer uses a 20$ bill, we provide change using 5$ and 10$ bills or with three 5$ bills. If at any point, we are not able to provide the required change we return false.</p>\n                    <p>Otherwise, if we successfully serve all customers with the correct change, we can return true.</p>\n\n                    <h3>Algorithm: </h3>\n                    <p><strong>Step 1:</strong>Initialise two counters, fives and tens to keep track of the number of 5$ and 10$ bills at hand. Initialise them to zero as we hold no change at the starting.</p>\n\n                    <p><strong>Step 2: </strong>Loop through each bill in the bills array and check the following: If the bill is 5$, increment the fives counter.</p>\n                                    \n                    <p><strong>Step 3: </strong>\n                     If the bill is 10$, check if there are any 5$ bills available.\n                     <ol><li>If yes, provide change by incrementing the 10$ bill counter and decrementing the 5$ bill counter.</li><li>If there are no 5$ bills available, return false as we cannot provide change.</li></ol></p>\n                     \n                    <p><strong>Step 4: </strong>If the current bill is 20$, check if both 5$ and 10$ bills are available. If yes, provide change by decreasing the counter of 5$ and 10$ bills.\n                    <ol><li>If there are not enough 10$ bills available, check if there are at atleast three 5$ bills available. If yes, provide change by decreasing the 5$ counter by 3.</li><li>If not able to provide change, return false.</li></ol></p>\n                    <p><strong>Step 5: </strong>If all customers are served with the correct change, we exit out of the loop and return true.</p>        \n                </div>\n            </details>\n            <details class=\"code-section secondary-details\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Code\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <div class=\"code-tabs\">\n                    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n                    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n                    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n                    <button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n                    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\"\n                        xmlns=\"http://www.w3.org/2000/svg\">\n                        <path\n                            d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n                        </path>\n                    </svg>\n                </div>\n                <div class=\"code-content\">\n                    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\n\nusing namespace std;\n\n// Function to find whether each customer can \n// be provided with correct change\nbool lemonadeChange(vector&lt;int&gt;&amp; bills) {\n    \n    // Initialize a counter\n    // for $5 bills\n    int five = 0; \n    \n    // Initialize a counter\n    // for $10 bills\n    int ten = 0;   \n    \n    // Iterate through each customer's bill\n    for(int i = 0; i &lt; bills.size(); i++){\n        \n        // If the customer's\n        // bill is $5\n        if(bills[i] == 5){\n            \n            // Increment the\n            // count of $5 bills\n            five++;  \n        }\n        \n        // If the customer's\n        // bill is $10\n        else if(bills[i] == 10){\n            \n            // Check if there are $5\n            // bills available to give change\n            if(five){\n                 // Use one $5 bill\n                 // to give change\n                five--; \n                // Receive one $10 bill\n                ten++;   \n            }\n            \n            // If no $5 bill\n            // available, return false\n            else return false;  \n        }\n        \n        // If the customer's\n        // bill is $20\n        else {\n            // Check if there are both\n            // $5 and $10 bills\n            // available to give change\n            if(five &amp;&amp; ten){\n                 // Use one $5 bill\n                five--; \n                // Use one $10 bill\n                ten--;   \n            }\n            // If there are not enough $10 bills,\n            // check if there are at least\n            // three $5 bills available\n            else if (five &gt;= 3){\n                // Use three $5 bills\n                // to give change\n                five -= 3;  \n            }\n            // If unable to give\n            // change, return false\n            else return false;  \n        }\n    }\n    \n    // Return true if all customers\n    // are served with correct change\n    return true;  \n}\n\n\nint main() {\n    vector&lt;int&gt; bills = {5, 5, 5, 10, 20};\n    cout &lt;&lt; &quot;Queues of customers: &quot;;\n    for(int bill : bills){\n        cout &lt;&lt; bill &lt;&lt; &quot; &quot;;\n    }\n    cout &lt;&lt; endl;\n    bool ans = lemonadeChange(bills);\n    if(ans)\n        cout &lt;&lt; &quot;It is possible to provide change for all customers.&quot; &lt;&lt; endl;\n    else\n        cout &lt;&lt; &quot;It is not possible to provide change for all customers.&quot; &lt;&lt; endl;\n    return 0;\n}\n                            </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block \" data-lang=\"java\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"java\" class=\"language-java\">\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    \n    // Function to find whether each customer can \n    // be provided with correct change\n    public static boolean lemonadeChange(List&lt;Integer&gt; bills) {\n        \n        // Initialize a counter\n        // for $5 bills\n        int five = 0; \n        \n        // Initialize a counter\n        // for $10 bills\n        int ten = 0;   \n        \n        // Iterate through each customer's bill\n        for(int i = 0; i &lt; bills.size(); i++){\n            \n            // If the customer's\n            // bill is $5\n            if(bills.get(i) == 5){\n                \n                // Increment the\n                // count of $5 bills\n                five++;  \n            }\n            \n            // If the customer's\n            // bill is $10\n            else if(bills.get(i) == 10){\n                \n                // Check if there are $5\n                // bills available to give change\n                if(five &gt; 0){\n                     // Use one $5 bill\n                     // to give change\n                    five--; \n                    // Receive one $10 bill\n                    ten++;   \n                }\n                \n                // If no $5 bill\n                // available, return false\n                else return false;  \n            }\n            \n            // If the customer's\n            // bill is $20\n            else {\n                // Check if there are both\n                // $5 and $10 bills\n                // available to give change\n                if(five &gt; 0 &amp;&amp; ten &gt; 0){\n                     // Use one $5 bill\n                    five--; \n                    // Use one $10 bill\n                    ten--;   \n                }\n                // If there are not enough $10 bills,\n                // check if there are at least\n                // three $5 bills available\n                else if (five &gt;= 3){\n                    // Use three $5 bills\n                    // to give change\n                    five -= 3;  \n                }\n                // If unable to give\n                // change, return false\n                else return false;  \n            }\n        }\n        \n        // Return true if all customers\n        // are served with correct change\n        return true;  \n    }\n\n    public static void main(String[] args) {\n        List&lt;Integer&gt; bills = new ArrayList&lt;&gt;();\n        bills.add(5);\n        bills.add(5);\n        bills.add(5);\n        bills.add(10);\n        bills.add(20);\n        \n        System.out.print(&quot;Queues of customers: &quot;);\n        for(int bill : bills){\n            System.out.print(bill + &quot; &quot;);\n        }\n        System.out.println();\n        \n        boolean ans = lemonadeChange(bills);\n        if(ans)\n            System.out.println(&quot;It is possible to provide change for all customers.&quot;);\n        else\n            System.out.println(&quot;It is not possible to provide change for all customers.&quot;);\n    }\n}\n                            </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block\" data-lang=\"python\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"python\" class=\"language-python\">\n# Function to find whether each customer can \n# be provided with correct change\ndef lemonadeChange(bills):\n    \n    # Initialize a counter\n    # for $5 bills\n    five = 0 \n    \n    # Initialize a counter\n    # for $10 bills\n    ten = 0   \n    \n    # Iterate through each customer's bill\n    for bill in bills:\n        \n        # If the customer's\n        # bill is $5\n        if bill == 5:\n            \n            # Increment the\n            # count of $5 bills\n            five += 1  \n        \n        # If the customer's\n        # bill is $10\n        elif bill == 10:\n            \n            # Check if there are $5\n            # bills available to give change\n            if five:\n                 # Use one $5 bill\n                 # to give change\n                five -= 1 \n                # Receive one $10 bill\n                ten += 1   \n            \n            # If no $5 bill\n            # available, return false\n            else:\n                return False  \n        \n        # If the customer's\n        # bill is $20\n        else:\n            # Check if there are both\n            # $5 and $10 bills\n            # available to give change\n            if five and ten:\n                 # Use one $5 bill\n                five -= 1 \n                # Use one $10 bill\n                ten -= 1   \n            \n            # If there are not enough $10 bills,\n            # check if there are at least\n            # three $5 bills available\n            elif five &gt;= 3:\n                # Use three $5 bills\n                # to give change\n                five -= 3  \n            \n            # If unable to give\n            # change, return false\n            else:\n                return False  \n    \n    # Return true if all customers\n    # are served with correct change\n    return True  \n\n# Main function\ndef main():\n    bills = [5, 5, 5, 10, 20]\n    print(&quot;Queues of customers:&quot;, end=&quot; &quot;)\n    for bill in bills:\n        print(bill, end=&quot; &quot;)\n    print()\n    ans = lemonadeChange(bills)\n    if ans:\n        print(&quot;It is possible to provide change for all customers.&quot;)\n    else:\n        print(&quot;It is not possible to provide change for all customers.&quot;)\n\n# Run the main function\nif __name__ == &quot;__main__&quot;:\n    main()\n                           </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block\" data-lang=\"javascript\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"javascript\" class=\"language-javascript\">\n// Function to find whether each customer can \n// be provided with correct change\nfunction lemonadeChange(bills) {\n    \n    // Initialize a counter\n    // for $5 bills\n    let five = 0; \n    \n    // Initialize a counter\n    // for $10 bills\n    let ten = 0;   \n    \n    // Iterate through each customer's bill\n    for(let i = 0; i &lt; bills.length; i++){\n        \n        // If the customer's\n        // bill is $5\n        if(bills[i] === 5){\n            \n            // Increment the\n            // count of $5 bills\n            five++;  \n        }\n        \n        // If the customer's\n        // bill is $10\n        else if(bills[i] === 10){\n            \n            // Check if there are $5\n            // bills available to give change\n            if(five){\n                 // Use one $5 bill\n                 // to give change\n                five--; \n                // Receive one $10 bill\n                ten++;   \n            }\n            \n            // If no $5 bill\n            // available, return false\n            else return false;  \n        }\n        \n        // If the customer's\n        // bill is $20\n        else {\n            // Check if there are both\n            // $5 and $10 bills\n            // available to give change\n            if(five &amp;&amp; ten){\n                 // Use one $5 bill\n                five--; \n                // Use one $10 bill\n                ten--;   \n            }\n            // If there are not enough $10 bills,\n            // check if there are at least\n            // three $5 bills available\n            else if (five &gt;= 3){\n                // Use three $5 bills\n                // to give change\n                five -= 3;  \n            }\n            // If unable to give\n            // change, return false\n            else return false;  \n        }\n    }\n    \n    // Return true if all customers\n    // are served with correct change\n    return true;  \n}\n\n\nlet bills = [5, 5, 5, 10, 20];\nconsole.log(&quot;Queues of customers: &quot; + bills.join(&quot; &quot;));\nlet ans = lemonadeChange(bills);\nif(ans)\n    console.log(&quot;It is possible to provide change for all customers.&quot;);\nelse\n    console.log(&quot;It is not possible to provide change for all customers.&quot;);\n                            </code>\n                        </pre>\n                    </div>\n                    <p>\n                       <strong>Output</strong> \n                       Queues of customers: 5 5 5 10 20 </p>\n                       <p>It is possible to provide change for all customers.</p>\n                </div>\n            </details>\n            <details class=\"secondary-details\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Complexity Analysis\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <p>\n                    <!-- Insert Time and Space Complexity  Here -->\n                    <p><strong>Time Complexity: O(N)</strong>\n                    where N is the number of people in queue/ bills we will deal with. We iterate through each customer\u2019s bills exactly once. The loop runs for N iterations and at each iteration the operations performed are constant time.</p>\n\n                    <p><strong>Space Complexity: O(1)</strong>  as the algorithm uses only a constant amount of extra space regardless of the size of the input array. It does not require any additional data structures that scale with the input size.</p>\n\n                </p>\n            </details>\n        </div>\n    </details>\n</div>\n\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n    <details>\n        <summary class=\"main-summary\">\n            <span>\n                Video Explanation\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"yt-video-wrapper\">\n            <!-- Insert iframe embed Link of Youtube Video-->\n        <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/n_tmibEhO6Q?si=y6RVuvsELwuV8QRc\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n        </div>\n    </details>\n</div>\n\n<blockquote class=\"wp-block-quote\">\n    Special thanks to <strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268\">Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,<strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\"> please check out this article</a></strong>\n</blockquote>\n\n<script>\n\n    const codeSections = document.querySelectorAll('.code-section');\n\n    // Get last selected language from localStorage or set default value\n    let lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp';\n\n    codeSections.forEach((section, sectionIndex) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n        const copyBtn = section.querySelector('.copy-btn');\n\n        codeTabs.forEach((tab) => {\n            tab.addEventListener('click', () => {\n                codeTabs.forEach((t) => {\n                    t.classList.remove('dsa_article_code_active');\n                });\n                tab.classList.add('dsa_article_code_active');\n\n                const lang = tab.dataset.lang;\n                const activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                codeBlocks.forEach((block) => {\n                    if (block === activeBlock) {\n                        block.classList.add('dsa_article_code_active');\n                    } else {\n                        block.classList.remove('dsa_article_code_active');\n                    }\n                });\n\n                // Update last selected language for all sections and store in localStorage\n                lastSelectedLanguage = lang;\n                localStorage.setItem('lastSelectedLanguage', lang);\n                codeSections.forEach((otherSection, otherIndex) => {\n                    if (otherIndex !== sectionIndex) {\n                        const otherTabs = otherSection.querySelectorAll('.code-tab');\n                        otherTabs.forEach((otherTab) => {\n                            if (otherTab.dataset.lang === lang) {\n                                otherTab.classList.add('dsa_article_code_active');\n                            } else {\n                                otherTab.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                        const otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                        const otherCodeBlocks = otherSection.querySelectorAll('.code-block');\n                        otherCodeBlocks.forEach((block) => {\n                            if (block === otherActiveBlock) {\n                                block.classList.add('dsa_article_code_active');\n                            } else {\n                                block.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                    }\n                });\n            });\n        });\n\n        // Handle copy button click event\n        copyBtn.addEventListener('click', () => {\n            const activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\n            navigator.clipboard.writeText(activeBlock.innerText);\n            copyBtn.classList.add('dsa_article_code_active');\n            setTimeout(() => {\n                copyBtn.classList.remove('dsa_article_code_active');\n            }, 1000);\n        });\n    });\n\n    // Set initial state of the tabs\n    codeSections.forEach((section) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n\n        codeTabs.forEach((tab) => {\n            if (tab.dataset.lang === lastSelectedLanguage) {\n                tab.classList.add('dsa_article_code_active');\n            } else {\n                tab.classList.remove('dsa_article_code_active');\n            }\n        });\n\n        codeBlocks.forEach((block) => {\n            if (block.dataset.lang === lastSelectedLanguage) {\n                block.classList.add('dsa_article_code_active');\n            } else {\n                block.classList.remove('dsa_article_code_active');\n            }\n        });\n    });\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>",
    "category_tag": "Greedy",
    "likes": 60,
    "preview": "Problem Statement: Given an array representing a queue of customers and the value of bills they hold, determine if it is possible to provide correct change to each customer. Customers can only pay..."
}