{
    "dislikes": 2,
    "video": "",
    "publishedOn": "Sun Jul 07 2024 01:21:00 GMT+0530 (India Standard Time)",
    "slug": "shortest-job-first-or-sjf-cpu-scheduling",
    "aid": "2412",
    "title": "Shortest Job First (or SJF) CPU Scheduling",
    "tuf_plus": "",
    "topics": [
        {
            "topic-id": "greedy",
            "topic-title": "Greedy"
        }
    ],
    "content": "<p><strong>Problem Statement: </strong> Given a list of job durations representing the time it takes to complete each job. Implement the Shortest Job First algorithm to find the average waiting time for these jobs.\n</p>\n\n<div id=\"article_examples\">\n    <details class=\"article_example_details\">\n        <summary class=\"article_example_summary\">\n            <span><strong>\n                    Examples\n                </strong>\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"atricle_example_content\">\n            <pre class=\"wp-block-preformatted\">\n                <span><strong>Example 1:</strong></span>\n                <span><strong>Input:</strong>jobs = [3, 1, 4, 2, 5]\n                </span>\n                <span><strong>Output: </strong>4</span>           \n                <span><strong>Explanation: </strong>\n                <ol><li>The first job that will be executed is of duration 1 and the waiting time for it will be 0.</li><li>After the first job, the next shortest job with a duration of 2 will be executed with a waiting time of 1.</li><li>Following the completion of the first two jobs, the next shortest job with a duration of 3 will be executed with a waiting time of 3 (1 + 2).</li><li>Then, the job with a duration of 4 will be executed with a waiting time of 6 (1 + 2 + 3).</li><li>Finally, the job with the longest duration of 5 will be executed with a waiting time of 10 (1 + 2 + 3 + 4).</li></ol></span>\n                <span>Hence, the average waiting time is calculated as (0 + 1 + 3 + 6 + 10) / 5 = 20 / 5 = 4.</span>\n                <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/shortest-job-first-image1-B0VEIHea\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n                \n                <span><strong>Example 2:</strong></span>\n                <span><strong>Input:</strong> jobs = [4, 3, 7, 1, 2]\n                </span>\n                \n                <span><strong>Output: </strong>4</span>\n\n                <span><strong>Explanation: </strong>The first job that will be executed is of duration 1, and the waiting time for it will be 0.\n                <ol><li>After the first job, the next shortest job with a duration of 2 will be executed with a waiting time of 1.</li><li>Following the completion of the first two jobs, the next shortest job with a duration of 3 will be executed with a waiting time of 3 (1 + 2).</li><li>Then, the job with a duration of 4 will be executed with a waiting time of 6 (1 + 2 + 3).</li><li>Finally, the job with the longest duration of 7 will be executed with a waiting time of 10 (1 + 2 + 3 + 4).</li></ol></span>\n                <span>Hence, the average waiting time is calculated as (0 + 1 + 3 + 6 + 10) / 5 = 20 / 5 = 4.</span>\n                <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/shortest-job-first-image2-YKXZ7ASI\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n                    \n            </pre>\n        </div>\n    </details>\n</div>\n\n<!-- This is Practice Section\n<div class=\"practice\">\n    <span><strong>Practice: </strong></span>\n    <div class=\"problem-buttons\">\n\n        \n        <a href=\"https://www.codingninjas.com/studio/problems/inorder-traversal_3839605?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf\" target=\"_blank\" rel=\"noopener\">\n            <span>Solve Problem</span>\n            <img src=\"https://takeuforward-content-images.s3.ap-south-1.amazonaws.com/content/Group-11-5-pFOq-8ga\"\n                alt=\"code-studio\">\n        </a>\n    </div>\n    <div class=\"problem-buttons\">\n         Add Problem Link inside href \n        <a href=\"\" target=\"_blank\" rel=\"noopener\">\n            <span>Solve Problem</span>\n            <img src=\"https://cdn.iconscout.com/icon/free/png-256/free-leetcode-3521542-2944960.png?f=webp\"\n                alt=\"leetcode\">\n        </a>\n    </div>\n</div>-->\n\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\n        yourself first. </em></p>\n\n\n<div id=\"brute-force-approach\">\n    <details>\n        <summary class=\"main-summary\">\n            <span>\n                Optimal Approach \n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                </path>\n            </svg>\n        </summary>\n        <div class=\"common-drops\">\n            <details class=\"secondary-details\" open=\"\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Algorithm / Intuition\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <div class=\"approach-algorithm\">\n                    <!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n                    \n                    <p>We implement the Shortest Job Duration First algorithm using the Greedy technique by selecting the shortest job from the array. To always select the shortest job first we sort the job duration array in ascending order based on their duration.</p>\n                    <p>Once the jobs are sorted, we iterate through each job in the sorted list. For each iteration the waiting time is the sum of the total time taken by all previous jobs. We calculate the waiting time for each job and update the total time taken by adding the duration of the current job to the total waiting time.</p>\n                    <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/shortest-job-first-image2-YKXZ7ASI\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n                    <p>Finally, we compute the average waiting time by dividing the total waiting time by the number of jobs.</p>\n\n                    <h3>Algorithm: </h3>\n                    <p><strong>Step 1:</strong>Sort the jobs in ascending order based on their durations. The jobs array will now contain the job durations arranged from shortest to longest.</p>\n                    \n                    <p><strong>Step 2: </strong>Initialise variables waitTime to 0 (waiting time for that particular job) and totalTime (total waiting time for all jobs).</p>\n                                    \n                    <p><strong>Step 3: </strong>\n                    Iterate through each job in the sorted array. For each job, its waiting time is the sum of total time taken by all previous jobs. Update the total time taken by adding the duration of the current job to the total waiting time.</p>\n                     \n                    <p><strong>Step 4: </strong>After iterating through each job in the array, the average waiting is total waiting time divided by the number of jobs ie. length of the jobs array.After iterating through each job in the array, the average waiting is total waiting time divided by the number of jobs ie. length of the jobs array.</p>          \n                </div>\n            </details>\n            <details class=\"code-section secondary-details\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Code\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <div class=\"code-tabs\">\n                    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n                    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n                    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n                    <button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n                    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\"\n                        xmlns=\"http://www.w3.org/2000/svg\">\n                        <path\n                            d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n                        </path>\n                    </svg>\n                </div>\n                <div class=\"code-content\">\n                    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;vector&gt;   \n#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\n\nusing namespace std;\n\n// Function to calculate average\n// waiting time using Shortest\n// Job First algorithm\nfloat shortestJobFirst(vector&lt;int&gt; jobs) {\n    // Sort the jobs in ascending order\n    sort(jobs.begin(), jobs.end()); \n\n    // Initialize total waiting time\n    float waitTime = 0; \n    // Initialize total time taken\n    int totalTime = 0; \n    // Get the number of jobs\n    int n = jobs.size(); \n\n    // Iterate through each job\n    // to calculate waiting time\n    for(int i = 0; i &lt; n; ++i) {\n        \n        // Add current total\n        // time to waiting time\n        waitTime += totalTime; \n        \n        // Add current job's\n        // time to total time\n        totalTime += jobs[i]; \n    }\n    \n    // Return the average waiting time\n    return waitTime / n; \n}\n\nint main() {\n    vector&lt;int&gt; jobs = {4, 3, 7, 1, 2};\n    \n    cout &lt;&lt; &quot;Array Representing Job Durations: &quot;;\n    for(int i = 0; i &lt; jobs.size(); i++){\n        cout &lt;&lt; jobs[i] &lt;&lt; &quot; &quot;;\n    }\n    cout &lt;&lt; endl;\n    \n    float ans = shortestJobFirst(jobs);\n    cout &lt;&lt; &quot;Average waiting time: &quot;&lt;&lt; ans;\n    cout &lt;&lt; endl;\n\n    return 0;\n}\n                            </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block \" data-lang=\"java\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"java\" class=\"language-java\">\nimport java.util.Arrays;\n\npublic class Main {\n\n    // Function to calculate average\n    // waiting time using Shortest\n    // Job First algorithm\n    static float shortestJobFirst(int[] jobs) {\n        // Sort the jobs in ascending order\n        Arrays.sort(jobs);\n\n        // Initialize total waiting time\n        float waitTime = 0;\n        // Initialize total time taken\n        int totalTime = 0;\n        // Get the number of jobs\n        int n = jobs.length;\n\n        // Iterate through each job\n        // to calculate waiting time\n        for (int i = 0; i &lt; n; ++i) {\n\n            // Add current total\n            // time to waiting time\n            waitTime += totalTime;\n\n            // Add current job's\n            // time to total time\n            totalTime += jobs[i];\n        }\n\n        // Return the average waiting time\n        return waitTime / n;\n    }\n\n    public static void main(String[] args) {\n        int[] jobs = {4, 3, 7, 1, 2};\n\n        System.out.print(&quot;Array Representing Job Durations: &quot;);\n        for (int i = 0; i &lt; jobs.length; i++) {\n            System.out.print(jobs[i] + &quot; &quot;);\n        }\n        System.out.println();\n\n        float ans = shortestJobFirst(jobs);\n        System.out.println(&quot;Average waiting time: &quot; + ans);\n    }\n}\n                            </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block\" data-lang=\"python\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"python\" class=\"language-python\">\n# Function to calculate average\n# waiting time using Shortest\n# Job First algorithm\ndef shortest_job_first(jobs):\n    # Sort the jobs in ascending order\n    jobs.sort()\n\n    # Initialize total waiting time\n    wait_time = 0\n    # Initialize total time taken\n    total_time = 0\n    # Get the number of jobs\n    n = len(jobs)\n\n    # Iterate through each job\n    # to calculate waiting time\n    for i in range(n):\n\n        # Add current total\n        # time to waiting time\n        wait_time += total_time\n\n        # Add current job's\n        # time to total time\n        total_time += jobs[i]\n\n    # Return the average waiting time\n    return wait_time / n\n\nif __name__ == &quot;__main__&quot;:\n    jobs = [4, 3, 7, 1, 2]\n\n    print(&quot;Array Representing Job Durations:&quot;, end=&quot; &quot;)\n    for job in jobs:\n        print(job, end=&quot; &quot;)\n    print()\n\n    ans = shortest_job_first(jobs)\n    print(&quot;Average waiting time:&quot;, ans)\n                           </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block\" data-lang=\"javascript\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"javascript\" class=\"language-javascript\">\n// Function to calculate average\n// waiting time using Shortest\n// Job First algorithm\nfunction shortestJobFirst(jobs) {\n    // Sort the jobs in ascending order\n    jobs.sort((a, b) =&gt; a - b);\n\n    // Initialize total waiting time\n    let waitTime = 0;\n    // Initialize total time taken\n    let totalTime = 0;\n    // Get the number of jobs\n    const n = jobs.length;\n\n    // Iterate through each job\n    // to calculate waiting time\n    for (let i = 0; i &lt; n; ++i) {\n\n        // Add current total\n        // time to waiting time\n        waitTime += totalTime;\n\n        // Add current job's\n        // time to total time\n        totalTime += jobs[i];\n    }\n\n    // Return the average waiting time\n    return waitTime / n;\n}\n\nconst jobs = [4, 3, 7, 1, 2];\n\nconsole.log(&quot;Array Representing Job Durations:&quot;, jobs.join(&quot; &quot;));\nconst ans = shortestJobFirst(jobs);\nconsole.log(&quot;Average waiting time:&quot;, ans);\n                            </code>\n                        </pre>\n                    </div>\n                    <p>\n                       <strong>Output</strong> \n                       Array Representing Job Durations: 4 3 7 1 2 </p>\n                       <p>Average waiting time: 4</p>\n                </div>\n            </details>\n            <details class=\"secondary-details\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Complexity Analysis\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <p>\n                    <!-- Insert Time and Space Complexity  Here -->\n                    <p><strong>Time Complexity: O(N logN + N)</strong>\n                    where N is the length of the jobs array. We sort the jobs array giving complexity O(N log N) and to calculate the waiting time we iterate through the sorted array taking O(N) complexity.</p>\n\n                    <p><strong>Space Complexity: O(1)</strong>  as the algorithm uses only a constant amount of extra space regardless of the size of the input array. It does not require any additional data structures that scale with the input size.</p>\n\n                </p>\n            </details>\n        </div>\n    </details>\n</div>\n\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n    <details>\n        <summary class=\"main-summary\">\n            <span>\n                Video Explanation\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"yt-video-wrapper\">\n            <!-- Insert iframe embed Link of Youtube Video-->\n        <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/3-QbX1iDbXs?si=TM-f97qkyOnhGjHq\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n        </div>\n    </details>\n</div>\n\n<blockquote class=\"wp-block-quote\">\n    Special thanks to <strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268\">Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,<strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\"> please check out this article</a></strong>\n</blockquote>\n\n<script>\n\n    const codeSections = document.querySelectorAll('.code-section');\n\n    // Get last selected language from localStorage or set default value\n    let lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp';\n\n    codeSections.forEach((section, sectionIndex) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n        const copyBtn = section.querySelector('.copy-btn');\n\n        codeTabs.forEach((tab) => {\n            tab.addEventListener('click', () => {\n                codeTabs.forEach((t) => {\n                    t.classList.remove('dsa_article_code_active');\n                });\n                tab.classList.add('dsa_article_code_active');\n\n                const lang = tab.dataset.lang;\n                const activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                codeBlocks.forEach((block) => {\n                    if (block === activeBlock) {\n                        block.classList.add('dsa_article_code_active');\n                    } else {\n                        block.classList.remove('dsa_article_code_active');\n                    }\n                });\n\n                // Update last selected language for all sections and store in localStorage\n                lastSelectedLanguage = lang;\n                localStorage.setItem('lastSelectedLanguage', lang);\n                codeSections.forEach((otherSection, otherIndex) => {\n                    if (otherIndex !== sectionIndex) {\n                        const otherTabs = otherSection.querySelectorAll('.code-tab');\n                        otherTabs.forEach((otherTab) => {\n                            if (otherTab.dataset.lang === lang) {\n                                otherTab.classList.add('dsa_article_code_active');\n                            } else {\n                                otherTab.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                        const otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                        const otherCodeBlocks = otherSection.querySelectorAll('.code-block');\n                        otherCodeBlocks.forEach((block) => {\n                            if (block === otherActiveBlock) {\n                                block.classList.add('dsa_article_code_active');\n                            } else {\n                                block.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                    }\n                });\n            });\n        });\n\n        // Handle copy button click event\n        copyBtn.addEventListener('click', () => {\n            const activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\n            navigator.clipboard.writeText(activeBlock.innerText);\n            copyBtn.classList.add('dsa_article_code_active');\n            setTimeout(() => {\n                copyBtn.classList.remove('dsa_article_code_active');\n            }, 1000);\n        });\n    });\n\n    // Set initial state of the tabs\n    codeSections.forEach((section) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n\n        codeTabs.forEach((tab) => {\n            if (tab.dataset.lang === lastSelectedLanguage) {\n                tab.classList.add('dsa_article_code_active');\n            } else {\n                tab.classList.remove('dsa_article_code_active');\n            }\n        });\n\n        codeBlocks.forEach((block) => {\n            if (block.dataset.lang === lastSelectedLanguage) {\n                block.classList.add('dsa_article_code_active');\n            } else {\n                block.classList.remove('dsa_article_code_active');\n            }\n        });\n    });\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>",
    "category_tag": "Greedy",
    "likes": 48,
    "preview": "Problem Statement: Given a list of job durations representing the time it takes to complete each job. Implement the Shortest Job First algorithm to find the average waiting time for these jobs. Exa..."
}