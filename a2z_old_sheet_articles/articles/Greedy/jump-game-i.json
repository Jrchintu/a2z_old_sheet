{
    "dislikes": 2,
    "video": "",
    "publishedOn": "Sun Jul 07 2024 02:24:28 GMT+0530 (India Standard Time)",
    "slug": "jump-game-i",
    "aid": "2413",
    "tuf_plus": "",
    "title": "Jump Game - I",
    "topics": [
        {
            "topic-id": "greedy",
            "topic-title": "Greedy"
        }
    ],
    "category_tag": "Greedy",
    "likes": 61,
    "preview": "Problem Statement: Given an array where each element represents the maximum number of steps you can jump forward from that element, return true if we can reach the last index starting from the firs...",
    "content": "<p><strong>Problem Statement: </strong>Given an array where each element represents the maximum number of steps you can jump forward from that element, return true if we can reach the last index starting from the first index. Otherwise, return false.\n</p>\n\n<div id=\"article_examples\">\n    <details class=\"article_example_details\">\n        <summary class=\"article_example_summary\">\n            <span><strong>\n                    Examples\n                </strong>\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"atricle_example_content\">\n            <pre class=\"wp-block-preformatted\">\n                <span><strong>Example 1:</strong></span>\n                <span><strong>Input:</strong>nums = [2, 3, 1, 0, 4]\n                </span>\n                <span><strong>Output: </strong>True</span>           \n                <span><strong>Explanation: </strong>\n                <ol><li>We start at index 0, with value 2 this means we can jump to index 1 or 2.</li><li>From index 1, with value 3, we can jump to index 2, 3, or 4. However, if we jump to index 2 with value 1, we can only jump to index 3.</li><li>So we jump to index 1 then index 4 reaching the end of the array.</li></ol></span>\n                <span>Hence, we return true.</span>\n                <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/Jump-game-1-image1-TdvhhQuJ\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n                \n                <span><strong>Example 2:</strong></span>\n                <span><strong>Input:</strong>nums = [3, 2, 1, 0, 4]\n                </span>\n                \n                <span><strong>Output: </strong>False</span>\n\n                <span><strong>Explanation: </strong>\n                <ol><li>We start at index 0, with value 3 which means we can jump to index 1, 2, or 3.</li><li>From index 1, with value 2 we can only jump to index 2 or 3.</li><li>From index 2, with value 1 we can only jump to index 3.</li><li>From index 3, with value 0 we cannot jump any further.</li></ol></span>\n                <span>Hence, from all possibilities we are unable to jump to the last index so we return false.</span>\n                <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/Jump-game-1-image2-ew9pEWeZ\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n                    \n            </pre>\n        </div>\n    </details>\n</div>\n\n<!-- This is Practice Section\n<div class=\"practice\">\n    <span><strong>Practice: </strong></span>\n    <div class=\"problem-buttons\">\n\n        \n        <a href=\"https://www.codingninjas.com/studio/problems/inorder-traversal_3839605?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf\" target=\"_blank\" rel=\"noopener\">\n            <span>Solve Problem</span>\n            <img src=\"https://takeuforward-content-images.s3.ap-south-1.amazonaws.com/content/Group-11-5-pFOq-8ga\"\n                alt=\"code-studio\">\n        </a>\n    </div>\n    <div class=\"problem-buttons\">\n         Add Problem Link inside href \n        <a href=\"\" target=\"_blank\" rel=\"noopener\">\n            <span>Solve Problem</span>\n            <img src=\"https://cdn.iconscout.com/icon/free/png-256/free-leetcode-3521542-2944960.png?f=webp\"\n                alt=\"leetcode\">\n        </a>\n    </div>\n</div>-->\n\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\n        yourself first. </em></p>\n\n\n<div id=\"brute-force-approach\">\n    <details>\n        <summary class=\"main-summary\">\n            <span>\n                Optimal Approach \n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                </path>\n            </svg>\n        </summary>\n        <div class=\"common-drops\">\n            <details class=\"secondary-details\" open=\"\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Algorithm / Intuition\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <div class=\"approach-algorithm\">\n                    <!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n                    \n                    <p>A greedy algorithm makes a series of choices, each of which looks the best at the moment, with the hope that these local optimizations will lead to a globally optimal solution. The key idea is to make the best possible choice at each step without considering the overall problem. </p>\n                    <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/Jump-game-1-image2-ew9pEWeZ\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n                    <p>For this problem, we keep track of the farthest position we can reach at any point in time. We iterate over the array and keep making the greedy choice of reaching the farthest by comparing if the current index can be reached by the previous indices or not.</p>\n                    <p>If we reach an index that is beyond the farthest position we can reach, we return false. Else, we keep updating the farthest position with the maximum index we can reach from the current index.</p>\n\n                    <h3>Algorithm: </h3>\n                    <p><strong>Step 1:</strong>Initialise a variable maxIndex to keep track of the farthest index we can reach from the start</p>\n                    \n                    <p><strong>Step 2: </strong>Iterate through each index of the array and at each interaction check if the current index is greater than the maximum index we can reach so far. </p>\n                                    \n                    <p><strong>Step 3: </strong>\n                    If the current index is greater than maxIndex, it means the current index is not reachable hence we return false.</p>\n                    <figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/content/Jump-game-1-image3-GwybVWcQ\" alt=\"\" class=\"wp-image-8107\" width=\"439\" height=\"286\"/></figure>\n                     \n                    <p><strong>Step 4: </strong> But if current index is reachable we update the maxIndex to be the maximum of the current value of maxIndex and maximum index we can reach from current index ie. i + nums[i].</p>\n                    <p><strong>Step 5: </strong>If we exit the loop without returning false, it means we have reached the last index, therefore we can return a true.</p>          \n                </div>\n            </details>\n            <details class=\"code-section secondary-details\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Code\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <div class=\"code-tabs\">\n                    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n                    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n                    <button class=\"code-tab\" data-lang=\"python\">Python</button>\n                    <button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n                    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\"\n                        xmlns=\"http://www.w3.org/2000/svg\">\n                        <path\n                            d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n                        </path>\n                    </svg>\n                </div>\n                <div class=\"code-content\">\n                    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"cpp\" class=\"language-cpp\">\n#include &lt;vector&gt;   \n#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\n\nusing namespace std;\n\n// Function to determine if\n// you can reach the last index\nbool canJump(vector&lt;int&gt;&amp; nums) {\n    // Initialize the maximum\n    // index that can be reached\n    int maxIndex = 0;\n\n    // Iterate through each\n    // index of the array\n    for(int i = 0; i &lt; nums.size(); i++){\n        // If the current index is greater\n        // than the maximum reachable index\n        // it means we cannot move forward\n        // and should return false\n        if (i &gt; maxIndex){\n            return false;\n        }\n\n        // Update the maximum index\n        // that can be reached by comparing\n        // the current maxIndex with the sum of\n        // the current index and the\n        // maximum jump from that index\n        maxIndex = max(maxIndex, i + nums[i]);\n    }\n    \n    // If we complete the loop,\n    //it means we can reach the\n    // last index\n    return true;\n}\n\nint main() {\n    vector&lt;int&gt; nums = {4, 3, 7, 1, 2};\n    \n    cout &lt;&lt; &quot;Array representing maximum jump from each index: &quot;;\n    for(int i = 0; i &lt; nums.size(); i++){\n        cout &lt;&lt; nums[i] &lt;&lt; &quot; &quot;;\n    }\n    cout &lt;&lt; endl;\n    \n    bool ans = canJump(nums);\n    \n    if (ans) {\n        cout &lt;&lt; &quot;It is possible to reach the last index.&quot; &lt;&lt; endl;\n    } else {\n        cout &lt;&lt; &quot;It is not possible to reach the last index.&quot; &lt;&lt; endl;\n    }\n    \n    return 0;\n}\n                            </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block \" data-lang=\"java\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"java\" class=\"language-java\">\nimport java.util.*;\n\npublic class Main {\n    // Function to determine if\n    // you can reach the last index\n    public static boolean canJump(int[] nums) {\n        // Initialize the maximum\n        // index that can be reached\n        int maxIndex = 0;\n\n        // Iterate through each\n        // index of the array\n        for (int i = 0; i &lt; nums.length; i++) {\n            // If the current index is greater\n            // than the maximum reachable index\n            // it means we cannot move forward\n            // and should return false\n            if (i &gt; maxIndex) {\n                return false;\n            }\n\n            // Update the maximum index\n            // that can be reached by comparing\n            // the current maxIndex with the sum of\n            // the current index and the\n            // maximum jump from that index\n            maxIndex = Math.max(maxIndex, i + nums[i]);\n        }\n\n        // If we complete the loop,\n        // it means we can reach the\n        // last index\n        return true;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {4, 3, 7, 1, 2};\n\n        System.out.print(&quot;Array representing maximum jump from each index: &quot;);\n        for (int i = 0; i &lt; nums.length; i++) {\n            System.out.print(nums[i] + &quot; &quot;);\n        }\n        System.out.println();\n\n        boolean ans = canJump(nums);\n\n        if (ans) {\n            System.out.println(&quot;It is possible to reach the last index.&quot;);\n        } else {\n            System.out.println(&quot;It is not possible to reach the last index.&quot;);\n        }\n    }\n}\n                            </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block\" data-lang=\"python\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"python\" class=\"language-python\">\ndef can_jump(nums):\n    # Initialize the maximum\n    # index that can be reached\n    max_index = 0\n\n    # Iterate through each\n    # index of the array\n    for i in range(len(nums)):\n        # If the current index is greater\n        # than the maximum reachable index\n        # it means we cannot move forward\n        # and should return false\n        if i &gt; max_index:\n            return False\n\n        # Update the maximum index\n        # that can be reached by comparing\n        # the current max_index with the sum of\n        # the current index and the\n        # maximum jump from that index\n        max_index = max(max_index, i + nums[i])\n\n    # If we complete the loop,\n    # it means we can reach the\n    # last index\n    return True\n\n\ndef main():\n    nums = [4, 3, 7, 1, 2]\n\n    print(&quot;Array representing maximum jump from each index: &quot;, end=&quot;&quot;)\n    for i in range(len(nums)):\n        print(nums[i], end=&quot; &quot;)\n    print()\n\n    ans = can_jump(nums)\n\n    if ans:\n        print(&quot;It is possible to reach the last index.&quot;)\n    else:\n        print(&quot;It is not possible to reach the last index.&quot;)\n\n\nif __name__ == &quot;__main__&quot;:\n    main()\n                           </code>\n                        </pre>\n                    </div>\n                    <div class=\"code-block\" data-lang=\"javascript\">\n                        <pre class=\"wp-block-code\">\n                            <code lang=\"javascript\" class=\"language-javascript\">\nfunction canJump(nums) {\n    // Initialize the maximum\n    // index that can be reached\n    let maxIndex = 0;\n\n    // Iterate through each\n    // index of the array\n    for (let i = 0; i &lt; nums.length; i++) {\n        // If the current index is greater\n        // than the maximum reachable index\n        // it means we cannot move forward\n        // and should return false\n        if (i &gt; maxIndex) {\n            return false;\n        }\n\n        // Update the maximum index\n        // that can be reached by comparing\n        // the current maxIndex with the sum of\n        // the current index and the\n        // maximum jump from that index\n        maxIndex = Math.max(maxIndex, i + nums[i]);\n    }\n\n    // If we complete the loop,\n    // it means we can reach the\n    // last index\n    return true;\n}\n\nfunction main() {\n    let nums = [4, 3, 7, 1, 2];\n\n    console.log(&quot;Array representing maximum jump from each index: &quot;);\n    for (let i = 0; i &lt; nums.length; i++) {\n        console.log(nums[i] + &quot; &quot;);\n    }\n    console.log();\n\n    let ans = canJump(nums);\n\n    if (ans) {\n        console.log(&quot;It is possible to reach the last index.&quot;);\n    } else {\n        console.log(&quot;It is not possible to reach the last index.&quot;);\n    }\n}\n\nmain();\n                            </code>\n                        </pre>\n                    </div>\n                    <p>\n                       <strong>Output</strong> \n                       Array representing maximum jump from each index: 4 3 7 1 2 </p>\n                       <p>It is possible to reach the last index.</p>\n                </div>\n            </details>\n            <details class=\"secondary-details\">\n                <summary class=\"secondary-summary\">\n                    <span>\n                        Complexity Analysis\n                    </span>\n                    <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                        <path\n                            d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n                        </path>\n                    </svg>\n                </summary>\n                <p>\n                    <!-- Insert Time and Space Complexity  Here -->\n                    <p><strong>Time Complexity: O(N)</strong>\n                    where N is the length of the input array. We iterate through the input array exactly once and at each element perform constant time operations.</p>\n\n                    <p><strong>Space Complexity: O(1)</strong>  as the algorithm uses only a constant amount of extra space regardless of the size of the input array. It does not require any additional data structures that scale with the input size.</p>\n\n                </p>\n            </details>\n        </div>\n    </details>\n</div>\n\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n    <details>\n        <summary class=\"main-summary\">\n            <span>\n                Video Explanation\n            </span>\n            <svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                <path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n            </svg>\n        </summary>\n        <div class=\"yt-video-wrapper\">\n            <!-- Insert iframe embed Link of Youtube Video-->\n        <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/tZAa_jJ3SwQ?si=dBMMZYn-1P_vfaEo\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n        </div>\n    </details>\n</div>\n\n<blockquote class=\"wp-block-quote\">\n    Special thanks to <strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268\">Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,<strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\"> please check out this article</a></strong>\n</blockquote>\n\n<script>\n\n    const codeSections = document.querySelectorAll('.code-section');\n\n    // Get last selected language from localStorage or set default value\n    let lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp';\n\n    codeSections.forEach((section, sectionIndex) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n        const copyBtn = section.querySelector('.copy-btn');\n\n        codeTabs.forEach((tab) => {\n            tab.addEventListener('click', () => {\n                codeTabs.forEach((t) => {\n                    t.classList.remove('dsa_article_code_active');\n                });\n                tab.classList.add('dsa_article_code_active');\n\n                const lang = tab.dataset.lang;\n                const activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                codeBlocks.forEach((block) => {\n                    if (block === activeBlock) {\n                        block.classList.add('dsa_article_code_active');\n                    } else {\n                        block.classList.remove('dsa_article_code_active');\n                    }\n                });\n\n                // Update last selected language for all sections and store in localStorage\n                lastSelectedLanguage = lang;\n                localStorage.setItem('lastSelectedLanguage', lang);\n                codeSections.forEach((otherSection, otherIndex) => {\n                    if (otherIndex !== sectionIndex) {\n                        const otherTabs = otherSection.querySelectorAll('.code-tab');\n                        otherTabs.forEach((otherTab) => {\n                            if (otherTab.dataset.lang === lang) {\n                                otherTab.classList.add('dsa_article_code_active');\n                            } else {\n                                otherTab.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                        const otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\n                        const otherCodeBlocks = otherSection.querySelectorAll('.code-block');\n                        otherCodeBlocks.forEach((block) => {\n                            if (block === otherActiveBlock) {\n                                block.classList.add('dsa_article_code_active');\n                            } else {\n                                block.classList.remove('dsa_article_code_active');\n                            }\n                        });\n                    }\n                });\n            });\n        });\n\n        // Handle copy button click event\n        copyBtn.addEventListener('click', () => {\n            const activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\n            navigator.clipboard.writeText(activeBlock.innerText);\n            copyBtn.classList.add('dsa_article_code_active');\n            setTimeout(() => {\n                copyBtn.classList.remove('dsa_article_code_active');\n            }, 1000);\n        });\n    });\n\n    // Set initial state of the tabs\n    codeSections.forEach((section) => {\n        const codeTabs = section.querySelectorAll('.code-tab');\n        const codeBlocks = section.querySelectorAll('.code-block');\n\n        codeTabs.forEach((tab) => {\n            if (tab.dataset.lang === lastSelectedLanguage) {\n                tab.classList.add('dsa_article_code_active');\n            } else {\n                tab.classList.remove('dsa_article_code_active');\n            }\n        });\n\n        codeBlocks.forEach((block) => {\n            if (block.dataset.lang === lastSelectedLanguage) {\n                block.classList.add('dsa_article_code_active');\n            } else {\n                block.classList.remove('dsa_article_code_active');\n            }\n        });\n    });\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>"
}