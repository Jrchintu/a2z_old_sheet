{
    "dislikes": 7,
    "video": "edXdVwkYHF8",
    "publishedOn": "Sun Mar 24 2024 22:11:39 GMT+0530 (India Standard Time)",
    "slug": "distance-of-nearest-cell-having-1",
    "aid": "2132",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/distance-of-nearest-cell-having-one",
    "title": "Distance of Nearest Cell having 1",
    "topics": [
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "graph",
            "topic-title": "Graph"
        }
    ],
    "likes": 122,
    "category_tag": "graph",
    "preview": "Problem Statement: Given a binary grid of N*M. Find the distance of the nearest 1 in the grid for each cell. The distance is calculated as |i1 - i2| + |j1 - j2|, where i1, j1 are the row number and...",
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement: </strong>Given a binary grid of N*M. Find the distance of the nearest 1 in the grid for each cell.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The distance is calculated as |i1&nbsp; - i2| + |j1 - j2|, where i1, j1 are the row number and column number of the current cell, and i2, j2 are the row number and column number of the nearest cell having value 1.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Examples:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Example 1:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Input:</strong> </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":6544,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2022/09/image.png\" alt=\"\" class=\"wp-image-6544\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":6545,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2022/09/image-1.png\" alt=\"\" class=\"wp-image-6545\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>Explanation:&nbsp;</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">0's at (0,1), (1,2), (2,1) and (2,2) are at a distance of 1, 1, 1 and 2 from 1's at (0,0), (0,2), (2,0) and (1,1) respectively.</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p><strong>Example 2:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Input:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":6546,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2022/09/image-2.png\" alt=\"\" class=\"wp-image-6546\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":6547,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2022/09/image-3.png\" alt=\"\" class=\"wp-image-6547\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Solution</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"textColor\":\"accent\"} -->\n<p class=\"has-accent-color has-text-color\"><strong><em>Disclaimer</em></strong>: <em>Don't jump directly to the solution, try it out yourself first.</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Intuition:</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Breadth First Search, BFS, is a traversal technique where we visit the nodes level-wise, i.e., it visits the same level nodes simultaneously, and then moves to the next level.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The intuition is that BFS will take a step from cells containing 1 and will reach out to all zeros that are at a distance of one. Apparently, we can say that the nearest 1 to the 0s is at a distance of one. Again if we take another step, we will reach the next set of zeros, for these zeros 1 is at a distance of two. If we continue the same, till we can go, we can reach all the 0\u2019s possible.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We will choose the BFS algorithm as it moves step by step and we want all of them to traverse in a single step together so that we can have a minimum count with us.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Approach</strong>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Initial configuration:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>Queue:</strong> Define a queue and insert the pair of starting nodes\u2019 coordinates along with the steps (&lt;coordinates, step&gt;). For example, ((2, 1), 2) means cell (2, 1) is the source node and the nearest 1 can be found at a distance of 2 from the node.</li><li><strong>Visited array:</strong> an array initialized to 0 indicating unvisited nodes.&nbsp;&nbsp;</li><li><strong>Distance matrix: </strong>stores the distance of the nearest cell having 1 for every particular cell.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>The algorithm steps are as follows:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>Push the pair of starting points and its steps (&lt;coordinates, stept&gt;) in the queue, and mark the cell as visited.</li><li>Start the BFS traversal, pop out an element from the queue every time, and travel to all its unvisited neighbors having 0.&nbsp;</li><li>For every neighboring unvisited 0, we can mark the distance to be +1 of the current node distance and store it in the distance 2D array, and at the same time insert &lt;{row, col}, steps+1&gt; into the queue.</li><li>Repeat the steps until the queue becomes empty and then return the distance matrix where we have stored the steps.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Consider the following illustration to understand how BFS traverses the cells and calculates the distance of the nearest 1 in the grid.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"459\" height=\"459\" src=\"https://lh4.googleusercontent.com/qwCqZy-fh2piALbPFTipWPgYAagZ66uB7XtloPpz8ibMKsAzD1HbiB1NhN7asfzCxVXnZYQ_vaGnHQL_PAm1XnPockKLzer3T3Wze0dhABbjMoPGZ_d5AJwbRxGT_uheVAN6xPBLcbq3gJ6p2qNyuJfg-DdQ6PgL-Oca8LqUFEz33vAVxN5NJX3x\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>How do set boundaries for 4 directions?</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The 4 neighbors will have the following indexes:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><img width=\"318\" height=\"118\" src=\"https://lh5.googleusercontent.com/qfP6LNyZcjN5U0mGWTYx8DARGSy3s19te8xC_ouvw1tB7Tdl-SJrfx7YvG9GF_EIjqxDSK4R9opPgBLyxD-0gHiMdv-eG5itaKGP25vnWndVmg46kcawROgKTDt_ThoagBoJ1cbZWkUzhSVaC3qLJ9gWzzRqYlJ05PasbisMUopWBeOe_arXqueh\"></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now, either we can apply 4 conditions or follow the following method.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>From the above image, it is clear that the delta change in the row is -1, +0, +1, +0. Similarly, the delta change in the column is 0, +1, +0, -1.&nbsp; So we can apply the same logic to find the neighbors of a particular pixel (&lt;row, column&gt;).&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    \n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nclass Solution \n{\n    public:\n    //Function to find the distance of nearest 1 in the grid for each cell.\n\tvector&lt;vector&lt;int&gt;&gt;nearest(vector&lt;vector&lt;int&gt;&gt;grid)\n\t{\n\t    int n = grid.size(); \n\t    int m = grid[0].size(); \n\t    // visited and distance matrix\n\t    vector&lt;vector&lt;int&gt;&gt; vis(n, vector&lt;int&gt;(m, 0)); \n\t    vector&lt;vector&lt;int&gt;&gt; dist(n, vector&lt;int&gt;(m, 0)); \n\t    // &lt;coordinates, steps&gt;\n\t    queue&lt;pair&lt;pair&lt;int,int&gt;, int&gt;&gt; q; \n\t    // traverse the matrix\n\t    for(int i = 0;i&lt;n;i++) {\n\t        for(int j = 0;j&lt;m;j++) {\n\t            // start BFS if cell contains 1\n\t            if(grid[i][j] == 1) {\n\t                q.push({{i,j}, 0}); \n\t                vis[i][j] = 1; \n\t            }\n\t            else {\n\t                // mark unvisited \n\t                vis[i][j] = 0; \n\t            }\n\t        }\n\t    }\n\t    \n\t    int delrow[] = {-1, 0, +1, 0}; \n\t    int delcol[] = {0, +1, 0, -1}; \n\t    \n\t    // traverse till queue becomes empty\n\t    while(!q.empty()) {\n\t        int row = q.front().first.first; \n\t        int col = q.front().first.second; \n\t        int steps = q.front().second; \n\t        q.pop(); \n\t        dist[row][col] = steps; \n\t        // for all 4 neighbours\n\t        for(int i = 0;i&lt;4;i++) {\n\t            int nrow = row + delrow[i]; \n\t            int ncol = col + delcol[i]; \n\t            // check for valid unvisited cell\n\t            if(nrow &gt;= 0 &amp;&amp; nrow &lt; n &amp;&amp; ncol &gt;= 0 &amp;&amp; ncol &lt; m \n\t            &amp;&amp; vis[nrow][ncol] == 0) {\n\t                vis[nrow][ncol] = 1; \n\t                q.push({{nrow, ncol}, steps+1});  \n\t            }\n\t        }\n\t    }\n\t    // return distance matrix\n\t    return dist; \n\t}\n};\n\nint main(){\n    vector&lt;vector&lt;int&gt;&gt;grid{\n        {0,1,1,0},\n        {1,1,0,0},\n        {0,0,1,1}\n    };\n\t\n\tSolution obj;\n\tvector&lt;vector&lt;int&gt;&gt; ans = obj.nearest(grid);\n\t\t\n\tfor(auto i: ans){\n\t\tfor(auto j: i)\n\t\t\tcout &lt;&lt; j &lt;&lt; \" \";\n\t\tcout &lt;&lt; \"\\n\";\n\t}\n\t\n\treturn 0;\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:&nbsp;&nbsp;</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>1 0 0 1&nbsp;<br>0 0 1 1&nbsp;<br>1 1 0 0&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O(NxM + NxMx4) ~ O(N x M)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For the worst case, the BFS function will be called for (N x M) nodes, and for every node, we are traversing for 4 neighbors, so it will take O(N x M x 4) time.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(N x M) + O(N x M) + O(N x M) ~ O(N x M)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>O(N x M) for the visited array, distance matrix, and queue space takes up N x M locations at max.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\n\nclass Solution\n{\n    //Function to find distance of nearest 1 in the grid for each cell.\n    public int[][] nearest(int[][] grid)\n    {\n        int n = grid.length; \n\t    int m = grid[0].length; \n\t    // visited and distance matrix\n\t    int vis[][] = new int[n][m]; \n\t    int dist[][] = new int[n][m]; \n\t    // &lt;coordinates, steps&gt;\n\t    Queue&lt;Node&gt; q = new LinkedList&lt;Node&gt;();\n\t    // traverse the matrix\n\t    for(int i = 0;i&lt;n;i++) {\n\t        for(int j = 0;j&lt;m;j++) {\n\t        // start BFS if cell contains 1\n\t            if(grid[i][j] == 1) {\n\t                q.add(new Node(i, j, 0)); \n\t                vis[i][j] = 1; \n\t            }\n\t            else {\n\t                // mark unvisted \n\t                vis[i][j] = 0; \n\t            }\n\t        }\n\t    }\n\t    \n\t    \n\t    \n\t    int delrow[] = {-1, 0, +1, 0}; \n\t    int delcol[] = {0, +1, 0, -1}; \n\t    \n\t    \n\t    // n x m x 4 \n\t    // traverse till queue becomes empty\n\t    while(!q.isEmpty()) {\n\t        int row = q.peek().first; \n\t        int col = q.peek().second; \n\t        int steps = q.peek().third; \n\t        q.remove(); \n\t        dist[row][col] = steps; \n\t        // for all 4 neighbours\n\t        for(int i = 0;i&lt;4;i++) {\n\t            int nrow = row + delrow[i]; \n\t            int ncol = col + delcol[i]; \n\t            // check for valid unvisited cell\n\t            if(nrow &gt;= 0 &amp;&amp; nrow &lt; n &amp;&amp; ncol &gt;= 0 &amp;&amp; ncol &lt; m\n\t            &amp;&amp; vis[nrow][ncol] == 0)  {\n\t                    vis[nrow][ncol] = 1; \n    \t            q.add(new Node(nrow, ncol, steps+1));  \n\t            } \n\t            }\n\t        }\n\t    \n\t    // return distance matrix\n\t    return dist; \n    }\n     public static void main(String[] args)\n    {\n        int[][] grid = {\n            {0,1,1,0},\n            {1,1,0,0},\n            {0,0,1,1}\n        };\n\n        Solution obj = new Solution();\n        int[][] ans = obj.nearest(grid);\n        for(int i = 0; i &lt; ans.length; i++){\n            for(int j = 0; j &lt; ans[i].length; j++){\n                System.out.print(ans[i][j] + \" \"); \n            }\n            System.out.println();\n        }\n    }\n}\n\nclass Node {\n    int first;\n    int second;\n    int third; \n    Node(int _first, int _second, int _third) {\n        this.first = _first; \n        this.second = _second; \n        this.third = _third; \n    }\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:&nbsp;&nbsp;</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>1 0 0 1&nbsp;<br>0 0 1 1&nbsp;<br>1 1 0 0&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O(NxM + NxMx4) ~ O(N x M)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For the worst case, the BFS function will be called for (N x M) nodes, and for every node, we are traversing for 4 neighbors, so it will take O(N x M x 4) time.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(N x M) + O(N x M) + O(N x M) ~ O(N x M)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>O(N x M) for the visited array, distance matrix, and queue space takes up N x M locations at max.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;<strong><a href=\"https://www.linkedin.com/in/vanshika-singh-ba6b15157\" target=\"_blank\" rel=\"noreferrer noopener\">Vanshika Singh Gour</a></strong>&nbsp;for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a>.&nbsp;<em>If you want to suggest any improvement/correction in this article please mail us at&nbsp;write4tuf@gmail.com</em></p></blockquote>\n<!-- /wp:quote -->"
}