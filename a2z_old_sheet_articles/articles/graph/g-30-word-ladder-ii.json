{
    "dislikes": 8,
    "video": "DREutrv2XD0",
    "publishedOn": "Sun Mar 24 2024 22:11:45 GMT+0530 (India Standard Time)",
    "slug": "g-30-word-ladder-ii",
    "aid": "2155",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/word-ladder-ii",
    "title": "G-30 : Word Ladder-II",
    "topics": [
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "graph",
            "topic-title": "Graph"
        }
    ],
    "category_tag": "graph",
    "likes": 73,
    "preview": "Given two distinct words startWord and targetWord, and a list denoting wordList of unique words of equal lengths. Find all shortest transformation sequence(s) from startWord to targetWord. You can...",
    "content": "<!-- wp:paragraph -->\n<p>Given two distinct words <strong>startWord</strong> and <strong>targetWord</strong>, and a list denoting wordList of unique words of equal lengths. Find all shortest transformation sequence(s) from startWord to targetWord. You can return them in any order possible.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In this problem statement, we need to keep the following conditions in mind:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>A word can only consist of lowercase characters.</li><li>Only one letter can be changed in each transformation.</li><li>Each transformed word must exist in the wordList including the targetWord.</li><li>startWord may or may not be part of the wordList.</li><li>Return an empty list if there is no such transformation sequence.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Note: </strong>Please watch the <a href=\"https://www.youtube.com/watch?v=tRPda0rcf8E&amp;list=PLgUwDviBIf0oE3gA41TKO2H5bHpPd7fzn&amp;index=29\" target=\"_blank\" rel=\"noopener\" title=\"\">previous video</a> of this series before moving on to this particular problem as this is just an extension of the problem <a href=\"https://practice.geeksforgeeks.org/problems/word-ladder/1\" target=\"_blank\" rel=\"noopener\" title=\"\">Word Ladder-I</a> that is being discussed previously. The approach used for this problem would be similar to the approach used in that question.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Examples:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\"><strong>Example 1:</strong>\n<strong>Input:</strong>\nstartWord = \"der\", targetWord = \"dfs\",\nwordList = {\"des\",\"der\",\"dfr\",\"dgt\",\"dfs\"}\n<strong>Output:</strong>\n[ [ \u201cder\u201d, \u201cdfr\u201d, \u201cdfs\u201d ], [ \u201cder\u201d, \u201cdes\u201d, \u201cdfs\u201d] ]\n<strong>Explanation:</strong> \nThe length of the smallest transformation sequence here is 3.\nFollowing are the only two shortest ways to get to the targetWord from the startWord :\n\"der\" -> ( replace \u2018r\u2019 by \u2018s\u2019 ) -> \"des\" -> ( replace \u2018e\u2019 by \u2018f\u2019 ) -> \"dfs\".\n\"der\" -> ( replace \u2018e\u2019 by \u2018f\u2019 ) -> \"dfr\" -> ( replace \u2018r\u2019 by \u2018s\u2019 ) -> \"dfs\".\n\n<strong>Example 2:</strong>\n<strong>Input:</strong>\nstartWord = \"gedk\", targetWord= \"geek\"\nwordList = {\"geek\", \"gefk\"}\n<strong>Output:</strong>\n[ [ \u201cgedk\u201d, \u201cgeek\u201d ] ]\n<strong>Explanation:</strong> \nThe length of the smallest transformation sequence here is 2.\nFollowing is the only shortest way to get to the targetWord from the startWord :\n\"gedk\" -> ( replace \u2018d\u2019 by \u2018e\u2019 ) -> \"geek\".</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph {\"textColor\":\"accent\"} -->\n<p class=\"has-accent-color has-text-color\"><strong><em>Disclaimer</em>: </strong><em>Don\u2019t jump directly to the solution, try it out yourself first.</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Note</strong>: In case any image/dry run is not clear please refer to the video attached at the bottom.\u00a0</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Intuition:</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The intuition behind using the BFS traversal technique for these kinds of problems is that if we notice carefully, we go on replacing the characters one by one which seems just like we\u2019re moving level-wise in order to reach the destination i.e. the targetWord. Here, in the example below we can notice there are two possible paths in order to reach the targetWord.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":6912,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2022/11/Screenshot-2022-11-08-193243.png\" alt=\"\" class=\"wp-image-6912\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Contrary to the previous problem, here we do not stop the traversal on the first occurrence of the targetWord, but rather continue it for as many occurrences of the word as possible as we need <strong>all</strong> the shortest possible sequences in order to reach the destination word. The only trick here is that we <strong>do not </strong>have to delete a particular word immediately from the wordList even if during the replacement of characters it matches with the transformed word. Instead, we delete it after the traversal for a particular level when completed which allows us to explore all possible paths. This allows us to discover multiple sequences in order to reach the targetWord involving similar words.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>From the above figure, we can configure that there can be 2 shortest possible sequences in order to reach the word \u2018cog\u2019.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Approach:</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This problem uses the<a href=\"https://takeuforward.org/graph/breadth-first-search-bfs-level-order-traversal/\"> BFS traversal</a> technique for finding out all the shortest possible transformation sequences by exploring all possible ways in which we can reach the targetWord.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Initial configuration:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>Queue: </strong>Define a queue data structure to store the level-wise formed sequences. The queue will be storing a List of strings, which will be representing the path till now. The last word in the list will be the last converted word.&nbsp;</li><li><strong>Hash set: </strong>Create a hash set to store the elements present in the word list to carry out the search and delete operations in O(1) time.&nbsp;</li><li><strong>Vector: </strong>Define a 1D vector \u2018usedOnLevel\u2019 to store the words which are currently being used for transformation on a particular level and a 2D vector \u2018ans\u2019 for storing all the shortest sequences of transformation.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>The Algorithm for this problem involves the following steps:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>Firstly, we start by creating a hash set to store all the elements present in the wordList which would make the search and delete operations faster for us to implement.</li><li>Next, we create a Queue data structure for storing the successive sequences/ path in the form of a vector which on transformation would lead us to the target word.</li><li>Now, we add the startWord to the queue as a List and also push it into the usedOnLevel vector to denote that this word is currently being used for transformation in this particular level.</li><li>Pop the first element out of the queue and carry out the <a href=\"https://takeuforward.org/graph/breadth-first-search-bfs-level-order-traversal/\">BFS traversal</a>, where for each word that popped out from the back of the sequence present at the top of the queue, we check for all of its characters by replacing them with \u2018a\u2019 - \u2018z\u2019 if they are present in the wordList or not. In case a word is present in the wordList, we simply first push it onto the usedOnLevel vector and do not delete it from the wordList immediately.</li><li>Now, push that word into the vector containing the previous sequence and add it to the queue. So we will get a new path, but we need to explore other paths as well, so pop the word out of the list to explore other paths.</li><li>After completion of traversal on a particular level, we can now delete all the words that were currently being used on that level from the usedOnLevel vector which ensures that these words won\u2019t be used again in the future, as using them in the later stages will mean that it won\u2019t be the shortest path anymore.</li><li>If at any point in time we find out that the last word in the sequence present at the top of the queue is equal to the target word, we simply push the sequence into the resultant vector if the resultant vector \u2018ans\u2019 is empty.</li><li>If the vector is not empty, we check if the current sequence length is equal to the first element added in the ans vector or not. This has to be checked because we need the shortest possible transformation sequences.</li><li>In case, there is no transformation sequence possible, we return an empty 2D vector.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong><em>Note: If you wish to see the dry run of the above approach, you can watch the video attached to this article.</em></strong>&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    \n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nclass Solution\n{\npublic:\n    vector&lt;vector&lt;string&gt;&gt; findSequences(string beginWord, string endWord,\n                                         vector&lt;string&gt; &amp;wordList)\n    {\n        // Push all values of wordList into a set\n        // to make deletion from it easier and in less time complexity.\n        unordered_set&lt;string&gt; st(wordList.begin(), wordList.end());\n        \n        // Creating a queue ds which stores the words in a sequence which is\n        // required to reach the targetWord after successive transformations.\n        queue&lt;vector&lt;string&gt;&gt; q;\n\n        // BFS traversal with pushing the new formed sequence in queue \n        // when after a transformation, a word is found in wordList.\n\n        q.push({beginWord});\n\n        // A vector defined to store the words being currently used\n        // on a level during BFS.\n        vector&lt;string&gt; usedOnLevel;\n        usedOnLevel.push_back(beginWord);\n        int level = 0;\n       \n        // A vector to store the resultant transformation sequence.\n        vector&lt;vector&lt;string&gt;&gt; ans;\n        while (!q.empty())\n        {\n            vector&lt;string&gt; vec = q.front();\n            q.pop();\n\n            // Now, erase all words that have been\n            // used in the previous levels to transform\n            if (vec.size() &gt; level)\n            {\n                level++;\n                for (auto it : usedOnLevel)\n                {\n                    st.erase(it);\n                }\n            }\n\n            string word = vec.back();\n\n            // store the answers if the end word matches with targetWord.\n            if (word == endWord)\n            {\n                // the first sequence where we reached end\n                if (ans.size() == 0)\n                {\n                    ans.push_back(vec);\n                }\n                else if (ans[0].size() == vec.size())\n                {\n                    ans.push_back(vec);\n                }\n            }\n            for (int i = 0; i &lt; word.size(); i++)\n            {   \n                // Now, replace each character of \u2018word\u2019 with char\n                // from a-z then check if \u2018word\u2019 exists in wordList.\n                char original = word[i];\n                for (char c = 'a'; c &lt;= 'z'; c++)\n                {\n                    word[i] = c;\n                    if (st.count(word) &gt; 0)\n                    { \n                        // Check if the word is present in the wordList and\n                        // push the word along with the new sequence in the queue.\n                        vec.push_back(word);\n                        q.push(vec);\n                        // mark as visited on the level\n                        usedOnLevel.push_back(word);\n                        vec.pop_back();\n                    }\n                }\n                word[i] = original;\n            }\n        }\n        return ans;\n    }\n};\n\n// A comparator function to sort the answer.\nbool comp(vector&lt;string&gt; a, vector&lt;string&gt; b)\n{\n    string x = \"\", y = \"\";\n    for (string i : a)\n        x += i;\n    for (string i : b)\n        y += i;\n\n    return x &lt; y;\n}\n\nint main()\n{\n\n    vector&lt;string&gt; wordList = {\"des\", \"der\", \"dfr\", \"dgt\", \"dfs\"};\n    string startWord = \"der\", targetWord = \"dfs\";\n    Solution obj;\n    vector&lt;vector&lt;string&gt;&gt; ans = obj.findSequences(startWord, targetWord, wordList);\n    \n    // If no transformation sequence is possible.\n    if (ans.size() == 0)\n        cout &lt;&lt; -1 &lt;&lt; endl;\n    else\n    {\n        sort(ans.begin(), ans.end(), comp);\n        for (int i = 0; i &lt; ans.size(); i++)\n        {\n            for (int j = 0; j &lt; ans[i].size(); j++)\n            {\n                cout &lt;&lt; ans[i][j] &lt;&lt; \" \";\n            }\n            cout &lt;&lt; endl;\n        }\n    }\n\n    return 0;\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output</strong>:&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>der des dfs&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>der dfr dfs</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity and Space Complexity: </strong>It cannot be predicted for this particular algorithm because there can be multiple sequences of transformation from startWord to targetWord depending upon the example, so we cannot define a fixed range of time or space in which this program would run for all the test cases.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Note</strong>: This approach/code will give TLE when solved on the Leetcode platform due to the strict time constraints being put up there. So, you need to optimize it to a greater extent in order to pass all the test cases for LeetCode.For the optimized approach to this question please check out the <a href=\"https://www.youtube.com/watch?v=AD4SFl7tu7I\" target=\"_blank\" rel=\"noopener\" title=\"\">next video.</a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\nimport java.lang.*;\nimport java.io.*;\n\n// A comparator function to sort the answer.\nclass comp implements Comparator &lt; ArrayList &lt; String &gt;&gt; {\n\n    public int compare(ArrayList &lt; String &gt; a, ArrayList &lt; String &gt; b) {\n        String x = \"\";\n        String y = \"\";\n        for (int i = 0; i &lt; a.size(); i++)\n            x += a.get(i);\n        for (int i = 0; i &lt; b.size(); i++)\n            y += b.get(i);\n        return x.compareTo(y);\n    }\n}\n\npublic class Main {\n\n    public static void main(String[] args) throws IOException {\n        String startWord = \"der\", targetWord = \"dfs\";\n        String[] wordList = {\n            \"des\",\n            \"der\",\n            \"dfr\",\n            \"dgt\",\n            \"dfs\"\n        };\n\n        Solution obj = new Solution();\n        ArrayList &lt; ArrayList &lt; String &gt;&gt; ans = obj.findSequences(startWord, targetWord, wordList);\n        \n        // If no transformation sequence is possible.\n        if (ans.size() == 0)\n            System.out.println(-1);\n        else {\n\n            Collections.sort(ans, new comp());\n            for (int i = 0; i &lt; ans.size(); i++) {\n                for (int j = 0; j &lt; ans.get(i).size(); j++) {\n                    System.out.print(ans.get(i).get(j) + \" \");\n                }\n                System.out.println();\n            }\n        }\n    }\n}\n\nclass Solution {\n    public ArrayList &lt; ArrayList &lt; String &gt;&gt; findSequences(String startWord, String targetWord,\n        String[] wordList) {\n\n        // Push all values of wordList into a set\n        // to make deletion from it easier and in less time complexity.\n        Set &lt; String &gt; st = new HashSet &lt; String &gt; ();\n        int len = wordList.length;\n        for (int i = 0; i &lt; len; i++) {\n            st.add(wordList[i]);\n        }\n\n        // Creating a queue ds which stores the words in a sequence which is\n        // required to reach the targetWord after successive transformations.\n        Queue &lt; ArrayList &lt; String &gt;&gt; q = new LinkedList &lt; &gt; ();\n        ArrayList &lt; String &gt; ls = new ArrayList &lt; &gt; ();\n        ls.add(startWord);\n        q.add(ls);\n        ArrayList &lt; String &gt; usedOnLevel = new ArrayList &lt; &gt; ();\n        usedOnLevel.add(startWord);\n        int level = 0;\n\n        // A vector to store the resultant transformation sequence.\n        ArrayList &lt; ArrayList &lt; String &gt;&gt; ans = new ArrayList &lt; &gt; ();\n        int cnt = 0;\n\n        // BFS traversal with pushing the new formed sequence in queue \n        // when after a transformation, a word is found in wordList.\n        while (!q.isEmpty()) {\n            cnt++;\n            ArrayList &lt; String &gt; vec = q.peek();\n            q.remove();\n\n             // Now, erase all words that have been\n             // used in the previous levels to transform\n             if (vec.size() &gt; level) {\n                level++;\n                for (String it: usedOnLevel) {\n                    st.remove(it);\n                }\n            }\n\n            String word = vec.get(vec.size() - 1);\n\n            // store the answers if the end word matches with targetWord.\n            if (word.equals(targetWord)) {\n                // the first sequence where we reached the end.\n                if (ans.size() == 0) {\n                    ans.add(vec);\n                } else if (ans.get(0).size() == vec.size()) {\n                    ans.add(vec);\n                }\n            }\n            for (int i = 0; i &lt; word.length(); i++) {\n\n                // Now, replace each character of \u2018word\u2019 with char\n                // from a-z then check if \u2018word\u2019 exists in wordList.\n                for (char c = 'a'; c &lt;= 'z'; c++) {\n                    char replacedCharArray[] = word.toCharArray();\n                    replacedCharArray[i] = c;\n                    String replacedWord = new String(replacedCharArray);\n                    if (st.contains(replacedWord) == true) {\n                        vec.add(replacedWord);\n                        // Java works by reference, so enter the copy of vec\n                        // otherwise if you remove word from vec in next lines, it will \n                        // remove from everywhere \n                        ArrayList &lt; String &gt; temp = new ArrayList &lt; &gt; (vec);\n                        q.add(temp);\n                        // mark as visited on the level \n                        usedOnLevel.add(replacedWord);\n                        vec.remove(vec.size() - 1);\n                    }\n                }\n\n            }\n        }\n        return ans;\n    }\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output</strong>:&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>der des dfs&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>der dfr dfs</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity and Space Complexity: </strong>It cannot be predicted for this particular algorithm because there can be multiple sequences of transformation from startWord to targetWord depending upon the example, so we cannot define a fixed range of time or space in which this program would run for all the test cases.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Note</strong>: This approach/code will give TLE when solved on the Leetcode platform due to the strict time constraints being put up there. So, you need to optimize it to a greater extent in order to pass all the test cases for LeetCode.For the optimized approach to this question please check out the <a href=\"https://www.youtube.com/watch?v=AD4SFl7tu7I\" target=\"_blank\" rel=\"noopener\" title=\"\">next video.</a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;<strong><a href=\"https://www.linkedin.com/in/priyanshi-goel-7b6a42210/\" target=\"_blank\" rel=\"noreferrer noopener\">Priyanshi Goel</a></strong>&nbsp;for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\" target=\"_blank\" rel=\"noreferrer noopener\">please check out this article</a>.&nbsp;<em>If you want to suggest any improvement/correction in this article please mail us at&nbsp;write4tuf@gmail.com</em></p></blockquote>\n<!-- /wp:quote -->"
}