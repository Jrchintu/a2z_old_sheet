{
    "dislikes": 0,
    "video": "KG5YFfR0j8A",
    "publishedOn": "Sun Mar 24 2024 22:11:40 GMT+0530 (India Standard Time)",
    "slug": "bipartite-graph-dfs-implementation",
    "aid": "2136",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/bipartite-graph",
    "title": "Bipartite Graph | DFS Implementation",
    "topics": [
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "graph",
            "topic-title": "Graph"
        }
    ],
    "category_tag": "graph",
    "likes": 99,
    "preview": "Problem Statement: Given an adjacency list of a graph adj of V no. of vertices having 0 based index. Check whether the graph is bipartite or not. If we are able to colour a graph with two colours s...",
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement: </strong>Given an adjacency list of a graph adj of V no. of vertices having 0 based index. Check whether the graph is bipartite or not.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If we are able to colour a graph with two colours such that no adjacent nodes have the same colour, it is called a bipartite graph.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Examples:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Example 1:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Input:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"602\" height=\"218.89504167147953\" src=\"https://lh6.googleusercontent.com/f1-CHQzuniIrn7WtinG5FaUW7Fh9qv-nh08tQIKzRR7eiH92ENP5zyEfhvVNVHcgd1eXYPXDaHuFBfcradut28yMnASlUzXs74hNSohogzR2ek3UmcKW__W4IVIklgGkz6uNUorESJaak5roRO5EKrb5gg377GenUZngD8O7Nq7UXQJ7RKWXbrG1dg\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:&nbsp; </strong>1</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Explanation:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><img width=\"602\" height=\"187\" src=\"https://lh5.googleusercontent.com/Jx7JVW0ClkGlh7REnjHRt0kxk-0JCBdVOwocuhoS0o1YQJn2OVXTOLaf6czqw4rl7G7wlbf54KkR2M_rtLcvf9vTpfDX9vXVfA6ibvpZ-b9aiOc7AVmmEDc3T45o9j1nNkoWF6nf11yPC_iU3XaNLOamJ-FjViHMA1ADEoYwkvWgY8KNNbnNm7ZRhQ\"></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Example 2:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Input:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"511\" height=\"209\" src=\"https://lh4.googleusercontent.com/4uqS1cCTVVM7Y00AdKr344FE_xUnr0CcQTlV1gNrRey72wzHh-uyDQPbkT-KMSxQ9kiAIOQ-MCvSX211CivMoXf4rtQ1cKn4d8o7_OmtEtuFZ6I3h_8pNE6ReNXZvOg-5OVLUXZRYNTk1OGr6O8CBFtR5CiJqW8ub96i8hb3NJRUN28QjNXJzTxz_g\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:&nbsp; </strong>0</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Explanation:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><img width=\"508\" height=\"208\" src=\"https://lh6.googleusercontent.com/IvyG0TbMfdnrRhLMcosLhJpiRn72h09oxoImNHThz3RDflem0BedvUAGRpsc-FY4FG16W807zP3Io4LnLuxtX-9LSMfgTRmzEp7H-1tvuApwU3TMD69HokG2sGrCJ8ysUfNUsXXYWLP0p2Qt672HowseTYbbB_MhiTXr56jX1mLaKJk6LVfdjcYfWw\"></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Solution</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"textColor\":\"accent\"} -->\n<p class=\"has-accent-color has-text-color\"><strong><em>Disclaimer</em></strong>: <em>Don't jump directly to the solution, try it out yourself first.</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Intuition:</strong>.</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A bipartite graph is a graph which can be coloured using 2 colours such that no adjacent nodes have the same colour. Any linear graph with no cycle is always a bipartite graph. With a cycle, any graph with an even cycle length can also be a bipartite graph. So, any graph with an odd cycle length can never be a bipartite graph.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The intuition is the brute force of filling colours using any traversal technique, just make sure no two adjacent nodes have the same colour. If at any moment of traversal, we find the adjacent nodes to have the same colour, it means that there is an odd cycle, or it cannot be a bipartite graph.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Approach</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>We can follow either of the traversal techniques. In this article, we will be solving it using DFS traversal.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>DFS is a traversal technique which involves the idea of recursion and backtracking. DFS goes in-depth, i.e., traverses all nodes by going ahead, and when there are no further nodes to traverse in the current path, then it backtracks on the same path and traverses other unvisited nodes.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We will be defining the DFS traversal below, but this check has to be done for every component, for that we can use the simple for loop concept that we have learnt, to call the traversals for unvisited nodes.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><img width=\"389\" height=\"181\" src=\"https://lh4.googleusercontent.com/Cu_OP1Tx7YWKs9AFLvNm8GI0wQe_2ATMG7sTfH-UBABFndqupTky1sXJa_gQfb9iyAwsCyJMtjIKCEi1SwuqrbjKo3UD4ymiogOogsXjzFISs-LTK70FM_Jc14AKAHd7Om4jZJdPE22kvIXe4s_wvawb8_HOLpZ5DbLKNWs2dRw_1WBCep2BpBWrlw\"></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The algorithm steps are as follows:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>For DFS traversal, we need a start node and a visited array but in this case, instead of a visited array, we will take a colour array where all the nodes are initialised to -1 indicating they are not coloured yet.</li><li>In the DFS function call, make sure to pass the value of the assigned colour, and assign the same in the colour array. We will try to colour with 0 and 1, but you can choose other colours as well. We will start with the colour 0, you can start with 1 as well, just make sure for the adjacent node, it should be opposite of what the current node has.&nbsp;</li><li>In DFS traversal, we travel in-depth to all its uncoloured neighbours using the adjacency list. For every uncoloured node, initialise it with the opposite colour to that of the current node.</li><li>If at any moment, we get an adjacent node from the adjacency list which is already coloured and has the same colour as the current node, we can say it is not possible to colour it, hence it cannot be bipartite. Thereby return a false indicating the given graph is not bipartite; otherwise, keep on returning true.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Consider the following graph and its adjacency list.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"602\" height=\"288\" src=\"https://lh3.googleusercontent.com/aJMw4Jy7cMpNioFRI92QyLztYv7PA30icouIsIgnx2MpQ4CuJo0pZbNSL-kJ0KrXdmwFwXCrffBNwthsWYrKPnj5izJW4OW4KzwPCLfNuHxUM4bnkokuW6WYcZAkiGlWNxis4PgXKWYkcj_Vz_fiq6Szv9-HRRjqtRv5j-Y4B0s0rt3FLJjR4LVjPQ\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Consider the following illustration to understand the colouring of the nodes using DFS traversal.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"602\" height=\"367\" src=\"https://lh4.googleusercontent.com/J9Vyk4nnbbe_cI5vVRYe0GHJv_WKJMqBqfGsvgq8n-hRHMpIiJlpONzTkZu_UhbmaefsvCLOVkyLiMhrrdmSWiiuIzT_bYdwteoz8qtzZSX0XuAu2LALdFVANSXkcSvqB_awJUvTBlQxCFQNh-ZD2QHRG_pdZec1Dbt-qP88OtZ4q2qptG4VSPvQPw\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    \n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nclass Solution {\nprivate: \n    bool dfs(int node, int col, int color[], vector&lt;int&gt; adj[]) {\n        color[node] = col; \n        \n        // traverse adjacent nodes\n        for(auto it : adj[node]) {\n            // if uncoloured\n            if(color[it] == -1) {\n                if(dfs(it, !col, color, adj) == false) return false; \n            }\n            // if previously coloured and have the same colour\n            else if(color[it] == col) {\n                return false; \n            }\n        }\n        \n        return true; \n    }\npublic:\n\tbool isBipartite(int V, vector&lt;int&gt;adj[]){\n\t    int color[V];\n\t    for(int i = 0;i&lt;V;i++) color[i] = -1; \n\t    \n\t    // for connected components\n\t    for(int i = 0;i&lt;V;i++) {\n\t        if(color[i] == -1) {\n\t            if(dfs(i, 0, color, adj) == false) \n\t                return false; \n\t        }\n\t    }\n\t    return true; \n\t}\n};\n\nvoid addEdge(vector &lt;int&gt; adj[], int u, int v) {\n    adj[u].push_back(v);\n    adj[v].push_back(u);\n}\n\nint main(){\n\t\n\t// V = 4, E = 4\n\tvector&lt;int&gt;adj[4];\n\t\n\taddEdge(adj, 0, 2);\n   \taddEdge(adj, 0, 3);\n\taddEdge(adj, 2, 3);\n\taddEdge(adj, 3, 1);\n\n\tSolution obj;\n\tbool ans = obj.isBipartite(4, adj);    \n\tif(ans)cout &lt;&lt; \"1\\n\";\n\telse cout &lt;&lt; \"0\\n\";  \n\t\n\treturn 0;\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:&nbsp; </strong>0</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O(V + 2E), Where V = Vertices, 2E is for total degrees as we traverse all adjacent nodes.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(3V) ~ O(V), Space for DFS stack space, colour array and an adjacency list.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\n\nclass Solution\n{\n    private boolean dfs(int node, int col, int color[], \n    ArrayList&lt;ArrayList&lt;Integer&gt;&gt;adj) {\n        \n        color[node] = col; \n        \n        // traverse adjacent nodes\n        for(int it : adj.get(node)) {\n            // if uncoloured\n            if(color[it] == -1) {\n                if(dfs(it, 1 - col, color, adj) == false) return false; \n            }\n            // if previously coloured and have the same colour\n            else if(color[it] == col) {\n                return false; \n            }\n        }\n        \n        return true; \n    }\n    public boolean isBipartite(int V, ArrayList&lt;ArrayList&lt;Integer&gt;&gt;adj)\n    {\n        int color[] = new int[V];\n\t    for(int i = 0;i&lt;V;i++) color[i] = -1; \n\t    \n\t    // for connected components\n\t    for(int i = 0;i&lt;V;i++) {\n\t        if(color[i] == -1) {\n\t            if(dfs(i, 0, color, adj) == false) return false; \n\t        }\n\t    }\n\t    return true; \n    }\n     public static void main(String[] args)\n    {\n        // V = 4, E = 4\n        ArrayList &lt; ArrayList &lt; Integer &gt;&gt; adj = new ArrayList &lt; &gt; ();\n        for (int i = 0; i &lt; 4; i++) {\n            adj.add(new ArrayList &lt; &gt; ());\n        }\n        adj.get(0).add(2);\n        adj.get(2).add(0);\n        adj.get(0).add(3);\n        adj.get(3).add(0);\n        adj.get(1).add(3);\n        adj.get(3).add(1);\n        adj.get(2).add(3);\n        adj.get(3).add(2);\n\n        Solution obj = new Solution();\n        boolean ans = obj.isBipartite(4, adj);\n        if(ans)\n            System.out.println(\"1\");\n        else System.out.println(\"0\");\n    }\n\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:&nbsp; </strong>0</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O(V + 2E), Where V = Vertices, 2E is for total degrees as we traverse all adjacent nodes.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(3V) ~ O(V), Space for DFS stack space, colour array and an adjacency list.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;<strong><a href=\"https://www.linkedin.com/in/vanshika-singh-ba6b15157\" target=\"_blank\" rel=\"noreferrer noopener\">Vanshika Singh Gour</a></strong>&nbsp;for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a>.&nbsp;<em>If you want to suggest any improvement/correction in this article please mail us at&nbsp;write4tuf@gmail.com</em></p></blockquote>\n<!-- /wp:quote -->"
}