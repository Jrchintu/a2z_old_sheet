{
    "dislikes": 8,
    "video": "-tgVpUgsQ5k",
    "publishedOn": "Sun Mar 24 2024 22:11:35 GMT+0530 (India Standard Time)",
    "slug": "breadth-first-search-bfs-level-order-traversal",
    "aid": "2114",
    "title": "Breadth First Search (BFS): Level Order Traversal",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/traversal-techniques",
    "topics": [
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "graph",
            "topic-title": "Graph"
        }
    ],
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement: </strong>Given an undirected graph, return a vector of all nodes by traversing the graph using breadth-first search (BFS).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Pre-req:</strong> Graph Representation, Queue STL</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Examples:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\"><strong>Example 1:</strong>\n<strong>Input:</strong>\n<strong><img width=\"159\" height=\"167\" src=\"https://lh3.googleusercontent.com/NWoEVFT-U8F9TX7Kv1CEZ4qZbQUFcg1AipZUQb1vXRyXBDw2jWibgp9ASxiSCz6NP8eqayu5jg6VzACkayc7w3fNCikTgPsdPkI4MC_1rRqOL7VM5XvUydVcTDq89ehdKcBwNJHRYV7fPyNmucJ7Nq8\"></strong>\n<strong>Output:</strong> 1 2 5 3 4</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\"><strong>Example 2:</strong>\n<strong>Input:</strong>\n<img width=\"293\" height=\"165\" src=\"https://lh6.googleusercontent.com/ww-QXmwaaReNu6QHZE6JnDp0kw32F1_lYQnuheL6nqwaKO_EuHVsop61MDlHaseC85kItfGpUTAVbuaJAyvQ3ekQXW1CQfMKY90RMVYdpn9AwDKpXcVZ0trE9evt2HItjTN2cMIZhZxSzaP17cPAzWA\">\n<strong>Output:</strong> 1 2 7 3 6 8 10 4 5 9</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Solution</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"textColor\":\"accent\"} -->\n<p class=\"has-accent-color has-text-color\"><strong><em>Disclaimer</em></strong>: <em>Don't jump directly to the solution, try it out yourself first.</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Approach</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Initial Configuration:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>Queue data structure: follows FIFO, and will always contain the starting.</li><li>Visited array: an array initialized to 0</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li>In BFS, we start with a \u201cstarting\u201d node, mark it as visited, and push it into the queue data structure.</li><li>In every iteration, we pop out the node \u2018v\u2019 and put it in the solution vector, as we are traversing this node.</li><li>All the unvisited adjacent nodes from \u2018v\u2019 are visited next and are pushed into the queue. The list of adjacent neighbors of the node can be accessed from the adjacency list.</li><li>Repeat steps 2 and 3 until the queue becomes empty, and this way you can easily traverse all the nodes in the graph.</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>In this way, all the nodes are traversed in a breadthwise manner.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"441\" height=\"216\" src=\"https://lh5.googleusercontent.com/Wr_ZE8ps9UXyud1a5_QigPdzUeZGCSQqBF8fgrmJ0AY-Rgd-2mVuf477EaqyXEAI7BLNE4OGwW6yVFV8qqZNTsLxv-T4RDXkfR9f7QIfqqK8QuqHlQCM2uFVBcqdV_uaJH0BE2SQwiNiTXnQt0vwbkQ\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"602\" height=\"316\" src=\"https://lh5.googleusercontent.com/JKY4V8OZEs5L68Mh2ZY5ZqiqGkaj8esWnTEUwEdygFQdRFowh7aCWpibaPRqkcR3SHBh2Q4Io856f2fAzM5Ae3nD2uLj7AEU3NnQfZ55E2ni0EzXceoVTJtHzqGlUhQ9-izy5Y0v1DK0xIQ4vUxs9Ds\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    \n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nclass Solution {\n  public:\n    // Function to return Breadth First Traversal of given graph.\n    vector&lt;int&gt; bfsOfGraph(int V, vector&lt;int&gt; adj[]) {\n        int vis[V] = {0}; \n        vis[0] = 1; \n        queue&lt;int&gt; q;\n        // push the initial starting node \n        q.push(0); \n        vector&lt;int&gt; bfs; \n        // iterate till the queue is empty \n        while(!q.empty()) {\n           // get the topmost element in the queue \n            int node = q.front(); \n            q.pop(); \n            bfs.push_back(node); \n            // traverse for all its neighbours \n            for(auto it : adj[node]) {\n                // if the neighbour has previously not been visited, \n                // store in Q and mark as visited \n                if(!vis[it]) {\n                    vis[it] = 1; \n                    q.push(it); \n                }\n            }\n        }\n        return bfs; \n    }\n};\n\nvoid addEdge(vector &lt;int&gt; adj[], int u, int v) {\n    adj[u].push_back(v);\n    adj[v].push_back(u);\n}\n\nvoid printAns(vector &lt;int&gt; &amp;ans) {\n    for (int i = 0; i &lt; ans.size(); i++) {\n        cout &lt;&lt; ans[i] &lt;&lt; \" \";\n    }\n}\n\nint main() \n{\n    vector &lt;int&gt; adj[6];\n    \n    addEdge(adj, 0, 1);\n    addEdge(adj, 1, 2);\n    addEdge(adj, 1, 3);\n    addEdge(adj, 0, 4);\n\n    Solution obj;\n    vector &lt;int&gt; ans = obj.bfsOfGraph(5, adj);\n    printAns(ans);\n\n    return 0;\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output: </strong>0 1 4 2 3</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O(N) + O(2E), Where N = Nodes, 2E is for total degrees as we traverse all adjacent nodes.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(3N) ~ O(N), Space for queue data structure visited array and an adjacency list</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\nclass Solution {\n    // Function to return Breadth First Traversal of given graph.\n    public ArrayList&lt;Integer&gt; bfsOfGraph(int V, \n    ArrayList&lt;ArrayList&lt;Integer&gt;&gt; adj) {\n        \n        ArrayList &lt; Integer &gt; bfs = new ArrayList &lt; &gt; ();\n        boolean vis[] = new boolean[V];\n        Queue &lt; Integer &gt; q = new LinkedList &lt; &gt; ();\n\n        q.add(0);\n        vis[0] = true;\n\n        while (!q.isEmpty()) {\n            Integer node = q.poll();\n            bfs.add(node);\n\n            // Get all adjacent vertices of the dequeued vertex s\n            // If a adjacent has not been visited, then mark it\n            // visited and enqueue it\n            for (Integer it: adj.get(node)) {\n                if (vis[it] == false) {\n                    vis[it] = true;\n                    q.add(it);\n                }\n            }\n        }\n\n        return bfs;\n    }\n    \n    public static void main(String args[]) {\n\n        ArrayList &lt; ArrayList &lt; Integer &gt;&gt; adj = new ArrayList &lt; &gt; ();\n        for (int i = 0; i &lt; 5; i++) {\n            adj.add(new ArrayList &lt; &gt; ());\n        }\n        adj.get(0).add(1);\n        adj.get(1).add(0);\n        adj.get(0).add(4);\n        adj.get(4).add(0);\n        adj.get(1).add(2);\n        adj.get(2).add(1);\n        adj.get(1).add(3);\n        adj.get(3).add(1);\n        \n        Solution sl = new Solution(); \n        ArrayList &lt; Integer &gt; ans = sl.bfsOfGraph(5, adj);\n        int n = ans.size(); \n        for(int i = 0;i&lt;n;i++) {\n            System.out.print(ans.get(i)+\" \"); \n        }\n    }\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output: </strong>0 1 4 2 3</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O(N) + O(2E), Where N = Nodes, 2E is for total degrees as we traverse all adjacent nodes.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(3N) ~ O(N), Space for queue data structure visited array and an adjacency list</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;<strong><a href=\"https://www.linkedin.com/in/vanshika-singh-ba6b15157\" target=\"_blank\" rel=\"noreferrer noopener\">Vanshika Singh Gour</a></strong>&nbsp;for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a>.&nbsp;<em>If you want to suggest any improvement/correction in this article please mail us at&nbsp;write4tuf@gmail.com</em></p></blockquote>\n<!-- /wp:quote -->",
    "category_tag": "graph",
    "likes": 296,
    "preview": "Problem Statement: Given an undirected graph, return a vector of all nodes by traversing the graph using breadth-first search (BFS). Pre-req: Graph Representation, Queue STL Examples: Example 1: In..."
}