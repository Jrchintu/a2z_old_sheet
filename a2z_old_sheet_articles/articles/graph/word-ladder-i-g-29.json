{
    "dislikes": 2,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:11:43 GMT+0530 (India Standard Time)",
    "slug": "word-ladder-i-g-29",
    "aid": "2150",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/word-ladder-i",
    "title": "Word Ladder - I : G-29",
    "topics": [
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "graph",
            "topic-title": "Graph"
        }
    ],
    "category_tag": "graph",
    "likes": 93,
    "preview": "Given are the two distinct words startWord and targetWord, and a list denoting wordList of unique words of equal lengths. Find the length of the shortest transformation sequence from startWord to t...",
    "content": "<!-- wp:paragraph -->\n<p>Given are the two distinct words <strong>startWord</strong> and <strong>targetWord</strong>, and a list denoting <strong>wordList</strong> of unique words of equal lengths. Find the length of the shortest transformation sequence from startWord to targetWord.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In this problem statement, we need to keep the following conditions in mind:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>A word can only consist of lowercase characters.</li><li>Only one letter can be changed in each transformation.</li><li>Each transformed word must exist in the wordList including the targetWord.</li><li>startWord may or may not be part of the wordList</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Note</strong>:\u00a0 If there\u2019s no possible way to transform the sequence from startWord to targetWord return <strong>0</strong>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p id=\"block-8d23ca36-08d5-40aa-b234-2555f9b5f1bc\"><strong>Example 1:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\"><strong>Input:</strong>\nwordList = {\"des\",\"der\",\"dfr\",\"dgt\",\"dfs\"}\nstartWord = \"der\", targetWord = \"dfs\"\n<strong>Output:</strong>\n3\n<strong>Explanation: </strong>\nThe length of the smallest transformation sequence from \"der\" to \n\"dfs\" is 3 i.e. \"der\" -> (replace \u2018e\u2019 by \u2018f\u2019) -> \"dfr\" -> (replace \u2018r\u2019 by \u2018s\u2019)  -> \"dfs\". So, it takes 3 different strings for us to reach the targetWord. Each of these strings are present in the wordList.</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p><strong>Example 2:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\"><strong>Input</strong>:\nwordList = {\"geek\", \"gefk\"}\nstartWord = \"gedk\", targetWord= \"geek\"\n<strong>Output</strong>:\n2\n<strong>Explanation</strong>: \nThe length of the smallest transformation sequence \nfrom \"gedk\" to \"geek\" is 2 i.e. \"gedk\" -> (replace \u2018d\u2019 by \u2018e\u2019) -> \"geek\" \nSo, it takes 2 different strings for us to reach the targetWord. \nEach of these strings are present in the wordList.</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Solution</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"textColor\":\"accent\"} -->\n<p class=\"has-accent-color has-text-color\"><strong><em>Disclaimer</em>: <em>Don\u2019t jump directly to the solution, try it out yourself first</em></strong>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https://practice.geeksforgeeks.org/problems/word-ladder/0\"><strong>Problem Link</strong></a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Note: In case any image/dry run is not clear please refer to the video attached at the bottom.</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Approach:</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Let\u2019s first understand the Brute force approach to this problem. In Brute force, we just simply replace the startingWord <strong>character by character </strong>and then check whether the transformed word is present in the wordList. If a word is present in the wordList, we try replacing another character in that word by again following similar steps as above, in order to attain the targetWord. We do this for all the characters in the startWord and then eventually return the minimum length of transforming the startWord to targetWord.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":6838,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2022/10/image-26.png\" alt=\"\" class=\"wp-image-6838\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Now, to make this algorithm a little less time-consuming and easier, we implement this using a BFS traversal technique.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Initial configuration:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>Queue: </strong>Define a queue data structure to store the BFS traversal.</li><li><strong>Hash set: </strong>Create a hash set to store the elements present in the word list to carry out the search and delete operations in O(1) time.&nbsp;</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>The Algorithm involves the following steps:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>Firstly, we start by creating a queue data structure in order to store the word and the length of the sequence to reach that word as a pair. We store them in form of {word, steps}.&nbsp;</li><li>Then, we push the startWord into the queue with length as \u20181\u2019 indicating that this is the word from which the sequence needs to start from.</li><li>We now create a hash set wherein, we put all the elements in wordList to keep a check on if we\u2019ve visited that word before or not. In order to mark a word as visited here, we simply delete the word from the hash set. There is no point in visiting someone multiple times during the algorithm.&nbsp;</li><li>Now, we pop the first element out of the queue and carry out the <a href=\"https://takeuforward.org/graph/breadth-first-search-bfs-level-order-traversal/\" target=\"_blank\" rel=\"noopener\" title=\"\">BFS traversal</a> where, for each word popped out of the queue, we try to replace every character with \u2018a\u2019 - \u2018z\u2019, and we get a transformed word. We check if the transformed word is present in the wordList or not.</li><li>If the word is present, we push it in the queue and increase the count of the sequence by 1 and if not, we simply move on to replacing the original character with the next character.</li><li>Remember, we also need to delete the word from the wordList if it matches with the transformed word to ensure that we do not reach the same point again in the transformation which would only increase our sequence length.&nbsp;</li><li>Now, we pop the next element out of the queue ds and if at any point in time, the transformed word becomes the same as the targetWord, we return the count of the steps taken to reach that word. Here, we\u2019re only concerned about the first occurrence of the targetWord because after that it would only lead to an increase in the sequence length which is for sure not <strong>minimum.</strong></li><li>If a transformation sequence is not possible, return 0.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Intuition:</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The intuition behind using the BFS traversal technique for this particular problem is that if we notice carefully, we go on replacing the characters one by one which seems just like we\u2019re moving level-wise in order to reach the destination i.e. the targetWord.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":6839,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2022/10/image-27.png\" alt=\"\" class=\"wp-image-6839\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>In level-order traversal, when we reach the destination, we stop the traversal. Similar to that, when we reach our targetWord, we terminate the algorithm and return the counted steps.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We no longer continue the algorithm after that because that would only <strong>increase</strong> the step count to reach the targetWord.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><em>Note: If you wish to see the dry run of the above approach, you can watch the video attached to this article.</em></strong>&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    \n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n \nclass Solution\n{\npublic:\n    int wordLadderLength(string startWord, string targetWord,\n                         vector&lt;string&gt; &amp;wordList)\n    {\n    // Creating a queue ds of type {word,transitions to reach \u2018word\u2019}.\n        queue&lt;pair&lt;string, int&gt;&gt; q;\n\n        // BFS traversal with pushing values in queue \n        // when after a transformation, a word is found in wordList.\n        q.push({startWord, 1});\n\n        // Push all values of wordList into a set\n        // to make deletion from it easier and in less time complexity.\n        unordered_set&lt;string&gt; st(wordList.begin(), wordList.end());\n        st.erase(startWord);\n        while (!q.empty())\n        {\n            string word = q.front().first;\n            int steps = q.front().second;\n            q.pop();\n\n            // we return the steps as soon as\n            // the first occurence of targetWord is found.\n            if (word == targetWord)\n                return steps;\n\n            for (int i = 0; i &lt; word.size(); i++)\n            {\n                // Now, replace each character of \u2018word\u2019 with char\n                // from a-z then check if \u2018word\u2019 exists in wordList.\n                char original = word[i];\n                for (char ch = 'a'; ch &lt;= 'z'; ch++)\n                {\n                    word[i] = ch;\n                    // check if it exists in the set and push it in the queue.\n                    if (st.find(word) != st.end())\n                    {\n                        st.erase(word);\n                        q.push({word, steps + 1});\n                    }\n                }\n                word[i] = original;\n            }\n        }\n        // If there is no transformation sequence possible\n        return 0;\n    }\n};\n \nint main()\n{\n \n    vector&lt;string&gt; wordList = {\"des\", \"der\", \"dfr\", \"dgt\", \"dfs\"};\n    string startWord = \"der\", targetWord = \"dfs\";\n \n    Solution obj;\n \n    int ans = obj.wordLadderLength(startWord, targetWord, wordList);\n \n    cout &lt;&lt; ans;\n    cout &lt;&lt; endl;\n    return 0;\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output</strong>:&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>3&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O(N * M * 26)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Where N = size of wordList Array and M = word length of words present in the wordList..</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Note that, hashing operations in an <strong>unordered set </strong>takes O(1) time, but if you want to use <strong>set </strong>here, then the time complexity would increase by a factor of log(N) as hashing operations in a set take O(log(N)) time.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity:&nbsp; </strong>O( N ) { for creating an unordered set and copying all values from wordList into it }</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Where N = size of wordList Array.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\nimport java.lang.*;\nimport java.io.*;\n\nclass Main {\n\n    public static void main(String[] args) throws IOException {\n        String startWord = \"der\", targetWord = \"dfs\";\n        String[] wordList = {\n            \"des\",\n            \"der\",\n            \"dfr\",\n            \"dgt\",\n            \"dfs\"\n        };\n\n        Solution obj = new Solution();\n        int ans = obj.wordLadderLength(startWord, targetWord, wordList);\n\n        System.out.print(ans);\n\n        System.out.println();\n    }\n}\n\nclass Pair {\n    String first;\n    int second;\n    Pair(String _first, int _second) {\n        this.first = _first;\n        this.second = _second;\n    }\n}\nclass Solution {\n    public int wordLadderLength(String startWord, String targetWord, String[] wordList) {\n        // Creating a queue ds of type {word,transitions to reach \u2018word\u2019}.\n        Queue &lt; Pair &gt; q = new LinkedList &lt; &gt; ();\n \n        // BFS traversal with pushing values in queue \n        // when after a transformation, a word is found in wordList.\n        q.add(new Pair(startWord, 1));\n\n        // Push all values of wordList into a set\n        // to make deletion from it easier and in less time complexity.\n        Set &lt; String &gt; st = new HashSet &lt; String &gt; ();\n        int len = wordList.length;\n        for (int i = 0; i &lt; len; i++) {\n            st.add(wordList[i]);\n        }\n        st.remove(startWord);\n        while (!q.isEmpty()) {\n            String word = q.peek().first;\n            int steps = q.peek().second;\n            q.remove();\n      \n            // we return the steps as soon as\n            // the first occurence of targetWord is found.\n            if (word.equals(targetWord) == true) return steps;\n\n            // Now, replace each character of \u2018word\u2019 with char\n            // from a-z then check if \u2018word\u2019 exists in wordList.\n            for (int i = 0; i &lt; word.length(); i++) {\n                for (char ch = 'a'; ch &lt;= 'z'; ch++) {\n                    char replacedCharArray[] = word.toCharArray();\n                    replacedCharArray[i] = ch;\n                    String replacedWord = new String(replacedCharArray);\n\n                    // check if it exists in the set and push it in the queue.\n                    if (st.contains(replacedWord) == true) {\n                        st.remove(replacedWord);\n                        q.add(new Pair(replacedWord, steps + 1));\n                    }\n                }\n\n            }\n        }\n        // If there is no transformation sequence possible\n        return 0;\n    }\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output</strong>:&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>3&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O(N * M * 26)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Where N = size of wordList Array and M = word length of words present in the wordList..</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Note that, hashing operations in an <strong>unordered set </strong>takes O(1) time, but if you want to use <strong>set </strong>here, then the time complexity would increase by a factor of log(N) as hashing operations in a set take O(log(N)) time.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity:&nbsp; </strong>O( N ) { for creating an unordered set and copying all values from wordList into it }</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Where N = size of wordList Array.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;<strong><a href=\"https://www.linkedin.com/in/priyanshi-goel-7b6a42210/\" target=\"_blank\" rel=\"noreferrer noopener\">Priyanshi Goel</a></strong>&nbsp;for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\" target=\"_blank\" rel=\"noreferrer noopener\">please check out this article</a>.&nbsp;<em>If you want to suggest any improvement/correction in this article please mail us at&nbsp;write4tuf@gmail.com</em></p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:embed {\"url\":\"https://www.youtube.com/watch?v=tRPda0rcf8E\",\"type\":\"video\",\"providerNameSlug\":\"youtube\",\"responsive\":true,\"className\":\"wp-embed-aspect-16-9 wp-has-aspect-ratio\"} -->\n<figure class=\"wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio\"><div class=\"wp-block-embed__wrapper\">\nhttps://www.youtube.com/watch?v=tRPda0rcf8E\n</div></figure>\n<!-- /wp:embed -->"
}