{
    "dislikes": 0,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:11:37 GMT+0530 (India Standard Time)",
    "slug": "flood-fill-algorithm-graphs",
    "aid": "2119",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/flood-fill-algorithm",
    "title": "Flood Fill Algorithm - Graphs",
    "topics": [
        {
            "topic-id": "graph",
            "topic-title": "Graph"
        }
    ],
    "category_tag": "graph",
    "likes": 118,
    "preview": "Problem Statement: An image is represented by a 2-D array of integers, each integer representing the pixel value of the image. Given a coordinate (sr, sc) representing the starting pixel (row and c...",
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement: </strong>An image is represented by a 2-D array of integers, each integer representing the pixel value of the image. Given a coordinate (sr, sc) representing the starting pixel (row and column) of the flood fill, and a pixel value newColor, \"flood fill\" the image.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To perform a \"flood fill\", consider the starting pixel, plus any pixels connected 4-directionally to the starting pixel of the same colour as the starting pixel, plus any pixels connected 4-directionally to those pixels (also with the same colour as the starting pixel), and so on. Replace the colour of all of the aforementioned pixels with the newColor.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Pre-req:</strong> Connected Components, Graph traversal techniques</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Example 1: </strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\"><strong>Input</strong>:\n<img class=\"wp-image-5671\" style=\"width: 150px;\" src=\"https://static.takeuforward.org/wp/uploads/2022/08/Screenshot-2022-08-12-at-9.57.33-PM.png\" alt=\"\">\nsr = 1, sc = 1, newColor = 2\n\n<strong>Output</strong>: \n<img class=\"wp-image-5672\" style=\"width: 150px;\" src=\"https://static.takeuforward.org/wp/uploads/2022/08/Screenshot-2022-08-12-at-9.58.15-PM.png\" alt=\"\"> </pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p><strong>Explanation:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"360\" height=\"219\" src=\"https://lh5.googleusercontent.com/f18gGww3w36wXjALlisRizfW0n4VZEiFfW8Otjn3OP14ZrCqHJai3aKnlPFfLSAKDt4ZMRMtHIxhub2ehFqL4_BHp8M5riFGZtk9N9ft9PYT4a4S0xbjj65wM4PUgVvHLJWB1KOwKdZUUuhe7Aj2Kt4\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">From the centre of the image \n(with position (sr, sc) = (1, 1)), all pixels \nconnected by a path of the same colour as the \nstarting pixel are colored with the new colour.\n \nNote the bottom corner is not colored 2, \nbecause it is not 4-directionally connected to \nthe starting pixel.</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p><strong>Example 2: </strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\"><strong>Input</strong>:\n<img class=\"wp-image-5673\" style=\"width: 150px;\" src=\"https://static.takeuforward.org/wp/uploads/2022/08/Screenshot-2022-08-12-at-10.00.05-PM.png\" alt=\"\">\nsr = 2, sc = 0, newColor = 3\n\n<strong>Output</strong>: \n<img class=\"wp-image-5675\" style=\"width: 150px;\" src=\"https://static.takeuforward.org/wp/uploads/2022/08/Screenshot-2022-08-12-at-10.07.05-PM.png\" alt=\"\"></pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Solution</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"textColor\":\"accent\"} -->\n<p class=\"has-accent-color has-text-color\"><strong><em>Disclaimer</em></strong>: <em>Don't jump directly to the solution, try it out yourself first.</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Approach</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>To perform a \"flood fill\", consider the starting pixel, plus any pixels connected 4-directionally to the starting pixel of the same colour as the starting pixel, plus any pixels connected 4-directionally to those pixels (also with the same colour as the starting pixel), and so on.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"106\" height=\"93\" src=\"https://lh6.googleusercontent.com/U5xiZLVBWZwxnhgnm3VFO021AjTo3q4_AgZOqOdYDdEoTKjeA98P0xrMdXKWhcpeHKk9UvHJ3EdH6BRCcil3A5Hs5267Pu6cnKIVKQH4jrX8itkZHyOJL64CCRCfu98RPAw3wjkTjpubtu3umpNqvAE\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We know about both the traversals, Breadth First Search (BFS) and Depth First Search (DFS). We can follow BFS also, where we start at a given point and colour level wise, i.e., we go simultaneously to all its neighbours. We can use any of the traversals to solve this problem, in our case we will be using DFS just to explore multiple approaches.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The algorithm steps are as follows:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>Initial DFS call will start with the starting pixel (sr, sc) and make sure to store the initial colour.&nbsp;</li><li>Now, either we can use the same matrix to replace the colour of all of the aforementioned pixels with the newColor or create a replica of the given matrix. It is advised to use another matrix because we work on the data and not tamper with it. So we will create a copy of the input matrix.&nbsp;</li><li>Check for the neighbours of the respective pixel that has the same initial colour and has not been visited or coloured. DFS call goes first in the depth on either of the neighbours.</li><li>We go to all 4 directions and check for <strong>unvisited</strong> neighbours with the same initial colour. To travel 4 directions we will use nested loops, you can find the implementation details in the code.&nbsp;</li><li>DFS function call will make sure that it starts the DFS call from that unvisited neighbour, and colours all the pixels that have the same initial colour, and at the same time it will also mark them as visited.&nbsp;</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>In this way, \u201cflood fill\u201d will be performed. It doesn\u2019t matter how we are colouring the pixels, we just want to colour all of the aforementioned pixels with the newColor. So, we can use any of the traversal techniques.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Consider the following example to understand how DFS traverses the pixels and colours them accordingly.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img src=\"https://lh4.googleusercontent.com/pwSg5Puu0EoS1k0hqsvv3pdVToispoUy5Ugw26M9isACoJIjtEO9drqfj6jRbcMZZYhdq6jtGV0auZK5NPaHtAT7qZMPk8ch1BdJHEgm9lUS7d6mJIm0faSSUq5QfCBSwEFjTQrz6G22cp7yKzJCRVQ\" width=\"602\" height=\"265\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>How to set boundaries for 4 directions?</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The 4 neighbours will have following indexes:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"width\":506,\"height\":190} -->\n<figure class=\"wp-block-image is-resized\"><img src=\"https://lh5.googleusercontent.com/luuVNngPreWYhQKY1c3HeW0TdS7Vrq3QhX5cKy4sHrqpGXy4qAxVwHQRRCcvidZpN-yPA4awX6pUapVhzsKfMDdiUNNuyQcFKXN6MRjX-yoRfLYJMN5AxkOl4LFj84PIgqiQKE3O4bZL2bzom7Mgo1Q\" alt=\"\" width=\"506\" height=\"190\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Now, either we can apply 4 conditions or follow the following method.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>From the above image, it is clear that delta change in row is -1, +0, +1, +0. Similarly, the delta change in column is 0, +1, +0, -1.&nbsp; So we can apply the same logic to find the neighbours of a particular pixel (&lt;row, column&gt;).&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    \n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nclass Solution {\nprivate:\n    void dfs(int row, int col, vector&lt;vector&lt;int&gt;&gt;&amp;ans,\n     vector&lt;vector&lt;int&gt;&gt;&amp; image, int newColor, int delRow[], int delCol[],\n     int iniColor) {\n        // color with new color\n        ans[row][col] = newColor; \n        int n = image.size();\n        int m = image[0].size(); \n        // there are exactly 4 neighbours\n        for(int i = 0;i&lt;4;i++) {\n            int nrow = row + delRow[i]; \n            int ncol = col + delCol[i]; \n            // check for valid coordinate \n            // then check for same initial color and unvisited pixel\n            if(nrow&gt;=0 &amp;&amp; nrow&lt;n &amp;&amp; ncol&gt;=0 &amp;&amp; ncol &lt; m &amp;&amp; \n            image[nrow][ncol] == iniColor &amp;&amp; ans[nrow][ncol] != newColor) {\n                dfs(nrow, ncol, ans, image, newColor, delRow, delCol, iniColor); \n            }\n        }\n    }\npublic:\n    vector&lt;vector&lt;int&gt;&gt; floodFill(vector&lt;vector&lt;int&gt;&gt;&amp; image, \n    int sr, int sc, int newColor) {\n        // get initial color\n        int iniColor = image[sr][sc]; \n        vector&lt;vector&lt;int&gt;&gt; ans = image; \n        // delta row and delta column for neighbours\n        int delRow[] = {-1, 0, +1, 0};\n        int delCol[] = {0, +1, 0, -1}; \n        dfs(sr, sc, ans, image, newColor, delRow, delCol, iniColor); \n        return ans; \n    }\n};\n\nint main(){\n\t\t\n\tvector&lt;vector&lt;int&gt;&gt;image{\n\t    {1,1,1},\n\t    {1,1,0},\n\t    {1,0,1}\n\t};\n\t\n// sr = 1, sc = 1, newColor = 2  \t\n\tSolution obj;\n\tvector&lt;vector&lt;int&gt;&gt; ans = obj.floodFill(image, 1, 1, 2);\n\tfor(auto i: ans){\n\t\tfor(auto j: i)\n\t\t\tcout &lt;&lt; j &lt;&lt; \" \";\n\t\tcout &lt;&lt; \"\\n\";\n\t}\n\t\n\treturn 0;\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">2 2 2\n2 2 0 \n2 0 1</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O(NxM + NxMx4) ~ O(N x M)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For the worst case, all of the pixels will have the same colour, so DFS function will be called for (N x M) nodes and for every node we are traversing for 4 neighbours, so it will take O(N x M x 4) time.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(N x M) + O(N x M)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>O(N x M) for copied input array and recursive stack space takes up N x M locations at max.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\n\nclass Solution\n{\n    private void dfs(int row, int col, \n     int[][] ans,\n     int[][] image, \n     int newColor, int delRow[], int delCol[],\n     int iniColor) {\n        // color with new color\n        ans[row][col] = newColor; \n        int n = image.length;\n        int m = image[0].length; \n        // there are exactly 4 neighbours\n        for(int i = 0;i&lt;4;i++) {\n            int nrow = row + delRow[i]; \n            int ncol = col + delCol[i]; \n            // check for valid coordinate \n            // then check for same initial color and unvisited pixel\n            if(nrow&gt;=0 &amp;&amp; nrow&lt;n &amp;&amp; ncol&gt;=0 &amp;&amp; ncol &lt; m &amp;&amp; \n            image[nrow][ncol] == iniColor &amp;&amp; ans[nrow][ncol] != newColor) {\n                dfs(nrow, ncol, ans, image, newColor, delRow, delCol, iniColor); \n            }\n        }\n    }\n    public int[][] floodFill(int[][] image, int sr, int sc, int newColor)\n    {\n        // get initial color\n        int iniColor = image[sr][sc]; \n        int[][] ans = image; \n        // delta row and delta column for neighbours\n        int delRow[] = {-1, 0, +1, 0};\n        int delCol[] = {0, +1, 0, -1}; \n        dfs(sr, sc, ans, image, newColor, delRow, delCol, iniColor); \n        return ans;  \n    }\n    public static void main(String[] args)\n    {\n        int[][] image =  {\n\t        {1,1,1},\n\t        {1,1,0},\n\t        {1,0,1}\n\t    };\n\n        // sr = 1, sc = 1, newColor = 2       \n        Solution obj = new Solution();\n        int[][] ans = obj.floodFill(image, 1, 1, 2);\n        for(int i = 0; i &lt; ans.length; i++){\n            for(int j = 0; j &lt; ans[i].length; j++)\n                System.out.print(ans[i][j] + \" \");\n            System.out.println();\n        }\n    }\n\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">2 2 2\n2 2 0 \n2 0 1</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O(NxM + NxMx4) ~ O(N x M)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For the worst case, all of the pixels will have the same colour, so DFS function will be called for (N x M) nodes and for every node we are traversing for 4 neighbours, so it will take O(N x M x 4) time.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity: </strong>O(N x M) + O(N x M)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>O(N x M) for copied input array and recursive stack space takes up N x M locations at max.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;<strong><a href=\"https://www.linkedin.com/in/vanshika-singh-ba6b15157\" target=\"_blank\" rel=\"noreferrer noopener\">Vanshika Singh Gour</a></strong>&nbsp;for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a>.&nbsp;<em>If you want to suggest any improvement/correction in this article please mail us at&nbsp;write4tuf@gmail.com</em></p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:embed {\"url\":\"https://www.youtube.com/watch?v=C-2_uSRli8o\",\"type\":\"video\",\"providerNameSlug\":\"youtube\",\"responsive\":true,\"className\":\"wp-embed-aspect-16-9 wp-has-aspect-ratio\"} -->\n<figure class=\"wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio\"><div class=\"wp-block-embed__wrapper\">\nhttps://www.youtube.com/watch?v=C-2_uSRli8o\n</div></figure>\n<!-- /wp:embed -->"
}