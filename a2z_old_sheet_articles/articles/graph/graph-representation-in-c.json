{
    "dislikes": 7,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:11:35 GMT+0530 (India Standard Time)",
    "slug": "graph-representation-in-c",
    "aid": "2110",
    "tuf_plus": "",
    "title": "Graph Representation in C++",
    "topics": [
        {
            "topic-id": "c",
            "topic-title": "C++"
        },
        {
            "topic-id": "graph",
            "topic-title": "Graph"
        }
    ],
    "category_tag": "graph",
    "likes": 275,
    "preview": "In this article, we are going to study the different ways of representing a graph in memory, but before that first, let us understand how to take the input of the graph. INPUT FORMAT In the questio...",
    "content": "<!-- wp:paragraph -->\n<p>In this article, we are going to study the different ways of representing a graph in memory, but before that first, let us understand how to take the input of the graph.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Input Format&nbsp;</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In the question, they will mention whether it is a directed or undirected graph. The first line contains two space-separated integers n and m denoting the number of nodes and the number of edges respectively. Next m lines contain two integers u and v representing an edge between u and v. In the case of an undirected graph if there is an edge between u and v, it means there is an edge between v and u as well. Now the question arises if there is any boundation on the number of edges, i.e., the value of m?&nbsp;The answer is NO. If we add more edges, then the value of m will increase.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Graph Representations</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>After understanding the input format, let us try to understand how the graph can be stored. The two most commonly used representations for graphs are</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li>Adjacency Matrix</li><li>Adjacency Lists</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Adjacency Matrix</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>An adjacency matrix of a graph is a two-dimensional array of size n x n, where n is the number of nodes in the graph, with the property that a[ i ][ j ] = 1 if the edge (v\u1d62, v\u2c7c) is in the set of edges, and a[ i ][ j ] = 0 if there is no such edge.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Consider the example of the following undirected graph,</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\"><strong>Input:\n</strong>5 6\n1 2\n1 3\n2 4\n3 4 \n3 5 \n4 5\n\n<strong>Explanation</strong>:\nNumber of nodes, n = 5\nNumber of edges, m = 6\nNext m lines represent the edges.\n\n\n<img width=\"305\" height=\"236.4481180143297\" src=\"https://lh3.googleusercontent.com/YhQ-8oPpVrlHZ0CuBWTcFLdDptuTmSmtNBhMPMtSfLc3-Z21zD0_rNWN8_M_4pI572jhIIrxLYZTlo8w0PbQEdn-M8HSkKAneSvlG35UW1-KAitO2XrxBp7j2l7fRs3aJtJRF4m6BJM8A7nch5M0keo\"></pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>We need to store these edges so that future algorithms can be performed. Are the nodes zero-based or one-based? In this case, the nodes follow one-based indexing as the last node is 5 and the total number of nodes is also 5. Now, define an adjacency matrix of size (n+1) x (n+1), i.e., adj[n+1][n+1]. If there is an edge between 1 and 2, mark 1 at (1,2) and (2,1) as there is an edge between 2 and 1 as well (in the case of an undirected graph). Similarly, follow for other edges.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"602\" height=\"331\" src=\"https://lh6.googleusercontent.com/RJXRgXqBBveetZajhikyA8q29MhMzKKDUXH0WuQb9-k7owhUIi6rZxqvyU-gNicg7HqRYHOE44_C5ojbCpQlbi0QDIn2ZuwWUA6LD5wYSWz6ehdDthINzqofzZ5NZJyEbShmYhJmn7j7IZFlhvyh_uY\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>All the edges are marked in the adjacency matrix, remaining spaces in the matrix are marked as zero or left as it is.<img src=\"https://lh5.googleusercontent.com/8EyiYvV3B3kfRvFjIPoUIsiYfyH6wegQqcjzvhMftBYxfgFrmcPvx5YqfKHuIrSO46XUD6lop9QsaWBwla0GFB5K57ilOgqP5TNs0LAHsPPFI8aVssD-qv_yr_f9dIJHnKlsCtIeq206Qvql923ckCk\" width=\"256\" height=\"201\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This matrix will tell if there is an edge between two particular nodes. For example, there is an edge between 5 and 3 as 1 is at (5,3) but there is no edge between 5 and 1 as the space is empty (or can be filled with 0) at position (5,1) in the adjacency matrix.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The space needed to represent a graph using its adjacency matrix is n\u00b2 locations. Space complexity = (n*n), It is a costly method as n\u00b2 locations are consumed.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    \n    \n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">using namespace std;\n\nint main()\n{\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    // adjacency matrix for undirected graph\n    // time complexity: O(n)\n    int adj[n+1][n+1];\n    for(int i = 0; i &lt; m; i++)\n    {\n        int u, v;\n        cin &gt;&gt; u &gt;&gt; v;\n        adj[u][v] = 1;\n        adj[v][u] = 1  // this statement will be removed in case of directed graph\n    }\n    return 0;\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Adjacency Lists</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In the previous storing method, we saw it was taking n\u00b2 space to store the graph, this is where the adjacency list comes into the picture, it takes a very less amount of space.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This is a node-based representation. In this representation, we associate with each node a list of nodes adjacent to it. Normally an array is used to store the nodes. The array provides random access to the adjacency list for any particular node.<br>Consider the example of the following <strong>undirected graph</strong>,</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"284\" height=\"219.979094869053\" src=\"https://lh3.googleusercontent.com/YhQ-8oPpVrlHZ0CuBWTcFLdDptuTmSmtNBhMPMtSfLc3-Z21zD0_rNWN8_M_4pI572jhIIrxLYZTlo8w0PbQEdn-M8HSkKAneSvlG35UW1-KAitO2XrxBp7j2l7fRs3aJtJRF4m6BJM8A7nch5M0keo\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To create an adjacency list, we will create an array of size n+1 where n is the number of nodes. This array will contain a list, so in C++ list is nothing but the vector of integers.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">vector &lt;int&gt; adj[n+1];</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>Now every index is containing an empty vector/ list. With respect to the example, 6 indexes contain empty vectors.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em><strong>What is the motive of the list?</strong></em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In the example, we can clearly see that node 4 has nodes 2, 3, and 5 as its adjacent neighbors. So, to store its immediate neighbors in any order, we use the list.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"602\" height=\"441\" src=\"https://lh6.googleusercontent.com/4tesls8e58HF6qAqwEf9S-ZmsgmB9l0VcJR9VL0JG9rBzYwuWgW342wWkb7vQm3E6KP5-bGsTgVvAv_Y0hTSu3AA9f4Og76RjXW8W2dM6esXc4aCy6ekmXFe_u5RnwQQMihbqp9J3iJ0MscUlrZFJKg\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Hence, we stored all the neighbors in the particular indexes. In this representation, for an undirected graph, each edge data appears twice. For example, nodes 1 and 2 are adjacent hence node 2 appears in the list of node 1, and node 1 appears in the list of node 2. So, the space needed to represent an undirected graph using its adjacency list is 2 x E locations, where E denotes the number of edges.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Space complexity = O(2xE)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This representation is much better than the adjacency matrix, as matrix representation consumes n\u00b2 locations, and most of them are unused.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    \n    \n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main()\n{\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    // adjacency list for undirected graph\n    // time complexity: O(2E)\n    vector&lt;int&gt; adj[n+1];\n    for(int i = 0; i &lt; m; i++)\n    {\n        int u, v;\n        cin &gt;&gt; u &gt;&gt; v;\n        adj[u].push_back(v);\n        adj[v].push_back(u);\n    }\n    return 0;\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For<strong> directed graphs</strong>, if there is an edge between u and v it means the edge only goes from u to v, i.e., v is the neighbor of u, but vice versa is not true. The space needed to represent a directed graph using its adjacency list is E locations, where E denotes the number of edges, as here each edge data appears only once.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Space complexity = O(E)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    \n    \n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main()\n{\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    // adjacency list for directed graph\n    // time complexity: O(E)\n    vector&lt;int&gt; adj[n+1];\n    for(int i = 0; i &lt; m; i++)\n    {\n        int u, v;\n        // u \u2014&gt; v\n        cin &gt;&gt; u &gt;&gt; v;\n        adj[u].push_back(v);\n    }\n    return 0;\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Weighted Graph Representation</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>As of now, we were considering graphs with unit weight edges (i.e., if there is an edge between two nodes then the weight on the edge is unit weight ), now what if there are weights on its edges as shown in the following example?</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"width\":250,\"height\":198} -->\n<figure class=\"wp-block-image is-resized\"><img src=\"https://lh6.googleusercontent.com/CnPL5wUPV5wf2I7lv7jV-GFAoJaXOTZBvmgCgusdczypjn4yLGKPWLtq_rzpmt5EkVOIhxFblvHR8lSKHgCk1Zb8g5k763m0q2rydSWq_znM1I6K_Fc3syLqj4hpRvBOR3b_8MPEZbCjBcgygZudoQQ\" alt=\"\" width=\"250\" height=\"198\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>For the <strong>adjacency matrix,</strong> it is much simpler.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"width\":380,\"height\":135} -->\n<figure class=\"wp-block-image is-resized\"><img src=\"https://lh3.googleusercontent.com/h7yeB3kxWBfzIJfmC5G3ta1Pr-AhEpAOw_pxeEIVe6caS97MAnmS1neZ8w7yUktrlXCNIs6V3NmPu0AJbhMRIXYSNODLC2SFmi5kKKyXI3Q89Eyo9crK-wwIrouJffQL4VGY9kKVsvGS7xLd47y0T2s\" alt=\"\" width=\"380\" height=\"135\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>But how are we going to implement it in the <strong>adjacency list</strong>?</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Earlier in the adjacency list, we were storing a list of integers in each index, but for weighted graphs, we will store pairs (node, edge weight) in it.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">vector&lt; pair &lt;int,int&gt; &gt; adjList[n+1];</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p><strong><img width=\"287\" height=\"131\" src=\"https://lh5.googleusercontent.com/vgWb7A7DsyYeVVDdNbIRSponcUsgS_TakkoaQipgtanPgLhSDsFts0ssveTy0peu3CDlIBRoaW_hLRDwYk3r4UJ9LCD5WKhMEM5S2TOA4R5S_UvxH31FKkbmyl948xNi50hykZc5aenOyblaHV9kGuY\"></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;<strong><a href=\"https://www.linkedin.com/in/vanshika-singh-ba6b15157\" target=\"_blank\" rel=\"noreferrer noopener\">Vanshika Singh Gour</a></strong>&nbsp;for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a>.&nbsp;<em>If you want to suggest any improvement/correction in this article please mail us at&nbsp;write4tuf@gmail.com</em></p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:embed {\"url\":\"https://www.youtube.com/watch?v=3oI-34aPMWM\",\"type\":\"video\",\"providerNameSlug\":\"youtube\",\"responsive\":true,\"className\":\"wp-embed-aspect-16-9 wp-has-aspect-ratio\"} -->\n<figure class=\"wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio\"><div class=\"wp-block-embed__wrapper\">\nhttps://www.youtube.com/watch?v=3oI-34aPMWM\n</div></figure>\n<!-- /wp:embed -->"
}