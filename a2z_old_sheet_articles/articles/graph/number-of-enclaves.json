{
    "dislikes": 2,
    "video": "rxKcepXQgU4",
    "publishedOn": "Sun Mar 24 2024 22:11:40 GMT+0530 (India Standard Time)",
    "slug": "number-of-enclaves",
    "aid": "2134",
    "tuf_plus": "https://takeuforward.org/plus/dsa/problems/number-of-enclaves",
    "title": "Number of Enclaves",
    "topics": [
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        },
        {
            "topic-id": "graph",
            "topic-title": "Graph"
        }
    ],
    "category_tag": "graph",
    "likes": 57,
    "preview": "Problem Statement: You are given an N x M binary matrix grid, where 0 represents a sea cell and 1 represents a land cell. A move consists of walking from one land cell to another adjacent (4-direct...",
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement: </strong>You are given an N x M binary matrix grid, where 0 represents a sea cell and 1 represents a land cell. A move consists of walking from one land cell to another adjacent (4-directionally) land cell or walking off the boundary of the grid. Find the number of land cells in the grid for which we cannot walk off the boundary of the grid in any number of moves.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Examples:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Example 1:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Input:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":6564,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2022/09/image-8.png\" alt=\"\" class=\"wp-image-6564\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> 3</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Explanation:</strong> The highlighted cells represent the land cells.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":6565,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2022/09/image-9.png\" alt=\"\" class=\"wp-image-6565\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>Example 2:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Input:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":6566,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full\"><img src=\"https://static.takeuforward.org/wp/uploads/2022/09/image-10.png\" alt=\"\" class=\"wp-image-6566\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> 4</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Explanation:</strong> The highlighted cells represent the land cells.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"blob:https://takeuforward.org/3f50b702-5fc3-488c-a99a-a16c75c359f7\" alt=\"\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Solution</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"textColor\":\"accent\"} -->\n<p class=\"has-accent-color has-text-color\"><strong><em>Disclaimer</em></strong>: <em>Don't jump directly to the solution, try it out yourself first.</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Intuition:</strong></h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The land cells present in the boundary cannot be counted in the answer as we will walk off the boundary of the grid. Also, land cells connected to the boundary land cell can never be the answer.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The intuition is that we need to figure out the boundary land cells, go through their connected land cells and mark them as visited. The sum of all the remaining land cells will be the answer.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3><strong>Approach</strong>:</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>We can follow either of the traversal techniques as long as we are starting with a boundary element and marking all those 1s connected to it. We will be solving it using BFS traversal, but you can apply DFS traversal as well, we have applied DFS traversal to solve a similar problem in the previous article.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Breadth First Search, BFS is a traversal technique where we visit the nodes level-wise, i.e., it visits the same level nodes simultaneously, and then moves to the next level.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Initial configuration:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>Queue:</strong> Define a queue and insert the coordinates of the cell &lt;row, column&gt; which are in the boundary and are marked as 1. The boundary cells will always have row i = 0 or row i = n-1 or col j = 0 or col j = m-1.&nbsp;</li><li><strong>Visited array: </strong>an array initialized to 0 indicating unvisited cells, apart from the ones in the boundary which are already in the queue ds.&nbsp;&nbsp;</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>The algorithm steps are as follows:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>For BFS traversal, we need a queue data structure and a visited array. Create a corresponding visited array.&nbsp;</li><li>Push the coordinates of boundary nodes in the queue and mark them as visited.</li><li>Start the BFS traversal, pop out an element from the queue every time and travel to all its <strong><em>unvisited neighboring land cells</em></strong> in the 4 directions. For every unvisited node, push it {row, col} into the Q and mark it as visited to avoid multiple traversals in the future.&nbsp;</li><li>Repeat the steps until the queue becomes empty. When all the boundaries are traversed and corresponding sets of 1s are marked as visited, use a counter variable to count the number of remaining unvisited land cells.&nbsp;</li><li>Return the value of the counter as it indicates the number of land cells that cannot cross the boundary.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Consider the following illustration to understand how BFS traverses the matrix and finds the number of land cells in the grid for which we cannot walk off the boundary of the grid in any number of moves.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><img width=\"652\" height=\"478\" src=\"https://lh5.googleusercontent.com/SUS4Jm4wUUL4il2s1hB7xMNH8T3ZLwg6s-t5RXUH3e5x6JmHs8H06kE2uAZM8CWx7fulT3xXTbfP6jKERQW_kOx_3o-PR9yDcJy9EA_X6jIzEbTYNrCkAgZ2_qenpuTLDHepUlqaK_Grh_XCjVS7oJp3bP1NFopqj6pmepX2yzHT3Y8YHasxPA6r7w\"></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>How do set boundaries for 4 directions?</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The 4 neighbors will have the following indexes:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong><img width=\"318\" height=\"118\" src=\"https://lh6.googleusercontent.com/oa-RQdfEGwbvtczjL3nY5Vq8x3tB1mRJi_7uqsGMDa4ZEdS4LTq4MM6DtdsA1aqQBt6LaZtUQF6_Poco7SLf6R7sU6ZrQe1uGqUmf9CN3rkmlvskvemt2uR2cD9VYm6zZhm0DMiE4INYx7Lpk0OanUl2Bv0cJvqYrUaIJmczqlSTjFoZOttL3quDKg\"></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now, either we can apply 4 conditions or follow the following method.&nbsp;From the above image, it is clear that the delta change in the row is -1, +0, +1, +0. Similarly, the delta change in the column is 0, +1, +0, -1.&nbsp; So we can apply the same logic to find the neighbors of a particular pixel (&lt;row, column&gt;).&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    \n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nclass Solution {\n  public:\n    int numberOfEnclaves(vector&lt;vector&lt;int&gt;&gt; &amp;grid) {\n        queue&lt;pair&lt;int,int&gt;&gt; q; \n        int n = grid.size(); \n        int m = grid[0].size(); \n        int vis[n][m] = {0}; \n        // traverse boundary elements\n        for(int i = 0;i&lt;n;i++) {\n            for(int j = 0;j&lt;m;j++) {\n                // first row, first col, last row, last col \n                if(i == 0 || j == 0 || i == n-1 || j == m-1) {\n                    // if it is a land then store it in queue\n                    if(grid[i][j] == 1) {\n                        q.push({i, j}); \n                        vis[i][j] = 1; \n                    }\n                }\n            }\n        }\n        \n        int delrow[] = {-1, 0, +1, 0};\n        int delcol[] = {0, +1, +0, -1}; \n        \n        while(!q.empty()) {\n            int row = q.front().first; \n            int col = q.front().second; \n            q.pop(); \n            \n            // traverses all 4 directions\n            for(int i = 0;i&lt;4;i++) {\n                int nrow = row + delrow[i];\n                int ncol = col + delcol[i]; \n                // check for valid coordinates and for land cell\n                if(nrow &gt;=0 &amp;&amp; nrow &lt;n &amp;&amp; ncol &gt;=0 &amp;&amp; ncol &lt; m \n                &amp;&amp; vis[nrow][ncol] == 0 &amp;&amp; grid[nrow][ncol] == 1) {\n                    q.push({nrow, ncol});\n                    vis[nrow][ncol] = 1; \n                }\n            }\n            \n        }\n        \n        int cnt = 0;\n        for(int i = 0;i&lt;n;i++) {\n            for(int j = 0;j&lt;m;j++) {\n                // check for unvisited land cell\n                if(grid[i][j] == 1 &amp; vis[i][j] == 0) \n                    cnt++; \n            }\n        }\n        return cnt; \n    }\n};\n\nint main() {\n    \n    vector&lt;vector&lt;int&gt;&gt; grid{\n        {0, 0, 0, 0},\n        {1, 0, 1, 0},\n        {0, 1, 1, 0},\n        {0, 0, 0, 0}};\n        \n    Solution obj;\n    cout &lt;&lt; obj.numberOfEnclaves(grid) &lt;&lt; endl;\n\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:&nbsp; </strong>3</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O(NxMx4) ~ O(N x M), For the worst case, assuming all the pieces as land, the BFS function will be called for (N x M) nodes and for every node, we are traversing for 4 neighbors, so it will take O(N x M x 4) time.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity ~</strong> O(N x M), O(N x M) for the visited array, and queue space takes up N x M locations at max.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\n\nclass Solution {\n\n    int numberOfEnclaves(int[][] grid) {\n        Queue&lt;Pair&gt; q = new LinkedList&lt;Pair&gt;();\n        int n = grid.length; \n        int m = grid[0].length; \n        int vis[][] = new int[n][m];\n        // traverse boundary elements\n        for(int i = 0;i&lt;n;i++) {\n            for(int j = 0;j&lt;m;j++) {\n                // first row, first col, last row, last col \n                if(i == 0 || j == 0 || i == n-1 || j == m-1) {\n                    // if it is a land then store it in queue\n                    if(grid[i][j] == 1) {\n                        q.add(new Pair(i, j)); \n                        vis[i][j] = 1; \n                    }\n                }\n            }\n        }\n        \n        int delrow[] = {-1, 0, +1, 0};\n        int delcol[] = {0, +1, +0, -1}; \n        \n        while(!q.isEmpty()) {\n            int row = q.peek().first; \n            int col = q.peek().second; \n            q.remove(); \n            \n            // traverses all 4 directions\n            for(int i = 0;i&lt;4;i++) {\n                int nrow = row + delrow[i];\n                int ncol = col + delcol[i]; \n                // check for valid coordinates and for land cell\n                if(nrow &gt;=0 &amp;&amp; nrow &lt;n &amp;&amp; ncol &gt;=0 &amp;&amp; ncol &lt; m \n                &amp;&amp; vis[nrow][ncol] == 0 &amp;&amp; grid[nrow][ncol] == 1) {\n                    q.add(new Pair(nrow, ncol));\n                    vis[nrow][ncol] = 1; \n                }\n            }\n            \n        }\n        int cnt = 0;\n        for(int i = 0;i&lt;n;i++) {\n            for(int j = 0;j&lt;m;j++) {\n                // check for unvisited land cell\n                if(grid[i][j] == 1 &amp; vis[i][j] == 0) \n                    cnt++; \n            }\n        }\n        return cnt; \n        \n    }\n    public static void main(String[] args)\n    {\n        int grid[][] = {\n        {0, 0, 0, 0},\n        {1, 0, 1, 0},\n        {0, 1, 1, 0},\n        {0, 0, 0, 0}};\n\n        Solution ob = new Solution();\n        int ans = ob.numberOfEnclaves(grid);\n        System.out.println(ans);\n    }\n\n}\nclass Pair {\n    int first;\n    int second; \n    public Pair(int first, int second) {\n        this.first = first; \n        this.second = second; \n    }\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:&nbsp; </strong>3</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Time Complexity: </strong>O(NxMx4) ~ O(N x M), For the worst case, assuming all the pieces as land, the BFS function will be called for (N x M) nodes and for every node, we are traversing for 4 neighbors, so it will take O(N x M x 4) time.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Space Complexity ~</strong> O(N x M), O(N x M) for the visited array, and queue space takes up N x M locations at max.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to&nbsp;<strong><a href=\"https://www.linkedin.com/in/vanshika-singh-ba6b15157\" target=\"_blank\" rel=\"noreferrer noopener\">Vanshika Singh Gour</a></strong>&nbsp;for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a>.&nbsp;<em>If you want to suggest any improvement/correction in this article please mail us at&nbsp;write4tuf@gmail.com</em></p></blockquote>\n<!-- /wp:quote -->"
}