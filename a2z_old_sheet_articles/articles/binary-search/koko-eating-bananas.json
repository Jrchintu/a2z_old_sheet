{
    "dislikes": 10,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:12:05 GMT+0530 (India Standard Time)",
    "slug": "koko-eating-bananas",
    "aid": "2244",
    "title": "Koko Eating Bananas",
    "tuf_plus": "",
    "topics": [
        {
            "topic-id": "arrays",
            "topic-title": "Arrays"
        },
        {
            "topic-id": "binary-search",
            "topic-title": "Binary Search"
        },
        {
            "topic-id": "data-structure",
            "topic-title": "Data Structures"
        }
    ],
    "content": "<!-- wp:paragraph -->\n<p><strong>Problem Statement:</strong> A monkey is given \u2018n\u2019 piles of bananas, whereas the 'ith' pile has \u2018a[i]\u2019 bananas. An integer \u2018h\u2019 is also given, which denotes the time (in hours) for all the bananas to be eaten.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Each hour, the monkey chooses a non-empty pile of bananas and eats \u2018k\u2019 bananas. If the pile contains less than \u2018k\u2019 bananas, then the monkey consumes all the bananas and won\u2019t eat any more bananas in that hour.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Find the minimum number of bananas \u2018k\u2019 to eat per hour so that the monkey can eat all the bananas within \u2018h\u2019 hours.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<!-- This is Examples Drop-Down -->\n<div id=\"article_examples\">\n<details class=\"article_example_details\">\n<summary class=\"article_example_summary\">\n<span><strong>\nExamples\n</strong>\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"atricle_example_content\">\n<pre class=\"wp-block-preformatted\"><!-- Insert New Examples Here -->\n<pre class=\"wp-block-preformatted\"><strong>Example 1:</strong>\n<strong>Input Format:</strong> N = 4, a[] = {7, 15, 6, 3}, h = 8\n<strong>Result:</strong> 5\n<strong>Explanation:</strong> If Koko eats 5 bananas/hr, he will take 2, 3, 2, and 1 hour to eat the piles accordingly. So, he will take 8 hours to complete all the piles.  \n\n<strong>Example 2:</strong>\n<strong>Input Format:</strong> N = 5, a[] = {25, 12, 8, 14, 19}, h = 5\n<strong>Result:</strong> 25\n<strong>Explanation:</strong> If Koko eats 25 bananas/hr, he will take 1, 1, 1, 1, and 1 hour to eat the piles accordingly. So, he will take 5 hours to complete all the piles.\n<p>\n</p><p>Before moving on to the solution, let\u2019s understand how Koko will eat the bananas. Assume, the given array is {3, 6, 7, 11} and the given time i.e. h is 8.&nbsp;</p>\n<ul><li>First of all, Koko cannot eat bananas from different piles. He should complete the pile he has chosen and then he can go for another pile.</li><li>Now, Koko decides to eat 2 bananas/hour. So, in order to complete the first he will take<br>3 / 2 = 2 hours. Though mathematically, he should take 1.5 hrs but it is clearly stated in the question that after completing a pile Koko will not consume more bananas in that hour. So, for the first pile, Koko will eat 2 bananas in the first hour and then he will consume 1 banana in another hour.&nbsp;</li></ul>\n<p>From here we can conclude that we have to take ceil of (3/2). Similarly, we will calculate the times for other piles.</p>\n<ul><li><strong>1st pile: </strong>ceil(3/2) = 2 hrs</li><li><strong>2nd pile: </strong>ceil(6/2) = 3 hrs</li><li><strong>3rd pile: </strong>ceil(7/2) = 4 hrs</li><li><strong>4th pile: </strong>ceil(11/2) = 6 hrs</li></ul>\n<p>Koko will take 15 hrs in total to consume all the bananas from all the piles.&nbsp;</p>\n<p><strong>Observation: </strong>Upon observation, it becomes evident that the maximum number of bananas (<em>represented by 'k'</em>) that Koko can consume in an hour is obtained from the pile that contains the largest quantity of bananas. Therefore, the maximum value of 'k' corresponds to the maximum element present in the given array.</p>\n<p><strong><em>So, our answer i.e. the minimum value of \u2018k\u2019 lies between 1 and the maximum element in the array i.e. max(a[]).</em></strong></p>\n<p>Now, let\u2019s move on to the solution.</p>\n<p></p>\n</pre>\n</pre>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Practice Section-->\n<div class=\"practice\">\n<span><strong>Practice: </strong></span>\n<div class=\"problem-buttons\">\n\n<!-- Add Problem Link inside href -->\n<a href=\"https://bit.ly/41ExJ4K\" target=\"_blank\" rel=\"noopener\">\n<span>Solve Problem</span>\n<img src=\"https://static.takeuforward.org/wp/uploads/2023/04/Group-11-5.png\" alt=\"code-studio\">\n</a>\n</div>\n</div>\n<p class=\"new-disclaimer\"><strong><em>Disclaimer</em></strong>: <em>Don\u2019t jump directly to the solution, try it out\nyourself first. </em></p>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<div class=\"horizontal_navbar_dsa_article\">\n<div class=\"grid_container_two\">\n<a href=\"#brute-force-approach\" class=\"two-boxes box-a\">\nBrute Force Approach\n</a>\n<a href=\"#optimal-approach\" class=\"two-boxes box-c\">\nOptimal Approach\n</a>\n<a href=\"#dsa_article_video_explanation\" class=\"three-boxes box-d\">\n<svg width=\"26\" height=\"26\" viewBox=\"0 0 20 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M8 10L13.19 7L8 4V10ZM19.56 2.17C19.69 2.64 19.78 3.27 19.84 4.07C19.91 4.87 19.94 5.56 19.94 6.16L20 7C20 9.19 19.84 10.8 19.56 11.83C19.31 12.73 18.73 13.31 17.83 13.56C17.36 13.69 16.5 13.78 15.18 13.84C13.88 13.91 12.69 13.94 11.59 13.94L10 14C5.81 14 3.2 13.84 2.17 13.56C1.27 13.31 0.69 12.73 0.44 11.83C0.31 11.36 0.22 10.73 0.16 9.93C0.0900001 9.13 0.0599999 8.44 0.0599999 7.84L0 7C0 4.81 0.16 3.2 0.44 2.17C0.69 1.27 1.27 0.69 2.17 0.44C2.64 0.31 3.5 0.22 4.82 0.16C6.12 0.0899998 7.31 0.0599999 8.41 0.0599999L10 0C14.19 0 16.8 0.16 17.83 0.44C18.73 0.69 19.31 1.27 19.56 2.17Z\" fill=\"red\"></path>\n</svg>\n\n</a>\n<div class=\"box-e tooltip\">\n<svg viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M12.842 9.25L11.9577 10.17C11.2502 10.89 10.8081 11.5 10.8081 13H8.84297V12.5C8.84297 11.39 9.28511 10.39 9.99255 9.67L11.2109 8.41C11.5745 8.05 11.7906 7.55 11.7906 7C11.7906 6.46957 11.5836 5.96086 11.2151 5.58579C10.8465 5.21071 10.3467 5 9.82552 5C9.30434 5 8.80451 5.21071 8.43598 5.58579C8.06745 5.96086 7.86041 6.46957 7.86041 7H5.89531C5.89531 5.93913 6.30938 4.92172 7.04644 4.17157C7.7835 3.42143 8.78316 3 9.82552 3C10.8679 3 11.8675 3.42143 12.6046 4.17157C13.3417 4.92172 13.7557 5.93913 13.7557 7C13.7543 7.84324 13.4259 8.65183 12.842 9.25ZM10.8081 17H8.84297V15H10.8081M9.82552 0C8.53521 0 7.25754 0.258658 6.06545 0.761205C4.87337 1.26375 3.79021 2.00035 2.87783 2.92893C1.03519 4.8043 0 7.34784 0 10C0 12.6522 1.03519 15.1957 2.87783 17.0711C3.79021 17.9997 4.87337 18.7362 6.06545 19.2388C7.25754 19.7413 8.53521 20 9.82552 20C12.4314 20 14.9306 18.9464 16.7732 17.0711C18.6158 15.1957 19.651 12.6522 19.651 10C19.651 4.47 15.2296 0 9.82552 0Z\" fill=\"black\"></path>\n</svg>\n<div class=\"bottom\">\n<p>Expand any one approach by clicking the given options in the bar. Clicking one approach on bar,\ncloses all other expands. You can manually expand more than one approach at a time</p>\n<i></i>\n</div>\n\n</div>\n</div>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Approaches Drop-Down -->\n<div class=\"dsa_article_dropdown_approachs \">\n\n<!-- Brute Force Approach Starts from here -->\n<div id=\"brute-force-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nBrute Force Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm / Intuition of Brute Force Apporach Here -->\n<h3><strong>Naive Approach(Brute-force)</strong>:&nbsp;</h3>\n<p>The extremely naive approach is to check all possible answers from 1 to max(a[]). The minimum number for which the required time &lt;= h, is our answer.</p>\n<p><strong>Algorithm:</strong></p>\n<ol><li>First, we will find the maximum value i.e. <strong>max(a[]) </strong>in the given array.</li><li>We will run a loop(<strong>say i</strong>) from 1 to max(a[]), to check all possible answers.</li><li>For each number i, we will calculate the hours required to consume all the bananas from the pile. We will do this using the function <strong>calculateTotalHours(), </strong>discussed below.</li><li>The first i, for which the required hours &lt;= h, we will return that value of i.</li></ol>\n<p><strong>calculateTotalHours(a[], hourly):</strong></p>\n<ul><li>a[] -&gt; the given array</li><li>Hourly -&gt; the possible number of bananas, Koko will eat in an hour.<br></li></ul>\n<ol><li>We will iterate every pile of the given array using a loop(<strong>say i</strong>).</li><li>For every pile i, we will calculate the hour i.e. ceil(v[i] / hourly), and add it to the total hours.</li><li>Finally, we will return the total hours.</li></ol>\n<p><strong>Dry-run: </strong><em>Please refer to the </em><a href=\"https://youtu.be/qyfekrNni90\"><em>video</em></a><em> for the dry-run.</em></p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n\n<!-- Insert C++ code of Brute Force Here -->\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint findMax(vector&lt;int&gt; &amp;v) {\n    int maxi = INT_MIN;\n    int n = v.size();\n    //find the maximum:\n    for (int i = 0; i &lt; n; i++) {\n        maxi = max(maxi, v[i]);\n    }\n    return maxi;\n}\n\nint calculateTotalHours(vector&lt;int&gt; &amp;v, int hourly) {\n    int totalH = 0;\n    int n = v.size();\n    //find total hours:\n    for (int i = 0; i &lt; n; i++) {\n        totalH += ceil((double)(v[i]) / (double)(hourly));\n    }\n    return totalH;\n}\n\nint minimumRateToEatBananas(vector&lt;int&gt; v, int h) {\n    //Find the maximum number:\n    int maxi = findMax(v);\n\n    //Find the minimum value of k:\n    for (int i = 1; i &lt;= maxi; i++) {\n        int reqTime = calculateTotalHours(v, i);\n        if (reqTime &lt;= h) {\n            return i;\n        }\n    }\n\n    //dummy return statement\n    return maxi;\n}\n\nint main()\n{\n    vector&lt;int&gt; v = {7, 15, 6, 3};\n    int h = 8;\n    int ans = minimumRateToEatBananas(v, h);\n    cout &lt;&lt; \"Koko should eat atleast \" &lt;&lt; ans &lt;&lt; \" bananas/hr.\\n\";\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\n<!-- Insert Java code of Brute Force Here -->\nimport java.util.*;\n\npublic class tUf {\n    public static int findMax(int[] v) {\n        int maxi = Integer.MIN_VALUE;;\n        int n = v.length;\n        //find the maximum:\n        for (int i = 0; i &lt; n; i++) {\n            maxi = Math.max(maxi, v[i]);\n        }\n        return maxi;\n    }\n\n    public static int calculateTotalHours(int[] v, int hourly) {\n        int totalH = 0;\n        int n = v.length;\n        //find total hours:\n        for (int i = 0; i &lt; n; i++) {\n            totalH += Math.ceil((double)(v[i]) / (double)(hourly));\n        }\n        return totalH;\n    }\n\n    public static int minimumRateToEatBananas(int[] v, int h) {\n        //Find the maximum number:\n        int maxi = findMax(v);\n\n        //Find the minimum value of k:\n        for (int i = 1; i &lt;= maxi; i++) {\n            int reqTime = calculateTotalHours(v, i);\n            if (reqTime &lt;= h) {\n                return i;\n            }\n        }\n\n        //dummy return statement\n        return maxi;\n    }\n\n    public static void main(String[] args) {\n        int[] v = {7, 15, 6, 3};\n        int h = 8;\n        int ans = minimumRateToEatBananas(v, h);\n        System.out.println(\"Koko should eat at least \" + ans + \" bananas/hr.\");\n    }\n}\n\n\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\n<!-- Insert Python code of Brute Force Here -->\nimport math\n\ndef findMax(v):\n    maxi = float('-inf')\n    n = len(v)\n    # Find the maximum\n    for i in range(n):\n        maxi = max(maxi, v[i])\n    return maxi\n\ndef calculateTotalHours(v, hourly):\n    totalH = 0\n    n = len(v)\n    # Find total hours\n    for i in range(n):\n        totalH += math.ceil(v[i] / hourly)\n    return totalH\n\ndef minimumRateToEatBananas(v, h):\n    # Find the maximum number\n    maxi = findMax(v)\n\n    # Find the minimum value of k\n    for i in range(1, maxi+1):\n        reqTime = calculateTotalHours(v, i)\n        if reqTime &lt;= h:\n            return i\n\n    # Dummy return statement\n    return maxi\n\nv = [7, 15, 6, 3]\nh = 8\nans = minimumRateToEatBananas(v, h)\nprint(\"Koko should eat at least\", ans, \"bananas/hr.\")\n\n\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\n<!-- Insert javascript code of Brute Force Here -->\nfunction findMax(v) {\n    let maxi = -Infinity;\n    let n = v.length;\n    // Find the maximum\n    for (let i = 0; i &lt; n; i++) {\n        maxi = Math.max(maxi, v[i]);\n    }\n    return maxi;\n}\n\nfunction calculateTotalHours(v, hourly) {\n    let totalH = 0;\n    let n = v.length;\n    // Find total hours\n    for (let i = 0; i &lt; n; i++) {\n        totalH += Math.ceil(v[i] / hourly);\n    }\n    return totalH;\n}\n\nfunction minimumRateToEatBananas(v, h) {\n    // Find the maximum number\n    let maxi = findMax(v);\n\n    // Find the minimum value of k\n    for (let i = 1; i &lt;= maxi; i++) {\n        let reqTime = calculateTotalHours(v, i);\n        if (reqTime &lt;= h) {\n            return i;\n        }\n    }\n\n    // Dummy return statement\n    return maxi;\n}\n\nlet v = [7, 15, 6, 3];\nlet h = 8;\nlet ans = minimumRateToEatBananas(v, h);\nconsole.log(\"Koko should eat at least \" + ans + \" bananas/hr.\");\n\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Brute Force Here -->\n<strong>Output:</strong> Koko should eat atleast 5 bananas/hr.\n\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n<!-- Insert Time and Space Complexity of Brute Force Here -->\n</p><p><strong>Time Complexity: </strong>O(max(a[]) * N), where max(a[]) is the maximum element in the array and N = size of the array.<br><strong>Reason: </strong>We are running nested loops. The outer loop runs for max(a[]) times in the worst case and the inner loop runs for N times.</p>\n<p><strong>Space Complexity: </strong>O(1) as we are not using any extra space to solve this problem.</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Brute Force Approach Ends here -->\n\n\n<!-- Optimal Approach Starts from here -->\n\n<div id=\"optimal-approach\">\n<details>\n<summary class=\"main-summary\">\n<span>\nOptimal Approach\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"common-drops\">\n<details class=\"secondary-details\" open=\"\">\n<summary class=\"secondary-summary\">\n<span>\nAlgorithm / Intuition\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"approach-algorithm\">\n\n<!-- Insert Algorithm of Better Approach Here -->\n<h3><strong>Optimal Approach(Using Binary Search)</strong>:&nbsp;</h3>\n<p>We are going to use the Binary Search algorithm to optimize the approach.</p>\n<p><em>The primary objective of the Binary Search algorithm is to efficiently determine the appropriate half to eliminate, thereby reducing the search space by half. It does this by determining a specific condition that ensures that the target is not present in that half.</em></p>\n<p>Now, we are not given any sorted array on which we can apply binary search. But, if we observe closely, we can notice that our answer space i.e. [1, max(a[])] is sorted. So, we will apply binary search on the answer space.</p>\n<h3><strong>Algorithm:</strong></h3>\n<ol><li><strong>First, </strong>we will find the maximum element in the given array i.e. max(a[]).</li><li><strong>Place the 2 pointers i.e. low and high: </strong>Initially, we will place the pointers. The pointer low will point to 1 and the high will point to max(a[]).<br></li><li><strong>Calculate the \u2018mid\u2019: </strong>Now, inside the loop, we will calculate the value of \u2018mid\u2019 using the following formula:<br><strong>mid = (low+high) // 2 ( \u2018//\u2019 refers to integer division)</strong><strong><br></strong></li><li><strong>Eliminate the halves based on the time required if Koko eats \u2018mid\u2019 bananas/hr: </strong><strong><br></strong>We will first calculate the total time(<em>required to consume all the bananas in the array</em>) i.e. totalH using the function <strong>calculateTotalHours(a[], mid):</strong><strong><br></strong><ol><li><strong>If totalH &lt;= h: </strong>On satisfying this condition, we can conclude that the number \u2018mid\u2019 is one of our possible answers. But we want the minimum number. So, we will eliminate the right half and consider the left half(i.e. high = mid-1).</li><li><strong>Otherwise, </strong>the value mid is smaller than the number we want(<em>as the totalH &gt; h</em>). This means the numbers greater than \u2018mid\u2019 should be considered and the right half of \u2018mid\u2019 consists of such numbers. So, we will eliminate the left half and consider the right half(i.e. low = mid+1).</li></ol></li><li>Finally, outside the loop, we will return the value of low as the pointer will be pointing to the answer.</li></ol>\n<p>The steps from 2-4 will be inside a loop and the loop will continue until low crosses high.</p>\n<p><strong>Note: </strong><em>Please make sure to refer to the </em><a href=\"https://youtu.be/qyfekrNni90\"><em>video</em></a><em> and try out some test cases of your own to understand, how the pointer \u2018low\u2019 will be always pointing to the answer in this case. This is also the reason we have not used any extra variable here to store the answer.</em></p>\n<p><strong>calculateTotalHours(a[], hourly):</strong></p>\n<ul><li>a[] -&gt; the given array</li><li>Hourly -&gt; the possible number of bananas, Koko will eat in an hour.</li></ul>\n<ol><li>We will iterate every pile of the given array using a loop(<strong>say i</strong>).</li><li>For every pile i, we will calculate the hour i.e. ceil(v[i] / hourly), and add it to the total hours.</li><li>Finally, we will return the total hours.</li></ol>\n<p><strong>Dry-run: </strong><em>Please refer to the </em><a href=\"https://youtu.be/qyfekrNni90\"><em>video</em></a><em> for the dry-run.</em></p>\n</div>\n</details>\n<details class=\"code-section secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nCode\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<div class=\"code-tabs\">\n<button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n<button class=\"code-tab\" data-lang=\"java\">Java</button>\n<button class=\"code-tab\" data-lang=\"python\">Python</button>\n<button class=\"code-tab\" data-lang=\"javascript\">JavaScript</button>\n<svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n</path>\n</svg>\n</div>\n<div class=\"code-content\">\n<div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">\n\n<!-- Insert C++ code of Optimal Approach Here-->\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint findMax(vector&lt;int&gt; &amp;v) {\n    int maxi = INT_MIN;\n    int n = v.size();\n    //find the maximum:\n    for (int i = 0; i &lt; n; i++) {\n        maxi = max(maxi, v[i]);\n    }\n    return maxi;\n}\n\nint calculateTotalHours(vector&lt;int&gt; &amp;v, int hourly) {\n    int totalH = 0;\n    int n = v.size();\n    //find total hours:\n    for (int i = 0; i &lt; n; i++) {\n        totalH += ceil((double)(v[i]) / (double)(hourly));\n    }\n    return totalH;\n}\n\nint minimumRateToEatBananas(vector&lt;int&gt; v, int h) {\n    int low = 1, high = findMax(v);\n\n    //apply binary search:\n    while (low &lt;= high) {\n        int mid = (low + high) / 2;\n        int totalH = calculateTotalHours(v, mid);\n        if (totalH &lt;= h) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return low;\n}\n\nint main()\n{\n    vector&lt;int&gt; v = {7, 15, 6, 3};\n    int h = 8;\n    int ans = minimumRateToEatBananas(v, h);\n    cout &lt;&lt; \"Koko should eat atleast \" &lt;&lt; ans &lt;&lt; \" bananas/hr.\\n\";\n    return 0;\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block \" data-lang=\"java\">\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">\n\n<!-- Insert Java code of Optimal Approach Here -->\nimport java.util.*;\n\npublic class tUf {\n    public static int findMax(int[] v) {\n        int maxi = Integer.MIN_VALUE;;\n        int n = v.length;\n        //find the maximum:\n        for (int i = 0; i &lt; n; i++) {\n            maxi = Math.max(maxi, v[i]);\n        }\n        return maxi;\n    }\n\n    public static int calculateTotalHours(int[] v, int hourly) {\n        int totalH = 0;\n        int n = v.length;\n        //find total hours:\n        for (int i = 0; i &lt; n; i++) {\n            totalH += Math.ceil((double)(v[i]) / (double)(hourly));\n        }\n        return totalH;\n    }\n\n    public static int minimumRateToEatBananas(int[] v, int h) {\n        int low = 1, high = findMax(v);\n\n        //apply binary search:\n        while (low &lt;= high) {\n            int mid = (low + high) / 2;\n            int totalH = calculateTotalHours(v, mid);\n            if (totalH &lt;= h) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return low;\n    }\n\n    public static void main(String[] args) {\n        int[] v = {7, 15, 6, 3};\n        int h = 8;\n        int ans = minimumRateToEatBananas(v, h);\n        System.out.println(\"Koko should eat at least \" + ans + \" bananas/hr.\");\n    }\n}\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"python\">\n<pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">\n\n<!-- Insert Python code of Optimal Approach Here -->\nimport math\n\ndef findMax(v):\n    maxi = float('-inf')\n    n = len(v)\n    # Find the maximum\n    for i in range(n):\n        maxi = max(maxi, v[i])\n    return maxi\n\ndef calculateTotalHours(v, hourly):\n    totalH = 0\n    n = len(v)\n    # Find total hours\n    for i in range(n):\n        totalH += math.ceil(v[i] / hourly)\n    return totalH\n\ndef minimumRateToEatBananas(v, h):\n    low = 1\n    high = findMax(v)\n\n    # Apply binary search\n    while low &lt;= high:\n        mid = (low + high) // 2\n        totalH = calculateTotalHours(v, mid)\n        if totalH &lt;= h:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return low\n\nv = [7, 15, 6, 3]\nh = 8\nans = minimumRateToEatBananas(v, h)\nprint(\"Koko should eat at least\", ans, \"bananas/hr.\")\n</code>\n</pre>\n</div>\n<div class=\"code-block\" data-lang=\"javascript\">\n<pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">\n\n<!-- Insert javascript code of Brute Force Here -->\nfunction findMax(v) {\n    let maxi = -Infinity;\n    let n = v.length;\n    // Find the maximum\n    for (let i = 0; i &lt; n; i++) {\n        maxi = Math.max(maxi, v[i]);\n    }\n    return maxi;\n}\n\nfunction calculateTotalHours(v, hourly) {\n    let totalH = 0;\n    let n = v.length;\n    // Find total hours\n    for (let i = 0; i &lt; n; i++) {\n        totalH += Math.ceil(v[i] / hourly);\n    }\n    return totalH;\n}\n\nfunction minimumRateToEatBananas(v, h) {\n    let low = 1;\n    let high = findMax(v);\n\n    // Apply binary search\n    while (low &lt;= high) {\n        let mid = Math.floor((low + high) / 2);\n        let totalH = calculateTotalHours(v, mid);\n        if (totalH &lt;= h) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return low;\n}\n\nlet v = [7, 15, 6, 3];\nlet h = 8;\nlet ans = minimumRateToEatBananas(v, h);\nconsole.log(\"Koko should eat at least \" + ans + \" bananas/hr.\");\n\n</code>\n</pre>\n</div>\n<p>\n<!-- Insert Output of Optimal Apporach Here -->\n<strong>Output:</strong> Koko should eat atleast 5 bananas/hr. \n\n</p>\n</div>\n</details>\n<details class=\"secondary-details\">\n<summary class=\"secondary-summary\">\n<span>\nComplexity Analysis\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\">\n</path>\n</svg>\n</summary>\n<p>\n\n<!-- Insert Time and Space Complexity of Optimal Approach-->\n</p><p><strong>Time Complexity: </strong>O(N * log(max(a[]))), where max(a[]) is the maximum element in the array and N = size of the array.<br><strong>Reason: </strong>We are applying Binary search for the range [1, max(a[])], and for every value of \u2018mid\u2019, we are traversing the entire array inside the function named <strong>calculateTotalHours().</strong></p>\n<p><strong>Space Complexity: </strong>O(1) as we are not using any extra space to solve this problem.</p>\n<p></p>\n</details>\n</div>\n</details>\n</div>\n<!-- Optimal Approach Starts from here -->\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<!-- This is Video Explination Drop-Down -->\n<div class=\"dsa_article_youtube_video\" id=\"dsa_article_video_explanation\">\n<details>\n<summary class=\"main-summary\">\n<span>\nVideo Explanation\n</span>\n<svg class=\"arrow-svg opacity-75\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n<path d=\"M12.95 10.707l.707-.707L8 4.343 6.586 5.757 10.828 10l-4.242 4.243L8 15.657l4.95-4.95z\"></path>\n</svg>\n</summary>\n<div class=\"yt-video-wrapper\">\n\n<!-- Insert iframe embed Link of Youtube Video-->\n<iframe class=\"lazy-loaded\" loading=\"lazy\" title=\"Koko Eating Bananas\" width=\"810\" height=\"456\" data-lazy-type=\"iframe\" data-src=\"https://www.youtube.com/embed/qyfekrNni90\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\" src=\"https://www.youtube.com/embed/qyfekrNni90?feature=oembed\"></iframe><noscript>\n<iframe loading=\"lazy\" title=\"Koko Eating Bananas\" width=\"810\" height=\"456\" src=\"https://www.youtube.com/embed/qyfekrNni90\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe></noscript>\n</div>\n</details>\n</div>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script>\n\nconst codeSections = document.querySelectorAll('.code-section');\n\n// Get last selected language from localStorage or set default value\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\n// Update last selected language for all sections and store in localStorage\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\n// Handle copy button click event\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\n// Set initial state of the tabs\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<script>\nconst codeSections = document.querySelectorAll('.code-section');\n\nlet lastSelectedLanguage = localStorage.getItem('lastSelectedLanguage') || 'cpp'; \n\ncodeSections.forEach((section, sectionIndex) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\nconst copyBtn = section.querySelector('.copy-btn');\n\ncodeTabs.forEach((tab) => {\ntab.addEventListener('click', () => {\ncodeTabs.forEach((t) => {\nt.classList.remove('dsa_article_code_active');\n});\ntab.classList.add('dsa_article_code_active');\n\nconst lang = tab.dataset.lang;\nconst activeBlock = section.querySelector(`.code-block[data-lang=\"${lang}\"]`);\ncodeBlocks.forEach((block) => {\nif (block === activeBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n\nlastSelectedLanguage = lang;\nlocalStorage.setItem('lastSelectedLanguage', lang);\ncodeSections.forEach((otherSection, otherIndex) => {\nif (otherIndex !== sectionIndex) {\nconst otherTabs = otherSection.querySelectorAll('.code-tab');\notherTabs.forEach((otherTab) => {\nif (otherTab.dataset.lang === lang) {\notherTab.classList.add('dsa_article_code_active');\n} else {\notherTab.classList.remove('dsa_article_code_active');\n}\n});\nconst otherActiveBlock = otherSection.querySelector(`.code-block[data-lang=\"${lang}\"]`);\nconst otherCodeBlocks = otherSection.querySelectorAll('.code-block');\notherCodeBlocks.forEach((block) => {\nif (block === otherActiveBlock) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n}\n});\n});\n});\n\ncopyBtn.addEventListener('click', () => {\nconst activeBlock = section.querySelector('.code-block.dsa_article_code_active code');\nnavigator.clipboard.writeText(activeBlock.innerText);\ncopyBtn.classList.add('dsa_article_code_active');\nsetTimeout(() => {\ncopyBtn.classList.remove('dsa_article_code_active');\n}, 1000);\n});\n});\n\ncodeSections.forEach((section) => {\nconst codeTabs = section.querySelectorAll('.code-tab');\nconst codeBlocks = section.querySelectorAll('.code-block');\n\ncodeTabs.forEach((tab) => {\nif (tab.dataset.lang === lastSelectedLanguage) {\ntab.classList.add('dsa_article_code_active');\n} else {\ntab.classList.remove('dsa_article_code_active');\n}\n});\n\ncodeBlocks.forEach((block) => {\nif (block.dataset.lang === lastSelectedLanguage) {\nblock.classList.add('dsa_article_code_active');\n} else {\nblock.classList.remove('dsa_article_code_active');\n}\n});\n});\n</script>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js\"></script>\n<script src=\"index.js\"></script>\n<script>hljs.highlightAll();</script>\n<!-- /wp:html -->\n\n<!-- wp:html -->\n<script src=\"https://takeuforward.org/UXApproachDropDowns/2ApproachJSScript.js\"></script>\n<!-- /wp:html -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Special thanks to <strong><a href=\"https://www.linkedin.com/in/kriti39/\" target=\"_blank\" rel=\"noreferrer noopener\">KRITIDIPTA GHOSH</a></strong></em> <em>for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,&nbsp;</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->",
    "category_tag": "binary-search",
    "likes": 280,
    "preview": "Problem Statement: A monkey is given \u2018n\u2019 piles of bananas, whereas the 'ith' pile has \u2018a[i]\u2019 bananas. An integer \u2018h\u2019 is also given, which denotes the time (in hours) for all the bananas to be eaten..."
}