{
    "dislikes": 2,
    "video": "",
    "publishedOn": "Sun Mar 24 2024 22:12:09 GMT+0530 (India Standard Time)",
    "slug": "while-loops-in-programming",
    "aid": "2265",
    "tuf_plus": "",
    "title": "While Loops in Programming",
    "topics": [
        {
            "topic-id": "basics",
            "topic-title": "Introduction to DSA"
        }
    ],
    "category_tag": "while-loop",
    "likes": 181,
    "preview": "In case you are learning DSA, you should definitely check out our free A2Z DSA Course with videos and blogs. In the world of computer programming, loops are invaluable tools that allow us to execut...",
    "content": "<!-- wp:paragraph -->\n<p>In case you are learning DSA, you should definitely check out our free&nbsp;<a href=\"https://takeuforward.org/strivers-a2z-dsa-course/strivers-a2z-dsa-course-sheet-2/\">A2Z DSA Course</a>&nbsp;with videos and blogs.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In the world of computer programming, loops are invaluable tools that allow us to execute a block of <strong>code repeatedly</strong> until a<strong> certain condition is met</strong>. One such loop is the \"while\" loop.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>A while loop follows a simple sequence of steps:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Evaluation of Test Expression:</strong> The loop begins by evaluating a test expression.</li><li><strong>Condition Check:</strong> If the test expression is true, the code inside the loop's body is executed.</li><li><strong>Re-evaluation:</strong> After executing the code, the test expression is evaluated again.</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p><strong>Continuation or Termination: </strong>This process continues until the test expression becomes false, at which point the while loop terminates.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Syntax</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">while (condition) {\n    // body of the loop\n}\n</pre>\n<!-- /wp:preformatted -->\n\n<!-- wp:paragraph -->\n<p>A <strong>while loop</strong> is a control structure in programming that <strong>repeatedly executes a block</strong> of code as long as a specified<strong> condition remains true</strong>. A \"while\" loop will not execute the code at all if the <strong>initial condition </strong>is false. It relies on the condition being true from the outset for any code execution to occur.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":12598,\"width\":360,\"height\":248,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full is-resized\"><img src=\"https://static.takeuforward.org/wp/uploads/2023/09/while-loop.png\" alt=\"\" class=\"wp-image-12598\" width=\"360\" height=\"248\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>While loops can be best illustrated with the practical example of finding the <strong>Factorial</strong>. Factorial of a number 'n' is the product of all positive integers from 1 to 'n'. To compute this using a while loop, we initialise a <strong>factorial variable to 1</strong> and repeatedly <strong>multiply it by 'n' </strong>while <strong>decrementing 'n' until 'n' becomes 0</strong>. This ensures that we calculate the factorial correctly.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    \n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include &lt;iostream&gt;\nusing namespace std;\n\nint main() {\n    int n = 5;\n    int factorial = 1;\n\n    while (n &gt; 0) {\n        factorial *= n;\n        n--;\n    }\n\n    cout &lt;&lt; \"Factorial of 5 is: \" &lt;&lt; factorial &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Factorial of 5 is: 120</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">public class FactorialCalculator {\n    public static void main(String[] args) {\n        int n = 5;\n        int factorial = 1;\n\n        while (n &gt; 0) {\n            factorial *= n;\n            n--;\n        }\n\n        System.out.println(\"Factorial of 5 is: \" + factorial);\n    }\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> Factorial of 5 is: 120</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>While loops are particularly useful when you need to ensure that a block of code executes <strong>only when the condition is satisfied</strong> as it terminates as soon as that <strong>condition becomes false</strong>. This can be vital for tasks like<strong> validating user input </strong>or<strong> processing data until a specific condition is met</strong>. By checking the condition at the beginning of the loop, you can control whether the loop body is executed or not.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Termination Conditions:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In algorithm design, it's essential to define clear and well-defined termination conditions for while loops. The termination condition specifies when the loop should stop executing. Without proper termination conditions, a while loop can run indefinitely, leading to what's known as an \"infinite loop.\" Infinite loops can crash programs and consume excessive system resources, making them a critical issue to avoid.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It's crucial to define clear termination conditions for while loops in algorithms to prevent infinite loops. Termination conditions ensure that the loop will eventually exit, making the algorithm correct and efficient.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Optimisation:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Optimising while loops involves making them more efficient by minimising unnecessary iterations. One common optimization technique is to use loop control statements like break or continue within the loop body.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>break:</strong> It allows you to exit the loop prematurely, even before the termination condition is met. For example, if you're searching for a value in an array, once you find it, you can break out of the loop instead of continuing to search through the remaining elements.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>continue</strong>: It skips the current iteration of the loop and moves to the next one. This can be useful when you want to skip certain elements or avoid executing some code under specific conditions.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>By using these control statements judiciously, you can reduce the number of iterations, which can significantly improve the efficiency of your algorithm.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Code:</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    <div class=\"code-section secondary-details\">\n    <div class=\"code-tabs\">\n    <button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">C++</button>\n    <button class=\"code-tab\" data-lang=\"java\">Java</button>\n    \n    \n    <svg width=\"17\" class=\"copy-btn\" height=\"20\" viewBox=\"0 0 17 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M2 20C1.45 20 0.979002 19.804 0.587002 19.412C0.195002 19.02 -0.000664969 18.5493 1.69779e-06 18V4H2V18H13V20H2ZM6 16C5.45 16 4.979 15.804 4.587 15.412C4.195 15.02 3.99934 14.5493 4 14V2C4 1.45 4.196 0.979002 4.588 0.587002C4.98 0.195002 5.45067 -0.000664969 6 1.69779e-06H15C15.55 1.69779e-06 16.021 0.196002 16.413 0.588002C16.805 0.980002 17.0007 1.45067 17 2V14C17 14.55 16.804 15.021 16.412 15.413C16.02 15.805 15.5493 16.0007 15 16H6ZM6 14H15V2H6V14Z\">\n    </path>\n    </svg>\n    </div>\n    <div class=\"code-content\">\n    <div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include &lt;iostream&gt;\nusing namespace std;\n\nint main() {\n    int numbers[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n    int target = 6;\n\n    // Using 'break' to exit the loop early when the target is found\n    for (int num : numbers) {\n        if (num == target) {\n            cout &lt;&lt; \"Target found: \" &lt;&lt; target &lt;&lt; endl;\n            break; // Exit the loop immediately\n        }\n        cout &lt;&lt; \"Checking: \" &lt;&lt; num &lt;&lt; endl;\n    }\n\n    // Using 'continue' to skip specific elements\n    for (int num : numbers) {\n        if (num % 2 == 0) {\n            continue; // Skip even numbers\n        }\n        cout &lt;&lt; \"Odd number: \" &lt;&lt; num &lt;&lt; endl;\n    }\n\n    return 0;\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Checking: 1<br>Checking: 2<br>Checking: 3<br>Checking: 4<br>Checking: 5<br>Target found: 6<br>Odd number: 1<br>Odd number: 3<br>Odd number: 5<br>Odd number: 7<br>Odd number: 9</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    <div class=\"code-block \" data-lang=\"java\">\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">public class LoopOptimizationExample {\n    public static void main(String[] args) {\n        int[] numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n        int target = 6;\n\n        // Using 'break' to exit the loop early when the target is found\n        for (int num : numbers) {\n            if (num == target) {\n                System.out.println(\"Target found: \" + target);\n                break; // Exit the loop immediately\n            }\n            System.out.println(\"Checking: \" + num);\n        }\n\n        // Using 'continue' to skip specific elements\n        for (int num : numbers) {\n            if (num % 2 == 0) {\n                continue; // Skip even numbers\n            }\n            System.out.println(\"Odd number: \" + num);\n        }\n    }\n}\n</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Output:</strong> </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Checking: 1<br>Checking: 2<br>Checking: 3<br>Checking: 4<br>Checking: 5<br>Target found: 6<br>Odd number: 1<br>Odd number: 3<br>Odd number: 5<br>Odd number: 7<br>Odd number: 9</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n    </div>\n    </div>\n    </div>\n    \n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>The first loop uses <strong>break</strong> to <strong>exit the loop immediately</strong> when the target value is found, <strong>preventing unnecessary iterations.</strong></li><li>The second loop uses <strong>continue</strong> to <strong>skip even numbers</strong>, so only odd numbers are printed,<strong> avoiding the execution of code </strong>for even numbers.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em><em>Special thanks to\u00a0</em><strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268\" target=\"_blank\" rel=\"noreferrer noopener\">Gauri Tomar</a></strong><em>\u00a0for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam,\u00a0</em><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></em></p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:embed {\"url\":\"https://youtu.be/EAR7De6Goz4?si=clDZhNlPZt-dlnBc\\u0026t=3459\",\"type\":\"video\",\"providerNameSlug\":\"youtube\",\"responsive\":true,\"className\":\"wp-embed-aspect-16-9 wp-has-aspect-ratio\"} -->\n<figure class=\"wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio\"><div class=\"wp-block-embed__wrapper\">\nhttps://youtu.be/EAR7De6Goz4?si=clDZhNlPZt-dlnBc&amp;t=3459\n</div></figure>\n<!-- /wp:embed -->"
}